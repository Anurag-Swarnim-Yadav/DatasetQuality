,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> mining.subscribe <S2SV_blank> calls <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 2 ) ) ) ; return ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)""",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_to_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( yi. cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) goto out ;,0
5,<S2SV_ModStart> ; int64_t time ; uint64_t offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else { <S2SV_ModEnd> time = avio_rb64 <S2SV_ModStart> ) ; } if ( <S2SV_ModEnd> version == 1 <S2SV_ModStart> 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } index -> items [ i ]. version = version ; index -> items [ i ]. track_id = track_id ; index -> items [ i ]. field_length = fieldlength ; if (! index -> items ) { index -> item_count = 0 ; return AVERROR ( ENOMEM ) ; },0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt < 5 || tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } ret = core_tpg_register ( & vhost_scsi_fabric_configfs -> tf_ops, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> register <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - EINVAL ) ; } mutex_lock ( & vhost_scsi_mutex )",0
7,"<S2SV_ModStart> writers ) ) { GF_Box * stco = gf_list_get ( writers, 0 ) ; GF_Box * stsc = gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ;",0
9,<S2SV_ModStart> src ) ; clear_task_ebb ( dst ) ;,0
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> return c ; <S2SV_ModStart> -> child ; <S2SV_ModEnd> while ( c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options",0
12,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > MAX_UNFRAGMENT_HLEN ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> u64 nr, <S2SV_ModStart> ( PERF_TYPE_SOFTWARE, event_id <S2SV_ModEnd>, nr,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { int len = <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> data ) ] ; size_t alloc_size = <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ) ] ; size_t alloc_size = <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ) ] ; if (! alloc_size ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } if ( <S2SV_ModEnd> fileblock >= grub_le_to_cpu16 <S2SV_ModStart> len ) ) { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } else { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> ext = ( <S2SV_ModStart>. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ;",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> { int s0, s1, s2, s3, s4, s5, s6, s7 ; int t0, t1, t2, t3 ; int x0, x1, x2, x3 ; tran_high_t t0, t1, t2, t3 ; tran_high_t t0, t1, t2, t3 ; tran_high_t t0, t1, t2, t3 ; tran_high_t",0
16,<S2SV_ModStart> env ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret ) goto err_unlock ; },0
17,"<S2SV_ModStart> -> num_channels ; int64_t <S2SV_ModEnd> i ; wpc <S2SV_ModStart> ; int64_t i ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""libwavpack <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""too <S2SV_blank> many <S2SV_blank> WAVEPACK_CHANNELS <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = 0 ; config -> xmode = 0 ; } else if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!""",0
18,"<S2SV_ModStart> ; retry : if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModEnd> result = scsi_execute <S2SV_ModStart>, & sshdr, <S2SV_ModEnd> cgc -> timeout",0
19,<S2SV_ModStart> ( ) == 0x48454150 || get4 ( ) == 0x48454210 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454210 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int best_err ; int filt_best ; int filt_direction = 0 ; const int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_step = MIN ( filt_mid + filter_step, max_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cm -> tx_mode!= ONLY_4X4 ) bias = bias * cpi -> twopass.",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; <S2SV_ModStart> offset ) ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; vpx_write_token ( w, vpx_mv_fp_tree, mv_class == MV_CLASS_0? mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; vpx_write_token ( w, vpx_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; vpx_write_token ( w, vpx_mv_class0_tree, mvcomp -> class0_fp [ fr ] ) ; vpx_write_token ( w, vpx_mv_class0_tree, mvcomp -> class0_fp [ fr ] ) ; vpx_",0
23,<S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> ralg -> cra_rng <S2SV_ModStart>. seedsize : <S2SV_ModEnd> ralg -> seedsize,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) || sp -> sa_protocol > PX_PROTO_PPTP ) return - EINVAL,0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,"<S2SV_ModStart> int verbose ; jas_image_t * decoded_image ; jas_image_t * decoded_image <S2SV_ModStart> ; while ( ( decoded_image = jas_image_decode ( instream, fmtid, 0 ) ) < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> image <S2SV_blank> format\\n"" ) ; return EXIT_FAILURE ; } if ( decoded_image == NULL ) { fprintf ( stderr, ""invalid <S2SV_blank> image <S2SV_blank> format\\n"" ) ; return EXIT_FAILURE ; } <S2SV_ModStart> ( instream = jas_stream_fopen ( decoded_image, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", decoded_image ) ; exit ( EXIT_FAILURE ) ; } if ( decoded_image == NULL ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> console_verbose ( ) <S2SV_ModStart> ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", <S2SV_ModEnd> regs, 0 <S2SV_ModStart> ) ; die <S2SV_ModEnd> ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"",",0
28,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; <S2SV_ModStart> intf ) ; if ( intf1 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf1 -> desc. bNumInterfaces - 1 ; if ( alt < 0 ) return alt ; alt = alt2 -> desc. bNumInterfaces - 1 ; if ( alt < 0 ) return alt ; return usb_set_interface ( udev, intf1 -> desc. bInterfaceNumber, alt ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> sb, unsigned char * from, int fromlen, unsigned char * to ) { struct udf_sb_info * sb_info = UDF_SB ( sb ) ; struct udf_sb_info * udf_sb = UDF_SB ( sb ) ; struct udf_sb_info * udf_sb_info = & sb_info -> udf_sb_info ; <S2SV_ModStart> case 3 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break",0
31,"<S2SV_ModStart> ; } } if ( server. slaveof_linenum < 0 || server. slaveof_linenum >= totlines ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> line"" ; goto loaderr ; }",0
32,"<S2SV_ModStart> connection_id ) ; spin_lock_irqsave ( & tgtport -> lock, flags ) ;",0
33,<S2SV_ModStart> get_version_reply ) ; <S2SV_ModEnd> retval = -,0
34,"<S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_size < sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ) ; } return 1 ;,0
36,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) return - EINVAL ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) return - EINVAL ; ret = - EINVAL ; read_unlock_bh ( & l2tp_ip_lock ) ; lock_sock ( sk ) ; if ( sk -> sk_state!= TCP_CLOSE || sk -> sk_bound_dev_if!= addr -> l2tp_conn_id ) goto out_in_use ; ret = - EADDRINUSE ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST && chk_addr_ret!= RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_saddr = inet,0
38,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> ) ) { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } else { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } return max <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ),",0
40,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> strlen ( password ) ) ; memcpy ( hashed + 1, password, strlen ( password )",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> 0 } ; struct dvb_usb_device * d = d -> dev ; struct dvb_usb_device_state * state = d -> priv ; struct dvb_usb_device * adap = & d -> adap ; struct dvb_usb_device * adap = d -> adap ; struct dvb_usb_generic_rw * rw = d -> dev ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config,",0
43,<S2SV_ModStart> = transport -> asoc ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; sock_hold ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; sock_hold ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ),0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; }",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAX_SCANLINE_SIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> big <S2SV_blank> scanlinesizein <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; }",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_name ( e + 1, & pwd -> pw_name ) ; if ( r < 0 ) goto not_found ;",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { if (! buf ) return ; if (! get_page ( buf -> page ) ) return ;",0
51,"<S2SV_ModStart> ep2 ) ; if ( ep2 ) ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> ep=%s <S2SV_blank> "", tcount, ep2 ) ) ;",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> ; select ( <S2SV_ModEnd> reader -> bytes_available_fd <S2SV_ModStart> reader -> bytes_available_fd, & read_fds, NULL",0
54,"<S2SV_ModStart> wp -> config -> pm_max_requests ; if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeded"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; if ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; } reset_fpf_position ( twopass, position ) ; if ( j == still",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { <S2SV_ModStart> ; err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; if ( err ) return err ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags ) ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : 0 <S2SV_ModEnd> ; rc = <S2SV_ModStart> handle ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags ) ; err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; if (! err ) err = PTR_ERR ( handle,0
57,"<S2SV_ModStart> if ( offset < 0 || offset + size > i_size_read ( inode ) ) { ret = ext4_convert_unwritten_extents ( inode,",0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ;",0
59,"<S2SV_ModStart> ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
60,"<S2SV_ModStart> stlv_len ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> len - 2 ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; trunc : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> case ISIS_SUBTLV",0
61,"<S2SV_ModStart> ) { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,"<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 || <S2SV_ModStart> ) ) return 0 ; if ( flags & TH_SYN ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; } ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( flags & TH_ACK ) ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> flags ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } ND_PRINT ( ( ndo,",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; pid_t new_pid ; uid_t new_uid ; gid_t new_gid <S2SV_ModEnd> ; ret = <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( status < 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( status < 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( status < 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1)"" ) ; shutdown ( ipc_socket, SHUT",0
65,<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> + 1 ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> + 1 ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> + 1 ; if ( strlen ( line ) < 3 ) goto out_err ;,0
66,<S2SV_ModStart> header -> biSize < 12U || header -> biSize < 52U || header -> biSize < 56U || header -> biSize < 108U || header -> biSize < 124U,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> - ENOBUFS ; <S2SV_ModEnd> line. clock_type,0
71,"<S2SV_ModStart> arg ) { struct scsi_device * sdev = bd -> bd_disk -> private_data ; struct scsi_device * sdev = scsi_disk ( bd -> bd_disk ) ; if (! sdev ) return - ENXIO ; return scsi_cmd_ioctl ( sdev,",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) return ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ; <S2SV_ModStart> - EFAULT ; ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; k",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,<S2SV_ModStart> ; den = avio_tell <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; den += avio_tell <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; den += avio_tell <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; den += avio_tell <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; den += avio_tell <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; den += avio_tell <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; den += avio_tell <S2SV_ModEnd> ( pb ),0
76,"<S2SV_ModStart> = NULL ; if (! mxf_tc ) { mxf_set_error ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = NULL ; if (! mxf_tc ) { mxf_set_error ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = NULL ; if (! mxf_tc ) { mxf_set_error ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { mxf_set_error ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { mxf_set_error ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock <S2SV_ModEnd> ( mntent,",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> ; } ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> Cookie <S2SV_blank> Length <S2SV_blank> [%u]"" <S2SV_ModEnd>, l2info -> <S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> Cookie <S2SV_blank> Length <S2SV_blank> [%u]"" <S2SV_ModEnd>, l2info -> <S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> Cookie <S2SV_blank> Length <S2SV_blank> [%u]"" <S2SV_ModEnd>, l2info -> <S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> Cookie <S2SV_blank> Length <S2SV_blank> [%u]"" <S2SV_ModEnd>, l2info -> <S2SV_ModStart> ( ndo, ""\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\",0
80,<S2SV_ModStart> NF_STOLEN ; # if IS_ENABLED ( CONFIG_NF_CONNTRACK ) if ( nf_ct_is_confirmed ( skb -> nfct ) ) return NF_ACCEPT ; # endif,0
81,"<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_len esn_len ; <S2SV_ModStart> rta ) ; esn_len = nla_len ( rta ) ; <S2SV_ModStart> - ENOMEM ; up = kmemdup ( & esn_len, GFP_KERNEL ) ; if (! up ) { kfree ( p ) ; return - ENOMEM ; } <S2SV_ModStart> - ENOMEM ; }",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModStart> ( MagickRealType ) (,0
84,"<S2SV_ModStart> ) ) ; btif_config_set_string ( remote_bd_addr, bdstr, sizeof ( bdstr_t ) ) ;",0
85,"<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE ) { if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } } if ( numcols > JPC_QMFB_COLGRPSIZE ) { if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE ) { if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) ) {",0
86,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> for ( map <S2SV_ModStart>. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; res = VPX_CODEC_OK ; break ; } } } else { res = VPX_CODEC_INVALID_PARAM ; },0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name, <S2SV_ModEnd> void * data <S2SV_ModStart>. hash ) ; if ( bitmap_pos < 0 ) { <S2SV_ModEnd> char * name <S2SV_ModStart> name ) ; free ( name ) ; return ; } <S2SV_ModEnd> bitmap_set ( base",0
89,"<S2SV_ModStart> ; newparity = baud_to_parity ( opts. baud ) ; newbits = baud_to_bits ( opts. baud ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity, newbits ) ; }",0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> lock ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> lock ) ;,0
91,<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_sock * <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> po -> fanout ) { mutex_unlock ( & fanout_mutex ) ; return - EALREADY ; } if ( type == PACKET_FANOUT_HASH : case PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : if ( type == PACKET_FANOUT_HASH : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_CBPF : case,0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp,",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> int frame_in, <S2SV_ModStart> uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ;",0
95,"<S2SV_ModStart> ; if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ) ;",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_",0
98,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if ( access ( page, R_",0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ) { ret <S2SV_ModStart> flag = EXT4_IO_UNWRITTEN <S2SV_ModEnd> ; else ext4_set_inode_state <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto",0
100,"<S2SV_ModStart> 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 2)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 2 ) ; <S2SV_ModStart> 2 ) ; if ( len < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 2)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 (",0
101,"<S2SV_ModStart> (! caller_is_in_group ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (",0
102,"<S2SV_ModStart> flag ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { double level = 6.0e-05 * * q * * q +.306 * * q +.306 * * q +.306 * * q +.0067 * * q +.306 * * q +.306 * * q +.306 * * q +.306 * * q +.0065 * q +.5 ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post",0
103,"<S2SV_ModStart> ) ) { if ( ptr -> flags & FD_RAW_WRITE ) { if ( copy_to_user ( param, ptr -> data, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; } else { if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = - EFAULT ; } } else { long length = ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } } else if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if (",0
104,"<S2SV_ModStart> : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP )",0
105,"<S2SV_ModStart> int ext4_xattr_cache_insert ( <S2SV_ModEnd> struct mb2_cache * <S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s, <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,"<S2SV_ModStart> L ) ; luaZ_checkstack ( p -> z, 1 ) ;",0
108,<S2SV_ModStart> int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; if ( copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( dev_num, size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; if (! di ) return - ENXIO",0
111,"<S2SV_ModStart> ; trunc : if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, u_int length <S2SV_ModStart> * msg ; <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> pdu_len ) ; if ( length < 4 ) goto trunc ; <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : if ( pdu_len < 4 ) goto trunc ; <S2SV_ModStart> case RPKI_RTR_RESET_QUERY_PDU : if ( pdu_len < 4 ) goto trunc ; <S2SV_ModStart> case RPKI_RTR_CACHE_RESET_PDU : if ( pdu_len < 4 ) goto trunc ; <S2SV_ModStart> case RPKI_RTR_CACHE_RESPONSE_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x"", indent_string ( indent + 2 ), EXTRACT_16BITS ( pdu_header -> u. session_id ) ) ; if ( length < 4 ) goto trunc ; <S2SV_ModStart> case RPKI_RTR_IPV4_PREFIX_PDU : if ( pdu_len < 4",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; memset ( & facilities, 0x00, sizeof ( struct rose_facilities_struct ) ) ; <S2SV_ModStart>! rose_parse_facilities ( skb -> data + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = sk_acceptq_is_full ( sk ) ) || ( make =",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ) ) { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> ) ) ; } else { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModStart> } else { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> ) ) { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> } else { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> } else { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> } else { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> ) ) { if ( ( opt_flags & P_ALLOCED ) == FALSE ) { <S2SV_ModStart> } else { if ( ( opt_flags & P_ALLOCED ) == TRUE ) { <S2SV_ModStart> } else { if ( ( opt_flags & P_ALLOCED ) == TRUE ) { if ( ( opt_flags & P_ALLOCED ) == TRUE ) {,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_net * net = o2nm_cluster_from_node ( node ) ; struct o2nm_net_context * ctx ; <S2SV_ModStart> ) ; } ctx = o2nm_node_net_context ( node ) ; if ( ctx ) { struct o2nm_net_context * ctx = to_net_context ( node ) ; struct o2nm_net_context * ctx = o2nm_net_context ( node ) ; struct o2net_net * net = net_generic ( net, o2nm_net_context_id ( node ) ; struct o2nm_net_context * ctx = o2nm_net_context_from_node ( node ) ; if ( ctx ) { struct o2nm_net_context * ctx = o2nm_net_context ( ctx ) ; struct o2nm_net_context * ctx = o2nm_net_context ( ctx ) ; struct o2net_net * net = net_generic ( net, o2nm_net_context -> net_ctx ; struct o2nm_net_context * ctx ; struct o2nm_net_context * ctx =",0
118,"<S2SV_ModStart> : isoclns_print ( ndo <S2SV_ModEnd>, p,",0
119,"<S2SV_ModStart> '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; }",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT32 bitsSwizzled, i_Swizzled ; TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits ; UINT8 * tpm2b_i_2Ptr = & tpm2bLabel. t. buffer [ 0 ] ; * ( UINT32 * ) tpm2bBitsPtr = tpm2bBits. t. buffer [ 0 ] ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled",0
121,"<S2SV_ModStart> size_t size ; if ( width > UINT32_MAX || height > UINT32_MAX ) { goto error ; } if ( jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tlx, 0 ) ||! jas_safe_intfast32_add ( tly, tly, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_",0
122,<S2SV_ModStart> s ) { if ( s < 0 ) { abort ( ) ; },0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EACCES ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; }",0
124,"<S2SV_ModStart> ; MATLAB_KO : if ( clone_info == DestroyImageInfo ( clone_info ) ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) { spin_unlock_bh ( & net -> nsid_lock ) ; return peer ; } <S2SV_ModEnd> spin_unlock_bh ( &,0
126,"<S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { <S2SV_ModStart> ; } } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { <S2SV_ModStart> content_buf",0
127,"<S2SV_ModStart> ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_END_LLDP_TLV",0
128,<S2SV_ModStart> == datalen && ( <S2SV_ModStart> && ( flags & ASN1_FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ASN1_FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart>,0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> assocparams, 0, sizeof ( struct sctp_association_params ) ) ;",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = get_bits ( gb, 4 ) ; } else { s -> avctx -> profile = 0 ; } if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; int i ; <S2SV_ModStart> flags ) ; i = readw ( mpu -> dev -> MIDQ + JQS_wTail ) ; if ( i >= sizeof ( struct snd_rawmidi_substream ) ) { snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; } else { u16 wTmp, val ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_warn ( "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } } <S2SV_null>,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ;\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; __be32 * savep ; uint32_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & savep, & savep ) )!= 0 ) goto out ; if ( unlikely ( status = - EIO ; if ( unlikely ( status!= - EINVAL ) ) return - EIO ; if ( unlikely ( status!= - EINVAL ) ) return - EINVAL ; if ( unlikely ( xdr -> len < hdrlen ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> hdrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", hdrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > MAX_UFO_FRAGMENT_HLEN ) ) { if ( unlikely ( unfrag_ip6hlen > MAX_UFO_FRAGMENT_HLEN ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
138,<S2SV_ModStart> while ( ( ( <S2SV_ModStart> ]!= 0 ) && ( i < to_read ),0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> AVPALETTE_SIZE ) ; if (! in -> data [ plane ] ) { av_frame_free ( & in ) ; return AVERROR ( ENOMEM ) ; },0
141,"<S2SV_ModStart> '/' ) { _odbcinst_FileINI ( szFileName ) ; snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szFileName, pszFileName ) ; } else if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } else if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if (",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; }",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> ) ) ; if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigr",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; SQUASHFS_LOOKUP_BLOCKS_EXT ( sBlk. s. inodes, & res ) ; if ( res < 0 ) { ERROR ( ""parse_exports_table: <S2SV_blank> invalid <S2SV_blank> inode <S2SV_blank> range\\n"" ) ; return FALSE ; } <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS_EXT ( sBlk. s. inodes, & res ) ] ; if ( res < 0 ) { ERROR ( ""parse_exports_table: <S2SV_blank> invalid <S2SV_blank> inode <S2SV_blank> range\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res < 0 ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } if ( res < 0 ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ;",0
149,"<S2SV_ModStart> ; } ptr = strchr ( ptr, '/' ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw",0
150,<S2SV_ModStart> flags |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> = HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 <S2SV_ModEnd> ) ; }",0
152,"<S2SV_ModStart> ) ) ; rcu_assign_pointer ( np -> opt, fl6 ) ; <S2SV_ModStart> & final ) ; rcu_assign_pointer ( inet -> inet_sport, fl6. fl6_dport ) ; rcu_assign_pointer ( inet -> inet_sport, fl6. fl6_sport ) ;",0
153,<S2SV_ModStart> = 0.0 ; TIFF_uint16 <S2SV_ModEnd> nstrips = 0 <S2SV_ModStart> ntiles = 0 ; TIFF_uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> nstrips ++ ; TIFF_uint16 <S2SV_ModEnd> ntiles ++ ; <S2SV_ModStart> ntiles ++ ; TIFF_uint16 <S2SV_ModEnd> nstrips ++ ; <S2SV_ModStart> nstrips ++ ; TIFF_uint16 <S2SV_ModEnd> ntiles ++ ; <S2SV_ModStart> ntiles ++ ; TIFF_uint16 <S2SV_ModEnd> nstrips ++ ; <S2SV_ModStart> ntiles ++ ; TIFF_uint16 <S2SV_ModEnd> nstrips ++ ;,0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp13"" ) == 0 ) { ctrl_args = vp13_args ; ctrl_args_map = vp13_arg_ctrl_map ; # endif } else if ( strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val",0
155,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( r = <S2SV_ModStart> ) )!= 0 ) fatal ( ""%s: <S2SV_blank> sshbuf_put_u64: <S2SV_blank> %s"", __func__, r ) ;",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } if ( gr -> gr_ctx. value == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ( FALSE ) ; }",0
159,<S2SV_ModStart> err = 0 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; <S2SV_ModStart> out ; } ei -> i_block = newblock ;,0
160,"<S2SV_ModStart> } if ( preverify_ok &&! SSL_verify_peer ( ssl, c -> opt -> option. verify_peer ) ) { SSL_SESSION * sess ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_verify_peer ( c -> ssl, sess, c -> opt -> option. verify_peer ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
161,"<S2SV_ModStart> int ret ; if (! parent_ns ||! kuid_has_mapping ( parent_ns, owner ) ||! kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; if (",0
163,"<S2SV_ModStart> ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"", JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) ; return AVERROR_INVALIDDATA ; } else { c -> nreslevels2decode = c -> nreslevels - s -> reduction_factor ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_ModStart> CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; if (",0
165,<S2SV_ModStart> ts_status ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ; is_drop_n_account = ( skb -> pkt_type == PACKET_LOOPBACK ) ; if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUM_VALID ; if ( skb -> pkt_type == PACKET_OUTGOING && ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) ) status |= TP_STATUS_CSUMNOTREADY ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> ip_,0
166,"<S2SV_ModStart> ) ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { list_add_tail ( & asoc -> peer. transport_addr_list, & new -> peer. transport_addr_list ) ; sctp_assoc_rm_peer ( asoc, trans ) ; }",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ;,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> lsm_set_label_at ( int <S2SV_ModStart> ( name, ""nop"" ) == 0 ) goto out ; if ( strcmp ( name, ""none"" ) == 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank>",0
169,<S2SV_ModStart> ) ) { if ( res -> pdx < 0 || res -> pdy < 0 || res -> pdx >= res -> pdx || res -> pdy >= res -> pdy || res -> pdy < 0 || res -> pdy >= res -> pdy ) { continue ; },0
170,<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart>. addr ) ; perf_event_update_userpage ( event <S2SV_ModEnd> ) ; },0
171,<S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. bits_left += cpi -> rc. projected_frame_size ; } else { cpi -> twopass. bits_left -= bits_used ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
172,<S2SV_ModStart> charlen ; } if ( num >= totallen ) { <S2SV_ModStart> num ++ ; } else { UNCHAR ; },0
173,"<S2SV_ModStart> * header, <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; if (! mb2_cache ) return NULL ; if (! header -> h_hash ) return NULL ; hash = le32_to_cpu ( header -> h_hash ) ; ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, """,0
174,"<S2SV_ModStart> data_offset ) { gchar line [ COSINE_LINE_LENGTH + 1 ] ; <S2SV_ModStart> = offset ; if (! wth -> frame_buffer ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, & <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, & <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, err_info ) <S2SV_ModEnd> ; } <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if (",0
177,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
178,"<S2SV_ModStart> - ENOMEM ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( <S2SV_ModStart> ) arg, hdr. size_in ) ) { ret = - EFAULT ; goto out ; } if (",0
179,<S2SV_ModStart> int hstartcol ; jpc_fix_t * buf2 ; jpc_fix_t * buf2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * src2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * dstptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ) ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ;,0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; ext2_xattr_release_super <S2SV_ModEnd> ( sb ),0
183,"<S2SV_ModStart> err_free_urbinfo ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg (",0
184,"<S2SV_ModStart> len ) ; if ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> write <S2SV_blank> buffer <S2SV_blank> to <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; }",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; } else { return NULL ; } },0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock",0
187,"<S2SV_ModStart> ; if ( avio_read_u16 ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> frame <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) avio_rb32 ( pb ) ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_u16 ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> frame <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) avio_rb32 ( pb ) ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_u16 ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> frame <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) avio_rb32 ( pb ) ) ; return AVERROR ( EINVAL ) ; }",0
188,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; }",0
189,"<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> # ifdef <S2SV_ModStart> ( statsdir, ""cryptostats"", & cryptostats ) ; <S2SV_ModEnd> # ifdef DEBUG_TIMING <S2SV_ModStart> ( statsdir, ""timingstats"", & timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
190,"<S2SV_ModStart> = NULL ; const <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> if ( (",0
191,"<S2SV_ModStart> prev ) ; attach_shadowed <S2SV_ModEnd> ( mnt,",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> ds ) wrmsrl ( MSR_DS_BASE, next -> ds ) ; if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next ->",0
193,<S2SV_ModStart> dd ) ; if (! g_cd ) { update_gui_state_from_problem_data ( 0 ) ; } else { update_gui_state_from_problem_data ( 1 ) ; },0
194,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << DB_VECTOR ) | ( 1u << BP_VECTOR,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; strncpy <S2SV_ModEnd> ( temp, <S2SV_ModStart> NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } if (",0
197,"<S2SV_ModStart> int transhdrlen, struct frag_hdr fhdr, <S2SV_ModStart> = SKB_GSO_UDP ; fhdr. identification = htonl ( fhdr. identification ) ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ;",0
198,<S2SV_ModStart> res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> res ) goto fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail <S2SV_ModEnd> ; mod_timer (,0
199,"<S2SV_ModStart> ] ) ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> const buffers [ 5 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> u_stride, src -> v_stride, src -> alpha_stride } ; const int strides [ 5 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> count ) ) return 0 ; <S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> stable ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( hdr + dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline void assign_eip_near ( struct x86_emulate_ctxt * ctxt <S2SV_ModEnd>, ulong dst <S2SV_ModStart> ) { switch ( ctxt -> op_bits ) { case 1 : ctxt -> _eip = ( u16 ) dst ; break ; case 2 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } break ; case 4 : ctxt -> _eip = ( u16 ) dst ; break ; case 8 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } break ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining <S2SV_ModEnd> ( tvb,",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == WRITE ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; else ret = <S2SV_ModEnd> __blockdev_direct_IO ( iocb",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
208,"<S2SV_ModStart> + 1 ) ; perf_event_update_userpage ( event, <S2SV_ModEnd> val ) ;",0
209,<S2SV_ModStart> len = get_line_size (,0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; mod_ty mod ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_end >= expr_start ) ; assert ( * expr_start == '{' || * expr_start == '}' || * expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; memcpy ( str + 2, expr_start, len ) ; str",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ;",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> len ) ; if (! <S2SV_ModStart> plen ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ;",0
215,"<S2SV_ModStart> ) ) ; if ( retval == EEXIST ) { xfs_trans_log_buf ( context -> trans, bp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED",0
216,"<S2SV_ModStart> if ( COMPAT_USE_32BIT_TIME ) return __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, ( struct timespec * ) timeout ) ; if ( <S2SV_ModStart> ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> ; ret = <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } else { ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL_MIN <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX",0
221,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ; } repo_config = perf_pathdup ( ""config"" ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx <S2SV_ModStart> event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> ( event -> <S2SV_ModEnd> pmu!= leader_pmu <S2SV_ModStart>!= leader_pmu || event -> <S2SV_ModEnd> state < PERF_EVENT_STATE_OFF <S2SV_ModStart> return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event ) < 0 ) { pr_err ( ""get_event_idx <S2SV_blank> failed"" ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace <S2SV_ModEnd> * ns, <S2SV_ModStart> return true ; if ( ns_capable ( ns -> parent, cap_setid ) ) return true ; if (",0
226,<S2SV_ModStart> ++ ) { if ( j == a -> num_values - 1 ) { <S2SV_ModStart> len ) ; } <S2SV_ModStart> } return body <S2SV_ModEnd> ; } <S2SV_null>,0
227,"<S2SV_ModStart> hexline * hx <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; int pos <S2SV_ModStart> = 0 ; hx = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModStart> = 1 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EINVAL ; } } else ret = - EIO ; kfree ( hx ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
229,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart>, c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> failed <S2SV_blank> inquire_context, <S2SV_blank> stat=%u"" ), maj_stat ) ; log_badauth ( maj_stat, min_stat, rqstp -> rq_xprt, NULL ) ; goto fail_princ",0
230,"<S2SV_ModStart> * bo ; uint32_t shader_state_size ; uint32_t shader_state_size ; <S2SV_ModStart> bo ; if ( args -> shader_rec_count >= UINT_MAX / sizeof ( struct vc4_shader_state ) || args -> shader_rec_size >= exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } shader_state_size = args -> shader_rec_size ; if ( copy_from_user ( shader_state_u, ( void __user * ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( shader_state_u, ( void __user * ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } shader_state_size = args -> shader_state_size ; if ( copy_from_user ( shader_state_u, ( void __user * ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; }",0
231,<S2SV_ModStart> # endif if ( zip -> zipx_lzma_valid ) { lzma_end ( & zip -> zipx_lzma_stream ) ; } # endif,0
232,<S2SV_ModStart> -> vm_file ) ; ext4_inode_dio_wait ( inode ) ; <S2SV_ModStart> -> i_sb ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block_write ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> ) { case '\\t' : case '\\r' : case '\\t' : <S2SV_ModStart> case '\\n' : case '\\t' : break ; default : * b ++ = * arg ; break ; } <S2SV_ModEnd> arg ++ ;,0
235,"<S2SV_ModStart> ) ) ; if ( cp ) ND_PRINT ( ( ndo, ""%s:"", NPSTR ( cp ) ) ) ;",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; <S2SV_ModStart> ice_conn ) ; if ( client == NULL ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> client <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; return FALSE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return TRUE ; } gsm_store_add ( server -> priv -> client_store, G_OBJECT ( client ), G_OBJECT ( NULL ) ) ; g_object_unref ( client ) ;",0
237,<S2SV_ModStart> ; if ( unlikely (,0
238,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde2"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde3"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde3"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde2"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde3"", "".git/foobar"" ) ;",0
239,"<S2SV_ModStart> ; break ; case SO_REUSEADDR : v. val =!! sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val =!! sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case",0
240,<S2SV_ModStart> ) { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> ) ; else <S2SV_ModEnd> msg -> msg_namelen,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const int stride [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int buffers [ 4 ] = { src -> y_stride, src -> uv_buffer, src -> uv_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z ) ; } }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL )",0
244,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & old ) ;",0
245,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_nameen = 0 ;,0
247,"<S2SV_ModStart> ni ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> ; register u_int <S2SV_ModEnd> j ; int <S2SV_ModStart> ; if ( <S2SV_ModEnd> j == 1 <S2SV_ModStart> 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni )!= i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_REQUEST : j = length / sizeof ( * ni ) ;",0
248,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ret < 0,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,<S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ;,0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight > 1.0 ) { _gdContributionsFree ( res ) ; return NULL ; },0
252,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( & <S2SV_ModStart> ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> ) { Com_Printf <S2SV_ModEnd> ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ;",0
254,<S2SV_ModStart> ; int sl ; if ( cursor -> ns == NULL ) { cursor -> err = MONGO_CURSOR_INVALID ; return MONGO_ERROR ; },0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { mobj_free ( mobj ) ; return NULL ; } <S2SV_ModStart> mobj ) ; memset <S2SV_ModEnd> ( mobj_get_va (,0
256,<S2SV_ModStart> -> it_overrun += incr <S2SV_ModEnd> ; delta -=,0
257,"<S2SV_ModStart> * for_ch ; type_ty type ; <S2SV_ModStart> ; if ( NCH ( n ) == ( 1 + is_async ) ) { type = TYPE ( CHILD ( n, 0 ) ) ; is_async = 1 ; } else { type = TYPE ( CHILD ( n, 0 ) ) ; is_async = 0 ; } if ( type == TYPE_COMMENT ) { ast_error ( c, n, ""Comment <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena )",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * * mi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ] ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, seg, mbmi -> segment_id ) ; write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. iov_len ) ; <S2SV_ModStart> ) ; } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. iov_len ) ;",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } if (",0
263,"<S2SV_ModStart> maxn ) { SWF_LOG <S2SV_ModEnd> ( ""Action <S2SV_blank> overflow!!"" ) <S2SV_ModStart> ; # endif switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : return decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_END : return 0 ; case SWFACTION_GOTOLABEL : return decompileGOTOLABEL ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFR",0
264,<S2SV_ModStart> -> stobj -> stevedore == NULL ) { bo -> stobj -> stevedore = NULL ; bo -> fetch_objcore -> flags &= ~ OC_F_BUSY ; } <S2SV_ModStart> -> stobj -> stevedore == NULL ) { bo -> stobj -> stevedore = NULL ; },0
265,<S2SV_ModStart> out ; } if ( i >= table -> max ) { err = - EINVAL ; goto out ; },0
266,"<S2SV_ModStart> ( len < 2 <S2SV_ModEnd> ) { return <S2SV_ModStart> 1 ) ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; }",0
267,<S2SV_ModStart> -> skip_clock_update = 1 ;,0
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> ( 2 + <S2SV_ModStart> -> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * azModuleArg ;,0
270,<S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart>, dwFlags ) ; if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; } } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags ) ; goto Error ; } if ( lIsInput ) { <S2SV_ModStart>, dwFlags )",0
272,<S2SV_ModStart> 32 ) { RBinAddr * ba ; <S2SV_ModStart> } else { RBinAddr * ba ; <S2SV_ModStart> } else { RBinAddr * ba ; <S2SV_ModStart> } else { RBinAddr * ba ; <S2SV_ModStart> } } } <S2SV_ModEnd> free ( buf,0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_ADMIN_GROUP : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; } else if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ; } else if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string (",0
274,"<S2SV_ModStart> 1 ] ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ia_esbr_hbe_txposer_err ( ptr_hbe_txposer, IXHEAACD_QMF_SYNTH_ERR_FMT, ""ixheaacd_complex_anal_filt"", ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ) ) { ia_esbr_hbe_txposer_err ( ptr_hbe_txposer, IXHEAACD_QMF_SYNTH_ERR_FMT, ""ixheaacd_complex_anal_filt"", ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k",0
275,"<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { UChar * p2 = ( UChar * ) NULL ; <S2SV_ModStart> -> enc, p2 ) ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { UChar * p3 = ( UChar * ) NULL ; while (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { UChar * p4 = ( UChar * ) NULL ; while (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { UChar * p2 = ( UChar * ) NULL ; while (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { UChar * p3 = ( UChar * ) NULL ; while (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { UChar * p4 = ( UChar * ) NULL ; while (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { U",0
276,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqd = bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ;",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> ; RING_FINAL_CHECK_FOR_REQUESTS ( <S2SV_ModEnd> vif -> tx <S2SV_ModStart> vif -> tx. req_cons <S2SV_ModEnd> ) ; if <S2SV_ModStart>. req_cons ; <S2SV_ModEnd> netbk_tx_err ( vif <S2SV_ModStart> ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModStart>. req_cons ; <S2SV_ModEnd> netbk_tx_err ( vif <S2SV_ModStart> ) ) { netbk_tx_err ( vif, & txreq ) ; break ; case XEN_NETTXF_extra_info : work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; netbk_tx_err ( vif, & txreq ) ; break ; case XEN_NETTXF_extra_info : work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; break ; case XEN_NETTXF_extra_info : work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx.",0
279,<S2SV_ModStart> cb -> args [ 0 ] ; struct net * net = sock_net ( cb -> skb -> sk ) ; <S2SV_ModStart> walk = ( struct xfrm_policy_walk,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> ; struct pending_tx_info <S2SV_ModEnd> * pending_tx_info = <S2SV_ModStart> status ; if ( unlikely ( netbk -> tx_state!= XEN_NETIF_TX_IN_PROGRESS ) ) { <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; continue ; } <S2SV_ModEnd> txp = & <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; if ( unlikely ( err ) ) { if ( unlikely ( netbk -> tx_state!= XEN_NETIF_TX_IN_PROGRESS ) ) { netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; } else { netbk -> tx_state = XEN_NETIF",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
284,"<S2SV_ModStart> ( incoming_cn_msg ) ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ;",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; if ( client -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> confirmations && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + y ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> fibh -> sbh <S2SV_ModStart> ) goto out_err ; if (! fibh -> ebh ) goto out_err ; fi = udf_tread ( dir -> i_sb, block ) ; if (! fi ) goto out_err ; if (",0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL && ipvs -> fw_version >= IP_VS_FW_VERSION_1 && ipvs -> fw_version <= IP_VS_FW2_VERSION ) { memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ; memset ( & d [ 2 ], 0, sizeof ( d [ 2 ] ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memset ( & d [ 4 ], 0, sizeof ( d [ 4 ] ) ) ; memset ( & d [ 5 ], 0, sizeof ( d [ 5 ] ) ) ; memset ( & d [ 6 ], sizeof ( d [ 6 ] ) ) ; memset ( & d [ 7 ], sizeof ( d [ 7 ] ) ) ; memset ( & d [ 8 ], sizeof ( d [ 8 ] ) ) ; memset ( & d [ 7 ], sizeof ( d [ 7 ] ) ) ; memset ( & d [ 8 ], sizeof ( d [ 8 ]",0
290,"<S2SV_ModStart> ; err = ip6_xmit_flow ( sk, skb, fl6, np -> opt, np -> tclass",0
291,<S2SV_ModStart> hdr ; ssize_t result ; if ( unlikely (! ib_ucm_file_access ( filp ) ) ) return - EACCES,0
292,"<S2SV_ModStart> * fpath = NULL, * cgdir = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> O_RDWR ) ) { if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_may_access ( fc -> pid, controller, path1, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
293,<S2SV_ModStart> queue ) ) { kfree ( cd ) ; cd = NULL ; continue ; } <S2SV_ModEnd> INIT_LIST_HEAD ( &,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( image -> number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if",0
296,"<S2SV_ModStart> ; int64_t index_pts ; <S2SV_ModStart> ) pktnum ; index_pts = FFMAX ( av_rescale ( itime, i, 10000 ), 0 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; } <S2SV_ModStart> ) pktnum ; index_pts = FFMAX ( index_pts, i, 10000 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; }",0
297,<S2SV_ModStart> srp ) ; <S2SV_ModEnd> srp -> done <S2SV_ModStart> srp ) ; <S2SV_ModEnd> return 0 ;,0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root (",0
299,<S2SV_ModStart> data ) { if ( ctx -> codec_state!= VPX_CODEC_STATE_IDLE ) { return VPX_CODEC_ERROR_INVALID_DATA ; },0
300,<S2SV_ModStart> 0 ) { char * tmpptr ; tmpptr = ( char * ) key ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> key ) ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; },0
301,"<S2SV_ModStart> ( t -> stamp_path <S2SV_ModEnd>, true, <S2SV_ModStart>, UID_INVALID, GID_INVALID <S2SV_ModEnd>, 0 )",0
302,<S2SV_ModStart> ( box = jas_malloc ( <S2SV_ModEnd> sizeof ( jp2_box_t <S2SV_ModStart> ( box = jas_malloc ( <S2SV_ModEnd> sizeof ( jp2_box_t <S2SV_ModStart> ( box = jas_malloc ( <S2SV_ModEnd> sizeof ( jp2_box_t <S2SV_ModStart> ( box = jas_malloc ( <S2SV_ModEnd> sizeof ( jp2_box_t <S2SV_ModStart> ( box = jas_malloc ( <S2SV_ModEnd> sizeof ( jp2_box_t,0
303,"<S2SV_ModStart> int Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> Py_ssize_t i ; <S2SV_ModStart> ) { Py_ssize_t <S2SV_ModEnd> i ; assert",0
304,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> bool zerocopy = <S2SV_ModStart> m -> msg_control && m -> msg_namelen <S2SV_ModStart> m -> msg_control ) <S2SV_ModEnd> zerocopy = true <S2SV_ModStart> ) { copylen = min_t ( size_t, <S2SV_ModStart> vnet_hdr. hdr_len, GOODCOPY_LEN ) ; if ( unlikely ( copylen > GOODCOPY_LEN ) ) { err = - EINVAL ; goto err ; } <S2SV_ModEnd> if ( zerocopy <S2SV_ModStart> ) { copylen = min_t ( size_t, <S2SV_ModStart> vnet_hdr. hdr_len, GOODCOPY_LEN ) ; if ( unlikely ( copylen > GOODCOPY_LEN ) ) { err = - EINVAL ; goto err ; } <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart> ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; err = - EINVAL ; goto err ; } <S2SV_ModEnd> skb = macvtap_alloc_skb",0
305,"<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) ; unsigned int offset = sizeof ( struct ipv6_opt_hdr ) ; <S2SV_ModStart> ( offset + ipv6_optlen ( exthdr ) + 1 <= packet_len ) { switch ( * exthdr ) { case NEXTHDR_HOP : found_rhdr = 1 ; break ; case NEXTHDR_ROUTING : break ; case NEXTHDR_DEST : # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; } offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias",0
308,<S2SV_ModStart> ; if ( msg -> msg_namelen > sizeof ( struct virtio_net_hdr ) ) { err = - EMSGSIZE ; goto out_free ; },0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,<S2SV_ModStart> asconf ) { union sctp_addiphdr_t * hdr ; union sctp_addr_param * addr_param ; union sctp_addip_param_t <S2SV_ModEnd> param_hdr ; __u32 <S2SV_ModStart> __u32 serial ; sctp_addiphdr_t * addiphdr ; __u16 <S2SV_ModEnd> err_code ; __u16 <S2SV_ModStart> ; all_param_pass = 1 ; addiphdr = ( sctp_addiphdr_t * ) asconf -> skb -> data ; addiphdr = ( union sctp_addiphdr_t * ) asconf -> skb -> data + sizeof ( sctp_addiphdr_t ) ; serial = ntohl ( hdr -> serial ) ; length = ntohs ( addiphdr -> length ) - sizeof ( sctp_addiphdr_t ) ; addr_param = ( union sctp_addr_param * ) asconf -> skb -> data + length ; length = ntohs ( addr_param -> p. length ) ; chunk_len -= length ; asconf_param = ( void * ) addr_param + length ; chunk_len -= length ; asconf_ack = sct,0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> lock_sock ( sk,0
315,<S2SV_ModStart> ; r = kvm_vm_read_guest_caps <S2SV_ModEnd> ( kvm ) <S2SV_ModStart> ; r = kvm_vm_read_guest_caps <S2SV_ModEnd> ( kvm ) <S2SV_ModStart> ; r = kvm_vm_read_guest_caps <S2SV_ModEnd> ( kvm ),0
316,"<S2SV_ModStart> msicap ; memset ( & msicap, 0, sizeof ( msicap ) ) ;",0
317,"<S2SV_ModStart> goto response_done ; } memcpy ( kvp_data -> data. key, key_name, sizeof ( * kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; kvp_data -> data. key_type = REG_SZ ; memcpy ( kvp_data -> data. key_value, sizeof ( * kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; memcpy ( kvp_data -> data. value_value, sizeof ( * kvp_data -> data. value ) ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; kvp_data -> data. value_type = REG_SZ ; icmsghdrp -> status = HV_S_OK ; <S2SV_ModEnd>",0
318,<S2SV_ModStart> -> log_file ; if (! filep ) { r = - EINVAL ; break ; } <S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; },0
319,"<S2SV_ModStart> ; } } else if ( img -> color_space == OPJ_CLRSPC_SRGB ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } else if ( img -> color_space == OPJ_CLRSPC_GRAY ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } else if ( img -> color_space == OPJ_CLRSPC_GRAY ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; }",0
320,"<S2SV_ModStart> * mbuf = NULL ; <S2SV_ModEnd> long err = <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> size_t ctrls_size = <S2SV_ModStart> case _IOC_NONE : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; <S2SV_ModStart> case _IOC_READ : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; <S2SV_ModStart> case _IOC_WRITE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_READ ) ) { mbuf",0
321,"<S2SV_ModStart> ) ) ; addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if (",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> * data, size_t <S2SV_ModEnd> size ) { <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { <S2SV_ModStart> uri ) ; g_free ( screen ) ; <S2SV_ModStart> uri ) ; g_free ( screen ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { if (! edge_port -> open ) { usb_serial_debug_data ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; ++ data ; } else { usb_serial_debug_data ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } }",0
325,"<S2SV_ModStart> * server, const <S2SV_ModStart> ) ; list_for_each_entry_safe ( ses, tmp, & server -> smb_ses_list, smb_ses_list ) { if (! strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses -> <S2SV_ModStart> ses_count ; } <S2SV_ModEnd> write_unlock ( &",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP8E_HIGHBITDEPTH if ( ( <S2SV_ModStart> ( cfg -> g_w > 1 || ( cfg -> g_h > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) || ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # endif <S2SV_ModEnd> if ( ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } else { if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } # endif",0
327,"<S2SV_ModStart>'<S2SV_blank>') { <S2SV_ModStart> input ++ ; } <S2SV_ModStart> if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { <S2SV_ModStart> if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { <S2SV_ModStart> if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! <S2SV_ModStart> if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } break ; case '\\0' : eprintf ( ""List <S2SV_blank> commands <S2SV_blank> in <S2SV_blank> radare <S2SV_blank> format\\n"" ) ; r_list_foreach ( core -> fs -> partitions, iter, part ) { r_cons_printf ( ""List <S2SV_blank> commands <S2SV_blank> in <S2SV_blank> radare <S2SV_blank> format\\n"" ) ; r_list_foreach ( plug -> partitions, iter, part",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { hugetlb_put_quota",0
329,<S2SV_ModStart> new ) { <S2SV_ModEnd> keyring = keyring_alloc,0
330,<S2SV_ModStart> = 0 ; size_t scanned = 0 ; <S2SV_ModStart> scanned ++ ; if ( scanned >= cmdsize ) { scanned = ( size_t ) 0U ; readnbd = ( size_t ) 0U ; } <S2SV_ModStart> scanned ++ ; if ( scanned >= cmdsize ) { scanned = ( size_t ) 0U ; } <S2SV_ModStart> scanned ++ ; if ( scanned >= cmdsize ) { scanned = ( size_t ) 0U ; },0
331,"<S2SV_ModStart> & orig ) ; mrb_io * <S2SV_ModEnd> fptr_copy = ( <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; if ( fptr_copy == NULL ) { mrb_free ( mrb ) ; return NULL ; } <S2SV_ModStart> ) mrb_io_alloc ( mrb ) ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; memset ( param, 0, sizeof ( * param ) ) ;",0
335,<S2SV_ModStart> int rc ; if ( ctxt -> op_bytes > X86EMUL_MAX_OP_BYTES ) return X86EMUL_CONTINUE ; <S2SV_ModStart> ; if ( ctxt -> op_bytes > X86EMUL_MAX_OP_BYTES ) return X86EMUL_CONTINUE ; <S2SV_ModStart> ; if ( ctxt -> op_bytes > X86EMUL_MAX_OP_BYTES ) return X86EMUL_CONTINUE ;,0
336,"<S2SV_ModStart> ( avctx, AV_LOG_ERROR <S2SV_ModEnd>, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", codsty -> nreslevels ) ; return AVERROR_INVALIDDATA ;",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_FileExists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return ; }",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> * got_table = calloc ( 1, n_got * sizeof ( struct reloc_struct_t ) ) ; if (! got_table ) { RListFree ( list ) ; return NULL ; } <S2SV_ModEnd> if ( got_table",0
339,<S2SV_ModStart> info -> si_code < 0 || <S2SV_ModEnd> info -> si_signo <S2SV_ModStart> - EPERM ; <S2SV_ModEnd> info -> si_signo,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + ( p + 1 ) * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = p_image -> max_prec ; assert ( p_resolutions!= NULL ) ; assert ( p_resolutions!= NULL ) ;",0
341,"<S2SV_ModStart> char * fname <S2SV_ModEnd>, int lower <S2SV_ModStart> ) fname ; if (! fname ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! dir ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> directory!\\n"" ) ; return NULL ; } if ( <S2SV_ModStart> sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xF0 ) << 12 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xC0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { classes = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; if ( classes && ( Z_TYPE_P ( classes ) == IS_ARRAY ||! zend_is_true ( classes ) ) ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if (",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> - 8 ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 )",0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,"<S2SV_ModStart> = US """" ; uschar * cmdline_syslog_name = NULL ; <S2SV_ModStart> = US """" ; if ( cmdline_syslog_name == NULL ) { uschar * cmdline_syslog_name = US """" ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = US """" ; uschar * start_queue_run_id = US """" ; uschar * stop_queue_run_id = US """" ; } <S2SV_ModStart> = US """" ; if ( cmdline_syslog_name == NULL ) { uschar * cmdline_syslog_name = US """" ; uschar * cmdline_syslog_name = US """" ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = US """" ; uschar * start_queue_run_id = US """" ; uschar * start_queue_run_id = US """" ; uschar * stop_queue_run_id = US """" ; if ( cmdline_syslog_name == NULL ) { uschar * cmdline_syslog_name = US """" ; uschar * cmdline_syslog_",0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; else s -> seekable = - 1 ; s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( slash + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; else s -> seekable = - 1 ; s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if (! s -> is_akamai ||! s -> is_akamai ) s -> is_streamed = 0 ; else s -> seekable =",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> int offset, upb ; size_t maxw, maxh ; size_t offset, upb ; size_t i, j ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; offset = ( size_t ) img -> comps [ 0 ]. prec ; upb = ( int ) img -> comps [ 0 ]. w ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL ) goto fails ;",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) { state -> state = mode ; return ; } if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } else { state -> state = FMODE_READ <S2SV_ModEnd> ; } <S2SV_null>",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ;",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageInfoFileSize ( read_info, filesize ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> 0 ; char <S2SV_ModEnd> lbase [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> ltest [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> strbase [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> strtest [ 256 <S2SV_ModStart> ) ) { if ( strcmp ( lbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( ltest, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!=",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data ; <S2SV_ModStart> ret = cdc_ncm_bind_common <S2SV_ModEnd> ( dev, <S2SV_ModStart> 0 ) ; data = cdc_ncm_data_select_altsetting ( intf ) ; if (! data ) return - ENODEV ; ret = cdc_ncm_bind_common ( dev, data, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> cdc_ncm_link_change ( dev <S2SV_ModStart>, 0, data <S2SV_ModEnd> ) ; return",0
355,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
356,"<S2SV_ModStart> i ] ), JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
357,"<S2SV_ModStart> ; err = xt_check_entry_offsets_ext <S2SV_ModEnd> ( e,",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ; kfree ( q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
361,<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> brelse ( dibh,0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass <S2SV_ModEnd> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModStart> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModEnd> ( load ) <S2SV_ModStart> ( load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> ( load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; }",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } }",0
364,"<S2SV_ModStart> retval ) { xfs_trans_log_buf ( mp -> m_ddev_targp, bp -> b_addr, XFS_DSP_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR ) ; return retval ; }",0
365,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo_size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo_size = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> state -> sd ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_TX_KFIFO_SIZE, 0 ) ; mutex_init ( & state -> tx_params_",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv ) { <S2SV_ModStart> service_name_tlv_length ) ; if ( miux_tlv ) { <S2SV_ModStart> miux_tlv_length ) ; } <S2SV_ModStart> rw_tlv_length ) ; if ( rw_tlv ) { <S2SV_ModStart> rw_tlv_length ) ; } <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv ) { <S2SV_ModStart> rw_tlv_length ) ; },0
367,<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> monitor_openfds ( mon <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> mon -> m_zback,0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> = cfg ; if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX",0
369,<S2SV_ModStart> * chan ; jas_uint16 <S2SV_ModEnd> numchans ; if,0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ;",0
371,"<S2SV_ModStart> ) ) { struct ip_options_rcu * opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; ipc = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; if (! dev ) goto out ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ip_options_rcu * opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; if ( opt ) opt -> opt. opt. opt. opt. opt. opt. opt. opt.",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32",0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { crypto_free_blkcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; <S2SV_ModEnd> bprm -> cred <S2SV_ModStart> -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLE",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> ) ) { if ( dlen < 1 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } },0
378,"<S2SV_ModStart> 1 ) ) { if ( off + bit >= tags -> nr_tags ) { fn ( rq, data, reserved ) ; break ; }",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) &&! <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) &&! <S2SV_ModStart> VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VP,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> ; if (! skb_is_linear <S2SV_ModEnd> ( skb ),0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp <S2SV_ModStart> ( bp, len <S2SV_ModEnd> ) ; bp",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> or <S2SV_blank> tile <S2SV_blank> rowsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"" <S2SV_ModEnd>, tl * <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> for <S2SV_blank> contig <S2SV_blank> tiles"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> or <S2SV_blank> tile <S2SV_blank> rowsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> for <S2SV_blank> contig <S2SV_blank> tiles"" ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> NULL, 'u' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int modify_bar_registration ( <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return 0 <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> ; if ( tmp && tmp == cluster -> cl_has_local && <S2SV_ModEnd> cluster -> cl_local_node <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( tmp &&! cluster -> cl_has_local ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = node -> nd_num ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = node -> nd_num ; } else { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM,0
388,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n <S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> points <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
389,<S2SV_ModStart> len ) ; if ( len < 1 ) return - 1 ; <S2SV_ModStart> len ) ; if ( len < 1 ) return - 1 ; <S2SV_ModStart> len ) ; if ( len < 2 ) return - 1 ; <S2SV_ModStart> len ) ; if ( len < 1 ) return - 1 ; <S2SV_ModStart> len ) ; if ( len < 1 ) return - 1 ; <S2SV_ModStart> len ) ; if ( len < 1 ) return - 1 ; <S2SV_ModStart> len ) ; if ( len < 1 ) return - 1 ; <S2SV_ModStart> len ) ;,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; sock_hold ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; }",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( lshp -> ls_length ) ; <S2SV_ModStart> goto trunc ; ND_TCHECK_32BITS ( lshp -> ls_router ) ; ND_TCHECK_32BITS ( lshp -> ls_age ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length )",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> ; if ( <S2SV_ModEnd> pbody -> cf_present,0
396,<S2SV_ModStart> } else { <S2SV_ModEnd> * obuf = <S2SV_ModStart> obuf ) ; <S2SV_ModEnd> opipe -> nrbufs <S2SV_ModStart> } else { <S2SV_ModEnd> * obuf = <S2SV_ModStart> obuf ) ; <S2SV_ModEnd> opipe -> nrbufs,0
397,<S2SV_ModStart> ( ) ; if (! tbuf ) { return NULL ; },1
398,"<S2SV_ModStart> long ret, err ; mm_segment_t old_fs ; set_fs ( KERNEL_DS ) ; <S2SV_ModStart> = sys_wait4 ( pid <S2SV_ModEnd>, ustatus, <S2SV_ModStart> ) & r ) ; set_fs ( old_fs ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""proc""",0
400,"<S2SV_ModStart> ; } } if ( md -> sender_port == 0 ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; return STF_FAIL + v2N_NO_PROPOSAL_CHOSENSE ; }",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> ) { nsc_encode_subsampling <S2SV_ModEnd> ( context )",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
404,<S2SV_ModStart> == 1 ) return ( <S2SV_ModStart> / 8 ) <S2SV_ModEnd> ; else return,0
405,"<S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, dev_path ) ; return ; }",0
406,"<S2SV_ModStart> -> ctrl_intf -> cur_altsetting ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> data_intf -> cur_altsetting ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; }",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> struct device * dev ; dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_null> <S2SV_null>",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - JAS_UINTFAST32_NUMBITS -,0
409,<S2SV_ModStart> { r = conv_deluxe <S2SV_ModEnd> ( ci ->,0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t depth, <S2SV_ModEnd> unsigned char * <S2SV_ModStart>, ssize_t x, size_t <S2SV_ModEnd> y, ExceptionInfo <S2SV_ModStart> exception ) { <S2SV_ModEnd> register Quantum index <S2SV_ModStart> = 0 ; <S2SV_ModEnd> switch ( depth <S2SV_ModStart> case 1 : { Quantum * q ; Quantum index ; index = 0 ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } if ( <S2SV_ModEnd> image -> columns <S2SV_ModStart> % 8 )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 )",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> const u_char * <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipv6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipv4addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipv6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type",0
412,"<S2SV_ModStart> desc_struct cs, ss ; int ret <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ctxt -> mode == X86EMUL_MODE_REAL || ctxt -> mode == X86EMUL_MODE_VM86 ) return - EINVAL ; if ( ctxt -> mode == X86EMUL_MODE_VM86 ) return - EINVAL ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ctxt -> mode == X86EMUL_MODE_REAL ) return - EINVAL ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp",0
413,"<S2SV_ModStart> ; return sprintf_safe <S2SV_ModEnd> ( buf, <S2SV_ModStart> pdev -> driver_override ) <S2SV_ModEnd> ; } <S2SV_null>",0
414,"<S2SV_ModStart> ; BIO * tmpout = NULL ; BIO_set_mem_eof_return ( tmpout, 0 ) ; if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto",0
415,"<S2SV_ModStart> retval, response <S2SV_ModEnd>, NULL )",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,"<S2SV_ModStart> config_file ) ; if ( config_file && ( f = fopen ( config_file, ""rt"" ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; }",0
418,"<S2SV_ModStart> ; switch ( AF_UNSPEC ( af ) ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_UNIX : ( void ) strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; protoname = ""unix"" ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; break ; case AF_INET6 : ( void )",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> 0xffff ; err = <S2SV_ModEnd> synth_devs [ dev <S2SV_ModStart>, buf, p <S2SV_ModEnd>, c,",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct hstate * <S2SV_ModStart> * h = vma_to_hstate ( vma ) ; long chg ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_file,",0
423,"<S2SV_ModStart> -> stamp_path ) { touch_uid_gid ( t -> last_trigger. uid, t -> last_trigger. gid ) ; touch_gid_gid ( t -> last_trigger. gid, true, t -> last_trigger. realtime, UID_INVALID, GID_INVALID, 0 ) ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t x9 = input [ 8 ] ; tran_high_t x10 = input [ 3 ] ; tran_high_t x12 = input [ 2 ] ; tran_high_t x13 = input [ 4 ] ; tran_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # endif return flags & mask ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
426,"<S2SV_ModStart> * cur_mi, PREDICTION_MODE <S2SV_ModEnd> * left_mi,",0
427,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFFHorAcc16_t <S2SV_ModEnd> ( tif,",0
428,"<S2SV_ModStart> tot_len ) ; memcpy ( & opt2 -> opt, opt, tot_len ) ;",0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> * fpath = NULL <S2SV_ModEnd>, * cgdir <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 ; out : free ( fpath ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
431,"<S2SV_ModStart> flag & CL_UNPRIVILEGED <S2SV_ModEnd> ) && ( <S2SV_ModStart> flag & CL_UNPRIVILEGED <S2SV_ModEnd> ) && ( <S2SV_ModStart> & CL_UNPRIVILEGED ) &&! list_empty ( & mnt -> mnt_expire ) ) { list_add_tail ( & mnt -> mnt_instance, & old -> mnt_mounts ) ; mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; } else { list_add ( & mnt -> mnt. mnt_instance, & old -> mnt_mounts ) ; mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; }",0
432,<S2SV_ModStart> trans = & rds_loop_transport <S2SV_ModEnd> ; } if,0
433,<S2SV_ModStart> * rsize >= 104 <S2SV_ModEnd> && rdesc [,0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
435,"<S2SV_ModStart> serio ) ; if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; }",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if (",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen <S2SV_ModEnd> ) { int <S2SV_ModStart> newIndex ; } if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - index + 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if ( udfName [ index + 1 ] == '/' ) { if (",0
438,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> cm = & cpi -> td. <S2SV_ModEnd> common ; const <S2SV_ModStart> ] ; int bw, bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, hbs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8 + hbs * mis, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> * s ; DSA_SIG_DATA * d2i_DSA_SIG ; d2i_DSA_SIG ( & d2i_DSA_SIG, & sigbuf, siglen ) ; if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ;",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdDPExtractData <S2SV_ModEnd> ( out, <S2SV_ModStart> size ) ; if ( rv ) return rv ;",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; oe_addrinfo_t <S2SV_ModEnd> * p = <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_flags, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_family, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_socktype, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p ->",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width > rctx -> image_height ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> image <S2SV_blank> size"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, __u16 indx, __u16 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
449,"<S2SV_ModStart> asdl_seq * body, asdl_arena * arena, <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( dev -> port ) ;,0
451,"<S2SV_ModStart> * src, tran_low_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> 4 ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) || ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) ) return 1 ; # else int row, col, active_end ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { if (! active_map [ col ] ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { if (! active_map [ active_end ] ) break ; } vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } } else { vpx_copy_and_extend_frame ( src,",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; if ( request -> nonce == 0 ) { * status = ""INVALID_S4U2SELF_NONCE"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_NONCE_UNKNOWN ; }",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> outbuf ) ; scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ;",0
455,<S2SV_ModStart> || s -> <S2SV_ModEnd> cur_pic. field_picture,0
456,"<S2SV_ModStart> int off ) { struct rds_header * hdr ; <S2SV_ModStart> 0 ) ; hdr = & rm -> m_inc. i_hdr ; if ( hdr_off || sg || off ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return 0 ; } <S2SV_ModEnd> BUG_ON ( hdr_off <S2SV_ModStart> ) + be32_to_cpu ( hdr -> m_inc. i_hdr. h_len ) ; hdr = & rm -> m_inc. i_hdr ; if ( hdr_off || sg || off ) { rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & hdr, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & rm -> m_inc ) ; rds_send_drop_acked ( conn, be64_to_cpu ( hdr -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc ) ; rds_inc_put ( & rm -> m_inc ) ; rds_send_drop_acked ( conn,",0
457,<S2SV_ModStart> ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; },0
458,<S2SV_ModStart> ; if ( key -> type -> type_flags & KEY_FLAG_NEGATIVE ) { ret = - EINVAL ; goto error2 ; } if (,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & mh -> ip6m_data16 [ 0 ] ) ; <S2SV_ModStart> 8 ) ; ND_TCHECK_32BITS ( & mh -> ip6m_data16 [ 1 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%x"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ) ; } ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%x"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING ;,0
461,"<S2SV_ModStart> hmi_data ; uint16_t hmi_bpm = 0 ; uint32_t hmi_track_cnt = 0 ; uint32_t hmi_track_offset = NULL ; <S2SV_ModStart> uint8_t channel ; uint16_t note_length <S2SV_ModStart> ; } note_length = sizeof ( * note ) ; if ( note_length < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> note ; } if ( note_length < hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> hmi_tmp ) ; if ( hmi_tmp!= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( note_length < hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI",0
462,<S2SV_ModStart> id ; * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 <S2SV_ModEnd> ] = inode,0
464,"<S2SV_ModStart> ; if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) && isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = 0 ; dst_reg -> smax_value = 0 ; }",0
466,"<S2SV_ModStart> ( method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) { const <S2SV_ModStart> ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModEnd> ) ; }",0
467,"<S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_evt: <S2SV_blank> %s"", dump_dm_event ( event ) ) ;",0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = luaL_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } } <S2SV_ModEnd> } <S2SV_null>",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_row_count ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; if ( <S2SV_ModEnd> data && data_sz <S2SV_ModStart> ) res = vpx_codec_alg_decode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>, data, data_sz, user_priv, deadline ) ; if ( res!= VPX_CODEC_OK <S2SV_ModEnd> ) return SAVE_STATUS",0
474,"<S2SV_ModStart> int ret ; if ( strlen ( value ) < 2 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode ( <S2SV_ModStart> inode ) ; if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EINVAL ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > ISOFS_",0
476,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length )",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sendClean ( outputbuffer ) ;",0
478,"<S2SV_ModStart> else { BUG ( ) ; } } else if ( r -> CRn == 9 && r -> CRm == 13 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_EVENT_IDX ; } else if ( r -> CRm & 12 ) == 8 ) { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ( ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } else { BUG ( ) ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( kvm_pmu_get_counter_value ( vcpu, idx )!= p -> regval ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu,",0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank>",0
480,<S2SV_ModStart> self ) { if ( self -> dict ),0
481,<S2SV_ModStart> SQL_DROP ) ; free ( szUcSQL ) ;,0
482,<S2SV_ModStart> - EFAULT ; if ( offset + len > sizeof ( * data ) ) return - EINVAL ;,0
483,"<S2SV_ModStart> argv [ ] ) { <S2SV_ModEnd> Clp_Parser * clp <S2SV_ModStart> ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ;",0
484,"<S2SV_ModStart> ( tty ) { tty_port_tty_set ( & port -> port, NULL ) ; retval = - EBUSY ; goto error_get_interface ; }",0
485,<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & cpuctx -> ctx. mutex ) ; <S2SV_ModStart> type = cpu_context <S2SV_ModEnd> ; __perf_cpu_hrtimer_init (,0
486,"<S2SV_ModStart> len, struct iovec * iov <S2SV_ModEnd> ) { if <S2SV_ModStart> = 1 ; iov -> iov_len = len ;",0
487,"<S2SV_ModStart> ext4_group_t flex_group ; ext4_group_t <S2SV_ModEnd> groups_per_flex = 0 <S2SV_ModStart> -> s_log_groups_per_flex ; ext4_group_t <S2SV_ModEnd> groups_per_flex = 1 <S2SV_ModStart> -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } if ( sbi -> s_groups_count < groups_per_flex ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank> groups"", groups_per_flex ) ; goto failed ; } flex_group_count = ext4_get_group_count ( sb, sbi -> s_es -> s_reserved_gdt_blocks, NULL ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank> flex <S2SV_blank> groups"", flex_group_count ) ; goto failed ; } sbi -> s_groups_count = groups_",0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if (,0
489,<S2SV_ModStart> = cJSON_CreateArray ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; if (! n ) return 0 ;,0
490,"<S2SV_ModStart> { if ( <S2SV_ModEnd> empty_string ( cli_sslclifp <S2SV_ModStart> cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] <S2SV_ModEnd> ) ; }",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a | pb_80 ) & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a ^ b & pb_80 ) & pb_80 ) ; } } # else for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ; i += sizeof ( long ) ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; } <S2SV_ModStart> match_length += callback_args -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
493,<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ),0
494,"<S2SV_ModStart> { if ( <S2SV_ModEnd> bitstream_read_bit ( bc <S2SV_ModStart> ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",0
495,<S2SV_ModStart> return err ; <S2SV_ModEnd> } else {,0
496,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from",0
497,<S2SV_ModStart> int hstartcol ; jas_int64_t numcols ; jas_int64_t <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> 2 ) { numcols = ( numrows + 1 - parity ) >> 1 ; hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( numrows + 1 - parity ) * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ ( numrows + 1 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } } if ( buf!= split,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> {",0
501,"<S2SV_ModStart> 1 ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; <S2SV_ModStart> ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if",0
502,<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { err = - EPERM ; goto out ; },0
503,"<S2SV_ModStart> * skb ; struct sockaddr_ll <S2SV_ModEnd> sll ; int <S2SV_ModStart> copied, err ; msg -> msg_namelen = 0 ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_n",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> -> num_ports < 2 ||! serial -> port [ 1 ],0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> ds64hdr, datahdr <S2SV_ModStart> riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total",0
507,<S2SV_ModStart> ) ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_flags & ( MSG_CMSG_CLEAR | MSG_CMSG_COMPAT ) ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModEnd> if ( sock <S2SV_ModStart> ) msg_sys -> msg_control ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; },0
508,<S2SV_ModStart> ) ; struct gfs2_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = ip_inode ; <S2SV_ModStart> unsigned end_of_metadata = ( ip_inode? ip_inode -> i_height : height ) - 1 ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_dinode * ip_inode = GFS2_I ( inode ) ; struct gfs2_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_inode = GFS2_I ( inode ) ; struct gfs2_dinode * ip_inode = GFS2_I ( inode ) ; struct gfs2_dinode * ip_inode = GFS2_I ( inode ) ; struct gfs2_dinode * ip_inode = GFS2_,0
509,"<S2SV_ModStart> codec_iface_name ( global -> codec ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next ) { fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; fprintf ( stderr, ""\\n <S2SV_blank> Next <S2SV_blank> Stream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next ) { fprintf ( stderr, ""\\n <S2SV_blank> Next <S2SV_blank> Stream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""\\n <S2SV_blank> Next <S2SV_blank> Stream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; fprintf ( stderr, ""\\n <S2SV_blank> Next <S2SV_blank> Stream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next",0
510,"<S2SV_ModStart> return FALSE ; ret = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; ret = <S2SV_ModStart> -> decode ) ; if ( ret ) return FALSE ; ret = <S2SV_ModStart> -> decode ) ; if ( ret ) return FALSE ; ret = <S2SV_ModStart> -> decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, NULL, flip ) ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ;",0
511,"<S2SV_ModStart> ; if ( ( copyNs == NULL ) || ( copyNs -> psvi == XSLT_NAMESPACE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if (",0
512,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname )",0
513,<S2SV_ModStart> fv -> b ) ; if ( fv -> b. nextsame == NULL || fv -> b. sf -> fv!= & fv -> b ) { return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged,0
514,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
515,<S2SV_ModStart> ; when = timespec_to_ns <S2SV_ModEnd> ( new_setting -> <S2SV_ModStart> -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) return 0 ; <S2SV_ModEnd> if ( when <S2SV_ModStart> n ) ; <S2SV_ModEnd> if ( when <S2SV_ModStart> now ) ; <S2SV_ModEnd> if ( when,0
516,<S2SV_ModStart> (! js_regexec <S2SV_ModEnd> ( re ->,0
517,<S2SV_ModStart> case OFreshOID : if <S2SV_ModEnd> ( Int_val ( <S2SV_ModStart> ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; break ; } if (,0
518,"<S2SV_ModStart>, multipart_media ; <S2SV_ModEnd> struct evbuffer * <S2SV_ModStart> = NULL ; int code = 500, fd = - 1, nranges, ret ; char content_range [ 64 ] ; const char * errstr = NULL ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 1 ) { <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( nranges = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL )",0
519,"<S2SV_ModStart> = FALSE ; ksz8851WriteReg ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart>, KSZ8851_IER, 0 <S2SV_ModEnd> ) ; isr <S2SV_ModStart>, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_LCIS ) ; } if ( ( isr & KSZ8851_ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_IER, ier",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
521,<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) < 0 ) { TEMP_FAILURE_RETRY (,0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,<S2SV_ModStart> flags ) { <S2SV_ModEnd> if ( ( <S2SV_ModStart> TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> else if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
525,"<S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; return NULL ; } <S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_8_TO_16 ( j ) ) ; } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } }",0
526,"<S2SV_ModStart> ( dev_name, LOOKUP_FOLLOW <S2SV_ModEnd>, & path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = kern_path ( dev_name, LOOKUP_FOLLOW, & path ) ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> path ) ) { error = kern_path ( dev_name, LOOKUP_FOLLOW, & path ) ; goto out ; } <S2SV_ModEnd> if ( kern_path",0
527,<S2SV_ModStart> ; if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > buf_size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; },0
528,"<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { RETVAL_STRINGL ( replaced, ( int ) new_len, 0 ) ; }",0
529,"<S2SV_ModStart> ; if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_RSA ( peerkey, localrsa ) ) { goto sslerr ; } } else if (",0
530,"<S2SV_ModStart> ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
531,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4, partition = partition_lookup [ bsl ] [ subsize ] ; assert ( bsize >= BLOCK_8X8 ) ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; if ( mi_col + hbs < cm -> mi_cols ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> m",0
532,"<S2SV_ModStart> name ) ; if (! check_submodule_name ( name ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
533,"<S2SV_ModStart> = 0 ; int row_height = 0 ; int row_x = 0 ; int row_height = 0 ; int block_ptr ; int block_x, block_y ; int pixel_x, pixel_y ; int total_blocks ; if ( stream_ptr >= chunk_size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; return ; } row_height = s -> frame. height ; row_height = s -> frame. rowsize [ row_height ] ; row_height = s -> frame. rowsize [ row_height ] ; row_height = s -> frame. rowsize [ row_height ] ; row_x = s -> frame. rowsize [ row_height ] ; row_height = s -> frame. rowsize [ row_height ] ; row_height = s -> frame. rowsize [ row_height ] ; row_height = s -> frame. rowsize [ row_height ] ; row_height = s -> frame. rowsize [ row_height ] ; row_height =",0
534,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
535,<S2SV_ModStart> ; __be16 type ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; },0
536,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if (,0
537,<S2SV_ModStart> } else { if ( session -> sessionHandle == TPM_RH_NULL ) { return TSS2_SYS_RC_INVALID_HANDLE ; },0
538,"<S2SV_ModStart> ; ret = key_permission_check <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec -> <S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
540,"<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
541,"<S2SV_ModStart> filp ) ; cifs_inode_lock_nested ( parent_dir_inode, fmode ( cifs_sb, cifs_file_inode ( cfile ), pTcon ) ;",0
542,"<S2SV_ModStart> -> cfg_size ; memset ( & caps, 0, sizeof ( caps ) ) ; <S2SV_ModEnd> ret = copy_to_user <S2SV_ModStart> ret = copy_to_user ( & caps, sizeof ( caps ) ) ; if ( ret ) return ret ; <S2SV_ModEnd> ret = copy_to_user <S2SV_ModStart> ret = copy_to_user ( & caps, sizeof ( caps ) ) ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ;",0
543,"<S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; } if (",0
544,"<S2SV_ModStart> = 1 ; if ( s -> filesize < 0 ) { av_log ( h, AV_LOG_WARNING, ""File <S2SV_blank> size <S2SV_blank> is <S2SV_blank> negative.\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; }",0
546,"<S2SV_ModStart> char * in, size_t length <S2SV_ModStart> += 4 ; if ( length < 4 ) return - 1 ; <S2SV_ModStart>!= '=' ) { if ( length < 4 ) return - 1 ; <S2SV_ModStart>!= '=' ) { if ( length < 4 ) return - 1 ; <S2SV_ModStart>!= '=' ) { if ( length < 4 ) return - 1 ; <S2SV_ModStart>!= '=' ) { if ( length < 4 ) return - 1 ; <S2SV_ModStart>!= '=' ) { if ( length < 4 ) return - 1 ; <S2SV_ModStart> } * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( ( base64val ( digit2 ) >> 4 ) & 0xc0 ) | ( ( base64val ( digit3 ) >> 4 ) & 0xc0 ) ; } } } if ( length < 4 ) return - 1 ;",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, cur_len ; ssize_t <S2SV_ModEnd> total_written = 0 <S2SV_ModStart> i ++ ) { size_t copied = 0 ; <S2SV_ModStart> ) { copied = min_t ( size_t, copied, len ) ; if ( copied > len ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart> ) { copied = min_t ( size_t, copied, len ) ; break ; }",0
549,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ; int number_of_frames <S2SV_ModEnd>, number_of_keyframes, <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> ; encode_frame_count = svc_ctx <S2SV_ModEnd> -> encode_frame_count ; <S2SV_ModStart> -> encode_frame_count ; <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> ; i < <S2SV_ModEnd> si -> layers <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ], ( double ) si -> bytes_",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left < 4 ) return FALSE ; <S2SV_ModStart> } else { if ( left < 2 ) return FALSE ; <S2SV_ModStart> } else { if ( left < 2 ) return FALSE ; <S2SV_ModStart> } else { if ( left < 2 ) return FALSE ; <S2SV_ModStart> } else { if ( left < 2 ) return FALSE ; <S2SV_ModStart> } else { if ( left < 1 ) return FALSE ;,0
552,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; rect. end_row = 0 ; rect. end_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; } if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = NULL ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 2 ] ) screen -> buffers [ 2 ] = realloc_buffer ( screen, screen -> buffers [ 2 ], new_",0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> int in_named_escape = <S2SV_ModStart> ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_stream_memobj_t <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> unsigned char * buf <S2SV_ModEnd> ; assert ( <S2SV_ModStart> bufsize >= 0 ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! m -> buf_ ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ;",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
556,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if (! istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> void pcrypt_free ( <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_instance_ctx * ctx,0
558,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( x1 == 0 ) w1 = ptr -> width ; else x1 = ptr -> width ; } if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ptr -> height ; } else if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( x1 == 0 ) w1 = ptr -> width ; else h1 = ptr -> width ; } if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ptr -> height ; } if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 == 0 ) h1 = ptr -> height ; } else if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 == 0 ) h1 = ptr -> height ; else y1 = ptr -> height ; } if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 == 0 ),0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ; if ( neigh == NULL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> neighbour <S2SV_blank> for <S2SV_blank> this <S2SV_blank> packet\\n"" ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,"<S2SV_ModStart> * up ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; <S2SV_ModStart> rp ) ; replay_esn_len = min_t ( size_t, replay_esn_len, xfrm_replay_state_esn_len ( up ) ) ; <S2SV_ModStart> up )!= replay_esn_len <S2SV_ModEnd> ) return -",0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table, <S2SV_ModStart>, ppos ) ; if ( ret ||! write ) return ret ; ret = security_perf_cpu_time_max_percent ( sysctl_perf_cpu_time_max_percent ) ; if ( ret ||! write ) return ret",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,"<S2SV_ModStart> l_step_l ; } if ( l_step_p > l_max_prec ) { opj_error ( ""opj_pi_create_decode: <S2SV_blank> invalid <S2SV_blank> step <S2SV_blank> in <S2SV_blank> image\\n"" ) ; return 00 ; } if ( l_step_c > l_max_prec ) { opj_error ( ""opj_pi_create_decode: <S2SV_blank> invalid <S2SV_blank> step <S2SV_blank> in <S2SV_blank> image\\n"" ) ; return 00 ; } if ( l_step_r > l_max_prec ) { opj_error ( ""opj_pi_create_decode: <S2SV_blank> invalid <S2SV_blank> step <S2SV_blank> in <S2SV_blank> image\\n"" ) ; return 00 ; }",0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; const MODE_INFO * * mi = cm -> mi_grid_visible + idx_str ; const MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile,",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> len > len ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> obuf = opipe,0
570,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_log_packet ( net, IPPROTO_DCCP, 0, NULL, NULL, NULL, ""%s"", msg ) ; goto out_invalid ; }",0
571,<S2SV_ModStart> ; } else { <S2SV_ModStart> ; return HTTP_UNAUTHORIZED <S2SV_ModEnd> ; } parser <S2SV_ModStart> NULL ) return HTTP_INTERNAL_SERVER_ERROR <S2SV_ModEnd> ; } parser <S2SV_ModStart> ; exitFunction : fclose ( Fp ) ;,0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> q -> root_blkg,0
573,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,"<S2SV_ModStart> ; krb5_data rspac ; if ( rspac == NULL ) { return KRB5_ERR_INVALID_DATA ; } <S2SV_ModStart> ; if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; return KRB5_ERR_INVALID_DATA ; } <S2SV_ModStart> ; if ( rspac!= NULL ) { memcpy ( & rspac, & rspac, sizeof ( krb5_data ) ) ; } else { ret = KRB5_ERR_INVALID_DATA ; return KRB5_ERR_INVALID_DATA ; } if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; return KRB5_ERR_INVALID_DATA ; }",0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> = {. <S2SV_ModEnd> speed = ps <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; return,0
577,"<S2SV_ModStart> net * net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, size_t <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_NOP ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ;",0
578,<S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 <S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ;,0
579,<S2SV_ModStart> ) ) { if ( GetVirtualVolumeDeviceObject ( DeviceObject )!= NULL ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_DEVICE_OBJECT_NOT_FOUND ; } else { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; },0
580,"<S2SV_ModStart> ""Upgrade"" ) ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 <S2SV_ModEnd> ) goto error",0
581,"<S2SV_ModStart> * findalldevs_if ; int len <S2SV_ModStart> 0 ; } len = 0 ; for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) len += strlen ( d -> description ) ; len += strlen ( d -> name ) ; len += strlen ( d -> name ) ; len += sizeof ( struct rpcap_findalldevs_if ) ; if ( d -> name ) len += strlen ( d -> name ) ; len += strlen ( d -> name ) ; len += sizeof ( struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : case AF_INET6 : # endif break ; default : break ; } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKCAST ), NULL, & sendbuf ) == - 1 ) goto error ; if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ),",0
582,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( newpath, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", newpath ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( newpath, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die",0
583,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit ) )? 0x01 : 0x00 ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit ) )?",0
584,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2",0
585,"<S2SV_ModStart> sock * sk <S2SV_ModEnd>, int tstype <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > sk -> sk_tskey ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > sk -> sk_tskey ) serr -> ee. ee_data -= skb_shinfo ( skb",0
586,"<S2SV_ModStart> ; if ( num_images == 0 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
587,"<S2SV_ModStart> len ; if (! in_cksum ( vec, 1, len ) ) goto trunc ; <S2SV_ModStart> len ; } if (! in_cksum ( vec, 1, len ) ) goto trunc ; <S2SV_ModStart> len ; } if (! in_cksum ( vec, 1, len ) ) goto trunc ;",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, <S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc",0
589,<S2SV_ModStart>! dumpable && ptrace_freeze_traced ( task <S2SV_ModEnd> ) ) {,0
590,<S2SV_ModStart> long i ; assert ( w >= sizeof ( uint8_t ) ) ;,0
591,"<S2SV_ModStart> & __GFP_ZERO ) memset ( addr, 0, size ) ;",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> i4_payload_size ) ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> i4_payload_size ) ; <S2SV_ModEnd> ps_parse -> s_sei_params <S2SV_ModStart> i4_payload_size ) ; <S2SV_ModEnd> ps_parse -> s_sei_params,0
594,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
595,<S2SV_ModStart> ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; kfree ( dd -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; kfree ( dd -> per_sdma ) ; kfree ( tmp_sdma_rht ) ;,0
596,<S2SV_ModStart> device_data ; if ( dev ) device_free ( & dev -> <S2SV_ModEnd> dev ) ;,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> char * name <S2SV_ModStart> name, int rep_quick ) { if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; return - 1 ; }",0
598,"<S2SV_ModStart> q, 10 ) ; if ( p == q || size",0
599,<S2SV_ModStart> } else { xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB,0
600,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MAX_HSTORE_PAIRS ) ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if ( strcmp ( var, ""command"" ) == 0 ) hascommand = true ; else if ( strcmp ( var, ""rspfile"" ) == 0 ) hasrspfile = true ; else if ( strcmp ( var, ""rspfile_content"" ) == 0 ) hasrspcontent = true ; else if ( strcmp ( var, ""rspfile_content"" ) == 0 ) hasrspcontent = true ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 1 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 2 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 4 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 5 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 6 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 7 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 6,0
603,"<S2SV_ModStart> query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; return HEAD_AGAIN ; }",0
604,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart>, error ) ; if ( g_str_has_prefix ( new_data, "".service"" ) ) { g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; } else { g_strcpy ( new_data, "".service"" ) ; } g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, new_data_len ) ; g_strcpy ( new_data, new_data",0
606,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_unlock ( fh ) ; error = fh_verify ( rqstp, & resp -> fh, 0, NFSD_MAY_WRITE ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_drop_fh ; fh_unlock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, & argp -> acl_default ) ; if ( error ) <S2SV_ModEnd> goto out_drop_fh ;",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; i ++ ; } }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } if ( strlen ( temp_filename ) + 5 > sizeof ( filename ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_begin ( section -> entries ) ; enode = list_node ( enode ) ; fprintf ( fp, ""[%s]\\n"", entry",0
609,"<S2SV_ModStart> ; switch ( <S2SV_ModEnd> pc -> componentType <S2SV_ModStart> case 1 : if ( pc -> lengthComponentIdent > 0 ) { if ( tolen < 2 ) return - EINVAL ; <S2SV_ModStart> case 2 : if ( tolen < 2 ) return - EINVAL ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 3 : if ( tolen < 2 ) return - EINVAL ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - EINVAL ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= comp_len ; break ; } <S2SV_ModEnd> elen += sizeof <S2SV_ModStart> struct pathComponent ) +",0
610,"<S2SV_ModStart> ( ndo, ""%s"", nfs_tstr <S2SV_ModEnd> ) ) ;",0
611,"<S2SV_ModStart> tlv_len ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : ND_TCHECK_32BITS ( tptr ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ; break ; case VTP_UPDATE_TIMESTAMP : ND_TCHECK_32BITS ( tptr ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ; break ; case VTP",0
612,"<S2SV_ModStart> userData, target, ctxt -> instate <S2SV_ModStart>, target, ctxt -> instate <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, target, ctxt -> instate <S2SV_ModEnd> ) ; ctxt",0
613,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0 <S2SV_ModStart> slow ) ; msg -> msg_namelen = sizeof ( * sin ) ;,0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_len ) { goto trunc ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; goto trunc ; } tlen -= pdu_len ; tptr += pdu_len ; }",0
615,"<S2SV_ModStart> int tagval ; memset ( s -> p, 0, 4 ) ; <S2SV_ModStart> if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED | 2 ) ) return False ; if (! ber_in",0
616,"<S2SV_ModStart> int chars_processed ; int <S2SV_ModEnd> elt ; int <S2SV_ModStart> ; int data_size ; ND_TCHECK2 ( * cp, 1 ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i = * cp ++ ) & INDIR_MASK ) == INDIR_MASK ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; } if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL",0
617,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = valuelen ;,0
618,"<S2SV_ModStart> int rv = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( S, ""%s"", <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> rv = TEMP_FAILURE_RETRY ( <S2SV_ModStart> rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } child = waitpid ( child, NULL, 0 ) ; if ( child < 0 ) errExit ( ""fork"" ) ; copy_file ( src, dest ) ; <S2SV_ModEnd> if ( rv <S2SV_ModStart> rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
620,<S2SV_ModStart> ; if ( <S2SV_ModEnd> rc!= BFA_STATUS_OK <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> ; wait_for_completion ( & fcomp. comp ) ; kfree ( fcstats,0
621,"<S2SV_ModStart> value ) { if ( value -> x > 1.0f || value -> y > 1.0f || value -> z > 1.0f ) { <S2SV_ModStart> -> x = MaxF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MaxF <S2SV_ModEnd> ( 0.0f,",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return 0 ; },0
623,<S2SV_ModStart> ) ) return VM_FAULT_SIGSEGV <S2SV_ModEnd> ; if (,0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> <S2SV_ModEnd> sasl_username = src <S2SV_ModStart> -> sasl_password = g_strdup ( src -> <S2SV_ModEnd> sasl_password ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; new_data = env -> insn_aux_data ; if (! new_data ) return - EINVAL ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> env -> insn_aux_data <S2SV_ModStart> = new_data ; <S2SV_ModEnd> vfree ( old_data",0
626,"<S2SV_ModStart> -> ip6f_offlg ) ; ND_TCHECK_32BITS ( & dp -> ip6f_ident ) ; ND_TCHECK_16BITS ( & ip6 -> ip6_plen ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) - ( long ) bp - bp2 ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & dp -> ip6f_ident ) ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> (0x%08",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> ho=0x%04x <S2SV_blank> )"" ) ) ; goto trunc ; }",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ; } else { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 ) ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", (",0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
631,<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if (,0
632,<S2SV_ModStart> = NULL ; hugetlbfs_put_sb_info <S2SV_ModEnd> ( sbi ),0
633,"<S2SV_ModStart> ; break ; case HA_ERR_NO_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ;",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode res = CURL_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
636,"<S2SV_ModStart> ; if ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } <S2SV_ModStart> again ; } if ( iov_iter_count ( i ) )",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( len <= ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) { b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", tmp, ring -> rx_buffersize ) ; dmaaddr = meta -> dmaaddr ; goto drop_recycle_buffer ; } } else { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; } if ( cnt >= ring -> rx_buffersize ) { b43err ( ring -> dev -> wl, ""DMA <S2SV_blank>",0
638,"<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def -> <S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config",0
639,"<S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, name, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob",0
640,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else sub -> flags &= ~ prog -> flags ;,0
641,<S2SV_ModStart> ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ;,0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
644,<S2SV_ModStart> pixels ++ ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; <S2SV_ModStart> pixels ++ ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; <S2SV_ModStart> pixels ++ ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; <S2SV_ModStart> pixels ++ ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels - ( ssize_t ) number_pixels ) return ( i ) ; <S2SV_ModStart> pixels ++ ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; <S2SV_ModStart> pixels ++ ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels - ( ssize_t ) number_pixels ) return ( i ) ; return ( i ) ;,0
645,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; <S2SV_ModStart> NULL ; spin_unlock ( & timeri -> timer_lock ) ; <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> timer_lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & timeri -> timer_lock ) ;,0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6",0
647,"<S2SV_ModStart> -> has_va ; ut32 arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.baseaddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> return false ;",0
648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void sas_probe_devices ( <S2SV_ModStart>, * n, struct sas_port * port ) { struct asd_sas_port * port = to_asd_sas_port ( work ) ; clear_bit ( DISCE_PROBE, & port -> disc. pending ) ; sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char <S2SV_ModEnd> cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModStart> return FALSE ; <S2SV_ModEnd> pkt_len = parse_netscreen_rec_hdr <S2SV_ModStart>, line, <S2SV_ModEnd> cap_int, & <S2SV_ModStart>, & cap_dir, & cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; <S2SV_ModStart>, & cap_dir, & cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap!= WTAP_ENCAP_PER_PACKET )",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
652,"<S2SV_ModStart> decode ) { uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; <S2SV_ModStart> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; if ( tmpRasterBits > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; if ( tmpRasterBits == NULL ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; if ( tmpRasterBits == NULL ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; }",0
653,"<S2SV_ModStart> can_read_key : if ( key -> type -> validate ) { <S2SV_ModStart> - EOPNOTSUPP ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; goto error <S2SV_ModEnd> ; } error2",0
654,<S2SV_ModStart> NULL ) || ( cherokee_buffer_is_empty ( & conn -> validator -> user ) ),0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; if ( tmp & 0x80000000 ) return ( ( ( ~ tmp ) & 0x7fffffff ) + 1 ) ) ; * val = ( tmp & 0x7fffffff ) <S2SV_ModEnd> ; return 0,0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD_PAGE : rm -> atomic. op_m_fadd. page = args -> fadd. page ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP_PAGE : rm -> atomic. op_m_cswp. page = args -> cswp. page ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_FADD_PAGE : rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP_PAGE : rm -> atomic. op_m_cswp. page = args -> cswp. page ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
659,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 ;",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) ) return - 1 ; if (",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( * t &&! isspace ( * t ) ) t ++ ; if (,0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ;",0
663,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
664,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
665,"<S2SV_ModStart> return 1 ; if ( dccp_insert_options ( sk, skb, dh -> dccph_options ) ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) goto discard ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dccp_insert_options ( sk, skb, dh -> dccph_options ) ) return 1 ;",0
666,<S2SV_ModStart> struct msixcap msixcap ; <S2SV_ModEnd> assert ( msgnum <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
667,"<S2SV_ModStart> ; if ( d_unhashed ( dentry ) ) { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; }",0
668,<S2SV_ModStart> ( isspace ( <S2SV_ModEnd> p ) ),0
669,"<S2SV_ModStart> -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (",0
670,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { vpx_read_bit_buffer <S2SV_ModEnd> data = vp9_rb_read_literal",0
671,<S2SV_ModStart> 1 ) ; if ( <S2SV_ModEnd> mutt_str_strcmp ( line,0
672,"<S2SV_ModStart> NULL ) goto cleanup <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n""",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec <S2SV_ModEnd> * prec = <S2SV_ModStart> ++ ) { Jpeg2000Prec * prec = comp -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
674,"<S2SV_ModStart> ) ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; }",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = ip6_xmit ( sk <S2SV_ModEnd>, skb, <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass ) ) ; rcu_read_unlock ( ) ;",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME * frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME && cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart>. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval <S2SV_ModStart> ; if ( <S2SV_ModEnd> isnan ( printval,0
679,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
680,<S2SV_ModStart> ) b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if (,0
681,"<S2SV_ModStart> ; if ( ( i = cdf_check_mime_type ( ms, & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> check <S2SV_blank> mime <S2SV_blank> type"" ; goto out0 ; } if ( ( i = cdf_check_mime_type ( ms, & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> check <S2SV_blank> mime <S2SV_blank> type"" ; goto out1 ; } if ( ( i = cdf_check_mime_type ( ms, & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> mime <S2SV_blank> type"" ; goto out2 ; } if ( ( i = cdf_check_mime_type ( ms, & h, & sat, & ssat, & dir, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> check <S2SV_blank> mime <S2SV_blank> type"" ; goto out3 ; } if ( ( i = cdf_check_mime_type ( ms, & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> mime <S2SV_blank> type"" ; goto out4 ; } if ( ( i = cdf_check_mime_type ( ms, & h,",0
682,<S2SV_ModStart> ; size_t sz ; if ( size > XT_MAX_TABLE_INFO_SIZE ) return NULL ; sz = SMP_ALIGN ( size ) >> PAGE_SHIFT ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if (,0
683,"<S2SV_ModStart>! eof ) { if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,"<S2SV_ModStart> -> _eip ; memcpy ( & ctxt -> src, & ctxt -> src, sizeof ( ctxt -> src ) ) ;",0
687,"<S2SV_ModStart> url ) ; mutt_str_cpy <S2SV_ModEnd> ( errstr,",0
688,"<S2SV_ModStart> * secret, <S2SV_ModEnd> void * end <S2SV_ModStart> * th ; struct ceph_crypto_key old_key ; struct ceph_crypto_key new_session_key ; struct ceph_buffer * tp, * tpend <S2SV_ModStart> ; dlen = ceph_x_decrypt ( secret, p, end, & old_key, & new_session_key, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", TEMP_TICKET_BUF_LEN ) ; dp = dbuf ; dend = dp + TEMP_TICKET_BUF_LEN ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + TEMP_TICKET_BUF_LEN ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( t",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, UINT32_MAX / sizeof ( Pairs ) ) ) ;",0
690,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if ( s -> session -> tlsext_tick_lifetime_hint == 0 ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
691,<S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY (,0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
693,<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
694,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
695,"<S2SV_ModStart>, end_col_offset ; assert ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 6 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 7 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 8 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 6 ) ) == TYPE_COMMENT ( CHILD ( n, name_i + 6 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 7 ) ==",0
696,<S2SV_ModStart> ; int err ; if (! sockp ) return - EINVAL,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_row_count + 1 ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int * ) * ( * o_row_count + 1 ) ) ; * o_column_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int *",0
700,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
701,"<S2SV_ModStart> ctxt ) { int rc ; <S2SV_ModStart> ) ) { rc = <S2SV_ModStart>. val ) ; if ( rc!= X86EMUL_CONTINUE ) { x86_emulate_abort ( ctxt, rc ) ; return rc ; } <S2SV_ModStart> ) ) { x86_emulate_abort ( ctxt, rc ) ; } <S2SV_ModEnd> return X86EMUL_CONTINUE ; <S2SV_ModStart> X86EMUL_CONTINUE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
702,,1
703,"<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ; <S2SV_ModStart> res -> start, resource_size ( res )",0
704,"<S2SV_ModStart> : if ( psf -> header. indx + position < 0 ) break ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position > SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >",0
705,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_mutex ; } <S2SV_ModEnd> ext4_inode_block_unlocked_dio ( inode",0
706,"<S2SV_ModStart> uint32_t track_size ; uint32_t no_tracks ; <S2SV_ModStart> ; if ( no_tracks > 0 && no_tracks < midi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( no_tracks > 0 && no_tracks < midi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( no_tracks < midi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( no_tracks > 0 && no_tracks < midi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( no_tracks < midi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE",0
707,"<S2SV_ModStart> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUFSIZE : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; break ; case SO_SNDB",0
708,"<S2SV_ModStart> * bh ; struct logicalVolDesc * lvd ; int ret = 0 ; if ( le32_to_cpu ( lvd -> mapTableLength ) > sbi -> s_partitions ) goto out_bh ; <S2SV_ModStart> TAG_IDENT_LVD ) ; lvd = ( struct logicalVolDesc * ) bh -> b_data ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> numPartitionMaps ) ) ; if ( ret ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; }",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if ( bmp_gethdr ( in, & info ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"",",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_nxt_word ) { ihevcd_cabac_stop ( ps_cabac ) ; return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
712,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { if ( highlight_forbidden ( ) ) { add_sensitive_data_warning ( ) ; show_warnings ( ) ; gtk_expander_set_expanded ( g_exp_search, TRUE ) ; } else gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( g_rb_custom_search ), FALSE ) ; } else { gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( g_rb_custom_search ), FALSE ) ; } } else { gtk_toggle_button_set_active ( GTK_TO",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> entity ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) ) return - EFAULT ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink, & link. sink ) ; if ( copy_to_user ( & links -> links [ l ]. flags, & link. flags ) ) return - EFAULT ;",0
714,<S2SV_ModStart> = off ; if ( line -> type == MD_LINE_FENCEDCODE && line -> indent > 0 ) line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ;,0
715,"<S2SV_ModStart>, extent ; size_t <S2SV_ModEnd> length ; ssize_t <S2SV_ModStart> sun_data, sun_pixels, sun_info. <S2SV_ModStart> sun_pixels, sun_info. <S2SV_ModStart> sun_data, sun_info. <S2SV_ModStart> sun_data, sun_info. <S2SV_ModStart> sun_pixels, sun_info. <S2SV_ModEnd> length ) ; <S2SV_ModStart> sun_data, sun_info. <S2SV_ModEnd> maplength ) ;",0
716,"<S2SV_ModStart> client, krb5_enctype <S2SV_ModEnd> krbtgt_etype, krb5_principals <S2SV_ModStart> client_principal, krb5_principals <S2SV_ModEnd> spp, const",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> -> loc_addr ; <S2SV_ModEnd> ireq -> opt,0
719,<S2SV_ModStart> struct xmlparser parser ; if ( bufsize < 1 ) return ;,0
720,"<S2SV_ModStart>!= 0 ) { __wsum csum = 0 ; <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> tlen, offset, 0 ), <S2SV_ModEnd> 0 ) ;",0
721,"<S2SV_ModStart> pfn ) ; kvm_iommu_put_pages <S2SV_ModEnd> ( kvm, <S2SV_ModStart> gfn ) ; kvm_iommu_put_pages <S2SV_ModEnd> ( kvm, <S2SV_ModStart> unmap_pages : kvm_iommu_put_pages <S2SV_ModEnd> ( kvm,",0
722,"<S2SV_ModStart> 4 ], cmd -> msg, cmd -> msg_len",0
723,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [,0
725,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; struct nat_entry <S2SV_ModEnd> * ne ; <S2SV_ModStart> return false ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ) ) return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = f2fs_kmem_cache_free ( free_nid_slab, i ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_unlock ( & nm_i -> nid",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags,0
727,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } <S2SV_ModStart> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, extra.",0
728,"<S2SV_ModStart> ) ) ; memset ( hdr, 0, sizeof ( * hdr ) ) ;",0
729,<S2SV_ModStart> r1. event = event <S2SV_ModEnd> ; r1.,0
730,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( * fmt ) { case 'b' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'h' : { int issigned = islower ( opt ) ; lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break",0
731,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ; if ( msg_len > sizeof ( struct olsr_msg6 ) ) { goto trunc ; } ND_TCHECK_16BITS ( msgptr. v4 -> msg_len ) ; if ( msg_len > sizeof ( struct olsr_msg4 ) ) { goto trunc ; } ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", msg_type, msg_len ) ) ; ND_TCHECK_16BITS ( msgptr. v4 -> msg_type ) ; msgptr. v4 -> msg_len = msgptr. v4 -> msg_len ; if ( msg_len > sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", msgptr. v4 -> msg_type, msgptr. v",0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_ext * body = ( struct oz_multiple_ext * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! body -> unit_size ) break ; count = ( data_len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_EXTEND : { struct oz_is",0
733,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; memset ( store_reg, 0, sizeof ( store_reg ) ) ; <S2SV_ModStart> timer ) ; memset ( store_reg, 0, sizeof ( store_reg ) ) ;",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ) ; int rv = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( chown <S2SV_ModStart> ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ;",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { <S2SV_ModStart> IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; SKIPWS ( s ) ;,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> ; if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } else { if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } else { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } <S2SV_ModStart> ; if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } else if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_HBE_DATA_NOT_SUPPORTED ; } else { if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } else { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } <S2SV_ModStart> ; if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } else if ( sfb < 0 ) { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; } else { return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; },0
739,"<S2SV_ModStart> ] ; # if 0 <S2SV_ModStart> ] ) ; # endif <S2SV_ModStart> ] ) ; # endif <S2SV_ModStart> 8 ] ) ; # endif <S2SV_ModStart> 10 ] ) ; # endif <S2SV_ModStart> 12 ] ) ; image_w = get_ushort ( & tga [ 13 ] ) ; image_h = get_ushort ( & tga [ 15 ] ) ; pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_type == 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type == 9 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type == 10 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected",0
740,<S2SV_ModStart> rdma_ucm_cmd_hdr hdr ; size_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { struct timespec diff ; <S2SV_ModStart> CPUCLOCK_SCHED ) { diff = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart>. sched, NSEC_PER_SEC, & diff ) ; if ( diff < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sample <S2SV_blank> time <S2SV_blank> %zu\\n"", __func__, diff ) ; return ; } if ( diff < 0 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sample <S2SV_blank> time <S2SV_blank> %zu\\n"", __func__, diff ) ; return ; } tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> tp ) ; } else { cputime_to_timespec ( cpu. cpu, tp ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; luaL_authz_provider_t * prov_spec = parsed_require_line ; luaL_authz_provider_args * prov_args = NULL ; <S2SV_ModStart> r ) ; prov_args = NULL ; if ( prov_spec -> args == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""No <S2SV_blank> args <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if (! lua_checkstack ( L, prov_args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""No <S2SV_blank> args <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if",0
744,<S2SV_ModStart> * prev ; <S2SV_ModEnd> address &= PAGE_MASK <S2SV_ModStart> = security_mmap_addr ( vma <S2SV_ModEnd> ) ; if,0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( & inode -> i_mode, & mode, & acl ) ; error = posix_acl_update_mode ( inode, & mode ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode <S2SV_ModStart>, & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> char * data <S2SV_ModEnd>, int optional <S2SV_ModStart> mount ( fsname, target, fstype <S2SV_ModEnd>, mountflags & <S2SV_ModStart>, mountflags & ~ MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart> ; # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_BIND, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_BIND, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return - 1 ; } if ( sb. f_flag",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = <S2SV_ModEnd> timr -> it_overrun <S2SV_ModStart> -> it_overrun = <S2SV_ModEnd> - 1 ; <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,<S2SV_ModStart> (! proto_end || strlen ( proto_end ) < 3,0
750,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
751,"<S2SV_ModStart> -> actual ; struct usb_ep * ep = io_data -> ep ; struct usb_request * req ; <S2SV_ModStart> 1 ) ; req = io_data -> req ; <S2SV_ModStart> -> req ) ; if ( req ) <S2SV_ModStart> -> req ) ; if (! req ) usb_ep_free_request ( ep <S2SV_ModEnd>, io_data -> <S2SV_ModStart> req ) ; <S2SV_ModEnd> io_data -> kiocb",0
752,<S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> srr &&! <S2SV_ModStart> &&! skb_sec_path <S2SV_ModEnd> ( skb ),0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { <S2SV_ModEnd> struct trusted_key_payload * <S2SV_ModStart> trusted_key_payload * p <S2SV_ModEnd> ; size_t datalen <S2SV_ModStart> trusted_key_payload * new_p <S2SV_ModEnd> ; struct trusted_key_options <S2SV_ModStart> ; new_p = kmalloc ( sizeof ( * new_p ), GFP_KERNEL ) ; if (! new_p ) { pr_info ( ""trusted_key: <S2SV_blank> datablob <S2SV_blank> failed <S2SV_blank> (%d)\\n"", datalen ) ; kfree ( new_p ) ; goto out ; } if (! p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_len <S2SV_blank> failed <S2SV_blank> (%d)\\n"", p -> key_len ) ; kfree ( new_p ) ; goto out ; } if ( p -> migratable ) { ret = - EPERM ; pr_info ( ""trusted_key: <S2SV_blank> key_migratable <S2SV_blank> failed <S2SV_blank> (%d)\\n"", p -> migratable ) ; kfree ( new_p ) ; goto out ; } if (! p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_len <S2SV_blank> failed <S2SV_blank> (%",0
755,<S2SV_ModStart> } v |= ( jas_uint_fast32_t ) <S2SV_ModStart> << 24 ) <S2SV_ModEnd> ; if (,0
756,<S2SV_ModStart> int lci_o ; mutex_lock ( & rose_loopback_queue_lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & rose_loopback_queue_lock ) ; <S2SV_ModStart> 4 ] ; mutex_unlock ( & rose_loopback_queue_lock ) ; <S2SV_ModStart> ] ; dest = ( rose_address * ) ( skb -> data + 4 ) ; if ( dest == NULL ) { kfree_skb ( skb ) ; continue ; } else { kfree_skb ( skb ) ; } },0
757,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & old ) ;",0
758,<S2SV_ModStart> ) ; if ( indev ) { ifa = indev -> ifa_list ; newdst = ifa -> ifa_local ; } else { rcu_read_unlock ( ) ; return NF_DROP ; },0
759,"<S2SV_ModStart> ; end = fdt_path_end <S2SV_ModEnd> ( fdt ) <S2SV_ModStart> ; switch ( tag ) { case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NO",0
760,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize < 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (",0
761,"<S2SV_ModStart> ; if ( i == NID_pkcs7_none ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_RECIPIENT ) ; goto err ; } <S2SV_ModStart> ; if ( i == NID_pkcs7_none ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_RECIPIENT ) ; goto err ; } <S2SV_ModStart> ; err : if ( i == NID_pkcs7_none ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_RECIPIENT ) ; goto err ; } <S2SV_ModStart> ; if ( i == NID_pkcs7_none ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_RECIPIENT ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog <S2SV_ModEnd> ( REDIS_VERBOSE, <S2SV_ModStart> ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
763,"<S2SV_ModStart> ; } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
764,"<S2SV_ModStart> int ret, wo <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } <S2SV_ModStart> wo = ( rbuf == NULL || rlen == 0 ) ; mutex_lock ( & d -> data_mutex ) ; ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
765,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", r",0
768,"<S2SV_ModStart> new_root_item ) ; if ( ret ) { kfree ( new_root_item ) ; kfree ( new_root_item ) ; kfree ( path ) ; goto root_item_alloc_fail ; } <S2SV_ModStart> new_root_item ) ; if ( ret ) { kfree ( new_root_item ) ; kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; kfree ( path ) ; kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; kfree ( path ) ; goto root_item_alloc_fail ; } dir_",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> NULL ) { size_t <S2SV_ModEnd> chanmap_size = psf <S2SV_ModStart>. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ;,0
771,"<S2SV_ModStart> this_h ) { # if CONFIG_VP9_HIGHBITDEPTH if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4 ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } else { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } # endif <S2SV_ModStart> 16 ) { if ( sf -> y_step_q4 == 16 ) { if ( sf -> x_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; } else { sf -> predict [ 0 ] [ 0 ] [ 1 ] = vp",0
772,<S2SV_ModStart> { int32_t nestsize = <S2SV_ModEnd> ms -> nest_size,0
773,"<S2SV_ModStart> ip6t_entry ) && ( <S2SV_ModStart> verdict < 0 || unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) return - 1 ;",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> sk ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( opt ) { rcu_assign_pointer ( np -> opt, NULL ) ; <S2SV_ModStart> ( opt ) { rcu_assign_pointer ( np -> opt, NULL ) ; <S2SV_ModStart> ( opt ) { rcu_assign_pointer ( np -> opt, NULL ) ; } <S2SV_ModEnd> sock_kfree_s ( sk <S2SV_ModStart> tot_len ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
777,"<S2SV_ModStart> ; BIO * cmsbio <S2SV_ModEnd> = NULL, <S2SV_ModStart> tmpin = NULL <S2SV_ModEnd> ; if (",0
778,<S2SV_ModStart> ; src_info. src_csum = np -> mcastopt. bits. srccsum <S2SV_ModStart> ; src_info. src_csum = np -> mcastopt. bits. srccsum ; src_info. src_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. src_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. ipi6_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. src_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. src_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. src_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. ipi6_csum_offset = np -> mcastopt. bits. srccsum_offset ; src_info. src_csum_offset = np -> mcastopt. bits. srccsum_offset ;,0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_v4_protosw_exit <S2SV_ModEnd> ( ) ;,0
780,"<S2SV_ModStart> cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_unbind_command ) ; service_named_unbind_command ( ""chanserv"", & cs_unbind_command ) ; service_named_unbind_command ( ""chanserv"", & cs_unbind_command ) ;",0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev ; netdev_notifier_info_t <S2SV_ModEnd> info ; netdev_notifier_info_init <S2SV_ModStart> info ; netdev_notifier_info_init <S2SV_ModEnd> ( & info,0
782,<S2SV_ModStart> ( current -> mm && current -> mm -> context. mm == mm ) { leave_mm ( smp_processor_id ( ) ) ; <S2SV_ModStart> ( smp_processor_id ( ) ) ; <S2SV_ModStart> ( smp_processor_id ( ) ) ;,0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ;",0
784,"<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ( fp ) ; if ( i >= sizeof ( temp ) ) return NULL ; <S2SV_ModStart> ) { char * ret ; temp [ i ] = malloc ( strlen ( temp ) + 10 ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } switch ( temp [ i ] ) { case 0 : ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } if ( foundit == 1 && ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) ) { char * ret ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } if ( temp [ i ] == 0 || temp [ i ] == EOF ) { ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } if (! strcmp ( temp, val ) ) { free ( temp ) ; return NULL ; }",0
785,<S2SV_ModStart> task -> slow_task ) { if (! del_timer ( & task -> slow_task -> timer ) ) return ; complete ( & task -> slow_task -> completion ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
786,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 2 + 16 ), GFP_NOFS ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
787,"<S2SV_ModStart> ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1",0
788,"<S2SV_ModStart>, data ) ; if ( size == BPLIST_FILL ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } <S2SV_ModStart>, data ) ; if ( size == BPLIST_FILL ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; }",0
789,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return",0
790,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> chan_mutex ) ; <S2SV_ModStart> dead = 1 ; mutex_unlock ( & pch -> chan_mutex ) ;,0
791,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct btrfs_dir_item * <S2SV_ModStart> * di ; struct btrfs_dir_item * dir_item ; <S2SV_ModStart> XATTR_REPLACE ) { dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( dir_item ) ) { ret = PTR_ERR ( dir_item ) ; goto out ; } else if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, dir_item ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, dir_item, name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } if (! di &&! value ) goto out ; } again : ret = btrfs_insert_xattr_item ( trans, root, path,",0
792,"<S2SV_ModStart> 0xbf ) return 1 ; if ( op -> len < 1 || op -> len > buf_len ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> %d"", __func__, op -> op ) ; return 1 ; }",0
793,<S2SV_ModStart> ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart> plane, encode_block_intra <S2SV_ModEnd> ) ; }",0
795,"<S2SV_ModStart> ; if ( key_is_negative ( key ) || test_bit ( KEY_FLAG_REVOKED, & key -> flags ) ) return - ENOKEY ; p = key -> payload. data [ 0 ] ; if (! p ) return - EINVAL ;",0
796,<S2SV_ModStart> ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { t += 255 ; ip ++ ; } else # endif { if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { t += 255 ; ip ++ ; } else # endif { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_IP ( t + 3 ) ) { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) ) { t += 255 ; ip ++ ; } else # endif { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) ) { if ( likely ( HAVE_IP ( t + 3 ) ) ) { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_IP ( t + 3 ) ) ) { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ),0
797,"<S2SV_ModStart> ; if ( fit_check_format <S2SV_ModEnd> ( fit, <S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ;",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> goto out6 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES <S2SV_ModStart> goto out7 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES <S2SV_ModStart> goto out8 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES <S2SV_ModStart> goto out9 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES <S2SV_ModStart> goto out10 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES <S2SV_ModStart> goto out9 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES <S2SV_ModStart> goto out10 ; <S2SV_ModEnd> rdmsrl_safe ( MSR_IA32_MSR_REGISTER_DEVICES,0
800,"<S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_size < sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> -> baseline_gf_interval * <S2SV_ModEnd> af_ratio ) / <S2SV_ModStart> 1 ) : <S2SV_ModEnd> ( rc -> <S2SV_ModStart> ) : ( rc -> av_per_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) : ( rc -> av_per_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) : ( rc -> av_per_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) : ( rc -> av_per_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) : ( rc -> av_per_frame_bandwidth <S2SV_ModEnd> * rc ->,0
803,"<S2SV_ModStart> i ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; else errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; }",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,"<S2SV_ModStart> ; } else { if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } if ( tbl -> indent > 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
806,"<S2SV_ModStart> tail ; if ( CDF_SEC_SIZE ( h ) > sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %""",0
807,<S2SV_ModStart> } # else ( void ) lex_env ; <S2SV_ModStart> } # endif <S2SV_ModEnd> # define YYPOPSTACK <S2SV_ModStart> } # else ( void ) <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # endif <S2SV_ModEnd> # if ( <S2SV_ModStart> } # if ( void ) <S2SV_ModStart> } # else ( void ) <S2SV_ModStart> } # endif # endif # endif,0
808,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),0
811,<S2SV_ModStart> hci_filter * f ; if ( len < sizeof ( uf ) ) return - EINVAL ;,0
812,"<S2SV_ModStart> int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> frame"" ) ; }",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart> peer. i = new -> peer. i ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
815,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fib_size ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if (",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> (%d)"", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> = transport -> asoc ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; sock_hold ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ;",0
818,"<S2SV_ModStart> * input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> 3 ; # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 2 ; } <S2SV_ModStart> input -= character_size ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; } else { max_bytes_matched = ( int ) yr_min ( input_size, RE_SC",0
819,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, int * returnintra <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart>, best_rd_sse = INT_MAX, zero_mv_sse = INT_MAX, zero_rd_sse <S2SV_ModStart>, best_rd_sse = INT_MAX, zero_rd_sse <S2SV_ModEnd> = INT_MAX ; <S2SV_ModStart>, best_rd_sse = INT_MAX, zero_rd_sse <S2SV_ModEnd> = INT_MAX ; <S2SV_ModStart>, best_rd_sse = INT_MAX, zero_rd_sse <S2SV_ModEnd> = INT_MAX ; <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, zero_rd_sse <S2SV_ModEnd> = INT_MAX ; <S2SV_ModStart> = INT_MAX ; # else mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; # if CONFIG_TEMPORAL_DENO",0
820,"<S2SV_ModStart>, MC_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR <S2SV_ModStart> ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept ( svm, AMI_VECTOR ) ; set_exception_intercept",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
822,"<S2SV_ModStart> h, const cdf_stream_t <S2SV_ModEnd> * sst, <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ;",0
823,"<S2SV_ModStart> ; UINT8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD16 i2_max_frm_num ; WORD32 u4_num_reorder_frames ; WORD32 u4_num_reorder_frames_adjusted ; <S2SV_ModStart> ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 16 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; u1_seq_parameter_set_id = ih264d_get_bits_h264 ( ps_bitstrm, 16 ) ; u1_seq_parameter_set_id = ih264d_get_bits_h264 ( ps_bitstrm, 24 ) ; u1_seq_parameter_set_id = ih264d_get_bits_h264 ( ps_bitstrm, 28 ) ; u1_seq_parameter_set_flag = ih264d_get_bits_h264 ( ps_bitstrm, 28 ) ; COPYTHECONTEXT ( ""SP",0
824,<S2SV_ModStart> -> palette ) ; if ( err ) return - EFAULT ;,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( cpi == NULL ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_",0
826,"<S2SV_ModStart> ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ;",0
827,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; <S2SV_ModStart>, input_photometric ; if ( length!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, length ) ; TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; return FALSE ; } if ( bitspersample!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_WIDTH, width ) ; TIFFSetField ( out, TIFFTAG_WIDTH, length ) ; TIFFSetField ( out, TIFFTAG_WIDTH, length ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, length ) ;",0
828,"<S2SV_ModStart> a ) { int r ; struct stat st ; <S2SV_ModStart> = '\\0' ; r = safe_lstat ( a -> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if (",0
829,"<S2SV_ModStart> ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
830,"<S2SV_ModStart> -> i_sb ) ; struct udf_entry * efe_entry ; <S2SV_ModStart> ibh ) { struct udf_entry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } efe_entry = ( struct extendedFileEntry * ) bh -> b_data ; fe_entry = ( struct fileEntry * ) bh -> b_data ; efe_entry = ( struct extendedFileEntry * ) bh -> b_data ; if ( fe_entry -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { struct fileEntry * fe ; fe = ( struct fileEntry * ) fe -> b_data ; efe = ( struct extendedFileEntry * ) fe -> b_data ; if ( fe_entry -> icbTag. strategyType == cpu_to_le16",0
831,<S2SV_ModStart> -> tx_size ; <S2SV_ModEnd> const TX_SIZE tx_size_uv <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> w ) ; memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
832,"<S2SV_ModStart> dst_size ) { uint16_t namelen = ff_amf_tag_size ( data, data_end ) ; <S2SV_ModStart> - 1 ; if ( data_end - data < 3 ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data_end - data < 3 ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data_end - data < 3 ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data_end - data < 3 ) return - 1 ; <S2SV_ModStart> data ++ ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ;",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
835,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if <S2SV_ModEnd> ( tif -> <S2SV_ModStart> wc ) ; return 0 ;,0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \' <S2SV_blank> \'"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( sk -> sk_bound_dev_if, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; <S2SV_ModStart> pid_t pid ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; <S2SV_ModStart> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } else { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } } if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_",0
840,"<S2SV_ModStart> == NULL || ( void * ) pReplyData > ( void * ) sizeof ( effect_param_t ) || <S2SV_ModStart> == NULL || ( void * ) pReplyData > ( void * ) sizeof ( effect_param_t ) || <S2SV_ModStart> == NULL || ( void * ) pReplyData > ( void * ) sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
843,"<S2SV_ModStart> OP_JUMP ) ; if (! L1 ) { jsC_error ( J, F, ""invalid <S2SV_blank> catch <S2SV_blank> statement"" ) ; } <S2SV_ModStart> OP_JUMP ) ; if (! L2 ) { jsC_error ( J, F, ""invalid <S2SV_blank> catch <S2SV_blank> statement"" ) ; } else { jsC_error ( J, F, ""invalid <S2SV_blank> catch <S2SV_blank> statement"" ) ; }",0
844,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_values ) ) ; * o_column_idx_id = ( unsigned int ) * ( * o_row_count ) ) ; * o_column_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count ) ) ; * o_values = (",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; int length ; RD_BOOL is_fastpath ; uint8 fastpath_hdr ; <S2SV_ModStart> ; ber_parse_header ( s, MCS_CONNECT_RESPONSE, & length ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ;",0
847,<S2SV_ModStart> pa_tgs_data * pa_tgs_data ; if ( pa_tgs_data && pa_tgs_data -> ticket_type == KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_data -> ticket_type!= KDC_REPLY_TYPE_TGS ) { if ( pa_tgs_,0
848,<S2SV_ModStart> ) ) { if ( ( len == 0 ) || ( <S2SV_ModStart> ) ) ) || ( ( len == 0 ) || ( <S2SV_ModStart> ) ) ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) || ( len == 0 ) ) ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) ) ) || ( ( len == 0 ) ) || ( ( len == 0 ) ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) || ( ( len == 0 ) && ( ( len == 0 ) && ( ( len == 0 ) && ( ( len == 0 ) && ( ( len == 0 ) && ( ( len == 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) || ( ( len == 0 ) || ( ( len == 0 ) ) || ( ( len == 0 ) ) || ( ( len == 0 ) || ( ( len == 0 ) ) || ( ( len == 0 ) && ( ( len == 0 ) && (,0
849,"<S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> idx ++ ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
852,<S2SV_ModStart> } } } } <S2SV_null> <S2SV_null>,0
853,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> smb_ofile_t * of <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,<S2SV_ModStart> 1 ] ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ] ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ] ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ] ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> 1 ] ; memcpy <S2SV_ModEnd> ( lf_mic ->,0
856,"<S2SV_ModStart> = AF_TIPC ; memset ( & addr -> addr, 0, sizeof ( * addr ) ) ;",0
857,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) { r = - EINVAL ; goto out ; } if (,0
858,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
859,"<S2SV_ModStart> ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 1 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 1 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting""",0
860,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; <S2SV_ModStart> p ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } else { p ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } else { * p ++ = * s ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } else { * p ++ = * s ++ ; if ( * s & 0x80 ) { PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p +=",0
861,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function",0
862,"<S2SV_ModStart> WaveHeader WaveHeader ; <S2SV_ModEnd> uint32_t bcount ; <S2SV_ModStart> uint32_t bcount ; if ( <S2SV_ModEnd> filehdr. ckID <S2SV_ModStart> wave_guid ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( <S2SV_ModEnd> filehdr. ckSize <S2SV_ModStart> ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize < 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (",0
864,<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_SLAVE <S2SV_ModEnd> ; goto __end,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> directory"", __func__ ) ; if ( <S2SV_ModEnd> stb. st_mode <S2SV_ModStart> stb. st_mode ) ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s:",0
866,"<S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL ) { <S2SV_ModStart> return ; } else if ( myentity_find_ext ( target )!= NULL ) { do_list ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( myentity_find_ext ( target )!= NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( myentity_find_ext ( target )!= NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) )",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,<S2SV_ModStart> goto error ; if (! ast -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; } <S2SV_ModStart> goto error ; if (! ast -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; } if (! ast -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_,0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; if ( flags & KRB5_RECVAUTH_SKIP_AUTHVERS ) { if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else { if ( strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem )",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
872,<S2SV_ModStart> ; * dptr ++ = ROSE_CALL_REQUEST ; * dptr ++ = ROSE_CLEAR_REQUEST ; * dptr ++ = ROSE_RESET_REQUEST ; <S2SV_ModStart> ; * dptr ++ = ROSE_CLEAR_REQUEST ; * dptr ++ = ROSE_RESET_REQUEST ; * dptr ++ = ROSE_RESET_REQUEST ;,0
873,<S2SV_ModStart> = new_ns ; <S2SV_ModEnd> if ( & <S2SV_ModStart> = new_ns ; <S2SV_ModEnd> if ( &,0
874,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES,0
875,<S2SV_ModStart> get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; case <S2SV_ModStart> case RXE_MEM_TYPE_MR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
877,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; }",0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return!! ref ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
881,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs <S2SV_ModStart> clusters - 1 ) { get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; else subseqEntry. value = 0 ; } else { subseqEntry. value = 0 ; }",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; bh_lock_sock ( sk ) ; <S2SV_ModStart> sk ) ; bh_unlock_sock ( sk ) ;,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> } ps_dec ->,0
885,<S2SV_ModStart> ; if ( unlikely ( src >= env_end - env_start ) ) { ret = - EINVAL ; goto free ; },0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode, 0 ) ; int result ; if ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 && ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) { result = parse_rock_ridge_inode_internal ( de, inode, 14 ) ; } else { result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart>, inode, 15 <S2SV_ModEnd> ) ; }",0
887,"<S2SV_ModStart> * user, struct file * file, <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return group ;",0
888,"<S2SV_ModStart> in ) ; if ( in -> linesize < 4 ) { av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; } else { av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; }",0
889,"<S2SV_ModStart> 1 ] ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] ) ; vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
890,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
891,"<S2SV_ModStart> uint16 strip, nstrips = 0 ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strip <S2SV_blank> points <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) TIFFNumberOfStrips ( in ) ) ; return 0 ; }",0
892,<S2SV_ModStart> const char need_to_append_dot = <S2SV_ModEnd> base_name [ base_len <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { char * const newname = ( char * ) mm_malloc ( sizeof ( struct search_domain ) + 1 ) ; if (! newname ) return NULL ; if (! newname ) return NULL ;,0
893,<S2SV_ModStart> { err = _nanosleep <S2SV_ModEnd> ( & delay,0
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, one_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, one_planes_filled ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; BYTE * <S2SV_ModStart> = context -> PlaneBuffers ; if ( originalSize == 0 ) return FALSE ; <S2SV_ModStart> < originalSize ) return FALSE ; if ( originalSize > UINT32_MAX / planeSize ) return FALSE ; <S2SV_ModStart> < originalSize ) return FALSE ; if ( originalSize > UINT32_MAX / planeSize ) return FALSE ; <S2SV_ModStart> < originalSize ) return FALSE ; <S2SV_ModStart> < originalSize ) return FALSE ; <S2SV_ModStart> += planeSize ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
897,<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; if ( ei -> i_mode == FSCAN_MODE_READ ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; if (! ei -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! ei -> i_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; return - ENOTEMPTY ; },0
898,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> "" <S2SV_blank> \\t,"", NULL ) ) ; state -> endpoints = sclone ( value ) ; } else { <S2SV_ModEnd> httpSetRouteName ( state",0
899,"<S2SV_ModStart>. cmp = type -> match_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. raw_data = description <S2SV_ModEnd>,. match_data",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> 8 ) ) ; if ( <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( header ) ;,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t res ; <S2SV_ModStart> * ptr = safe_calloc ( <S2SV_ModEnd> num * size <S2SV_ModStart> * size ), & res ) ; if (! res ) { free ( ptr ) ; return NULL ; } <S2SV_ModStart> ) ) { res = safe_calloc ( num, size ) ; if ( res ) { free ( res ) ; return NULL ; } <S2SV_ModStart> ) ) { res = safe_calloc ( num, size ) ; if ( res ) { free ( res ) ; } else { free ( res ) ; return NULL ; } <S2SV_ModEnd> return ptr ;",0
904,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( <S2SV_ModStart> dict ) { Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } else { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
906,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * ) & desc, sizeof ( * desc )",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; case PERF_EVENT_SET_OUTPUT : { int ret ; ret = perf_event_set_output ( event, NULL ) ; fdput ( output ) ; ret = perf_event_set_output ( event, NULL ) ; ret = ret ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_IOC_SET_FILTER :",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = <S2SV_ModEnd> crypto_alloc_skcipher ( name <S2SV_ModStart> crypto_alloc_skcipher ( name, <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( tfm ) { crypto_free_skcipher ( tfm ) ; return NULL ; } return tfm -> skcipher <S2SV_ModEnd> ; } <S2SV_null>",0
911,<S2SV_ModStart> ; if ( sha -> msg_len > ( u64 ) sizeof ( * sha_zero ) ) return - EINVAL ; if (,0
912,"<S2SV_ModStart> tile_height ) { int tile_stride = <S2SV_ModEnd> c -> tile_width <S2SV_ModStart> c -> tile_width, 16 ) ; aligned_height = FFALIGN ( c -> tile_height, 16 ) ; av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; av_free ( c -> kempf_flags ) ; c -> synth_tile = av_mallocz ( tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> synth_tile ) return AVERROR ( ENOMEM ) ; c -> synth_tile = av_mallocz ( tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz (",0
913,<S2SV_ModStart> ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
914,"<S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE,",0
915,"<S2SV_ModStart> ; register_savevm ( dev <S2SV_ModEnd>, ""stellaris_enet"",",0
916,"<S2SV_ModStart> p ) { <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( caplen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
917,<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & MS_RDONLY ) { rc = - EROFS ; goto out ; },0
918,<S2SV_ModStart> len && ( skb -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
919,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> raptor_sax2_set_uri_filter ( rdf_xml_parser,0
920,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al =",0
921,<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_SIZE ;,0
922,<S2SV_ModStart> ; if (! nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; },0
923,<S2SV_ModStart> = ucounts ; if (! new_ns -> user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - EPERM ) ; },0
924,<S2SV_ModStart> += dif ; return opt2 ;,0
925,"<S2SV_ModStart> ; if ( x86_pmu. max_pebs_events > INTEL_MAX_PEBS_EVENTS ) return - ENODEV ; <S2SV_ModStart> ; if ( x86_pmu. max_pebs_events > INTEL_MAX_PEBS_EVENTS ) return - ENODEV ; <S2SV_ModStart> ; if ( x86_pmu. max_counters_fixed > INTEL_MAX_PEBS_EVENTS ) return - ENODEV ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. num_counters_fixed = max ( ( int ) x86_pmu. num_counters_fixed, 3 ) ; } else { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. num_counters_fixed = max ( ( int ) edx. split. num_counters_fixed, 3 ) ; } if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86",0
926,<S2SV_ModStart> end - r -> begin ; int part_read = n <S2SV_ModEnd> / r -> <S2SV_ModStart> -> part_size ; if ( part_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ; <S2SV_ModStart> -> part_size ; if ( class_read > MAX_RESIDUE_PART_SIZE ) goto done ;,0
927,"<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { last_oow_ack_time = jiffies ; tp -> last_ack_time = now ; <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time ; tp -> last_ack_time = now ; } <S2SV_ModEnd> if ( ++ <S2SV_ModStart> ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tcp_send_ack ( sk ) ; } else { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> t ] ; vpx_write ( w, a -> value, a -> len, 0 ) ; vpx_write_tree ( w, vpx_coef_tree, p -> context_tree, v, n, i ) ; if ( b -> base_val ) { vpx_write_tree ( w, vpx_coef_con_tree, vpx_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n, i ) ; } else { vpx_write_tree ( w, vpx_coef_con_tree, vpx_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n, i ) ; } else { vpx_write_tree ( w, vpx_coef_tree, vpx_pareto8_full [ p -> context_tree [ PIVOT",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart> wb = { 0 <S2SV_ModStart> } ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> saved_wb ; write_uncompressed_header ( cpi, & wb ) ; uncompressed_hdr_size = vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; __le16 version ; __le16 <S2SV_ModEnd> country ; for <S2SV_ModStart> bcdHID ) ; version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_ModStart> bCountry ; for ( <S2SV_ModEnd> n = 0 <S2SV_ModStart> -> bNumDescriptors ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } rdesc = kmalloc ( rsize, GFP_KERNEL ) ; if (! rdesc ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - ENOMEM ; } if ( rsize < 0 ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u",0
933,"<S2SV_ModStart> struct ikev2_id id ; u_int id_len, idtype_len, i <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ND_TCHECK ( * ext ) ;",0
934,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
936,"<S2SV_ModStart> ; if ( jas_tvparser_gettag ( tvp ) == TAG_END ) { jas_tvparser_settag ( tvp, TAG_END ) ; jas_tvparser_settag ( tvp, TAG_END ) ; } else if ( jas_tvparser_gettag ( tvp ) == TAG_END_VIDEO ) { jas_tvparser_settag ( tvp, TAG_END_VIDEO ) ; } else if ( jas_tvparser_gettag ( tvp ) == TAG_END_VIDEO ) { jas_tvparser_settag ( tvp, TAG_END ) ; jas_tvparser_settag ( tvp, TAG_END ) ; } else if ( jas_tvparser_gettag ( tvp ) == TAG_END_VIDEO ) { jas_tvparser_settag ( tvp, TAG_END_VIDEO ) ; } else if ( jas_tvparser_gettag ( tvp ) == TAG_END_VIDEO ) { jas_tvparser_settag ( tvp, TAG_END ) ; jas_tvparser_set",0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
938,"<S2SV_ModStart> ; WORD32 xt0_0, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l1_1, x_l2_0, x_",0
939,<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> 0x80 ; if ( unlikely ( len <= 0x7f ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > datalen - dp ) ) goto data_overrun_error ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<=,0
940,"<S2SV_ModStart> val ; if (! ( flags & __GFP_ZERO ) ) { memset ( ptr, 0, size ) ; return NULL ; } <S2SV_ModEnd> return ptr ;",0
941,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, fname ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, fname ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, fname ) ; return FAILURE ; }",0
943,"<S2SV_ModStart> ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD <S2SV_ModEnd> + 1 ; <S2SV_ModStart> ] >= min && value [ n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( value, field -> value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min, 0, interrupt ) ; if ( field -> value [ n ] >= min && field -> value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( value, field -> value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 1, interrupt ) ; if ( search ( value, field -> value, count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt )",0
944,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
945,"<S2SV_ModStart> ; if ( ins_size < 0 || insns_size < 0 ) { RBinDexError ( rbin, ""ins_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ins_size ) ; return ; } <S2SV_ModStart> ) ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", insns_size ) ; return ; } if ( ins_size < 0 || insns_size < 0 ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ins_size ) ; return ; } <S2SV_ModStart> ) ) ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", insns_size ) ; return ; }",0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env,",0
947,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = valuelen ; if ( args -> rmtvaluelen < 0 ) { args -> rmtvaluelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
948,"<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION <S2SV_ModStart>, prepare_retval ; # endif <S2SV_ModStart>, prepare_retval ; # endif <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare ) ; if ( imp_dbh -> use_server_side_prepare ) { imp_sth -> use_server_side_prepare = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } # else if ( imp_dbh -> use_server_side_prepare ) { # if MYSQL_ASYNC imp_sth -> is_async = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", """,0
949,"<S2SV_ModStart> ; if ( key -> type -> destroy ) <S2SV_ModStart> type -> destroy ( key ) ; if ( test_bit ( KEY_FLAG_DEAD, & key -> flags ) )",0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 ; char * line ; char * lp ; char * line2 <S2SV_ModStart> { need *= 4 ; line2 = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( line2 == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( line2 ) ;,0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> sbi -> s_journal &&! handle ) goto out ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( val < 0 ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( val < 0 ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""-Infinity"" <S2SV_ModEnd>, len )",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> size < 6 ) { ASSERT ( result!= buf ) ; free ( result ) ; } else { free ( result ) ; },0
956,"<S2SV_ModStart> ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
957,"<S2SV_ModStart> LEX_ID ) { strncat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
958,"<S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
959,,1
960,"<S2SV_ModStart> * output ; <S2SV_ModEnd> ssize_t i ; <S2SV_ModStart> MagickFalse ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> input ) ) { <S2SV_ModEnd> fputc ( ( <S2SV_ModStart> ) c, output ) ; } ( void ) remove_utf8 ( argv [ i ] ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> : ext3_msg ( sb, ""error: <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, __bdevname ( <S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s"" <S2SV_ModEnd>, __bdevname (",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> atomic_dir = ""/tmp"" <S2SV_ModEnd> ; pw_init ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, atomic_dir ) )",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> s2 ) { size_t len = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> ) + 1U ; return memcmp ( s1, s2, len <S2SV_ModEnd> ) ; }",0
966,"<S2SV_ModStart> TRUE ; } gchar * to = xmpp_stanza_get_to ( message ) ; if (! to ) to = from ; Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> to ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> jid_to <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> to ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModEnd> Jid * my_jid <S2SV_ModStart> jid_to ) ; if (! my_jid ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> jid",0
967,"<S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"" <S2SV_ModEnd>, server.",0
968,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> st_v1_new_iv ) ; if ( st -> st_v1_new_iv. len == 0 ) { DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> encrypted <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; }",0
972,<S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_consumed < 1 || ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > MAX_BITSTREAM_BUFFER_SIZE ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = MAX_BITSTREAM_BUFFER_SIZE ; ps_dec -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = MAX_BITSTREAM_BUFFER_SIZE ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
973,<S2SV_ModStart> * zone ; <S2SV_ModEnd> old_width = s_map <S2SV_ModStart> ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; for ( x = 0 ; x < x_size ; ++ x ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; } else { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; } tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ],0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", ipaddr_string ( ndo, & cp [ len ] ) ) ) ; return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> ) { return vpx_print_string <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> 1 ) res = vpx_alg_encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>, pts, duration, flags <S2SV_ModEnd> ) ; else <S2SV_ModStart> i -- ) res = vpx_alg_encode <S2SV_ModEnd> ( ctx ->",0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; }",0
978,<S2SV_ModStart> ; if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,0
979,<S2SV_ModStart> = fake_used_mask ; perf_event_update_userpage ( event ) ; <S2SV_ModStart> group_entry ) { perf_event_update_userpage <S2SV_ModEnd> ( sibling ) <S2SV_ModStart> EINVAL ; } perf_event_update_userpage <S2SV_ModEnd> ( event ),0
980,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 0 ) { win_max",0
981,"<S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Start"" ) ; } else if ( startcode <= 0x14F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x15F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x14F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x15F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x16F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x17F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x18F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" )",0
982,<S2SV_ModStart> ; if ( nsops > INT_MAX / sizeof ( * sops ) ) return - EINVAL,0
983,<S2SV_ModStart> ] ; for ( i = 0 ; i < 17 ; i ++ ) s [ i ] = s [ i + 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sum += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c +,0
984,<S2SV_ModStart> ) ) { <S2SV_ModEnd> grub_fshelp_inode_dio ( node,0
985,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } else { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( <S2SV_ModEnd> casspecial ) { <S2SV_ModStart> casspecial ) { if ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!",0
986,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; }",0
987,"<S2SV_ModStart> RE_OPCODE_LITERAL ) { if ( * ip!= RE_OPCODE_LITERAL ) { FAIL_ON_ERROR ( callback ( * ip + 1, bytes_matched, flags, callback_args ) ) ; break ; }",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> token ) { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED",0
989,<S2SV_ModStart> mnt_instance ) ; list_del_init <S2SV_ModEnd> ( & mnt,0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ; } } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_lyrno ( pi )",0
992,<S2SV_ModStart> * symlink ; struct udf_inode_info * udf_inode = UDF_I ( inode ) ; struct udf_inode_info * udf_inode = UDF_I ( inode ) ; <S2SV_ModStart> iinfo ; uint32_t <S2SV_ModEnd> pos ; iinfo <S2SV_ModStart> 0 ; out : up_read ( & udf_inode -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err ; } up_read ( & udf_inode -> i_data_sem ) ; SetPageUptodate ( page ) ; <S2SV_ModStart> 0 ; out : up_read ( & udf_inode -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>,0
993,<S2SV_ModStart>. apic_base & X2APIC_ENABLE <S2SV_ModEnd> ) { if,0
994,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ent!= NULL <S2SV_ModStart> NULL ) { if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) goto cleanup ; } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } else { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } }",0
995,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
996,"<S2SV_ModStart> ) ) { memset ( bindata, 0, sizeof ( bindata ) ) ; <S2SV_ModStart> break ; case 'z' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'X' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'Y' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'Z' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'Z' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'Z' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'X' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'Y' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'Z' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'X' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'Z' : psf -> rwf_endian = SF_ENDIAN_LITT",0
997,<S2SV_ModStart> ; if ( <S2SV_ModEnd> d -> msg_len <S2SV_ModStart> ( d -> msg_len < CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len > CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) return - EINVAL ;,0
998,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone",0
1001,"<S2SV_ModStart> int num_items_scanned ; int <S2SV_ModEnd> pktnum, hr <S2SV_ModStart> 0 ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return",0
1002,<S2SV_ModStart> err = 0 ; msg -> msg_namelen = 0 ;,0
1003,"<S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key ) == IS_STRING ) { if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; } else { if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), & data, sizeof ( data ), NULL ) ; }",0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { if ( ibuf -> len < len ) { ret = - EINVAL ; break ; } <S2SV_ModEnd> obuf = * <S2SV_ModStart> obuf ) ; if (! obuf -> len ) { ret = - EINVAL ; break ; } <S2SV_ModEnd> * obuf =,0
1006,<S2SV_ModStart> if ( p -> tokenbuf == NULL || p -> tokenbuf [ p -> tokenpos ]!= c,0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x8 <S2SV_ModEnd> ; } <S2SV_null>,0
1008,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
1009,<S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ;,0
1010,<S2SV_ModStart> ) ) { if ( ( comp -> dx >> ( OPJ_UINT32 ) res -> pdx ) & ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) res -> pdy ) ) & ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) res -> pdx ) )!= ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) res -> pdy ) ) { if ( ( comp -> dx >> ( OPJ_UINT32 ) res -> pdx ) & ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) res -> pdy ) )!= ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) res -> pdx ) ) ) { if ( ( comp -> dx >> ( OPJ_UINT32 ) res -> pdx ) )!= ( OPJ_UINT32 ) res -> pdx ) ) { if ( ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) res ->,0
1011,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KR ) { return return_pkinit_kr ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KR ) { return return_pkinit_kr ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KR ) { return return_pkinit_kr ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KR ) { return return_pkinit_kr ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KR ) { return return_pkinit_kr ( context, request, reply,",0
1012,"<S2SV_ModStart> size_t extent ; if ( CheckQuantumMemoryOverflow ( count, quantum )!= MagickFalse ) return ( ( void * ) NULL ) ;",0
1013,"<S2SV_ModStart> -> stratum_port ; strncpy <S2SV_ModEnd> ( address, <S2SV_ModStart> ( address, ""%s:%s"" <S2SV_ModEnd>, url,",0
1014,"<S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 3 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 4 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 3 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 4 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_data ) ; <S2SV_ModStart>",0
1015,<S2SV_ModStart> ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
1016,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> write_lock ( & <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( tmp, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { set_bit ( tmp, cluster -> cl_nodes_bitmap ) ; }",0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModEnd> if (! <S2SV_ModStart> vb ) { <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart> dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! vb ) <S2SV_ModEnd> { dev_dbg ( <S2SV_ModStart> dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
1019,<S2SV_ModStart> ssize_t count ; if ( bytes > SENSIBLE_SIZE ) return 0,0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""error: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> too <S2SV_blank> long\\n"" ) ; return - 1 ; }",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ) ; xfs_trans_log_inode ( dp, XFS_",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ;",0
1024,"<S2SV_ModStart> ) ; hrtimer_set_expires ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_REL ) ;",0
1025,"<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart> L2CAP_MODE_BASIC } ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_",0
1026,<S2SV_ModStart> r ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ),0
1027,"<S2SV_ModStart> = 0 ; if ( s -> chunksize < 0 ) { av_log ( h, AV_LOG_ERROR, ""chunksize <S2SV_blank> is <S2SV_blank> negative\\n"" ) ; return - 1 ; }",0
1028,<S2SV_ModStart> u4_length ) { if ( ps_dec -> u2_total_mbs_coded == 0 ) { ps_dec -> u2_total_mbs_coded = 0 ; } else { ps_dec -> u2_total_mbs_coded = 0 ; },0
1029,"<S2SV_ModStart> tok ) ; if ( pair == 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1030,"<S2SV_ModStart> = seed ; } if ( seed ) err = crypto_rng_setseed ( tfm, seed ) ; else err = - EINVAL ;",0
1031,"<S2SV_ModStart> = uid ; atomic_set ( & new -> user -> user_count, 1 ) ; <S2SV_ModStart> } } if ( atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1032,<S2SV_ModStart> ; if ( msg_sys. msg_namelen > 0 && msg_sys. msg_namelen < msg_sys. msg_namelen ) { err = - EINVAL ; break ; },0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { if ( len < 8 * 32 ) { return - 1 ; } <S2SV_ModStart> 32 ] ; } return 0 ;,0
1035,"<S2SV_ModStart> ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> ee_block, path [ depth ]. p_ext -> ee_len ) ; err = - EIO ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> ee_block, path [ depth ]. p_ext -> ee_len ) ; err = - EIO ; goto out ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & open_flags",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1040,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t * out_dist_sum, int64_t * out_sse <S2SV_ModEnd> ) { int <S2SV_ModStart> int sse ; int64_t rate ; int64_t dist ; int64_t square_error ; int64_t quantizer ; if ( cpi -> speed > 4 ) x -> pred_sse [ ref ] = sse ; else x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t dist ; int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist_sum ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1042,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length )",0
1043,<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE - 1 ) return ( PAM_BUF_ERR ) ; <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE - 1 ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ),0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ;,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> desc = NULL <S2SV_ModStart> ldt ; sel >>= 3 ; mutex_lock ( & current -> active_mm -> context. lock ) ; desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < ldt -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1047,"<S2SV_ModStart> { memset ( dst_ptr1, src_ptr1 [ 0 ], extend_left ) ; memset ( dst_ptr2, src_ptr2 [ 0 ], extend_right ) ; src_ptr1 += src_stride ; src_ptr2 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i )",0
1048,<S2SV_ModStart> struct sctp_sockaddr_entry * laddr = NULL ; union sctp_addr * baddr = NULL ; union sctp_addr daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u16 matchlen = 0 ; __u8 bmatchlen <S2SV_ModEnd> ; sctp_scope_t scope <S2SV_ModStart> ) ; } laddr = & t -> ipaddr ; baddr = & t -> ipaddr ; daddr = & t -> ipaddr ; if ( daddr ) { fl6 -> daddr = daddr -> v6. sin6_addr ; fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCT,0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,<S2SV_ModStart> buf2 ; depth -- ; if ( buf2 == NULL ) return ( NULL ) ;,0
1051,"<S2SV_ModStart> -> protocol_timeout ) { g_source_add ( client -> priv -> protocol_timeout, conn ) ; client -> priv -> protocol_timeout = 0 ; }",0
1052,"<S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> slot ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> nid ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> page. p_flags ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> page. p_flags ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> page. p_flags ) ; <S2SV_ModStart> ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) io ; } <S2SV_ModEnd> return ( (",0
1053,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } return ERROR_FAILURE ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } return ERROR_FAILURE ;",0
1054,<S2SV_ModStart> NULL ) ; rb_ary_inc ( & ctx -> key_count ) ;,0
1055,"<S2SV_ModStart> -> dead_leaf ; if (! edit -> dead_leaf ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return false ; }",0
1056,<S2SV_ModStart> settings. udpport = 11211 ; settings. inter = NULL ; settings. maxconns = 64 * 1024 * 1024 ; settings. maxbytes = 64 * 1024 * 1024 ; settings. maxconns,0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15, x_16, x_18, x_19, x_20, x_21, n31 ; WORD32 n01, n11, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n11, n12, n22, n32, n03, n13, n23, n33 ; n01 = x_0 + x_2 ; n02 = x_1 + x_3 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n13 = x_6 + x_7 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n13 = x_6",0
1059,"<S2SV_ModStart> clips_ptr ) { if (! clips_ptr ) { ret = - ENOMEM ; goto out_err1 ; } <S2SV_ModStart> ), GFP_KERNEL ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; }",0
1060,<S2SV_ModStart> if ( unlikely ( pmd_trans_huge_or_clear_bad <S2SV_ModEnd> ( * pmd,0
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,<S2SV_ModStart> ; if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } <S2SV_ModStart> ; if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } <S2SV_ModStart> ; if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } <S2SV_ModStart> ; if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } <S2SV_ModStart> ; if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } <S2SV_ModStart> ) ; } if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; } if ( len < 0 ) { r_anal_esil_free ( esil ) ; break ; },0
1063,"<S2SV_ModStart>, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if (",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTail ; <S2SV_ModStart> + JQS_wTail )!= wTail ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTail = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) + 1 ; wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) writew ( 0, chip -> DSPQ + JQS_wHead ) ; else writew ( wTmp, chip -> DSPQ + JQS_wHead ) ; } inb ( chip -> io + HP_RXL ) ; return IRQ_HANDLED ;",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; },0
1066,<S2SV_ModStart> ACPI_STATUS status ; <S2SV_ModEnd> if ( acpi_gbl_module_code_list <S2SV_ModStart> * prev ; union acpi_operand_object * next ; while ( next ) { prev = next ; next = next -> method. mutex ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; } } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { return_,0
1067,<S2SV_ModStart> ; # ifdef HAVE_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPOR,0
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> enc ) { priv = vpx_calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> -> base ; priv -> sz = sizeof ( * priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> priv -> init_flags ; ctx -> priv -> init_flags = ctx -> priv -> init_flags ; ctx -> priv -> init_flags = ctx -> priv -> init_flags ; ctx -> priv -> init_flags = ctx -> priv -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> priv -> init_flags ; ctx -> priv",0
1070,"<S2SV_ModStart> ) { xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ;",0
1071,"<S2SV_ModStart> -> decode ( <S2SV_ModEnd> gb, rc",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], & tipc_nl_sock_policy ) ; if ( err ) return err ; <S2SV_ModStart> - EINVAL ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> err = __tipc_nl_list_sk_publ",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
1074,<S2SV_ModStart> vma ) ; <S2SV_ModEnd> if ( priv,0
1075,<S2SV_ModStart> -> bLength ; if ( total_len < length ) break ;,0
1076,<S2SV_ModStart> ) ) { <S2SV_ModEnd> file_sb_list_del ( file,0
1077,"<S2SV_ModStart> efe ) ; if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ;,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_assign_pointer ( inet -> inet_opt, NULL ) ; <S2SV_ModStart> inet -> opt ) ; rcu_dereference_check ( sk -> sk_dst_cache, 1 )",0
1081,<S2SV_ModStart> (! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { goto invalid ; } break ; } } <S2SV_ModEnd> c -= '0' <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { if (! saw_digit ) { goto invalid ; } break ; } <S2SV_ModEnd> } c -=,0
1082,<S2SV_ModStart> ; name_loc -> namelen = be16_to_cpu ( entry -> namelen ) ; name_rmt -> namelen = be16_to_cpu ( entry -> namelen ) ; name_loc -> namelen = be16_to_cpu ( entry -> namelen ) ; name_rmt -> namelen = be16_to_cpu ( entry -> namelen ) ; name_loc -> namelen = be16_to_cpu ( entry -> namelen ) ; name_rmt -> namelen = be16_to_cpu ( entry -> namelen ) ; name_rmt -> namelen = be16_to_cpu ( entry -> namelen ) ; name_loc -> namelen = be16_to_cpu ( entry -> namelen ) ; name_rmt -> namelen = be16_to_cpu ( entry -> namelen ) ; name_loc -> namelen = be16_to_cpu ( entry -> namelen ) ; name_rmt -> namelen = be16_to_cpu ( entry -> namelen ) ; if ( name_,0
1083,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest (",0
1084,<S2SV_ModStart> = object_length ; if (! object_data ) { return SC_ERROR_OUT_OF_MEMORY ; },0
1085,"<S2SV_ModStart> ) ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ) ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ) ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( j + label_len > length ) return - 1 ; if ( j + label_len > length ) return - 1 ; if ( j + label_len > length ) return - 1 ; if,0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return - 1 ;",0
1089,"<S2SV_ModStart> ( vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; else return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_none ( entry ) ) { if ( unlikely ( vma -> vm_ops ) ) return do_fault ( mm, vma, vma, address, pte, pmd, flags ) ; } else { if ( unlikely ( pte_write ( entry ) ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_sp",0
1090,"<S2SV_ModStart> s ) { size_t len = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; memcpy ( r, s, len ) ; free ( r ) ;",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,<S2SV_ModStart> idx ++ ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
1093,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cu -> length <S2SV_ModStart> -> length ]. attr_values [ i ] == 0 ) { eprintf ( ""Warning: <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1094,"<S2SV_ModStart> p_block ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unknown <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> %s"", p_enc -> fmt_in. i_codec ) ; return NULL ; } <S2SV_ModStart> p_block ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unknown <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> %s"", p_enc -> fmt_in. i_codec ) ; return NULL ; }",0
1095,"<S2SV_ModStart> bfname ) ; if (! bstrchr ( bfname, '\\0' ) >= 0 ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; break ; }",0
1096,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> flags ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", len - length ) ; return ; } if ( length < len ) { ND_PRINT ( (",0
1097,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ;,0
1098,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ;",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_parallel_decode ) { vp9_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null>",0
1102,"<S2SV_ModStart> ( ctxt, MSR_EFER <S2SV_ModEnd>, & efer <S2SV_ModStart>, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { ops -> d = 0 ; cs. l = 1 ; } else { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt",0
1103,"<S2SV_ModStart> ; if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else e = ast_for_expr ( c, ch ) ; if (! e ) return NULL ;",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, unsigned char * running_avg_y, int avg_y_stride, int motion_magnitude, int y_offset, int uv_offset ) { <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, * avg_y_buffer = running_avg -> y_buffer + y_offset ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { if ( diff > 0 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { running_avg_y [ c ] = running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0",0
1106,"<S2SV_ModStart> ) ) { if ( ( reqPtr -> request. line == NULL ) || ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> line <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line"" ) ; return SOCK_MORE ; }",0
1107,"<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITMAP ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; }",0
1108,<S2SV_ModStart> -> srcIpAddr ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif # if ( SOCKET_FLAG_PEEK ) == 0,0
1109,"<S2SV_ModStart> xop ) { struct se_subsystem_dev * sdev ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) sdev = xop -> src_dev ; else sdev = xop -> dst_dev ; else sdev = xop -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", sdev, & sdev -> dev_group. cg_item ) ; target_undepend_item ( & sdev -> dev_group. cg_item ) ;",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; ext2_xattr_cache_insert ( inode, header, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ) ; ext2_xattr_cache_insert ( inode, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModEnd> ) ; }",0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { VPxWorker * const worker = ctx -> worker ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> data1 ; if ( frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data -> frame_worker_data <S2SV_ModEnd> -> cpi, <S2SV_ModStart> -> active_map, frame_worker_data -> frame_worker_data -> frame_worker_data <S2SV_ModEnd> -> rows, <S2SV_ModStart> -> cols ) ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> inode -> i_ctime <S2SV_ModStart> 0 ) return rc <S2SV_ModEnd> ; mark_inode_dirty",0
1115,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd>",0
1116,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1117,<S2SV_ModStart> size_t maxlen = <S2SV_ModEnd> 3 * len,0
1118,"<S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point <S2SV_blank> in <S2SV_blank> your <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> convert_to_long ( * var ) ; points [ i ]. y = Z_LVAL_PP ( var ) ; } if ( <S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point <S2SV_blank> in <S2SV_blank> your <S2SV_blank> array"" ) ; RETURN_FALSE ; }",0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> == SIGEV_NONE ; <S2SV_ModEnd> iv = timr,0
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData *",0
1122,"<S2SV_ModStart>. path ; int err ; <S2SV_ModStart>, NULL ) ; err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> return CURLE_OUT_OF_MEMORY ; }",0
1123,<S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ;,0
1124,"<S2SV_ModStart> -> first_slice_in_pic_flag = get_bits1 <S2SV_ModEnd> ( gb ) <S2SV_ModStart> ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; }",0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> } ps_dec ->,0
1126,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> IMPEG2D_TRACE_MB_START ( ps_dec <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; }",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const pbi_cfg = cm -> pbi_cfg ; <S2SV_ModStart> YV12_BUFFER_CONFIG * const cfg = & pbi_cfg -> yv12_frame_bufs [ pbi_cfg -> num_frame_bufs - 1 <S2SV_ModEnd> ]. buf <S2SV_ModStart> const cfg = & pbi_cfg -> yv12_frame_bufs [ pbi_cfg -> num_frame_bufs - 1 <S2SV_ModEnd> ]. buf <S2SV_ModStart>. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> int i ; <S2SV_ModStart> ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> pd -> subsampling_x ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_,0
1130,<S2SV_ModStart> -> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1131,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1132,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE",0
1133,"<S2SV_ModStart> nrow ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize ) < 0 ) { return 0 ; } <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( buf == NULL ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize ) < 0 ) { return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> % rowsperstrip ; if ( <S2SV_ModStart> ; if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize ) < 0 ) { return ( 0 ) ; } if ( _TIFFReadEncodedStripAndAlloc",0
1134,<S2SV_ModStart> } } } <S2SV_ModEnd> return 0 ;,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1136,<S2SV_ModStart> upid == - 1 || upid == 0,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1139,"<S2SV_ModStart> ; const int bytes_per_sample = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ; <S2SV_ModStart> ( buf, bytes_per_sample <S2SV_ModEnd>, w,",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > attr_len - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dm_dev = lc -> dev ; struct dm_dev * dm_dev = dm_dev -> bd_dev ; return dm_dev_driver_ioctl ( dm_dev, <S2SV_ModStart>, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
1142,<S2SV_ModStart> -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx ->,0
1143,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1144,"<S2SV_ModStart> fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> fslib_copy_libs <S2SV_blank> %s\\n"", full_path ) ;",0
1145,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; if ( <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""cc"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"",",0
1151,<S2SV_ModStart> -> sect <= 0 || g -> head <= 0 || g -> track > UDP -> tracks || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 <S2SV_ModEnd> ) return -,0
1152,"<S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( line, sizeof ( line ) <S2SV_ModEnd> ) ; if",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( ) ; <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; send_udp ( curconn, & pdata ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ;",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
1157,<S2SV_ModStart> out_unmap ; } if ( iov. iov_len < iov. iov_len ) { ret = - EFAULT ; goto out_unmap ; },0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> path, 0 <S2SV_ModEnd>, & len <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; smtpc -> domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state",0
1160,"<S2SV_ModStart> ; for ( j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; }",0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> ) + RDS_CONG_MAP_BYTES <S2SV_ModEnd> ; } if,0
1163,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,"<S2SV_ModStart> ) ) { if ( JAS_CAST ( jas_uint_t, pchg -> picomp -> pirlvls [ pi -> rlvlno ] ) >= JAS_CAST ( jas_uint_t, pchg -> picomp -> pirlvls [ pi -> picomp -> pirlvlno ] ) ) { continue ; }",0
1166,"<S2SV_ModStart> ) ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr <S2SV_ModEnd>, & res",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION <S2SV_ModEnd> ; } if <S2SV_ModStart> server_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( k",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModEnd> thread -> tp_value <S2SV_ModStart> ARM_r3 ; } <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1170,"<S2SV_ModStart> bufsize ) { size_t <S2SV_ModEnd> obj ; JAS_DBGLOG <S2SV_ModStart> ) ) ; obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> obj_ = ( void * ) obj ; obj -> myalloc_ = 1 ; } if ( buf ) { obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ = 1 ; } if (! obj -> buf_ ) { jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ = 1 ; } if (! obj -> buf_ ) { jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ = 1 ; } if (! obj -> buf",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkalg, <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> have_sig ; size_t <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & have_sig, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || (",0
1172,"<S2SV_ModStart> uint32_t bcount ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( <S2SV_ModEnd> filehdr. ckID <S2SV_ModStart> ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1173,"<S2SV_ModStart> if (! gsasl_server_support_p <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> mech ) ) { _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_INVALID_MECHANISM, NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o + 12, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji""",0
1176,"<S2SV_ModStart> ; if ( db_count > EXT2_SB_MAX_DBS ( sb ) ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; goto failed_blockgroup_lock ; } if ( db_count > EXT2_SB_MAX_DBS ( sb ) ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; goto failed_blockgroup_lock ; } if ( db_count > EXT2_SB_MAX_DBS ( sb ) ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds",0
1177,<S2SV_ModStart> bd_addr ) { btif_dm_lock ( ) ;,0
1178,<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if (,0
1179,"<S2SV_ModStart> int i ; jas_matind_t numrows ; jas_matind_t numcols ; <S2SV_ModStart> ( matrix = jas_malloc ( <S2SV_ModEnd> sizeof ( jas_matrix_t <S2SV_ModStart> ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } if ( matrix -> data_ = jas_alloc2 ( matrix -> data_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> rows_ [ i ] =",0
1180,<S2SV_ModStart> ; if ( hlen + sizeof ( struct frag_hdr ) > skb -> len ) { err = - EMSGSIZE ; goto slow_path ; },0
1181,"<S2SV_ModStart> * req ; <S2SV_ModEnd> r = DO_UPCAST <S2SV_ModStart> SCSIDiskReq, req <S2SV_ModEnd> ) ; r",0
1182,<S2SV_ModStart> int i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> expect = 8 <S2SV_ModStart> + buf -> cursor ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = 0 ; xmax = 0 ; if ( xmin == 0 || xmax == 0 || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; if ( snap == NULL ) return ( Datum ) NULL ;,0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ;",0
1185,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> BUILD_BUG_ON ( sizeof <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = xfrm_policy_walk_init <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> cb -> args <S2SV_ModStart> 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } <S2SV_ModEnd> ( void )",0
1186,<S2SV_ModStart> = - 1 ; struct oe_epoll * epoll ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> -> d_inode ; struct ovl_inode * upperdir = ovl_dentry_upper ( dentry ) ; int err ; inode_lock_nested ( dir, I_MUTEX_PARENT ) ; <S2SV_ModStart> = - ESTALE ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { err = - ENOENT ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option (",0
1189,<S2SV_ModStart> &&! ( nmemb || <S2SV_ModStart> size ) ) { av_free ( * ptrptr ) ; return AVERROR ( ENOMEM ) ; },0
1190,<S2SV_ModStart> name == MAPI_BODY_HTML || <S2SV_ModStart> name == MAPI_BODY_RTF || <S2SV_ModStart> name == MAPI_RTF_COMPRESSED || <S2SV_ModStart> name == MAPI_BODY_RAW ) { body. raw_bodies = get_raw_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RAW ) { body. raw_bodies = get_raw_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RAW ) { body. raw_bodies = get_raw_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RAW ) { body. raw_bodies = get_raw_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", <S2SV_ModStart> name ) ; goto error ; } if ( box -> info -> type!= JAS_BOX_FTYP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type ) ; goto error ; }",0
1193,,1
1194,<S2SV_ModStart> journal_t * journal <S2SV_ModEnd> = EXT4_JOURNAL (,0
1195,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> mdia ) return GF_OUT_OF_MEM ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> DTSprev = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if (! writer -> stsc ) return GF_OUT_OF_MEM ;",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> int plen ; unsigned char pass_salt [ 16 ] ; unsigned <S2SV_ModStart> ] = 0 ; memcpy ( pass_salt, password, sizeof ( pass_salt ) ) ; # else strncpy ( pass_salt, password, 82 ) ; md5data [ 0 ] = 0 ; pass_salt [ 0 ] = '\\0' ; pass_salt [ 1 ] = '\\0' ; pass_salt [ 2 ] = '\\0' ; pass_salt [ 3 ] = '\\0' ; pass_salt [ 4 ] = '\\0' ; pass_salt [ 5 ] = '\\0' ; pass_salt [ 6 ] = '\\0' ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } width = htole16 ( width ) ;",0
1198,<S2SV_ModStart> void * dllhandle = NULL <S2SV_ModEnd> ; if (,0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> 0xfffffe00UL ) # define PCDGetBits ( n ) ( sum << n ) & 0xffffffff ; bits -= n ; while ( bits <= 24 ) { if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } sum |= ( ( unsigned int ) ( * p ) << ( 24 - bits ) ) ; bits += 8 ; } else { if ( p >= buffer + 0x800 ) ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } sum |= ( ( unsigned int ) ( * p ) << ( 24 - bits ) ) ; } if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed""",0
1201,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1202,<S2SV_ModStart> ) ; g_hash_table_remove_all ( headers ) ;,0
1203,"<S2SV_ModStart> # ifdef HAVE_IPV6 char * p ; if ( str_len > 1 && * ( str + 1 ) == '[' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } else { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return estrndup ( str + 1, str_len - 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } # else if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to",0
1204,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( src,",0
1205,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( c -> cblk_style == 0 ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; } else { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; }",0
1206,"<S2SV_ModStart> ( '%' == ( char ) <S2SV_ModStart> ) ) { ptr ++ ; } else if ( '{' == ( char ) ptr [ 1 ] ) { ptr += 2 ; } else if ( '}' == ( char ) ptr [ 1 ] ) { fputs ( ""%{"", stream ) ; ptr += 2 ; } else if ( '}' == ( char ) ptr [ 1 ] ) { fputc ( '}', stream ) ; ptr += 2 ; } else { if ( '}' == ( char ) ptr [ 1 ] ) { fputs ( ""%{"", stream ) ; ptr += 2 ; } else if ( '}' == ( char ) ptr [ 1 ] ) { fputc ( '}', stream ) ; ptr += 2 ; } else if ( '{' == ( char ) ptr [ 1 ] ) { fputc ( '}', stream ) ; ptr += 2 ; } else if ( '}' == ( char ) ptr [ 1 ] ) { fputc ( '}', stream ) ; ptr += 2 ; } else { if ( '{' == ( char ) ptr [ 1 ] ) { fputs ( ""%{"", stream ) ; ptr += 2 ; } else { fputc ( '}', stream ) ; ptr += 2 ; end = strchr ( ptr,",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & x <S2SV_ModStart> dummy_rate ; int64_t <S2SV_ModEnd> dummy_dist ; BLOCK_SIZE <S2SV_ModStart> BLOCK_SIZE i ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ i ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index )",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * bw ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } ND_TCHECK ( * bw ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tlen ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT",0
1209,"<S2SV_ModStart> void inc_mvs ( MB_MODE_INFO_EXT * const mbmi_ext, <S2SV_ModEnd> nmv_context_counts * counts <S2SV_ModStart> i ) { MV_EXT * ref = & mbmi_ext -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const MV_EXT * diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,<S2SV_ModStart> ) ; if ( skb_out -> len + skb -> len > size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; },0
1212,"<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; INIT_WORK ( & sta -> ampdu_mlme. drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_ba_session_work ) ; mutex_init ( & sta -> ampdu_mlme. mtx ) ;",0
1213,<S2SV_ModStart> &&! capable <S2SV_ModEnd> ( CAP_SYS_ADMIN ),0
1214,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface\\n"" ) ; return - ENODEV ; }",0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> return ; netsnmp_init_mib_internals ( ) ; env_var = strdup ( env_var ) ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ) { add_mibfile ( <S2SV_ModEnd> entry, NULL <S2SV_ModStart> ) { add_mibfile ( <S2SV_ModEnd> entry, NULL <S2SV_ModStart> ) { add_mibfile ( <S2SV_ModEnd> entry, NULL <S2SV_ModStart> ) { add_mibfile ( <S2SV_ModEnd> entry, NULL",0
1217,"<S2SV_ModStart> struct list_head tmplist <S2SV_ModEnd> ; newsk -> <S2SV_ModStart> -> sk_rcvbuf ; sctp_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & newsp -> asconf_list, sizeof ( tmplist ) ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, sizeof ( tmplist ) ) ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, & assoc -> base. bind_addr, GFP_KERNEL ) ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = 0 ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) ->",0
1218,"<S2SV_ModStart> O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_EVBIT, EV_SYN ) ; if ( <S2SV_ModStart> fd, UI_DEV_CREATE, & dev ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank>",0
1219,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> short sel ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart>! desc ) return <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free,0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ( image == ( Image * ) NULL ) ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1225,"<S2SV_ModStart> ( ps_stream, <S2SV_ModEnd> START_CODE_PREFIX_LEN )!= <S2SV_ModStart> ( ps_stream, <S2SV_ModEnd> START_CODE_PREFIX_LEN )!=",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
1227,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> imethod -> is_inflated <S2SV_ModStart> imethod -> is_inflated ) { mono_class_inflate_generic_method ( method, imethod ) ; return NULL ; }",0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart>, count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > F2FS_MAX_LOG_SEGS || le32_to_cpu ( raw_super -> log_sectorsize ) < F2FS_MIN_LOG_SEGS ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> char * last_elem <S2SV_ModEnd>, * wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) )? l -> l_origin : l -> l_platform ; if ( repl == NULL && repl!= ( const char * ) - 1 ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? NULL : l -> l_origin ) : l -> l_platform ) ; if ( repl!= ( const char * ) - 1 ) ) {",0
1232,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart>, sin6, msg -> msg_name ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return - EINVAL ;",0
1234,<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if (! iph ) goto inhdr_error ; if ( <S2SV_ModStart> return 0 ; <S2SV_ModEnd> opt -> optlen,0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ; if ( rtm -> rt_flags & RTCF_MULTICAST ) { ip_rt_put ( rt ) ; err = - EINVAL ; goto errout ; } if ( rtm -> rt_flags & RTCF_MULTICAST ) { ip_rt_put ( rt ) ; err = - EINVAL ; goto errout ; } if ( rtm -> rt_flags & RTCF_MULTICAST ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_flags & RTCF_MULTICAST ) { ip_rt_put ( rt ) ; err = - EINVAL ; goto errout ; } if ( rtm -> rt_flags & RTCF_MULTICAST ) { ip_rt_put ( rt ) ; err = - EINVAL ; goto errout ; } if (! rtm -> rt_flags & RTCF_MULTICAST ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_flags & RTCF_MULTICAST ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_flags & RTCF_,0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> ; errout : free ( info -> stagemasks ) ;,0
1239,<S2SV_ModStart> -> copied_seq = seq ; tp -> copied_offset = offset ;,0
1240,"<S2SV_ModStart> = 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> err ) ; <S2SV_ModEnd> if ( key_data_in <S2SV_ModStart> NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ;",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else {,0
1243,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EACCES ;,0
1244,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> ( param, <S2SV_ModEnd> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name",0
1246,"<S2SV_ModStart> } opt = rcu_dereference_protected ( inet_sk ( sk ) -> opt, sock_owned_by_user ( sk ) ) ;",0
1247,"<S2SV_ModStart> ) ) { if ( kvm_x86_ops -> get_cpl ( vcpu ) < 0 || kvm_x86_ops -> get_cpl ( vcpu ) < 0 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) < 0 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 || kvm_x86_ops -> get_cpl ( vcpu ) > 1 ) ) { kvm_queue_exception ( vcpu, UD_VECTOR ) ; return",0
1248,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1249,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek <S2SV_ModEnd> ( s,",0
1250,"<S2SV_ModStart> ) ; } if ( pData -> multicastHops > - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ;",0
1251,"<S2SV_ModStart> return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1252,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt = & transport -> opt ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return - EINVAL <S2SV_ModEnd> ; return ip6_xmit",0
1253,"<S2SV_ModStart> ; if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ; MATLAB_KO : if ( clone_info == ( ImageInfo * ) NULL ) { InheritException ( clone_info, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
1257,"<S2SV_ModStart> kadm5_policy_ent_rec pol ; osa_princ_ent_rec hist_princ ; <S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; hist_princ = adb. hist_princ ; last_pwd = adb. last_pwd <S2SV_ModStart> last_pwd ) ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTE",0
1258,"<S2SV_ModStart>, result = RLC_ERR <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> (! bn_is_zero <S2SV_ModEnd> ( t ) <S2SV_ModStart> (! bn_is_zero <S2SV_ModEnd> ( t ) <S2SV_ModStart> (! bn_is_zero <S2SV_ModEnd> ( t ) <S2SV_ModStart> { result = RLC_ERR <S2SV_ModEnd> ; } do <S2SV_ModStart> ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR <S2SV_ModEnd> ; } do <S2SV_ModStart> ] ; if ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; result = RLC_OK ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; if (! bn_is_zero ( t ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_",0
1259,<S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ;",0
1262,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] < 0 ) { continue ; } <S2SV_ModEnd> count [ i <S2SV_ModStart> i ] += <S2SV_ModEnd> cm -> counts,0
1264,"<S2SV_ModStart> { token ++ ; } while ( token [ 0 ] =='<S2SV_blank>') { token ++ ; } while ( token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""imm"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. type = ARM_NOTYPE ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. shift = ARM_NO_SHIFT",0
1265,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> td. cm ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> = 0 ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; }",0
1266,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = <S2SV_ModStart> 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
1267,<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ) ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; if,0
1268,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_lock ( & card -> lock ) ; <S2SV_ModStart> ctl_files_rwlock ) ; mutex_unlock ( & card -> lock,0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s [ padlen + 3 ]!= 0x00 ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1271,<S2SV_ModStart> -> u2_frame_num ; if ( ps_dec -> u2_total_mbs_coded == 0 ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = 0 ; ps_,0
1272,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; OPENSSL_free ( rdata ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } if (,0
1273,"<S2SV_ModStart> int ret ; if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( <S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; }",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( karg ) ; <S2SV_ModEnd> return - ENODEV",0
1275,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> char * path <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> i, len ; size_t <S2SV_ModEnd> len_sent = 0 <S2SV_ModStart> -> arg_start ; size_t <S2SV_ModEnd> buf ; p <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; len = audit_log",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1279,"<S2SV_ModStart> err_info ) { gchar line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; <S2SV_ModStart> FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } pkt_len = parse_netscreen_rec_hdr ( phdr, line, cap_int, & cap_dir, cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len,",0
1280,"<S2SV_ModStart> rq ) { struct kvm_vcpu * vcpu = & __get_cpu_var ( vcpu_sched ) ; <S2SV_ModStart> rq ) ; struct kvm_vcpu * vcpu = & __get_cpu_var ( vcpu_sched ) ; struct kvm_vcpu * vcpu = & __get_cpu_var ( vcpu_sched ) ; struct kvm_vcpu * vcpu = & __get_cpu_var ( vcpu_sched, kvm_vcpu ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> rq -> clock <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1281,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> st ) { union blkif_back_rings * blk_rings ; <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; }",0
1283,<S2SV_ModStart> ; if ( <S2SV_ModEnd> entry -> attributes <S2SV_ModStart> KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ),0
1284,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 12 <S2SV_ModStart> + 12 < 12 || ( datao + 12 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries = NULL ; if ( n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { exif_log ( en -> log, EXIF_LOG_CODE_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } exif_mnote",0
1285,"<S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( framestring ), sizeof ( framestring ), sizeof ( framestring ), sizeof ( framestring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring )",0
1286,"<S2SV_ModStart> ; ND_TCHECK_16BITS ( & ext_dp -> icmp_mpls_ext_hdr_len ) ; <S2SV_ModStart> ) snprintf ( cp, sizeof ( cp ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ) snprintf ( cp, sizeof ( cp ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ) snprintf ( cp, sizeof ( cp ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ) snprintf ( cp, sizeof ( cp ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ) snprintf ( cp, sizeof ( cp ) <S2SV_ModEnd>, ""%s"",",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } ci = d_inode ( dir ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_DEAD ) ) ci = NULL ; if ( ci && ci -> ci_keyring_key && ( ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ; if ( ci && ci -> ci_keyring_key ) ci = NULL ; spin_lock ( & dentry -> d_lock ) ; cached_with_key = dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ; spin_unlock ( & dentry -> d_lock ) ; dir_has_key = ( ci!= NULL ) ; dput ( dir ) ; if (! dir_has_key ) return 0 ;,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ) ; CRYPTO_THREAD_write_lock <S2SV_ModEnd> ( stunnel_locks [ <S2SV_ModStart> ] ) ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> connect_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; service_free ( opt ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ;",0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= sizeof ( numbers ) ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc >= sizeof ( numbers ) ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; }",0
1290,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_HIGHBITDEPTH if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { context. curX = i -> posX ; context. curY = i -> posY ; } else { context. curX = i -> posX ; } <S2SV_ModEnd> # else if <S2SV_ModStart> NGIFLIB_MODE_HIGHBITDEPTH ) { if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { context. curX = i -> posX ; context. curY = i -> posY ; } else { context. curX = i -> posX ; } } # else if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { context. curY = i -> posY ; } else { if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { if,0
1291,"<S2SV_ModStart> n ) ; if ( l + m > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if (",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart>, message ) \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart>, message ) \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart>, message ) \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart>, message ) \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart>, message ) \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart>, message ) \\\n} <S2SV_ModEnd> char explicit_vr [",0
1293,<S2SV_ModStart> void ) { if ( recovery_started ) { recovery_started = 0 ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 ) ) ;",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> %s"", req -> socket, n ) ;",0
1297,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 ihevcd_ref_list ( codec_t * ps_codec, pps_t * ps_pps, sps_t * ps_sps, slice_header_t * ps_slice_hdr ) { ps_codec -> ai4_ref_list_total_curr ++ ; ps_codec -> ai4_ref_list_total_curr ++ ; ps_codec -> ai4_ref_list_total_curr ++ ; ps_codec -> ai4_num_ref_curr_before = 0 ; ps_codec -> ai4_num_ref_curr_after = 0 ; ps_codec -> ai4_num_ref_curr_after = 0 ; ps_codec -> ai4_num_ref_list_total_curr ++ ; ps_codec -> ai4_ref_list_total_curr ++ ; ps_codec -> ai4_ref_list_total_curr ++ ; ps_codec -> ai4_num_ref_curr_after = 0 ; ps_codec -> ai4_num_ref_curr_after",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = <S2SV_ModStart> PTRACE_SET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = put_user ( ptrace_get_thread_area ( child ) -> tp_value, datap ) ; else ret = <S2SV_ModEnd> put_user ( ptrace_get_syscall",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1300,"<S2SV_ModStart> * item, printbuffer * p <S2SV_ModStart> = 0 ; if ( p ) { <S2SV_ModStart> = 1 ; p -> string = str = print_string_ptr ( child -> string ) ; p -> value = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( str ) + 2 ; else fail = 1 ; child = child -> next ; } if (! out ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; p -> string = str ; p -> value = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; p -> value = ret ; p -> next ; } if (! out ) { out = ( char * ) cJSON_malloc ( len ) ; if (! ptr ) return 0 ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\n' ; * ptr ++ = 0 ; for ( i = 0 ; i < numentries",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> other )!= sk <S2SV_ModEnd> ) { sock_poll_wait <S2SV_ModStart> wait ) ; <S2SV_ModEnd> unix_peer ( other <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
1303,<S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] ; value = <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ] << 24 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 4 <S2SV_ModStart> ] ; quantum. unsigned_value = ( value & 0xffffffff ) ; return ( quantum. signed_value ) <S2SV_ModEnd> ; } <S2SV_null>,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart>, h ) ; sendClean ( outputbuffer ) ;",0
1305,<S2SV_ModStart> void exit_io_context ( <S2SV_ModEnd> void ) { <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> current ) ; <S2SV_ModEnd> ioc = current <S2SV_ModStart> -> io_context ; mutex_unlock <S2SV_ModEnd> ( current ) <S2SV_ModStart> current ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } else { mutex_unlock ( ioc ) ; } <S2SV_ModEnd> put_io_context ( ioc,0
1306,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ) KRB5_BAD_MSIZE ; <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( header -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
1307,"<S2SV_ModStart> data ) { unsigned<extra_id_1>i ; int <S2SV_ModStart> int ret ; if ( xen_pcibk_read_config_word ( dev, offset + PCI_COMMAND, value, data ) < 0 ) return - EINVAL <S2SV_ModStart> ; ret = xen_pcibk_read_config_word ( dev, offset + PCI_COMMAND, value, data ) ; if ( ret < 0 ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * frame ; frame = va_arg ( args, vp9_ref_frame_t * ) ; if ( frame == NULL ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ] ) ; fpl -> count = 0 ;,0
1310,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
1311,<S2SV_ModStart> -> dwc ; spin_lock ( & req -> lock ) ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,"<S2SV_ModStart> } # endif # define YYSTACK_RELOCATE ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYDPRINTF ( ( stderr, ""Starting <S2SV_blank> parse\\n"" ) ) ; <S2SV_ModStart> } # endif # define YYPOPSTACK ( N ) ( yyvsp -= ( N ) ) ( yyss -= ( N ) ) int yylen = 0 ; # define YYSETSTATE ( N ) ( yyss -= ( N ) ) if ( yyss + 1 <= yyss ) { YYSIZE_T yysize = ( N ) ( yyssp - ( N ) ) ; yyerrstatus = 0 ; # define YYDPRINTF ( ( stderr, ""Starting <S2SV_blank> parse\\n"" ) ) ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyss -= ( N ) ) int yylen = 0 ; # define YYSETSTATE ( N ) ( yyss -= ( N ) ) if ( yyss + 1 <= yyss ) { YYSIZE_T yyss = ( N ) ( yyss + 1 ) ) ; yytype_int16 * yyss1 = yyss ; yytype_int",0
1313,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices, <S2SV_ModEnd> [ DISCE_RESUME ] <S2SV_ModStart> DISCE_DESTRUCT ] = sas_destruct_devices <S2SV_ModEnd>, } ;",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart>, 1, <S2SV_ModEnd> MYF ( MY_WME <S2SV_ModStart>, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, 1,",0
1315,"<S2SV_ModStart>, s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; <S2SV_ModStart> curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; if ( uECC_vli_isZero ( p, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp",0
1316,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1317,"<S2SV_ModStart> ( sk ) ; struct ip_options_data * inet_opt ; <S2SV_ModStart> ( addr_len ) { inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) * inet_opt = * inet_opt ; <S2SV_ModStart> -> msg_name ; memcpy ( sin, & inet_opt -> inet_addr, sizeof ( inet_opt -> inet_addr ) ) ; sin -> sin_family = AF_INET ; sin -> sin_port = inet_opt -> inet_num ; sin -> sin_family = AF_INET ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; sin -> sin_family = AF_INET ; sin -> sin_zero. s_addr = ip_hdr ( skb ) -> saddr ; sin -> sin_zero. s_zero. s_zero. s_zero. s_zero. s_zero. s_zero. s",0
1318,"<S2SV_ModStart> ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_EXTENTS <S2SV_ModEnd> ; mutex_lock ( <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModEnd> if ( mode <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) flags |= EXT4_GET_BLOCKS_NOCACHE ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4",0
1319,<S2SV_ModStart> buf ; } else { free ( buf ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; bpf_map_inc <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModStart> cp ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( * cp - '0' ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ( size_left && <S2SV_ModEnd> size_left < 4 <S2SV_ModStart> ) ) { <S2SV_ModEnd> LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"" <S2SV_ModStart> ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; }",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""pixc <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ; pixm = pixGetColormap ( pixc ) ; pixg = pixGetColormap ( pixg ) ; pixd = pixcmapCreate ( 8 ) ; if (! pixc ) return ( PIX * ) ERROR_PTR ( ""pixc <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if (! pixm ) return ( PIX * ) ERROR_PTR ( ""pixm <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; pixg = pixGetColormap ( pixg ) ; pixg = pixGetColormap ( pixg ) ; cmapd = pixcmapCreate ( 8 ) ; if (! cmap ) return ( PIX * )",0
1325,"<S2SV_ModStart> ; int ubits, vbits ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; ubits = BN_num_bits ( u ) ; vbits = BN_num_bits ( v ) ; if ( ubits > BN_num_bits ( c ) ) goto err ; if ( vbits > BN_num_bits ( r ) ) goto err ; if ( BN_GF2m_mod ( r, a, p ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r )",0
1326,<S2SV_ModStart> vf = vp8_mse16x16 ; if ( v_fn_ptr. vf!= vp8_mse16x16 ) { v_fn_ptr. vf = vp8_mse16x16 ; } else { v_fn_ptr. vf = vp8_mse16x16 ; },0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart>, nbits ; if ( msg -> bit + bits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> large"" ) ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + bits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> large"" ) ; return 0 ; } <S2SV_ModStart> 8 ) { Huff_getBit <S2SV_ModEnd> ( msg -> <S2SV_ModStart> msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } <S2SV_ModStart> 8 ) { Huff_offsetReceive <S2SV_ModEnd> ( msgHuff. <S2SV_ModStart> get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> large"" ) ; return 0 ; } <S2SV_ModStart> 8 ) { Huff_offsetReceive <S2SV_ModEnd> ( msgHuff. <S2SV_ModStart> msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } <S2SV_ModEnd> msg -> readcount",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; unsigned int count ; <S2SV_ModStart> -> count ; count = kcontrol -> count ; <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, dev ) ; if ( status < 0 ) goto out_free_netdev ; <S2SV_ModStart> dev ) ; status = register_netdev ( net, dev ) ; if ( status < 0 ) goto out_free_netdev ;",0
1331,"<S2SV_ModStart> char * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( bson_size ( bsons [ 0 ] ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
1332,<S2SV_ModStart> ( textview ) ; gtk_text_view_set_text_view ( textview ) ;,0
1333,<S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval ) goto err_out ; <S2SV_ModEnd> retval = posix_acl_update_mode <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ) ; err_out : posix_acl_release_mode ( inode, & mode ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ) ; err_out : posix_acl_release ( inode, & mode ) ; <S2SV_ModEnd> break ; case",0
1335,"<S2SV_ModStart> ) ) ; if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; } <S2SV_ModStart> ) ) ; if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; } <S2SV_ModStart> ) ) ; if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; } <S2SV_ModStart> ) ) ; if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; } <S2SV_ModStart> ) ) ; if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; } if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; } if ( class_name [ 0 ]!= '\\0' ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> name\\n"" ) ; return false ; }",0
1336,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) break ; last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } }",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ;",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1343,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( left_col, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 16 ) ;",0
1344,"<S2SV_ModStart> ; } else if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> jas_iccprof_t * jas_iccprof_createfrombuf,0
1346,<S2SV_ModStart> i_completed_io_list ) ; INIT_LIST_HEAD ( & ei -> i_completed_io_list ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ;,0
1347,<S2SV_ModStart> ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; handle = ion_idr_find_locked ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ;",0
1349,"<S2SV_ModStart> * cpi, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit ( wb, cm -> bit_depth ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } else { assert ( cm -> profile > PROFILE_1 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> profile > PROFILE_1 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { assert ( cm -> profile >= PROFILE",0
1350,"<S2SV_ModStart> ; # define LONGOPT_UNITS_SI 255 <S2SV_ModStart>, long_tmp, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; # <S2SV_ModStart>, long_tmp, long_tmp <S2SV_ModEnd> ) ; #",0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart>'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; },0
1352,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] =",0
1354,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh",0
1355,"<S2SV_ModStart> 0x01 ) { if ( <S2SV_ModEnd> ibuf [ ind <S2SV_ModStart> ind ] == 0x01 ) { if ( <S2SV_ModEnd> ibuf [ ind <S2SV_ModStart> ind + 1 ] == 0xFE ) { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> allocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1 ) ; } else { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; } } else { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; } else { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; }",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE ctx ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; ctx = xmlSchemaNewMemParserCtxt ( argc, argv ) ; if ( NULL == ctx ) { rb_raise ( rb_eRuntimeError, ""Invalid <S2SV_blank> argument <S2SV_blank> for <S2SV_blank> read_memory()"" ) ; return Qnil ; } <S2SV_ModEnd> schema = xmlSchemaParse <S2SV_ModStart> errors ) ; if ( NULL == schema ) { rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } <S2SV_ModEnd> rb_schema = Data_Wrap_Struct <S2SV_ModStart> rb_schema ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_iv_set ( rb_schema, ""@errors"", errors ) ; return rb_schema ;",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma -> vm_start, fbdev -> fb_len, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> ( LOG_NOTICE, ""%s"", errstr ) ; if ( strlen ( errstr ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> line <S2SV_blank> length <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; <S2SV_ModStart> 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; <S2SV_ModStart> 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 6 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 7,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> ; err = sock_owned_by_user ( sk ) ; if ( err ) goto out <S2SV_ModEnd> ; if (,0
1364,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len > 0, wchar_t * pwcs ) { wchar_t * p ; wchar_t t ; <S2SV_ModStart> - EINVAL ; p = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | (",0
1366,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> v, i <S2SV_ModStart> ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) { if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } else if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1368,<S2SV_ModStart> AF_INET6 ; } <S2SV_ModEnd> dt -> vlan_id,0
1369,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) & KSZ8851_RXFHBCR_RXBC_MASK ; if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) & KSZ8851_RXFH",0
1370,"<S2SV_ModStart> * n, asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart>, int is_async, string type_comment_string <S2SV_ModEnd> ) { identifier <S2SV_ModStart>, returns, type_comment_string <S2SV_ModEnd>, LINENO ( <S2SV_ModStart>, returns, type_comment_string <S2SV_ModEnd>, LINENO (",0
1371,"<S2SV_ModStart> int i ; flush_tlb_mm ( mm ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
1372,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED <S2SV_ModEnd>, NULL,",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if (! siz -> width ||! siz -> height ||! siz -> tilewidth ||! siz -> tileheight ||! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if (",0
1374,"<S2SV_ModStart> ; } } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; }",0
1375,"<S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely ( <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> int error, atomic ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModStart> ; size_t chars = iov_len ( iov, nr_segs ) ; if ( unlikely ( chars > total_len ) ) chars = total_len ; error = ops -> confirm ( pipe, buf ) ; if ( error ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> atomic =! <S2SV_ModStart>! iov_fault_in_pages_write <S2SV_ModStart>, chars ) ; <S2SV_ModEnd> redo : if <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if (! atomic ) atomic =! iov_fault_in_pages_write ( iov, chars ) ; else atomic =! iov_fault_in_pages_write ( iov, chars ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; if ( buf -> flags & PIPE_BUF_FLAG",0
1377,<S2SV_ModStart> MaxGIFBits ) # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << bits ; else datum = ( size_t ) ( code ) ; bits += number_bits ;,0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> argv [ ] ) { p_fm_config_conx_hdlt hdl ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; res = - 1 ; goto die_clean ; } if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; res = - 1 ; goto die_clean ; } if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank>",0
1380,"<S2SV_ModStart> size_t max_mem ; jas_image_t * decoded_image ; jas_image_t * decoded_image ; jas_image_t * decoded_image ; <S2SV_ModStart> 0 ] ; decoded_image = NULL ; <S2SV_ModStart> break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : usage ( ) ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_IMAGE : decoded_image = jas_image_fopen ( decoded_image, ""rb"" ) ) ; if (! decoded_image ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", decoded_image ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( decoded_image ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if ( ( decoded_image = jas",0
1381,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif",0
1383,<S2SV_ModStart> len < needed ||! nl,0
1384,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1385,"<S2SV_ModStart> vcpu_data vcpu_info ; struct hlist_head * hlist ; <S2SV_ModStart> irq_srcu ) ; hlist_for_each_entry ( hlist, & hlist -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( hlist, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank>",0
1386,<S2SV_ModStart> bfqq ) return bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
1387,"<S2SV_ModStart> } else { if ( rold -> umin_value == U64_MIN && rold -> umax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( rold -> type == PTR_TO_MAP_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) == 0 && t",0
1388,<S2SV_ModStart> ; if ( <S2SV_ModEnd> handle ) return,0
1389,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
1390,<S2SV_ModStart> ; if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; if (! ( flags & RENAME_EXCHANGE ) &&! ( flags & RENAME_NOREPLACE ) ) { err = - EPERM ; goto out ; } if (! ( flags & RENAME,0
1391,"<S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; if",0
1392,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ;",0
1393,<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0,0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_readers ++ ;,0
1395,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMMON * const cm, MACROBLOCK * const x, int mi_row, int mi_col, int * rate, int64_t * dist, BLOCK_SIZE bsize ) { <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart> x -> e_mbd ; <S2SV_ModEnd> xd -> mi <S2SV_ModStart> mi_row, mi_col, rate, dist, bsize ) ; if ( frame_is_intra_only ( cm ) ) { vpx_pick_inter_mode ( cpi, x, cm, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1396,"<S2SV_ModStart> ( csum ) { <S2SV_ModStart> |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; } else { <S2SV_ModStart> |= NETIF_F_HW_CSUM | NETIF_F_FRAGLIST ; } <S2SV_ModEnd> if ( virtio_has_feature <S2SV_ModStart> ( csum ) { <S2SV_ModStart> |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; } <S2SV_ModEnd> if ( virtio_has_feature <S2SV_ModStart> ( vdev, VIRTIO_NET_F_GSO <S2SV_ModEnd> ) ) { <S2SV_ModStart> |= NETIF_F_GSO ; }",0
1397,<S2SV_ModStart> ; * err = <S2SV_ModEnd> getHrtf ( &,0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> ; if ( di_size == 0 ) return __this_address ; <S2SV_ModStart> di_nblocks ) ; if ( di_size == 0 ) return __this_address ; <S2SV_ModStart> di_flags & XFS_DIFLAG_NOENTS ) return __this_address ; if ( di_size == 0 ) return __this_address ; <S2SV_ModStart> di_flags & XFS_DIFLAG_NOENTS <S2SV_ModEnd> ) return __this_address <S2SV_ModStart> di_flags & XFS_DIFLAG_NOENTS ) return __this_address ; if ( di_size == 0 ) return __this_address ; if ( di_size == 0 ) return __this_address ; <S2SV_ModStart> di_flags & XFS_DIFLAG_NOENTS <S2SV_ModEnd> ) return __this_address,0
1401,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO",0
1402,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ) ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> res -> outputbuffer, ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ( constr1, sizeof <S2SV_ModEnd> ( constr1 ) <S2SV_ModStart> ( constr2, sizeof <S2SV_ModEnd> ( constr2 )",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ; <S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ;",0
1410,"<S2SV_ModStart> ; if ( ii < sizeof ( protocol_binary_request_header ) ) { fprintf ( stderr, ""\\n"" ) ; } <S2SV_ModStart> ; if ( ii < sizeof ( protocol_binary_request_header ) ) { fprintf ( stderr, ""\\n"" ) ; } <S2SV_ModStart> ; if ( ii < sizeof ( protocol_binary_request_header ) ) { fprintf ( stderr, ""\\n"" ) ; } <S2SV_ModStart> ; if ( ii < sizeof ( protocol_binary_request_header ) ) { fprintf ( stderr, ""\\n"" ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( req -> bytes ) ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n"" ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; } fprintf ( stderr, ""\\n"" ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd )",0
1411,"<S2SV_ModStart> ) ) ; if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; break ; } if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; retval = - EINVAL ;",0
1412,<S2SV_ModStart> ; if ( <S2SV_ModEnd> card -> user_ctl_count <S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> user_ctl_count >= MAX_USER_CONTROLS ) { card -> user_ctl_count = MAX_USER_CONTROLS ; return - ENOMEM ; },0
1413,"<S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" <S2SV_ModEnd> ) ; return",0
1414,<S2SV_ModStart> case X86EMUL_MODE_PROT16 : case X86EMUL_MODE_PROT32 : <S2SV_ModStart> case X86EMUL_MODE_PROT64 : if ( mode == X86EMUL_MODE_REAL ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_REAL ) { if ( ctxt -> mode == X86EMUL_MODE_REAL ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1417,"<S2SV_ModStart> 16 ) ; if ( xd -> mode_info_context -> mbmi. mode == B_PRED ) { xd -> mode_info_context -> mbmi. mode = B_PRED ; } else { distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; } <S2SV_ModEnd> xd -> mode_info_context",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600",0
1419,<S2SV_ModStart> * start ; <S2SV_ModEnd> start = ( <S2SV_ModStart> ) psf -> header ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headerindex <S2SV_ModStart> psf -> headerindex = <S2SV_ModEnd> strlen ( ( <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; },0
1420,<S2SV_ModStart> ) && unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> ) && unconditional ( e <S2SV_ModEnd> ) ) ||,0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv ) ; } else { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx ->,0
1422,"<S2SV_ModStart>, CPU_BASED_RDPMC_EXITING ) ; case EXIT_REASON_RDTSC : return nested_cpu_has ( vmcs12, CPU_BASED_RDTSC_EXITING ) ; case",0
1423,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_motion_search = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> intra_y_mode_mask [ TX_16X16,0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if ( nf_ct_is_confirmed ( ct ) ) return NF_ACCEPT ; <S2SV_ModStart> ( _dh ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET && test_bit ( IPS_ASSURED_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; }",0
1425,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( & tx32, 0, sizeof ( tx32 ) ) ;",0
1426,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ),0
1427,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; else goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart> ; const char <S2SV_ModEnd> * s = <S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; * raw ++ = * raw ++ ; * ch ++ = * raw ++ ; * raw ++ = * raw ++ ; * ch ++ = * raw ++ ; * ch ++ = * raw ++ ; * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( kind ) ; if (! kind ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; Py_DECREF ( type ) ; Py_DECREF ( type ) ; Py_DECREF ( type ) ; Py_",0
1430,"<S2SV_ModStart> * input_ptr ; SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; <S2SV_ModStart> ; } else if ( strcmp ( option_name, option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""spatial-layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""keyframes"", option_name ) == 0 ) { res = parse_keyframes ( svc_ctx, option",0
1431,<S2SV_ModStart> -> context ) ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } else { if ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } },0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; linesize = av_adler32_update ( linesize, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; }",0
1433,"<S2SV_ModStart> ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,<S2SV_ModStart> imp_dbh ) ) { imp_dbh -> stats. mysql_errors ++ ; <S2SV_ModStart> imp_dbh ) ; imp_dbh -> stats. mysql_errors ++ ;,0
1437,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) == TEMP_FAILURE_RETRY ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size ) == TEMP_FAILURE_RETRY ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )!= TEMP_FAILURE_RETRY )",0
1438,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( len_remain < 12 ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, len_remain ) ; return ; } <S2SV_ModStart> phdr ) ; if ( ampdu_len < 0 ) { pr_err ( ""%s: <S2SV_blank> ampdu <S2SV_blank> length <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, ampdu_len ) ; return ; } <S2SV_ModStart> ampdu_len ) ; if ( len_remain < 12 ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, len_remain ) ; return ; } <S2SV_ModStart> ampdu_len ) ; if ( ampdu_len < 0 ) { pr_err ( ""%s: <S2SV_blank> ampdu <S2SV_blank> length <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", __func__, ampdu_len ) ; return ; } <S2SV_ModStart> ampdu_len ) ; if ( len_remain < 12 ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceed <S2SV_blank>",0
1439,<S2SV_ModStart> ; sh = s_malloc2 <S2SV_ModEnd> ( hdrlen +,0
1440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth <S2SV_ModEnd> ; rw = <S2SV_ModStart> ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; cgplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 4 ] + y * rw ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> Plane",0
1441,"<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; } else { <S2SV_ModStart> hf_keybuffer ) ; }",0
1442,"<S2SV_ModStart> - EINVAL ) ; * ( ++ top ) = invert ; continue ; case ')' : if ( top - op_stack < nr_parens ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1443,"<S2SV_ModStart> cpi ) { VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> / 2 ) > INT_MAX? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( ( cpi -> oxcf. starting_buffer_level / 2 ) + cpi -> oxcf. starting_buffer_level ) <S2SV_ModEnd> ; } else <S2SV_ModStart> 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / cpi -> output_framerate ) ; } else { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / cpi -> output_framerate ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } return vp9_rc_clamp_iframe_target_size",0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { <S2SV_ModEnd> TX_MODE tx_mode = <S2SV_ModStart> ) tx_mode += vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,"<S2SV_ModStart> struct hello6 * hellop ; if ( op -> ospf6_len < OSPF6HDR_LEN ) return - 1 <S2SV_ModStart> OSPF6HDR_LEN ) ; if ( op -> ospf6_len < OSPF6HDR_LEN ) return - 1 ; <S2SV_ModStart> OSPF6HDR_LEN ) ; if ( op -> ospf6_len < OSPF6HDR_LEN ) return - 1 ; <S2SV_ModStart> OSPF_TYPE_HELLO : { if ( op -> ospf6_len < OSPF6HDR_LEN ) return - 1 ; <S2SV_ModStart> OSPF6HDR_LEN ) ; if ( op -> ospf6_len < OSPF6HDR_LEN ) return - 1 ; ND_TCHECK_32BITS ( & op -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & op -> hello_dr ) ) ) ; ND_TCHECK ( op -> hello_bdr ) ; if ( EXTRACT_32BITS ( & op -> hello_bdr",0
1447,<S2SV_ModStart> ( * ( unsigned <S2SV_ModEnd> char * ) <S2SV_ModStart> ) data > 1 ) return - ENOTSUPP ; if ( datalen < 1 ) return - EINVAL,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & uwbd_mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & uwbd_mutex ) ; <S2SV_ModStart>. task == NULL ) { mutex_unlock ( & uwbd_mutex ) ; <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; } <S2SV_ModStart>. pid ; mutex_unlock ( & uwbd_mutex ) ;",0
1449,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1055 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.y""",0
1450,<S2SV_ModStart> ; * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) << bitIdx ) ) ; } else { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; } else { * ptr = ( char ) ( ( existing & ~ mask ) << bitIdx ) ; } if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) ) { * ptr = ( char ) ( ( col & mask ) << bitIdx ) ; } else { * ptr = ( char,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> 32 ] ; <S2SV_ModEnd> struct macroblock_plane * <S2SV_ModStart> plane ] ; <S2SV_ModEnd> const PLANE_TYPE type <S2SV_ModStart> -> plane_type ; <S2SV_ModEnd> const int16_t * <S2SV_ModStart> int16_t * qcoeff = BLOCK_OFFSET ( p -> <S2SV_ModEnd> qcoeff, block <S2SV_ModStart> block ) ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; const int8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; int aoff, loff ; txfrm_block_to_raster_xy ( plane_bsize, tx_size, block, & aoff, & loff ) ; pt = get_entropy_context ( tx_size, pd -> above_context + aoff, pd -> above_context + loff, band, seg_eob, tx_size ) ; pt = get_entropy_context (",0
1452,<S2SV_ModStart>. pSrc ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &=,0
1454,"<S2SV_ModStart> ; serv = svc_create ( & nfs4_callback_program <S2SV_ModEnd>, NFS4_CALLBACK_BUFSIZE,",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1459,"<S2SV_ModStart> s ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1460,"<S2SV_ModStart> = NULL ; xmlAttr * x <S2SV_ModEnd> = crm_first_attr ( <S2SV_ModStart> -> name ; if ( strcmp ( x -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_read ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; return ; } free ( path ) ; return ; } } while ( cIter!= NULL ) { xmlNode * child = cIter ; cIter = __xml_next ( cIter ) ; __xml_acl_post_process ( child ) ; cIter = __xml_next ( cIter ) ; __xml",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> stream s ) { RD_UINT8 <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; in_uint8s ( s, length ) ;",0
1463,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1464,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> VPX_IMG_FMT_I420 ; } _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; <S2SV_ModStart> = 12 ; if ( strcmp ( _y4m -> chroma_type, ""4"" ) ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type <S2SV_blank> for <S2SV_blank> YUV4MPEG2 <S2SV_blank> file.\\n"" ) ; return - 1 ; } if ( strcmp ( _y4m -> chroma_type, ""4"" ) ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type <S2SV_blank> for <S2SV_blank> YUV4MPEG2 <S2SV_blank> file.\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if ( _y4m -> vpx_fmt == VPX_IMG_FMT",0
1465,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } <S2SV_ModEnd> if ( otmp",0
1466,"<S2SV_ModStart> { long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE )",0
1467,"<S2SV_ModStart> * rule ) { RB_INIT ( & env -> root ) ; <S2SV_ModStart> env -> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; if ( len > sizeof ( keybuf ) - 1 ) continue ; node = createnode ( keybuf + 1, eq + 1 ) ; if ( node!= NULL ) { freenode ( node ) ; } } } else { env -> count ++ ; } } <S2SV_ModEnd> return env ;",0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> base_qindex, cm -> mi_rows * cm -> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> base_qindex, cm -> mi_rows * cm -> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> base_qindex, cm -> mi_cols * cm -> mi_rows * cm -> mi_cols ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart>, mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 1 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 1 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 1 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC | S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16",0
1471,<S2SV_ModStart> += 8 ; if ( <S2SV_ModStart> += 8 ; if ( <S2SV_ModStart> += 4 ; if ( <S2SV_ModStart> += 2 ; if ( <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 3 ; } break ; case 5 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 5 ; } break ; case 6 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 6 ; } break ; case 7 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 7 ; } break ; case 8 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 6 ; } break ; case 7 : context -> curY += 6 ; if ( context -> curY >= p -> height ),0
1472,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1473,<S2SV_ModStart> ) ; } <S2SV_ModEnd> smb_llist_enter ( flist <S2SV_ModStart> file ) ; <S2SV_ModEnd> mutex_exit ( &,0
1474,<S2SV_ModStart> ; if ( <S2SV_ModEnd> stb. st_nlink <S2SV_ModStart> stb. st_nlink <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart> ; if ( stb. st_nlink <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart> ; if ( stb. st_nlink <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart> ; if ( stb. st_nlink <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart> ; if ( stb. st_nlink <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart> ; if ( stb. st_nlink <S2SV_ModEnd> ) SCREWUP (,0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean ; char * nameobject ; int identification = 0 ; <S2SV_ModStart> = outputbuffer ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( ( identification = 1 ; identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf (",0
1476,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 ip_idents_hashrnd __read_mostly <S2SV_ModStart> ip_idents_hashrnd __read_mostly ; net_get_random_once ( & ip_idents_hashrnd, sizeof ( ip_idents_hashrnd ) ) ; <S2SV_ModStart> id ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1477,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; }",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1479,<S2SV_ModStart> ; if ( setpwnam <S2SV_ModEnd> ( ctl ->,0
1480,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header ; <S2SV_ModStart> -> it_version ) { if ( max_length < get_unaligned_le32 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _reset_on_ext = 1 ; } if ( iterator -> _arg - ( unsigned long ) iterator -> _rtheader > ( unsigned long ) iterator -> _max_length ) return - EINVAL ; iterator -> _arg += sizeof ( uint32_t ) ; if ( ( unsigned long ) iterator -> _arg - ( unsigned long ) iterator -> _reset_on_ext ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg += sizeof ( uint32_t ) ; iterator ->,0
1481,"<S2SV_ModStart> int err ; struct nfp_abm_u32_key * key ; <S2SV_ModStart> extack ) ) goto err_delete <S2SV_ModEnd> ; val = <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; key = be32_to_cpu ( knode -> sel -> keys [ 0 ]. key ) >> tos_off & 0xff ; mask = knode -> sel -> keys [ 0 ]. mask & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; if ( val == 0 ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } <S2SV_ModStart>! match ) { kfree ( match ) ; return - ENOMEM ; }",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr,",0
1483,<S2SV_ModStart>. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1484,"<S2SV_ModStart>, error ) ; if ( g_str_has_prefix ( new_data, "".service"" ) ) { g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; } else { g_strcpy ( new_data, "".service"" ) ; } g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, new_data_len ) ; g_strcpy ( new_data, new_data",0
1485,"<S2SV_ModStart> data_end ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ; vpx_reader r ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->",0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) ) ; const VP9D_CONFIG * const oxcf = & vpx_d_config ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return",0
1487,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new <S2SV_ModEnd> ( GF_ISOM_BOX_TYPE_DREF ) <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> count ; } kfree ( fpl ) ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( opt == NULL || opt -> cipso == 0 ) return ; opt = req_inet -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
1490,"<S2SV_ModStart> * tokens, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if",0
1492,<S2SV_ModStart> wqh ) ; <S2SV_ModEnd> if ( isalarm,0
1493,"<S2SV_ModStart> * child, <S2SV_ModEnd> * p ; <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; <S2SV_ModStart> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; commit_tree ( child, q ) ; } unlock_mount_hash ( ) ; cleanup_group_ids ( source_mnt, NULL ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1494,"<S2SV_ModStart>, & len, 0",1
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int,0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth *,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> NULL, fout ) ; send ( huff -> loc [ ch ] <S2SV_ModEnd>, NULL,",0
1499,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> encode_superblock ( VP9_COMMON * cm, ThreadData * td, <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> e_mbd ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mi_width <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int segment_id = mi -> segment_id ; const int mis_width = num_8x8_blocks_wide_lookup [ mi_width ] ; const int mis_height = num_8x8_blocks_high_lookup [ mi_height ] ; const int segment_id_lookup = num_8x8_blocks_high_lookup [ mis_width ] ; const int segment_id_lookup = num_8x8_blocks_high_",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> struct crypto_skcipher * <S2SV_ModStart> tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } rc = crypto_skcipher_encrypt ( req ) ; if ( rc ) cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> encrypt <S2SV_blank> crypt <S2SV_blank> key <S2SV_blank> rc: <S2SV_blank> %d\\n"", rc ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> encrypt <S2SV_blank> crypt <S2SV_blank> key <S2SV_blank> rc: <S2SV_blank> %d\\n"", rc",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; <S2SV_ModStart> ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"",",0
1503,<S2SV_ModStart> += delta ; else { if ( i > pos && i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; }",0
1505,<S2SV_ModStart> { } else if ( isdigit ( c ) || isdigit ( c ) || isdigit ( c ) || isdigit ( c ) || isdigit ( c ) || isdigit ( c ) || isdigit ( c ) ||,0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) goto out ;,0
1508,<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( <S2SV_ModEnd> ( float ) <S2SV_ModStart> ( int ) floor ( pow ( <S2SV_ModEnd> ( float ) <S2SV_ModStart> ( int ) floor ( pow ( <S2SV_ModEnd> ( float ) <S2SV_ModStart> ( int ) floor ( pow ( <S2SV_ModEnd> ( float ),0
1509,"<S2SV_ModStart> += 4 ) { if ( dds_info -> width < x || dds_info -> height < y ) return MagickFalse ; <S2SV_ModStart> dds_info, x <S2SV_ModEnd>, y, <S2SV_ModStart> dds_info, y <S2SV_ModEnd>, exception ) <S2SV_ModStart> dds_info, x <S2SV_ModEnd>, exception )",0
1510,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
1512,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> i ; } if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = 1 ; if ( strcmp ( argv [ i ], ""help_file="", 13 ) == 0 ) cfg -> help_file = argv [ i ] + 13 ; if ( strncmp ( argv [ i ], ""help_line="", 13 ) == 0 ) cfg -> help_line = argv [ i ] + 13 ; if ( strncmp ( argv [ i ], ""help_line="", 13 ) == 0 ) cfg -> help = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 13 ) == 0 ) cfg -> help_line = argv [ i ] + 13 ; if ( strncmp ( argv [ i ], ""help_line="", 13 ) == 0 ) cfg -> help_line = argv [ i ] + 13 ; if ( strcmp ( argv [ i ], ""help_line="", 13 ) == 0 ) cfg -> help_line = argv [ i ] + 13 ; if ( strcmp ( argv [ i ], ""help_line="", 13 )",0
1513,"<S2SV_ModStart> ; if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; else sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ;",0
1514,"<S2SV_ModStart> ) ) { sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x21 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x12 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x21",0
1515,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. bit_depth > 1 ) || ( cpi -> oxcf. bit_depth > 2 ) || ( cpi -> oxcf. bit_depth == 2 ) ) { vp8_writer * w = & cpi -> td. bit_writers [ cpi -> oxcf. bit_depth ] ; } else { vpx_writer * w = & cpi -> td. bit_writers [ cpi -> oxcf. bit_depth ] ; } # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > 2 ) { vp8_writer * w = & cpi -> td. bit_writers [ cpi -> td. bit_writers [ cpi -> oxcf. bit_depth ] ; } else { vpx_writer * w = & cpi -> td. bit_writers [ cpi -> oxcf. bit_depth ] ; } # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit,0
1517,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } <S2SV_ModEnd> if ( type",0
1518,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { <S2SV_ModEnd> logger ( Clipboard <S2SV_ModStart> CLIPRDR_ERROR ) { cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_RESPONSE, NULL, 0 ) ; return ; } if ( status == CLIPRDR_ERROR ) { logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> error <S2SV_blank> (type=%d)"", type ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_RESPONSE, NULL, 0 ) ; return ; } if ( status == CLIPRDR_ERROR ) { logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> error <S2SV_blank> (type=%d)"", type ) ; cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( l -> lineBuf [ spos ] == '\\0' ) { <S2SV_ModStart> } else { if ( l -> lineBuf [ spos ] == '\\0' ) { <S2SV_ModStart> } else { if ( l -> lineBuf [ spos ] == '\\0' ) { <S2SV_ModStart> } else { if ( l -> lineBuf [ spos ] == '\\0' ) { <S2SV_ModStart> } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } } else { <S2SV_ModStart> } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } } else { if ( l -> lineBuf [ spos ] == '\\0' ) { break ; } else { if ( l -> lineBuf [ spos ] == '\\0',0
1521,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { if ( ( <S2SV_ModStart> portBYTE_ALIGNMENT - ( xWantedSize <S2SV_ModEnd> & portBYTE_ALIGNMENT_MASK ) <S2SV_ModStart> portBYTE_ALIGNMENT - ( xWantedSize <S2SV_ModEnd> & portBYTE_ALIGNMENT_MASK ) <S2SV_ModStart> portBYTE_ALIGNMENT - ( xWantedSize <S2SV_ModEnd> & portBYTE_ALIGNMENT_MASK ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCO,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } if ( cc <= 0 ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } if ( cc <= 0 ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } else { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return - 1 ; }",0
1525,"<S2SV_ModStart> STREAM s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; packet. bytes_left += 2 ; packet. bytes_top += 2 ; <S2SV_ModStart> ) { in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet. bytes_top ) ; in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet. bytes_right ) ; in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet. bytes_top ) ; in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet. bytes_top ) ; in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet. bytes_top ) ; in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet. bytes_top ) ; in_uint16_le ( s, packet. bytes_left ) ; in_uint16_le ( s, packet.",0
1526,"<S2SV_ModStart> } else { if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_probs, coef_counts",0
1528,"<S2SV_ModStart> } ; assert ( fd >= 0 ) ; <S2SV_ModStart> name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> switch <S2SV_blank> UTF-8 <S2SV_blank> mode <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ;",0
1529,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_device * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_state * state = d -> priv ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x02 ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 1 ] = 0xe ; state -> data [ 2 ] = 0x",0
1530,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ( flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) &&! <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res =",0
1531,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size,",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if (",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> cJSON_CreateArray ( ) ; if ( count < 0 ) return 0 ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1534,"<S2SV_ModStart> goto retry_rebind ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_DENIED_REBIND_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,"<S2SV_ModStart> float * w = get_window ( f, n ) ; if (! w ) return 0",0
1536,"<S2SV_ModStart> data_end ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads, cm -> mi_cols ) ; const int tile_cols = MIN ( cm -> mi_cols, tile_cols ) ; const int tile_rows = MIN ( cm -> mi_rows, tile_rows ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( num_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc",0
1537,<S2SV_ModStart> ; offset = <S2SV_ModEnd> base + get4 <S2SV_ModStart> ; offset = <S2SV_ModEnd> base + get4 <S2SV_ModStart> ; offset = <S2SV_ModEnd> base + get4 <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ;,0
1538,"<S2SV_ModStart> -> common ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFIsTiled ( in ) ) { TIFFErr ( 0x534e4554, ""MemoryAllocationFailed"" ) ; return ( NULL ) ; } <S2SV_ModStart> ; if (! TIFFIsTiled ( in ) ) { TIFFErr ( 0x534e4554, ""MemoryAllocationFailed"" ) ; return ( NULL ) ; } <S2SV_ModStart> ; if (! TIFFIsTiled ( in ) ) { TIFFErr ( 0x534e4554, ""MemoryAllocationFailed"" ) ; return ( NULL ) ; } if (! TIFFIsTiled ( in ) ) { TIFFErr ( 0x534e4554, ""MemoryAllocationFailed"" ) ; return ( NULL ) ; } if (! TIFFIsTiled ( in ) ) { TIFFErr ( 0x534e4554, ""MemoryAllocationFailed"" ) ; return ( NULL ) ; } if (! TIFFIsTiled ( in ) ) { TIFFErr ( 0x534e4554, ""MemoryAllocationFailed"" ) ; return ( NULL ) ; } if (! TIFFIsTiled ( in",0
1540,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> detail,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST",0
1543,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_prev_poc, 0, sizeof ( pocstruct_t ) ) ; ps_dec ->",0
1544,<S2SV_ModStart> -> vm_mm ; if (! mmget_still_valid ( mm ) ) goto out_unlock ; <S2SV_ModStart> goto out_unlock ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. congest_packet ) ),0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> int a = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } <S2SV_ModEnd> while ( isdigit,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
1548,"<S2SV_ModStart> = 0 ; else { ret = - ENODEV ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1549,"<S2SV_ModStart> { 'S' } ; uint8_t * ssl_request = & ssl_request [ sizeof ssl_request ] ; <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_INFO, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if (! safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque ; struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; char * server = private -> server ; int ret_ga ; <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return -",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi ->",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1553,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], 2 ) ; <S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x08 ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 ) ; } if ( bp [ 26 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"" ) ) ; } if ( bp [ 26 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 ) ) ; } if ( bp [ 26 ] & 0x",0
1554,<S2SV_ModStart> case EXPR_NOT : if (! * set_rtrn ) * set_rtrn = true ;,0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1557,"<S2SV_ModStart> Image * image ; size_t <S2SV_ModEnd> length, padding <S2SV_ModStart> length, padding, value, version, width ; if ( image_info == ( const ImageInfo * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( image, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image,",0
1558,"<S2SV_ModStart> = 0 ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ;",0
1559,<S2SV_ModStart> ) ) { case '\\0' : break ; case '\\n' : break ; case '\\t' : break ; case '\\r' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\0' : break ; case '\\0' : break ; case '\\n' : break ; case '\\t' : break ; case '\\t' : break ; case '\\r' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; default : break ; },0
1560,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> return error ; <S2SV_ModEnd> is_valid = error <S2SV_ModStart> error ; giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ;",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
1564,"<S2SV_ModStart>! stream ) { <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart>. stereo_fmt = STEREO_FORMAT_STEREO <S2SV_ModEnd> ; stream -> <S2SV_ModStart> write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; stream -> config. cfg. g_lag_in_frames = 0 ; }",0
1565,"<S2SV_ModStart> ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_type ) ) ;",0
1566,<S2SV_ModStart> = 0 ; if ( yr_re_ast_root_node_create ( re_ast ) == ERROR_INSUFFICIENT_MEMORY ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; },0
1567,"<S2SV_ModStart> ) ) ; if ( key -> key -> key!= NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } else { ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_",0
1568,<S2SV_ModStart> ; if ( <S2SV_ModEnd> A > skb <S2SV_ModStart> A ] ; if ( nla -> nla_len > A - skb -> len ) return 0 ; <S2SV_ModStart> ] ; if ( <S2SV_ModEnd> nla -> nla_len <S2SV_ModStart> nla -> nla_len > A - skb -> len ) return 0 ;,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>""",0
1571,"<S2SV_ModStart> cac_id, priv -> cac_id_len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",0
1572,<S2SV_ModStart> = 0 ; tok -> type_comments = 0 ;,0
1573,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; } }",0
1574,"<S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r!= SC_OK ) return r ; <S2SV_ModStart> ] = '\\0' ; if ( r!= SC_OK ) return r ;",0
1575,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS ) ; ASSERT ( dpbSize,0
1576,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_out, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ; }",0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> final ; struct ipv6_txoptions * opt ; struct ipv6_txoptions_rcu <S2SV_ModEnd> * np = <S2SV_ModStart> np ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference ( opt_space ) ; if ( opt == NULL ) { opt = rcu_dereference ( opt_space ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; } } if ( opt == NULL ) { opt = rcu_dereference ( opt_space ) ; if ( opt == NULL ) { opt = rcu_dereference ( opt_space ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) )",0
1580,"<S2SV_ModStart> int i, found <S2SV_ModEnd>, upx_success = <S2SV_ModStart> ; size_t valign <S2SV_ModEnd>, hdr_size, <S2SV_ModStart>, hdr_size, j, pe_plus <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS <S2SV_ModStart>, j, pe_plus <S2SV_ModEnd> )!= CL_SUCCESS",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000ReadReg ( DM9000_EPDRH ) << 8 | dm9000ReadReg ( DM9000_EPDRL ) ; }",0
1582,"<S2SV_ModStart> = 0 ; if ( t2p -> tiff_datasize > TIFF_MAX_DIMENSIONS ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * cred ; <S2SV_ModStart> rcu_read_lock ( ) ; cred = __task_cred ( child ) ; __ptrace_link ( child, new_parent, cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { <S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { <S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { fprintf ( stderr, ""%s: <S2SV_blank> Encrypted <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port ) ; return pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk_strerror ( pcmk",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, n, <S2SV_ModStart> bsize ] ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> ] ; int <S2SV_ModEnd> quart_frm = MIN <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, & num00, & v_fn_ptr, 1, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = INT_MAX ; * best_motion_err = tmp_err <S2SV_ModEnd> ; best_mv -> <S2SV_ModStart> best_mv -> row = tmp_mv. row ; * best_mv -> col = tmp_mv. col ; if ( tmp_err < INT_MAX ) * best_motion_err = tmp_err ; else * best_motion_",0
1587,"<S2SV_ModStart> ; if ( h -> addr == MAP_FAILED ) { SET_ERRNO ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1588,"<S2SV_ModStart> ) ; } if ( merged -> reqbody_limit!= ( child -> reqbody_limit!= ( child -> reqbody_limit!= ( NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ) ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", parent, merged ) ; }",0
1589,"<S2SV_ModStart> ctl_buf, ctl_len <S2SV_ModEnd> ) ; if",0
1590,"<S2SV_ModStart>, one_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, one_planes_filled ; if ( number_planes_filled > MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )",0
1592,"<S2SV_ModStart> ) ) { sscanf ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; }",0
1593,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> client ) ; <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; luaL_assert (! iswhite ( thread ) ) ; <S2SV_ModStart> next ) { luaL_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> work ++ ; markvalue ( g, uv -> v ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
