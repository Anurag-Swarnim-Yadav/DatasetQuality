,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> requests <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } nonce1 = json_object_get ( val, ""nonce1"" ) ; nonce1 = json_object_get ( val, ""nonce2"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; if (! nonce1 ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> nonce <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } if ( nonce1 ) nonce1 = json_object_get ( val, ""nonce2"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; if (! sessionid ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> sessionid <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 2 ) ) ) ; return ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)""",0
2,"<S2SV_ModStart> op_mutex ) ; ret = - EBUSY ; goto out ; } mutex_lock ( & wmi -> op_mutex ) ; if ( unlikely ( time_left == 0 ) ) { ath_dbg ( common, WMI, ""Timeout <S2SV_blank> waiting <S2SV_blank> for <S2SV_blank> WMI <S2SV_blank> command: <S2SV_blank> %s\\n"", wmi_cmd_to_name ( cmd_id ) ) ; ret = - ETIMEDOUT ; goto out ; } if ( time_left == 0 ) { ath_dbg ( common, WMI, ""Timeout <S2SV_blank> waiting <S2SV_blank> for <S2SV_blank> WMI <S2SV_blank> command: <S2SV_blank> %s\\n"", wmi_cmd_to_name ( cmd_id ) ) ; ret = - ETIMEDOUT ; goto out ; } mutex_unlock ( & wmi -> op_mutex ) ; ret = ath9k_wmi_cmd_issue ( wmi, skb, cmd_id, cmd_len ) ; if ( ret ) { ath_dbg ( common, WMI, ""Timeout <S2SV_blank> waiting <S2SV_blank> for <S2SV_blank> WMI <S2SV_blank> command: <S2SV_blank> %s\\n"", wmi_cmd_to_name ( cmd_id ) )",0
3,"<S2SV_ModStart> SIOCYAMSMCS : if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; break ; case SIOCGIFBASE : if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; break ; case SIOCGIFBASE : if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if (",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_HLEN - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_HLEN - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_len > MAX_FRAGMENT_HLEN - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_HLEN - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
5,"<S2SV_ModStart> ; int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else { time = 0 ; } <S2SV_ModEnd> if ( version <S2SV_ModStart> 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM ) ; mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_unlock ( & vhost_scsi_mutex ) ;",0
7,"<S2SV_ModStart> writers ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic -> flags ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic -> flags ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic ) ; apic_set_tpr ( vcpu -> arch. apic, data >> 8 ) ; apic_set_tpr ( vcpu -> arch. apic, data >> 16 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
9,<S2SV_ModStart> src ) ; clear_task_ebb ( dst ) ;,0
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> return c ; <S2SV_ModStart> -> child ; <S2SV_ModEnd> while ( c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options",0
12,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > MAX_UNFRAGMENT_HLEN ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> u64 nr, <S2SV_ModStart> ( PERF_TYPE_SOFTWARE, event_id <S2SV_ModEnd>, nr,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> leaf = ( <S2SV_ModStart> leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ].",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t step2 [ 8 ] ; tran_high_t step3 [ 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 15 ] ; input [ 5 ] = in [ 5 ] + in [ 11 ] ; input [ 6 ] = in [ 6 ] + in [ 12 ] ; input [ 7 ] = in [ 0 ] + in [ 15 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 2 ] ; s2",0
16,"<S2SV_ModStart> env ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret ) goto err_unlock ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( struct bpf_verifier_state_list * ), GFP_USER ) ; if (! env -> explored_states ) goto err_free_env ; } else if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret ) goto err_unlock ; } if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret ) goto err_unlock ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( struct bpf_verifier_state_list * ), GFP_USER ) ; if ( ret ) goto err_unlock ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( struct bpf_verifier_state_list * )",0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) if ( ( config -> sample_rate % sample_rates [ i ] == 0 ) && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = config -> xmode = 0 ; } else if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR",0
18,"<S2SV_ModStart> ; retry : if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_normalize_sense ( cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) goto retry ; switch ( driver_byte ( result ) ) { case UNIT_ATTENTION : if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive",0
19,<S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModEnd> parse_ciff ( save,0
20,"<S2SV_ModStart> * sd, VP9_BUFFER_CONFIG <S2SV_ModEnd> * cpi, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filt_best ; int filt_direction = 0 ; const int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_step = MIN ( filt_mid + filter_step, max_filter_level ) ; int filt_err = MIN ( filt_mid + filter_step, max_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating /",0
21,"<S2SV_ModStart> left == 0? 1 : offset ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", <S2SV_ModStart> offset ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ;",0
22,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> hp ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; vpx_write_token ( w, vpx_mv_fp_tree, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; vpx_write_token ( w, vpx_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; vpx_write_token ( w, vpx_mv_class0_tree, mvcomp -> class0_fp [ fr ] ) ; vpx_write_token ( w, vpx_mv_class0_tree, mvcomp -> class0_fp [ fr ] ) ; vpx_write_token ( w,",0
23,<S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> ralg -> cra_rng <S2SV_ModStart>. seedsize : <S2SV_ModEnd> ralg -> seedsize,0
24,"<S2SV_ModStart> ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr. s_addr ) ) goto end ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id ) ) goto end ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp.",0
25,<S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_16 ; else if ( blockSize == 24 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_24 ; else if ( blockSize == 40 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_40 ; else if ( blockSize == 24 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_24 ; else if ( blockSize == 40 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_40 ; else if ( blockSize == 48 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_48 ; else if ( blockSize == 64 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_64 ; else if ( blockSize == 128 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_128 ; else if ( blockSize == 256 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_256 ; else if ( blockSize == 512 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_512 ; else if ( blockSize == 1024 ) request -> rxBlockSzx = COAP_BLOCK_SIZE,0
26,"<S2SV_ModStart> int verbose ; jas_image_t * image_decode ; jas_image_t * image_decode <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_SUCCESS ) ; break ; case OPT_INFILE : if (! ( instream = jas_stream_fopen ( jas_optarg, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( image_decode ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image_decode = jas_image_decode ( image_decode, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } jas_",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> console_verbose ( ) <S2SV_ModStart> esr ) ; die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", regs, 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, * ( ( const u_char * ) ptr ++ ) ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; <S2SV_ModStart> intf ) ; if ( intf1 -> desc. bNumEndpoints < 1 ) return - ENODEV ; alt = usb_altnum_to_altsetting ( intf1 -> desc. bNumEndpoints, alt ) ; if ( alt < 0 ) return alt ; return usb_set_interface ( udev, intf1 -> desc. bInterfaceNumber, alt ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> * from, size_t <S2SV_ModEnd> fromlen, unsigned <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> elen = 0 <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> p = to <S2SV_ModStart> case 2 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 3 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""../"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break",0
31,"<S2SV_ModStart> ; } } else if ( server. maxidletime < 0 || server. maxidletime > 65535 ) { err = ""Invalid <S2SV_blank> timeout <S2SV_blank> value"" ; goto loaderr ; } else if ( server. tcpkeepalive < 0 || server. tcpkeepalive > 65535 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; }",0
32,"<S2SV_ModStart> connection_id ) ; spin_lock_irqsave ( & tgtport -> lock, flags ) ; if ( list_empty ( & tgtport -> assoc_list ) ) { spin_unlock_irqrestore ( & tgtport -> lock, flags ) ; return NULL ; } list_for_each_entry ( assoc, & tgtport -> assoc_list, a_list ) { if ( association_id == assoc -> association_id ) { queue = assoc -> queues [ qid ] ; if ( queue && (! atomic_read ( & queue -> connected ) ||! nvmet_fc_tgt_q_get ( queue ) ) ) queue = NULL ; } else { spin_unlock_irqrestore ( & tgtport -> lock, flags ) ; return NULL ; } }",0
33,"<S2SV_ModStart> get_version_reply ) ; if ( dev -> get_version_reply_endpoint == NULL ) { dev_err ( idev, ""get_version <S2SV_blank> reply <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if ( dev -> get_version_reply_endpoint == NULL ) { dev_err ( idev, ""get_version <S2SV_blank> reply <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if ( dev -> get_version_reply_endpoint == NULL ) { dev_err ( idev, ""get_version <S2SV_blank> reply <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if ( dev -> get_version_reply_endpoint == NULL ) { dev_err ( idev, ""get_version <S2SV_blank> reply <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if ( dev -> get_version_reply_endpoint == NULL ) { dev_err ( idev, ""get_version <S2SV_blank> reply <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if ( dev -> get_version_reply_endpoint == NULL ) { dev_err ( idev, ""get_version <S2SV_blank> reply <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size < sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring ) ) ; if ( dest_keyring ) break ;",0
36,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
37,"<S2SV_ModStart> int chk_addr_ret ; struct l2tp_sock * l2tp_sock ; <S2SV_ModStart> - EINVAL ; l2tp_sock = rcu_dereference_protected ( inet -> l2tp_sock, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( struct sockaddr_l2tpip ) ; l2tp_sock = rcu_dereference_protected ( l2tp_sock, sock_owned_by_user ( sk ) ) ; if ( l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk ) || l2tp_sock_owned_by_user ( sk )",0
38,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( - 1U ) & STACK_RND_MASK <S2SV_ModEnd> ) << PAGE_SHIFT <S2SV_ModStart> ) ) { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } else { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } return max <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ), <S2SV_ModStart> ( dialog ),",0
40,<S2SV_ModStart> ; tm = g_time_to_tm <S2SV_ModEnd> ( & t <S2SV_ModStart> tm ) ; if ( tm == NULL ) { g_throw ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR,0
41,"<S2SV_ModStart> strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & my_md5, ( unsigned char * ) password, strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & my_md5, ( unsigned char * ) secret, strlen ( secret ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & my_md5, ( unsigned char * ) password, strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & my_md5, ( unsigned char * ) password, strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & my_md5, ( unsigned char * ) secret, strlen ( secret ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & my_md5, ( unsigned char * ) password, strlen ( password ) ) ; md5",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> ]. fe = dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, d -> fe_adap [ 0 ]. fe, & s421_m88rs2000_config, d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, d -> dev ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } <S2SV_ModEnd> info ( ""Failed <S2SV_blank> to <S2SV_blank> attach <S2SV_blank> RS2000/TS2020!""",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; <S2SV_ModStart>. sk ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } if (! sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; }",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%ll",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; } if ( cc > stride ) { if ( stride == 4 ) { unsigned int cr = cp [ 0 ] ; unsigned int cg = cp [ 1 ] ; unsigned int cb = cp [ 2 ] ; unsigned int ca = cp [ 3 ] ; cc -= 4 ; cp += 4 ; while ( cc > 0 ) { cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff ) ; cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff ) ; cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff ) ; cp [ 3 ] = ( unsigned char ) ( ( ca += cp [ 3 ] ) & 0xff ) ; cp [ 3 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff ) ;",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAX_SCANLINESIZE || scanlinesizeout > TIFF_MAX_SCANLINESIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> large <S2SV_blank> scanlinesizein <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; }",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_name ( e + 1, & pwd -> pw_name ) ; if ( r < 0 ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name (",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { get_page ( buf -> page ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> ) ) ; if ( nmap!= sizeof ( encr_t_map ) / sizeof ( encr_t_map <S2SV_ModStart> ) ) ; if ( nmap!= sizeof ( encr_t_map ) / sizeof ( encr_t_map ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u <S2SV_blank> "", tcount, nmap, sizeof ( encr_t_map ) / sizeof ( encr_t_map ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u <S2SV_blank> "", tcount, nmap ) ) ; } <S2SV_ModStart> ) ) ; if ( nmap!= sizeof ( encr_t_map ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u <S2SV_blank> "", tcount, nmap, sizeof ( encr_t_map ) / sizeof ( encr_t_map ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u <S2SV_blank> "", tcount, sizeof ( encr_t_map ) ) ; }",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> &= ~ ( S_ISGID | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP |",0
53,"<S2SV_ModStart> 0 ; select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) return false ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) )",0
54,"<S2SV_ModStart> wp -> config -> pm_max_requests ; if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeded"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; } reset_fpf_position ( twopass, position ) ; if ( j == still_interval ) trans_",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { <S2SV_ModStart> ) ; return PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : 0 ; handle -> h_err = jbd2_journal_stop ( handle ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_error ) ; err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_error ) ; handle -> h_err = PTR_,0
57,"<S2SV_ModStart> if ( offset >= i_size_read ( inode ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } ret = ext4_write_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ;",0
59,"<S2SV_ModStart> ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
60,"<S2SV_ModStart> stlv_len ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> stlv_len ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { N",0
61,"<S2SV_ModStart> job_data_size_limit ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ]!= '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ]!= '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ]!= '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return reply_msg ( c, MSG_JOB_TOO_BIG ) ; }",0
62,"<S2SV_ModStart> flags ) ; if ( dgnc_Board [ dgnc_Board [ dgnc_Board [ dgnc_Board [ dgnc_Board [ dgnc_Board ] ] -> state == BOARD_FAILED ) dgnc_Board [ dgnc_Board [ brd ] -> state ] = dgnc_Board [ dgnc_Board [ brd ] -> state ] ; else dgnc_Board [ dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) di. info_nports = 0 ; else di. info_nports = 0 ; spin_lock_irqsave ( & dgnc_Board [ brd ] -> bd_lock, flags ) ; di. info_bdtype = dgnc_Board [ brd ] -> dpatype ; di. info_bdstate = dgnc_Board [ brd ] -> dpastatus ; di. info_ioport = 0 ; di. info_physsize = ( ulong ) dgnc_Board [ brd ] -> membase_",0
63,"<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 || <S2SV_ModStart> ) ) return 0 ; if ( flags & TH_SYN ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ; if ( opt_len == 12 ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ; } ND_PRINT ( ( ndo, "",",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; <S2SV_ModEnd> int status ; <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( options -> attach_flags & LXC_ATTACH_REMOVE_PROC_SYS ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; <S2SV_ModStart> += 3 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref [ len ] = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg [ len ] = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; if",0
66,"<S2SV_ModStart> ; if ( header -> biSize < 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biPlanes |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 )",0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> - ENOBUFS ; <S2SV_ModEnd> line. clock_type,0
71,"<S2SV_ModStart> arg ) { int ret = scsi_verify_blk_ioctl ( bd -> bd_disk, cmd, arg ) ; if ( ret < 0 ) return ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk, cmd, arg ) ; if ( ret < 0 ) return ret ;",0
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return ; }",0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; unsigned <S2SV_ModStart> int ) ) ) { kfree ( ureq ) ; return - EFAULT ; } ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_len = qinfo. udata_",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> ) ; } if ( num!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d",0
76,"<S2SV_ModStart> mxf_tc ) ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> mxf_tc ) ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> mxf_tc ) ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return -",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> 1 ; } else { psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_eflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Direction <S2SV_blank> [%s]"", bittok2str ( jnx_direction_values, ""none"", l2info -> direction ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag",0
80,<S2SV_ModStart> NF_STOLEN ; # if IS_ENABLED ( CONFIG_NF_CONNTRACK ) if ( skb -> nfct ) { struct nf_conn * ct = skb -> nfct ; struct nf_conn * ct_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
81,"<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_len xfrm_replay_state_esn_len ; <S2SV_ModStart> rta ) ; xfrm_replay_state_esn_init ( & xfrm_replay_state_esn_len, rta ) ; <S2SV_ModStart> - ENOMEM ; xfrm_replay_state_esn_copy ( & xfrm_replay_state_esn, xfrm_replay_state_esn_len ( & xfrm_replay_state_esn_len ) ) ; <S2SV_ModStart> - ENOMEM ; xfrm_replay_state_esn_copy ( & xfrm_replay_state_esn_len, & xfrm_replay_state ) ; <S2SV_ModStart> - ENOMEM ; xfrm_replay_state_esn_copy ( & xfrm_replay_state_esn, xfrm_replay_state_esn_len ( & xfrm_replay_state_esn_len ) ) ; * replay_esn = p ; * preplay_es",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; break ;,0
84,"<S2SV_ModStart> LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_config_flush ( ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bd",0
85,<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numrows < 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = ( numrows + 1 - parity ) >> 1 ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [,0
86,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; res = VPX_CODEC_OK ; break ; } } } else { res = VPX_CODEC_INVALID_PARAM ; },0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name, <S2SV_ModEnd> void * data <S2SV_ModStart>. hash ) ; if ( bitmap_pos < 0 ) { <S2SV_ModEnd> char * name <S2SV_ModStart> name ) ; free ( name ) ; } else { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } <S2SV_ModEnd> bitmap_set ( base",0
89,"<S2SV_ModStart> ; newparity = baud_to_parity ( opts. baud ) ; newbits = baud_to_bits ( opts. baud ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity, newbits ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; } if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity, newbits ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; }",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> used_id_elems ) { kfree ( mixer -> used_id_elems ) ; } else { kfree ( mixer -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
91,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_sock * <S2SV_ModStart> ; } if ( po -> fanout ) return - EALREADY ; if ( type == PACKET_FANOUT_HASH : case PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : if ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) { <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } else { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list",0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp, <S2SV_ModStart> ) ) ; inet_csk ( newsk ) -> icsk_ext_hdr_len = sizeof ( struct ipv6hdr_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> int frame_in, <S2SV_ModStart> uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ;",0
95,"<S2SV_ModStart> ; # if MYSQL_ASYNC if ( imp_dbh -> async_query_in_flight ) { if (! imp_dbh -> async_query_in_flight ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } } # endif <S2SV_ModStart> ; # if MYSQL_ASYNC if ( imp_dbh -> async_query_in_flight ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if (! imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank>",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ) ;",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_",0
98,<S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ;,0
99,"<S2SV_ModStart>, path ) ; ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else goto out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) { set_buffer_unwritten ( bh_result ) ; goto map_out ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags &",0
100,"<S2SV_ModStart> 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 2 ) ; <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 4 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK2 (",0
101,"<S2SV_ModStart> (! caller_is_in_group ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (",0
102,"<S2SV_ModStart> flag ) { <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride",0
103,"<S2SV_ModStart> ( * ptr ) ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ( ptr -> flags & FD_RAW_WRITE ) ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ( ptr -> flags & FD_RAW_WRITE ) && ( ptr -> flags & FD_RAW_READ ) ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = - EFAULT ; } else if ( ( ptr -> flags & FD_RAW_READ ) && ( ptr -> flags & FD_RAW_WRITE ) && ( ptr -> flags & FD_RAW_READ ) && ( ptr -> flags & FD_RAW_READ ) ) { long length = ptr -> buffer_length - ptr -> length ;",0
104,"<S2SV_ModStart> ; if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { new -> euid = new -> uid ; } } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> fsgid ; if (! issecure ( SECURE_NOROOT ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { if ( issecure ( SECURE_NOROOT ) ) { warn_setuid_and_fcaps_mixed ( bprm -> filename ) ;",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s, <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; if ( tf == NULL ) { luaF_newLclosure ( L, - 1, hvalue ( gt ( L ) ) ) ; cl = luaF_newLclosure ( L, - 1, hvalue ( gt ( L ) ) ) ; } else if ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; cl = luaF_newLclosure ( L, - 1, hvalue ( gt ( L ) ) ) ; if ( cl == NULL ) { luaF_newLclosure ( L, - 1, hvalue ( gt ( L ) ) ) ; cl = luaF_newLclosure ( L, - 1, hvalue ( gt ( L ) ) ) ; } else { luaF_newLclosure ( L, - 1, hvalue ( gt ( L ) ) ; }",0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> net * net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; if ( copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, opt, optlen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( dev_num, size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags",0
111,"<S2SV_ModStart> ; trunc : if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ) tptr ; u_int pdu_len, hexdump ; <S2SV_ModStart> ( * tptr, 4 ) ; ND_TCHECK2 ( * tptr, 4 ) ; <S2SV_ModStart> pdu_len ) ; ND_TCHECK_32BITS ( * tptr, pdu_len ) ; <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_TCHECK_32BITS ( * tptr, pdu_len ) ; <S2SV_ModStart> case RPKI_RTR_CACHE_RESET_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Cache: <S2SV_blank> %u"", indent_string ( indent + 2 ), pdu_header -> u. session_id ) ) ; break ; case RPKI_RTR_CACHE_RESPONSE_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x"", indent_string ( 2 ) ) ) ; break ; case R",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; memset ( & facilities, 0x00, sizeof ( struct rose_facilities_struct ) ) ; <S2SV_ModStart> (! rose_parse_facilities ( skb -> data + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ;",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> in <S2SV_blank> GUI"" ) ; else if ( get_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( get_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( get_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( get_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( get_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank>",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> int ret, <S2SV_ModStart> 0 ; } <S2SV_ModEnd> write_lock ( & <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else ret =",0
118,"<S2SV_ModStart> : isoclns_print ( ndo <S2SV_ModEnd>, p,",0
119,"<S2SV_ModStart> '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { break ; } else if ( src [ 0 ] == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '/' ) { break ; } else if ( src [ 0 ] == '.' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT16 bytes = bits / 8 ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < bytes ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; j = 0 ; bufferList [ j ++ ] = ( TPM2B_DIGEST * )",0
121,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = 0 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if",0
122,<S2SV_ModStart> s ) { if ( s > SIZE_MAX / sizeof ( tdata_t ) ) { return ( malloc ( ( size_t ) SIZE_MAX / sizeof ( tdata_t ) ) ) ; },0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EACCES ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. ctxt_data, & ucmd -> ctxt_data, sizeof ( cmd -> ctxt_data ) ) ) { ret = - EFAULT ; goto bail ; } if ( copy_from_user ( & cmd. ctxt_data, & ucmd -> ctxt_data, sizeof ( ucmd -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt, sizeof ( ucmd -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt -> ctxt",0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) { spin_unlock_bh ( & net -> nsid_lock ) ; return peer ; } <S2SV_ModEnd> spin_unlock_bh ( &,0
126,<S2SV_ModStart> ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\t' ) { i ++ ; if ( i < ( int ) header_buf_,0
127,"<S2SV_ModStart> ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && <S2SV_ModStart> ( POKE_START_LLDP_PPVID ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_START_LLDP_PPVID ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE",0
128,<S2SV_ModStart> ( dp == 0 && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match <S2SV_ModStart> ) || ( decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL ) || ( decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL ) || ( decoder -> last_asn1_match == NULL && decoder -> last_asn1_match == NULL && decoder,0
129,<S2SV_ModStart> ) ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; <S2SV_ModStart> ) ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; <S2SV_ModStart> ) ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; <S2SV_ModStart> ) ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh (,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = get_bits ( gb, 4 ) ; } else { s -> avctx -> profile = 0 ; } if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wTail ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if (",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_warn ( "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } } <S2SV_null>,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; __be32 * savep ; uint32_t attrlen, bitmap [ 3 ] ; <S2SV_ModStart> status = 0 ; * acl_len = 0 ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( unlikely ( * savep!= NULL ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> savep <S2SV_blank> %u\\n"", savep -> iov_base, savep -> iov_len ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; <S2SV_ModEnd> } else status",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { kfree_skb ( segs ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { kfree_skb ( segs ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { kfree_skb ( segs ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
138,<S2SV_ModStart> while ( ( ( <S2SV_ModStart> ]!= 0 ) && ( i < to_read ) ) ; if ( i == 0 ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read - 1 ) { ptr -> nameURN = tmpName ; ptr -> location = NULL ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> location = ( char * ) gf_malloc ( sizeof ( char ) * ( to_read - i - 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> AVPALETTE_SIZE ) ; if (! in -> data [ plane ] ) { av_frame_free ( & in ) ; return AVERROR ( ENOMEM ) ; } for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j",0
141,"<S2SV_ModStart> '/' ) { _odbcinst_FileINI ( szFileName ) ; snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szFileName, pszFileName ) ; } else if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } else if ( strlen ( pszString ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszString ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> 1 ) { if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> 1 ) { if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> 1 ) { if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) )",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> res = read_fs_bytes <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [ 0 ] ; return TRUE ; }",0
149,"<S2SV_ModStart> ) ; } sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr + 1 ) ; rw_exit ( & sdvp -> sdev_contents ) ;",0
150,<S2SV_ModStart> flags |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else { if ( strcmp ( p1, ""none"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; return NULL ; } else if ( strcasecmp ( p1, ""none"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } } else { apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; return NULL ; }",0
152,"<S2SV_ModStart> ) ) ; rcu_assign_pointer ( np -> opt, fl6 ) ; <S2SV_ModStart> & final ) ; rcu_assign_pointer ( inet -> inet_sport, fl6. fl6_dport ) ; rcu_assign_pointer ( inet -> inet_sport, fl6. fl6_sport ) ;",0
153,"<S2SV_ModStart> = 0.0 ; TIFF_uint16 <S2SV_ModEnd> nstrips = 0 <S2SV_ModStart> ntiles = 0 ; TIFF_uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0 ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", """,0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, <S2SV_ModEnd> fwd. listen_host <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", <S2SV_ModEnd> fwd. listen_host <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, <S2SV_ModEnd> fwd. listen_host <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", <S2SV_ModEnd> fwd. listen_host <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ( FALSE ) ; } <S2SV_ModStart> gss_union_ctx_id_desc ) ) ; if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_buffer_desc ) ) ) == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ( FALSE ) ; } if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ( FALSE ) ; } if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { fprintf ( stderr, ""svcauth_gs",0
159,"<S2SV_ModStart> = 0 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; <S2SV_ModStart> ; } memcpy ( <S2SV_ModStart> bh -> b_data, ei -> i_data, sizeof ( ei -> i_data ) ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ) ; neh -> eh_max = cpu_to_le16 ( EXT4_EXT_MAGIC ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ) ; neh ->",0
160,"<S2SV_ModStart> } if ( preverify_ok && SSL_get1_session ( c -> ssl ) ) { int ok = verify_checks ( c, preverify_ok, callback_ctx ) ; if (! ok ) { SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 1 ;",0
161,"<S2SV_ModStart> int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; } if ( at91_aes_cmac ( data_length, data, computed_cmac, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( iv, 0, sizeof ( iv ) ) ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ;",0
163,"<S2SV_ModStart> ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } else if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } c -> nreslevels2decode = c -> nreslevels - s -> reduction_factor ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_ModStart> CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; if (",0
165,<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ; is_drop_n_account = ( skb -> pkt_type == PACKET_LOOPBACK ) ; if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; if ( skb -> pkt_type == PACKET_OUTGOING && ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) ) status |= TP_STATUS_CSUMNOTREADY ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> ip_summed == CHECKSUM,0
166,"<S2SV_ModStart> ) ; } list_for_each_entry_safe ( trans, pos, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; sctp_ssnmap_clear ( trans -> ssnmap ) ; sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_add_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; } else { list_for_each_entry ( trans, & trans -> transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ;,0
168,"<S2SV_ModStart> int procfd, int on_exec, <S2SV_ModStart> ( name, ""nop"" ) == 0 ) goto out ; if ( strcmp ( name, ""none"" ) == 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; }",0
169,<S2SV_ModStart> ) ) { if ( ( comp -> dx + comp -> dx ) > ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( comp -> dy + comp -> dy ) ) > ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. bits_left += cpi -> rc. projected_frame_size ; } else { cpi -> twopass. bits_left -= bits_used ; } cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; if ( ISALNUM ( ptr ) ) { lptr ++ ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar ++ ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; } else if ( charlen == 1 && t_iseq ( ptr, '*' ) ) { lptr ++ ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; else UNCHAR ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAIT",0
173,"<S2SV_ModStart> * header, <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ; struct mb2_cache <S2SV_ModEnd> * ce ; <S2SV_ModStart> : ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_",0
174,"<S2SV_ModStart> data_offset ) { gchar line [ COSINE_LINE_LENGTH + 1 ] ; <S2SV_ModStart> = offset ; if (! wth -> frame_buffer ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, & <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, & <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, err_info ) <S2SV_ModEnd> ; } <S2SV_null>",0
175,"<S2SV_ModStart> ; if ( line_len == 0 ) { error = add_push_report_pkt ( push, NULL ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if ( error < 0 ) goto done ; error = add_push_report_pkt ( push, pkt ) ; if (",0
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if (",0
177,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImage",0
178,"<S2SV_ModStart> if ( copy_from_user <S2SV_ModEnd> ( buf, <S2SV_ModStart> ) arg, hdr. size_in ) ) { ret = - EFAULT ; goto out ; } if ( hdr. size_in > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, size - hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_out > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, size - hdr. size_out ) ; ret = - E2BIG ; goto out ; } if ( hdr. size_out < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_out ) ; ret = - E2BIG ; goto out ; } if ( hdr. size_out < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank>",0
179,"<S2SV_ModStart> int hstartcol ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr =",0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> ( image ) ) ; memset ( magick, 0, sizeof ( magick ) ) ; <S2SV_ModStart> ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLS",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; ext2_sync_super ( sb, es, 1 ) ; }",0
183,"<S2SV_ModStart> err_free_urbinfo ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbin",0
184,"<S2SV_ModStart> ; if ( sizeof ( buf ) > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ), sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ), sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf )",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; } else { return NULL ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ) ; } if ( avio_rb32 ( pb ) < 12 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) ast -> codecpar -> sample_rate ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_rb32 ( pb ) < 12 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) ast -> codecpar -> sample_rate ) ; return AVERROR ( EINVAL ) ; } if ( avio_rb32 ( pb ) < 12 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) ast -> codecpar -> sample_rate ) ; return AVERROR ( EINVAL ) ; } if ( avio_rb32 ( pb ) < 12 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ( unsigned int ) ast -> codecpar ->",0
188,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT",0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, ""loopstats"", & loopstats ) ; filegen_register ( statsdir, ""rawstats"", & rawstats ) ; # ifdef AUTOKEY filegen_register ( statsdir, ""cryptostats"", & cryptostats ) ; # endif # ifdef AUTOKEY_TIMING filegen_register ( statsdir, ""timingstats"", & timingstats ) ; # endif # ifdef AUTOKEY_TIMING filegen_register ( statsdir, ""timingstats"", & timingstats ) ; # endif # ifdef DEBUG_TIMING step_callback = & ntpd_time_stepped ; # else step_callback = & ntpd_time_stepped ; # endif",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname [ strlen ( tmpname ) - 1 ]!= '\\0' ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR ( ERR_PTR (",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & shadows -> mnt_mounts ) ) { attach_shadowed ( mnt, parent, & shadows -> mnt_mounts [ mnt -> mnt_mounts [ mnt -> mnt_mounts. len - 1 ] ) ; touch_mnt_namespace ( n ) ; } else { detach_shadowed ( mnt, parent, & shadows -> mnt_mounts [ mnt -> mnt_mounts. len - 1 ] ) ; attach_shadowed ( mnt, parent, & shadows -> mnt_mounts [ mnt -> mnt_mounts. len - 1 ], & shadows -> mnt_mounts [ mnt -> mnt_mounts. len - 1 ] ) ; touch_mnt_namespace ( n ) ; }",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS",0
193,<S2SV_ModStart> dd ) ; if (! g_cd ) { update_gui_state_from_problem_data ( 0 ) ; } else { update_gui_state_from_problem_data ( 1 ) ; },0
194,"<S2SV_ModStart> ps_bitstrm ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; <S2SV_ModStart> ps_bitstrm ) ; ps_codec -> i4_pic_done = 1 ; <S2SV_ModStart> ps_bitstrm ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 3 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 3 ) ; ps_codec ->",0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << DB_VECTOR ) ; if ( enable_ept ) eb |= ( 1u << PF_VECTOR ) ; if ( vcpu -> rmode. vm86_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> rmode. vm86_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( vcpu -> rmode. vm86_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> rmode. vm86_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> rmode. vm86_active ) eb,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; strncpy <S2SV_ModEnd> ( temp, <S2SV_ModStart> NFSX_V3FHMAX ) ; strncpy <S2SV_ModEnd> ( temp, <S2SV_ModStart> NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ;",0
197,"<S2SV_ModStart> int transhdrlen, unsigned <S2SV_ModStart> = SKB_GSO_UDP ; if ( length < transhdrlen ) { skb_shinfo ( skb ) -> gso_size = ( length - transhdrlen ) & ~ 7 ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; }",0
198,"<S2SV_ModStart> res ) goto fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; <S2SV_ModStart> res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, H",0
199,"<S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> const buffers [ MAX_MB_PLANE ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ MAX_MB_PLANE ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> stable ) ) return 0 ; <S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> len ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( hdr + dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) { switch ( ctxt -> op_bits ) { case 1 : ctxt -> _eip = ( u8 ) dst ; break ; case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining <S2SV_ModEnd> ( tvb,",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == WRITE ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; else ret = <S2SV_ModEnd> __blockdev_direct_IO ( iocb",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart>, def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; } else if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ;",0
208,"<S2SV_ModStart> + 1 ) ; perf_event_update_userpage ( event, <S2SV_ModEnd> val ) ;",0
209,"<S2SV_ModStart> = len ; if ( len < 0 ) { len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; } else { len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; } else { len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len < 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len < 0",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; mod_ty mod ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_end >= expr_start ) ; assert ( * expr_start == '{' || * expr_start == '}' || * expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; memcpy ( str + 2, expr_start, len ) ; str",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ;",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> len ) ; if (! <S2SV_ModStart> * len ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ;",0
215,"<S2SV_ModStart
216,"<S2SV_ModStart> if ( COMPAT_USE_32BIT_TIME ) return __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, ( struct timespec * ) timeout ) ; if ( <S2SV_ModStart> ; if ( get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> ; ret = <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } else { ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE, <S2SV_ModStart>, TEMPORARY_TTL_MIN <S2SV_ModEnd>, WATCHER_LOGBUF_SIZE,",0
221,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ; } repo_config = perf_pathdup ( ""config"" ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx ) { struct arm_pmu * armpmu = <S2SV_ModEnd> to_arm_pmu ( event <S2SV_ModStart> ( event -> <S2SV_ModEnd> pmu!= leader_pmu <S2SV_ModStart> return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event ) < 0 ) return 1 ; <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events,",0
225,"<S2SV_ModStart> bool new_idmap_permitted ( const struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { struct user_namespace * ns = user_ns ; if ( ns_capable ( user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> parent, cap_setid ) ) return true ; if ( ns_capable ( user_",0
226,"<S2SV_ModStart> j ++ ) { <S2SV_ModStart> j ] = CHECKED_XCALLOC ( VarLenData, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED",0
227,"<S2SV_ModStart> hexline * hx <S2SV_ModEnd> ; int ret <S2SV_ModStart>, pos = 0 ; hx = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModStart> = 1 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; while ( ( ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> stop <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret =",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS",0
229,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart> -> params. user, c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( """,0
230,"<S2SV_ModStart> * bo ; uint32_t bin_size = args -> bin_cl_size * args -> bin_cl_size ; uint32_t shader_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t uniforms_offset = roundup ( uniforms_offset + args -> uniforms_size, 16 ) ; if ( bin_size < shader_rec_offset || bin_size < shader_rec_offset || uniforms_offset < uniforms_offset || uniforms_size < uniforms_offset || exec_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) args -> shader_cl, args -> shader_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) args -> shader_rec",0
231,<S2SV_ModStart> endif # if HAVA_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
232,<S2SV_ModStart> -> vm_file ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> -> i_mmap_sem ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ; out_ret : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg ) { r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> break ; default : r_return_val_if_fail ( * arg, NULL ) ;",0
235,"<S2SV_ModStart> ) ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; } if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo,",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; <S2SV_ModStart> ice_conn ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } <S2SV_ModStart> ice_conn ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return TRUE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ;",0
237,"<S2SV_ModStart> ; if ( unlikely ( pskb_expand_head ( skb, frag_hdr_sz, 0, GFP_ATOMIC ) ) ) goto out ;",0
238,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde2"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde3"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde4"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde2"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde3"", "".git/foobar"" ) ;",0
239,"<S2SV_ModStart> ; break ; case SO_KEEPALIVE : v. val =!! sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_",0
240,<S2SV_ModStart> ) { if ( unlikely ( msg -> msg_name ) ) { msg -> msg_name = NULL ; msg -> msg_namelen = 0 ; return 0 ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const int stride [ MAX_MB_PLANE ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int buffers [ 4 ] = { src -> y_stride, src -> uv_buffer, src -> uv_buffer, src -> alpha_buffer } ; const int strides [ MAX_MB_PLANE ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z ) ; } }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL )",0
244,"<S2SV_ModStart> r ) { kvm_iommu_unmap_pages ( kvm, & old, & old. npages ) ; kvm_iommu_unmap_pages ( kvm, & old. npages, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. npages, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. npages ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest",0
245,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_nameen = 0 ;,0
247,"<S2SV_ModStart> * ni ; <S2SV_ModEnd> register u_int i <S2SV_ModStart> ; register u_int <S2SV_ModEnd> j ; int <S2SV_ModStart> ; if ( <S2SV_ModEnd> j == 1 <S2SV_ModStart> 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> dump"" ) ) ; break ; } if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni )!= i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" )",0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_NO_CHANGE ) { ret = - EEXIST ; goto error ; } break ; case KEY_REQKEY_DEFL_DEFAULT_KEYRING : case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = - EEXIST ; break ; case KEY_REQKEY_DEFL_DEFAULT_KEYRING : ret = install_default_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } break ; case KEY_REQKEY_DEFL_DEFAULT_KEYRING : ret = install_default_keyring_to_cred ( new ) ; break ; case KEY_REQKEY_DEFL_DEFAULT_KEYRING : ret = install_default_keyring_to_cred ( new ) ; break ; case KEY_REQKEY_DEFL_DEFAULT_KEYRING : ret = install_default_keyring_to_cred ( new ) ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,<S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) { retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; bprm -> file = NULL ; goto _ret ; } <S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) { retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; bprm -> file = NULL ; goto _ret ; } <S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ;,0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight,0
252,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( & <S2SV_ModStart> ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> ) { Com_Printf <S2SV_ModEnd> ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ;",0
254,<S2SV_ModStart> ; int sl ; if ( cursor -> ns == NULL ) { cursor -> err = MONGO_CURSOR_INVALID ; return MONGO_ERROR ; },0
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; return NULL ; } <S2SV_ModStart> mobj ) ; memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart> size ) ; mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM )",0
256,<S2SV_ModStart> -> it_overrun += incr <S2SV_ModEnd> ; delta -=,0
257,"<S2SV_ModStart> * for_ch ; type_ty type ; <S2SV_ModStart>, comp_for ) ; type = TYPE ( CHILD ( n, 0 ) ) ; if ( type == TYPE_COMMENT ) { ast_error ( c, n, ""Inline <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( type == TYPE_COMMENT ) { ast_error ( c, n, ""Inline <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } type = TYPE ( CHILD ( n, 0 ) ) ; if ( type == TYPE_COMMENT ) { ast_error ( c, n, ""Inline <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 )",0
258,"<S2SV_ModStart> NULL ; } for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe + 1 ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * * mi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ] ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, seg, mbmi -> segment_id ) ; write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. iov_len ) ; <S2SV_ModStart> ) ; } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. iov_len ) ; n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; } else { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. iov_len ) ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; }",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } if (",0
263,"<S2SV_ModStart> maxn ) { SWF_LOG <S2SV_ModEnd> ( ""Action <S2SV_blank> overflow!!"" ) <S2SV_ModStart> ; # endif switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : return decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : return decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_END : return 0 ; case SWFACTION_GOTOLABEL : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOF",0
264,<S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj ->,0
265,"<S2SV_ModStart> out ; } if ( free < 0 ) { err = - ENOMEM ; goto out ; } if ( table -> total == table -> max ) { err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; goto out ; } table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; goto out ; }",0
266,"<S2SV_ModStart> ; if ( len > ND_TMAX ( & prep -> pp_n ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; <S2SV_ModStart> - 1 ) ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, io -> nid ) ) ; io = ( const struct id_off * ) io ; ND_TTEST ( * io ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; io = ( const struct id_off * ) io ; ND_PRINT ( ( ndo,",0
267,<S2SV_ModStart> rq ) ; rcu_read_lock ( ) ; <S2SV_ModStart> -> skip_clock_update = 1 ; rcu_read_unlock ( ) ;,0
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( usb_dev <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; return ret ;",0
269,<S2SV_ModStart> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> ( 2 + <S2SV_ModStart> -> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * azModuleArg ;,0
270,<S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""Invalid <S2SV_blank> adaptation <S2SV_blank> state <S2SV_blank> for <S2SV_blank> device <S2SV_blank> profile"" ) ; goto Error ; }",0
272,"<S2SV_ModStart> 32 ) { <S2SV_ModEnd> ut32 addr32 = <S2SV_ModStart> } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { ut32 addr32 = r_read_le32 ( buf + i ) ; if ( addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } <S2SV_ModEnd> free ( buf",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr ) ) ) ; break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr ) ) ) ; else ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr ) ) ) ; break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr )",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start,0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_,0
276,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqd = bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_queued [ 0 ] == 0 && bfq_bfqq_queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason =",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> ; RING_FINAL_CHECK_FOR_REQUESTS ( <S2SV_ModEnd> vif -> tx <S2SV_ModStart>. req_cons ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq ) ; netbk_tx_put ( vif ) ; continue ; } <S2SV_ModStart>. req_cons ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModStart>. req_cons ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq ) ; netbk_tx_put ( vif ) ; continue ; } <S2SV_ModStart>. req_cons ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModStart>. req_cons ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_",0
279,"<S2SV_ModStart> cb -> args [ 0 ] ; struct xfrm_net * net = rcu_dereference_protected ( cb -> net -> xfrm, sock_owned_by_user ( cb -> skb -> sk ) ) ;",0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; struct xenvif_tx_request * txp ; <S2SV_ModStart> status ; if ( unlikely ( <S2SV_ModStart> ( err ) ) { <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; if ( unlikely ( newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; index = pending_index ( netbk -> pending_prod ++ ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( v",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( resize_image, resize_image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( resize_image, resize_image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( resize_image ) ) ; }",0
284,"<S2SV_ModStart> struct hv_kvp_ipaddr_value * kvp_ip_val ; memset ( & hv_msg -> kvp_hdr, 0, sizeof ( struct hv_kvp_hdr ) ) ; memcpy ( & hv_msg -> kvp_ip_val, sizeof ( struct hv_kvp_ipaddr_value ) ) ; memcpy ( & kvp_ip_val -> ip_value, sizeof ( struct hv_kvp_ipaddr_value ) ) ; memcpy ( & hv_msg -> kvp_hdr. ip_value, sizeof ( struct hv_kvp_ipaddr_value ) ) ; memcpy ( & hv_msg -> kvp_hdr. ip_value, sizeof ( struct hv_kvp_ipaddr_value ) ) ; memcpy ( & hv_msg -> ip_value, sizeof ( struct hv_kvp_ipaddr_value ) ) ; memcpy ( & hv_msg -> kvp_hdr. ip_value, sizeof ( struct hv_kvp_ipaddr_value ) ) ; memcpy ( &",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; <S2SV_ModEnd> type = crm_element_value <S2SV_ModStart> F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send =",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x ) ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + y ; if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dinfo -> i_alloc_type <S2SV_ModStart> dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad,0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL && ipvs -> fw_version >= IP_VS_FW_VERSION_1 ) { memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ; memset ( & d [ 2 ], 0, sizeof ( d [ 2 ] ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memset ( & d [ 4 ], 0, sizeof ( d [ 4 ] ) ) ; memset ( & d [ 5 ], 0, sizeof ( d [ 5 ] ) ) ; memset ( & d [ 6 ], sizeof ( d [ 6 ] ) ) ; } if ( cmd == IP_VS_BASE_CTL && ipvs -> fw_version >= IP_VS_FW_VERSION_1 ) { memset ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memset ( & d [ 4 ], sizeof ( d [ 4 ] ) ) ; memset ( & d [ 5 ], sizeof ( d [ 5 ]",0
290,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass ) ) ; rcu_assign_pointer ( ireq -> ir_v6_loc_addr, fl6 -> daddr ) ; rcu_assign_pointer ( ireq -> ir_v6_rmt_addr, rcu_dereference ( req -> ir_v6_loc_addr ) ) ; rcu_assign_pointer ( req -> ir_v6_rmt_addr, rcu_dereference ( req -> ir_v6_loc_addr ) ) ; rcu_assign_pointer ( req -> ir_v6_rmt_addr, fl -> daddr ) ; rcu_assign_pointer ( req -> ir_v6_rmt_addr, rcu_dereference ( req -> ir_v6_rmt_addr ) ) ; rcu_assign_pointer ( req -> ir_v6_rmt_addr, rcu_dereference ( req -> ir_v6_rmt_addr ) ) ; rcu_assign_pointer ( req -> ir_",0
291,<S2SV_ModStart> hdr ; ssize_t result ; if (! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access ( filp ) ||! ib_safe_file_access (,0
292,"<S2SV_ModStart> * fpath = NULL, * cgdir = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> O_RDWR ) ) { if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_may_access ( fc -> pid, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; } <S2SV_ModEnd> <S2SV_",0
293,"<S2SV_ModStart> queue ) ) { pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ; pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ; pr_err ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ; continue ; } pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ; pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ; if (! pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ) { pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> disk <S2SV_blank> for <S2SV_blank> unit <S2SV_blank> %d\\n"", __func__, unit ) ; continue ; }",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( image -> number_data_bands < number_pixels ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( image -> number_data_bands < number_pixels ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( image -> number_data_bands < number_pixels ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( image -> number_data_bands < number_pixels ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( image -> number_data_bands < number_pixels ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( image -> number_data_bands < number_data_bands ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( image -> number_data_bands < number_data_bands ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
296,"<S2SV_ModStart> ; int64_t index_pts = ff_rescale ( itime, i, 10000 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", index_pts, pct, ict ) ; } if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", index_pts ) ; av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n""",0
297,<S2SV_ModStart> ; if ( unlikely ( srp -> timeout > SG_SECS_TIMEOUT ) ) return - EBUSY ; <S2SV_ModStart> ; if ( unlikely ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) ) return - EBUSY ; <S2SV_ModStart> ; if ( unlikely ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) ) return - EBUSY <S2SV_ModStart> ; if ( unlikely ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) ) return - EBUSY ; <S2SV_ModStart> ; if ( unlikely ( srp -> timeout > SG_SECS_TIMEOUT ) ) return - EBUSY ; <S2SV_ModStart> ; if ( unlikely ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) ) return - EBUSY ; <S2SV_ModStart> ; if ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) return - EBUSY ; if ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) return - EBUSY ; if ( unlikely ( srp -> timeout > SG_ATTEMPTS_TIMEOUT ) ) return - EBUSY ;,0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_groups"", & security_groups_handler ) ; # endif # ifdef _WITH_LVS_ install",0
299,"<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * enc_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; <S2SV_ModStart> encoder_common_init ( ctx, enc_cfg ) ; return VPxError <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; tmpptr = ( char * ) key ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> key ) ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if (! param ) { if ( iscsi_check_key ( key, phase, sender, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if (! param ) { if ( iscsi_check_key ( key, phase, sender, param_list ) < 0 ) { kfree ( tmpbuf ) ;",0
301,"<S2SV_ModStart> ENOENT ) { <S2SV_ModEnd> touch_file ( t <S2SV_ModStart>, UID_INVALID, GID_INVALID, 0 ) ; } else { touch_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix_posix",0
302,"<S2SV_ModStart> ( box = jas_malloc2 <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart> ( JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x",0
303,"<S2SV_ModStart> int Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> Py_ssize_t i ; <S2SV_ModStart> i ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
304,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> = vnet_hdr. hdr_len <S2SV_ModEnd> ; bool zerocopy <S2SV_ModStart> ) { copylen = min_t ( size_t, <S2SV_ModStart> vnet_hdr. hdr_len, GOODCOPY_LEN, len ) ; if ( copylen > GOODCOPY_LEN ) { err = - EINVAL ; goto err ; } <S2SV_ModEnd> if ( zerocopy <S2SV_ModStart> ) { copylen = min_t ( size_t, GOODCOPY_LEN, len ) ; if ( copylen > GOODCOPY_LEN ) { err = - EINVAL ; goto err ; } <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart> ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; goto err ; }",0
305,<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) ; <S2SV_ModStart> ( offset + ipv6_optlen <S2SV_ModEnd> ( exthdr ) <S2SV_ModStart> ; offset += ipv6_optlen <S2SV_ModEnd> ( exthdr ) <S2SV_ModStart> nexthdr ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; * nexthdr = & exthdr -> nexthdr ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ; offset += ipv6_optlen ( exthdr ) ;,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = mv. as_int ; mvy [ vcnt ] = mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = mv. as_int ; mvy [ vcnt ] = mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = mv. as_int ; mvy [ vcnt ] = mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvy [ vcnt ] = left -> mbmi. ref",0
308,<S2SV_ModStart> ; if ( msg -> msg_namelen < sizeof ( struct virtio_net_hdr ) ) { err = - EINVAL ; goto out_free ; } msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,<S2SV_ModStart> asconf ) { union sctp_addiphdr_t * hdr ; union sctp_addr_param * addr_param ; union sctp_addip_param_t <S2SV_ModEnd> param_hdr ; __u32 <S2SV_ModStart> __u32 serial ; sctp_addiphdr_t * addiphdr ; sctp_addiphdr_t * addiphdr ; __u32 serial_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> lock_sock ( sk,0
315,<S2SV_ModStart> ; break ; # ifdef CONFIG_KVM_XICS r = is_xics_enabled ( kvm ) ; break ; # endif # ifdef CONFIG_KVM_XICS_64 r = is_xics_enabled ( kvm ) ; break ; # endif # ifdef CONFIG_KVM_XICS_32 case KVM_XICS_32_64 : case KVM_XICS_32_64 : case KVM_XICS_32_64 : case KVM_XICS_32_64 : r = is_xics_enabled ( kvm ) ; break ; # endif # ifdef CONFIG_KVM_XICS_64 r = is_xics_enabled ( kvm ) ; break ; # endif # ifdef CONFIG_KVM_XICS_32 case KVM_XICS_32_64 : case KVM_XICS_32_64 : case KVM_XICS_32_64 : case KVM_XICS_32_64 : case KVM_XICS_32_64 : r = is_xics_enabled ( kvm ) ; break ; # endif # ifdef CONFIG_KVM_,0
316,"<S2SV_ModStart> msicap ; memset ( & msicap, 0, sizeof ( msicap ) ) ;",0
317,"<S2SV_ModStart> goto response_done ; } memcpy ( kvp_data -> data. key, key_name, sizeof ( * kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; kvp_data -> data. key_type = REG_SZ ; memcpy ( kvp_data -> data. key_value, sizeof ( * kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; memcpy ( kvp_data -> data. value_value, sizeof ( * kvp_data -> data. value ) ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; kvp_data -> data. value_type = REG_SZ ; icmsghdrp -> status = HV_S_OK ; <S2SV_ModEnd>",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; return - EBUSY ; } <S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; return - EBUSY ; },0
319,"<S2SV_ModStart> return ; } if ( img -> bits_per_sample > OPJ_CLRSPC_SRGB_BITS ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> bits_per_sample > OPJ_CLRSPC_SRGB_BITS ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> bits_per_sample > OPJ_CLRSPC_SRGB_BITS ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> bits_per_sample > OPJ_CLRSPC_SRGB_BITS ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb",0
320,"<S2SV_ModStart> * mbuf = NULL ; <S2SV_ModEnd> long err = <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> size_t ctrls_size = <S2SV_ModStart> case _IOC_NONE : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; <S2SV_ModStart> case _IOC_READ : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; break ; case _IOC_WRITE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; break ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_READ ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls =",0
321,"<S2SV_ModStart> ; } if ( server. replstate == REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; } if ( server. replstate == REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; } if ( server. replstate == REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> ) { return usb_control_msg ( dev -> udev, <S2SV_ModEnd> RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE <S2SV_ModStart>, indx, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; } break ; case RESPONSE_DESTROY : { gtk_widget_destroy ( GTK_WIDGET ( parameters -> parent_window ) ) ; gtk_widget_destroy ( GTK_WIDGET ( parameters -> parent_window ) ) ; gtk_widget_destroy ( GTK_WIDGET ( parameters -> parent_window ) ) ; gtk_widget_destroy ( GTK_WIDGET ( parameters -> parent",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, * data ) ; -- urb -> actual_length ; } else { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; ++ data ; }",0
325,"<S2SV_ModStart> * server, const <S2SV_ModStart> ) ; list_for_each_entry_safe ( ses, tmp, & server -> smb_ses_list, smb_ses_list ) { if (! strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses -> <S2SV_ModStart> ses_count ; } <S2SV_ModEnd> write_unlock ( &",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> cfg, 0, sizeof ( ctx -> cfg ) ) ; <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > 1 || ( cfg -> g_h > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; else if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; else if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; else if ( ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> height <S2SV_blank> or <S2SV_blank> pass <S2SV_blank> after <S2SV_blank> initialization",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( ptr,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! ( ptr = r_fs_name ( core -> fs, core -> offset ) ) ) eprintf ( ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ;",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> 0 ) { ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from",0
329,<S2SV_ModStart> new ) { <S2SV_ModEnd> keyring = keyring_alloc,0
330,"<S2SV_ModStart> = 0 ; size_t scanned = 0 ; <S2SV_ModStart> scanned ++ ; if ( scanned >= ( size_t ) 0U ) { scanned = ( size_t ) 0U ; readnbd = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t )",0
331,"<S2SV_ModStart> & orig ) ; if ( copy == NULL ) { mrb_free ( mrb ) ; return NULL ; } <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf""",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif,0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof",0
335,"<S2SV_ModStart> int rc ; int load_segment_descriptor ; load_segment_descriptor = get_segment_descriptor ( ctxt, sel, VCPU_SREG_ESR ) ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_ESR ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) return X86EMUL_CONTINUE ; load_segment_descriptor = get_segment_descriptor ( ctxt, sel, VCPU_SREG_ESR ) ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_ESR ) ) return X86EMUL_CONTINUE ; ctxt -> _eip = 0 ; memcpy ( & ctxt -> _eip, ctxt -> src. val + ctxt -> op_bytes, 2 ) ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_ESR ) ) return X86EMUL_CONTINUE ; ctxt -> _eip = 0 ; memcpy ( & ctxt -> _eip, ctxt -> src. val + ctxt -> op_bytes, 2 ) ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2 <S2SV_blank> band_prec <S2SV_blank> width <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2 <S2SV_blank> band_prec <S2SV_blank> width <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( log2_band_prec_height < 0 || log2_band_prec_height > log2_band_prec_height ) { av_log ( avctx, AV_LOG_ERROR, ""log2 <S2SV_blank> band_prec <S2SV_blank> height <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_height ) ; return AVERROR_INVALIDDATA ; }",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_FileExists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return ; } <S2SV_ModStart> "".txt"" ) ; if (! COM_FileExists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return ; }",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> ) ) ; if ( got_table ) { ut32 offset ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size ) { goto out_error ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_",0
339,"<S2SV_ModStart> info -> si_code < 0 <S2SV_ModEnd> ) return - <S2SV_ModStart> - EPERM ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ),",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash && Z_TYPE_P ( classes ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy (",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,"<S2SV_ModStart> ; tmp_strsize = ( <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) * tmp_strsize ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG",0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> cmdline_syslog_name ) ; if ( cmdline_syslog_name == NULL || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ 0 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1 ] == '\\0' || cmdline_syslog_name [ Ustrlen ( cmdline_syslog_name ) - 1,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( slash + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, maxh, max ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart> maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxw ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ;",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
350,"<S2SV_ModStart> ; ptr = kex -> peer ; if ( ( r = sshbuf_put ( kex -> peer, ptr, sizeof ( kex -> peer ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh,",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,<S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> == EOF ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError,0
353,"<S2SV_ModStart> 0 ; char <S2SV_ModEnd> lbase [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> ltest [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> strbase [ 256 <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strtest ) ; assert ( nbase!= 255 && ntest!= 255 ) ; if ( nbase!= 255 || ntest!= 255 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" )",0
354,"<S2SV_ModStart> intf ) { struct <S2SV_ModStart> int ret ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) { ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; } else { ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
355,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
356,"<S2SV_ModStart>, i, JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", i, JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, """,0
357,"<S2SV_ModStart> - EINVAL ; if ( e -> target_offset!= e -> next_offset ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p <S2SV_blank> size <S2SV_blank> %u\\n"", e, e -> target_offset ) ; return - EINVAL ; } for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) { if (! check_hook ( e ) ) { pr_debug ( ""Hook <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } newinfo -> hook_entry [ h ] = hook_entries [ h ] ; newinfo -> underflow [ h ] = underflows [ h ] ; } for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) { if (! check_hook ( e ) ) { pr_debug ( ""Hook <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; }",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" )",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ; kfree ( q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int from, to ; if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } else if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; i_size_write ( inode, offset + to ) ; mark_inode_dirty ( inode ) ; brelse ( dibh ) ; out : return <S2SV_ModEnd> error ; }",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> ( load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } else { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ;",0
363,"<S2SV_ModStart> image_noffset ) { char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } else if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
364,"<S2SV_ModStart
365,"<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) { kfree ( state ) ; state = kzalloc ( sizeof ( struct cx23888_ir_state ), GFP_KERNEL ) ; if ( state == NULL ) { kfree ( state ) ; return - ENOMEM ; } state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; memset ( service_name_tlv, 0, sizeof ( * service_name_tlv ) ) ; <S2SV_ModStart> miux_tlv_length ) ; memset ( miux_tlv, 0, sizeof ( * miux_tlv ) ) ; <S2SV_ModStart> rw_tlv_length ) ; memset ( rw_tlv, 0, sizeof ( * rw_tlv ) ) ;",0
367,"<S2SV_ModStart> ssh * ssh, const struct monitor_options * options <S2SV_ModStart>. compression ) mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; if ( options.",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_",0
369,<S2SV_ModStart> * chan ; jas_uint16 <S2SV_ModEnd> numchans ; if,0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value |= TJA1100_EXTENDED_CTRL_",0
371,"<S2SV_ModStart> ) ) { struct ip_options_rcu * opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; ipc = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; if ( ipc == NULL ) goto out ; opt = rcu_dereference_protected ( net -> ipv4. ip_options, sock_owned_by_user ( sk ) ) ; if ( opt -> flags & IPSKB_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32",0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { crypto_free_blkcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; <S2SV_ModEnd> bprm -> cred <S2SV_ModStart> -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLE",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> ) ) { if ( dlen < 1 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } },0
378,"<S2SV_ModStart> 1 ) ) { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } } else { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else { if ( bt_tag_is_in_rq ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } } else { fn ( rq, data, reserved ) ; } } }",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res =,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> ; if (! skb_is_linear <S2SV_ModEnd> ( skb ),0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_SP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_CP ) | ( flags & GRE_KP ) ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ;",0
384,"<S2SV_ModStart> ; if ( imagelength > TIFF_MAX_IMG_SIZE ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%lu)"", TIFF_MAX_IMG_SIZE ) ; exit ( - 1 ) ; } <S2SV_ModStart> ; if ( imagewidth > TIFF_MAX_IMG_SIZE ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the maximum <S2SV_blank> allowed <S2SV_blank> (%lu)"", TIFF_MAX_IMG_SIZE ) ; exit ( - 1 ) ; } <S2SV_ModStart> ; if ( imagewidth > TIFF_MAX_IMG_SIZE ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%lu)"", TIFF_MAX_IMG_SIZE ) ; exit ( - 1 ) ; } <S2SV_ModStart> ; if ( imagewidth > TIFF_MAX_IMG_SIZE ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%lu)"", TIFF_MAX_IMG_SIZE ) ; }",0
385,"<S2SV_ModStart> 'u' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""gid"", optional_argument, NULL, 'G' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int modify_bar_registration ( <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return <S2SV_ModEnd> 0 ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> ; if ( tmp && tmp == cluster -> cl_has_local && <S2SV_ModEnd> cluster -> cl_local_node <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmp &&! cluster -> cl_has_local ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = node -> nd_num ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = node -> nd_num ; } else { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_,0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (",0
389,"<S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, <S2SV_ModStart>, buffsize, 1 <S2SV_ModEnd>, & snes_op [ <S2SV_ModStart>, buffsize, 1 <S2SV_ModEnd>, & snes_op [ <S2SV_ModStart>, 1, & snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ snes_op [ sn",0
390,"<S2SV_ModStart> = transport -> asoc ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if ( mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; }",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; goto trunc ; } ND_TCHECK ( lshp -> ls_length ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,<S2SV_ModStart> ; if ( pbody -> ds_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> -> ds_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> -> ds_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> tim_present <S2SV_ModStart> -> tim_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> -> ds_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> ds_present <S2SV_ModStart> -> ds_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody ->,0
396,"<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; } else { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } pipe_buf_get ( ipipe, ibuf ) ; if ( obuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; } else { * obuf = * obuf ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } if ( obuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF",0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret, err ; mm_segment_t old_fs ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; old_fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_id",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""proc""",0
400,"<S2SV_ModStart> ; } } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), (",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> ) { nsc_encode_subsampling <S2SV_ModEnd> ( context )",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS,1
404,<S2SV_ModStart> == 1 ) { size_t columns = <S2SV_ModEnd> ( image -> <S2SV_ModStart> / 8 ) ; return ( columns * GetPSDPacketSize ( image ) ) ; } else { return ( image -> columns * GetPSDPacketSize ( image ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
405,"<S2SV_ModStart> 0 ) { if ( p_dev -> dev_status == BTHH_CONN_STATE_UNKNOWN ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> dev_status ) ; p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ) ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; } else { if ( p_dev -> dev_status == BTHH_CONN_STATE_UNKNOWN ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> dev_status ) ; p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ) ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; } else { if ( p_dev -> dev_status == BTHH_CONN_STATE_UNKNOWN ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank>",0
406,"<S2SV_ModStart> -> ctrl_intf -> cur_altsetting ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> ctrl <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> data_intf -> cur_altsetting ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> ctrl <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> struct device * dev ; dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 1 || pirlvl -> prcwidthexp,0
409,"<S2SV_ModStart> target_enc ) { cpat = ( UChar * ) conv ( ci -> pattern_enc, ci -> target_enc, pattern, pattern_end ) ; cpat_end = ( UChar * ) conv ( ci -> pattern_enc, ci -> target_enc, cpat, cpat_end ) ; if ( IS_NULL ( cpat ) ) { r = ONIGERR_MEMORY ; goto err2 ; }",0
410,"<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t depth, <S2SV_ModEnd> unsigned char * <S2SV_ModStart>, ssize_t x, size_t <S2SV_ModEnd> y, ExceptionInfo <S2SV_ModStart> exception ) { <S2SV_ModEnd> register Quantum index <S2SV_ModStart> ; ssize_t bit <S2SV_ModEnd> ; ssize_t x <S2SV_ModStart> ; register Quantum index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> 1 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } if ( <S2SV_ModEnd> image -> columns <S2SV_ModStart> % 8 )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> const u_char * <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip",0
412,"<S2SV_ModStart>, ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> X86EMUL_MODE_PROT32 ; else usermode = X86EMUL_MODE_PROT64 ; cs. dpl = 3 ; ss. dpl = 3 ; ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_DS, & msr_data ) ; switch ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; break ; case X86EMUL_MODE_PROT16 : cs_sel = ( u16 ) ( msr_data + 16 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_S",0
413,"<S2SV_ModStart> dev ) ; if ( pdev -> driver_override ) { strncpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ; return strlen ( buf ) ; } else { strncpy ( buf, ""%s\\n"", pdev -> name ) ; return strlen ( buf ) ; }",0
414,"<S2SV_ModStart> ; BIO * tmpout = NULL ; BIO_set_mem_eof_return ( tmpout, 0 ) ; if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart>. st_mode & ( S_IRUSR | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sin6_port ) ; protoname = ""unix6"" ; break ; case AF_UNIX : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] =",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; DEB ( printk ( ""sequencer_write(dev=%d, <S2SV_blank> count=%d)\\n"", dev, count ) ) ; <S2SV_ModStart> out ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } else { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } else { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } else { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_file,",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; if ( manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ) { r = manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ; if ( r < 0 ) goto fail ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t x9 = input [ 8 ] ; tran_high_t x10 = input [ 3 ] ; tran_high_t x12 = input [ 2 ] ; tran_high_t x13 = input [ 4 ] ; tran_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # endif return flags & mask ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFFHorAcc16_t <S2SV_ModEnd> ( tif,",0
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,"<S2SV_ModStart> ; length = avio_rl16 ( pb ) ; if ( length!= 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; length = avio_rl16 ( pb ) ; if ( length!= 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length!= 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length!= 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length!= 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length!= 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA",0
430,"<S2SV_ModStart> * fpath = NULL, * cgdir = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ;",0
431,"<S2SV_ModStart> MNT_MARKED ) ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) { mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; } else { mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; } <S2SV_ModStart> flag & CL_UNPRIVILEGED ) &&! list_empty ( & old -> mnt_expire ) ) { list_add_tail ( & mnt -> mnt. mnt_instance, & sb -> s_mounts ) ; unlock_mount_hash ( ) ; mnt -> mnt. mnt_parent = mnt ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt. mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt.",0
432,<S2SV_ModStart> trans = & rds_loop_transport <S2SV_ModEnd> ; } if,0
433,"<S2SV_ModStart> * rsize >= 104 <S2SV_ModEnd> && rdesc [ <S2SV_ModStart> [ 107 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 111 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 107 ] = rdesc [ 104 ] = 0x26 ; rdesc [ 105 ] = rdesc [ 107 ] = 0x80 ; rdesc [ 106 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 107 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 111 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" )",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
435,"<S2SV_ModStart> ; } } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { dbg ( ""AUX <S2SV_blank> timeout, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; }",0
436,"<S2SV_ModStart> ndo_vflag ) ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> * newName, int udfLen, uint8_t * fidName, int fidNameLen <S2SV_ModStart> newIndex ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> static <S2SV_ModStart> newIndex ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> static <S2SV_ModStart> newIndex ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> newIndex ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> cm = & cpi -> td. <S2SV_ModEnd> common ; const <S2SV_ModStart> ] ; int bw, bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, hbs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8 + hbs * mis, no_pred_segcounts, temporal_predictor_count, t_unpred_",0
439,<S2SV_ModStart> break ; if ( <S2SV_ModEnd> c -> flags <S2SV_ModStart> CLIENT_CLOSE_AFTER_REPLY ) break ; if (! c -> reqtype ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break,0
440,<S2SV_ModStart> = 0 ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_READ ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ;,0
441,"<S2SV_ModStart> * s ; <S2SV_ModEnd> s = DSA_SIG_new <S2SV_ModStart> ; if ( d2i_DSA_SIG <S2SV_ModEnd> ( & s <S2SV_ModStart>, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( s == NULL ) { DSA_SIG_free ( s ) ; return ( ret ) ; } <S2SV_ModEnd> return ( ret",0
442,"<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> ( out, size ) ; out -> gd_free ( out ) ; return rv ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; oe_addrinfo_t <S2SV_ModEnd> * p = <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p -> ai_flags, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p -> ai_family, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p -> ai_socktype, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, & p -> ai_addrlen, <S2SV_ModEnd> NULL, & <S2SV_ModStart>, & p -> ai_addrlen, <S2SV_ModEnd> NULL, & <S2SV_ModStart>, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_errno ) ; } if ( retval == - 1 || oe_errno!= OE_",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> ] ) ; if ( rctx -> image_width > rctx -> image_height ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> image <S2SV_blank> size"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, __u16 indx, __u16 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
449,"<S2SV_ModStart> * body, asdl_seq * type_comments <S2SV_ModStart> ; return p ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
450,<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( dev -> port ) ;,0
451,"<S2SV_ModStart> * src, tran_low_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> 4 ; # endif # if USE_PARTIAL_COPY int row, col, active_end ; # else int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; if ( active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } active_map += mb_cols ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) <<",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_signature ( context, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_SIGNATURE"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } code = verify_s4u_x509_user_signature ( context, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_SIGNATURE"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_signature",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> outbuf ) ; scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 1 ) goto illegal",0
455,<S2SV_ModStart> cur_pic. f || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> int off ) { struct rds_header * hdr ; <S2SV_ModStart> 0 ) ; hdr = & rm -> m_inc. i_hdr ; if ( hdr_off || sg || off ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return 0 ; } <S2SV_ModEnd> BUG_ON ( hdr_off <S2SV_ModStart> ) + be32_to_cpu ( hdr -> m_inc. i_hdr. h_len ) ; hdr = & rm -> m_inc. i_hdr ; if ( hdr_off || sg || off ) { rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & hdr, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & rm -> m_inc ) ; rds_send_drop_acked ( conn, be64_to_cpu ( hdr -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc ) ; rds_inc_put ( & rm -> m_inc ) ; rds_send_drop_acked ( conn,",0
457,<S2SV_ModStart> buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; },0
458,<S2SV_ModStart> ; if ( key -> type -> type_flags & KEY_FLAG_NEGATIVE ) { ret = - EINVAL ; goto error2 ; } if (,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK2 <S2SV_ModEnd> ( * mh <S2SV_ModStart> 8 ) ; ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( * mh, hlen + 4 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING ;,0
461,"<S2SV_ModStart> hmi_data ; uint32_t <S2SV_ModEnd> hmi_bpm = 0 <S2SV_ModStart> ; } * note = NULL ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ;",0
462,<S2SV_ModStart> id ; * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_parent -> i_iget5_block ; fh32 [ 2 ] = ( __u32 ) ei -> i_iget5_parent -> i_iget5_offset ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_parent -> i_iget5_block ; fh32 [ 2 ] = ( __u32 ) ei -> i_iget5_parent -> i_iget5_offset ; fh32 [ 3 ] = ( __u32 ) ei -> i_iget5_parent -> i_iget5_parent -> i_iget5_block ; fh16 [ 3 ] = ( __u16 ) ei -> i_iget5_parent -> i_iget5_offset ; fh32 [ 4 ] = ( __u32 ) ei -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_generation ;,0
464,"<S2SV_ModStart> status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time && isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) {",0
466,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK",0
467,<S2SV_ModStart> case BT_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } else { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } else { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } else { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( ( char * ) bdname. val ) ; } else { BT_DmSetDeviceName ( ( char *,0
468,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageVirtualPixelMethod ( image, canvas_image, BlackVirtualPixelMethod, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
469,"<S2SV_ModStart> : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = luaL_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } } <S2SV_ModEnd> } <S2SV_null>",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data, <S2SV_ModStart> deadline ) ; # else res = ctx -> iface -> dec. decode ( get_alg_priv ( ctx ) -> alg_priv, data, data_sz, user_priv, deadline ) ; # else res = ctx -> priv -> dec. decode ( get_alg_priv ( ctx ) -> alg_priv, data, data_sz, user_priv, deadline ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_FLAG_HIGHBITDEPTH ) res = ctx -> priv -> dec. decode ( get_alg_priv ( ctx ) -> alg_priv, data, data_sz, user_priv, deadline ) ; # else res = ctx -> priv -> dec. decode ( get_alg_priv ( ctx ) -> alg_priv, data, data_sz, user_priv, deadline ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & VPX_FLAG_HIGHBITDEPTH ) res = VPX_CODEC",0
474,"<S2SV_ModStart> int ret ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } par -> extradata_size = 0 ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_log ( s, AV_LOG_DEBUG, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %p <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata, par -> extradata_size ) ;",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EINVAL ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > ISOFS_MAX_DE_NAME",0
476,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length )",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sendClean ( outputbuffer ) ;",0
478,<S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ; <S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ; <S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ; <S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ;,0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank>",0
480,<S2SV_ModStart> self ) { if ( self -> dict ),0
481,"<S2SV_ModStart> SQL_DROP ) ; return 0 ; } if ( SQLStrEndsWith ( szSepLine, cDelimiter )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLStrEndsWith <S2SV_blank> \'\\n"" ) ; SQLFreeStmt ( hStmt, SQL_DROP ) ; return 0 ; } <S2SV_ModStart> ) ; return SQLStrEndsWith ( szSepLine, cDelimiter )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLStrEndsWith <S2SV_blank> \'\\n"" ) ; SQLFreeStmt ( hStmt, SQL_DROP ) ; return 0 ; } if ( SQLStrEndsWith ( szSepLine, cDelimiter )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLStrEndsWith <S2SV_blank> \'\\n"" ) ; return 0 ; } if ( SQLStrEndsWith ( szSepLine, cDelimiter )!= SQL_",0
482,<S2SV_ModStart> - EFAULT ; if ( offset + len > sizeof ( * data ) ) return - EINVAL ;,0
483,"<S2SV_ModStart> argv [ ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ;",0
484,<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> cpuctx_lock ) ; perf_event_init ( & cpuctx -> event ) ; <S2SV_ModStart> type = cpu_context ; perf_event_init ( & cpuctx -> <S2SV_ModStart> cpuctx_lock ) ; perf_event_init ( & cpuctx -> <S2SV_ModStart> cpuctx_lock ) ; perf_event_init ( & cpuctx -> <S2SV_ModStart> cpuctx_lock ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_enable ( & cpuctx -> event ) ; perf_event_disable ( & cpuctx -> event ) ; perf_event_disable ( & cpuctx -> event ) ; perf_event_disable ( & cpuctx -> event ) ; perf_event_disable ( & cpuctx -> event ) ; perf_event_disable ( & cpuctx -> event ) ;,0
486,"<S2SV_ModStart> len, struct iovec * iov <S2SV_ModEnd> ) { if <S2SV_ModStart> 1 ; return __aio_setup_single_vector ( kiocb, rw, buf, len, iovec, nr_segs ) <S2SV_ModEnd> ; } <S2SV_null>",0
487,"<S2SV_ModStart> ext4_group_t flex_group ; ext4_group_t <S2SV_ModEnd> groups_per_flex = 0 <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_groups_count < 2 ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank> groups"", sbi -> s_groups_count ) ; goto failed ; } groups_per_flex = 1 << sbi -> s_es -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } flex_group_count = ( sbi -> s_groups_count + groups_per_flex - 1 ) / groups_per_flex ; size = ext4_kvzalloc ( size, GFP_KERNEL ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank> groups"", sbi -> s_groups_count ) ; goto failed",0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if (,0
489,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
490,"<S2SV_ModStart> { if ( <S2SV_ModEnd> EmptyString ( cli_sslclifp <S2SV_ModStart> cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] <S2SV_ModEnd> ) ; }",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a | pb_80 ) & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ; } else { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a | pb_80 ) & pb_7f ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80,0
492,"<S2SV_ModStart> -> data ; size_t forward_matches = match_length + callback_args -> forward_matches ; <S2SV_ModStart> forward_matches ; } if ( forward_matches < 0 ) { FAIL_ON_ERROR ( yr_arena_write_data ( callback_args -> context -> matching_strings_arena, NULL, sizeof ( YR_STRING ), NULL ) ) ; } else { FAIL_ON_ERROR ( yr_arena_allocate_memory ( callback_args -> context -> matches_arena, sizeof ( YR_MATCH ), ( void * * ) & new_match ) ) ; } if ( forward_matches < 0 ) { FAIL_ON_ERROR ( yr_arena_write_data ( callback_args -> context -> matching_strings_arena, NULL, sizeof ( YR_STRING ), NULL ) ) ; } else { FAIL_ON_ERROR ( yr_arena_allocate_memory ( callback_args -> context -> matches_arena, sizeof ( YR_MATCH ), ( void * * ) & new_match ) ) ; } if ( forward_matches < 0 ) { FAIL_ON_ERROR ( yr_arena_write_data",0
493,"<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; }",0
494,"<S2SV_ModStart> { if ( <S2SV_ModEnd>! bitstream_read_bit ( <S2SV_ModStart> ) ) { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { hc -> bits [ hc -> current ] = prefix ; hc -> lengths [ hc -> current ] = 0 ; } else { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return A",0
495,<S2SV_ModStart> return err ; <S2SV_ModEnd> } else {,0
496,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return",0
497,<S2SV_ModStart> int hstartcol ; register jas_int <S2SV_ModEnd> m ; if <S2SV_ModStart> 2 ) { m = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ ( 2 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; },0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)is/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank>",0
501,"<S2SV_ModStart> 1 ; ) ; <S2SV_ModStart> ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hash",0
502,"<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { up_write ( & sb -> s_umount ) ; err = do_remount_mount ( path, flags, mnt_flags, data, 1 ) ; if ( err ) return err ; down_write ( & sb -> s_umount ) ; if ( flags & MS_RDONLY ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data, 0 ) ; if (! err ) { lock_mount_hash ( ) ; mnt -> mnt. mnt_flags |= mnt -> mnt. mnt_flags & ~ MNT_USER_SETTABLE_MASK ; mnt -> mnt. mnt_flags &= ~ MNT_USER_SETTABLE_MASK ; unlock_mount_hash ( ) ; mnt -> mnt. mnt_flags |= mnt -> mnt. mnt_flags & ~ MNT_USER_SETTABLE_MASK ; }",0
503,"<S2SV_ModStart> * skb ; struct sockaddr_ll <S2SV_ModEnd> sll ; int <S2SV_ModStart> copied, err ; msg -> msg_namelen = 0 <S2SV_ModStart> out_free ; } sll = msg -> msg_name ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> if ( serial -> num_ports < 1 || serial -> port [ 0 ] -> bulk_out_endpointAddress == 0 || serial -> port [ 1 ] -> bulk_out_endpointAddress == 0,0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> ds64hdr, datahdr <S2SV_ModStart> riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total",0
507,"<S2SV_ModStart> ) ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart>, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, total_len, cmsg_ptr, len ) ; if ( err ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ;",0
508,<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_ext = GFS2_I ( inode ) ; struct gfs2_inode * ip_ext = GFS2_I ( inode ) ;,0
509,"<S2SV_ModStart> codec_iface_name ( global -> codec ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name ( global -> codec -> interface ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12",0
510,"<S2SV_ModStart> return FALSE ; ret = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; if ( ret ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, NULL, flip ) ) return FALSE ; ret = <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; if ( ret ) return FALSE ; if ( ret ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, flip ) ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ; ret = nsc_context_initialize (",0
511,"<S2SV_ModStart> ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; else value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; else value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; else value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; else value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; else value = xmlDictLookup ( ctxt",0
512,"<S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname )",0
513,<S2SV_ModStart> b ) { <S2SV_ModEnd> fv -> b <S2SV_ModStart> fv -> b ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! SFClearAutoSave ( sf ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! SFClearAutoSave ( sf ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 ) return ( false ) ; } else if,0
514,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
515,<S2SV_ModStart> timr ) ; <S2SV_ModEnd> if ( when <S2SV_ModStart> -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when > timespec_to_ns ( new_setting -> it_interval ) ) when = timespec_to_ns ( new_setting -> it_interval ) ; if ( when > timespec_to_ns ( n ) ) when = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; else when = 0 ; if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; when = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; else when = 0 ; } <S2SV_ModEnd> if ( flags,0
516,"<S2SV_ModStart> ) ) { if ( js_regexec ( re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, - 1 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
517,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModStart> ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } break ; case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest )",0
518,"<S2SV_ModStart>, multipart_media ; <S2SV_ModEnd> struct evbuffer * <S2SV_ModStart> = NULL ; size_t content_length = 0 ; int code = 500, fd = - 1, nranges, ret ; const char * errstr = NULL ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 1 ) { <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( nranges = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL",0
519,"<S2SV_ModStart> = FALSE ; ksz8851WriteReg ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart>, KSZ8851_IER, 0 <S2SV_ModEnd> ) ; isr <S2SV_ModStart>, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_LCIS ) ; } if ( ( isr & KSZ8851_ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_IER, ier",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> * wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_null> <S2SV_null>",0
521,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,"<S2SV_ModStart> int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { spin_lock ( & cancel_lock ) ; list_add_rcu ( & ctx -> clist, & cancel_list ) ; spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } } else if ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock",0
525,"<S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; return NULL ; } <S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_8_TO_16 ( j ) ) ; } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else if ( nElements > 256 ) { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16",0
526,"<S2SV_ModStart> ( dev_name, LOOKUP_FOLLOW <S2SV_ModEnd>, & path <S2SV_ModStart> path ) ) { error = - EINVAL ; goto out ; } if ( path. dentry -> d_inode!= dir -> d_inode ) { error = - EINVAL ; goto out ; } if ( path. d_inode -> i_uid!= dir -> d_inode -> i_uid ) { error = - EPERM ; goto out ; } if ( path. dentry -> d_inode -> i_uid!= dir -> d_inode -> i_uid ) { error = - EPERM ; goto out ; } if ( path. d_inode!= dir -> d_inode ) { error = - EINVAL ; goto out ; } if ( path. d_inode -> i_uid!= dir -> d_inode -> i_uid ) { error = - EPERM ; goto out ; } if ( path. dentry -> d_inode -> i_gid!= dir -> d_inode -> i_gid ) { error = - EPERM ; goto out ; } if ( path. d_inode -> i_uid!= dir ->",0
527,"<S2SV_ModStart> ; if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Invalid <S2SV_blank> message/response <S2SV_blank> found\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Invalid <S2SV_blank> message/response <S2SV_blank> found\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > buf_size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Invalid <S2SV_blank> message/response <S2SV_blank> found\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > buf_size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Invalid <S2SV_blank> message/response <S2SV_blank> found\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > buf_size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Invalid <S2SV_blank> message/response <S2SV_blank> found\\n"", __func",0
528,"<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { retval_stringl ( replaced, ( int ) new_len, 0 ) ; } else { retval_stringl ( replaced, ( int ) new_len, 0 ) ; }",0
529,"<S2SV_ModStart> ; if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_RSA ( peerkey, localrsa ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! <S2SV_ModStart> peerec ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) ) { if (! BIO_set1_RSA ( peerkey, localrsa ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL )",0
530,"<S2SV_ModStart> ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ;",0
531,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4 <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> set_modeinfo_offsets ( cm <S2SV_ModStart> mi_col ) ; * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd",0
532,"<S2SV_ModStart> name ) ; if ( check_submodule_name ( name ) < 0 ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; free ( name ) ; return 0 ; } if ( check_submodule_name ( name ) < 0 ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return 0 ; }",0
533,"<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_x, pixel_y ; int pixel_width = s -> frame. width ; int pixel_height = s -> frame. height ; int block_width = s -> frame. width ; int block_height = s -> frame. height ; int block_rows = s -> frame. rows [ 0 ] ; int block_cols = s -> frame. rows [ 1 ] ; int block_rows = s -> frame. rows [ 0 ] ; int block_rows = s -> frame. rows [ 1 ] ; int block_cols = s -> frame. rows [ 0 ] ; int row_rows = s -> frame. rows [ row_inc ] ; int row_cols = s -> frame. rows [ row_inc ] ; int row_cols = s -> frame. rows [ row ] ; int row_cols = s -> frame. rows [ row ] ; int row_cols = s -> frame. rows [ row ] ; int row_cols = s -> frame. rows [ row ] ; int row_cols = s -> frame. rows [ row ] ; int row_cols = s -> frame. rows [ row ] ; int row_cols",0
534,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
535,"<S2SV_ModStart> * ptype ; const struct gre_base_hdr * greh2 ; struct gre_base_hdr * greh3 ; unsigned int hlen ; if ( skb_gro_header_hard ( skb, hlen ) ) { greh = skb_gro_header_fast ( skb, hlen ) ; greh = skb_gro_header_slow ( skb, hlen, off ) ; if (! greh ) goto out_unlock ; } type = greh -> protocol ; if ( ( greh -> flags & GRE_KEY ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_",0
536,"<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> maxrows_ = numrows ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> maxrows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for",0
537,"<S2SV_ModStart> } else { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ;",0
538,"<S2SV_ModStart> KEY_NEED_READ ) ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EBUSY ; goto error2 ; } ret = key_permission ( key_ref, KEY_READ ) ; if ( ret == 0 ) goto error2 ; if ( ret!= - EOPNOTSUPP ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EFAULT ; goto error2 ; } if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; } up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EFAULT ; goto error2 ; }",0
539,<S2SV_ModStart> -> u4_first_slice_in_pic ; if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else { ps_dec -> u1_first_slice_in_pic = 0 ; } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 0 ; } else { ps_dec -> u1_first_slice_in_pic = 1 ; } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec,0
540,"<S2SV_ModStart> ; dst_known =! src_known <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case BPF_ADD : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = 0 ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_",0
541,"<S2SV_ModStart> ; if ( direntry -> d_inode!= NULL ) { cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; } else { cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", direntry, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; } else { cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x",0
542,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX... VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev,0
543,"<S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; } if (",0
544,"<S2SV_ModStart> = 1 ; if ( uri [ strlen ( uri ) - 1 ] == '\\0' ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! options ) av_dict_copy ( & s -> chained_options, * options, 0 ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! options ) av_dict_free ( & s -> chained_options ) ; return AVERROR ( ENOMEM ) ;",0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == 0 ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( rcu_dereference_protected ( sk -> inet_opt, sock_owned_by_user ( sk ) ) == 0 ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( sk -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIES",0
546,"<S2SV_ModStart> char * in, size_t length <S2SV_ModStart> += 4 ; if ( length < 4 ) { return - 1 ; } <S2SV_ModStart>!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 4 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( ( base64val ( digit3 ) >> 4 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } else { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( length < 2 ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( ( base64val ( digit3 ) >> 4 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, len, cur_len <S2SV_ModEnd> ; ssize_t copied <S2SV_ModStart> ) { copied = min_t ( size_t, len, ( size_t ) nr_pages - i ) ; if ( copied > len ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart> ) { copied = min_t ( size_t, copied, ( size_t ) nr_pages - i ) ; if ( copied > ( size_t ) cur_len ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart> copied = min_t ( size_t, len, ( size_t ) nr_pages - i ) ; if (! rc ) { cifs_writedata_free ( wdata ) ; break ; } tmp = cifs_writedata_alloc ( nr_pages, cifs_uncached_writev_complete ) ; if (! tmp ) { kfree ( tmp ) ; break ; } tmp = cifs_writedata_alloc ( nr_pages, cifs_uncached_writev_complete ) ; if (! tmp ) { kfree ( wdata ) ; break",0
549,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> int number_of_frames, number_of_keyframes, encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> ; encode_frame_count = svc_ctx <S2SV_ModEnd> -> encode_frame_count ; <S2SV_ModStart> ( svc_ctx ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ], ( double ) si -> bytes_sum [ i ] )",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { S2SV_null> <S2SV_ModEnd> * out ++ <S2SV_ModStart> } else { S2SV_null <S2SV_ModEnd> * out ++ <S2SV_ModStart> } else { S2SV_null <S2SV_ModEnd> * out ++ <S2SV_ModStart> } else { S2SV_null <S2SV_ModEnd> * out ++ <S2SV_ModStart> } else { S2SV_null <S2SV_ModEnd> * out ++ <S2SV_ModStart> } else { S2SV_null <S2SV_ModEnd> * out ++,0
552,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; rect. end_row = 0 ; rect. end_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; delta -> col -= first_blank_row - new_rows ; } else { VTermRect rect ; rect. start_row = 0 ; rect. end_row = 0 ; rect. start_col = 0 ; rect. end_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows",0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> int in_named_escape = <S2SV_ModStart> ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_stream_memobj_t <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> unsigned char * buf <S2SV_ModEnd> ; assert ( <S2SV_ModStart> bufsize >= 0 ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
556,"<S2SV_ModStart> (! LookupString <S2SV_ModEnd> ( symInterpretMatchMaskNames, <S2SV_ModStart> pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if (! istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ;",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> void pcrypt_free ( <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_instance_ctx * ctx,0
558,<S2SV_ModStart> ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> neigh ) ; if ( neigh == NULL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> neighbour <S2SV_blank> for <S2SV_blank> this <S2SV_blank> packet\\n"" ) ; return ; } <S2SV_ModStart> ) ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> neighbour <S2SV_blank> for <S2SV_blank> this <S2SV_blank> packet\\n"" ) ; return ; } ND_PRINTK ( 2, info, ""RA: <S2SV_blank> %s, <S2SV_blank> dev: <S2SV_blank> %s\\n"", in6_dev -> dev -> name, in6_dev -> addr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr, in6_dev -> addr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr. saddr.",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_len xfrm_replay_state_esn_len ; <S2SV_ModStart> rp ) ; xfrm_replay_state_esn_len = nla_len ( rp ) ; if ( xfrm_replay_state_esn_len ( replay_esn )!= xfrm_replay_state_esn_len ( up ) || xfrm_replay_state_esn_len ( up )!= xfrm_replay_state_esn_len ( replay_esn ) || xfrm_replay_state_esn_len ( up )!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( up )!= xfrm_replay_state_esn_len ( up ) || xfrm_replay_state_esn_len ( up )!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ;,0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table, <S2SV_ModStart>, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent == 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 0 ) ; } else { update_perf_cpu_limits ( ) ; }",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd>, mvsad_array [ <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> ) ) { if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; return 00 ; } <S2SV_ModStart> ) ) ; if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; return 00 ; } <S2SV_ModStart> ) ) ; if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; l_tmp_data = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * l_step_l ) ; if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; return 00 ; } if ( l_step_l > OPJ_J2K_MAXRLVLS ) { opj_free ( l_tmp_data ) ; l_tmp_data = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride,0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; const MODE_INFO * * mi = cm -> mi_grid_visible + idx_str ; const MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64,",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) <S2SV_ModStart> ibuf ) ; else if ( ibuf -> flags & PIPE_BUF_FLAG_OVERFLOW ) { obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_OVERFLOW ; } else { obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; },0
570,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; BUG_ON ( dh == NULL ) ; state = dccp_state_table [ ct -> proto. dccp. role [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; switch ( state ) { case CT_DCCP_REQUEST : break ; case CT_DCCP_REPLY : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; }",0
571,"<S2SV_ModStart> else { Fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY (",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; <S2SV_ModStart> ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; } else { spin_unlock_irq ( q -> queue_lock ) ; },0
573,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank>",0
574,"<S2SV_ModStart> ; krb5_data rspac ; if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; return KRB5_ERROR_INVALID_DATA ; } <S2SV_ModStart> ; if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; return KRB5_ERROR_INVALID_DATA ; } <S2SV_ModStart> ; if ( rspac!= NULL ) return KRB5_ERROR_INVALID_DATA ; if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; return KRB5_ERROR_INVALID_DATA ; } if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; return KRB5_ERROR_INVALID_DATA ; }",0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> = {. <S2SV_ModEnd> speed = ps <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; return,0
577,"<S2SV_ModStart> net * net <S2SV_ModEnd>, struct ip_options <S2SV_ModStart> * opt, size_t <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_NOP ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; }",0
578,<S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 <S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen2 ;,0
579,"<S2SV_ModStart> ; if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { LONG tmp = VERSION_NUM ; memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_GET_VOLUME_DRIVE_NUMBER : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { LONG tmp = 0 ; memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, sizeof ( LONG ) ) ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_IS_DEVICE_UNLOAD_DISABLED : if ( IoEnumerateDeviceObjectList ( TCDeviceObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DriverUnloadDisabled ; * ( int * ) Irp -> Io",0
580,"<S2SV_ModStart> ""Upgrade"" ) ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds * token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_",0
581,"<S2SV_ModStart> * findalldevs_if ; struct pcap_sockaddr * addr ; <S2SV_ModStart> 0 ; } memset ( & addr, 0, sizeof ( struct rpcap_sockaddr ) ) ; <S2SV_ModStart> -> description ) { memcpy ( & addr, d -> description, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, d -> name, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr",0
582,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( newpath, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", newpath ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( newpath, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die",0
583,"<S2SV_ModStart> ) ; for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 4 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index )",0
584,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2",0
585,"<S2SV_ModStart> sock * sk <S2SV_ModEnd>, int tstype <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr ->",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; } if ( in_cksum ( vec, 1 ) ) goto trunc ; <S2SV_ModStart> len ; } ND_TCHECK2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ;",0
588,"<S2SV_ModStart> ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, """" ) ; run_burl_normalize ( psrc,",0
589,"<S2SV_ModStart> &&! ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } <S2SV_ModEnd> rcu_read_unlock ( )",0
590,"<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { pr_err ( ""add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c"" ""return <S2SV_blank> value <S2SV_blank> of <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c"" ""return <S2SV_blank> value <S2SV_blank> of <S2SV_blank> add_bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add <S2SV_blank> bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add <S2SV_blank> bytes_l2_c: <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> add <S2SV_blank> bytes_l",0
591,"<S2SV_ModStart> & __GFP_ZERO ) memset ( addr, 0, size ) ;",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> ps_sps ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ps_sps ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ps_sps ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ps_sps ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ps_sps ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_t_t37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t37 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_,0
594,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
595,<S2SV_ModStart> ) ) ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; kfree ( dd -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( dd -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; kfree ( dd -> per_sdma ) ; kfree ( dd -> per_sdma ) ; },0
596,<S2SV_ModStart> device_data ; if ( dev ) device_put ( & dev -> dev ) ;,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n""",0
598,"<S2SV_ModStart> ; if ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) || ( * p == ',' ) ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) return ( DestroyImageList ( images ) ) ;",0
599,<S2SV_ModStart> } else { xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB,0
600,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MAX_HSTORE_PAIRS ) ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
602,<S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if (,0
603,"<S2SV_ModStart> query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf, query ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, query ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, query ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, query ) ; agoo_log_cat ( & agoo_req_cat, ""%s",0
604,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart>, error ) ; if ( dbus_name == NULL ) { g_log ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR ) ) ) ) ) ) ) ; g_log ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, (",0
606,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_errno ; fh_unlock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_errno ; fh_unlock ( fh ) ;",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( array, & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( array, & ue -> fop, sizeof ( struct filter_op ) ) ;",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_begin ( section -> entries ) ; enode = list_node ( enode ) ; fprintf ( fp, ""[%s]\\n"", entry -> key ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) )",0
609,"<S2SV_ModStart> ; switch ( <S2SV_ModEnd> pc -> componentType <S2SV_ModStart> case 1 : if ( pc -> lengthComponentIdent > 0 ) { if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, "".."", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 2 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= comp_len ; break ; }",0
610,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_TCHECK ( dp [ 0 ] ) ; <S2SV_ModStart> case NFSPROC_SETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ; goto trunc ; } ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""access-%u"", access_flags ) ) ) ; if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""access-%u"", proc ) ) ; goto trunc ;",0
611,<S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_TCHECK_32BITS <S2SV_ModStart> : ND,0
612,"<S2SV_ModStart> userData, target, ctxt -> instate <S2SV_ModStart> NULL ) ; ctxt -> instate = state ; return ; } if ( ( ctxt -> instate == XML_PARSER_PI ) && ( ctxt -> input == ctxt -> input ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } <S2SV_ModStart> ) ) ; if ( ( ctxt -> instate == XML_PARSER_PI ) && ( ctxt -> input == ctxt -> input ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } SKIP_BLANKS ; cur = CUR_CHAR ( l ) ; if (! IS_CHAR ( cur ) ) { xmlFatalErrMsgStr ( ctxt, XML_ERR_SPACE_REQUIRED, ""ParsePI: <S2SV_blank> PI <S2SV_blank> %s <S2SV_blank> space <S2SV_blank> expected\\n"", target ) ; }",0
613,"<S2SV_ModStart> bool slow ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ) ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; } else { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; } if (! inet_opt ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; } else { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS,",0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; tptr += sizeof ( rpki_rtr_pdu ) ; tlen -= sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ) { break ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; tlen -= pdu_",0
615,"<S2SV_ModStart> int tagval ; memset ( s -> p, 0, 4 ) ; <S2SV_ModStart> if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED | 2 ) ) return False ; if (! ber_in",0
616,"<S2SV_ModStart> int chars_processed ; int <S2SV_ModEnd> elt ; int <S2SV_ModStart> ; int data_size ; ND_TCHECK2 ( * cp, 1 ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i = * cp ++ ) & INDIR_MASK ) == INDIR_MASK ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; } if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL",0
617,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOCK_EXCL, args -> rmtblkno, args -> rmtblkcnt, args -> rmtvaluelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOCK_EXCL, args -> rmtvaluelen, args -> rmtvaluelen, args -> rmtvaluelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOCK_EXCL, args -> rmtblkcnt, args -> rmtvaluelen, args -> rmtvaluelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOCK_EXCL, args -> rmtvaluelen, args -> rmtvaluelen, args -> rmtvaluelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOCK_EXCL, args -> rmtvaluelen ) ; args -> rmtvaluelen = args -> rmtvaluel",0
618,"<S2SV_ModStart> ; int rv = <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"", <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } child = <S2SV_ModEnd> fork ( ) <S2SV_ModStart> ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
620,"<S2SV_ModStart> flags ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> return NULL ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> comp ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> return NULL ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> bfad_lock, flags ) ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> bfad_hcb_comp, & fcomp ) ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ; fcstats = kzalloc ( sizeof ( union bfa_port_stats_u ), GFP_KERNEL ) ; if ( fcstats == NULL ) return NULL ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; spin_unlock_irqrestore ( & bfad -> bfad_",0
621,"<S2SV_ModStart> ) { value -> e = MinF ( 1.0f, MaxF ( 0.0f, value -> e ) ) ; value -> g = MinF ( 1.0f, MaxF ( 0.0f, value -> g ) ) ; value -> b = MinF ( 1.0f, MaxF ( 0.0f, value -> b ) ) ; value -> c = MinF ( 1.0f, MaxF ( 0.0f, value -> c ) ) ; value -> d = MinF ( 1.0f, MaxF ( 0.0f, value -> d ) ) ; value -> e = MinF ( 1.0f, MaxF ( 0.0f, value -> e ) ) ; value -> a = MinF ( 1.0f, MaxF ( 0.0f, value -> a ) ) ; value -> b = MinF ( 1.0f, MaxF ( 0.0f, value -> b ) ) ; value -> d = MinF ( 1.0f, MaxF ( 0.0f, value -> d ) ) ; value -> e = MaxF ( 1.0f, MaxF ( 0.",0
622,"<S2SV_ModStart> head = NULL ; if ( * line == GIT_EBUFS ) { giterr_clear ( ) ; * out = line ; return 0 ; } <S2SV_ModEnd> if ( len <S2SV_ModStart> PKT_LEN_SIZE ) { if ( * line == '#' ) ret = ok_pkt ( head, line, len ) ; else ret = ng_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""END <S2SV_blank> "" ) ) ret = end_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""END <S2SV_blank> "" ) ) ret = end_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""END <S2SV_blank> "" ) ) ret = end_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""END <S2SV_blank> "" ) ) ret = end_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""END <S2SV_blank> "" ) ) ret = end_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""END <S2SV_blank> "" )",0
623,"<S2SV_ModStart> ; if ( try_to_free_swap_page ( page_table, vma -> vm_page_prot, address ) ) return VM_FAULT_SIGSEGV ; spin_lock_irqsave ( & vma -> vm_page_lock, flags ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) { unlock : spin_unlock_irqrestore ( & vma -> vm_page_lock, flags ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) goto unlock ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) goto unlock ; } else { spin_unlock_irqrestore ( & vma -> vm_page_lock, flags ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl",0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> <S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_username = g_strdup ( src -> alternate_username ) ; rec -> alternate_password = g_strdup ( src -> alternate_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> = env -> insn_aux_data ; memset ( new_data, 0, sizeof ( * new_data ) ) ; <S2SV_ModStart> = new_data ; memcpy ( new_data + off + cnt - 1, old_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memset ( new_data + off + cnt - 1, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len -",0
626,"<S2SV_ModStart> bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ; } if ( ndo -> ndo",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> ho=0x%04x <S2SV_blank> )"" ) ) ; goto trunc ; }",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d\\n"", ( int ) ( occ0 / rowsize ) ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d\\n"", ( int ) ( occ0 / rowsize ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d\\n"", ( int ) ( occ0 / rowsize ) ) ; return 0 ; } if ( sp -> decodepfunc!= NULL ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d\\n"", ( int ) ( occ0 / rowsize ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d\\n"", (",0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } o = 6 + n -> offset ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote",0
631,"<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else { code = kg_unseal_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; }",0
632,<S2SV_ModStart> = NULL ; hugetlbfs_put_sb_info <S2SV_ModEnd> ( sbi ),0
633,"<S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_OLD_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_OLD_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> long hex ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
636,"<S2SV_ModStart> ; if ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } iov_iter_advance ( i, copied ) ; pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ; } while ( iov_iter_count ( i ) ) { status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( unlikely ( status ) ) break ; status = - EFAULT ; break ; } status = a_ops -> write_end ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; flush_dcache_page ( page ) ; pagefault_disable ( ) ; flush_dcache_page ( page ) ; flush_dcache_page ( page ) ; flush_dcache_page ( page ) ; flush_dcache_page ( page ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ;",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( <S2SV_ModStart> rx_buffersize ) ) ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; } } else { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu",0
638,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LI",0
639,"<S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data )",0
640,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { <S2SV_ModStart>, sub ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
641,"<S2SV_ModStart> j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < width ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < j ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < width ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < width ; i ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride",0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
644,<S2SV_ModStart> pixels ++ ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
645,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; <S2SV_ModStart> NULL ; spin_unlock ( & timeri -> timer_lock ) ; <S2SV_ModStart> timer = NULL ; spin_unlock ( & timeri -> timer_lock ) ; <S2SV_ModStart> slave_active_lock ) ; mutex_unlock ( & timeri -> timer_lock ) ;,0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6",0
647,"<S2SV_ModStart> -> has_va ; ut32 arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.baseaddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> return false ;",0
648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void sas_probe_devices ( <S2SV_ModStart>, * n <S2SV_ModEnd> ) { struct <S2SV_ModStart>, * n ; list_for_each_entry_safe ( dev, n, & port -> dev_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_lock ) ; list_del_init ( & dev -> dev_list_lock ) ; sas_rphy_del ( dev -> rphy ) ; } list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char <S2SV_ModEnd> cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart>, line, <S2SV_ModEnd> cap_int, & <S2SV_ModStart>, & cap_dir, & cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { struct GifSavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; int_fast32_t topOverflow = gifFilePtr -> Image. Top + gifFilePtr -> Image. Top + gifFilePtr -> Image. Left + gifFilePtr -> Image. Left ; if ( topOverflow > 0 || leftOverflow > 0 ) { struct GifSavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; if ( topOverflow > 0 ) { struct GifSavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; int_fast32_t leftOverflow = gifFilePtr -> Image. Left,0
653,"<S2SV_ModStart> can_read_key : if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; } } else { ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { ret = - EOPNOTSUPP ; } else { ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } }",0
654,"<S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> extent, image -> length ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> extent, image -> length ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> extent, image -> length ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> extent, image -> length ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image )",0
656,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val = <S2SV_ModStart> tmp & 0x80000000 )? ( JAS_CAST ( longlong, ( ( ( ~ tmp ) & 0x7fffffff ) + 1 ) ) : ( JAS_CAST ( longlong, ( ( ( ~ tmp ) & 0x7fffffff ) + 1 ) ) ) ) : ( JAS_CAST ( longlong, ( ( ( ( ~ tmp ) & 0x7fffffff ) + 1 ) ) ) ; <S2SV_ModEnd> return 0 ;",0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_FREED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> m_fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
659,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0 ;",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", name, val, iface ) ; return - 1 ; } <S2SV_ModEnd> if ( access",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( * t &&! isspace ( * t ) ) t ++ ; if ( * t == '/' ) { const char * t = ++ s ; while (! isspace ( * t ) ) t ++ ; while (! isspace ( * t ) ) t ++ ; if (! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name,0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del <S2SV_ModEnd> ( pop_data -> <S2SV_ModStart> data ) ; mutt_bcache_delete <S2SV_ModEnd> ( pop_data -> <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_bcache_store ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } # endif if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx",0
663,"<S2SV_ModStart> * objp ) ; xdrs -> x_op = XDR_END ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p",0
664,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> ENTERING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; } else { result = select ( uipc_main. max_fd + 1, & uipc_main. read_set, NULL, NULL, NULL ) ; if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } else if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; }",0
665,"<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp",0
666,"<S2SV_ModStart> struct msixcap msixcap ; int ret ; <S2SV_ModStart> msgnum ) ; ret = <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> msgnum ) ; ret = <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; if ( ret < 0 ) return ret ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size ) ; if ( ret < 0 ) return ret ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_",0
667,"<S2SV_ModStart> ; if ( d_unhashed ( dentry ) ) { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } <S2SV_ModEnd> err = ovl_copy_up_last",0
668,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
669,"<S2SV_ModStart> -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (",0
670,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { vpx_read_bit_buffer <S2SV_ModEnd> data = vp9_rb_read_literal",0
671,"<S2SV_ModStart> 1 ) ; if ( <S2SV_ModEnd> mutt_strcmp ( line <S2SV_ModStart> ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; break ; } if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; break ; }",0
672,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n""",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec * prec ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } <S2SV_ModStart> ++ ) { Jpeg2000Prec * prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } av_freep ( & reslevel -> band ) ; } ff_dwt_destroy ( & comp -> dwt ) ; av_freep ( & comp -> f_data ) ;,0
674,"<S2SV_ModStart> ) ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDE",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( sk, rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ) ; <S2SV_ModStart> ( sk, rcu_dereference_protected ( req -> rcu, sock_owned_by_user ( sk ) ) ) ; <S2SV_ModStart> ( sk, rcu_dereference_protected ( req -> rcu, sock_owned_by_user ( sk ) ) ) ; rcu_assign_pointer ( req -> rcu, rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ) ; rcu_assign_pointer ( req -> rcu, rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ) ; if ( rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ) { rcu_assign_pointer ( req -> rcu, rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ) ; rcu_assign_pointer (",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> void * H264SwDecMalloc ( u32 size ) { if ( size > UINT32_MAX / sizeof ( u32 ) ) { return NULL ; } <S2SV_ModEnd> return malloc ( <S2SV_ModStart> ( size ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
678,<S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ; magfact = <S2SV_ModEnd> im -> gdes,0
679,"<S2SV_ModStart> } if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } if ( <S2SV_ModStart> -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } if ( need + shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)",0
680,<S2SV_ModStart> ) b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
681,"<S2SV_ModStart> goto out4 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & sst, & dir ) ; # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & sst, & dir ) ; # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sat, & dir, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto",0
682,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; sz = SMP_ALIGN ( size ) + 2 ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if (! info ) return NULL ;",0
683,"<S2SV_ModStart> } if ( vars -> cnt < 2 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,"<S2SV_ModStart> -> _eip ; memcpy ( & ctxt -> src, & ctxt -> src, sizeof ( ctxt -> src ) ) ;",0
687,"<S2SV_ModStart> imap_quote_string ( errstr <S2SV_ModEnd>, list. <S2SV_ModStart> name ) ; mutt_str_cpy ( url. path, ""mailboxes <S2SV_blank> \\"""", sizeof ( url. path ) - 1 ) ; url. user = NULL ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; if ( mutt_str_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; if ( url. path [ strlen ( url. path ) - 1 ] == '\\0' ) url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; if ( url_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ;",0
688,"<S2SV_ModStart> * secret, <S2SV_ModEnd> void * end <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", TEMP_TICKET_BUF_LEN ) ; dp = dbuf ; dend = dp + TEMP_TICKET_BUF_LEN - dlen ; tkt_struct_v = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; ret =",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, UINT32_MAX / sizeof ( Pairs ) ) ) ;",0
690,"<S2SV_ModStart> -> init_msg ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
691,"<S2SV_ModStart> ) ; r = safe_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = safe_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b ->",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
693,"<S2SV_ModStart> = NULL ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> array_ref. entry ) ; * index_rtrn = NULL ; break ; case EXPR_TYPE : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> type_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> type_ref. field ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> type_ref. entry ) ; * index_rtrn = expr -> type_ref. entry ; break ; case EXPR_TYPE : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> type_ref. field ) ;",0
694,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
695,"<S2SV_ModStart>, end_col_offset ; assert ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 6 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 7 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 8 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 6 ) ) == TYPE_COMMENT ( CHILD ( n, name_i + 6 ) ) == TYPE_COMMENT ) ; assert ( TYPE ( CHILD ( n, name_i + 7 ) ==",0
696,<S2SV_ModStart> int err = 0 ; struct sockaddr_storage addr = & asoc -> peer. primary_addr ; if ( id == SCTP_ASSOCIATION_ID_UNKNOWN || id == SCTP_ASSOCIATION_ID_UNKNOWN2 || id == SCTP_ASSOCIATION_ID_UNKNOWN3 || id == SCTP_ASSOCIATION_ID_ASSOCIATION_ID_UNKNOWN2 || id == SCTP_ASSOCIATION_ID_UNKNOWN2 || id == SCTP_ASSOCIATION_ID_UNKNOWN1 || id == SCTP_ASSOCIATION_ID_ASSOCIATION_ID_UNKNOWN || id == SCTP_ASSOCIATION_ID_UNKNOWN2 || id == SCTP_ASSOCIATION_ID_UNKNOWN3 || id == SCTP_ASSOCIATION_ID_ASSOCIATION_ID_UNKNOWN2 || id == SCTP_ASSOCIATION_ID_UNKNOWN2 || id == SCTP_ASSOCIATION_ID_UNKNOWN1 || id == SCTP_ASSOCIATION_ID_UNASSOCIATION_ID_UNASSOCIATION_ID_UNASSOCIATION_ID_,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_row_count + 1 ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int * ) * ( * o_row_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_row_count = ( unsigned int *",0
700,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( Rec. RecordLength > WPG_Palette. RecordLength ) ThrowReaderException ( CorruptImageError, ""InsufficientImage",0
701,"<S2SV_ModStart> ctxt ) { register_address_increment ( ctxt, reg_read ( ctxt, VCPU_REGS_RCX ), - 1 ) ; if ( address_mask ( ctxt, ctxt -> reg_read ( ctxt, VCPU_REGS_RCX ) )!= 0 ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) )",0
702,,1
703,"<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; res = platform_get_resource ( pdev, IORESOURCE_MEM, 0 ) ; if (! res ) return - EINVAL ; <S2SV_ModStart> ; freq_reg += HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_ioremap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start,",0
704,"<S2SV_ModStart> case SEEK_SET : if ( psf -> header. indx + position < 0 ) break ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. indx + position > SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header.",0
705,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_dio ; } handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_dio ; }",0
706,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> += 4 ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_BAD_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> += 4 ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_BAD_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> += 4 ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_BAD_MIDI, NULL, 0 ) ; return ( NULL ) ; } <S2SV_ModStart> += 4 ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_BAD_MIDI, NULL, 0",0
707,"<S2SV_ModStart> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUFSIZE : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; break ; case SO_SNDB",0
708,"<S2SV_ModStart> * bh ; uint32_t mapTableLength ; <S2SV_ModStart> TAG_IDENT_LVD ) ; mapTableLength = le32_to_cpu ( lvd -> mapTableLength ) ; mapTableLength = le32_to_cpu ( lvd -> mapTableLength ) ; mapTableLength = le32_to_cpu ( lvd -> mapTableLength ) ; ret = udf_sb_alloc_partition_maps ( sb, mapTableLength ) ; if ( ret ) goto out_bh ; for ( i = 0 ; i < mapTableLength ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; <S2SV_ModStart> ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if ( bmp_gethdr ( in, & info ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""(BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> "" ""(BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d;",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,"<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { ihevcd_cabac_stop ( ps_cabac ) ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = 0 ; ps_cabac -> u4_cur_word = 0 ; ps_cabac -> u4_nxt_word = 0 ; } <S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { ihevcd_cabac_stop ( ps_cabac ) ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) 510 ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm ->",0
712,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n )",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; media_device_kpad_to_upad ( & entity -> links [ l ]. source, & pad ) ; if ( copy_to_user ( & entity -> links [ l ]. sink -> entity!= entity ) continue ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & pad ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ].",0
714,<S2SV_ModStart> -> last_line_has_list_loosening_effect = 0 ; <S2SV_ModStart> -> last_line_has_list_loosening_effect = 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> -> last_line_has_list_loosening_effect = 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> -> last_line_has_list_loosening_effect = 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> -> last_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect == 1 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect == 1 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect == 1 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_,0
715,"<S2SV_ModStart>, extent ; size_t width, <S2SV_ModStart> height, length ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; width = sun_info. width ; height = sun_info. height ; <S2SV_ModStart> sun_info. depth = sun_info. depth ; <S2SV_ModStart> sun_info. type = sun_info. type ; sun_info. maplength = sun_info. maplength ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
716,"<S2SV_ModStart> hdb_entry_ex * client <S2SV_ModEnd>, krb5_enctype krbtgt_etype <S2SV_ModStart>, hdb_entry_ex * krbtgt <S2SV_ModEnd>, krb5_principals spp",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> ; newinet -> inet_mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_id = jiffies ;,0
719,<S2SV_ModStart> struct xmlparser parser ; if ( bufsize < sizeof ( struct NameValueParserStartElt ) || bufsize < sizeof ( struct NameValueParserEndElt ) ) { parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; },0
720,"<S2SV_ModStart>!= 0 ) { __wsum csum = 0 ; <S2SV_ModStart> ( skb_transport_header ( skb ) + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> tlen, offset <S2SV_ModEnd>, 0 )",0
721,"<S2SV_ModStart> pfn ) ; pr_err <S2SV_ModEnd> ( ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", <S2SV_ModStart> gfn ) ; pr_err <S2SV_ModEnd> ( ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", <S2SV_ModStart> gfn ) ; pr_err <S2SV_ModEnd> ( ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", <S2SV_ModStart> gfn ) ; pr_err ( ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ;",0
722,"<S2SV_ModStart> 4 ], cmd -> msg, cmd -> msg_len",0
723,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ) | ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ) | ( unsigned int ) <S2SV_ModEnd> buffer [,0
725,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; <S2SV_ModStart> return false ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ) ) return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_unlock ( & nm_i -> nid_list_lock",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags,0
727,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely ( <S2SV_ModStart> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } <S2SV_ModEnd> memcpy ( extras",0
728,<S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len > sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) { kfree_skb ( skb_out ) ; return - EINVAL ; } <S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len > sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) { kfree_skb ( skb_out ) ; return - EINVAL ; },0
729,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
730,"<S2SV_ModStart> ; defaultoptions ( <S2SV_ModEnd> h ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'x' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'f' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & f, sizeof ( f ), h. endian ) ; lua_pushnumber ( L, f ) ; break ; } case 'd' : { double d ; memcpy ( & d, data + pos, size ) ; correctbytes ( ( char",0
731,"<S2SV_ModStart> = 0 ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg6 = ( const struct olsr_msg6 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) )",0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_ext * body = ( struct oz_multiple_ext * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! body -> unit_size ) break ; count = ( data_len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_EXTEND : { struct oz_is",0
733,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; vpx_usec_timer_start ( & timer ) ; <S2SV_ModStart> timer ) ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; res = vpx_receive_frame ( cpi, sd, time_stamp, end_time, frame_flags, & timer ) ; if ( res!= 0 ) { res = - 1 ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ) ; int rv = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> rv = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> _exit ( 0 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 1 ;",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { <S2SV_ModStart> IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; SKIPWS ( s ) ; <S2SV_ModStart> )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> -> k_start ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> k_start ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
739,"<S2SV_ModStart> ] ; # if 0 <S2SV_ModStart> ] ) ; # endif <S2SV_ModStart> ] ) ; # endif <S2SV_ModStart> 8 ] ) ; # endif <S2SV_ModStart> 10 ] ) ; # endif <S2SV_ModStart> 12 ] ) ; image_w = get_ushort ( & tga [ 13 ] ) ; image_h = get_ushort ( & tga [ 15 ] ) ; pixel_depth = tga [ 16 ] ; image_desc = tga [ 17 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_type == 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type == 9 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type == 10 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected",0
740,<S2SV_ModStart> rdma_ucm_cmd_hdr hdr ; size_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { <S2SV_ModEnd> if ( CPUCLOCK_WHICH <S2SV_ModStart> CPUCLOCK_SCHED ) { u64 rem = div_u64_rem ( <S2SV_ModEnd> cpu. sched <S2SV_ModStart>. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) rem = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) rem = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; if ( rem > 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; else tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) { cputime_to_timespec ( cpu. cpu, tp ) ; } else { cputime_to_timespec ( cpu. cpu, tp ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; luaL_authz_provider_t <S2SV_ModEnd> prov_spec = parsed_require_line <S2SV_ModStart> r ) ; luaL_getglobal ( L, prov_spec -> function_name ) ; if ( lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; luaL_getglobal ( L, prov_spec -> function_name ) ; if ( lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release",0
744,<S2SV_ModStart> * prev ; unsigned long stack_guard_gap ; int error ; stack_guard_gap = vma -> vm_pgoff - vma -> vm_pgoff ; <S2SV_ModStart> address ) ; if ( error ) return error ; stack_guard_gap = ( address - vma -> vm_start ) >> PAGE_SHIFT ; if ( stack_guard_gap <= vma -> vm_pgoff ) { error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; perf_event_mmap ( vma ) ; } else { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; } } else { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; perf_event_mmap ( vma,0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( & inode -> i_mode, & mode, & acl ) ; error = posix_acl_update_mode_nolock ( & inode -> i_mode, & mode, & acl ) ; if ( error ) return error ; error = xfs_set_mode ( inode, mode ) ; if ( error ) return error ; <S2SV_ModEnd> error = posix_acl_update_mode <S2SV_ModStart> error <= 0 ) { posix_acl_update_mode_nolock ( & inode -> i_mode, & inode -> i_mode, & acl ) ; error = posix_acl_update_mode_nolock ( & inode -> i_mode, & inode -> i_mode, & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> char * data <S2SV_ModEnd>, int optional <S2SV_ModStart> mount ( fsname, target, fstype <S2SV_ModEnd>, mountflags & <S2SV_ModStart>, mountflags & ~ MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart> ; # endif # ifdef HAVE_STATVFS if ( statvfs ( fsname, & sb ) == 0 ) { if ( sb. f_flag & MS_NOSUID ) required_flags |= MS_NOSUID ; if ( sb. f_flag & MS_NODEV ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_RDONLY ) required_flags |= MS_RDONLY ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_",0
747,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = <S2SV_ModEnd> timr -> it_overrun <S2SV_ModStart> -> it_overrun = <S2SV_ModEnd> - 1 ; <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,"<S2SV_ModStart>! proto_end ) { credential_clear ( c ) ; return 0 ; } cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; host = url_decode_mem ( colon + 1, at - ( colon + 1 ) ) ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; } if ( at < cp ) { c -> username = url_decode_mem ( cp, at - cp ) ; c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( colon + 1, at - ( colon + 1 ) ) ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; }",0
750,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
751,"<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; usb_ep_free_request ( io_data -> ep, io_data -> req ) ; io_data -> kiocb -> private = NULL ;",0
752,<S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> srr &&! <S2SV_ModStart> &&! skb_sec_path <S2SV_ModEnd> ( skb ),0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { const <S2SV_ModStart> trusted_key_payload * p = rcu_dereference_protected ( key -> payload. data, lockdep_is_held ( & key -> sem ) ) ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> pcrlock ) { pr_info ( ""trusted_key: <S2SV_blank> pcrlock <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } if (! new_o -> pcrlock ) { pr_info ( ""trusted_key: <S2SV_blank> pcrlock <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out",0
755,<S2SV_ModStart> } v |= ( jas_uint_fast32_t ) <S2SV_ModStart> |= ( jas_uint_fast32_t ),0
756,"<S2SV_ModStart> int lci_o ; struct rose_neigh * neigh ; <S2SV_ModStart> 2 ] ; neigh = rose_find_neigh ( lci_i, rose_loopback_neigh ) ; if ( neigh ) { sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } } dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev",0
757,"<S2SV_ModStart> r ) { kvm_iommu_unmap_pages ( kvm, & old, & old. npages ) ; kvm_iommu_unmap_pages ( kvm, & old. npages, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. npages, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, & old. guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm,",0
758,<S2SV_ModStart> ) ; if ( indev ) { ifa = indev -> ifa_list ; newdst = ifa -> ifa_local ; } else { rcu_read_unlock ( ) ; return NF_DROP ; },0
759,"<S2SV_ModStart> ; end = fdt_strdup <S2SV_ModEnd> ( fdt, <S2SV_ModStart> ; switch ( tag ) { case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE",0
760,"<S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK",0
761,"<S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNATURE_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNATURE_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNATURE_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNATURE_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNATURE_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; } else { if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; } else { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld",0
763,"<S2SV_ModStart> ; } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
764,"<S2SV_ModStart> int ret, wo <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } <S2SV_ModStart> wo = ( rbuf == NULL || rlen == 0 ) ; mutex_lock ( & d -> data_mutex ) ; st -> data [ 0 ] = cmd ; memcpy ( & st -> data [ 1 ], wbuf, wlen ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
765,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", r",0
768,<S2SV_ModStart> new_root_item ) ; if ( btrfs_dir_item_is_readonly ( dir_item ) ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = - EEXIST ; goto no_free_dir_item ; } } else if ( btrfs_dir_item_is_readonly ( dir_item ) ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = btrfs_check_dir_item_readonly ( dir_item ) ; if ( ret ) { ret = - EPERM ; goto no_free_dir_item ; } } else if ( btrfs_dir_item_is_readonly ( dir_item ) ) { ret = btrfs,0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,"<S2SV_ModStart> NULL ) { size_t <S2SV_ModEnd> chanmap_size = psf <S2SV_ModStart>. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } else { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_",0
771,"<S2SV_ModStart> this_h ) { if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4 ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } if ( sf -> y_step_q4 == 16 ) { if ( sf -> x_step_q4 == 16 ) { if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ]",0
772,<S2SV_ModStart> { int32_t nestsize = <S2SV_ModEnd> ms -> nest_size,0
773,"<S2SV_ModStart> ; if ( unlikely ( unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; <S2SV_ModStart> verdict < 0 || ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { sock_kfree_s ( sk, opt, opt -> tot_len ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference ( np -> opt ) ; } <S2SV_ModEnd> if ( opt <S2SV_ModStart> ( opt ) { rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; sock_kfree_s ( sk, opt, opt -> tot_len ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
777,"<S2SV_ModStart> ; BIO * cmsbio <S2SV_ModEnd> = NULL, <S2SV_ModStart> tmpin = NULL ; if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_INVALID ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_INVALID ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_INVALID ) ; goto err ; } if ( scount!= sk_CMS",0
778,"<S2SV_ModStart> case IPV6_2292RXINFO : if ( np -> rxopt. bits. rxinfo ) { struct in6_pktinfo src_info ; memcpy ( & src_info, np -> rxopt. bits. rxinfo, sizeof ( src_info ) ) ; memcpy ( & src_info, & src_info, sizeof ( src_info ) ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case IPV6_2292RXINFO : if ( np -> rxopt. bits. rxinfo ) { memcpy ( & src_info, & np -> rxopt. bits. rxinfo, sizeof ( src_info ) ) ; memcpy ( & src_info. ipi6_src, sizeof ( src_info. ipi6_src ) ) ; memcpy ( & src_info. ipi6_src, sizeof ( src_info ) ) ; } break ; case IPV6_2292RXINFO : if ( np -> rxopt. bits. rxinfo ) { memcpy ( & src_info, & src_info, sizeof ( src_info ) ) ; memcpy ( & src_info. ipi",0
779,"<S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> sctp_net_ops ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ; free_pages ( ( unsigned long ) sctp_bind_hashbucket, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; percpu_counter_destroy ( & sctp_sockets_allocated ) ; rcu_barrier ( ) ; kmem_cache_destroy ( sctp_addr_cachep ) ; kmem_cache_destroy ( sctp_addr_cachep )",0
780,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command (",0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev ; netdev_notifier_info_t <S2SV_ModEnd> info ; netdev_notifier_info_init <S2SV_ModStart> info ; netdev_notifier_info_init <S2SV_ModEnd> ( & info,0
782,<S2SV_ModStart> ( current -> mm &&! ( vmflag & VM_HUGETLB ) ) { leave_mm ( smp_processor_id ( ) ) ; <S2SV_ModStart> ( smp_processor_id ( ) ) ;,0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_count ) { fprintf ( stderr, ""Stream <S2SV_blank> %d <S2SV_blank> PSNR <S2SV_blank> (Overall/Avg/Y/U/V)"", stream -> index ) ; ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; }",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ( fp ) ; if ( i >= sizeof ( temp ) ) return NULL ; <S2SV_ModStart> ) { char * ret ; temp [ i ] = malloc ( strlen ( temp ) + 10 ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } switch ( temp [ i ] ) { case 0 : ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } if ( foundit == 1 ) { char * ret ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ; } if ( temp [ i ] == 0 || temp [ i ] == EOF ) { temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; free ( temp ) ; return ret ;,0
785,<S2SV_ModStart> (! del_timer ( & task -> slow_task -> timer ) ) { complete ( & task -> slow_task -> completion ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
786,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } <S2SV_ModEnd> sprintf ( dst_name <S2SV_ModStart> 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
787,"<S2SV_ModStart> ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_",0
788,<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } default : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_STRING ;,0
789,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return",0
790,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> chan_mutex ) ; <S2SV_ModStart> dead = 1 ; mutex_unlock ( & pch -> chan_mutex ) ;,0
791,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct btrfs_dir_item * <S2SV_ModStart> XATTR_REPLACE ) { struct btrfs_dir_item * di ; <S2SV_ModStart> out ; } di = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } else if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_insert_xattr_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, value, size ) ; if ( ret == - E",0
792,"<S2SV_ModStart> 0xbf ) return 1 ; if ( op -> len < 1 || op -> len > buf_len ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm <S2SV_blank> dis()\\n"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm <S2SV_blank> dis()\\n"", __func__ ) ; return 1 ; } <S2SV_ModStart> 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm <S2SV_blank> dis()\\n"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm <S2SV_blank> dis()\\n"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm <S2SV_blank> dis()\\n"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm <S2SV_blank> dis() <S2SV_blank>",0
793,<S2SV_ModStart> client ) ; if ( client -> proxy -> clients == NULL ) { g_object_unref ( & client -> proxy ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> bus_side ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> bus_side ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_object_unref ( & client -> proxy_owner_reply ) ; g_,0
794,"<S2SV_ModStart>. skip } ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) encode_block_intra_high ( xd, bsize, plane, & arg ) ; else encode_block_intra_high ( xd, bsize, plane, & arg ) ; # else vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, encode_block_intra <S2SV_ModEnd>, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
795,"<S2SV_ModStart> ; if ( key_is_negative <S2SV_ModEnd> ( key ) <S2SV_ModStart> - ENOKEY ; p = key -> payload. data [ 0 ] ; if ( p -> key_len > UINT_MAX - p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> key_len > UINT_MAX - p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", p -> key_len ) ; kzfree ( new_p ) ; goto out ; } if ( p -> migratable ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> key_len > UINT_MAX - p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", p -> key_len ) ; kzfree (",0
796,<S2SV_ModStart> ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { t += 255 ; ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { while ( ip < ip_end ) { ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { t += 255 ; ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { while ( ip < ip_end ) { ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t,0
797,"<S2SV_ModStart> ; if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> ; if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out2 ; vmx_msr_bitmap_legacy_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out3 ; vmx_msr_bitmap_longmode_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_longmode_x2apic ) goto out4 ; vmx_msr_bitmap_nested_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested_x2apic ) goto out5 ;,0
800,"<S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( shdr -> sh_size < sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval * af_ratio ) / ( rc -> avg_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval * af_ratio ) / ( rc -> avg_gf_interval + af_ratio - 1 ) ; # endif # if USE_ALTREF_FOR_ONE_PASS target = ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval * af_ratio ) / ( rc -> avg_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval * af_ratio ) / <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
803,"<S2SV_ModStart> ++ ) { if ( is_uid_group ( grent -> gr_gid ) ) errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> group <S2SV_blank> %s\\n"", name? name : ""(unknown)"", grent -> gr_gid ) ; else errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> group <S2SV_blank> %s\\n"", name? name : ""(unknown)"", grent -> gr_gid ) ; if ( is_uid_group ( grent -> gr_gid ) ) { errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> group <S2SV_blank> %s\\n"", name? name : ""(unknown)"", ABUILD_GROUP ) ; } else { errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> group <S2SV_blank> %s\\n"", name? name : ""(unknown)"", ABUILD_GROUP ) ; }",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,"<S2SV_ModStart> INDENT_INCR ; } if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; if ( tbl -> indent > 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } } else { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } if ( tbl -> indent > 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
806,"<S2SV_ModStart> ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT",0
807,<S2SV_ModStart> } # else ( void ) lex_env ; <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ) <S2SV_ModStart> : ( void ),0
808,<S2SV_ModStart> ib ] ; const short * dequant_ptr = b -> dequant ; const short * coeff_ptr = b -> coeff ; const short * qcoeff_ptr = b -> qcoeff ; const short * dqcoeff_ptr = b -> dqcoeff ; const short * dequant_ptr = d -> dequant ; const short * coeff_ptr = d -> coeff ; const short * dequant_ptr = d -> dequant ; const short * coeff_ptr = d -> dequant ; const short * qcoeff_ptr = d -> qcoeff ; const short * dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rd,0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ;",0
810,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),0
811,<S2SV_ModStart> hci_filter * f ; uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. opcode = * ( ( u32 * ) f -> opcode + 1 ) ; uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. event_mask = * ( ( u32 * ) f -> event_mask + 1 ) ; uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; },0
812,"<S2SV_ModStart> int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> - data ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart> peer. i = new -> peer. i ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
815,"<S2SV_ModStart> cleanup ; } if ( copy_from_user ( & fibsize, & user_srb -> count, sizeof ( u32 ) ) ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if (",0
816,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( cc0 <S2SV_ModStart> % rowsize ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; spin_lock_bh ( & sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if ( mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func",0
818,"<S2SV_ModStart> * input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> action = ACTION_NONE <S2SV_ModEnd> ; # define <S2SV_ModStart> 3 ; # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else character_size = 1 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_sync ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ; fiber -> ip = re_code",0
819,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, int * returnintra <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; #",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_IOIO_PROT ) ; set_intercept ( svm, INTERCEPT_MSR_PROT ) ; set_intercept ( svm,",0
821,"<S2SV_ModStart> goto error ; if ( STREQ ( debug, ""1"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""2"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""3"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""4"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""5"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""7"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if (",0
822,"<S2SV_ModStart> h, const cdf_stream_t <S2SV_ModEnd> * sst, <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ;",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i2_max_frm_num ; WORD32 u2_pic_wd, u2_pic_ht ; WORD32 u2_crop_offset_y, u2_crop_offset_uv ; WORD32 ret ; WORD32 i4_num_reorder_frames ; WORD32 i4_i ; u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst ; SWITCHONTRACE ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; uc_constraint_set1_flag = ih264d_get",0
824,<S2SV_ModStart> -> palette ) ; if ( err ) return - EFAULT ;,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const svc_params = va_arg ( args, vpx_svc_parameters_t * ) ; <S2SV_ModStart> ; if ( svc_params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = svc_params -> spatial_layer ; cpi -> svc. temporal_layer_id = svc_params -> temporal_layer ; cpi -> lst_fb_idx = svc_params -> lst_fb_idx ; cpi -> gld_fb_idx = svc_params -> gld_fb_idx ; cpi -> alt_fb_idx = svc_params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx",0
826,<S2SV_ModStart> ) ) ; if (! fq -> q. <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
827,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart>, input_photometric ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( jpegcolormode!= JPEGCOLORMODE_RGB ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } else if ( input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB ) { TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, TIFFTAG_PHOTOMETRIC_RGB ) ; } else if ( input_photometric == PHOTOMETRIC_YCBCR ) { TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, TIFFTAG_PHOTOMETRIC_YCBCR ) ; } else if ( input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB ) { TIFFSetField ( out,",0
828,"<S2SV_ModStart> a ) { int r ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; }",0
829,"<S2SV_ModStart> ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
830,"<S2SV_ModStart> sbi ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> -> i_sb, & iinfo -> i_location, 0, & ident ) ; if ( ident == TAG_IDENT_IE && ibh ) { struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && nbh ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart> ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart>",0
831,"<S2SV_ModStart> -> tx_size ; <S2SV_ModEnd> const TX_SIZE tx_size_uv <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask [ block_size ] << shift_y ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask [ block_size ] << shift_y ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift",0
832,"<S2SV_ModStart> dst_size ) { uint16_t namelen = ff_amf_tag_size ( data, data_end ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> data < data_end <S2SV_ModStart> - 1 ; data += len ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size < 0 || size >= data_end - data ) return - 1 ; data += size ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data ) return - 1 ;",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ;",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return TIFF_swabHorDiff <S2SV_ModEnd> ( tif, <S2SV_ModStart> wc ) ;",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> \' <S2SV_blank> \'"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( sk -> sk_bound_dev_if, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl <S2SV_ModEnd> ; pid_t pid <S2SV_ModStart> pid_t pid ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; default : return FM_CONF_INIT_ERR ; } sprintf ( s_path, ""%s%s"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return F",0
840,"<S2SV_ModStart> || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; },0
843,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""eval"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J",0
844,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ( s, MCS_CONNECT_RESPONSE, & result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_RESULT, & result ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ; ber_parse_header ( s, BER_TAG_OCTET_STRING, & length ) ; sec_process_mcs_data ( s ) ; return s_check_end ( s ) ; }",0
847,<S2SV_ModStart> ; if ( stkt_server == NULL ) { krb5_db_entry * stkt_client = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_entry * stkt_client_entry = NULL ; krb5_db_,0
848,<S2SV_ModStart> == ':' ) || ( ( c >= 0xE0 ) && ( c <= 0x7FF ) ) || ( ( c >= 0xE0 ) && ( c <= 0x7FF ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF8 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF0 ) ) || ( ( c >= 0xF0 ) && ( c <= 0,0
849,"<S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; } <S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; } if ( <S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; } if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; } if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; } if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; } if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,"<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( idx >= map -> nr_extents ) { ret = uid_gid_map_release ( map, idx ) ; if ( ret ) goto out ; ret = uid_gid_map_insert ( map, idx, extent. first, extent. lower_first, extent. count ) ; if ( ret ) goto out ; ret = uid_gid_map_release ( map, idx ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } if ( idx >= map -> nr_extents ) { ret = uid_gid_map_release ( map, idx ) ; if ( ret ) goto out ; ret = uid_gid_map_insert ( map, idx, extent. first, extent. lower_first, extent. count ) ; if ( ret ) goto out ; ret = uid_gid_map_insert ( map, idx ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; }",0
852,"<S2SV_ModStart> } } } if ( strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case's' : if ( cmd_cb ( core_ptr, ""ds"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01"" ) ; return - 1 ; } return send_msg ( g, ""OK"" ) ; } if ( strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } while ( action = strtok ( NULL, "";"" ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; switch ( action [ 0 ] ) { case 'c' : if ( cmd_cb ( core_ptr, ""dc"", NULL, 0 ) < 0 ) { send_msg ( g, ""E01""",0
853,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; } if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_fsop_encodef ( sr, ""wwl"", 4, 0 ) ; return ( SDRC_ERROR ) ; }",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> 0 ) { memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic, <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic,",0
856,"<S2SV_ModStart> = AF_TIPC ; memset ( & addr -> addr, 0, sizeof ( * addr ) ) ;",0
857,<S2SV_ModStart> if ( user_alloc && ( mem -> guest_phys_addr + mem -> memory_size > KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PHYS - KVM_USER_MEM_MAX_PH,0
858,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
859,"<S2SV_ModStart> ; if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line, <S2SV_blank> aborting"" ) ; return NULL ; } if ( tmp_line [ 0 ] == '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header",0
860,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p ; PyObject * w ; int kind ; int data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; if ( data == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } assert ( p - buf <= Py_SIZE ( u ) ) ; assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ;",0
861,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function",0
862,"<S2SV_ModStart> WaveHeader WaveHeader ; <S2SV_ModEnd> uint32_t bcount ; <S2SV_ModStart> uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK",0
864,"<S2SV_ModStart> SNDRV_TLG_RUNNING ; goto __end ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) { spin_unlock_irqrestore ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; goto __end ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) { spin_unlock_irqrestore ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; return - EINVAL ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) { spin_lock_irqsave ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ;",0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart>, wrerrno = 0 <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> target <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> target <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> target <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> target <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> target <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> target <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal (",0
866,"<S2SV_ModStart> return ; } if (! strcmp ( target, ""LIST"" ) && myentity_find_ext ( target ) == NULL ) { do_list ( si, mc, 0 ) ; free ( target ) ; return ; } if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if (! chanacs_source_has_flag",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,<S2SV_ModStart> ; if (! ast -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; goto error ; } if ( <S2SV_ModStart> sub_ctx ) ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; goto error ; } if ( <S2SV_ModStart> -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; goto error ; } if (! ast -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; goto error ; } if (! ast -> sub_ctx ) { av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; av_context_destroy ( ast -> sub_ctx ) ; goto error ; } if (,0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; problem = 0 ; if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags &",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
872,"<S2SV_ModStart> ; * dptr ++ = 0x00 ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer",0
873,<S2SV_ModStart> = new_ns ; <S2SV_ModEnd> if ( & <S2SV_ModStart> ( new_fs ) { if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if (! p ) break ;,0
874,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_FRAME_,0
875,"<S2SV_ModStart> = php_zip_get_properties ; zip_object_handlers. set_properties = php_zip_set_properties ; zip_object_handlers. <S2SV_ModStart> = php_zip_set_properties ; php_zip_register_prop_handler ( & zip_prop_handlers, ""name"", php_zipobj_get_name, NULL, NULL, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""description"", NULL, NULL, php_zipobj_get_description, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""isDirectory"", php_zipobj_is_directory, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""isDirectory"", php_zipobj_is_directory, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""isDirectory"", php_zipobj_is",0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; } <S2SV_ModEnd> return 0 ;,0
877,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & ni6 -> ni_flags ) ; if ( i & NI_NODEADDR_FLAG_ANYCAST ) ND_PRINT ( ( ndo, "" <S2SV_blank> [%s]"", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""a"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""b"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""C"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""a"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""a"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""b"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""c"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""C"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST )? ""C"" : """", ( i & NI_NODEADDR_FLAG_ANYCAST",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; }",0
880,"<S2SV_ModStart> void buffer_pipe_buf_get ( struct pipe_inode_info * info <S2SV_ModEnd>, struct pipe_buffer <S2SV_ModStart> -> private ; mutex_lock ( & info -> io_mutex ) ; <S2SV_ModStart> -> ref ++ ; mutex_unlock ( & info -> io_mutex ) ;",0
881,"<S2SV_ModStart> FAT_ENTRY subseqEntry ; get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( subseqEntry. cluster!= fs -> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ; <S2SV_ModStart> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( subseqEntry. cluster!= cluster ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ; if ( subseqEntry. cluster!= fs -> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ;",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; bh_lock_sock ( sk ) ; <S2SV_ModStart> sk ) ; bh_unlock_sock ( sk ) ;,0
884,<S2SV_ModStart> ) ; } if ( ps_dec -> u2_total_mbs_coded < u1_num_mbs ) { ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = u2_total_mbs_coded,0
885,<S2SV_ModStart> ; if ( unlikely ( src >= env_end - env_start ) ) { ret = - EINVAL ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { ret = - ENOMEM ; goto free ; },0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode, <S2SV_ModStart> ) ) { int result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode, <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode,",0
887,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct fsnotify_group * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return group ;,0
888,"<S2SV_ModStart> in ) ; if ( in -> linesize < 4 ) { av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; } else { av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; }",0
889,"<S2SV_ModStart> 1 ] ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
890,"<S2SV_ModStart> && value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> map\\n"", value_regno ) ; mark_reg_unknown ( env, regs, value_regno ) ; if (! err && t == BPF_WRITE && value_regno >= 0 ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> ctx\\n"", value_regno ) ; mark_reg_unknown ( env, regs, value_regno ) ; return - EACCES ; } err = check_map_access ( env, regno, off, size, false ) ; if (! err && t == BPF_WRITE && value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> ctx\\n"", value_regno ) ; mark_reg_unknown ( env, regs, value_regno ) ; return - EACCES ; }",0
891,"<S2SV_ModStart>, nstrips = 0 ; uint32 stripsize = TIFFStripSize ( in ) ; if ( stripsize == 0 ) TIFFError ( """", ""TIFF <S2SV_blank> strip <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ;",0
892,<S2SV_ModStart> const char need_to_append_dot = <S2SV_ModEnd> base_name [ base_len <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; if (! postfix ) return NULL ; } else { const int postfix_len = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; } if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; if (!,0
893,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, one_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, one_planes_filled ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> number_planes_filled ; number_planes_filled = number_planes_filled ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError,",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; BYTE * <S2SV_ModStart> = context -> PlaneBuffers ; if ( originalSize == 0 ) return FALSE ; <S2SV_ModStart> < originalSize ) return FALSE ; <S2SV_ModStart> < originalSize ) return FALSE ; <S2SV_ModStart> += planeSize ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
897,"<S2SV_ModStart> policy ) { struct fscrypt_inode_info * i_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * i_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * i_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * i_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * i_info = FSCAN_I ( inode ) ; if (! i_info -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! i_info -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! i_info -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! i_info -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! i_info -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; return create_encryption_context_from_policy ( inode, policy ) ;",0
898,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } }",0
899,"<S2SV_ModStart>. cmp = type -> match_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. raw_data = description <S2SV_ModEnd>,. match_data <S2SV_ModStart>. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret =",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> 8 ) ) ; if ( <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( header ) ;,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> * ptr = safe_calloc <S2SV_ModEnd> ( num * <S2SV_ModStart> * size ) ; if ( ptr ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; }",0
904,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( <S2SV_ModStart> dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } else { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
906,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * ) & desc ) ; if ( err < 0 ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor\\n"" ) ; return err ; } if ( desc -> bDescriptorType!= USB_DT_OTG ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor\\n"" ) ; return err ; } err = __usb_get_extra_descriptor ( udev -> rawdescriptors [ 0 ], le16_to_cpu ( desc -> desc. wTotalLength ), USB_DT_OTG, ( void * * ) & desc ) ; if ( err < 0 ) { dev_err ( & udev -> dev, ""Invalid <S2SV_blank> OTG <S2SV_blank> descriptor\\n"" ) ; return err ; } if ( desc -> bDescriptorType!= USB_DT_OTG ) return err ; err = usb_get_descriptor ( udev -> rawdescriptors [ 0 ], le16_to_cpu ( desc -> desc. wTotalLength ), USB_DT_OTG, ( void * * ) & desc )",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,<S2SV_ModStart> mask ) { if (! skcipher_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
911,"<S2SV_ModStart> - EINVAL ; if ( sha -> msg_len > CCP_SCP_MAX_MSG_SIZE ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( sha -> msg_len > CCP_SCP_MAX_MSG_SIZE ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; if ( sha -> msg_len > CCP_SCP_MAX_MSG_SIZE ) return - EINVAL ; if ( sha -> msg_len > CCP_SCP_MAX_MSG_SIZE ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> msg_len > CCP_SCP_MAX_MSG_SIZE ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION",0
912,<S2SV_ModStart> tile_height ) { if ( c -> old_tile_w < c -> tile_width || c -> old_tile_h < c -> tile_height ) { av_free ( c -> synth_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( ( c -> tile_width + 1 ) * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; } else { av_free ( c -> synth_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE,0
913,<S2SV_ModStart> ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
914,<S2SV_ModStart> * srcptr ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; dstptr2 = buf ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ;,0
915,"<S2SV_ModStart> s ) ; if ( register_savevm ( dev, ""stellaris_enet"", - 1, 1, stellaris_enet_save, s ) < 0 ) { pr_err ( ""stellaris_enet: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris_enet_save <S2SV_blank> failed: <S2SV_blank> stellaris_enet_load <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris_enet_save <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris_enet_save <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris_enet_load <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris_enet_reset <S2SV_blank> failed: <S2SV_blank> stellaris_enet_load <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris_enet_load <S2SV_blank> failed: <S2SV_blank> register_savevm <S2SV_blank> failed: <S2SV_blank> stellaris",0
916,"<S2SV_ModStart> p ) { <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( caplen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
917,"<S2SV_ModStart> ) ) { cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ;",0
918,<S2SV_ModStart> len && ( <S2SV_ModEnd> sk -> sk_tsflags <S2SV_ModStart> SOCK_TSFLAGS & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
919,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> raptor_sax2_set_uri_filter ( rdf_xml_parser,0
920,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al =",0
921,"<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) || ( decJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) ) { return SECURE_ELEMENT_ERROR_INVAL <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( * versionMinor == 1 ) { if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( ( encJoinAccept [ encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ] & 0x80 ) == 0x80 ) { if ( SecureElementAesEncrypt ( encJoinAccept + LORAMAC_MIC_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE, encKeyID, decJoinAccept + LORAMAC_MIC_FIELD_SIZE )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_ENCRYPT",0
922,<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_FIRST_SETTINGS ; } break ; case NGHTTP2_IB_READ_SETTINGS : iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; break ; case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_FIRST_SETTINGS ; break ; case NGHTTP2_IB_READ_,0
923,<S2SV_ModStart> = ucounts ; if (! new_ns -> user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - EPERM ) ; },0
924,<S2SV_ModStart> += dif ; if ( opt2 -> hopmsg ) * ( ( char * * ) & opt2 -> hopmsg ) += dif ; if ( opt2 -> dst0opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> dst1opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> srcrt ) * ( ( char * * ) & opt2 -> srcrt ) += dif ;,0
925,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities |= cpu_get ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ; x86_pmu. intel_cap. capabilities |= cpu_get ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ; } else { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities |= cpu_get ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ; x86_pmu. intel_cap. capabilities |= cpu_get ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ; }",0
926,"<S2SV_ModStart> -> dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < ch ; ++ i ) if (! do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < ch ; ++ j ) if (! do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ) break ; if ( j == ch ) { for ( j = 0 ; j < ch ; ++ j ) if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n",0
927,"<S2SV_ModStart> ) ; u32 last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModStart> ) { last_oow_ack_time = tp -> last_oow_ack_time ; tp -> last_challenge_ack_time = jiffies ; <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time ; tp -> last_challenge_ack_time = now ; } if ( now == last_oow_ack_time ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } else { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tcp_send_ack ( sk ) ; } else { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK )",0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; v = pb [ i >> 1 ] ; v = b -> tree [ i >> 1 ] ; do { const int bb = ( v >> -- n ) & 1 ; vpx_write ( w, bb, pb [ i >> 1 ] ) ; i = b -> tree [ i >> 1 ] ; do { const int bb = ( v >> -- n ) & 1 ; vpx_write ( w, bb, pb [ i >> 1 ] ) ; i = b -> tree [ i >> 1 ]",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> saved_wb ; write_uncompressed_header ( cpi, & wb ) ; uncompressed_hdr_size = vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; __le16 version ; __le16 <S2SV_ModEnd> country ; for <S2SV_ModStart> bcdHID ) ; version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_ModStart> bCountryCode ; for ( <S2SV_ModEnd> n = 0 <S2SV_ModStart> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\",0
933,"<S2SV_ModStart> struct ikev2_id id ; u_int id_len, idtype_len <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if ( rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < idtype_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> """,0
934,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
936,"<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_taginfo_gettag ( tvp ) ) ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) ) ; jas_tvparser_settag ( tvp, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_taginfo_gettag ( tvp",0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
938,"<S2SV_ModStart> ; WORD32 xt0_0, yt0_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l1_1, x_l2_0, x_",0
939,<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> 0x80 ; if ( unlikely ( len <= 0x7f ) ) goto length_too_long ; if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; <S2SV_ModStart> 0x80 ; if ( unlikely ( len <= 0x7f ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) {,0
940,"<S2SV_ModStart> val ; if ( WARN_ON_ONCE (! ( flags & __GFP_ZERO ) ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( WARN_ON_ONCE ( flags & __GFP_NOMEMALLOC ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( flags & __GFP_ZERO ) memset ( ptr, 0, size ) ; } else if ( flags & ( __GFP_NOMEMALLOC ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( WARN_ON_ONCE ( flags & __GFP_NOMEMALLOC ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( flags & __GFP_ZERO ) { memset ( ptr, 0, size ) ; } else { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL",0
941,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return INVALID_SIGNATURE_LEN ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return INVALID_SIGNATURE_LEN ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, fname ) ; return INVALID_SIGNATURE_LEN ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, fname ) ; return INVALID_SIGNATURE_LEN ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len, fname ) ; return INVALID_SIGNATURE_LEN ; }",0
943,"<S2SV_ModStart> && value [ n <S2SV_ModEnd> ] >= min <S2SV_ModStart> && value [ n <S2SV_ModEnd> ] <= max <S2SV_ModStart> && value [ n <S2SV_ModEnd> ] <= max <S2SV_ModStart> && value [ n <S2SV_ModEnd> ] <= max <S2SV_ModStart> && value [ n <S2SV_ModEnd> ] <= max <S2SV_ModStart> && value [ n <S2SV_ModEnd> ] <= max <S2SV_ModStart> && search ( value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && search ( value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 1, interrupt ) ; if ( search ( value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && search ( value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [",0
944,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
945,"<S2SV_ModStart> ; if ( ins_size < 0 || insns_size < 0 ) { RBinDexError ( rbin, ""ins_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ins_size ) ; return ; } <S2SV_ModStart> ; if ( ins_size < 0 ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) insns_size ) ; return ; } if ( ins_size < 0 ) { RBinDexError ( rbin, ""ins_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ins_size ) ) ; return ; } <S2SV_ModStart> ; if ( ins_size < 0 ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) insns_size ) ) ; return ; } if ( insns_size < 0 ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", ( int ) ins",0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, Qfalse ) ; rb_hash_aset ( env, rack_upgrade_val, self ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ; rb_hash_aset ( env, early_hints_val, self ) ; rb_hash_aset ( env, early_hints_",0
947,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = valuelen ; if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } else { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } args -> rmtvaluelen = valuelen ; if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_,0
948,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; if ( svp && SvTRUE ( * svp ) ) { do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } else { do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; } } else { do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0",0
949,"<S2SV_ModStart> -> destroy ) { atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ;",0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,<S2SV_ModStart> int eol ; <S2SV_ModEnd> if_OPT_WIDE_CHARS ( screen <S2SV_ModStart> { need *= 4 ; } ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } if ( scp -> data_limit <= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ),0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ;",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strncpy ( str, ""NaN"", len ) ; else if (! isfinite ( val ) ) { if ( -- len <= 0 ) { * str = 0 ; return 0 ; } else if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return 0 ; } * ( str ++ ) = '-' ; val = - val ; } while ( d * radix <= val ) d *= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; val -= v * d ; d /= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; d /= radix ; while (",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,"<S2SV_ModStart> < 6 ) { assert ( size < 8 ) ; assert ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; assert ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; assert ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; assert ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; assert ( result!= buf ) ; assert ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) ==",0
956,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
957,"<S2SV_ModStart> LEX_ID ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else jslTokenAsString ( lex -> tk, str, len ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
958,"<S2SV_ModStart> if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank>",0
959,,1
960,"<S2SV_ModStart> * output ; <S2SV_ModEnd> ssize_t i ; <S2SV_ModStart> ) ; } output = fopen_utf8 ( argv [ argc - 1 ], ""rb"" ) ; if ( output == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] )",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> : ext3_msg ( sb, ""error: <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, __bdevname ( <S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s"" <S2SV_ModEnd>, __bdevname (",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NULL ; char * tmpname_atomic = NULL ; char * tmpname_atomic = NULL ; char * atomic_dir = NULL ; if ( ( fp = xfmkstemp ( & tmpname_atomic, atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, (",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> s2 ) { size_t len = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> ) + 1U ; return memcmp ( s1, s2, len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
966,<S2SV_ModStart> TRUE ; } gchar * raw_to = xmpp_stanza_get_raw_to ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_to = xmpp_stanza_get_raw_to ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = x,0
967,"<S2SV_ModStart> ; } } serverAssertWithInfo ( c, c -> argv [ 1 ], sdsEncodedObject ( c -> argv [ 1 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 2 ], sdsEncodedObject ( c -> argv [ 1 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 2 ], sdsEncodedObject ( c -> argv [ 1 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 3 ], sdsEncodedObject ( c -> argv [ 4 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 5 ], sdsEncodedObject ( c -> argv [ 6 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 7 ], sdsEncodedObject ( c -> argv [ 8 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 9 ], sdsEncodedObject ( c -> argv [ 10 ] ) ) ; serverAssertWithInfo ( c, c -> argv [ 10 ] ) ; serverAssertWithInfo ( c, c -> argv [ 11 ], sdsEncodedObject ( c -> argv [ 11 ] ) ) ; serverAssertWithInfo ( c, c -> argv [",0
968,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> ""decrypting <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> %s"", str_endpoint ( & md -> sender, & b ) ) ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""decrypting <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> failed"", str_endpoint ( & md -> sender, & b ) ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""decrypting <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> failed"", str_endpoint ( & md -> sender, & b ) ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""decrypting <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> failed"", str_endpoint ( & md -> sender, & b",0
972,<S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE!= e_error ) { ps_op -> s_ivd_video_decode_op_t. u4_error_code = e_error ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_,0
973,<S2SV_ModStart> * zone ; <S2SV_ModEnd> old_width = s_map <S2SV_ModStart> ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y *,0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 3 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; ptr = cp [ 2 ] - 1 ; if ( ptr < 3 || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; ptr = cp [ 2 ] - 1 ; if ( ptr < 3 || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) ) || ( ( ptr + 1 ) & 3 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> 1 ) res = vpx_alg_encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>, pts, duration, flags, deadline ) ; else if ( res!= VPX_CODEC_OK ) { res = vpx_alg_encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>, pts, duration, flags, deadline ) ; break ; } if ( res!= VPX_CODEC_OK ) { res = vpx_alg_encode <S2SV_ModEnd> ( ctx ->",0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = sscanf ( argv [ i ] + 1, """,0
978,<S2SV_ModStart> ; if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,0
979,<S2SV_ModStart> = fake_used_mask ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; <S2SV_ModStart> group_entry ) { perf_event_update_userpage ( sibling ) ; perf_event_update_userpage ( event ) ; <S2SV_ModStart> ; } if ( perf_event_update_userpage ( event ) ) { perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; } else { perf_event_update_userpage ( event ) ; } perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_event_update_userpage ( event ) ; perf_,0
980,"<S2SV_ModStart> ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 0 ) { win_maximise (",0
981,"<S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Start"" ) ; } else if ( startcode <= 0x14F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x15F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x14F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x15F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x16F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x16F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x17F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" )",0
982,<S2SV_ModStart> < 1 ) { err = - EINVAL ; goto out ; } if ( nsops > INT_MAX / sizeof ( * nsops ) ) { err = - EINVAL ; goto out ; },0
983,<S2SV_ModStart> ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sum += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x =,0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < 0 || fileblock >= grub_le_to_cpu16 ( leaf -> len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } start = ( grub_disk_addr_t ) start ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ].",0
985,<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( <S2SV_ModEnd> i ->,0
986,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", * maxcount ) ) ; goto out ; } if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT",0
987,"<S2SV_ModStart> RE_OPCODE_LITERAL ) { if ( * ip == RE_OPCODE_MATCH ) { if ( flags & RE_FLAGS_EXHAUSTIVE ) { FAIL_ON_ERROR ( callback ( * ip + 1, bytes_matched, flags, callback_args ) ) ; break ; } else { FAIL_ON_ERROR ( callback ( * ip + 1, bytes_matched, flags, callback_args ) ) ; break ; } } if ( ip == RE_OPCODE_MATCH ) { if ( flags & RE_FLAGS_EXHAUSTIVE ) { FAIL_ON_ERROR ( callback ( * ip + 1, bytes_matched, flags, callback_args ) ) ; break ; } else { FAIL_ON_ERROR ( callback ( * ip + 1, flags, callback_args ) ) ; break ; } } else { FAIL_ON_ERROR ( callback ( * ip + 1, flags, callback_args ) ) ; break ; } if ( ip == RE_OPCODE_MATCH ) { if ( flags & RE_FLAGS_EXHAUSTIVE ) { FAIL_ON_ERROR ( callback ( * ip + 1, flags, callback_args ) ) ; break",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> token ) { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED",0
989,"<S2SV_ModStart> mnt_instance ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { if (! list_empty ( & mnt -> mnt_mounts ) ) { if (! list_empty ( & mnt -> mnt_mounts ) ) list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ) { list_add_tail ( & mnt -> mnt_instance, & mnt -> mnt_mounts ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { if (! list_empty ( & mnt -> mnt_mounts ) ) { if (! list_empty ( & mnt -> mnt_mounts ) ) list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ) { list_add_tail ( & mnt -> mnt_instance, & mnt -> mnt_mounts ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { list_add ( & mnt -> m",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ) ) ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> prg=%d <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi )",0
992,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> * iinfo ; struct udf_inode_info * udf_inode ; <S2SV_ModStart> ; uint32_t pos ; udf_inode = UDF_I ( inode ) ; <S2SV_ModStart> 0 ; out : up_read ( & udf_inode -> i_data_sem ) ; <S2SV_ModEnd> SetPageError ( page <S2SV_ModStart> 0 ; out : up_read ( & udf_inode -> i_data_sem ) ; <S2SV_ModEnd> SetPageUptodate ( page <S2SV_ModStart> 0 ; out : up_read ( & udf_inode -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>,0
993,<S2SV_ModStart> ; else if ( is_x2_enabled ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & X2APIC_ENABLE ) { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_longmode_x2apic_legacy ; else msr_bitmap = vmx_msr_bitmap_legacy_x2apic ; } else if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_nested_x2 ; else if ( vcpu -> arch. apic_base & X2APIC_ENABLE ) { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_long_mode ( vcpu,0
994,"<S2SV_ModStart> NULL ) { if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } } ldap_msgfree ( result ) ; if ( st!= 0 ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; }",0
995,"<S2SV_ModStart> ps_bitstrm ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; <S2SV_ModStart> ps_bitstrm ) ; ps_codec -> i4_pic_done = 1 ; <S2SV_ModStart> ps_bitstrm ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 3 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 3 ) ; ps_codec ->",0
996,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 5 ; break ; case 'n' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 6 ; break ; case 'p' : data = va_arg ( argptr, unsigned int ) ; if ( psf ->",0
997,<S2SV_ModStart> ; if ( <S2SV_ModEnd> d -> msg_len <S2SV_ModStart> ) ; } state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS ] = d -> msg [ 0 ] ; state -> dsec_cmd. len = CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ; if ( state -> dsec_cmd. len < CX24116_DISEQC_MSGLEN ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( state -> dsec_cmd. len < CX24116_DISEQC_MSGLEN ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ],0
998,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line",0
1002,"<S2SV_ModStart> * cskb ; struct iucv_sock * iucv_sock ; <S2SV_ModStart> err = 0 ; iucv_sock_recv_ts_and_drops ( iucv, sock, msg, & iucv_sock ) ; if ( iucv -> transport == AF_IUCV_TRANS_HIPER ) { iucv_sock_recv_ts_and_drops ( iucv, sock, msg, & iucv_sock ) ; return err ; } else { struct iucv_sock * iucv_sock = ( struct iucv_sock * ) sock -> sk ; iucv_sock_recv_ts_and_drops ( iucv, sock, & iucv_sock ) ; if ( iucv -> transport == AF_IUCV_TRANS_HIPER ) { iucv_sock_recv_ts_and_drops ( iucv, sock, & iucv_sock ) ; return err ; }",0
1003,"<S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key ) == IS_LONG ) { if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), ( void * * ) & data, sizeof ( data ), NULL ) ; } else { if ( Z_TYPE_P ( key ) == IS_STRING ) { if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), ( void * * ) & data, sizeof ( data ), NULL ) ; } else { if ( Z_TYPE_P ( key ) == IS_LONG ) { if ( zend_hash_index_find ( ht, Z_LVAL_P",0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; } else { <S2SV_ModEnd> * obuf = <S2SV_ModStart> obuf ) ; if ( obuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * obuf ; obuf -> flags |= PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } else { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } if ( obuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF,0
1006,"<S2SV_ModStart> -> tokenlen ) { if ( jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256, sizeof ( * p -> tokenbuf ) ) == JV_MEM_RESERVE ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; } else if ( jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) == JV_MEM_RESERVE ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; } if ( jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) == JV_MEM_RESERVE ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; }",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x8 <S2SV_ModEnd> ; } <S2SV_null>,0
1008,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1009,<S2SV_ModStart> ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint16_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) ) return AVERROR_INVALIDDATA ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint16_t ) ) return AVERROR_INVALIDDATA ;,0
1010,<S2SV_ModStart> ) ) { if ( ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) (,0
1011,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, encrypting_key, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX_REQ ) { return return_pkinit_kx_req ( context, request, reply, encrypting_key, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX",0
1012,"<S2SV_ModStart> size_t extent ; if ( CheckQuantumMemoryOverflow ( count, quantum )!= MagickFalse ) return ( ( void * ) NULL ) ;",0
1013,"<S2SV_ModStart> -> stratum_port ; if ( strcmp ( url, port ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, port ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( url, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank>",0
1014,"<S2SV_ModStart> ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( <S2SV_ModStart> ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORB",0
1015,<S2SV_ModStart> ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
1016,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> ; write_lock ( & node -> nd_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EINVAL ; else if ( test_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) ) ret = - EINVAL ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EINVAL ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else ret = - EINVAL",0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank>",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
1019,<S2SV_ModStart> ssize_t count ; if ( bytes > SENSIBLE_SIZE ) return 0,0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> too <S2SV_blank> long\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; } else { memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE802",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ; ret = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1024,"<S2SV_ModStart> ) ; hrtimer_set_expires ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_REL ) ;",0
1025,"<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart>. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_",0
1026,"<S2SV_ModStart> { do { if ( r <= 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = 0 ; if ( s -> chunksize < 0 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> chunksize ) ; return - 1 ; }",0
1028,"<S2SV_ModStart> ; if ( ps_dec -> u2_total_mbs_coded == 0 ) { H264_DEC_DEBUG_PRINT ( ""\\nNo <S2SV_blank> mbs <S2SV_blank> coded <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; } else { H264_DEC_DEBUG_PRINT ( ""\\nNo <S2SV_blank> mbs <S2SV_blank> coded <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; } <S2SV_ModStart> -> u2_total_mbs_coded = ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 1 ) || ( ps_dec -> u2_total_mbs_coded == 1 )",0
1029,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1030,"<S2SV_ModStart> = seed ; } if ( seed ) err = crypto_rng_setseed ( tfm, seed ) ; else err = - EINVAL ;",0
1031,"<S2SV_ModStart> = uid ; atomic_set <S2SV_ModEnd> ( & new <S2SV_ModStart> } } if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> spin_lock_irq ( &",0
1032,"<S2SV_ModStart> msg_sys. msg_namelen, <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> msg_sys. msg_namelen, <S2SV_ModEnd> msg_sys. msg_namelen",0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,"<S2SV_ModStart> void prefetch_table ( const tran_low_t <S2SV_ModEnd> * tab, <S2SV_ModStart> len ) { if ( len < 8 * 32 ) { ( void ) tab [ 0 ] ; ( void ) tab [ 1 ] ; ( void ) tab [ 2 ] ; ( void ) tab [ 3 ] ; ( void ) tab [ 4 ] ; ( void ) tab [ 5 ] ; ( void ) tab [ 6 ] ; } } <S2SV_null> <S2SV_null>",0
1035,"<S2SV_ModStart> ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> ee_block, path [ depth ]. p_ext -> ee_len ) ; err = - EIO ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> ee_block, path [ depth ]. p_ext -> ee_len ) ; err = - EIO ; goto out ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1040,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t <S2SV_ModEnd> * out_dist_sum ) <S2SV_ModStart> int sse ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; x -> pred_sse [ ref ] = sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist, & dist ) ; } else { int rate ; int",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1042,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } <S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length )",0
1043,<S2SV_ModStart> { if ( <S2SV_ModEnd> ( * ptr <S2SV_ModStart>'<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; ptr ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if,0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ;,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> desc = NULL <S2SV_ModStart> ldt ; sel >>= 3 ; mutex_lock ( & current -> active_mm -> context. lock ) ; desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < ldt -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif # <S2SV_ModStart> ( sel & SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; desc_base = sel & SEGMENT_RPL_MASK ; if ( desc_base > gdt_desc. size ) return NULL ; if ( desc_base > gdt_desc. size ) return NULL ; if ( desc_base > gdt_desc. size ) return NULL ; return ( struct desc_struct * ) ( gdt_desc. address + desc_base ) ;,0
1047,"<S2SV_ModStart> { memset ( dst_ptr1, src_ptr1 [ 0 ], extend_left ) ; memset ( dst_ptr2, src_ptr2 [ 0 ], extend_right ) ; src_ptr1 += src_stride ; src_ptr2 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i )",0
1048,<S2SV_ModStart> struct sctp_sockaddr_entry * laddr = NULL ; union sctp_addr * baddr = NULL ; union sctp_addr daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen <S2SV_ModEnd> ; sctp_scope_t scope <S2SV_ModStart> ) ; } laddr = & t -> ipaddr ; baddr = & t -> ipaddr ; daddr = & t -> ipaddr ; if ( daddr ) { fl6 -> daddr = daddr -> v6. sin6_addr ; fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCT,0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; <S2SV_ModStart> ++ ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"" ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"" ) ) ; smb_print_data ( ndo, buf, len ) ; return ( buf + len",0
1051,"<S2SV_ModStart> -> protocol_timeout ) { g_source_add ( client -> priv -> protocol_timeout, conn ) ; client -> priv -> protocol_timeout = 0 ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"" <S2SV_ModStart> -> description ) ; if ( * mask_ret & SmsRegisterClientProcMask ) { callbacks_ret -> register_client. callback = register_client_callback ; callbacks_ret -> register_client. manager_data = client ; * mask_ret |= SmsInteractRequestProcMask ; callbacks_ret -> interact_request. callback = interact_request_callback ; callbacks_ret -> interact_request. manager_data = client ; * mask_ret |= SmsInteractDoneProcMask ; callbacks_ret -> interact_done. callback = interact_done_callback ; callbacks_ret -> interact_done. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager",0
1052,"<S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> flags ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> flags ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> flags ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> flags ) ; <S2SV_ModStart> ++ io ) { ND_TCHECK_32BITS ( & io -> off ) ; if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) io ; ND_TCHECK_32BITS ( & io -> flags ) ; if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io",0
1053,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } return ERROR_FAILURE ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } return ERROR_FAILURE ;",0
1054,"<S2SV_ModStart> NULL ) ; rb_ary_push ( self, rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ) ) ) ), rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_",0
1055,"<S2SV_ModStart> = node ; if ( edit -> dead_leaf ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> dead <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return false ; } <S2SV_ModStart> ; if ( edit -> dead_leaf ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> dead <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> dead <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; } if ( edit -> dead_leaf ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> dead <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> dead <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node ; pr_devel",0
1056,<S2SV_ModStart> settings. udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart> udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart> ; settings. logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE ; settings. <S2SV_ModStart> ; settings. logger_watcher_buf_maxsize = LOGGER_WATCHER_BUF_MAXSIZE ; settings. logger_watcher_buf_minsize = 0 ; settings. logger_watcher_buf_maxsize = LOGGER_WATCHER_BUF_MINSIZE ; settings. logger_watcher_buf_maxsize = LOGGER_WATCHER_BUF_MAXSIZE ; settings. logger_watcher_buf_maxsize = LOGGER_WATCHER_BUF_MAXSIZE ; settings. logger_watcher_buf_minsize = LOGGER_WATCHER_BUF_MINSIZE ; settings. logger_watcher_buf_minsize = 0 ; settings. logger_watcher_buf_maxsize = LOGGER_WATCHER_BUF_MAXSIZE ; settings. logger_watcher_buf_minsize = LOGGER_WATCHER_BUF_MINSIZE ; settings. logger_watcher_buf_maxsize = LOGGER_WATCHER_BU,0
1057,<S2SV_ModStart> ; # endif # ifdef
1058,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15 ; WORD32 x_11, x_12, x_13, x_14, x_15 <S2SV_ModStart> x0 ++ ; x_10 = x_0 + x_2 ; x_11 = x_1 + x_3 ; x_12 = x_2 + x_4 ; x_13 = x_5 + x_6 ; x_13 = x_3 + x_7 ; x_12 = x_4 + x_6 ; x_13 = x_5 + x_7 ; x_14 = x_6 + x_7 ; x_15 = x_4 + x_6 ; x_16 = x_5 + x_7 ; x_11 = x_1 + x_3 ; x_12 = x_2 + x_4 ; x_13 = x_5 + x_6 ; x_14 = x_5",0
1059,"<S2SV_ModStart> ) { clips = kmalloc ( <S2SV_ModEnd> num_clips * sizeof <S2SV_ModStart> ( * clips ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; } ret = copy_to_user ( clips, clips_ptr, num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; } }",0
1060,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> ) ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; return ; } r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; return ; } r_anal_esil_to_reil_setup ( esil, esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup",0
1063,"<S2SV_ModStart>, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if (",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * chip -> DSPQ + JQS_wHead ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wTail ) ) ) ; <S2SV_ModStart> + JQS_wHead ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wTail ) ) ) ; wTmp = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ; wTmp = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) + 1 ; snd_ms",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; },0
1066,<S2SV_ModStart> ACPI_STATUS status ; <S2SV_ModEnd> # ifdef <S2SV_ModStart> * prev ; union acpi_operand_object * next ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; while ( next ) { prev = next ; next = next -> method. mutex ; } } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; },0
1067,<S2SV_ModStart> ; # ifdef
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> struct vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> enc ) { priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> -> base ; } <S2SV_ModEnd> cfg = & <S2SV_ModStart>. enc ; if ( extracfg_map [ i ]. usage && extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h ; priv -> cx_data_sz",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ERROR ( EFSCORRUP",0
1071,"<S2SV_ModStart> ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> lookup [ i ] = ( pixel -> freq",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], & tipc_nl_sock_policy ) ; if ( err ) return err ; <S2SV_ModStart> - EINVAL ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> err = __tipc_nl_list_sk_publ",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
1074,<S2SV_ModStart> vma ) ; <S2SV_ModEnd> if ( priv,0
1075,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; if ( length > total_len ) { ret = - EINVAL ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; if ( ret < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; if ( ret >= 0 ) ret = - ENOMSG ; goto err ; } dev -> bos -> bLength = le16_to_cpu ( cap -> wTotalLength ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; if ( ret >= 0 ) ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc -> bLength = le16_to_cpu ( cap -> wTotalLength ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n",0
1076,"<S2SV_ModStart> task_struct * task = current ; file_sb_list_del ( file ) ; if ( likely (! ( task -> flags & PF_KTHREAD ) ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! llist_add ( & file -> f_u. fu_llist, & delayed_fput_list ) ) schedule_work ( & delayed_fput_work ) ; } else { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! llist_add ( & file -> f_u. fu_llist, & delayed_fput_list ) ) schedule_work ( & delayed_fput_work ) ; }",0
1077,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ;,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1081,<S2SV_ModStart> (! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { break ; } } else { break ; } <S2SV_ModEnd> } } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1082,<S2SV_ModStart> ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) - 1 ; if ( name,0
1083,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""IPV6DefragIPv4NoDataTest"", IPV6DefragIPv",0
1084,<S2SV_ModStart> = object_length ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } <S2SV_ModStart> ( object_data ) { sc_cardctl_coolkey_object_t new_object ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object,0
1085,"<S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ;",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,"<S2SV_ModStart> u8 label_len ; # define GET16 ( x ) do { if ( j >= length ) goto err ; memcpy ( & t16_, packet + j, 2 ) ; j += 2 ; x = ntohs ( t16_ ) ; } while ( 0 ) ; # define GET32 ( x ) do { if ( j >= length ) goto err ; memcpy ( & t32_, packet + j, 2 ) ; j += 2 ; x = ntohl ( t32_ ) ; } # define GET16 ( x ) do { if ( j >= length ) goto err ; memcpy ( & t16_, packet + j, 2 ) ; j += 2 ; x = ntohs ( t16_ ) ; } while ( 0 ) ; # define GET32 ( x ) do { if ( j >= length ) goto err ; memcpy ( & t32_, packet + j, 2 ) ; j += 2 ; x = ntohl ( t32_ ) ; } # define GET8 ( x ) do { if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0xc0 )",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ; cp ++ ) count -= stride ; } if ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < b",0
1089,"<S2SV_ModStart> ( vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; } else { if ( likely ( vma -> vm_ops -> fault ) ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } return do_swap_page ( mm, vma, address, pte, pmd, flags, entry ) ; } <S2SV_ModEnd> return do_anonymous_page (",0
1090,"<S2SV_ModStart> s ) { size_t len = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; memcpy ( r, s, len ) ; free ( r ) ;",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> type = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> type = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> type = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> type = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1093,"<S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> dies [ cu -> length ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if ( i >= cu -> dies [ cu -> length ]. attr_values [ i ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if ( i >= cu -> dies [ cu -> length ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1094,"<S2SV_ModStart> p_block ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unknown <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> %s"", p_enc -> fmt_in. i_codec ) ; return NULL ; } <S2SV_ModStart> p_block ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unknown <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> %s"", p_enc -> fmt_in. i_codec ) ; return NULL ; } if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unknown <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> %s"", p_enc -> fmt_in. i_codec ) ; return NULL ; } if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { msg_Err ( p_enc, ""Unknown <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> codec <S2SV_blank> in <S2SV_blank> %s"", p_enc",0
1095,"<S2SV_ModStart> ) ) { char * entry ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; } mp_tarray_append ( mf, mf -> names, mf -> nr_of_files ) ; entry = bstrto0 ( mf, entry ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; } mp_tarray_append ( mf, mf -> names, mf -> nr_of_files ) ; entry = bstrto0 ( mf, entry ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; } else { mp_tarray_append ( mf, mf -> names, mf -> nr_of_files ) ; } }",0
1096,"<S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip6 -> flags ) ) ; <S2SV_ModStart> ( ndo, ""%s"", ND_TCHECK_32BITS ( & ip",0
1097,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; CHECKINT16 ( idx, len ) ; a -> name = CHECKINT16 ( buf + idx ) ; idx += 2 ; <S2SV_ModStart> len ) ; CHECKINT16 ( idx, len ) ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; CHECKINT32 ( idx, len ) ; a -> num_names = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_XMALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j *",0
1098,"<S2SV_ModStart> ; vma = find_vma ( mm, start, & prev ) ; if (! vma ) goto out_unlock ; ret = - EINVAL ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( vma_hpagesize & ( vma_hpagesize - 1 ) ) goto out_unlock ; } if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize (",0
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, t1_line_array ) ;",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_parallel_decode ) { vp9_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null>",0
1102,"<S2SV_ModStart> ( ctxt, MSR_EFER, & efer ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } else { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_",0
1103,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ;",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == expr_ty ) { expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; e = Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( ch ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_testlist ( c,",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> YV12_BUFFER_CONFIG * mc_running_avg <S2SV_ModStart> * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset, int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else adjustment = adj_val [ 1 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj",0
1106,"<S2SV_ModStart> { Ns_Log ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart> ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart> ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart> ( Ns_LogRequestDebug <S2SV_ModEnd>, ""honoring <S2SV_blank> 100-continue"" ) <S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue""",0
1107,"<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITMAP ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { if ( xtregs -> cp0 & XTREGS_CP0_BITMAP ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; } }",0
1108,<S2SV_ModStart> -> srcIpAddr ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif # if ( SOCKET_FLAG_PEEK ) == 0,0
1109,"<S2SV_ModStart> xop ) { struct se_subsystem_dev * se_dev ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) se_dev = xop -> src_dev ; else se_dev = xop -> dst_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & se_dev -> dev_group. cg_item ) ; target_undepend_item ( & se_dev -> dev_group. cg_item ) ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & se_dev -> dev_group. cg_item ) ; target_undepend_item ( & se_dev -> dev_group. cg_item ) ;",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; ext2_xattr_cache_insert ( inode, header, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> ) ; ext2_xattr_cache_insert ( inode, new_bh, EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModEnd> ) ; }",0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const active_map = va_arg ( args, vpx_active_map_t * ) ; if ( active_map ) { if (! vp9_set_active_map ( ctx -> cpi, active_map, map -> rows, map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> inode -> i_ctime <S2SV_ModStart> 0 ) return rc <S2SV_ModEnd> ; mark_inode_dirty",0
1115,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd>",0
1116,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1117,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> len ; struct parse_state * state ; if (! state ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> path: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_query_string ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> query: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment_string ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'%s\'""",0
1118,"<S2SV_ModStart> SUCCESS ) { if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""ZVAL <S2SV_blank> is <S2SV_blank> zero"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""ZVAL <S2SV_blank> is <S2SV_blank> zero"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""ZVAL <S2SV_blank> is <S2SV_blank> zero"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""ZVAL <S2SV_blank> is <S2SV_blank> zero"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""ZVAL <S2SV_blank> is <S2SV_blank> zero"" )",0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1 ) ; if ( dmbuf == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1 ) ; if ( <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1 ) ; if ( AcquireQuantumMemory ( dmsx, dmsy, 1 ) == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1 ) ; if ( AcquireQuantumMemory ( dmsx, dmsy, 1 ) == NULL ) { return ( MagickFalse ) ; }",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData",0
1122,"<S2SV_ModStart>. path ; int err ; <S2SV_ModStart>, NULL ) ; err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart>! pop3c -> mailbox ) { err = curl_easy_unescape ( data, path, err, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; return CURLE_OUT_OF_MEMORY ; } <S2SV_ModStart> -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; return CURLE_OUT_OF_MEMORY ; }",0
1123,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1124,"<S2SV_ModStart> ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1125,<S2SV_ModStart> ) ; } if ( ps_dec -> u2_total_mbs_coded < u1_num_mbs ) { ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u1_num_mbs ; ps_dec -> u2_total_mbs_coded = u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = u2_total_mbs_coded,0
1126,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> IMPEG2D_ERROR_CODES_T e_error ; <S2SV_ModStart> B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } else { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } else { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ]",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,"<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( xd <S2SV_ModStart> -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> (",0
1130,<S2SV_ModStart> -> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1131,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1132,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> fmt, 1 <S2SV_ModStart> : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'I' : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE",0
1133,"<S2SV_ModStart> nrow ) { if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) < 0 ) { return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowstoread ) < 0 ) { return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowstoread ) < 0 ) { return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowstoread ) < 0 ) { return ( 0 ) ; } if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowstoread ) < 0 ) { return ( 0 ) ; } if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowstoread ) < 0 ) { return ( 0 ) ; } if ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowstoread )",0
1134,<S2SV_ModStart> } } } <S2SV_ModEnd> return 0 ;,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1136,"<S2SV_ModStart> - EINVAL ; if ( ( unsigned long ) upid < 0 ) { type = PIDTYPE_MAX ; } else if ( ( unsigned long ) upid > UINT32_MAX / sizeof ( * upid ) ) { type = PIDTYPE_MAX ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( ( unsigned long ) upid > UINT32_MAX / sizeof ( * upid ) ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( ( unsigned long ) upid > UINT32_MAX / sizeof ( * upid ) / sizeof ( * upid ) ) { type = PIDTYPE_MAX ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( ( unsigned long ) upid > UINT32_MAX / sizeof ( * upid ) ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; }",0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1139,<S2SV_ModStart> ; const int rows = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH,0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( attr_len > attr_len - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dm_dev = lc -> dev ; int ret ; ret = dm_dev_ioctl ( dm_dev, cmd, arg ) ; if ( ret ) return ret ; return __blkdev_driver_ioctl ( dm_dev -> bdev, dm_dev -> mode, cmd, arg ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1142,<S2SV_ModStart> ; return 1 ; case EVP_CTRL_AEAD_SET_KEY_LEN : if ( arg <= 0 || arg > EVP_CTR_SIZE ) return 0 ; actx -> key. counter [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> key. counter [ 4 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> key. counter [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ),0
1143,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1144,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; create_empty_file_as_root ( RUN_LIB_FILE, 0644 ) ; if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path )",0
1145,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; if ( <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = * <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""%s"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"",",0
1151,"<S2SV_ModStart> -> sect <= 0 || g -> head <= 0 || g -> track <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( cmd!= FDDEFPRM ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } user_params [ drive ] = user_params [ drive ] ; if ( buffer_drive == drive ) SUPBOUND ( buffer_max, user_params [ drive ]. sect ) ; if ( buffer_drive == drive ) SUPBOUND ( buffer_max, user_params [ drive ]. head ) ; else SUPBOUND ( buffer_max, user_params [ drive ]. sect ) ; if ( buffer_drive == drive ) SUPBOUND ( buffer_max, user_params [ drive ].",0
1152,"<S2SV_ModStart> strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || str",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( ) ; <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5data + 1 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank>",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } }",0
1157,"<S2SV_ModStart> ; out_unmap : bio_for_each_segment_all ( bio, i, & iov, 1 ) bio_for_each_segment_all ( bio, i, & iov ) bio_for_each_segment_all ( bio, i, & iov, 1 ) bio_for_each_segment_all ( bio, i, & iov, 0 ) bio_for_each_segment_all ( bio, i ) bio_for_each_segment_all ( bio, i, & iov, 1 ) bio_for_each_segment_all ( bio, i, & iov, 2 ) bio_for_each_segment_all ( bio, i, & iov ) bio_for_each_segment_all ( bio, i, & iov, 1 ) bio_for_each_segment_all ( bio, i, & iov, 0 ) bio_for_each_segment_all ( bio, i ) bio_for_each_segment_all ( bio, i ) bio_for_each_segment_all ( i, & iov, 2 ) bio_for_each_segment_all ( i",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> ; } smtpc -> domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> path, 0 <S2SV_ModEnd>, & len <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if",0
1160,"<S2SV_ModStart> ; for ( i = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else { buf [ i ] = 0 ; } for ( j = 0 ; j < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; }",0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,"<S2SV_ModStart> 0 ) ; if ( hdr_off!= sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) { ret = - EINVAL ; goto out ; } if ( off + sizeof ( struct rds_header ) + sg + off > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } if ( <S2SV_ModStart> ) + sg + off > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } if ( ret ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; ret = - ENOMEM ; goto out ; } if ( ret < 0 ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; goto out ; } if ( ret ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; ret =",0
1163,"<S2SV_ModStart> 0 ) ; ret = devm_ioremap_nocache <S2SV_ModEnd> ( & pdev <S2SV_ModStart> -> base, <S2SV_ModEnd> resource_size ( r <S2SV_ModStart> r ) ) ; if ( ret ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; goto out_mdio_free ; } ret = devm_iounmap_nocache ( & pdev -> dev, priv -> base, r -> start, r -> end ) ; if ( ret ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> register\\n"" ) ; goto out_mdio_free ; } ret = devm_iounmap_nocache ( & pdev -> dev, priv -> base, r -> start, r -> end ) ; if ( ret ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> register\\n"" ) ; goto out_mdio_free ; } ret = devm_iounmap_nocache ( & pdev -> dev, priv -> base ) ; if ( ret ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> unmap <S2SV_blank> register",0
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,"<S2SV_ModStart> ) ) { if ( ( JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, pi -> pirlvl -> pirlvls ) == NULL ) || ( JAS_CAST ( jas_uintptr_t, JAS_CAST ( jas_uintptr_t, J",0
1166,"<S2SV_ModStart> ) ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_",0
1167,<S2SV_ModStart> goto out ; status = decode_getacl_v <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModEnd> thread -> tp_value <S2SV_ModStart> ARM_r3 ; } <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1170,"<S2SV_ModStart> bufsize ) { size_t <S2SV_ModEnd> obj ; JAS_DBGLOG <S2SV_ModStart> ) ) ; obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> ops_ = & jas_stream_memops ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> obj_ = ( void * ) obj ; obj -> myalloc_ = 1 ; } if ( buf ) { obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ = 1 ; } if (! obj -> buf_ ) { jas_",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> * key = NULL ; char * userstyle = NULL, * key_s = NULL, * ca_s = NULL ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype ; int authenticated = 0 ; if (! authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpk",0
1172,"<S2SV_ModStart> uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid",0
1173,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o + 12, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji""",0
1176,"<S2SV_ModStart> ; if ( db_count > EXT2_SB ( sb ) -> s_db_count ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; goto failed_sbi ; } if ( db_count > EXT2_SB ( sb ) -> s_db_count ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count ) ; kfree ( sbi -> s_blockgroup_lock ) ; kfree ( sbi -> s_blockgroup_lock ) ; goto failed_sbi ; } if ( db_count > EXT2_SB ( sb ) -> s_db_count ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count )",0
1177,<S2SV_ModStart> bd_addr ) { btif_dm_lock ( ) ;,0
1178,"<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss",0
1179,"<S2SV_ModStart> int i ; jas_matind_t numrows ; jas_matind_t numcols ; <S2SV_ModStart> ( matrix = jas_malloc ( <S2SV_ModEnd> sizeof ( jas_matrix_t <S2SV_ModStart> ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> data_ = jas_alloc2 ( matrix -> data_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> rows_ [ i ] =",0
1180,"<S2SV_ModStart> ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( net ) ) ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( net ) ) ; if ( tmp_hdr ) { memcpy ( tmp_hdr, tmp_hdr, sizeof ( tmp_hdr ) ) ; memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; } else { memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; } if ( tmp_hdr ) { memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; } else { memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; memcpy ( fh, tmp_hdr, sizeof ( tmp_hdr ) ) ; }",0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_req * r ; if (! qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL <S2SV_ModEnd> ; r = <S2SV_ModStart> scsi_disk_req_alloc ( & s -> qdev, tag, lun, hba_private ) ; if (! req ) return NULL ; <S2SV_ModStart> scsi_disk_req_alloc ( & s -> qdev, tag, lun, hba_private ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ;",0
1182,"<S2SV_ModStart> int i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> expect = 8 <S2SV_ModStart> + buf -> cursor ; if ( nxip < 0 || nxip > avail ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmax == 0 || xmin > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur >= MAX_TXID ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header,0
1184,"<S2SV_ModStart> ( ret || cm_id -> device -> node_type!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_bind_addr ( cm_id",0
1185,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> BUILD_BUG_ON ( sizeof <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = ( <S2SV_ModStart> ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } else { cb -> args [ 0 ] = 1 ; xfrm_dump_info_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; walk = ( struct xfrm_policy_walk * ) & cb -> args [ 0 ] ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; walk = ( struct xfrm_policy_walk * ) & cb -> args",0
1186,"<S2SV_ModStart> = - 1 ; struct oe_epoll * epoll ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; }",0
1187,"<S2SV_ModStart> -> d_inode ; <S2SV_ModEnd> int err ; <S2SV_ModStart> = - ESTALE ; inode_lock_nested ( dir, I_MUTEX_PARENT ) ; <S2SV_ModStart> = - ESTALE ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { err = - ENOENT ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option (",0
1189,<S2SV_ModStart> size ) ) { av_free ( * ptrptr ) ; return AVERROR ( ENOMEM ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1190,<S2SV_ModStart> ] ; if ( <S2SV_ModEnd> a -> name <S2SV_ModStart> -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } } else if ( a -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", <S2SV_ModStart> name ) ; goto error ; } if ( box -> info -> type!= JAS_BOX_FTYP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type ) ; goto error ; } if ( box -> info -> magic!= JAS_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2",0
1193,,1
1194,<S2SV_ModStart> journal_t * journal <S2SV_ModEnd> = EXT4_JOURNAL (,0
1195,"<S2SV_ModStart> trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> DTSprev = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> 0 ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data, password, 82 ) ; md5data [ 82 ] = '\\0' ; memcpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( width, height )!= - 1 ) { width = htole16 ( width ) ; height = htole",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } else if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> 0xfffffe00UL ) # define PCDGetQuantumMemory ( 32 ) ( unsigned int * buffer ) ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; while ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ;",0
1201,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1",0
1202,"<S2SV_ModStart> ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_destroy ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=5;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_",0
1203,"<S2SV_ModStart> HAVE_IPV6 char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { p = memchr ( str + 1, ']', str_len - 2 ) ; if (! p ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } return estrndup ( str + 1, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 1 ) ; host = estrndup ( str, p - str ) ; } # else if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0,",0
1204,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy_high ( dst, src, src_ybc -> y_width ) ; } else { memcpy_high ( dst, src, src_ybc -> y_width ) ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy_high ( dst, src, src_ybc -> y_width ) ; } else { memcpy_high ( dst, src, src_ybc -> y_width ) ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy_high (",0
1205,"<S2SV_ModStart> ; } if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> cblk_style == FF_DWT97_INT ) ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; } else if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> transform ) ; } else { if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> transform ) ; } else { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %",0
1206,"<S2SV_ModStart> { if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ) fputs ( stringp, stream ) ; ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } keepit = * end ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } if (! end ) { fputs ( ""%{"", stream ) ; continue ; }",0
1207,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate ; int64_t dummy_dist ; int BLOCK_SIZE i ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 16, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> mb_index < 4 ; ++ x -> mb_index",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)""",0
1209,"<S2SV_ModStart> void inc_mvs ( MB_MODE_INFO <S2SV_ModEnd> * mbmi, <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs <S2SV_ModStart> i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; skb_reset_transport",0
1212,"<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; INIT_WORK ( & sta -> ampdu_mlme. drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_ba_session_work ) ; mutex_init ( & sta -> ampdu_mlme. mtx ) ;",0
1213,<S2SV_ModStart> tp_event ) && p_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } else { if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } else { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } } else { if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT,0
1214,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> interface <S2SV_blank> number\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> interface <S2SV_blank> number\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! epread ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> endpoint <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> skip_normal_probe ; } if (! epread ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> endpoint <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> endpoint <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> endpoint <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""Invalid <S2SV_blank> endpoint <S2SV_blank> descriptor\\n"" ) ; return",0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> env_var ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> env_var ) ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV",0
1217,"<S2SV_ModStart> struct list_head tmplist ; sctp_sk_copy_descendant ( oldsk, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & newsp -> asconf_list, sizeof ( tmplist ) ) ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet",0
1218,"<S2SV_ModStart> O_RDWR ) ; if ( x >= MAX_UINPUT_PATHS ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, NULL ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device",0
1219,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> short sel ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> if (! <S2SV_ModStart>! desc ) return <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; if ( unlikely ( atomic_read ( & user -> inotify_devs ) >= inotify_max_user_instances ) ) { ret = - EMFILE ; goto out_free_uid ; },0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1225,"<S2SV_ModStart> )!= START_CODE_PREFIX ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, 8 ) ; } while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, 8 ) ; } while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
1227,<S2SV_ModStart> ; if ( <S2SV_ModEnd> imethod -> is_inflated <S2SV_ModStart> imethod -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( method -> is_in,0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super ->",0
1231,"<S2SV_ModStart> char * last_elem <S2SV_ModEnd>, * wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) )? l -> l_origin : l -> l_platform ; if ( repl == NULL && repl!= ( const char * ) - 1 ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? NULL : l -> l_origin ) : l -> l_platform ) ; if ( repl!= ( const char * ) - 1 ) ) {",0
1232,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space ; <S2SV_ModStart> ) ; } opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { rcu_assign_pointer ( rp -> opt_space, opt_space ) ; rcu_assign_pointer ( rp -> opt_space, opt_space ) ; rcu_assign_pointer ( rp -> opt_space, final_p ) ; } if ( rcu_dereference_protected ( rp -> opt_space, rcu_dereference ( rp -> opt_space ) ) ) { rcu_assign_pointer ( rp -> opt_space, opt_space ) ; rcu_assign_pointer ( rp -> opt_space, final ) ; rcu_assign_pointer ( rp -> opt_space, final ) ; rcu_assign_pointer ( rp -> opt_space, final ) ; } if ( rcu_dereference_protected ( rp -> opt_space, rcu_dereference ( rp -> opt_space ) ) ) { rcu_assign_pointer ( rp ->",0
1234,"<S2SV_ModStart> drop ; } if ( iph -> ihl == 4 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> optlen < sizeof ( struct ip_options_rcu ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> opt.",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ) ; if ( ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> saddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> saddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> saddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> saddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> saddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> saddr == 0 || ip_hdr ( skb ) -> daddr == 0 ||,0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( vi -> stagemasks == NULL || vi -> stagemasks == NULL || vi -> stagemasks == NULL || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook ] == - 1 || vi -> stagemasks [ info -> groupbook,0
1239,<S2SV_ModStart> -> copied_seq = seq ; tp -> copied_offset = offset ;,0
1240,"<S2SV_ModStart> = 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> err ) ; <S2SV_ModEnd> if ( key_data_in <S2SV_ModStart> NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ].",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; }",0
1243,<S2SV_ModStart> filp ) { return posix_close <S2SV_ModEnd> ( SOCKET_I ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1244,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> ( param, <S2SV_ModEnd> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModStart> ( param, <S2SV_ModEnd> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModStart> ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> lock <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf (",0
1246,"<S2SV_ModStart> } opt = rcu_dereference_protected ( inet_sk ( sk ) -> opt, sock_owned_by_user ( sk ) ) ;",0
1247,<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. data [ 1 ] = intr_info ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. data [ 2 ] = intr_info ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_INTERNAL_,0
1248,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1249,"<S2SV_ModStart> UINT error ; if ( ( error = rdpei_verify_eventId ( s ) ) ) { WLog_ERR ( TAG, ""rdpei_verify_eventId <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_verify_eventId ( s ) ) ) { WLog_ERR ( TAG, ""rdpei_verify_eventId <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_verify_eventId ( s ) ) ) { WLog_ERR ( TAG, ""rdpei_verify_eventId <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_verify_eventId ( s ) ) ) { WLog_ERR ( TAG, ""rdpei_verify_eventId <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_verify_eventId ( s ) ) ) { WLog_ERR ( TAG, ""rdpe",0
1250,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData ->",0
1251,"<S2SV_ModStart> return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) { hugepage_subpool_put_pages ( spool, chg ) ; return - ENOSPC ; } ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from",0
1252,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt ; <S2SV_ModStart> skb ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! ( opt -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (!",0
1253,"<S2SV_ModStart> ; if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
1257,"<S2SV_ModStart> kadm5_policy_ent_rec pol ; osa_princ_ent_rec hist_princ ; <S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; hist_princ = adb. hist_princ ; last_pwd = adb. last_pwd <S2SV_ModStart> last_pwd ) ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTECT_PRINCIPAL ; if ( last_pwd!= adb. last_pwd ) return KADM5_PROTE",0
1258,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> bn_t t ; <S2SV_ModStart> RLC_OK ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len -",0
1259,<S2SV_ModStart> ; if ( stack == NULL ) { yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ; if ( stack!= ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) { yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) { yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModStart> ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) { yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } stack = ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == NULL ) { yr_free ( stack ) ; return ERROR_INSUFFICIENT_MEMORY ; } if ( stack == ( YR_VALUE * ) yr_malloc,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if ( blk_mq_tag_to_rq ( hctx -> tags, off + bit ) -> q == hctx -> queue ) fn ( hctx, rq, data, reserved ) ; } else { <S2SV_ModStart> ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) -> q == hctx -> queue ) fn ( hctx, rq, data, reserved ) ; }",0
1262,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] < 0 ) { continue ; } <S2SV_ModEnd> count [ i <S2SV_ModStart> i ] += <S2SV_ModEnd> cm -> counts,0
1264,"<S2SV_ModStart> { token ++ ; } while ( token [ 0 ] =='<S2SV_blank>') { token ++ ; } while ( token [ 0 ] =='<S2SV_blank>'|| token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } op -> operands_count ++ ; op -> operands [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; op -> operands [ operand ]. shift_amount = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. shift_amount > 63 ) { return false ; } operand ++ ; token = next ; continue ; } switch ( token [ 0 ] ) { case 'w' : op -> operands_count ++ ; op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } op -> operands [ operand ]. reg = r_num_math ( NULL,",0
1265,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> td. cm ; <S2SV_ModStart> -> act_zbin_adj = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above",0
1266,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = <S2SV_ModStart> 0 ) { WSP ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1267,<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ) ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> columns = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSizeType ) ReadBlobLSBShort ( image ) ; image -> rows = ( MagickSize,0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx,",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s [ padlen + 3 ]!= 0x00 ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1271,<S2SV_ModStart> -> u2_frame_num ; if ( ps_dec -> u2_total_mbs_coded > 0 ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ps_dec -> u2_total_mbs_coded ; ps_dec -> u2_total_mbs_coded = ( ps_dec -> u2_total_mbs_coded > 0 )? ps_dec -> u2_total_mbs_coded : 0 ; ps_dec -> u2_total_mbs_coded = ( ps_dec -> u2_total_mbs_coded > 0 ) ; ps_dec -> u2_total_mbs_coded = ( ps_dec -> u2_total_mbs_coded > 0 ) ; ps_dec -> u2_total_mbs_coded = ( ps_dec -> u2_total_mbs_coded > 0 )? ps_dec -> u2_total_mb,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> 0 ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> ( item ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ;",0
1273,"<S2SV_ModStart> int ret ; struct drm_i915_gem_exec_object2 * exec2 ; if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2 = drm_malloc_ab ( sizeof ( * exec2 ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2 == NULL ) { DRM_DEBUG ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - ENOMEM ; } exec2 = drm_malloc_ab ( sizeof ( * exec2 ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2 == NULL ) { DRM_DEBUG ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - ENODEV",0
1275,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> char * path <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> * p ; <S2SV_ModEnd> char * buf <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModStart> ; audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; }",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ] ; char <S2SV_ModEnd> cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModStart> FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; return FALSE ; } <S2SV_ModStart>, & cap_dir, & cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if ( parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dir, & cap_dst, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_",0
1280,"<S2SV_ModStart> rq ) { int cpu ; u64 irq_time ; if ( rq -> skip_clock_update ) { cpu = cpu_of ( rq ) ; irq_time = irq_time_cpu ( cpu ) ; rq -> clock = sched_clock_cpu ( cpu ) ; irq_time = irq_time_cpu ( cpu ) ; if ( rq -> clock < rq -> clock_task ) rq -> clock_task = rq -> clock - irq_time ; } else { cpu = cpu_of ( rq ) ; u64 irq_time ; } if ( rq -> skip_clock_update ) { cpu = cpu_of ( rq ) ; irq_time = irq_time_cpu ( cpu ) ; rq -> clock = rq -> clock ; irq_time = irq_time_cpu ( cpu ) ; sched_irq_time_avg_update ( rq, irq_time ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1281,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> st ) { union blkif_back_rings * blk_rings ; <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; }",0
1283,<S2SV_ModStart> ; if ( <S2SV_ModEnd> entry -> attributes <S2SV_ModStart> KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ),0
1284,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 12 < datao ) || ( datao + 12 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( ( datao + 2 < datao ) || ( o + 2 < 2 ) || ( o + 2 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry )",0
1285,"<S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( framestring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), <S2SV_ModStart> ( shtml, sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof ( htmlstring ), sizeof",0
1286,<S2SV_ModStart> ; ND_TCHECK ( ext_dp -> icmp_ext_offset ) ; <S2SV_ModStart> ; ND_TCHECK ( ext_dp -> icmp_ext_offset ) ; if ( ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset > sizeof ( struct icmp_mpls_ext_object_header_t ) ) { ND_TCHECK ( ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + 1 ) ; if ( ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_ext_offset + ext_dp -> icmp_,0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } ci = d_inode ( dir ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ( ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ; if ( ci ) ci = ci -> ci_keyring_key ; if ( ci && ci -> ci_keyring_key && ( ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ) ci = NULL ; if ( ci ) { spin_lock ( & dentry -> d_lock ) ; cached_with_key = dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ; spin_unlock ( & dentry -> d_lock ) ; dir_has_key = ( ci!= NULL ) ;,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx,",0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a",0
1290,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; <S2SV_ModEnd> # ifdef <S2SV_ModStart> NGIFLIB_INDEXED_ONLY # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line,0
1291,"<S2SV_ModStart> n ) ; DECODELENGTH ( m, p, buf + n ) ; if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> m=%u <S2SV_blank> n=%u)"", m, ( unsigned ) n ) ; goto error ; } if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> m=%u <S2SV_blank> n=%u)"", m, ( unsigned ) n ) ; goto error ; } if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> m=%u <S2SV_blank> n=%u)"", m, ( unsigned ) n ) ; goto error ; } if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> m=%u <S2SV_blank> n=%u)"", m, ( unsigned ) n ) ) ;",0
1292,"<S2SV_ModStart>, message ) { if ( info. scale == ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info -> offsets!= ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ;",0
1293,<S2SV_ModStart> void ) { if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = 0 ; } else if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = 0 ; } else if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = recovery_is_in_recovery_mode ( ) ;,0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 ) ) ;",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> case 4 : DECODELENGTH_CHECKLIMIT ( m, p, buf + n ) ; <S2SV_ModStart> case 5 : DECODELENGTH_CHECKLIMIT ( m, p, buf + n ) ; <S2SV_ModStart> case 6 : DECODELENGTH_CHECKLIMIT ( m, p, buf + n ) ; <S2SV_ModStart> case 7 : DECODELENGTH_CHECKLIMIT ( m, p, buf + n ) ; if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } <S2SV_ModStart> case 8 : DECODELENGTH_CHECKLIMIT ( m, p, buf + n ) ; if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } DECODELENGTH_CHECKLIMIT ( m, p, buf + n ) ; if ( m + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; }",0
1297,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 ihevcd_ref_list ( codec_t * ps_codec, pps_t * ps_pps, sps_t * ps_sps, sps_slice_header_t * ps_slice_hdr, dpb_mgr_t * ps_dpb_mgr, mv_buf_t * ps_mv_buf, dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_buf_t * ps_dpb_mgr = ( dpb_buf_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_buf_mgr = ( buf_mgr_t * ) ps_dpb_mgr -> pv_buf_mgr ; UWORD32 u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = <S2SV_ModStart> PTRACE_SET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = put_user ( ptrace_get_thread_area ( child ) -> tp_value, datap ) ; else ret = <S2SV_ModEnd> put_user ( ptrace_get_syscall",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1300,"<S2SV_ModStart> * item, printbuffer * p <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( child <S2SV_ModStart> ) { names [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( str ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } while ( child ) { names [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; if (! out ) { cJSON_free ( entries ) ; return 0 ; } * out = '{' ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\n' ; * ptr ++ = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart>!= sk ) <S2SV_ModEnd> { sock_poll_wait ( <S2SV_ModStart> wait ) ; <S2SV_ModEnd> if ( unix_recvq_full <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
1303,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 4 <S2SV_ModStart> ] ; quantum. unsigned_value = ( value & 0xffffffff ) ; return ( quantum. signed_value ) <S2SV_ModEnd> ; } <S2SV_null>,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
1305,<S2SV_ModStart> void exit_io_context ( <S2SV_ModEnd> void ) { <S2SV_ModStart> * ioc ; mutex_lock ( & ioc_mutex ) ; <S2SV_ModStart> current ) ; <S2SV_ModEnd> ioc = current <S2SV_ModStart> -> io_context ; mutex_unlock ( & ioc_mutex ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } else { mutex_unlock ( ioc ) ; } <S2SV_ModEnd> put_io_context ( ioc,0
1306,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ; } if ( <S2SV_ModEnd> header -> buffer <S2SV_ModStart>. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ( int ) ptr [ 0 ] ; signalg |= ( int ) ptr [ 1 ] ; if ( ( int ) ptr [ 2 ] ; if ( ( int ) ptr [ 3 ]!= 0xFF || ( int ) ptr [ 4 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ( int ) ptr [ 4 ]!= 0xFF || ( int ) ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ( int ) ptr [ 2 ]!= 0xFF || ( int ) ptr [ 3 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( (,0
1307,"<S2SV_ModStart> data ) { unsigned<extra_id_1>i ; int <S2SV_ModStart> int ret ; if ( xen_pcibk_read_config_word ( dev, offset, value, data ) < 0 ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags &",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * frame ; frame = va_arg ( args, vp9_ref_frame_t * ) ; if ( frame == NULL ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ] ) ; fpl -> count = 0 ;,0
1310,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
1311,"<S2SV_ModStart> -> dwc ; spin_lock ( & req -> lock ) ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; req -> trb = NULL ; spin_unlock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; usb_gadget_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_",0
1312,<S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYSTYPE * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart> : # if defined YYSTACK_RELOCATE <S2SV_ModEnd> { YYTYPE_INT16 * <S2SV_ModStart>,0
1313,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices, <S2SV_ModEnd> [ DISCE_RESUME ] <S2SV_ModStart> DISCE_DESTRUCT ] = sas_destruct_devices <S2SV_ModEnd>, } ;",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_",0
1315,"<S2SV_ModStart> } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; <S2SV_ModStart> curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; if ( uECC_vli_isZero ( p, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num",0
1316,"<S2SV_ModStart> ; trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ; <S2SV_ModStart> ; tooshort : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ;",0
1317,"<S2SV_ModStart> ( sk ) ; struct ip_options_data * inet_opt ; <S2SV_ModStart> ) goto out ; inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ) ) ; if ( inet_opt ) { memcpy ( msg -> msg_name, & inet_opt -> inet_addr, sizeof ( inet_opt -> inet_addr ) ) ; sin -> sin_zero. s_addr = ip_hdr ( skb ) -> saddr ; sin -> sin_family = AF_INET ; sin -> sin_port = inet_opt -> inet_num ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; ip_cmsg_recv_ts_and_drops ( msg, & isk -> inet_cmsg, & isk -> inet_num, & isk -> inet_daddr, & isk -> inet_daddr, & isk -> inet_daddr, &",0
1318,"<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_EXTENTS_UNWRITTEN ; else flags |= EXT4_GET_BLOCKS_CREATE_UNWRITEN | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_lock ( & inode -> i_mutex ) ; if (! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_CREATE_UNWRITEN | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4",0
1319,"<S2SV_ModStart> buf ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; } else { free ( buf ) ; } } }",0
1320,"<S2SV_ModStart> map ; bpf_map_inc <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> [ ] = { ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDe",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ; if ( sizeof ( ipfix_template_elements_std_t ) > size_left ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( sizeof ( ipfix_template_elements_std_t ) > size_left ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( sizeof ( ipfix_template_elements_std_t ) > sizeof ( ipfix_template_elements_std_t ) ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ;",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ; pixm = pixGetColormap ( pixc ) ; pixg = pixGetColormap ( pixg ) ; pixd = pixcmapCreate ( 8 ) ; if (! pixc ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"",",0
1325,"<S2SV_ModStart>, ubits, vbits ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r )",0
1326,<S2SV_ModStart> vf = vp8_mse16x16 ; if ( v_fn_ptr. vf!= vp8_mse16x16 ) { * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; } else { * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; },0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart>, nbits ; if ( msg -> bit + bits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + bits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } <S2SV_ModStart> 8 ) { if ( msg -> bit + nbits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } <S2SV_ModStart> & 7 ; if ( msg -> bit + nbits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } <S2SV_ModStart> 8 ) { if ( msg -> bit + nbits > 32 ) { com_Error ( ERR_DROP, ""bit <S2SV_blank> too <S2SV_blank> short"" ) ;",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; <S2SV_ModStart> -> count ; if ( snd_ctl_find_id ( card, & id ) ) { dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EINVAL ; goto error ; } down_write ( & card -> controls_rwsem ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; return 0 ; }",0
1330,"<S2SV_ModStart> netif_msg_init ( msg_level <S2SV_ModEnd>, NETIF_MSG_DRV | <S2SV_ModStart> NETIF_MSG_PROBE | NETIF_MSG_LINK ) ; dev -> txq_pause. func = usbnet_txq_pause ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> rxq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> rxq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq_resume. data = ( unsigned long ) dev ; dev -> txq",0
1331,"<S2SV_ModStart> char * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
1332,<S2SV_ModStart> ( textview ) ; gtk_text_view_set_text_view_width ( textview ) ; gtk_text_view_set_text_view_height ( textview ) ;,0
1333,<S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) return 1 ; <S2SV_ModStart> * pid ) ; if ( plen > S_HELLO_LEN ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval ) goto err_out ; <S2SV_ModEnd> retval = posix_acl_update_mode <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ) ; err_out : posix_acl_release_mode ( inode, & mode ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ) ; err_out : posix_acl_release ( inode, & mode ) ; <S2SV_ModEnd> break ; case",0
1335,<S2SV_ModStart> ; if (! bin -> methods_list ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin ->,0
1336,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor_multiplier = get_rate_correction_factor_multiplier ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; correction_factor_multiplier = get_rate_correction_factor_multiplier ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE ; value |= TJA1101_CONFIG1_MII_MODE ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; value |= TJA1101_COMM_",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1343,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } if ( left_available ) { if ( xd -> mb_to_bottom_edge < 0 ) { if ( xd -> mb_to_left_edge < 0 ) { if ( y0 + bs <= frame_height ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1",0
1344,"<S2SV_ModStart> ; } else if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> jas_iccprof_t * jas_iccprof_createfrombuf,0
1346,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1347,<S2SV_ModStart> ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1348,"<S2SV_ModStart> * ion_handle_get_by_id ( struct ion_client * client, unsigned int id ) { mutex_lock ( & client -> lock ) ; handle = idr_find_entry ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; return handle? handle : ERR_PTR ( - EINVAL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1349,"<S2SV_ModStart> * cpi, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit ( wb, cm -> bit_depth ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } else { assert ( cm -> profile >= PROFILE_1 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> profile >= PROFILE_1 ) ; vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { assert ( cm ->",0
1350,"<S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_nam"", sizeof ( col_nam ) ) ; strncpy ( col_nam, sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_nam"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_nam"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_nam"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_nam"" ) ) ; strncpy ( col_nam, ""col_nam"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""col_nam"" ) ) ; strncpy ( col_nam",0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart>'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; },0
1352,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart>, i ) )!= TYPE_COMMENT ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [",0
1354,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh",0
1355,"<S2SV_ModStart> == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1 ) ; ind += 9 ; } else if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1 ) ; ind += 9 ; } else if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1 ) ; } else { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank>",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; VALUE rb_schema <S2SV_ModStart> ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else Nokogiri_error_raise ( NULL, error ) ; return Qnil ; } schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; return Qnil ; } rb_iv_set ( rb_schema, ""@errors"",",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma -> vm_start, fbdev -> fb_len, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> ; if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; <S2SV_ModStart> 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; <S2SV_ModStart> 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 6 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 7,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,"<S2SV_ModStart> err = - EBUSY ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_EBPF || type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_EBPF || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; }",0
1364,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len > 0 ) { if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURRO,0
1366,"<S2SV_ModStart> { int v <S2SV_ModEnd>, i ; <S2SV_ModStart> ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( v!= av_mod_uintp2 ( s -> transparent_color_be [ 2 * i ], v ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1368,<S2SV_ModStart> ; } } if ( dt -> vlan_id [ 0 ] < 0 || dt -> vlan_id [ 1 ] < 0 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 ) { dt -> vlan_id [ 0 ] = UINT32_MAX - 1 ; dt -> vlan_id [ 1 ] = UINT32_MAX - 1 ; dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; dt -> vlan_id [ 1 ] = p -> vlan_id [ 1 ] ; dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ;,0
1369,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) & KSZ8851_RXFHBCR_RXBC_MASK ; if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) & KSZ8851_RXFH",0
1370,"<S2SV_ModStart> * n, asdl_seq * decorator_seq, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart>, is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 2 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ; if (! type_comment ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 5 ) )",0
1371,"<S2SV_ModStart> int i ; flush_tlb_mm ( mm ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_none_or_clear_bad ( pte ) ) goto out ; if ( pte_none_or_clear_bad ( pte ) ) goto out ;",0
1372,"<S2SV_ModStart> = - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; if ( error ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, NULL, GFP_KERNEL, & sa, NULL ) ; if ( error ) return error ; } else if ( strcmp ( name, ""exec"" ) == 0 ) { error = aa_setprocattr_exec ( args, arg_size,! AA_ONEXEC ) ; } else { error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, NULL, GFP_KERNEL, & sa, NULL ) ; } } else if ( strcmp ( name, ""current"" ) == 0 ) { if ( strcmp ( command, ""changehat"" ) == 0 ) { error = aa_setprocattr_changehat ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( command, ""permhat"" ) == 0 ) { error = aa_setprocattr_changehat ( args,",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if (! jas_getuint16 ( in, & siz -> caps ) ||! siz -> width ||! siz -> height ||! siz -> width ||! siz -> height ||! siz -> height ||! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\",0
1374,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error (",0
1375,"<S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> * xmi_data ++ ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely ( <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> int error, atomic ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModStart> ; size_t chars = iov_len ( iov, nr_segs ) ; if ( unlikely ( chars > total_len ) ) chars = total_len ; error = ops -> confirm ( pipe, buf ) ; if ( error ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> if ( chars <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ) { if (! ret ) ret = error ; break ; } atomic =! iov_fault_in_pages_write ( iov, chars ) ; if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) do_wake",0
1377,"<S2SV_ModStart> MaxGIFBits ) # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << ( bits - 8 ) ; else datum = ( size_t ) ( code ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; length = 0 ; }",0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> argv [ ] ) { p_fm_config_conx_hdlt hdl <S2SV_ModEnd> ; int instance <S2SV_ModStart> res ) ; if ( ( res = fm_mgr_config_disconnect ( hdl ) )!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> disconnect <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } if ( ( res = fm_mgr_config_connect ( hdl ) )!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } for ( i = 0 ; i < commandListLen ; i ++ ) { if ( strcmp ( command, commandList [ i ]. name ) == 0 ) { if ( strcmp ( command, commandList [ i ]. name ) == 0 ) { return commandList [ i ]. cmdPtr ( hdl, commandList [ i ]. mgr, ( argc - optind",0
1380,"<S2SV_ModStart> size_t max_mem ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif <S2SV_ModStart> ] ; infile = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAXMEM_USAGE ) max_mem = strtoull ( jas_optarg, 0, 10 ) ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : usage ( ) ; break ; } # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) jas_set_max_mem_usage ( max_mem ) ; # endif if ( infile ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\",0
1381,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; } # else for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; } # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; #",0
1383,"<S2SV_ModStart> ( len < needed ||! nl ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> for <S2SV_blank> list_devices\\n"", __func__ ) ; return - EINVAL ; }",0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> int idx, ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( guest_irq >= <S2SV_ModEnd> irq_rt -> nr_rt_entries <S2SV_ModStart> ) ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> ir",0
1386,<S2SV_ModStart> bfqq ) return bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
1387,"<S2SV_ModStart> } else { return rold -> umin_value == U64_MIN && rold -> umax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ; } case SCALAR_VALUE_OR_NULL : if ( rcur -> type!= PTR_TO_MAP_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ==",0
1388,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void * sspi_SecureHandleGetUpperPointer ( SecHandle * handle ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> %p\\n"", __func__, handle ) ; return NULL ; } pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if ( pointer == NULL ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> Invalid <S2SV_blank> sechandle <S2SV_blank> pointer: <S2SV_blank> %p\\n"", __func__, handle ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1389,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
1390,<S2SV_ModStart> out ; } if ( OVL_TYPE_MERGE_OR_LOWER ( old_type ) &&! OVL_TYPE_MERGE_OR_LOWER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } if ( OVL_TYPE_MERGE_OR_LOWER ( old_type ) &&! OVL_TYPE_MERGE_OR_LOWER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } if ( OVL_TYPE_MERGE_OR_LOWER ( old_type ) &&! OVL_TYPE_MERGE_OR_LOWER ( old_type ),0
1391,"<S2SV_ModStart> ; # ifdef USE_MATCH_RANGE_MUST_BE_INSIDE_OF_SPECIFIED_RANGE fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", str, end, ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) s, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) s, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) s, ( int ) s",0
1392,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_highbitdepth ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_highbitdepth ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_highbitdepth ( xd, bsize",0
1393,"<S2SV_ModStart> * skb ; size_t <S2SV_ModEnd> copied, error <S2SV_ModStart> ; copied = min_t ( size_t, size, msg -> msg_namelen ) ; if ( copied > size ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; atm_return ( vcc, skb -> truesize ) ; } if (! ( flags & MSG_PEEK ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; } <S2SV_ModEnd> sock_recv_ts_and_drops (",0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_readers ++ ;,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; int mi_row = mi_row ; int mi_col = mi_col ; BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, b",0
1396,<S2SV_ModStart> -> hw_features |= VIRTIO_NET_HW_CSUM <S2SV_ModEnd> | NETIF_F_SG | <S2SV_ModStart> -> hw_features |= VIRTIO_NET_HW_CSUM <S2SV_ModEnd> | NETIF_F_FRAGLIST ; <S2SV_ModStart> ( csum ) dev -> features |= VIRTIO_NET_HW_CSUM <S2SV_ModEnd> | NETIF_F_SG | <S2SV_ModStart> |= VIRTIO_NET_HW_CSUM <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= VIRTIO_NET_HW_CSUM <S2SV_ModEnd> | NETIF_F_SG | <S2SV_ModStart> -> features |= VIRTIO_NET_HW_CSUM <S2SV_ModEnd> | NETIF_F_FRAGLIST ;,0
1397,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" <S2SV_ModStart> ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ;",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) return __this_address ; <S2SV_ModStart> ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) ) return __this_address ; <S2SV_ModStart> ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( ( be16_to_cpu ( dip -> di_nlink ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( ( be16_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_,0
1401,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ( flags <S2SV_ModStart> VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_E",0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_AS4_PATH : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy ( constr2, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy ( constr1, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; strncpy ( constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liqu",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1409,"<S2SV_ModStart>, & len, file -> f_dentry -> d_inode <S2SV_ModStart>, & len, file -> f_dentry -> d_inode <S2SV_ModStart>, & len, file -> f_dentry -> d_inode <S2SV_ModStart> iovec ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_",0
1410,"<S2SV_ModStart> ; if ( ii >= sizeof ( c -> binary_header. request. key ) || ii >= sizeof ( c -> binary_header. request. body ) ) { fprintf ( stderr, ""\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( ii >= sizeof ( c -> binary_header. request. key ) || ii >= sizeof ( c -> binary_header. request. body ) ) { fprintf ( stderr, ""\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( ii >= sizeof ( c -> binary_header. request. key ) || ii >= sizeof ( c -> binary_header. request. body ) ) { fprintf ( stderr, ""\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( ii >= sizeof ( c -> binary_header. request. key ) || ii >= sizeof ( c -> binary_header. request. body ) ) { fprintf ( stderr, ""\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( ii >= sizeof ( c -> binary_header. request. key ) || ii >= sizeof ( c -> binary_header. request. body ) ) { fprintf ( stderr, ""\\n"" ) ; return - 1 ; }",0
1411,"<S2SV_ModStart> ) ) { if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; } else if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2 ) ; dev_warn ( ddev, ""config <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s,",0
1412,"<S2SV_ModStart>! replace && card -> user_ctl_count >= MAX_USER_CONTROLS && <S2SV_ModStart> - ENOMEM ; ue = snd_ctl_find_id ( card, info -> id. numid ) ; if ( ue && ue -> count < 1 ) return - EINVAL ; access = info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; else access |= SNDRV_CTL_ELEM_ACCESS_TL",0
1413,"<S2SV_ModStart> 3 ) { switch ( parc ) { case 2 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 1 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 2 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 3 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 1 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 2 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 3 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 1 :",0
1414,<S2SV_ModStart> ; if ( ctxt -> mode == X86EMUL_MODE_PROT16 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT64 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT64 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT16 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT64 || ctxt -> mode == X86EMUL_MODE_PROT16 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT16 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT32 || ctxt -> mode == X86EMUL_MODE_PROT64 || ctxt -> mode == X86EMUL_MODE_REAL || ctxt -> mode == X86EMUL_MODE_VM,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1417,"<S2SV_ModStart> 16 ) ; vpx_build_intra_predictors_mby_s ( xd, * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; if ( error16x16 > INT_MAX ) { error16x16 = INT_MAX ; best_mode = mode ; best_sse = sse ; } else { distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN <S2SV_ModEnd> | ENC624J600_ECON2_STRCH ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR4 ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR5 ) ; interface -> macAddr. w [ 3 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR4 )",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; start = ( ( char * ) psf -> header ) + maxlen ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; }",0
1420,"<S2SV_ModStart> -> target_offset == <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> arpt_entry ) && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, X",0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv ) ; } else { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx ->,0
1422,"<S2SV_ModStart> ( vmcs12, CPU_BASED_RDPMC_EXITING <S2SV_ModEnd> ) ; case <S2SV_ModStart> ( vmcs12, CPU_BASED_RDTSC_EXITING <S2SV_ModEnd> ) ; case <S2SV_ModStart> ( vmcs12, CPU_BASED_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_",0
1423,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_motion_search = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> disable_split_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [",0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if ( nf_ct_is_confirmed ( ct ) ) return NF_ACCEPT ; <S2SV_ModStart> ( _dh ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET && test_bit ( IPS_ASSURED_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_REQUEST ) { ct -> proto. dccp. role [ dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; } break ; case CT_DCCP_REQUEST : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp_hdr_seq ( dh ) ; break ; case CT_DCCP_RESPOND : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dcc",0
1425,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( & tx32, 0, sizeof ( tx32 ) ) ;",0
1426,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ),0
1427,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; goodsize = LUAI_MAXSTACK ; } else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; goodsize = LUAI_MAXSTACK ; } else if ( goodsize < L -> stacksize ) { luaD_reallocstack ( L, goodsize, 0 ) ; }",0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart> ; const char <S2SV_ModEnd> * s = <S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; ch = s_kind ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * raw ++ = * raw ++ ; * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( t",0
1430,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ; } if ( strcmp ( option_name, ""encoding-mode"" ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log ( svc_",0
1431,<S2SV_ModStart> -> context ) ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } else { if ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } },0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; linesize = av_adler32_update ( linesize, data, linesize ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; } } av_log ( ctx, AV_LOG_INFO, ""n:%"" PRId64 "" <S2SV_blank> pts:%s <S2SV_blank> pts_time:%s <S2SV_blank> pos:%"" PRId64 "" <S2SV_blank> fmt:%s <S2SV_blank> sar:%d/%d <S2SV_blank> s:%dx%d <S2SV_blank> i:%c",0
1433,"<S2SV_ModStart> ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; fprintf ( mvs, ""\\n""",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> imp_dbh ) ) { if ( imp_dbh -> pmysql == NULL ) { do_error ( dbh, MYSQL_ERRCODE ( imp_dbh -> pmysql ), MYSQL_ERRMSG ( imp_dbh -> pmysql ), MYSQL_ERRMSG ( imp_dbh -> pmysql ) ) ; return FALSE ; } <S2SV_ModStart> imp_dbh ) ) { if ( imp_dbh -> pmysql == NULL ) { do_error ( dbh, MYSQL_ERRCODE ( imp_dbh -> pmysql ), MYSQL_ERRMSG ( imp_dbh -> pmysql ), MYSQL_ERRMSG ( imp_dbh -> pmysql ), MYSQL_ERRMSG ( imp_dbh -> pmysql ), MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_MYSQL_",0
1437,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY (",0
1438,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( struct ieee_802_11_phdr ) ) <S2SV_ModStart> phdr ; } if ( mpdu_str ) memcpy ( mpdu_str, mpdu_str, sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_str ) memcpy ( fd_head -> mpdu_str, sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_str ) memcpy ( fd_head -> mpdu_str, mpdu_str, sizeof ( struct ieee_802_11_phdr ) ) memcpy ( fd_head -> mpdu_str, sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_str ) memcpy ( fd_head -> mpdu_str, sizeof ( struct ieee_802_11_phdr ) ) ; if ( mpdu_str ) memcpy ( fd_head -> mpdu_str, mpdu_str ) ) memcpy ( fd_",0
1439,<S2SV_ModStart> ; sh = s_malloc2 <S2SV_ModEnd> ( hdrlen +,0
1440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> a_val ; UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> Pl",0
1441,"<S2SV_ModStart> + 1 ; } <S2SV_ModStart> hf_keybuffer ) ; if ( end_offset < offset ) { offset = dissect_ndr_uint16uni ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint16uni ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint16uni ( tvb, offset, pinfo, tree, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint16uni ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint16uni ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint16uni ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_",0
1442,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1443,"<S2SV_ModStart> cpi ) { RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( cpi -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { if ( rc -> frames_since_key > cpi -> output_framerate / 2 ) ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key ) ; }",0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
1446,"<S2SV_ModStart> struct hello6 * <S2SV_ModEnd> hellop = ( <S2SV_ModStart> OSPF6HDR_LEN ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str ( ospf6_option_values, ""none"", bittok2str (",0
1447,<S2SV_ModStart> datalen ) { size_t version = <S2SV_ModEnd> * ( unsigned <S2SV_ModStart> * ) data ; if ( version < 1 ) return - ENOTSUPP ;,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & uwbd_mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & uwbd_mutex ) ; <S2SV_ModStart> ; if ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; } <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; mutex_unlock ( & uwbd_mutex ) ;",0
1449,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" {",0
1450,<S2SV_ModStart> ; * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) << bitIdx ) ) ; } else { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) << bitIdx ) ) ; } else { * ptr = ( char ) ( ( col & mask ) << bitIdx ) ) | ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) << bitIdx ; } if ( gfx -> data. flags & JS,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> 32 ] ; MB_MODE_INFO * const p = & cpi -> td. mb. plane [ plane ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = BLOCK_OFFSET ( p -> segment_id, block ) ; const int ref = is_inter_block ( mbmi ) ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] =",0
1452,<S2SV_ModStart>. pSrc ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &= <S2SV_ModStart> ) ) { if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; } else { ipc_unlock_object ( & shp -> shm_perm ) ; } <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; goto out_unlock ; },0
1454,"<S2SV_ModStart> ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
1455,"<S2SV_ModStart> void pointZZ_pMul ( PointZZ_p rop, const PointZZ_p * point, const CurveZZ_p * curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, R0. x, R0. y, R1. x, R1. y, NULL ) ; mpz_init_set ( R0. x, R0. x ) ; mpz_init_set ( R0. y, R0. y ) ; mpz_clears ( R0. x, R0. y, R1. x, R1. y, R0. x, R1. y, NULL ) ; mpz_clears ( R0. x, R0. y, R1. x, R1. y, R1. x, R1. y, NULL ) ; mpz_init_set ( rop -> y, R0. y ) ; mpz_set ( rop -> x, rop -> y ) ; mpz_set ( rop -> y, rop -> y )",0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1459,"<S2SV_ModStart> s ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> s:%d, <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; while ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret <= 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_",0
1460,"<S2SV_ModStart> = NULL ; const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_read ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFree",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> stream s ) { RD_UINT8 <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; in_uint8s ( s, length ) ;",0
1463,"<S2SV_ModStart> type == HASH_KEY_IS_STRING && zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG && zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG && zend_hash_exists ( params, hkey. num, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1464,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; <S2SV_ModStart> vpx_bps = 12 ; if ( strcmp ( _y4m -> chroma_type, ""2"" ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> chroma <S2SV_blank> type <S2SV_blank> for <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return - 1 ; } else if ( strcmp ( _y4m -> chroma_type, ""4"" ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> chroma <S2SV_blank> type <S2SV_blank> for <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } else if ( _y4m -> interlace == 'p' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank>",0
1465,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } <S2SV_ModEnd> if ( otmp",0
1466,"<S2SV_ModStart> { long long directory_table_end <S2SV_ModEnd>, table_start ; <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE )",0
1467,"<S2SV_ModStart> * rule ) { RB_INIT ( & env -> root ) ; <S2SV_ModStart> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { if ( ( eq = strchr ( e, '=' ) ) == NULL ) continue ; if ( len > sizeof ( keybuf ) - 1 ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } } } else { env -> count ++ ; } } <S2SV_ModEnd> return env ;",0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment,",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; <S2SV_ModStart>, mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 1 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 1 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 1 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModStart> ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; write ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; close ( logfile_",0
1471,<S2SV_ModStart> += 8 ; if ( <S2SV_ModStart> += 8 ; if ( <S2SV_ModStart> += 4 ; if ( <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 3 ; } break ; case 5 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 5 ; } break ; case 6 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 6 ; } break ; case 7 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 7 ; } break ; case 8 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 6 ; } break ; case 7 : context -> curY += 6 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context,0
1472,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1473,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; } <S2SV_ModStart> file ) ; <S2SV_ModEnd> mutex_exit ( &",0
1474,<S2SV_ModStart> ; if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode ) ) { if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> st,0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd>, * StartClean <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * t <S2SV_ModEnd>, * StartClean <S2SV_ModStart> ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; free ( argbuf ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' ) t ++ ;",0
1476,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 ip_idents_hashrnd __read_mostly <S2SV_ModStart> ; net_get_random_once ( <S2SV_ModEnd> & ip_idents_hashrnd, <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1477,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ;",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1479,"<S2SV_ModStart> = gecos ; if ( setpwnam ( ctl -> pw, ctl -> newf. full_name ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header ; <S2SV_ModStart> -> it_version ) { if ( max_length < get_unaligned_le32 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _reset_on_ext = 1 ; } else { if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; } iterator -> _arg += sizeof ( uint32_t ) ; if ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg += sizeof,0
1481,"<S2SV_ModStart> int err ; if ( nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; } <S2SV_ModStart>! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && ( iter -> band!= knode -> res -> classid ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } else { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ;",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im, gdImagePtr, <S2SV_ModEnd> - 1, <S2SV_ModStart> le_gd ) ; if ( gdImageEqual ( im, & IM -> red, & IM -> green, & IM -> blue, & IM -> blue ) == FAILURE ) { return ; } ZEND_FETCH_RESOURCE ( im, gdImagePtr, & IM -> blue, - 1, ""Image"", le_gd ) ; if ( gdImageEqual ( im, & IM -> red, & IM -> green, & IM -> blue, & IM -> blue, - 1, ""Image"", le_gd ) ) { int x, y, c ; for ( x = 0 ; x < gdImageSY ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; } if ( gdTrueColor ( im ) ) { int x, y, c ; for ( x = 0 ; x < gdImageSX ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; for ( y",0
1483,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; <S2SV_ModEnd> if ( pass <S2SV_ModStart>. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1484,"<S2SV_ModStart>, error ) ; if ( dbus_name == NULL ) { g_log ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR ) ) ) ) ) ) ) ; g_log ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, ( GLOG_ERROR, (",0
1485,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; vpx_memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { const",0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1487,"<S2SV_ModStart> ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> count ; } kfree ( fpl ) ;,0
1489,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = req_inet -> opt ; rcu_read_unlock ( ) ; if ( opt == NULL || opt -> cipso == 0 ) { rcu_assign_pointer ( req_inet -> inet_opt, NULL ) ; return ; } rcu_assign_pointer ( req_inet -> inet_opt, NULL ) ; opt = req_inet -> opt ; rcu_assign_pointer ( req -> inet_opt, NULL ) ; rcu_assign_pointer ( req_inet -> inet_opt, NULL ) ; rcu_assign_pointer ( req -> inet_opt, NULL ) ; rcu_assign_pointer ( req -> inet_opt, NULL ) ; rcu_assign_pointer ( req_inet -> inet_opt, NULL ) ; rcu_assign_pointer ( req -> inet_opt, NULL ) ; rcu_assign_pointer ( req -> inet_opt, NULL ) ; rcu_assign_pointer ( req -> inet_opt, NULL ) ;",0
1490,"<S2SV_ModStart> * tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1491,<S2SV_ModStart> = VPX_CODEC_OK ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT,0
1492,"<S2SV_ModStart> wqh ) ; if ( is_shared_inode ( ctx ) ) anon_inode_setfd ( ""[timerfd]"", & timerfd_fops, ctx, O_RDWR | ( flags & TFD_SHARED_FCNTL_FLAGS ) ) ;",0
1493,"<S2SV_ModStart> * child, <S2SV_ModEnd> * p ; <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & q -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } unlock_mount_hash ( ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1494,"<S2SV_ModStart>, & len, 0",1
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int,0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth *,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> NULL, fout ) ; send ( huff -> loc [ ch ] <S2SV_ModEnd>, NULL,",0
1499,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> e_mbd ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mi_width <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> crypto_skcipher * tfm_des <S2SV_ModEnd> ; struct scatterlist <S2SV_ModStart> 8 ] ; struct crypto_skcipher * tfm_des2 = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des2 ) ) { rc = PTR_ERR ( tfm_des2 ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } tfm_des2 = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des2 ) ) { rc = PTR_ERR ( tfm_des2 ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des2, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; <S2SV_ModStart> ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"",",0
1503,<S2SV_ModStart> += delta ; else { if ( i > pos && i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason <S2SV_ModStart> : if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 0 ; }",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( <S2SV_ModStart> name ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> <S2SV_ModStart> -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. ptr = NULL, packet -> http_method. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers",0
1507,<S2SV_ModStart> path ) ; if ( error ) goto out ;,0
1508,<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( <S2SV_ModEnd> ( float ) <S2SV_ModStart> ( int ) floor ( pow ( <S2SV_ModEnd> ( float ) <S2SV_ModStart> ( int ) floor ( pow ( <S2SV_ModEnd> ( float ) <S2SV_ModStart> ( int ) floor ( pow ( <S2SV_ModEnd> ( float ),0
1509,"<S2SV_ModStart>, y, Max ( <S2SV_ModEnd> dds_info -> width <S2SV_ModStart> dds_info -> height ) <S2SV_ModEnd>, exception ) <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; SetColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width ) && ( j + i ) < ( ssize_t ) dds_info -> height ) ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width ) ) { if ( ( j + i ) < ( ssize_t ) dds_info -> height ) {",0
1510,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - <S2SV_ModStart> action ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3",0
1512,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> i ; } if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = 1 ; if ( strcmp ( argv [ i ], ""help_file="", 12 ) == 0 ) cfg -> help_file = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 12 ) == 0 ) cfg -> help_line = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 12 ) == 0 ) cfg -> help = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 12 ) == 0 ) cfg -> help_line = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 12 ) == 0 ) cfg -> help_line = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 12 ) == 0 ) cfg -> help_line = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""help_line="", 12 ) == 0 ) cfg -> help",0
1513,"<S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt (",0
1514,"<S2SV_ModStart> ) ) { sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x21 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x12 <S2SV_ModStart> y ) ; sendClean ( <S2SV_ModEnd> ""12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x21",0
1515,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # else # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENO,0
1517,"<S2SV_ModStart> ( pvc ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } <S2SV_ModEnd> if ( type",0
1518,"<S2SV_ModStart> * data ; if (! s_check ( s, 2 ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> stream <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; return ; } <S2SV_ModStart> ) ; if (! s_check ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> stream <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> length=%d, <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_RESPONSE, NULL, 0 ) ; return ; } if ( status == CLIPRDR_ERROR ) { logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> error <S2SV_blank> (type=%d)"", type ) ; cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ANNOUNCE, CLIPRDR_RESPONSE, NULL, 0 ) ; return ;",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l -> <S2SV_ModStart> next ) { memcpy <S2SV_ModEnd> ( l ->,0
1521,<S2SV_ModStart> { if ( ( <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; } if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pvReturn = ( void * ) ( ( ( uint8_t,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return - 1 ; _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ byte * wc + count ] = tmp [ byte * wc + count ] ; # else cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ byte * wc + count ] ; # endif } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < cc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ byte * wc + count ] = tmp [ byte * wc + count",0
1525,"<S2SV_ModStart> { uint16 num_updates ; uint16 left, top, right, bottom, width, height ; <S2SV_ModStart> ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bufsize ) ; <S2SV_ModStart> ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if (",0
1526,"<S2SV_ModStart> } else { if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_INVALID_FORMAT ; } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; vpx_tree_probs_from_distribution ( vpx_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ) ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { vpx_tree_probs_from_distribution ( vpx_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ k ] [ l ] ) ; coef_probs [ i ] [ j ]",0
1528,"<S2SV_ModStart> } ; assert ( name ) ; if ( tcgetattr ( fd, & tc )!= NULL ) { SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; } if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> i",0
1529,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_device * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_state * state = d -> priv ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3,",0
1530,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PART",0
1531,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ] -> mbmi. interp_filter <S2SV_ModEnd> ) ; enum <S2SV_ModStart> int uv_stride ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q4, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ;",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,"<S2SV_ModStart> float * w = get_window ( f, n ) ; if (! w ) return 0",0
1536,"<S2SV_ModStart> data_end ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads, cm -> mi_cols ) ; const int tile_cols = MIN ( cm -> mi_cols, tile_cols ) ; const int tile_rows = MIN ( cm -> mi_rows, tile_rows ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( num_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc",0
1537,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = 0x505244 ; high = get2 ( ) ; wide = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_RawBitDepth = ( ushort ) fgetc ( ifp ) ; fseek ( ifp, 4L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ; fseek ( ifp, 4L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_BayerPattern = ( ushort )",0
1538,"<S2SV_ModStart> -> common ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( cpi, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFIsTiled ( in ) ) { return ( NULL ) ; } <S2SV_ModStart>, & shortv ) ; if ( shortv == config && bitspersample!= 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } TIFFGetField ( in, TIFFTAG_ROWSPERSTRIP, & irps ) ; if (! TIFFIsTiled ( out ) ) { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ; bychunk = ( tw == tilewidth && tl == tilelength ) ; } else { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ; bychunk = ( tw == tilewidth && tl == tilelength ) ; } else { TIFFGetField ( in, TIFFTAG_ROWSPERSTRIP",0
1540,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> detail,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST",0
1543,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_cur_poc ; <S2SV_ModStart> * ps_cur_poc ; <S2SV_ModEnd> ih264d_free_dynamic_bufs ( ps_dec,0
1544,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } <S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } if (! capable ( CAP_SYS_RAWIO ) ) goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) goto out_unlock ; } if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; } if (! capable ( CAP_SYS_RAWIO ) ),0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. congest_packet ) ),0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; return a ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
1548,"<S2SV_ModStart> = 0 ; else { ret = - ENODEV ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1549,"<S2SV_ModStart> { 'S' } <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_INFO, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } <S2SV_ModEnd> s_read ( c <S2SV_ModStart> c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok )",0
1550,"<S2SV_ModStart> int cib_tls_signon ( cib_t <S2SV_ModEnd> * cib, <S2SV_ModStart> ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks ; <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; init_config ( cpi, oxcf ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; memcpy ( cpi -> base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; memcpy ( cpi -> base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; memcpy ( cpi",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1553,"<S2SV_ModStart> -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24",0
1554,"<S2SV_ModStart> case EXPR_NOT : * set_rtrn =! * set_rtrn ; <S2SV_ModStart> case EXPR_ADD : * set_rtrn =! * set_rtrn ; return ok ; case EXPR_SUBTRACT : * set_rtrn =! * set_rtrn ; case EXPR_UNARY_PLUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; return ok ; case EXPR_UNARY_MINUS : * set_rtrn =! * set_rtrn ; return ok ; case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; return false ; case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1557,"<S2SV_ModStart> Image * image ; if ( image_info == ( const ImageInfo * ) NULL ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( image -> exception ) ; return ( Destroy",0
1558,"<S2SV_ModStart> ; if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; } if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> for <S2SV_blank> mainhdr\\n"" ) ; return - 1 ; }",0
1559,"<S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd> ) ; if <S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd> ) ; if <S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd> ) ; if",0
1560,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ; int is_valid ; if ( ( error = git_stream_verify_certificate ( & cert, t -> io ) ) < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error!= GIT_ECERTIFICATE ) { error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
1564,"<S2SV_ModStart>! stream ) { <S2SV_ModEnd> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModStart> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global ->",0
1565,"<S2SV_ModStart> ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opp -> nd_opt_type ), opp -> nd_opt_name ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opp -> nd_opt_name ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", opp -> nd_opt_name ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opp -> nd_opt_name ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values,",0
1566,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( re_ast ) == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ), ""re_ast_get_root_node()"" ) ) ) == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ), ""re_ast_get_root_node()"" ) ) ; yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_",0
1567,"<S2SV_ModStart> ) ) ; if ( key -> key -> key!= NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_expand ( iter -> conn -> dict, iter -> pool, path, key -> key -> key, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; }",0
1568,"<S2SV_ModStart> ; if ( A >= skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len > A - skb -> len ) { kfree_skb ( skb ) ; return 0 ; } nla = nla_find_nested ( nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla -> nla_len > A - skb -> len ) return 0 ; nla = nla_find_nested ( nla, X ) ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ; if ( nla ) return ( void * ) nla - ( void * ) skb -> data ;",0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>""",0
1571,"<S2SV_ModStart> cac_id, priv -> cac_id_len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",0
1572,<S2SV_ModStart> = 0 ; if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; tok -> level = 0 ; } <S2SV_ModStart> = 0 ; if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; tok -> level = MAX_LINE_NUMBER ; } <S2SV_ModStart> = 0 ; if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; tok -> level = MAX_LINE_NUMBER ; } <S2SV_ModStart> = 0 ; if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; tok -> level = MAX_LINE_NUMBER ; if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; tok -> level = MAX_LINE_NUMBER ; } <S2SV_ModStart> = 0 ; if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; tok -> level = MAX_LINE_NUMBER ; } if ( tok -> lineno >= MAX_LINE_NUMBER ) { tok -> lineno = MAX_LINE_NUMBER ; } else { tok -> lineno = MAX_LINE_NUMBER,0
1573,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_del ( av1_cfg ) ; av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_",0
1574,"<S2SV_ModStart> ] = '\\0' ; SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; <S2SV_ModStart> ] = '\\0' ; SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; <S2SV_ModStart> [ r ] = '\\0' ; SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = sc_write_record ( card, SC_ESTEID_PD_SERIAL_NUMBER, buff, sizeof ( buff ), SC_RECORD_BY_REC_NR ) ; SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = sc_select_file ( card, & tmppath, NULL ) ; SC_LOG_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed""",0
1575,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS ) ; ASSERT ( dpbSize,0
1576,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! addr ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (! addrlen ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_E",0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %"" PRIu8 """", length ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModStart> final_p = rcu_dereference <S2SV_ModEnd> ( np -> <S2SV_ModStart> np -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference ( np -> inet_opt, sock_owned_by_user ( sk ) ) ) return rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ) return rcu_dereference ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference ( np -> inet_opt, sock_owned_by_user ( sk ) ) ) return rcu_dereference ( sk -> sk_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) )",0
1580,"<S2SV_ModStart> pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; <S2SV_ModStart>, hdr_size, j ; struct cli_exe_section * exe_sections = NULL ; struct pe_image_data_dir * dirs = NULL ; if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE_JSON if ( cli_json_timeout_cycle_check ( ctx, & pe_json, & toval )!= CL_SUCCESS ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } #",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> | DM9000_EPCR_ERPRR ) <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( DM9000_EPCR ) & DM9000_EPCR_ERRE )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> ( DM9000_EPDRH ) << 8 | dm9000ReadReg ( DM9000_EPDRL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1582,"<S2SV_ModStart> ; if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) striplength, TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) striplength, TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> """,0
1583,"<S2SV_ModStart> new_parent ) { struct cred * cred ; <S2SV_ModStart> rcu_read_lock ( ) ; cred = __task_cred ( child ) ; __ptrace_link ( child, new_parent, cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello ; <S2SV_ModStart> pcmk_ok ) { hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, NULL, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> 3 } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ] ; int <S2SV_ModEnd> quart_frm = MIN <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_",0
1587,"<S2SV_ModStart> ; if ( STREQ ( debug, ""1"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""2"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""3"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""4"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""5"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 3 ; if ( h -> msg",0
1588,"<S2SV_ModStart> ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
1589,"<S2SV_ModStart> ctl_len ) { memcpy ( ctl_buf, msg_compat -> msg_control, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf, msg_compat -> msg_control, sizeof ( struct cmsghdr ) ) ; <S2SV_ModStart> ctl_len ) ; memcpy ( ctl_buf, msg_compat -> msg_control, sizeof ( struct cmsghdr ) ) ; } else if ( ( MSG_CMSG_COMPAT & flags ) && ctl_len ) { err = cmsghdr_from_user_compat_to_ctl ( ctl_buf, ctl + ctl_len ) ; memcpy ( ctl_buf, ctl + ctl_len ) ; memcpy ( ctl_buf, ctl + ctl_len ) ; memcpy ( ctl_buf, msg_compat -> msg_control, sizeof ( struct cmsghdr ) ) ; } else if ( ( MSG_CMSG_COMPAT & flags ) && ctl_len ) { err = cmsghdr_from_user_compat_to_ctl ( ctl_buf, ctl + ctl_len ) ; memcpy ( ctl_buf, ctl + ctl_len ) ; memcpy",0
1590,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one, <S2SV_ModStart>, one, number_planes_filled <S2SV_ModEnd>, one,",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )",0
1592,"<S2SV_ModStart> ) ) { sscanf ( option, "" <S2SV_blank> =\\t,"", & option ) ; ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option",0
1593,"<S2SV_ModStart> user_data ) { struct g_hash_table * client_list = g_hash_table_lookup ( client_list, client -> id ) ; if ( client_list == NULL ) { return ; } <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; g_hash_table_remove ( client_list, client -> id ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> callback_id ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client -> name ) ; g_hash_table_remove ( client_list, client -> callback_id ) ; g_hash_table_remove ( client_list, client -> id ) ; g_hash_table_remove ( client_list, client",0
1594,"<S2SV_ModStart> * uv ; luaL_assert (! iswhite ( thread ) ) ; <S2SV_ModStart> next ) { luaL_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> work ++ ; markvalue ( g, uv -> v ) ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
