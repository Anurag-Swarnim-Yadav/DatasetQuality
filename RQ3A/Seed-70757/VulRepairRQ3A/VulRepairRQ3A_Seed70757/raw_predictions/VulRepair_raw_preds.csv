,raw_predictions,correctly_predicted
0,"<S2SV_ModStart>, n2size ) ; if ( err_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } res_val = json_object_get ( val, ""result"" ) ; if (! res_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } res_val = json_object_get ( val, ""result"" ) ; if (! res_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } if (! res_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } if (! res_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> type <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_TCHECK2 ( * tptr, len )",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> yamdrv_ioctl_mcs ) ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) { kfree ( ym ) ; return - EFAULT ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; kfree ( ym ) ; break ; case SIOCSIFG : if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_io",0
4,<S2SV_ModStart> ; if ( unlikely ( skb_headroom ( skb ) < frag_hdr_sz ) ) goto out ;,0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; } else if ( version == 4 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; } else { time = avio_rb64 ( f ) ; offset = avio_rb32 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> tpg"" ) ; return ERR_PTR ( - ENOMEM ) ;",0
7,"<S2SV_ModStart> writers ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 1 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 2 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> return ; vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ; flush_fp_to_thread ( src ) ; flush_altivec_to_thread ( src ) ; flush_vsx_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"",",0
12,<S2SV_ModStart> ; if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { kfree ( segs ) ; segs = ERR_PTR ( - EINVAL,0
13,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart> PERF_TYPE_SOFTWARE, event_id <S2SV_ModEnd>, & data <S2SV_ModStart> & data, <S2SV_ModEnd> regs ) ;",0
14,"<S2SV_ModStart> { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ) ] ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) break ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + gr",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> 8 ] ; tran_high_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t x0, x1, x2, x3 ; tran_high_t t0, t1, t2, t3 ; tran_high_t x1, x2, x3 ; tran_high_t t0, t1, t2, x3 ; tran_high_t t0, t1, t2, x3 ; tran_high_t t1, t2, x3 ; tran_high_t",0
16,"<S2SV_ModStart> env ) ; if (! env -> prog -> aux ) { kfree ( env -> insn_aux_data ) ; env -> insn_aux_data = vzalloc ( sizeof ( * env -> insn_aux_data ), GFP_KERNEL ) ; env -> insn_aux_data = vzalloc ( sizeof ( * env -> insn_aux_data ), GFP_KERNEL ) ; env -> insn_aux_data = vzalloc ( sizeof ( * env -> insn_aux_data ) ; if (! env -> insn_aux_data ) { kfree ( env -> insn_aux_data ) ; env -> insn_aux_data = vzalloc ( sizeof ( * env -> insn_aux_data ), GFP_KERNEL ) ; env -> insn_aux_data = vzalloc ( sizeof ( * env -> insn_aux_data ) ; env -> insn_aux_data = vzalloc ( sizeof ( * env -> insn_aux_data ) ) ; if (! env -> insn_aux_data ) { kfree ( env -> insn_aux_data ) ; env -> insn_aux_data = vzalloc",0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; } } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> xmode = 0 ; } else if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ;",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> sshdr, cgc -> timeout, IOCTL_RETRIES, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; err = - ENOMEDIUM ; break ; } if ( driver_byte ( result )!= 0 ) { if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; err = - ENOMEDIUM ; break ; } if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; err = - ENOMEDIUM ; break ; } if ( driver_byte ( result )!= 0 ) { if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\",0
19,"<S2SV_ModStart> ( get4 ( ) == 0x48454150 || get4 ( ) == 0x48454280 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( get4 ( ) == 0x48454280 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = clamp ( lf -> filter_level, max_filter_level ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = clamp ( lf -> filter_level, max_filter_level ) ; const",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ; luaL_checkstack ( L, 3, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ; luaL_checkstack ( L, 3, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ; luaL_checkstack ( L, 3, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, limit ) ;",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_mv_component ( vpx_writer <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> sign ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; if ( usehp ) vpx_write ( w, hp, mvcomp -> class0_hp [ fr ] ) ; if ( usehp ) vpx_write ( w, hp, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } else { int i ; const int n = mv_class + CLASS0_BITS - 1 ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ fr ], & mv_fp_encodings",0
23,<S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> rng -> seedsize,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( sp -> sa_addr. pptp. sin_addr ) || sockaddr_len < sizeof ( sp -> sa_addr. pptp. sin_addr ) ) return - EINVAL ; if ( sockaddr_len < sizeof ( sp -> sa_addr. pptp. sin_addr ) ) return - EINVAL ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ;,0
25,<S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_16 <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_32 <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_64 <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_128 ; else if ( blockSize == 64 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_256 ; else if ( blockSize == 128 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_128 ; else if ( blockSize == 256 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_256 ; else if ( blockSize == 512 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_512 ; else if ( blockSize == 1024 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_1024 ; <S2SV_ModStart> == 1024 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_1024 ; else if ( request -> rxBlockSzx > coapClientGetMaxBlockSize ( ) ) request -> rxBlockSzx = COAP_BLOCK_SIZE,0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_SUCCESS ) ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } jas_stream_close ( instream ) ; numcmpts = jas_image_numcmpts ( image ) ; if (! ( fmtid = jas_image_getfmt ( image ) ) ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image =",0
27,"<S2SV_ModStart> esr ) { console_verbose ( ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"", handler [ reason ], esr ) ; die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", regs, 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ; ND_PRINT ( ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%04x <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ) ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ;",0
29,<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf1 ) ; if ( intf2 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf2 -> desc. bNumInterfaces <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> 0 ]. desc. bNumInterfaces <S2SV_ModEnd> ; } <S2SV_null>,0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_pc_to_char ( struct udf_sb * sb, unsigned char * from, int fromlen, unsigned char * <S2SV_ModEnd> to ) { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( elen <S2SV_ModStart> case 3 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 7 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 8 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 9 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ;",0
31,"<S2SV_ModStart> ] ) ; if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto load",0
32,"<S2SV_ModStart> unsigned long flags ; spin_lock_irqsave ( & tgtport -> lock, flags ) ; list_for_each_entry ( assoc, & tgtport -> assoc_list, a_list ) { if ( association_id == assoc -> association_id ) { queue = assoc -> queues [ qid ] ; spin_unlock_irqrestore ( & tgtport -> lock, flags ) ; return NULL ; } } spin_unlock_irqrestore ( & tgtport -> lock, flags ) ;",0
33,"<S2SV_ModStart> goto error ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank>",0
34,"<S2SV_ModStart> ++ ) { if ( sdb_num_set ( sdb, ""entries"", sdb_num_get ( sdb, ""link"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link"", sdb_num_get ( sdb, ""entries"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> key * construct_get_dest_keyring <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return NULL ; } <S2SV_ModStart> dest_keyring ) ; return NULL ; <S2SV_ModEnd> } case KEY_REQKEY_DEFL_DEFAULT <S2SV_ModStart> case KEY_REQKEY_DEFL_THREAD_KEYRING : rcu_read_lock ( ) ; dest_keyring = rcu_dereference ( cred -> thread_keyring ) ; if ( dest_keyring ) { rcu_read_unlock ( ) ; dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring ) ; if ( dest_keyring ) { rcu_read_unlock ( ) ; dest_keyring = key_get ( rcu_dereference ( cred -> user -> session_keyring ) ; rcu_read_unlock ( ) ; dest_keyring = key_get ( rcu_dereference ( cred -> user -> session_keyring ) ; dest_keyring = key_get ( rcu_der,0
36,"<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = set_der_mechs ( minor_status, spcred, sc -> mech_set, & sc -> DER_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = set_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = set_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = set_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes ) ; if ( ret!=",0
37,"<S2SV_ModStart> ; if ( sock_flag ( sk, SOCK_ZAPPED ) ) return - EINVAL ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> l2tp_family!= AF_INET <S2SV_ModEnd> ) return - <S2SV_ModStart> EINVAL ; read_lock_bh ( & l2tp_ip_lock ) ; lock_sock ( sk ) ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out_in_use ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST ) inet -> inet_rcv_saddr = inet -> inet_saddr = 0 ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) inet -> inet_saddr =",0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
39,"<S2SV_ModStart> ( dialog ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" ), RESPONSE_MARK_TRUSTED ) ; } else if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; } else if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), RESPONSE_CANCEL ) ; } else if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; } else if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_",0
40,"<S2SV_ModStart> ; tm = g_time_sub ( t, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm = g_time_sub ( tm, 0, 0 ) ; if ( tm == NULL ) tm =",0
41,"<S2SV_ModStart> strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; }",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> ]. fe = dvb_attach ( m88rs2000_attach, <S2SV_ModEnd> & s421_m88rs2000_config, <S2SV_ModStart> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } info ( ""Failed <S2SV_blank> to <S2SV_blank> attach <S2SV_blank> RS2000/TS2020!"" ) ; return - EIO ;",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w ->",0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null>,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAX_SCANLINE_SIZE || scanlinesizeout > TIFF_MAX_SCANLINE_SIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> many <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; } outp = ( uint8 * ) outbuf ; for ( n = imagewidth ; n -- > 0 ; ) { * outp ++ = * inp ; inp += spp ; } if ( TIFFReadScanline ( in, inbuf, row, 0 ) < 0 &&! ignore ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can\'t <S2SV_blank> read <S2SV_blank> scanline <S2SV_blank> %lu"", ( unsigned long ) row ) ; goto bad ; } outp = ( uint8 * ) outbuf ; for ( n = imagewidth ; n -- > 0 ; ) { * outp ++ = * inp ; inp += spp ; } if ( TIFFWriteScanline ( out, outbuf, row, s ) < 0 &&! ignore ) { TIFFError ( TIFFFileName ( out ), ""Error, <S2SV_blank>",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid",0
49,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_close_system ( & bus ) ; if ( r < 0 )",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { get_page ( buf -> page ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, encr_p_map ) ; map = NULL ; nmap = sizeof ( encr_p_map ) / sizeof ( encr_p_map ) ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; map = NULL ; nmap = sizeof ( integ_p_map ) / sizeof ( dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; nmap = sizeof ( esn_p_map ) / sizeof ( esn_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; map = NULL ; nmap = sizeof ( dh_p_map ) / sizeof ( dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; }",0
54,"<S2SV_ModStart> wp ) { int max_requests = wp -> config -> pm_max_requests ; if ( max_requests < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeds <S2SV_blank> allowed <S2SV_blank> limit"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } if ( max_requests < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeds <S2SV_blank> allowed <S2SV_blank> limit"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } if ( max_requests < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeds <S2SV_blank> allowed <S2SV_blank> limit"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } if ( max_requests < 0 ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeds <S2SV_blank> allowed <S2SV_blank> limit"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int trans_to_still = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { const FIRSTPASS_STATS * position = twopass -> stats_in ; const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; reset_fpf_position ( twopass, position ) ; trans_to_still = 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { int err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags ) ; if ( err ) return err ; handle -> h_err = err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : 0 ; handle -> h_err = <S2SV_ModEnd> jbd2_journal_stop ( handle <S2SV_ModStart> handle ) ; handle -> h_err = <S2SV_ModEnd> jbd2_journal_stop ( handle <S2SV_ModStart> handle ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags & JBD2_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
57,"<S2SV_ModStart> ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf,",0
59,<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ),0
60,"<S2SV_ModStart> 2 ) { switch ( stlv_type ) { case ISIS_SUBTLV_SPB_INSTANCE : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) )",0
61,"<S2SV_ModStart> ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return reply_msg ( c",0
62,<S2SV_ModStart> flags ) ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_,0
63,"<S2SV_ModStart> ) opt ; ND_TCHECK ( mpc -> flags & MP_CAPABLE_C ) ; if ( mpc -> flags & MP_CAPABLE_C ) ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { SYSERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( -",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref [ len ] = '\\0' ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; * out = ( git_pkt *",0
66,<S2SV_ModStart> = ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32,0
67,<S2SV_ModStart> port_dev = NULL ; break ; case SAS_END_DEVICE : error = sas_discover_end_dev ( dev ) ; break ; case SAS_EDGE_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_SATA_PM : spin_lock_irq ( & port -> dev_list_lock ) ; list_del_init ( & dev -> disco_list_node ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_put_device ( dev ) ; break ; case SAS_SATA_DEV : spin_lock_irq ( & port -> dev_list_lock ) ; list_del_init ( & dev -> disco_list_node ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; list_del_init ( & dev -> disco_list_node ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if (! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( dev -> flags & IFF_UP ) return - EBUSY ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( ret ) return ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( ret ) return ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( ret ) return ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk, cmd, arg ) ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; if ( ret ) return ret ;",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq_hdr * ureq <S2SV_ModEnd> ; int req_len <S2SV_ModStart> ) ) { kfree ( qinfo. udata ) ; return - ENOMEM ; } ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = qinfo. udata_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; return - ENOMEM ; }",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num",0
76,"<S2SV_ModStart> = NULL ; if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_find_component ( mxf, component ) ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> component <S2SV_blank> found\\n"" )",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return ret",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"" <S2SV_ModEnd>, psf ->",0
79,"<S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, """,0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,<S2SV_ModStart> * up ; size_t len ; <S2SV_ModStart> rta ) ; len = nla_len ( rta ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } len = nla_len ( rta ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; },0
82,"<S2SV_ModStart> - ENODEV ; for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } break ; } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL",0
83,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ),0
84,"<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_log ( BT_LOG_ERROR, ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"" ) ) ) ) ) ; return ret ; } if ( ret < 0 ) { btif_log ( BT_LOG_ERROR, ( ""BT_LOG ( BT_LOG_ERROR, ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"" ) ) ) ) ) ; return ret ; } if ( ret < 0 ) { btif_log ( BT_LOG_ERROR, ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"", ( ""BT_LOG_ERROR"" ) ) ) ) ; return ret ; }",0
85,"<S2SV_ModStart> (! ( buf = jas_calloc2 <S2SV_ModEnd> ( bufsize, <S2SV_ModStart> ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_calloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_calloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) )",0
86,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_EN,0
87,"<S2SV_ModStart> size ) { netdev_dbg ( vif -> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } if ( gso -> u. gso. type == XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> char * last <S2SV_ModStart> char * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
89,<S2SV_ModStart> ; newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts.,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,<S2SV_ModStart> type_flags ) { struct packet_sock * po = pkt_sk ( sk ) ; <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> if ( type <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( &,0
92,"<S2SV_ModStart> ) ; if ( np ) { memcpy ( newnp, np, sizeof ( struct ipv6_pinfo ) ) ; rcu_read_lock ( ) ; opt = ipv6_dup_options ( newsk, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; rcu_read_unlock ( ) ; sctp_v6_to_sk_daddr ( & asoc -> peer. primary_addr, newsk ) ; newsk -> sk_v6_rcv_saddr = sk -> sk_v6_rcv_saddr ; sctp_v6_to_sk_daddr ( & asoc -> peer. secondary_addr, newsk ) ; newsk -> sk_v6_rcv_saddr = sk -> sk_v6_rcv_saddr ; sctp_v6_to_sk_daddr ( & asoc -> peer. secondary_addr, newsk ) ; newsk -> sk_v6_rcv_saddr = sk -> sk_v6_rcv_saddr",0
93,<S2SV_ModStart> new_page ) ; } kfree ( table ) ;,0
94,"<S2SV_ModStart> int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time",0
95,"<S2SV_ModStart> ; if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols ) ; return Nullav ; } if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_rows ) ; return Nullav ; } if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols ) ; return Nullav ; } if ( imp_sth -> num_rows > imp_sth -> num_rows ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60SetBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R",0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ) { ret <S2SV_ModStart> inode, EXT4_STATE_DIO_UNWRITTEN <S2SV_ModEnd> ) ; goto <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ;",0
100,"<S2SV_ModStart> 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ;",0
101,"<S2SV_ModStart> ) ) { if ( fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (!",0
102,"<S2SV_ModStart> flag ) { vpx_memset ( cm -> pp_limits_buffer, 0, 16 * mb_rows ) ; vpx_memset ( cm -> pp_limits_buffer, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( int mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer",0
103,"<S2SV_ModStart> ptr ) { if ( copy_to_user ( param, ptr, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( * ptr ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; } else if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; }",0
104,"<S2SV_ModStart> skip : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> suid = new -> fsuid = new -> suid ; new -> sgid = new -> fsgid ; new -> securebits |= issecure_mask ( new -> securebits ) ; if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) { audit_log_bprm_fcaps ( bprm, new, old ) ; if (! issecure ( SECURE_NOROOT ) { ret = audit_log_bprm_fcaps ( bprm",0
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> if ( error <S2SV_ModStart> - EBUSY ) <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer ( <S2SV_ModEnd> s, code <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 1 ] )? luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 2 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 3 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( ( c == LUA_SIGNATURE [ 1 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( ( c == LUA_SIGNATURE [ 1 ] )? luaU_undump : luaY_parser ) <S2SV_ModEnd> ) ( L",0
108,<S2SV_ModStart> = 0 ; struct ip_options_rcu * inet_opt <S2SV_ModStart> = 0 ; inet_opt = rcu_dereference ( net -> ipv4. opt ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet -> inet_lock ) ; spin_unlock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ) ; spin_lock_bh ( & inet_opt -> inet_lock ),0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( opt && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; } <S2SV_null>",0
110,"<S2SV_ModStart> dl = kmalloc ( <S2SV_ModEnd> size, GFP_KERNEL",0
111,"<S2SV_ModStart> trunc : ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; if ( ndo -> ndo_vflag > 1 ) { const struct rpl_dio_genoption * opt = ( const struct rpl_dio_genoption * ) & dio [ 1 ] ; rpl_dio_printopt ( ndo, opt, length ) ; } if ( ndo -> ndo_vflag > 1 ) { const struct rpl_dio_genoption * opt = ( const struct rpl_dio_genoption * ) & dio [ 1 ] ; rpl_dio_printopt ( ndo, opt, length ) ; } if ( ndo -> ndo_vflag > 1 ) { const struct rpl_dio_genoption * opt = ( const struct rpl_dio_genoption * ) & dio [ 1 ] ; rpl_dio_printopt ( ndo, opt, length ) ; } if ( ndo -> ndo_vflag > 1 ) { const struct rpl_dio_genoption * opt = ( const struct rpl_dio_gen",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"" <S2SV_ModEnd>, indent_string ( <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, tok2str ( rpki_rtr_pdu_values, ""Unknown"", pdu_type ), pdu_type, pdu_len ) ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" )!= NULL ) { errmsg = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" )!= NULL ) { errmsg = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" ) ; } else { errmsg = ( char_u * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>""",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> int ret, <S2SV_ModStart> ; } write_lock ( & cluster -> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if (! ndo -> ndo_eflag ) isoclns_print ( ndo, p, length, caplen ) ; if (! ndo -> ndo_suppress_default_print ) ND_DEFAULTPRINT ( ( ndo, ""[|null]"" ) ) ; if (! ndo -> ndo_eflag ) atalk_print ( ndo, p, length ) ; if (! ndo -> ndo_eflag ) atalk_print ( ndo, p, length ) ; if (! ndo -> ndo_eflag ) atalk_print ( ndo, p, length ) ; if (! ndo -> ndo_suppress_default_print ) ND_DEFAULTPRINT ( ( ndo, ""[|null]"" ) ) ; if (! ndo -> ndo_eflag ) atalk_print ( ndo, p, length ) ; if (! ndo -> ndo_eflag ) atalk_print ( ndo, p, length ) ; if (! ndo -> ndo_eflag ) atalk_print ( ndo, p, length ) ;",0
119,"<S2SV_ModStart> '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } } for ( ; ; ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } } if ( dest == a -> name ) { if ( separator ) * dest ++ = '/' ; else * dest ++ = '.' ; } if ( dest == a -> name ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" )",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context <S2SV_ModEnd>, UINT16 bits <S2SV_ModStart> { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled",0
121,"<S2SV_ModStart> size_t size ; if ( jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cm",0
122,<S2SV_ModStart> <S2SV_null> <S2SV_null> static tdata_t <S2SV_ModEnd> _TIFFmalloc ( tsize_t <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EBUSY ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } dest = & cmd. cmd. user_info ; src = & ucmd -> cmd. user_info ; break ; case QIB_CMD_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_TID_UPDATE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & ucmd -> cmd. tid_info ; break ; case QIB_CMD_TID_FREE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & u",0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( image -> exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( image -> exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) get_net ( <S2SV_ModEnd> peer ) ;,0
126,<S2SV_ModStart> i ] == '\\r' && i < ( ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( ( int ) header_buf_used && header_buf [ i ] == '\\r' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf [ i ] == '\\n' && i < ( ( int ) header_buf_used && header_buf [ i ] == '\\r' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ),0
127,"<S2SV_ModStart> ; if (! ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_END_LLDP_TLV ) ) goto toobig ; if (! ( POKE_START_LLDP_VLAN ( LLDP_TLV_VLAN_ID ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_END_LLDP_TLV ) ) goto toobig ; if (! ( POKE_START_LLDP_VLAN ( LLDP_TLV_VLAN_ID ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE",0
128,"<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_INDEFINITE_LENGTH ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, datalen, csp, jsp ) ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%z",0
129,<S2SV_ModStart> = 0 ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_unlock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_unlock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_unlock_init ( & sp -> sctp_sk_lock ) ; spin_unlock_init ( & sp -> sctp_sk_lock ) ; spin_unlock_init ( & sp -> sctp_sk_lock ) ; spin_lock_init ( & sp -> sctp_sk_lock ) ; spin_unlock ( & sp -> sctp_sk_lock ) ; spin_unlock_init ( & sp -> sctp_sk_,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; },0
131,"<S2SV_ModStart> -> input_lock, flags ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { kfree ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { kfree ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,"<S2SV_ModStart> file ) ; if ( file -> f_dentry -> d_inode ) { dquot_free_dir ( file -> f_dentry -> d_inode -> d_inode -> i_sb, file -> f_dentry -> d_name. name, file -> f_dentry -> d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_inode -> i_nlink ) ; file_put_nlink ( file -> f_dentry -> d_inode -> d_inode -> i_sb, file -> f_dentry -> d_name. name, file -> f_dentry -> d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_inode -> i_nlink ) ; }",0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n""",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head ; size_t attrlen, bitmap [ 3 ] ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & bitmap ) )!= 0 ) goto out ; if ( unlikely ( attrlen > req -> rq_rcv_buf. len - hdrlen ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, req -> rq_rcv_buf. len - hdrlen ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart> acl_len ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> acl_len ) ; <S2SV_ModEnd> } <S2SV_null>",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > UINT_MAX / frag_hdr_sz ) ) { if,0
138,<S2SV_ModStart> i < to_read && (! gf_is_zero ( tmpName [ i ] ) ) ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if (! gf_is_zero ( tmpName [ i ] ) ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if (! gf_is_zero ( tmpName [ i ] ) ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if (! gf_is_zero ( tmpName [ i ] ) ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if (! gf_is_zero ( tmpName [ i ] ) ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if (! gf_is_zero ( tmpName [ i ] ) ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j <",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szPath, pszFileName ) ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ;,0
144,"<S2SV_ModStart> ; if ( inet -> opt ) { struct ip_options_rcu * inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
145,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
146,"<S2SV_ModStart> eigrp_tlv_at_ext ; } if ( eigrp_tlv_len < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [",0
149,"<S2SV_ModStart> ) ; } if ( * ptr == '/' ) { rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
152,"<S2SV_ModStart> ; final_p = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( IS_ERR ( final_p ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( final_p ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( final_p ) ; sk -> sk_err_soft = - PTR_ERR ( final_p ) ; dst = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( final_p ) ; sk -> sk_err_soft = - PTR_ERR ( final_p )",0
153,"<S2SV_ModStart> = 0.0 ; if (! TIFFGetField ( in, TIFFTAG_NSTRIPS, & nstrips ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_NTILES, & ntiles ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> ntiles <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanlinesize <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> tilewidth <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_TILEHEIGHT, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> tileheight <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank>",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 || strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 || strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype,",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> goto errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> gr_ctx. value = kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory: <S2SV_blank> %d"", sizeof ( gss_union_ctx_id_desc ) ) ; goto errout ; } if ( gr -> gr_ctx. value == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory: <S2SV_blank> %d"", sizeof ( gss_union_ctx_id_desc ) ) ; fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory: <S2SV_blank> %d"", sizeof ( gss_union_ctx_id_desc ) ) ; goto errout ; } if ( gr -> gr_ctx. value == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory: <S2SV_blank> %d"", sizeof ( g",0
159,"<S2SV_ModStart> ; if (! ( flags & EXT4_MB_HINT_GOAL ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; goal = ext4_idx_pblock ( EXT_FIRST_INDEX ( ext_inode_hdr ( inode ) ) ) ; if ( goal > le32_to_cpu ( es -> s_first_data_block ) ) { err = - EIO ; goto out ; } memmove ( bh -> b_data, EXT4_I ( inode ) -> i_data, sizeof ( EXT4_I ( inode ) -> i_data ) ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block (",0
160,"<S2SV_ModStart> verify_checks ( c, <S2SV_ModEnd> preverify_ok, callback_ctx <S2SV_ModStart> preverify_ok, callback_ctx <S2SV_ModEnd> ) ) { <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, cmac, key_size, iv ) ) goto exit ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { memset ( cmac_key, 0, sizeof ( cmac_key ) ) ; memset ( iv, 0, sizeof ( iv ) ) ; memset ( cipher_key, 0, sizeof ( cipher_key ) ) ; memset ( iv, 0, sizeof ( iv ) ) ; memset ( cmac_key, 0, sizeof ( cmac_key ) ) ;",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> nreslevels >= JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> log2_cblk_width <S2SV_ModStart> c -> log2_cblk_height ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; if ( s_alDriver == ALDRIVER_DEFAULT ) { s_alDriver = ALDRIVER_DEFAULT ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; } else { s_alDriver = ALDRIVER_DEFAULT ; } if ( s_alDriver == ALDRIVER_DEFAULT ) { s_alDriver = ALDRIVER_DEFAULT ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; }",0
165,<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ts_status ) ; if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS,0
166,"<S2SV_ModStart> transports ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; sctp_ssnmap_clear ( trans -> ssnmap ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; } } else { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; } else { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) {",0
167,"<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) { pr_err ( ""Invalid <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( procfd, <S2SV_ModEnd> int on_exec, <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/exec"", O_RDWR <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out",0
169,<S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; }",0
172,<S2SV_ModStart> charlen ; } if ( totallen < ITEMSIZE ) { PG_RETURN_ERROR ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror,0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry * * pce, struct mb2_cache * mb2_cache ) { __u32 hash = le32_to_cpu ( header -> h_hash ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache_entry * ce = mb2_cache_entry_find_first ( mb2_cache, inode -> i_sb -> s_bdev, hash ) ; if ( IS_ERR ( ce ) ) { struct buffer_head * bh ; if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_block, le32_to_cpu ( BHDR ( bh ) -> h_refcount ), EXT4_XATTR_REFCOUNT_MAX ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh )",0
174,"<S2SV_ModStart> { gint64 offset <S2SV_ModEnd> ; int pkt_len <S2SV_ModStart> ; pkt_len = parse_cosine_rec_hdr ( & wth -> phdr, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump ( <S2SV_ModEnd> wth -> fh <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
175,"<S2SV_ModStart> = line_end ; if ( line_len == 0 ) { error = add_push_report_pkt ( push, NULL ) ; if ( error == GIT_EBUFS ) { if (! reading_from_buf ) git_buf_put ( data_pkt_buf, line, line_len ) ; error = 0 ; goto done ; } if ( pkt == NULL ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) goto done ; } error = add_push_report_pkt ( push, pkt ) ; if ( error == GIT_EBUFS ) { if (! reading_from_buf ) git_buf_put ( data_pkt_buf, line, line_len ) ; error = 0 ; goto done ; } if ( pkt == NULL ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) goto done ; } error = add_push_report_pkt ( push, pkt ) ; if ( error == GIT_EBUFS ) { if (! reading_from_",0
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( <S2SV_ModStart> left >= n ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } len = s -> packet_length ; if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > ( int ) ( rb -> len - rb -> offset ) ) { SSLerr ( SSL_F_SSL3_READ_N,",0
177,<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. StartIndex ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. StartIndex ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. StartIndex ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette,0
178,"<S2SV_ModStart> if ( copy_from_user ( & hdr, ( void * ) arg, sizeof ( hdr ) ) ) { ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_in, size ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_in ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_in ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank>",0
179,<S2SV_ModStart> int hstartcol ; register jpc_fix_t * dstptr2 ; register jpc_fix_t * srcptr ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dst,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sb -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; },0
183,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface",0
184,"<S2SV_ModStart> ( len < sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( len < sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( len < sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( len < sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( len < sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) return to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; if ( node -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> ci_parent -> ci_parent ) return to_o2nm_cluster ( node -> nd_item. ci_parent -> nd_item. ci_parent -> ci_parent ) ; if ( node -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent -> nd_item. ci_parent ) return to_o2nm_cluster ( node -> nd_item. ci_parent -> nd_item. ci_parent -> ci_parent ) ;,0
186,"<S2SV_ModStart> void nfs_set_open_stateid ( fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> ; nfs_set_open_stateid_locked ( fmode <S2SV_ModEnd>, stateid, <S2SV_ModStart> ; nfs_set_open_stateid_locked ( fmode <S2SV_ModEnd>, stateid,",0
187,"<S2SV_ModStart> 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ast -> codecpar -> sample_rate ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar -> width ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i\\n"", ast -> codecpar -> height ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar -> width ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar -> height ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar -> width ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar -> width ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar -> height ) ; avpriv_request_sample ( avctx, ""Audio <S2SV_blank> compression <S2SV_blank> %i"", ast -> codecpar",0
188,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ;,0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> # ifdef AUTOKEY <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> # ifdef DEBUG_TIMING <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ) ) ) ) ) ) ) ) ) ; } if ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE ( TEMP_FAILURE (",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & n -> mnt_mounts ) ) attach_shadowed ( mnt, parent, & n -> mnt_mounts [ n -> mnt_mount_count - 1 ], shadows ) ; if (! list_empty ( & n -> mnt_mounts [ n -> mnt_mount_count - 1 ] -> mnt_mounts [ n -> mnt_mount_count - 1 ] -> mnt_mounts ) ) touch_mnt_namespace ( n ) ; else if (! list_empty ( & n -> mnt_mounts [ n -> mnt_mounts [ n -> mnt_mount_count - 1 ] -> mnt_mounts [ n -> mnt_mount_count - 1 ] -> mnt_mounts [ n -> mnt_mount_count - 1 ] -> mnt_mounts [ n -> mnt_mount_count - 1 ] -> mnt_mounts [ n -> mnt_mounts [ n -> mnt_mounts [ 0 ] -> mnt_mounts [ n -> mnt_mounts [ n -> mnt_mount",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> usersp = this_cpu_read ( current_rsp ) ; this_cpu_write ( current_rsp, next -> usersp ) ; task_thread_info ( prev_p ) -> saved_preempt_count = this_cpu_read ( __preempt_count ) ; this_cpu_write ( __preempt_count",0
193,"<S2SV_ModStart> dd ) ; g_hash_table_remove ( g_loaded_texts, name ) ; <S2SV_ModStart> ) ; g_hash_table_remove ( g_loaded_texts, name ) ; <S2SV_ModStart> ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ;",0
194,"<S2SV_ModStart> = value ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT ) ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT ) ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT ) ; if ( ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ;",0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> { static char temp <S2SV_ModEnd> [ NFSX_V3FHMAX + <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %",0
197,"<S2SV_ModStart>, int mtu <S2SV_ModEnd>, unsigned int <S2SV_ModStart> flags ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; if (! skb_append_datato_frags ( sk, skb, getfrag, from, ( length - transhdrlen ) ) ) { struct frag_hdr fhdr ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_",0
198,"<S2SV_ModStart> res ) goto fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr,",0
199,"<S2SV_ModStart> } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING",0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> count ) ) return 0 ; if (! xdr_decode_hyper ( p, & args -> len ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> { switch ( <S2SV_ModEnd> ctxt -> op_bytes <S2SV_ModStart> ctxt -> op_bytes ) { case 1 : ctxt -> _eip = ( u8 ) dst ; break ; case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = <S2SV_ModEnd> tvb_captured_length_remaining ( tvb <S2SV_ModStart> offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = g_strdup ( """" ) ; return offset + ( len + 1 ) * 2 ; }",0
205,"<S2SV_ModStart> == READ ) { iocb -> ki_pos += iter -> count ; return __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else if ( iov_iter_rw ( iter ) == WRITE ) { iocb -> ki_pos += iter -> count ; return __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ; if ( ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == - 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == - 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n"", def, strparm ) == - 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == - 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == - 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == - 1 ) || ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == - 1 ) || ( sscanf ( f",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_mmcr0 ( cpuhw,0
209,"<S2SV_ModStart> len ; len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ;",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> * str ; PyObject * o, * fstring_name <S2SV_ModStart> ; Py_ssize_t len <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( kind, data, i ) ) { all_whitespace = 0 ; break ; } } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; str [ 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring_name ) ; Py_DECREF (",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
213,"<S2SV_ModStart> == 0 ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> len ) ; if (! net_read_exact ( s, arg, * len ) ) { printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; return - 1 ; } if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type ) ; * len = plen ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type ) ; return - 1 ; } if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; }",0
215,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( context -> trans, bp, XFS_LOG_ERROR, ""xfs_attr3_leaf_list_int: "", __func__ ) ; xfs_trans_log_buf ( context -> trans, bp, XFS_LOG_ERROR, ""xfs_attr3_leaf_list_int(): <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
216,"<S2SV_ModStart> ( COMPAT_USE_64BIT_TIME ) return __sys_recvmmsg <S2SV_ModEnd> ( fd, <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( fd, <S2SV_ModEnd> ( struct mmsghdr <S2SV_ModStart> ( struct mmsghdr __user *",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret = hns_nic_net_xmit_hw <S2SV_ModStart> skb, & tx_ring_data <S2SV_ModEnd> ( priv, <S2SV_ModStart> tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY",0
221,"<S2SV_ModStart> RAnalOp next_op ; if ( len <= op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; r_strbuf_fini ( & next_op. esil ) ; }",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ; <S2SV_ModStart> -> ft -> accept = prpl_xfer_accept ; px -> ft -> canceled = prpl_xfer_canceled ; px -> ft -> free = prpl_xfer_free ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * user_config <S2SV_ModStart> ; } user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx <S2SV_ModStart> event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec ) return armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ;",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct <S2SV_ModEnd> uid_gid_map * new_map <S2SV_ModStart> return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( ns -> parent, CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current, CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_GID ) ) return true ; if ( ns_capable",0
226,"<S2SV_ModStart> j ++ ) <S2SV_ModEnd> { body [ <S2SV_ModStart> j ] = CHECKED_XCALLOC ( VarLenData, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, body [ j ] -> len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, body [ j ] -> len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf )",0
227,"<S2SV_ModStart> hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> = 0 ; memset ( & hx, 0, sizeof ( * hx ) ) ; if (! hx ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx ) ; return - ENOMEM ; } ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx ) ; return ret ; } if ( ret < 0 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d""",0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart> ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""HardOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""BufOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ;",0
229,"<S2SV_ModStart> princ ) ; if ( c1 == NULL ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), realm -> data, realm -> length ) ; log_badauth ( maj_stat, min_stat, rqstp -> rq_xprt, NULL ) ; goto fail_princ ; } if ( c2 == NULL ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u, <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
230,"<S2SV_ModStart> * bo ; uint32_t temp_size ; if ( temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> render <S2SV_blank> CLs.\\n"" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for",0
231,<S2SV_ModStart> # endif # ifdef HAVE_LIBLZMA_H if ( zip -> zipx_lzma_valid ) { lzma_end ( & zip -> zipx_lzma_stream ) ; } # endif # ifdef HAVE_BZLIB_H if ( zip -> bzstream_valid ) { BZ2_bzDecompressEnd ( & zip -> bzstream ) ; } # endif,0
232,<S2SV_ModStart> -> vm_file ) ; spin_lock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> if ( test_opt <S2SV_ModStart> -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; out_ret : spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; spin_unlock_irq ( & EXT4_I ( inode ) -> i_mmap_sem ) ; spin,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> arg ) { r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\r' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; break ; default : r_return_val_if_fail ( * arg, NULL ) ; } arg ++ ; } if (! * arg ) { r_return_val_if_fail ( * arg, NULL ) ; r_return_val_if_fail ( * arg, NULL ) ; } if (! * arg ) { r_return_val_if_fail ( * arg, NULL ) ; r_return_val_if_fail ( * arg, NULL ) ; break ; default : r_return_val_if_fail ( * arg, NULL ) ; } if (! * arg ) { r_return_val_if_fail ( * arg, NULL",0
235,"<S2SV_ModStart> break ; case 5 : idstr = STR_OR_ID ( t. t_id, ah_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 6 : idstr = STR_OR_ID ( t. t_id, esp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 7 : idstr = STR_OR_ID ( t. t_id, ipcomp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) ; break ; case 8 : idstr = STR_OR_ID ( t. t_id, esp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ;",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } <S2SV_ModEnd> client = gsm_xsmp_client_new",0
237,<S2SV_ModStart> = CHECKSUM_NONE ; skb -> ip_summed = CHECKSUM_UNNECESSARY ;,0
238,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails (",0
239,"<S2SV_ModStart> ; break ; case SO_LINGER2 : v. ling. l_linger2 =!! sock_flag ( sk, SOCK_LINGER2 ) ; break ; case SO_LINGER3 : v. ling. l_linger3 =!! sock_flag ( sk, SOCK_LINGER3 ) ; break ; case SO_LINGER4 : v. ling. l_linger4 =!! sock_flag ( sk, SOCK_LINGER4 ) ; break ; case SO_LINGER2 : v. ling. l_linger2 =!! sock_flag ( sk, SOCK_LINGER2 ) ; break ; case SO_LINGER3 : v. ling. l_linger3 =!! sock_flag ( sk, SOCK_LINGER3 ) ; break ; case SO_LINGER4 : v. ling. l_linger4 =!! sock_flag ( sk, SOCK_LINGER4 ) ; break ; case SO_LINGER4 : v. ling. l_linger4 =!! sock_flag ( sk, SOCK_LINGER4 ) ; break ; case SO_LINGER",0
240,<S2SV_ModStart> ) { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> & RCV_SHUTDOWN ) msg -> msg_flags |= MSG_TRUNC ; copied = skb -> len ; if ( len < copied ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } else { msg -> msg_namelen = 0 ; },0
241,"<S2SV_ModStart> in ) { lpc_err ( 0x534e4554, ""multi_string_alloc_and_expand"" ) ; return NULL ; } if ( len >= MAX_SQLWCHAR_LEN ) { lpc_err ( 0x534e4554, ""multi_string_alloc_and_expand"" ) ; return NULL ; } while ( len < MAX_SQLWCHAR_LEN ) { lpc_err ( 0x534e4554, ""multi_string_alloc_and_expand"" ) ; malloc ( sizeof ( SQLWCHAR ) * ( len + 2 ) ) ; if ( len >= MAX_SQLWCHAR_LEN ) { lpc_err ( 0x534e4554, ""multi_string_alloc_and_expand"" ) ; return NULL ; } while ( len < MAX_SQLWCHAR_LEN ) { lpc_err ( 0x534e4554, ""multi_string_alloc_and_expand"" ) ; malloc ( sizeof ( SQLWCHAR ) * ( len + 2 ) ) ; if ( len >= MAX_SQLWCHAR_LEN ) { lpc_err",0
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> buf, & bufsize <S2SV_ModEnd>, XN_FLAG_SEP_COMMA_PLUS ) <S2SV_ModStart> ; } X509_NAME_oneline_ex <S2SV_ModEnd> ( X509_get_issuer_name ( <S2SV_ModStart>, & bufsize <S2SV_ModEnd>, XN_FLAG_SEP_COMMA_PLUS ) <S2SV_ModStart> ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_",0
244,<S2SV_ModStart> -> npages > KVM_MEM_MAX_NR_PAGES && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM,0
245,"<S2SV_ModStart> 0 ; } if (! err ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ; return copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ; } if (! user_access_begin ( ) ; unsafe_put_user ( signo, & infop -> si_signo, Efault ) ; unsafe_put_user ( info. cause, & infop -> si_code, Efault ) ; unsafe_put_user ( info. pid, & infop -> si_pid, Efault ) ; unsafe_put_user ( info. uid, & infop -> si_uid, Efault ) ; } if (! user_access_begin ( ) ; unsafe_put_user ( info. status, & infop -> si_status, Efault ) ; unsafe_put_user ( info. status, & infop -> si_status, Efault ) ; unsafe_put_user ( info. status, & infop -> si_status, Efault ) ; user_access_end ( ) ;",0
246,"<S2SV_ModStart> ; lock_sock ( sk ) ; if ( msg -> msg_name ) { msg -> msg_name = kstrndup ( msg -> msg_name, sizeof ( * msg -> msg_name ), sizeof ( * msg -> msg_name ) ) ; msg -> msg_namelen = copy_from_user ( msg -> msg_name, sizeof ( * msg -> msg_name ), sizeof ( * msg -> msg_name ) ) ; msg -> msg_name = kstrndup ( msg -> msg_name, sizeof ( * msg -> msg_name ) ) ; msg -> msg_namelen = kstrndup ( msg -> msg_name, sizeof ( * msg -> msg_name ) ) ; msg -> msg_namelen = kstrndup ( msg -> msg_name, sizeof ( * msg -> msg_namelen ), sizeof ( * msg -> msg_name ) ) ; msg -> msg_name = kstrndup ( msg -> msg_name, sizeof ( * msg -> msg_name ) ) ; msg -> msg_namelen = kstrndup ( msg -> msg_name, sizeof ( * msg -> msg_name ) )",0
247,"<S2SV_ModStart> ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> && IN6_IS_ADDR_UNSPECIFIED ( <S2SV_ModStart> -> rip6_dest ) ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> && IN6_IS_ADDR_UNSPECIFIED ( & <S2SV_ModStart> -> rip6_dest ) ) ND_PRINT (",0
248,<S2SV_ModStart> ; if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable (,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; <S2SV_ModStart> interp = iname ; bprm -> interp_file = open_exec ( iname ) ; if ( IS_ERR ( interp_file ) ) { retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; bprm -> file = NULL ; goto _ret ; } if ( fmt -> flags & MISC_FMT_OPEN_BINARY ) { fd_install ( fd_binary, bprm -> file ) ; allow_write_access ( bprm -> file ) ; fput ( bprm -> file ) ; bprm -> file = NULL ; } else { retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; bprm -> interp_data = fd_install ( fd_binary, bprm -> file ) ; fput ( bprm -> file ) ; bprm -> file = NULL ; }",0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModStart> int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iRight - iLeft + 1 > windows_size ) { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft,0
252,"<S2SV_ModStart> user ) { int rc ; rc = cleanup_srcu_struct ( & user -> release_barrier ) ; if ( rc < 0 ) return rc ; rc = cleanup_srcu_struct ( & user -> ipmi_release_barrier ) ; if ( rc < 0 ) return rc ; rc = cleanup_srcu_struct ( & user -> ipmi_release_barrier ) ; if ( rc < 0 ) return rc ; rc = cleanup_srcu_struct ( & user -> ipmi_release_barrier ) ; kref_put ( & user -> refcount, free_user ) ; if ( rc < 0 ) return rc ; rc = cleanup_srcu_struct ( & user -> ipmi_release_barrier ) ; if ( rc < 0 ) return rc ; rc = cleanup_srcu_struct ( & user -> ipmi_release_barrier ) ; if ( rc < 0 ) return rc ; rc = cleanup_srcu_struct ( & user -> ipmi_release_barrier ) ; kref_put ( & user -> ipmi_rc",0
253,"<S2SV_ModStart>!= 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if ( Cmd_Argc ( )!= 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if ( Cmd_Argc ( ) == 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; Com_SetError ( 1, ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; }",0
254,"<S2SV_ModStart> ; int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } mm = mongo_message_create ( 16 + 4 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; if ( mm == NULL ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } mm = mongo_message_create ( 16 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; if ( mm == NULL ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & cursor -> reply ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & mm ) ; if ( res!= MONGO_OK ) { mongo_cursor",0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - 1 ) ; if (! mobj ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - 1 ) ; if (! mobj ) mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) mobj = ERR_PTR ( - ENOMEM,0
256,<S2SV_ModStart> += incr ; if ( delta < incr ) { timer -> it_overrun += 1 << i ; delta -= incr ; } else { timer -> it_overrun += 1 << i ; delta -= incr ; },0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (!",0
258,"<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe <S2SV_ModStart> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } dst_state -> frame [ i ] = dst ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; }",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else { const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; for ( idx = 0 ; idx < num_4x4_w ;",0
260,"<S2SV_ModStart> ; saddr. sin_family = AF_INET ; saddr. sin_addr. s_addr = htonl ( INADDR_UNSPEC ) ; saddr. sin_port = htons ( port ) ; if ( 0 > bind ( sfd, ( struct sockaddr * ) & saddr, sizeof ( saddr ) ) ) { perror ( ""bind()"" ) ; socket_close ( sfd ) ; return - 1 ; } if ( listen ( sfd, 1 ) == - 1 ) { perror ( ""listen()"" ) ; socket_close ( sfd ) ; return - 1 ; } saddr. sin_family = AF_INET ; saddr. sin_addr. s_addr = htonl ( INADDR_ANY ) ; saddr. sin_port = htons ( port ) ; if ( 0 > bind ( sfd, ( struct sockaddr * ) & saddr, sizeof ( saddr ) ) ) { perror ( ""bind()"" ) ; socket_close ( sfd ) ; return - 1 ; } if ( listen ( sfd, 1 ) == - 1 ) { perror ( ""listen()"" ) ; socket_close ( sfd",0
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; if ( r -> iov. iov_len < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; return ; } n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; if ( n < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_base. iov_base. iov_base. iov_base. iov_base. iov_base. iov_base. iov_base. iov_base. iov_",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } f_pdata = & cqspi -> f_pdata [ cs ] ; f_pdata -> cqspi = cqspi ; f_pdata -> cs = cs ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret < 0 ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } f_pdata = & cqspi -> f_pdata [ cs ] ; f_pdata -> cs = cs ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret < 0 ) { dev_err ( dev, ""Couldn\'t <S2SV_blank> determine <S2SV_blank> chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ;",0
264,<S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING_ABANDONING <S2SV_ModEnd> ) { AZ <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) { AZ,0
265,"<S2SV_ModStart> goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } table -> refs [ free ] = 1 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ;",0
266,"<S2SV_ModStart> len < sizeof ( * prep ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { struct id_off * ie ; char c = '<' ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">""",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( usb_dev, 0, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( usb_dev, 0, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( usb_dev, 0, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> pTable -> nModuleArg <S2SV_ModStart> ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } pTable -> azModuleArg = ( char * ) sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; }",0
270,<S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart> } if ( lIsInput ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } <S2SV_ModStart> } if ( lIsInput ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } <S2SV_ModStart> } if ( lIsInput ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } if ( <S2SV_ModStart> ) ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } <S2SV_ModStart> } if ( lIsInput ) { if ( CurrentColorSpace!= cmsSigXYZData ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } if ( CurrentColorSpace!= cmsSigLabData ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; }",0
272,"<S2SV_ModStart> { for ( i = 0 ; i < sec -> size ; i += 4 ) { ut32 addr32 = r_read_le32 ( buf + i ) ; if ( addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { for ( i = 0 ; i < sec -> size ; i += 8 ) { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl >= sizeof ( struct in_addr ) ) ND_",0
274,"<S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], 0, TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], 0, TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], 0, TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ], 0, TWICE_QMF_SYNTH_CHANNELS_NUM",0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_,0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else { struct bfq_data * bfqd = bfqq -> bfqd ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ; if ( unlikely ( tx_credit_exceeded ( vif, txreq. size ) ) ) { netbk_tx_err ( vif, & txreq, ""tx_credit_exceeded"" ) ; continue ; } vif -> tx. req_cons = ++ idx ; memcpy ( & txfrags, txfrags, sizeof ( txfrags ) ) ; if ( unlikely ( work_to_do < 0 ) ) { netbk_tx_err ( vif, & txreq, ""tx_credit_exceeded"" ) ; continue ; } vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx. req_cons ; if ( unlikely ( work_to_do < 0 ) ) { netbk_tx_err ( v",0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int xfrm_dump_policy_done ( <S2SV_ModStart> walk = ( <S2SV_ModEnd> struct xfrm_policy_walk *,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; int nr_frags = shinfo -> nr_frags ; int err, start ; int j, newerr ; pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; if ( unlikely ( newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; index = pending_index ( netbk -> pending_prod ++ ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif )",0
282,<extra_id_0><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null><S2SV_null> <S2SV_null>,0
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) SetImageExtent ( resize_image, resize_image -> rows, exception ) ;",0
284,"<S2SV_ModStart> 0 ) { memset ( hv_msg, 0, sizeof ( * hv_msg ) ) ; memset ( hv_msg, 0, sizeof ( * hv_msg ) ) ; <S2SV_ModStart> 0 ) { memset ( hv_msg, 0, sizeof ( * hv_msg ) ) ; kfree ( hv_msg ) ; kfree ( hv_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg ) ; kfree ( incoming_cn_msg",0
285,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
286,"<S2SV_ModStart> -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( """,0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y <S2SV_ModStart> NULL ; } if ( newpos + x > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x + diffBlockLength > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x + diffBlockLength > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)""",0
288,<S2SV_ModStart> ; if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) e,0
289,"<S2SV_ModStart>. mcast_ifn, sizeof ( d [ 0 ]. mcast_ifn ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ]. mcast_ifn ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ]. mcast_ifn ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memset ( & d [ 2 ], 0, sizeof ( d [ 2 ]. mcast_ifn ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [",0
290,"<S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) )",0
291,<S2SV_ModStart> ssize_t result ; if (! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_,0
292,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> (! fc_may_access <S2SV_ModEnd> ( fc, <S2SV_ModStart> O_RDWR ) ) { if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup )",0
293,"<S2SV_ModStart> queue ) ) { kfree ( disk ) ; disk = NULL ; continue ; } if (! blk_queue_bounce_limit ( disk -> queue, BLK_BOUNCE_HIGH ) ) { kfree ( disk ) ; disk = NULL ; continue ; } blk_queue_bounce_limit ( disk -> queue, BLK_BOUNCE_HIGH ) ; cd -> present = 1 ; cd -> drive = ( * drives [ unit ] ) [ D_PRT ] ) [ D_SLV ] ; if ( ( * drives [ unit ] ) [ D_PRT ] ) [ D_PRT ] ) [ D_SLV ] = 0 ; if ( ( * drives [ unit ] ) [ D_PRT ] ) [ D_PRT ] ) [ D_PRT ] = 1 ; if ( ( * drives [ unit ] ) [ D_PRT ] ) [ D_PRT ] ) [ D_PRT ] ) [ D_SLV ] = 1 ; if ( ( * drives [ unit ] ) [ D_PRT ] ) [ D_PRT ] ) [ D_PRT ] ) [ D_PR",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> break ; case VFF_TYP_BIT : case VFF_TYP_1_BYTE : case VFF_TYP_2_BYTE : case VFF_TYP_4_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE : case VFF_TYP_8_BYTE :,0
296,"<S2SV_ModStart> ; int64_t index_pts = ff_rescale ( itime, i, 10000 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> ict:%d\\n"", index_pts, ict ) ; } if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; } if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d,",0
297,<S2SV_ModStart> srp ) ; if ( srp -> data_len > SG_MAX_DATA_LEN ) { <S2SV_ModStart> srp ) ; if ( srp -> data_len > SG_MAX_DATA_LEN ) srp -> data_len = SG_MAX_DATA_LEN ; <S2SV_ModStart> srp ) ; if ( srp -> data_len > SG_MAX_DATA_LEN ) srp -> data_len = SG_MAX_DATA_LEN ; if ( srp -> data_len > SG_MAX_DATA_LEN ) srp -> data_len = SG_MAX_DATA_LEN ; if ( srp -> data_len > SG_MAX_DATA_LEN ) srp -> data_len = SG_MAX_DATA_LEN ; if ( srp -> data_len > SG_MAX_DATA_LEN ) srp -> data_len = SG_MAX_DATA_LEN ; if ( srp -> data_len > SG_MAX_DATA_LEN ) srp -> data_len = SG_MAX_DATA_LEN ; if ( srp -> data_len > SG_MAX_DATA_,0
298,<S2SV_ModStart> endif # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # <S2SV_ModStart> # endif # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET # if HAVE_DECL_CLONE_NEWNET,0
299,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = & data -> priv_enc_mr_cfg ; if ( priv_enc_mr_cfg -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; } if ( priv_enc_mr_cfg -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; } if ( priv_enc_mr_cfg -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags |= VPX_CODEC_FLAG_HIGHBITDEPTH ; } if ( priv_enc_mr_cfg -> flags & VPX_CODEC_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags &= ~ VPX_CODEC_FLAG_HIGHBITDEPTH ; } if ( priv_enc_mr_cfg -> flags & VPX,0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '\\0' ; kfree ( tmpbuf ) ; return 1 ; } } param = iscsi_check_key ( key, phase, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart>, USEC_INFINITY, <S2SV_ModEnd> UID_INVALID, GID_INVALID <S2SV_ModStart> 0 ) ; if ( t -> last_trigger. realtime == DUAL_TIMESTAMP_NULL ) { t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; } else if ( t -> last_trigger. realtime == DUAL_TIMESTAMP_NULL ) { t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; if ( t -> last_trigger. realtime == DUAL_TIMESTAMP_NULL ) { t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; } else if ( t -> last_trigger. realtime == DUAL_TIMESTAMP_NULL ) { t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ;",0
302,"<S2SV_ModStart> (! ( box = jas_malloc ( sizeof ( jp2_box_t ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo ->",0
303,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart>, Py_ssize_t new_size ) { PyObject * * memo_new ; Py_ssize_t i ; assert ( new_size > self -> memo_size ) ; memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return -",0
304,<S2SV_ModStart> ; int copylen <S2SV_ModEnd> ; bool zerocopy <S2SV_ModStart> ( m && <S2SV_ModEnd> m -> msg_control <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> ) ) { <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> ) ) { <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag ( <S2SV_ModStart> && m -> msg_control <S2SV_ModEnd> && sock_flag,0
305,<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) ; unsigned int <S2SV_ModEnd> packet_len = skb_tail_pointer <S2SV_ModStart> ( offset + ipv6_optlen ( exthdr ) <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> offset += ipv6_optlen <S2SV_ModStart> += ipv6_optlen ( exthdr <S2SV_ModEnd> ) ; * <S2SV_ModStart> nexthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> nexthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; * nexthdr = ( struct ipv6_opt_hdr * ) ( skb_tail_pointer ( skb ) + <S2SV_ModEnd> offset ) ; <S2SV_ModStart> nexthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + <S2SV_ModEnd> offset ) ;,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,<S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias <S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias <S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias <S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias <S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias <S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias <S2SV_ModStart> mbmi. mb. <S2SV_ModEnd> as_int ; mv_bias,0
308,<S2SV_ModStart> ; if ( msg -> msg_namelen > sizeof ( struct virtio_net_hdr ) ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } else { if ( msg -> msg_namelen > sizeof ( struct virtio_net_hdr ) ) { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; } else { msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr ; sctp_addiphdr_t * addr_hdr ; sctp_addip_param_t * asconf_param ; sctp_addiphdr_t * addr_hdr ; sctp_addiphdr_t * addr_param_t ; sctp_addiphdr_t * addr_param_t ; sctp_addip_param_t * asconf_param ; addr_param = ( union sctp_addr_param * ) ( asconf -> skb -> data + length ) ; chunk_len -= length ; err_code = sctp_process_asconf_param ( asoc, asconf, & addr_hdr ) ; if (! err_code ) { sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> param_hdr. length ) ; asconf_param = ( void * ) addr_param + length ;",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n"" <S2SV_ModStart>, ( ""jas_realloc(%p, <S2SV_blank> %zu) <S2SV_blank> -> <S2SV_blank> %p\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined,0
316,"<S2SV_ModStart> msicap ; int ret ; ret = pci_emul_add_capability ( dev, <S2SV_ModEnd> & msicap,",0
317,"<S2SV_ModStart> goto response_done ; } memset ( kvp_data -> data. key, 0, sizeof ( * kvp_data -> data. key ) ) ; memset ( kvp_data -> data. key, 0, sizeof ( * kvp_data -> data. key ) ) ; <S2SV_ModStart> 1 ) ; memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value ) ) ; <S2SV_ModStart> valuelen = utf8s_to_utf16s ( value, strlen ( value ), & kvp_data -> data. value ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; icmsghdrp -> status = HV_S_OK ; response_done : memset ( kvp_data -> data. key, 0, sizeof ( * kvp_data -> data. key ) ) ; memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value )",0
318,<S2SV_ModStart> -> log_ctx ; mutex_lock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ; mutex_unlock ( & d -> mutex,0
319,"<S2SV_ModStart> = OPJ_CLRSPC_SRGB ; } if ( img -> numcomps < 3 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> comps [ 0 ]. dx == 1 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> comps [ 0 ]. dx == 1 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> comps [ 0 ]. dx == 1 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> comps [ 0 ]",0
320,"<S2SV_ModStart> * mbuf = NULL <S2SV_ModEnd> ; long err <S2SV_ModStart> - EINVAL ; size_t <S2SV_ModEnd> ctrls_size = 0 <S2SV_ModStart> case _IOC_NONE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_READ ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl",0
321,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'""",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> ) { return usb_control_msg ( dev -> udev, usb_sndctrlpipe ( dev -> udev, 0 ), RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, indx, 0, data, size, 500 ) ; } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; ++ data ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ;",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct cifsSesInfo * <S2SV_ModEnd> cifs_find_smb_ses ( struct <S2SV_ModStart> cifs_ses_lock ) ; list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } ++ ses -> ses_count ; } write_unlock ( & cifs_tcp_ses_lock ) ; list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } write_unlock ( & cifs_tcp",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; if ( ( cfg -> g_w > VPX_MAX_FRAME_WIDTH || cfg -> g_h > VPX_MAX_FRAME_HEIGHT ) || ( cfg -> g_w > VPX_MAX_FRAME_WIDTH || cfg -> g_h > VPX_MAX_FRAME_HEIGHT ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > VPX_MAX_FRAME_WIDTH || cfg -> g_h > VPX_MAX_FRAME_HEIGHT ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > VPX_MAX_FRAME_WIDTH || cfg -> g_h > VPX_MAX_FRAME_HEIGHT ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0",0
327,"<S2SV_ModStart> ; input ++ ; ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( ptr,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (",0
328,"<S2SV_ModStart> ; if ( vm_flags & VM_NORESERVE ) return 0 ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) < 0 ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ;",0
329,<S2SV_ModStart> new ) { struct <S2SV_ModEnd> key * keyring,0
330,"<S2SV_ModStart> = 0 ; size_t scanned = ( size_t ) 0U ; size_t readnbd = ( size_t ) 0U ; if ( readnbd > ( size_t ) 0U ) { readnbd = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = SSL_read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } readnbd += readnb ; if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) {",0
331,"<S2SV_ModStart> orig ) ; mrb_value <S2SV_ModEnd> fptr_copy = ( <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; if ( fptr_copy == NULL ) { mrb_free ( mrb, fptr_copy ) ; return NULL ; } <S2SV_ModEnd> fptr_orig = io_get_open_fptr <S2SV_ModStart> mrb ) ; if ( fptr_copy == NULL ) { mrb_free ( mrb, fptr_copy ) ; return NULL ; } fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; <S2SV_ModStart> = 0 ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cp",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; if (! is_load_segment_descriptor ( ctxt, sel, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; if (! is_load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; if (! is_load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr, ctxt -> op_bytes ) ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ;",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> width <S2SV_blank> %d <S2SV_blank> height <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_width, log2_band_prec_height ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 || log2_band_prec_width > log2_band_prec_height ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> width <S2SV_blank> %d <S2SV_blank> height <S2SV_blank> %d\\n"", log2_band_prec_width, log2_band_prec_height ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> width <S2SV_blank> %d <S2SV_blank> height <S2SV_blank>",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n"" ) ; return ; } if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n"" ) ; return ; } <S2SV_ModStart> ), "".txt"" ) ; if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n"" ) ; return ; } if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n"" ) ; return ; } if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n"" ) ; return ; } if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n"" ) ; return ; } if (! File_Exists ( filename ) ) { Com_Printf ( ""ERROR: <S2SV_blank> file <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist.\\n""",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t * got_table = calloc ( 1, <S2SV_ModEnd> n_got * sizeof <S2SV_ModStart> ut32 ) ) ; if (! got_table ) { goto out_error ; } obj -> n_got = n_got ; obj -> got_table = got_table ; }",0
339,"<S2SV_ModStart> si_code >= 0 && info -> si_signo == sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) <S2SV_ModEnd> ; } <S2SV_null>",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ),",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( p = ( unsigned char * ) malloc ( 4 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; <S2SV_ModEnd> HashTable * class_hash <S2SV_ModStart> } } if ( php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } <S2SV_ModEnd> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash <S2SV_ModStart> } } if ( php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE",0
343,"<S2SV_ModStart> goto __err ; if ( tu -> queue ) { kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; kfree ( tu -> tread ) ; tu -> tread = NULL ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; }",0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> size - 8 ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; tmp_str = gf_malloc ( sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) return GF_OUT_OF",0
345,<S2SV_ModStart> ; else { if (! ctx -> priv -> alg_priv ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> alg_priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if ( ctx -> priv -> alg_priv -> caps & VPX_CODEC_CAP_ENCODER ) ctx -> err = VPX_CODEC_INCAPABLE ; else if ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ctx -> err = VPX_CODEC_INCAP,0
346,<S2SV_ModStart> cmdline_syslog_name ) ; if ( cmdline_syslog_name == NULL ) { stderr ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; } else { stderr ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US ( US,0
347,"<S2SV_ModStart> ; s -> seekable = ( int ) simple_strtol ( p, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> seekable = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; else s -> seekable = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; if ( s -> filesize == - 1 ) s -> seekable = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; else s -> seekable = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; if ( s -> seekable == - 1 ) s -> filesize = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; else s -> filesize = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; if ( s -> filesize == 2147483647 ) s -> seekable = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; else s -> seekable = ( int ) simple_strtol ( slash + 1, NULL, 10 ) ; if ( s ->",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> i, j <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxh ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ; ++ cb ; ++ cr ; } if ( j < maxw ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g,",0
349,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void nfs4_state_set_mode_locked ( struct nfs4_state * state, fmode_t <S2SV_ModEnd> mode ) { <S2SV_ModStart> FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( mode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; }",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || (",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"" ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) SetImageInfoBlob ( read_info,",0
353,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char lbase [ <S2SV_ModStart> 256 ] ; char ltest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; int nbase = 0 ; int ntest = 0 ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest, ""%255[^\\r\\n]"", strtest ) ; assert ( nbase!= 255 && ntest!= 255 ) ; if ( nbase!= 255 || ntest!= 255 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf (",0
354,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV ; if ( cdc_ncm_select_altsetting ( intf )!= CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; usbnet_link_change ( dev, 1, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 )",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, 1 ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 1 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i",0
357,"<S2SV_ModStart> ; err = check_entry_size ( e, base, limit, hook_entries, underflows, valid_hooks ) ; if ( err ) return err ; for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) { if (! check_hook ( e ) ) { pr_debug ( ""Hook <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if (! check_underflow ( e ) ) { pr_debug ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } } else { if (! check_underflow ( e ) ) { pr_debug ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ;",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x <S2SV_blank> is <S2SV_blank> not <S2SV_blank> chunky"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length - 1 ; } if ( caplen > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ;",0
360,<S2SV_ModStart> q ) { snd_seq_timer_stop ( q -> timer ) ; snd_seq_timer_close ( q -> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_timer_stop ( q -> timer ) ; snd_timer_stop ( q -> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ;,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int from, to ; if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; error = gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( unlikely ( error ) ) goto out ; mark_inode_dirty ( inode ) ; brelse ( dibh ) ; out : return error ;",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) ||! vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; verified = 1 ; break ; } } if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; verified = 1 ; break ; } } if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_N",0
364,"<S2SV_ModStart> xfs_attr_leaf_name_local_t * name_loc ; memset ( name_loc, 0, sizeof ( * name_loc ) ) ; if ( name_loc -> namelen!= sizeof ( * name_loc ) ) { xfs_trans_log_inode ( mp -> m_ddev_targp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUP",0
365,"<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, <S2SV_ModEnd> GFP_KERNEL ) ) <S2SV_ModStart> - ENOMEM ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_TXEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; <S2SV_ModStart> miux_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; <S2SV_ModStart> rw_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; skb = llcp_allocate_pdu ( sock, LLCP_PDU_CONNECT, size ) ; if ( skb == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; skb = llcp_allocate_pdu ( sock, LLCP_PDU_CONNECT, size ) ; if ( skb == NULL",0
367,"<S2SV_ModStart> void ) { <S2SV_ModEnd> struct monitor * <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_compress_alloc_func * ) mm_zalloc, ( ssh_packet_compress_free_func * ) mm_zfree ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS",0
369,"<S2SV_ModStart> * chan ; jas_uint16 numchans ; jas_uint16 type ; jas_uint16 assoc ; if ( jas_getuint16 ( in, & numchans ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) )",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
371,"<S2SV_ModStart> ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_get ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_is_held ( & net -> ipv4. icmp_cache, lockdep_get (",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo",0
373,<S2SV_ModStart> 0 ; } skb_dst_drop ( skb ) ;,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SET",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> s ) ) { if ( dlen < 2 ) break ; if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else { if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; },0
378,"<S2SV_ModStart> 1 ) ) { if ( off + bit >= ( 1 << bt -> bits_per_word ) ) { fn ( rq, data, reserved ) ; } else { if ( off + bit >= ( 1 << bt -> bits_per_word ) ) { fn ( rq, data, reserved ) ; } off += ( 1 << bt -> bits_per_word ) ; } if ( off >= ( 1 << bt -> bits_per_word ) ) { fn ( rq, data, reserved ) ; } off += ( 1 << bt -> bits_per_word ) ; } if ( off >= ( 1 << bt -> bits_per_word ) ) { if ( off >= ( 1 << bt -> bits_per_word ) ) { fn ( rq, data, reserved ) ; } off += ( 1 << bt -> bits_per_word ) ; } if ( off >= ( 1 << bt -> bits_per_word ) ) { fn ( rq, data, reserved ) ; } off += ( 1 << bt -> bits_per_word ) ; }",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if (! skb_is_nonlinear ( skb ),0
382,"<S2SV_ModStart> -> open_flags ) ; if ( arg -> fmode & FMODE_WRITE ) { xdr_encode_fmode ( xdr, arg -> fmode, & arg -> fmode ) ; return ; } <S2SV_ModStart> -> fmode ) ; if ( arg -> fmode & FMODE_READ ) { xdr_encode_fmode ( xdr, arg -> fmode, & arg -> fmode ) ; xdr_encode_fmode ( xdr, & arg -> fmode ) ; } else { xdr_encode_fmode ( xdr, arg -> fmode, & arg -> fmode ) ; xdr_encode_fmode ( xdr, & arg -> fmode, & arg -> fmode ) ; if ( arg -> fmode & FMODE_WRITE ) { xdr_encode_fmode ( xdr, arg -> fmode, & arg -> fmode ) ; xdr_encode_fmode ( xdr, & arg -> fmode ) ; } else { xdr_encode_fmode ( xdr, & arg -> fmode ) ; }",0
383,"<S2SV_ModStart> ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x""",0
384,"<S2SV_ModStart> } if ( imagelength < tile_buffsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", imagelength ) ; exit ( - 1 ) ; } if ( imagewidth < tile_buffsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> width <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", imagewidth ) ; exit ( - 1 ) ; } if ( imagelength < tile_buffsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> width <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", imagelength ) ; exit ( - 1 ) ; } if ( imagewidth < tile_buffsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> width <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tile_buffsize ) ; exit ( - 1 ) ; } if ( imagelength < tile_buffsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Image <S2SV_blank> width <S2SV_blank> exceeds <S2SV_blank> the",0
385,"<S2SV_ModStart> }, # if defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&! defined ( __i386__ ) &&",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ; } return <S2SV_ModEnd> error ; },0
387,<S2SV_ModStart> struct o2nm_cluster * cluster <S2SV_ModEnd> = to_o2nm_cluster_from_node ( <S2SV_ModStart> cluster -> cl_has_local && <S2SV_ModEnd> cluster -> cl_local_node <S2SV_ModStart> return - EBUSY ; <S2SV_ModEnd> if ( tmp <S2SV_ModStart> cluster -> cl_has_local && <S2SV_ModEnd> cluster -> cl_local_node <S2SV_ModStart> cluster -> cl_local_node!= O2NM_INVALID_NODE_NUM ; node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; },0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA *",0
389,<S2SV_ModStart> : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case 0x99 : case,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } error = sctp_do_sm ( net, SCTP_EVENT_T3_RTX, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) asoc -> base. sk -> sk_err = - error",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fflush ( stdout ) ;",0
393,"<S2SV_ModStart> trunc ; ND_TCHECK_16BITS ( lshp -> ls_length ) ; ND_TCHECK_32BITS ( lshp -> ls_router ) ; ND_TCHECK_16BITS ( lshp -> ls_age ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank>",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart>. length ) return 0 ; memcpy ( & rates, p + offset, sizeof ( rates ) ) ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( rates ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( ds ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) )",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; } else { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( <S2SV_ModEnd> tbuf, buf <S2SV_ModStart> sz ) ; if ( tbuf == NULL ) { RBinError ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_str",0
398,"<S2SV_ModStart> err ; mm_segment_t old_fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""proc"", MS_NODEV | MS_NOEXEC | MS_NOSUID, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS_NOEXEC | MS_NOSUID | MS_RDONLY, NULL }, { LXC_AUTO_PROC_RW, ""proc"", ""proc"", MS_",0
400,"<S2SV_ModStart> ; } } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client, & c -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( ntohs ( portof ( & md -> iface -> ip_addr ) ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no",0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> { if ( g_xgmac_stats_string && g_xgmac_stats_string [ 0 ] =='<S2SV_blank>') return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( g_xgmac_stats_string && g_xgmac_stats_string [ 0 ] =='<S2SV_blank>') return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( g_xgmac_stats_string && g_xgmac_stats_string && g_xgmac_stats_string [ 0 ] =='<S2SV_blank>') return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( g_xgmac_stats_string && g_xgmac_stats_string [ 0 ] =='<S2SV_blank>') return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( g_xgmac_stats_string && g_xgmac_stats_string && g_xgmac_stats_string [ 0 ] =='<S2SV_blank>') return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( g_xgmac,0
404,<S2SV_ModStart> == 1 ) return <S2SV_ModEnd> ( ( image <S2SV_ModStart> / 8 ) <S2SV_ModEnd> ; else return,0
405,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> err ) ; p_dev -> fd = - 1 ; } else if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> err ) ; p_dev -> fd = - 1 ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> err ) ; p_dev -> fd = - 1 ; } else { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> err ) ; p_dev -> fd =",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } alt = alt -> desc. bNumEndpoints ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EIN",0
407,"<S2SV_ModStart> ; const char * name = d -> name ; struct device * dev = & d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dvb_usbv2_exit ( d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME <S2SV_ModEnd>, name ) <S2SV_ModStart> d ) ; dev_dbg ( & dev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name )",0
408,<S2SV_ModStart> { xstep = JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> vsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> hsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> hsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> vsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> vsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> vsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> hsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> vsamp * JAS_DIV_ROUND_UP <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> vsamp * JAS_DIV_UP <S2SV_ModEnd> ( pirlvl ->,0
409,"<S2SV_ModStart> target_enc ) { cpat = ( UChar * ) conv_encoding ( ci -> pattern_enc, ci -> syntax, pattern, pattern_end, cpat, cpat_end ) ; if ( IS_ERR ( cpat ) ) return r ; cpat_end = ( UChar * ) conv_encoding ( ci -> syntax, pattern_end, cpat, cpat_end ) ; if ( IS_ERR ( cpat_end ) ) { r = ONIGERR_MEMORY ; goto err2 ; } * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_NULL ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> target_enc, ci -> syntax, ci -> syntax ) ; if ( r!= 0 ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) { r = ONIGERR_MEMORY ; goto",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> SyncAuthenticPixels ( Image <S2SV_ModStart> : { register Quantum index ; ssize_t bit ; ssize_t x ; register Quantum * q ; register Quantum index ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum",0
411,"<S2SV_ModStart> ndo, const <S2SV_ModEnd> u_char * tptr <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip4addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip4addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip4addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s",0
412,"<S2SV_ModStart> desc_struct ss ; <S2SV_ModEnd> int usermode ; <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; cs. dpl = 3 ; ss. dpl = 3 ; ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data ) ; switch ( ( msr_data & 0xfffc ) == 0x0 ) { case X86EMUL_MODE_PROT32 : cs_sel = ( u16 ) ( msr_data + 16 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; cs_sel |= SELECTOR_RPL_MASK ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> _eip = * reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC",0
413,"<S2SV_ModStart> ; return sprintf_safe <S2SV_ModEnd> ( buf, <S2SV_ModStart> -> driver_override ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
414,"<S2SV_ModStart> ; BIO * <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> ) { tmpout = BIO_new ( BIO_s_null ( ) ) ; if ( tmpout == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( tmpout == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; if ( tmpout == NULL ) { BIOerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; break ; } if ( BIO_method",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> ii = tree <S2SV_ModStart> b ) ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart> st. st_mode & ( S_IXUGO | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP |,0
418,"<S2SV_ModStart> ; switch ( AF_UNSPEC ( af ) ) { case AF_UNSPEC : strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; protoname = ""unix"" ; break ; case AF_UNIX : strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0",0
419,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
420,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) err = - ENXIO ; else err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( err < 0 ) return err ; if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) goto out ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event\\n"" ) ; return -",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; struct hstate * h = hstate_vma ( vma ) ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ;",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string,",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; if ( manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, t -> last_trigger. realtime, UID_INVALID, GID_INVALID, 0 ) ; if ( error!= SD_BUS_ERROR_NULL ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; } else { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> output ) { const int16_t * x0 = input [ 15 ] ; const int16_t * x1 = input [ 0 ] ; const int16_t * x2 = input [ 13 ] ; const int16_t * x3 = input [ 4 ] ; const int16_t * x4 = input [ 5 ] ; const int x6 = input [ 7 ] ; const int x8 = input [ 8 ] ; const int x9 = input [ 9 ] ; const int x10 = input [ 5 ] ; const int x12 = input [ 3 ] ; const int x13 = input [ 12 ] ; const int x14 = input [ 1 ] ; const int16_t x15 = input [ 14 ] ; s0 = x0 * cospi_1_64 + x1 * cospi_31_64 ; s1 = x0 * cospi_1_64 + x2 * cospi_27_64 ; s2 = x1 * cospi_5_64 + x3 * cospi_27_64 ; s3 = x,0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif,0
426,"<S2SV_ModStart> MODE_INFO * cur_mi <S2SV_ModEnd>, int b",0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; memset ( opt2 + 1, 0, sizeof ( * opt2 ) ) ; <S2SV_ModStart> tot_len ) ; memset ( opt2 + 2, 0, sizeof ( * opt2 ) ) ;",0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; } fprintf ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"", controller, cgdir, path ) ; if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
431,"<S2SV_ModStart> MNT_MARKED ) ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_sb = sb ; mnt -> mnt_root = dget ( root ) ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & sb -> s_mounts ) ; unlock_mount_hash ( ) ;",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; } if ( trans -> t_trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; } if ( trans -> t_trans == trans ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; } if ( trans -> t_trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; } if ( trans -> t_trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> many <S2SV_blank> EAPOL <S2SV_blank> keys"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> many <S2SV_blank> EAPOL <S2SV_blank> keys"", ""Too <S2SV_blank> many <S2SV_blank> EAPOL <S2SV_blank> keys"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> many <S2SV_blank> EAPOL <S2SV_blank> keys"", ""Too <S2SV_blank> many <S2SV_blank> EAPOL <S2SV_blank> keys"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HAND",0
435,"<S2SV_ModStart>! i8042_notimeout ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> %d\\n"", str, data ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> %d\\n"", str, data ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; return IRQ_NONE ; }",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag > 1 ) && ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag > 1 ) && ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( n",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen <S2SV_ModStart> newExtIndex ; } if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int ( <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; const int bs = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int hbs = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; int bw, bh ; if ( bw == bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw == bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs,",0
439,"<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) { serverPanic ( ""Client <S2SV_blank> close <S2SV_blank> after <S2SV_blank> replies <S2SV_blank> are <S2SV_blank> not <S2SV_blank> allowed"" ) ; } if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) { serverPanic ( ""Client <S2SV_blank> close <S2SV_blank> after <S2SV_blank> replies <S2SV_blank> are <S2SV_blank> not <S2SV_blank> allowed"" ) ; } if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) { serverPanic ( ""Client <S2SV_blank> close <S2SV_blank> after <S2SV_blank> replies <S2SV_blank> are <S2SV_blank> allowed"" ) ; } if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) { serverPanic ( ""Client <S2SV_blank> close <S2SV_blank> after <S2SV_blank> replies <S2SV_blank> are <S2SV_blank> not <S2SV_blank> allowed"" ) ; } if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) { serverPanic ( ""Client <S2SV_blank> close <S2SV_blank> after <S2SV_blank> replies <S2SV_blank> are <S2SV_blank> not <S2SV_blank> allowed"" ) ; } if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) { serverPanic ( ""Client <S2SV_blank> close <S2SV_blank> after <S2SV_blank> replies <S2SV_blank> are <S2SV_blank> allowed"" ) ; }",0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH,0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> = - 1 <S2SV_ModStart> ; if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; <S2SV_ModEnd> return ( ret",0
442,<S2SV_ModStart> NULL ) ; rv = <S2SV_ModEnd> gdImageGifCtx ( im <S2SV_ModStart> out ) ; if ( rv ) return rv ; rv = <S2SV_ModEnd> gdDPExtractData ( out,0
443,<S2SV_ModStart> cred ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; if (! ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if (! p ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL )",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth. password ) ; TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request.",0
446,"<S2SV_ModStart> rctx -> image_width = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 7 ] ) ; rctx -> interlaced = ( int ) ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ; has_local_ct = ( int ) ( ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] >> 6 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ; } if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; if (! rctx -> has_transparency ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; } if ( rctx -> has_transparency ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = usb_control_msg ( pegasus -> usb, usb_sndctrlpipe ( pegasus -> usb, 0 ), PEGASUS_REQ_SET_REGS, 0, indx, buf, size, 100 ) ; if ( ret < 0 ) { netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; } ret = usb_control_msg ( pegasus -> usb, usb_sndctrlpipe ( pegasus -> usb, 0 ), PEGASUS_REQ_SET_REGS, 0, indx, buf, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d",0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> static mod_ty <S2SV_ModEnd> Module ( asdl_seq <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>,0
450,"<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( dev -> port ) ; sas_unregister_common_dev ( port, dev ) ; return ; } if ( test_bit ( SAS_SATA_DEVICE, & dev -> flags ) ) { spin_lock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; sas_unregister_common_dev ( port, dev ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_irq ( & port -> sas_dev_wq ) ; spin_unlock_ir",0
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } # else if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ;",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> code ) { krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } code = verify_s4u_x509_user_nonce ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; }",0
454,"<S2SV_ModStart> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModEnd> * r, <S2SV_ModStart> outbuf ) ; if ( scsi_disk_emulate_read_toc ( r ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd.",0
455,<S2SV_ModStart> cur_pic. f || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || <S2SV_ModStart> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. pix_fmt == FF_PIXEL_FMT_YUV420P || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> { if ( rm -> m_inc. i_hdr. h_flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; } if ( hdr_off || sg || off ) { BUG_ON ( hdr_off || sg || off ) ; rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & rm -> m_inc ) ; rds_send_drop_acked ( conn, be64_to_cpu ( rm -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc )",0
457,"<S2SV_ModStart> ) return 0 ; if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; ext_block = ( struct grub_ext4_extent_header * ) buf ; if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; ext_block = ( struct grub_ext4_extent_header * ) buf ; }",0
458,"<S2SV_ModStart> ) ) { ret = - ENOKEY ; goto error2 ; } if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } ret = key_permission ( key_ref, KEY_POSITIVE ) ; if ( ret!= 0 ) goto error2 ; if ( ret!= - EACCES ) goto error2 ; if (! is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",0
459,"<S2SV_ModStart> ) { ND_TCHECK <S2SV_ModEnd> ( * mh <S2SV_ModStart> 8 ) ; ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; ND_PRINT ( ( ndo, ""Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ) ; ND_PRINT ( ( ndo, ""Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"" ) ) ) ; ND_PRINT ( ( ndo, ""Cookie=%08x:%08x"", type == IP6M_CAREOF_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] )",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
461,"<S2SV_ModStart> hmi_data ; uint32_t <S2SV_ModEnd> hmi_bpm = 0 <S2SV_ModStart> ; } * note = NULL ; UNUSED ( hmi_size ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION",0
462,<S2SV_ModStart> -> id ; if ( * addr_len > sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; return - EINVAL ; } if ( * addr_len > sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; haddr -> hci_family = AF_BLUETOOTH ; haddr -> hci_dev = hdev -> id ; release_sock ( sk ) ; return 0 ; } if ( * addr_len > sizeof ( * addr ) ) { * addr_len = sizeof ( * addr ) ; * addr_len = sizeof ( * addr ) ; * addr_len = sizeof ( * addr ) ; * addr_len = sizeof ( * addr ) ; * addr_len = sizeof ( * addr ) ; * addr_len = sizeof ( * addr ) ; * addr_len = sizeof ( * addr ) ; return 0 ; },0
463,<S2SV_ModStart> -> i_iget5_offset ; fh32 [ 1 ] = <S2SV_ModStart> -> i_iget5_block ; fh32 [ 2 ] = ei -> i_iget5_offset ; fh32 [ 3 ] = ei -> i_iget5_offset ; fh32 [ 4 ] = ei -> i_iget5_blocks ; fh32 [ 5 ] = ei -> i_iget5_blocks ; fh32 [ 6 ] = ei -> i_iget5_blocks ; fh32 [ 7 ] = ei -> i_iget5_blocks ; fh32 [ 8 ] = ei -> i_iget5_offsets [ ei -> i_iget5_offsets [ ei -> i_iget5_blocks ] ; fh32 [ 9 ] = ei -> i_iget5_offsets [ ei -> i_iget5_blocks ] ; fh32 [ 10 ] = ei -> i_iget5_offsets [ ei -> i_iget5_offsets [ ei -> i_iget5_blocks ] ; fh32 [ 9 ] = ei -> i_iget5_offsets [ ei -> i_iget5_offsets [ ei -> i_ig,0
464,"<S2SV_ModStart> ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, K",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> umin_value, umax_val ) || signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> umin_value, umax_val ) || signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add",0
466,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE )",0
467,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ),0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum <S2SV_ModStart> MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = luaL_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } }",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u"", o_row_count,",0
472,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
473,"<S2SV_ModStart> ; if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_INVALID_PARAM ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_ERROR ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz,",0
474,"<S2SV_ModStart> int ret ; if ( strlen ( value ) == 1 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> names\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> names\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> names\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> names\\n"", __func__ ) ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN )",0
476,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
478,"<S2SV_ModStart> ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false",0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
480,<S2SV_ModStart> self ) { if (! Py_IS_NOT_NULL ( self -> dict ) ) { Py_CLEAR ( self -> dict ) ; if (! Py_IS_NOT_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; if (! Py_IS_NOT_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; if (! Py_IS_NOT_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; if (! Py_IS_NOT_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; Py_CLEAR ( self -> type ) ; Py_CLEAR ( self -> type ) ; if (! Py_IS_NOT_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; if (! Py_IS_NOT_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; Py_CLEAR ( self -> type ) ; if (! Py_IS_NULL ( self -> type ) ) { Py_CLEAR ( self -> type ) ; Py_CLEAR ( self,0
481,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_NO_DATA ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ),0
482,<S2SV_ModStart> - EFAULT ; if ( offset + len > PAGE_SIZE ) return - EINVAL ;,0
483,"<S2SV_ModStart> argv [ ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n""",0
484,"<S2SV_ModStart> = tty_port_tty_set_termios ( & port -> port, & dummy ) ; if (! tty ) { retval = - ENOMEM ; goto reset_open_count ; }",0
485,"<S2SV_ModStart> cpuctx_lock ) ; memset ( & cpuctx -> ctx, 0, sizeof ( cpuctx -> ctx ) ) ;",0
486,"<S2SV_ModStart> struct iovec * iovec, size_t nr_segs_base, size_t nr_segs_len <S2SV_ModStart> = 1 ; * nr_segs_base = nr_segs_base + nr_segs_len ; <S2SV_ModStart> = 1 ; * nr_segs_len = nr_segs_base + nr_segs_len ; <S2SV_ModStart> = 1 ; * nr_segs_len = nr_segs_len ; return nr_segs_len <S2SV_ModEnd> ; } <S2SV_null>",0
487,"<S2SV_ModStart> ext4_group_t flex_group ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 1 << sbi -> s_log_groups_per_flex ; return 1 ; } <S2SV_ModEnd> flex_group_count = ( <S2SV_ModStart> sbi -> s_groups_count <S2SV_ModEnd> / groups_per_flex ; <S2SV_ModStart> sbi -> s_log_groups_per_flex = <S2SV_ModEnd> 1 << sbi <S2SV_ModStart> sbi -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } sbi -> s_flex_groups = ext4_kvzalloc ( size, GFP_KERNEL ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank> flex <S2SV_blank> groups"", flex_group_count ) ; goto failed",0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ;,0
489,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } a = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; else suffix_object ( p, n ) ; a = cJSON_CreateArray ( ) ; for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (!",0
490,"<S2SV_ModStart> first ) { if ( cli_sslclifp ( cptr ) ) { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] ) ; } } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] ) ; } }",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; dst [ i + 3 ] = src1 [ i + 3 ] - src2 [ i + 3 ] ; dst [ i + 4 ] = src1 [ i + 4 ] - src2 [ i + 4 ] ; dst [ i + 5 ] = src1 [ i + 5 ] - src2 [ i + 5 ] ; dst [ i + 6 ] = src1 [ i + 6 ] ; dst [ i + 7 ] = src1 [ i + 7 ] - src2 [ i + 7 ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_DATA_TOO_BIG ; } if ( match_length > callback_args -> data_size ) { return ERROR_DATA_TOO_BIG ; } if ( match_length > callback_args -> data_size ) { return ERROR_DATA_TOO_BIG ; } if ( match_length < callback_args -> data_size ) return ERROR_DATA_TOO_SMALL ; if ( match_length > callback_args -> data_size ) return ERROR_DATA_TOO_BIG ; if ( match_length > callback_args -> data_size ) { return ERROR_DATA_TOO_BIG ; } if ( match_length > callback_args -> data_size ) { return ERROR_DATA_TOO_BIG ; } if ( match_length < callback_args -> data_size ) return ERROR_DATA_TOO_SMALL ; if ( match_length > callback_args -> data_size ) return ERROR_DATA_TOO_SMALL ; if ( match_length > callback_args -> data_size ) { return ERROR_DATA_TOO,0
493,"<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) { c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else if ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! no_port_forwarding_flag &&! options. disable_forwarding ) { c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; }",0
494,"<S2SV_ModStart> length ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n",0
495,"<S2SV_ModStart> err ; } if ( m -> msg_name ) { m -> msg_namelen = 0 ; m -> msg_name [ m -> msg_namelen ]. iov_base = NULL ; m -> msg_name [ m -> msg_namelen ]. iov_len = 0 ; m -> msg_name [ m -> msg_namelen ]. iov_len = 0 ; m -> msg_name [ m -> msg_namelen ]. iov_base = NULL ; } else { m -> msg_name = NULL ; } size = m -> msg_iovlen * sizeof ( struct iovec ) ; if ( copy_from_user ( m -> msg_iov, ( void __user __force * ) m -> msg_name, size ) ) return - EFAULT",0
496,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res ; int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; }",0
497,<S2SV_ModStart> int hstartcol ; jas_int64_t <S2SV_ModEnd> m ; if <S2SV_ModStart> 2 ) { m = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id ) <S2SV_ModStart> sta_id ) ; IWL_DEBUG_ASSOC ( priv, ""%s <S2SV_blank> station <S2SV_blank> id <S2SV_blank> %u <S2SV_blank> addr <S2SV_blank> %pM"", sta_id, pkt -> u. add_sta. sta_id, pkt -> u. add_sta. sta_addr, pkt -> u. add_sta. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr ) ; IWL_DEBUG_ASSOC ( priv, ""%s <S2SV_blank> station <S2SV_blank> id <S2SV_blank> %u <S2SV_blank> addr <S2SV_blank> %pM"", sta_id, pkt -> u. add_sta. sta_addr, pkt -> u. add_sta. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr. sta_addr.",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> {",0
501,"<S2SV_ModStart> 1 ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; <S2SV_ModStart> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_",0
502,"<S2SV_ModStart> - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) return - EPERM ; down_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data, 0 ) ; if (! err ) { err = - EPERM ; if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data, 0 ) ; if (! err ) { unlock_mount_hash ( ) ; mnt -> mnt_flags &= ~ MNT_USER_SETTABLE_MASK ; mnt -> mnt_flags &= ~ MNT_USER_SETTABLE_MASK ; mnt -> mnt_flags &= ~ MNT_USER_SETTABLE_MASK ; mnt -> mnt_flags",0
503,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int copied, <S2SV_ModStart> copied, err ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name = kstrndup ( msg -> msg_name, sizeof ( struct virtio_net_hdr ) ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr )",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,"<S2SV_ModStart> num_ports < 2 || serial -> num_ports > USB_PORTS_MAX ) return - 1 ; if ( serial -> num_ports > USB_PORTS_MAX ) return - 1 ; port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; else port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; else port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER",0
506,"<S2SV_ModStart> qmode ) { <S2SV_ModEnd> ChunkHeader ds64hdr, <S2SV_ModStart> ; RiffChunkHeader riffhdr <S2SV_ModEnd> ; DS64Chunk ds64_chunk <S2SV_ModStart> ; JunkChunk junkchunk ; int64_t total_riff_bytes ; <S2SV_ModStart> ; if ( total_riff_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_riff_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_riff_bytes ) ; do_rf64 = 1 ; } else if ( total_riff_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_riff_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_riff_bytes ) ; do_rf64 = 0 ; } else if ( total_riff_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_riff_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_riff_bytes ) ; do_rf64 = 1 ; } else if ( total_riff_bytes > 0",0
507,"<S2SV_ModStart> ; if ( msg_sys -> msg_namelen > 0 && msg_sys -> msg_namelen < msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } if ( msg_sys -> msg_namelen > 0 && msg_sys -> msg_namelen < msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |=",0
508,<S2SV_ModStart> inode ) ; struct gfs2_dinode * ip_d = GFS2_I ( inode ) ; struct gfs2_dinode * ip_d = ip_d -> i_inode ; struct gfs2_dinode * ip_d = ip_d -> i_inode ; struct gfs2_dinode * ip_d = ip_d -> i_inode ; struct gfs2_dinode * ip_d = ip -> i_dinode ; struct gfs2_dinode * ip_d = GFS2_I ( inode ) ; struct gfs2_dinode * ip_d = ip_d -> i_inode ; struct gfs2_dinode * ip_d = ip_d ; struct gfs2_dinode * ip_d = ip_d -> i_inode ; struct gfs2_dinode * ip_d = ip_d -> i_dinode ; struct gfs2_dinode * ip_d = GFS2_I ( inode ) ; struct gfs2_dinode * ip_d,0
509,"<S2SV_ModStart> codec -> iface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> filename, input -> <S2SV_ModEnd> use_i420? ""I420"" <S2SV_ModStart> : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input",0
510,"<S2SV_ModStart> return FALSE ; ret = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) ; if ( ret ) return FALSE ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; if ( ret ) return FALSE ; <S2SV_ModStart> -> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride",0
511,"<S2SV_ModStart> ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; else value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD",0
512,"<S2SV_ModStart> 0 ) { if ( copy_file ( ""/etc/skel/.zshrc"", fname, u, g, 0644 ) == 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf",0
513,<S2SV_ModStart> ; if ( sf -> fv!= & fv -> b ) { if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( sf -> fv!= & fv -> b ) { if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; if ( sf -> filename!= NULL ) RecentFilesRemember ( sf,0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> timr ) ; if ( new_setting ) { <S2SV_ModStart> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; } else { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; },0
516,"<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog <S2SV_ModStart> 0 ) ) { if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if (! js_regexec ( re -> prog, text, & m, 0 ) ) { js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if (! js_regexec ( re -> prog, text, & m, 0 ) ) { js_newregexp ( J, """"",0
517,<S2SV_ModStart> case OFreshOID : if ( ( int ) ( dest - ( value ) caml_get_oo_id ( ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if ( ( int ) ( dest - ( value ) caml_get_oo_id ( ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if ( ( int ) ( dest - ( value ) ( dest - ( value ) caml_get_oo_id ( ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if ( ( int ) ( dest - ( value ) caml_get_oo_id ( ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if ( ( int ) ( dest - ( value ) caml_get_oo_id ( ( value ) dest - ( value ) caml_get_oo_id ( ) ) < 0 ) { caml_set_oo_id ( ( value,0
518,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
519,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!=",0
520,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { return vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd>, QINDEX_BITS )",0
521,"<S2SV_ModStart> ( write ( uipc_main <S2SV_ModEnd>. ch [ <S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> -> ptr == tmp ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( ++ state -> ptr!= state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; break ; },0
523,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank <S2SV_ModStart> FB_VBLANK_HAVE_COUNT | FB_VBLANK_HAVE_VCOUNT | FB_VBLANK_HAVE_VSYNC <S2SV_ModEnd> ; vblank.,0
524,<S2SV_ModStart> int flags ) { if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; },0
525,"<S2SV_ModStart> ] = _cmsCalloc ( ContextID, <S2SV_ModEnd> nElements, sizeof <S2SV_ModStart> cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) { cmsLogError
526,"<S2SV_ModStart> need_dev ) { path_put ( & path ) ; error = - ENOENT ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) ) { error = - ENOENT ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! path. dentry ) { error = - ENOENT ; goto out ; } if ( path. dentry -> dentry -> dentry -> dentry -> d_inode -> i_uid = current_fsuid ( ) ; if ( path. dentry -> d_inode -> i_uid!= current_fsuid ( ) || path. dentry -> d_inode -> i_gid!= current_fsuid ( ) || path. dentry -> d_inode -> i_gid!= current_fsuid ( ) || path. dentry -> d_inode -> i_gid!= current_fsuid ( ) || path. d_inode -> i_gid!= current_fsuid ( ) || path. dentry -> d_inode -> i_gid!= current_fsuid ( ) ||",0
527,"<S2SV_ModStart> ; if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages <S2SV_blank> available\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages <S2SV_blank> available\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages <S2SV_blank> available\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages <S2SV_blank> available\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages <S2SV_blank> available\\n"", __func",0
528,"<S2SV_ModStart> ; RETVAL_STRINGL ( ( char * ) replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced, ( size_t ) new_len, 0 ) ; retval_stringl ( replaced,",0
529,"<S2SV_ModStart> ; if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_RSA ( peerkey, localrsa ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( BIO_reset ( rawcert ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peerkey, peerec ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( BIO_reset ( rawcert ) == 1 && ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peer",0
530,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; t1_getline ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
531,"<S2SV_ModStart> BLOCK_SIZE subsize ) { <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> switch ( partition <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * (",0
532,"<S2SV_ModStart> name ) ; if ( check_submodule_name ( name ) < 0 ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; free ( name ) ; return 0 ; } if ( check_submodule_name ( name ) < 0 ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return 0 ; }",0
533,"<S2SV_ModStart> ; int block_ptr <S2SV_ModEnd> ; int pixel_x <S2SV_ModStart> = 0 ; block_ptr = 0 ; int pixel_y = 0 ; if ( row_ptr + row_inc > s -> avctx -> height ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Row <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", row_inc ) ; return ; } if ( row_ptr + row_inc > s -> avctx -> width ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Row <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", row_inc ) ; return ; } if ( row_ptr + row_inc > s -> avctx -> height ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Row <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", row_inc ) ; return ; } if ( row_ptr + row_inc > s -> avctx -> width ) { av_log ( s -> avctx, AV_LOG_ERROR, ""Row <S2SV_blank>",0
534,"<S2SV_ModStart> cnt ) { jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; if ( cnt > JAS_MAX ( n, cnt ) ) { JAS_LOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %",0
535,<S2SV_ModStart> ; __be16 type ; if ( skb_is_nonlinear ( skb ) ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush,0
536,<S2SV_ModStart> ; if ( unlikely ( numrows < 0 || numcols < 0 ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> numrows_ = 0 ; matrix -> numcols_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; if ( matrix -> datasize_ < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> numcols_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> numrows_ ;,0
537,"<S2SV_ModStart> } else { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & bytes ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & bytes ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & bytes ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & bytes ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & bytes ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( (",0
538,"<S2SV_ModStart> ; ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) { ret = - EPERM ; goto error2 ; } if ( is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; }",0
539,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 0 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if ( 1 == ps_dec -> u4_first_slice_is_aud ) { if,0
540,"<S2SV_ModStart> ; dst_known = tnum_is_const ( dst_reg -> var_off ) ; switch ( opcode ) { case BPF_ADD : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value =",0
541,<S2SV_ModStart> -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS <S2SV_ModEnd> ) { int <S2SV_ModStart> -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS <S2SV_ModEnd> ) { int <S2SV_ModStart> -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS <S2SV_ModEnd> ) { int <S2SV_ModStart> -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS <S2SV_ModEnd> ) { int <S2SV_ModStart> cfile -> f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_f_,0
542,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR4_REGION_INDEX : info. offset = VFIO_PCI_BAR4_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_READ ; break ; case VFIO,0
543,"<S2SV_ModStart> ext4_test_inode_state ( inode <S2SV_ModEnd>, EXT4_STATE_ORDERED_MODE )",0
544,<S2SV_ModStart> -> filesize = 0 ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;,0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ;",0
546,"<S2SV_ModStart> char * in, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> 4 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } }",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, i ; size_t <S2SV_ModEnd> total_written = 0 <S2SV_ModStart> i ++ ) { size_t <S2SV_ModEnd> copied = min_t <S2SV_ModStart> copied = min_t ( size_t, cur_len, <S2SV_ModEnd> cifs_sb -> wsize <S2SV_ModStart> cifs_sb -> wsize, <S2SV_ModEnd> cifs_sb -> mnt_cifs_flags <S2SV_ModStart> cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD ) { if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD ) { tmp = cifs_writedata_alloc ( cifs_sb -> wsize, cifs_uncached_writev_complete ) ; if (! tmp ) { kfree ( wdata ) ; break ; } tmp = cifs_writedata_alloc ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD ) { if (! cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_RWPIDFORWARD ) { tmp = cifs_writedata_alloc ( cifs_sb ->",0
549,<S2SV_ModStart> if (! ( <S2SV_ModEnd> quirks & CP_RDESC_SWAPPED_MIN_MAX,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart>, encode_frame_count ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = 0 ; number_of_keyframes = 0 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ], ( double ) si -> bytes_sum [ i ], ( double ) si -> bytes_sum [ i ] ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank>",0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { <S2SV_ModEnd> * out ++ <S2SV_ModStart> value ; left -- ; } else if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; fillMemory ( out, len, value ) ; out += len ;",0
552,"<S2SV_ModStart> = new_cols ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ;",0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 1 ) == '\\\\' && * ( * str - 2 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( literal_start!= literal_end ) { if ( raw ) * literal = decode_unicode_with_escapes ( c,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> unsigned char * buf ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ; m -> buf",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
556,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> struct pcrypt_instance_ctx * <S2SV_ModStart> = crypto_instance_ctx ( <S2SV_ModEnd> inst ) ;,0
558,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; } status = SetImageExtent ( image, image -> columns, image -> rows, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ndopts ) ; if ( ndopts. pref == NDISC_PREF_ALL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref\\n"" ) ; return ; } if ( ndopts. pref == NDISC_PREF_ALL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref\\n"" ) ; return ; } if ( ndopts. pref == NDISC_PREF_ALL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref\\n"" ) ; return ; } if ( ndopts. pref == NDISC_PREF_ALL ) { if ( ndopts. pref == NDISC_PREF_ALL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref\\n"" ) ; return ; } if ( ndopts. pref == NDISC_PREF_ALL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref\\n"" ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_proxy_auth_id_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_proxy_auth_id_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
562,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> rp ) ; len = nla_len ( rp ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( replay_esn ) || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; len = nla_len ( rp ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ;,0
563,"<S2SV_ModStart> int ret = proc_check_memory ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent == 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; return 0 ; } else { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; }",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> + mvsad_array [ <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> + mvsad_array [ <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> + mvsad_array [ <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> + mvsad_array [",0
565,<S2SV_ModStart> ) ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_ptr ) ; l_tmp_data = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ; if ( l_tmp_data == ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_ptr ) ; l_tmp_ptr = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_ptr ) ; l_tmp_ptr = ( OPJ_UINT32 * ) opj_malloc (,0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ; <S2SV_ModStart> -> flags ; memset ( & kvm -> arch. vpit -> pit_state. channels [ 0 ], 0, sizeof ( kvm -> arch. vpit -> pit_state. channels ) ) ; mutex_unlock ( & kvm -> arch. vpit -> pit_state. lock ) ;",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible <S2SV_ModEnd> + idx_str ; <S2SV_ModStart> -> source_variance = UINT_MAX <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; ret += obuf -> len ; ibuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; },0
570,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
571,"<S2SV_ModStart> } else { Fp = fopen ( filename, ""rb"" ) ; if ( Fp == NULL ) return HTTP_UNAUTHORIZED ; } parser -> position = POS_ENTITY ; do { if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } while ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok_on_close = TRUE ;",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; } else { spin_lock_irq ( q -> queue_lock ) ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; },0
573,"<S2SV_ModStart> ; if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 1 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 1 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char <S2SV_ModStart> ; if ( rcu_dereference_protected ( krbtgt_out -> rcu ) ) { ret = rcu_dereference_protected ( krbtgt_out -> rcu ) ; if ( ret!= rcu_dereference_protected ( krbtgt_out -> rcu ) ) { ret = rcu_dereference_protected ( krbtgt_out -> rcu ) ; if ( ret!= rcu ) { ret = rcu_dereference_protected ( krbtgt_out -> rcu ) ; krbtgt_out -> rcu = rcu_dereference_protected ( krbtgt_out -> rcu ) ; if ( ret!= rcu_dereference_protected ( krbtgt_out -> rcu ) ) { ret = rcu_dereference_protected ( krbtgt_out -> rcu ) ; krbtgt_out -> rcu = rcu_dereference_protected ( krbtgt_out -> rcu ) ; krbtgt_out -> rcu = rcu_dereference_protected ( krbtgt,0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> -> devnum, ci. <S2SV_ModEnd> slow = ps <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart> opt, int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> optlen & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = NULL ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * opt ) ; * optp = opt ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt,",0
578,"<S2SV_ModStart> -> rmtblkcnt2 ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE | XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE | XFS_ILOG_CORE | XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ( char * ) dp ) ; xfs_trans",0
579,"<S2SV_ModStart> = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS",0
580,"<S2SV_ModStart> ""Connection"" ) ; if ( http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) == NULL || strcmp ( http_request_get_header ( info -> request, ""Sec-WebSocket-Key"" ), ""13"" )!= 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Sec-WebSocket-Key"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds * token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcmp ( token, ""Sec-WebSocket-Key"" ) == 0 ) { sdsfreesplit",0
581,"<S2SV_ModStart> * findalldevs_if ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed."" "" <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpc",0
582,"<S2SV_ModStart> ; struct dump_dir * dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; g_hash_table_remove ( problem_info, ""basename"" ) ; g_hash_table_remove ( problem_info",0
583,"<S2SV_ModStart> ; for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ;",0
584,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2 <S2SV_ModStart> c2, c3 ; r [ 0 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 2 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; sqr_add_c2 ( a, 4, 1, c2, c3 ) ; r [ 5 ] = c3 ; c3 = 0 ; sqr_add_c ( a, 6, 0, c1, c2 ) ; r [ 7 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 8 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, c1, c2, c3 ) ; r [ 9 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 8 ] = c2 ; c2 = 0 ; sqr_add_",0
585,"<S2SV_ModStart> sk, int <S2SV_ModEnd> tstype ) { <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; }",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u"", len ) ) ; return ; } <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) { if (! ND_TTEST2 ( bp [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u"", len ) ) ; return ; } <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u"", len ) ) ; return ; } if (! ND_TTEST2 ( bp [ 0 ], len ) ) { if (! ND_TTEST2 ( bp [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u"", len ) ) ; return ; } if (! ND_TTEST2 ( bp [ 0 ], len ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u""",0
588,"<S2SV_ModStart> ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__,",0
589,<S2SV_ModStart> ; if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) {,0
590,"<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { pr_err ( ""add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes: <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; return ; } if ( i + sizeof ( long ) > w ) { pr_err ( ""add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes: <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; return ; } if ( i + sizeof ( long ) > w ) { pr_err ( ""add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes: <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; return ; } if ( i + sizeof ( long ) > w ) { pr_err ( ""add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes: <S2SV_blank> %d\\n"", __FILE__, __LINE__ ) ; return ; }",0
591,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_T38 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> case SEI_USER_DATA_REGISTERED_ITU_T_36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; <S2SV_ModStart> ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_parameters_,0
594,"<S2SV_ModStart> * priv ; if ( port -> bulk_out_size > CYPRESS_BUF_SIZE ) { kfree ( priv ) ; priv = kzalloc ( sizeof ( struct cypress_private ), GFP_KERNEL ) ; return - ENOMEM ; } priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> write <S2SV_blank> intervals <S2SV_blank> forced <S2SV_blank> to <S2SV_blank> %d\\n"", __func__, priv -> read_urb_interval ) ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> read_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> intervals: <S2SV_blank> read=%d <S2SV_blank> write=%d\\n"", __func__, priv -> read_urb_interval, priv -> read_",0
595,<S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht,0
596,<S2SV_ModStart> device_data ; if ( dev ) { device_put ( & dev -> dev ) ; return 0 ; },0
597,"<S2SV_ModStart> name, int rep_quick <S2SV_ModEnd> ) { int <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> )",0
598,"<S2SV_ModStart> q, 10 ) ; if ( size == ( size_t ) - 1 ) { p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) * p ) ) ) )!= 0 ) ) ) ) || ( * p == ',' ) ) ) { p = q ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) * p ) ) ) )!= 0 ) )!= 0 ) || ( * p == ',' ) ) ) ) { p = q ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( (",0
599,<S2SV_ModStart> } else { xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_dablk_t <S2SV_ModEnd> dblocks = XFS_NEXTENTADD_SPACE_RES,0
600,"<S2SV_ModStart> ; } pairs = palloc ( <S2SV_ModEnd> pcount * sizeof <S2SV_ModStart> ) ) ; if (! pairs ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 1 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 2 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModEnd> return 0 ;,0
603,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\r' ; agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; * hend = '\\r' ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\r' ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s: <S2SV_blank> %llu: <S2SV_blank> %s"", c -> id, c -> buf ) ; *",0
604,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; vpx_fdct16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for",0
605,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KE",0
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_access ) ; if ( error ) goto out_drop_write ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_default ) ; if ( error ) goto out_drop_write ; fh_drop_write ( fh ) ; RETURN_STATUS ( nfserr ) ;",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; fflush ( fp ) ; fclose ( fp ) ; if ( chmod ( temp_filename, S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, filename",0
609,"<S2SV_ModStart> ; switch ( <S2SV_ModEnd> pc -> componentType <S2SV_ModStart> case 1 : if ( pc -> lengthComponentIdent > 0 ) { if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; } case 2 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 6 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 7 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3",0
610,<S2SV_ModStart> ; if ( <S2SV_ModEnd> rp -> rm_call <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_vers == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_vers == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3 <S2SV_ModStart> rp -> rm_call. <S2SV_ModEnd> cb_proc == NFS_VER3,0
611,"<S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Config <S2SV_blank> Rev <S2SV_blank> %u, <S2SV_blank> Updater <S2SV_blank> %s"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ; tptr += 4 ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr +",0
612,"<S2SV_ModStart> -> userData, ctxt -> lineNo, ctxt -> colNo <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ctxt -> lineNo <S2SV_ModEnd>, ctxt -> <S2SV_ModStart> ) ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if (! IS_CHAR ( cur ) ) { xmlFatalErrMsgStr ( ctxt, XML_ERR_SPACE_REQUIRED, ""ParsePI: <S2SV_blank> PI <S2SV_blank> %s <S2SV_blank> space <S2SV_blank> expected\\n"", target ) ; } SKIP_BLANKS ; cur = CUR_CHAR ( l ) ; if ( IS_BLANK ( cur ) ) { xmlFatalErrMsgStr ( ctxt, XML_ERR_SPACE_REQUIRED, ""ParsePI: <S2SV_blank> PI <S2SV_blank> %s <S2SV_blank> space <S2SV_blank> expected\\n"",",0
613,"<S2SV_ModStart> slow ; if (! sock_flag ( sk, SOCK_DEAD ) ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; goto out_free ; }",0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> tlen, pdu_type <S2SV_ModStart> ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ) { goto trunc ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) { goto trunc ; } tlen -= pdu_len ; tptr += pdu_len ; } ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; } <S2SV_null>",0
615,"<S2SV_ModStart> int tagval ; if ( s == NULL ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 2 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3 ) ) return False ;",0
616,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> chars_processed ; int <S2SV_ModStart> = 1 ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp",0
617,"<S2SV_ModStart> args ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE <S2SV_ModEnd> ) ; error <S2SV_ModStart> valuelen ) ; if ( error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp,",0
618,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
619,"<S2SV_ModStart> 1 ) ; } int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
620,"<S2SV_ModStart>!= BFA_STATUS_OK ) { spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; wait_for_completion ( & fcomp. comp ) ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ; return NULL ; } hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lost_lo",0
621,"<S2SV_ModStart> value ) { <S2SV_ModEnd> value -> x <S2SV_ModStart> -> y = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = ClampF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = ClampF <S2SV_ModEnd> ( 1.0f,",0
622,"<S2SV_ModStart> { * head = NULL ; * out = NULL ; return 0 ; } if ( len < PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len < PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len == PKT_LEN_SIZE ) { * head = NULL ; * out = line ; return 0 ; } if ( * line == GIT_SIDE_BAND_PROGRESS ) ret = sideband_progress_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""NAK <S2SV_blank> "" ) ) ret = nak_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head ) ; else if (! git__prefixcmp ( line, ""NAK <S2SV_blank> "" ) ) ret = nak_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head ) ; else if (! git__prefixcmp ( line, """,0
623,"<S2SV_ModStart> ; if ( unlikely ( test_and_set_bit ( PG_dying, & vma -> vm_flags ) ) ) { spin_unlock_irqrestore ( & vma -> vm_mm -> mmap_sem, & vma -> vm_mm -> mmap_sem ) ; return VM_FAULT_SIGSEGV ; } page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! page_table ) { spin_unlock_irqrestore ( & vma -> vm_mm -> mmap_sem, ptl ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) { spin_unlock_irqrestore ( & vma -> vm_mm -> mmap_sem, & vma -> vm_mm -> mmap_sem, ptl",0
624,<S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt +",0
626,"<S2SV_ModStart> ip6f_offlg ) ; ND_TCHECK_32BITS ( & dp -> ip6f_ident ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ; }",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; assert ( ( occ0 / rowsize ) == 0 ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { ( * sp -> decodepfunc ) ( tif, op0, rowsize ) ; occ0 -= rowsize ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { ( * sp -> decodepfunc ) ( tif, op0, rowsize ) ; occ0 -= rowsize ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { ( * sp -> decodepfunc ) ( tif, op0, rowsize ) ; occ0 -= rowsize ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { ( * sp -> decodepfunc ) ( tif, op0, rowsize ) ; occ0 -= rowsize ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { ( * sp -> decodepfunc ) ( tif, op0",0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
631,"<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov",0
632,"<S2SV_ModStart> = NULL ; if ( sb -> s_flags & MS_RDONLY ) { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; return ; } if ( sb -> s_flags & MS_RDONLY ) { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; if ( sb -> s_flags & MS_RDONLY ) { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; if ( sb -> s_flags & MS_RDONLY ) { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; return ; } if ( sb -> s_flags & MS_RDONLY ) { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; if ( sb -> s_flags & MS_RDONLY ) { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; } else { hugetlbfs_write_super ( sb, NULL, sizeof ( * sbi ) ) ; return ; }",0
633,"<S2SV_ModStart> ; break ; case HA_ERR_CRASHED_ON_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> curl_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart>, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; if ( olen ) * olen = strindex ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{",0
636,"<S2SV_ModStart> ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, fsdata ) ; if ( unlikely ( status < 0 ) ) { status = - EFAULT ; break ; } status = a_ops -> write_end ( file, mapping, pos, bytes, flags, & page, fsdata ) ; flush_dcache_page ( page ) ; if ( unlikely ( status < 0 ) ) { status = - EFAULT ; break ; } status = a_ops -> write_end ( file, mapping, pos, bytes, flags, & page, fsdata ) ; if ( unlikely ( status < 0 ) ) { status = - EFAULT ; break ; } status = a_ops -> write_end ( file, mapping, pos, bytes, flags, & page, fsdata ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( len > ring -> rx_buffersize ) ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ;",0
638,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP",0
639,"<S2SV_ModStart> |= SEEN ; if (! show_object ( obj, <S2SV_ModEnd> name, data <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, NULL, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) {",0
640,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog",0
641,"<S2SV_ModStart> j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < zsize ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < zsize ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < zsize ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < zsize ; j ++ ) memcpy ( dst + i *",0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten",0
644,<S2SV_ModStart> pixels ++ ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
645,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> timer = NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> timer_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 0, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; slave -> timer = NULL ; mutex_unlock ( & register_mutex ) ; list_del ( & timeri -> timer_list ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) {",0
646,"<S2SV_ModStart> len ; } if ( len < 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 3)"" ) ) ; return len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 7 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 7)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; }",0
647,"<S2SV_ModStart> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_null>",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port, struct asd_sas_rphy * rphy ) { struct asd_sas_port <S2SV_ModEnd> * dev, <S2SV_ModStart> * n ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> sas_port_dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_rphy_free ( dev -> rphy ) ; } }",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len ; gchar <S2SV_ModEnd> line [ NETSCREEN_LINE_LENGTH <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; offset = netscreen_seek_next_packet ( wth, err, err_info, line ) ; if ( offset < 0 ) return FALSE ; pkt_len = parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ; int_fast32_t topOverflow = gifFilePtr -> Image. Top + gifFilePtr -> Image. Left ; int_fast32_t leftOverflow = gifFilePtr -> Image. Left + gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; if ( leftOverflow > 0 ) { int_fast32_t leftOverflow = gifFilePtr -> Image. Left + gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; int_fast32_t topOverflow = gifFilePtr -> Image. Top + gifFilePtr -> Image. Top + gifFilePtr -> Image. Left ; int_fast32_t leftOverflow = gifFilePtr -> Image. Left + gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; if ( leftOverflow > 0 ) { int_fast32_t leftOverflow = gifFilePtr -> Image. Left + gifFilePtr -> Image. Width ; int_fast32_t,0
653,"<S2SV_ModStart> can_read_key : if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error ; } <S2SV_ModStart> = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } error2 : key_put ( key ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee",0
655,"<S2SV_ModStart> { # define ThrowPICTException ( exception, message ) { if ( image!= ( Image * ) NULL ) DestroyImage ( image ) ; if ( read_info!= ( ImageInfo * ) NULL ) ThrowPICTException ( ( exception ), ( message ) ) ; } # define ThrowReaderException ( exception, message ) { if ( tile_image!= ( Image * ) NULL ) tile_image = DestroyImage ( tile_image ) ; ThrowPICTException ( ( exception ), ( message ) ) ; if ( read_info!= ( ImageInfo * ) NULL ) ThrowReaderException ( ( exception ), ( message ) ) ; if ( read_info!= ( ImageInfo * ) NULL ) ThrowPICTException ( ( exception ), ( message ) ) ; }",0
656,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; if ( jas_iccgetuint ( in, 4, & tmp ) ) return - 1 ; if ( tmp & 0x80000000 ) * val = ( ( tmp & 0x7fffffff ) + 1 ) ; else * val = ( ( tmp & 0x7fffffff ) + 1 ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
657,<S2SV_ModStart> case RDS_CMSG_MASKED_FADD : rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> m_cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> m_cswp. swap ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> m_cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> m_cswp. swap ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD :,0
658,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ; <S2SV_ModEnd> si = &,0
659,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
660,"<S2SV_ModStart> if ( snprintf ( spath, sizeof ( spath ), var, iface ) < 0 ) return - 1 ; if (! access ( spath, F_OK ) ) return - 1 ; if ( strerror ( errno ) ) return - 1 ; if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; if ( fp ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface ) ; flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; return - 1 ; } fp = fopen ( spath, ""a"" ) ; if (! fp ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface ) ; return - 1",0
661,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ;",0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif",0
663,"<S2SV_ModStart> objp ) ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ;",0
664,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set >= uipc_main. max_fd ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( uipc_main. read_set >= uipc_main. max_fd ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; }",0
665,"<S2SV_ModStart> return 1 ; if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; }",0
666,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; tab_size = roundup2 ( tab_size, 4096 ) ; tab_size = roundup2 ( tab_size, 4096 ) ; pci_msix_table_init ( dev, msgnum ) ; pci_populate_msixcap ( dev, barnum, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ;",0
667,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
668,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
669,"<S2SV_ModStart> ; if (! authctxt ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
671,"<S2SV_ModStart> 1 ) ; if ( i >= ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ;",0
672,"<S2SV_ModStart> NULL ) { pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; return retval ; } if ( X509_get_issuer_name ( kdc_cert ) == NULL ) { pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; return retval ; } status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ;",0
673,<S2SV_ModStart> { Jpeg2000Prec * prec ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } for ( precno = 0 ; precno < reslevel -> num_precincts_x * reslevel -> num_precincts_y ; precno ++ ) { Jpeg2000Prec * prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } for ( precno = 0 ; precno < reslevel -> num_precincts_x * reslevel -> num_precincts_y ; precno ++ ) { Jpeg2000Prec * prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> zer,0
674,"<S2SV_ModStart> ) ) { if ( ctxt -> vctxt. error!= NULL ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ; err = ip6_xmit ( sk, skb, <S2SV_ModEnd> & fl6, <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( rcu ) ) ) ) { rcu_read_unlock ( ) ; rcu_read_unlock ( ) ; rcu_read_unlock ( ) ; rcu_read_unlock ( ) ; rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( rcu ) ) ) ; rcu_dereference ( rcu ) ; rcu_dereference ( rcu ) ) ; rcu_dereference ( rcu ) ; rcu_read_unlock ( ) ; rcu_read_unlock ( ) ; rcu_read_unlock ( ) ; rcu_read_unlock ( ) ; rcu_",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> == USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]?,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,"<S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im",0
679,<S2SV_ModStart> return NULL ; } if ( shdr -> sh_size > sz ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_,0
680,<S2SV_ModStart> ) b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; },0
681,"<S2SV_ModStart> ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_read_directory ( & info, & h, & dir, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> directory"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> directory"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot",0
682,"<S2SV_ModStart> info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if (! info",0
683,"<S2SV_ModStart> } } if ( vars -> cnt < max_vars ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } if ( vars -> cnt < max_vars ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } if ( vars -> cnt < max_vars ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= AX25_MAXPROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,<S2SV_ModStart> -> _eip ; rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp45 ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) rc = do_grp,0
687,"<S2SV_ModStart> imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ; url. path = errstr + 1 ; url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ;",0
688,"<S2SV_ModStart> secret, void * <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> dlen = ceph_x_decrypt <S2SV_ModEnd> ( secret, <S2SV_ModStart> end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_",0
689,"<S2SV_ModStart> / 2 ; if ( count <= 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count ) ) ) ; if ( count <= 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> exceeds <S2SV_blank> the maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count ) ) ) ; if ( count <= 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count ) ) ) ; if ( count <= 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count ) ) ) ; if ( count <= 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank>",0
690,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> method -> ssl_get_message ( s, SSL3_ST_CR_SESSION_TICKET_A, SSL3_ST_CR_SESSION_TICKET_B, SSL3_MT_NEWSESSION_TICKET, 16384, & ok ) ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_MALLOC_FAILURE ) ; goto err ; } if (! s -> method -> ssl_get_message ( s, SSL3_ST_CR_SESSION_TICKET_A, SSL3_ST_CR_SESSION_TICKET_B, SSL3_MT_NEWSESSION_TICKET, 16384, & ok ) ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_MALLOC_FAILURE ) ; goto err ; }",0
691,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = log_error_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name,",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else if ( test_curl_off_t_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_string_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_curl_off_t_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_curl_off_t_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_string_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_curl_off_t_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_string_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_string_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD ; else if ( test_string_formatting ( ) == - 1 ) return TEST_ERR_MAJOR_BAD,0
693,"<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = expr -> array_ref. entry ; return ( * field_rtrn!= NULL ) ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> ident. field ) ; * index_rtrn = expr -> array_ref. entry ; return ( * field_rtrn!= NULL ) ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL )",0
694,<S2SV_ModStart> lun ) { list_del_init ( & cmd -> eh_entry ) ; scsi_dma_unmap ( cmd ) ;,0
695,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == NAME ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_end_pos ( body,",0
696,<S2SV_ModStart> = 0 ; struct net * net ; <S2SV_ModStart> = 0 ; net = sock_net ( sk ) ; if (! net ) return - ENETUNREACH ; spin_lock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; if (! net ) net = sock_net ( sk ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_lock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_wq ) ; spin_unlock_bh ( & net -> sctp_assoc_,0
697,"<S2SV_ModStart> iv ) ; if ( desc -> flags & CRYPTO_TFM_REQ_MAY_SLEEP ) { err = crypto_blkcipher_setkey ( tfm, walk. dst. virt. addr, walk. src. virt. addr, walk. nbytes ) ; if ( unlikely ( err ) ) { err = crypto_blkcipher_setkey ( tfm, walk. dst. virt. addr, walk. src. virt. addr, walk. nbytes ) ; } else { salsa20_encrypt_bytes ( ctx, walk. dst. virt. addr, walk. src. virt. addr, walk. nbytes ) ; err = crypto_blkcipher_setkey ( tfm, walk. iv ) ; if ( unlikely ( err ) ) { err = crypto_blkcipher_setkey ( tfm, walk. dst. virt. addr, walk. src. virt. addr, walk. nbytes ) ; } else { salsa20_encrypt_bytes ( ctx, walk. dst. virt. addr, walk. src. virt. addr, walk. nbytes ) ; err = blkcipher_walk_done",0
698,"<S2SV_ModStart> = 0 ; lock_sock ( sk ) ; if ( sk -> sk_state!= SS_UNCONNECTED ) { if ( sock_flag ( sk, SOCK_DONE ) ) err = - ENOTCONN ; goto out ; } if (! msg -> msg_namelen ) msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; if (! msg -> msg_namelen ) msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; else msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; if (! msg -> msg_namelen ) msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ;",0
699,"<S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u"", o_row_count,",0
700,<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. StartIndex ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. StartIndex ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. StartIndex ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette,0
701,"<S2SV_ModStart> ctxt ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt ->",0
702,,1
703,"<S2SV_ModStart> 0 ) ; if ( res ) { ret = devm_ioremap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret += HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_ofclk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clks [ i ]. hw ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret += HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_ofclk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clks [ i ]",0
704,"<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> psf_log ( psf <S2SV_ModStart> psf -> psf_log ( psf <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> psf_log <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> psf_log <S2SV_ModStart> psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; psf -> psf_log ( psf, ""Bad",0
705,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_mutex ; }",0
706,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; }",0
707,"<S2SV_ModStart> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_SNDBUFFORCE : if (! capable ( CAP_NET_ADMIN ) ) { ret = - EPERM ; break ; }",0
708,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> int ret = <S2SV_ModStart> = 0 ; if ( le32_to_cpu ( lvd -> mapTableLength ) > sbi -> s_partitions ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map = ( struct genericPartitionMap * ) & ( gpm -> partitionMaps [ offset ] ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else { map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; return 0 ; } if ( bmp_gethdr ( in, & hdr ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! ( info = bmp_getinfo ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d;",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
712,"<S2SV_ModStart> ; save_text_from_text_view ( g_tv_comment, FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page <S2SV_blank> no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page <S2SV_blank> no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page <S2SV_blank> no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ;",0
713,"<S2SV_ModStart> ; media_device_kpad_to_upad ( & links -> pads [ p ], <S2SV_ModEnd> & pad ) <S2SV_ModStart> continue ; media_device_kpad_to_upad ( & links -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; if ( copy_to_user ( & links -> links [ l ], & link. flags, sizeof ( link. flags ) ) ) return - EFAULT ; media_device_kpad_to_upad ( & links -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; if ( copy_to_user ( & links -> links [ l ], & link. flags, sizeof ( link. flags ) ) return - EFAULT ;",0
714,<S2SV_ModStart> -> last_line_has_list_loosening_effect && prev_line_has_list_loosening_effect && <S2SV_ModStart> -> last_line_has_list_loosening_effect && prev_line_has_list_loosening_effect && <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModStart> -> last_line_has_list_loosening_effect && prev_line_has_list_loosening_effect && prev_line_has_list_loosening_effect!= MD_LINE_HAS_LIST_LOOSE ) { if ( prev_line_has_list_loosening_effect && prev_line_has_list_loosening_effect!= MD_LINE_HAS_LIST_LOOSE ) { if ( prev_line_has_list_loosening_effect && prev_line_has_list_loosening_effect == MD_LINE_HAS_LIST_LOOSE && prev_line_has_list_loosening_effect == MD_LINE_HAS_LIST_LOOSE ) { if ( prev_line_has_list,0
715,"<S2SV_ModStart>, extent ; size_t <S2SV_ModEnd> width, height <S2SV_ModStart> height, length ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; bytes_per_line = GetBlobSize ( image ) ; height = GetBlobSize ( image ) ; depth = GetBlobSize ( image ) ; if ( depth > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; height = GetBlobSize ( image ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; height = GetBlobSize ( image ) ; depth = GetBlobSize ( image ) ; width = GetBlobSize ( image ) ; height = GetBlobSize ( image ) ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; height = GetBlobSize ( image ) ; if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" )",0
716,"<S2SV_ModStart> client_principal, const char * client_name <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, const char * client_name <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, const char * client_name <S2SV_ModEnd>, hdb_entry_ex *",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,"<S2SV_ModStart> -> loc_addr ; newinet -> opt = ireq -> opt ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ; dccp_sync_mss ( newsk, dst_mtu ( dst ) ) ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_id = jiffies ;",0
719,<S2SV_ModStart> struct xmlparser parser ; data -> xmlstart = NULL ; data -> xmlsize = 0 ; parser. xmlstart = buffer ; parser. xmlstart = bufsize ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = bufsize ; parser. xmlsize = bufsize ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. xmlendeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ;,0
720,"<S2SV_ModStart> ) return ; csum = csum_partial ( skb_transport_header ( skb ) + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> offset, 0 ) <S2SV_ModEnd> ) ; put_cmsg <S2SV_ModStart> SOL_IP, IP_CHECKSUM, sizeof ( __wsum ) <S2SV_ModEnd>, & csum",0
721,"<S2SV_ModStart> printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"" <S2SV_ModEnd>, pfn ) <S2SV_ModStart> printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"" <S2SV_ModEnd>, pfn )",0
722,"<S2SV_ModStart> 4 ], cmd -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len > sizeof ( b ) - ( 6 - cmd -> msg_len ) ) return - EINVAL ; state -> config -> send_command ( fe, 0x72, sizeof ( b ) - ( 6 - cmd -> msg_len ), b, NULL, NULL ) ;",0
723,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [,0
725,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> get_nat_flag ( ne <S2SV_ModStart> IS_CHECKPOINTED ) || nat_get_blkaddr ( ne <S2SV_ModStart> NULL_ADDR ) ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_lock ( & nm",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> deblocking_level = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) <S2SV_ModEnd> ; flags ->,0
727,"<S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely (! RING_GET_REQUEST ( & vif -> tx, cons ) ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ; vif -> tx. req_cons = ++ cons ; if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ; vif -> tx. req_cons = ++ cons ; if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; }",0
728,<S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len < sizeof ( struct sadb_msg ) ) { kfree_skb ( skb_out ) ; return - ENOBUFS ; },0
729,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
730,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> many <S2SV_blank> results"" ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_ton",0
731,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ptr. common -> packet_seq ) ) ; goto trunc ; } if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ptr. common -> packet_seq ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( int ) ptr. common -> packet_seq ) ) ; tptr += sizeof ( struct olsr_msg4 ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i,",0
732,"<S2SV_ModStart> -> data ; u16 <S2SV_ModEnd> n ; if <S2SV_ModStart> if (! <S2SV_ModEnd> body -> unit_size <S2SV_ModStart> if (! <S2SV_ModEnd> body -> unit_size <S2SV_ModStart> break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_",0
733,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; if ( cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; if ( cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame,0
734,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } pid_t rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( """,0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,"<S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab, 0, sizeof ( * ptr_hbe_txposer -> synth_cos_tab ) ) ; memset ( ptr_hbe_txposer -> synth_cos_tab, 0, sizeof ( * ptr_hbe_txposer -> synth_cos_tab ) ) ; memset ( ptr_hbe_txposer -> synth_cos_tab, 0, sizeof ( * ptr_hbe_txposer -> synth_cos_tab ) ) ; } else { memset ( ptr_hbe_txposer -> synth_cos_tab, 0, sizeof ( * ptr_hbe_txposer -> synth_cos_tab ) ) ; memset ( ptr_hbe_txposer -> synth_cos_tab, 0, sizeof ( * ptr_hbe_txposer -> synth_",0
739,"<S2SV_ModStart> ] ; cmap_len = get_ushort ( & tga [ 4 ] ) ; cmap_entry_size = get_ushort ( & tga [ 6 ] ) ; image_w = get_ushort ( & tga [ 8 ] ) ; image_h = get_ushort ( & tga [ 10 ] ) ; pixel_depth = get_ushort ( & tga [ 12 ] ) ; image_desc = tga [ 13 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp ) ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len,",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { if <S2SV_ModEnd> ( CPUCLOCK_WHICH ( <S2SV_ModStart> which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart>. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else { tp -> tv_sec = 0 ; } <S2SV_ModEnd> tp -> tv_nsec <S2SV_ModStart> tp ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
742,"<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if <S2SV_ModStart> -> td_nstrips ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ;",0
743,"<S2SV_ModStart> lua_authz_provider_spec * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; if ( prov_spec == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider"" ) ; return AUTHZ_GENERAL_ERROR ; } spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, prov_spec -> function_name, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( pool, spec, r )",0
744,"<S2SV_ModStart> * prev ; <S2SV_ModEnd> error = security_mmap_addr <S2SV_ModStart> address ) ; if ( error ) return error ; if ( vma -> vm_flags & VM_GROWSDOWN ) { unsigned long size, grow ; size = ( vma -> vm_end - address ) >> PAGE_SHIFT ; grow = ( vma -> vm_start - address ) >> PAGE_SHIFT ; error = acct_stack_growth ( vma, size, grow ) ; if (! error ) { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; perf_event_mmap ( vma ) ; } else { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; }",0
745,"<S2SV_ModStart> { umode_t mode = inode -> i_mode ; posix_acl_update_mode ( & inode -> i_mode, & acl ) ; error = posix_acl_update_mode ( & inode -> i_mode, & <S2SV_ModEnd> mode ) ; <S2SV_ModStart> <= 0 ) { posix_acl_release_mode ( & inode -> i_mode, & acl ) ; error = xfs_set_mode ( inode, mode ) ; if ( error ) return error ; <S2SV_ModEnd> acl = NULL <S2SV_ModStart> <= 0 ) { posix_acl_release_mode ( & inode -> i_mode, & inode -> i_mode ) ; error = posix_acl_update_mode ( & inode -> i_mode, & <S2SV_ModEnd> mode ) ; <S2SV_ModStart> <= 0 ) { posix_acl_release_mode ( & inode -> i_mode, & acl ) ; error = xfs_set_mode ( inode, mode ) ; if ( error ) return error ; } error = xfs_set_mode ( inode, mode ) ; if ( error ) { posix_acl_release_mode ( & inode -> i_mode, & inode -> i_mode ) ; error = posix_acl_release_mode",0
746,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_BIND, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return - 1 ; } if ( mount ( fsname, target, fstype ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'",0
747,"<S2SV_ModStart> ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr,0
749,<S2SV_ModStart>! proto_end ) return 0 <S2SV_ModEnd> ; cp =,0
750,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
751,"<S2SV_ModStart> -> read && <S2SV_ModEnd> ret > 0 <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> 1 ) ; usb_ep_free_request ( io_data -> ep, io_data -> req ) ; <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> f",0
752,<S2SV_ModStart> &&! opt -> opt. <S2SV_ModStart> &&! opt -> opt. <S2SV_ModStart> &&! opt -> opt. <S2SV_ModStart> &&! opt -> opt. <S2SV_ModStart> &&! opt -> opt. opt3 <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> &&! opt -> opt3 <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> &&! skb_sec_path <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> &&! skb_sec_path <S2SV_ModEnd> ) ip_rt_send_redirect (,0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; struct trusted_key_payload * p = rcu_dereference_protected ( key -> payload. data, lockdep_is_held ( & key -> sem ) ) ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; new_p -> key_len = p -> key_len ; memcpy ( new_p -> key, p -> key, p -> key_len ) ; dump_payload ( p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_options ( new_o ) ; dump_payload ( new_p ) ;",0
755,"<S2SV_ModStart> - 1 ; } if ( c < 0 ) { jas_deprecated ( ""negative <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c ) ; jas_deprecated ( ""positive <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c ) ; jas_deprecated ( ""negative <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c ) ; return - 1 ; } if ( n <= 0 ) { jas_deprecated ( ""negative <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c ) ; jas_deprecated ( ""positive <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c ) ; jas_deprecated ( ""negative <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", c ) ; return - 1 ; }",0
756,"<S2SV_ModStart> ; while ( ( skb = skb_dequeue ( & rose_loopback_queue ) )!= NULL ) { if ( <S2SV_ModStart> ] ; dest = ( rose_address * ) ( skb -> data + 4 ) ; skb_reset_transport_header ( skb ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( sk ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } }",0
757,<S2SV_ModStart> -> npages > KVM_MEM_MAX_NR_PAGES && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM,0
758,"<S2SV_ModStart> indev!= NULL &&! capable ( CAP_NET_ADMIN ) ) { rcu_read_unlock ( ) ; newdst = htonl ( 0x7F000001 ) ; ifa = indev -> ifa_list ; } else { rcu_read_unlock ( ) ; if (! newdst ) return NF_DROP ; } memset ( & newrange. flags, 0, sizeof ( newrange. flags ) ) ; memset ( & newrange. min_proto, 0, sizeof ( newrange. min_proto ) ) ; newrange. max_proto = mr -> range [ 0 ]. max ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; newrange. flags |= NF_NAT_RANGE_PROTO_SPECIAL ; if ( mr -> flags & NF_NAT_RANGE_PROTO_SPECIAL ) { if ( mr -> flags & NF_NAT_RANGE_PROTO_SPECIAL ) newrange. flags |= NF_NAT_RANGE_PROTO_SPECIAL ; }",0
759,"<S2SV_ModStart> ; end = path <S2SV_ModEnd> ; do { <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - F",0
760,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAV",0
761,"<S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> expires <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ;",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
764,"<S2SV_ModStart> -> priv ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> data_mutex ) ; if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } if ( wbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!",0
765,"<S2SV_ModStart> ( channel ) ; if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; return ; } client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; kfree ( new_root_item ) ; new_root_item = kmalloc ( sizeof ( * new_root_item ), GFP_NOFS ) ; if (! new_root_item ) { kfree ( path ) ; path = NULL ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; kfree ( path ) ; path = NULL ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item",0
769,<S2SV_ModStart> if ( s ) { struct unix_sock * u = unix_sk ( s ) ; spin_lock ( & unix_gc_lock ) ; if ( atomic_long_dec_and_test ( & u -> inflight ) ) list_del_init ( & u -> link ) ; unix_tot_inflight -- ; spin_unlock ( & unix_gc_lock ) ; } else { struct unix_sock * u = unix_sk ( s ) ; spin_lock ( & unix_gc_lock ) ; BUG_ON ( list_empty ( & u -> link ) ) ; if ( atomic_long_dec_and_test ( & u -> inflight ) ) list_del_init ( & u -> link ) ; unix_tot_inflight -- ; spin_unlock ( & unix_gc_lock ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> channel_map!= NULL ) { <S2SV_ModEnd> size_t chanmap_size = <S2SV_ModStart> channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ;,0
771,"<S2SV_ModStart> this_h ) { if ( sf -> x_scale_fp == REF_INVALID_SCALE ) { sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale",0
772,<S2SV_ModStart> { int32_t nestsize = ms -> nest_size [ ms -> nest_level ] ; if ( size > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ; if ( size + 2 > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ) ) ; if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 && unconditional ( & e -> ipv6 ) ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 && unconditional ( & e -> ipv6 ) ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t ->",0
774,"<S2SV_ModStart> -> xrefs = calloc ( <S2SV_ModEnd> pdf -> n_xrefs <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } SAFE_E ( fread ( buf, 1, pos_count, fp ), pos_count, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> startxref.\\n"" ) ; if ( pos_count >= sizeof ( buf ) ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } SAFE_E ( fread ( buf, 1, pos_count, fp ), pos_count, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> startxref.\\n"" ) ; if ( pos_count >= sizeof ( buf ) ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n""",0
775,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
776,<S2SV_ModStart> sk ) ; spin_lock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; opt <S2SV_ModStart> NULL ) ; spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( opt ) { spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; sock_kfree_s <S2SV_ModStart> tot_len ) ; spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( opt ) ; spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; } <S2SV_ModStart> NULL ) ; spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( opt ) { spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; sock_kfree_s <S2SV_ModStart> tot_len ) ; spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( opt ) ; spin_unlock_bh ( & sk -> sk_wmem_lock <S2SV_ModEnd> ) ; },0
777,"<S2SV_ModStart> = 0, <S2SV_ModEnd> tmpin = NULL <S2SV_ModStart> tmpin = NULL, <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> tmpout = NULL, <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> tmpout = NULL, <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> tmpout = NULL, <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> tmpout = NULL, <S2SV_ModEnd> tmpout = NULL",0
778,"<S2SV_ModStart> - EINVAL ; memset ( & src_info, 0, sizeof ( src_info ) ) ; <S2SV_ModStart> - EINVAL ; memset ( & src_info, 0, sizeof ( src_info ) ) ; spin_lock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_lock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_lock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( & sk -> sk_omem_alloc ) ; spin_unlock_bh ( &",0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_prot,0
780,"<S2SV_ModStart> cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command",0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dere,0
782,"<S2SV_ModStart> active_mm!= mm &&! ( vmflag & VM_HUGETLB ) ) { leave_mm ( smp_processor_id ( ) ) ; goto out ; } if ( ( start!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; local_flush_tlb ( ) ; } else { for ( addr = start ; addr < end ; addr += PAGE_SIZE ) { count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_ONE ) ; __flush_tlb_single ( addr ) ; } } trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush ) ; preempt_enable ( ) ;",0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ;",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ; ) { char * temp = malloc ( strlen ( temp ) + 10 ) ; if ( temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } if ( temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } temp [ i ] = 0 ; if ( temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } if ( temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } if ( temp [ i ] == 0 || temp [ i ] == EOF ) { fclose ( fp ) ; return NULL ; } temp [ i ] = 0 ; if ( temp [ i ] == 0 ) { fclose ( fp ),0
785,<S2SV_ModStart> task ) { spin_lock_irq ( & task -> slow_task -> lock ) ; <S2SV_ModStart> -> timer ) ) { spin_unlock_irq ( & task -> slow_task -> lock ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
786,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not",0
787,"<S2SV_ModStart> = 0 ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; }",0
788,<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type =,0
789,"<S2SV_ModStart> -> init ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL",0
790,<S2SV_ModStart> all_channels_lock ) ; if (! atomic_dec_and_test ( & pch -> file. refcnt ) ) { spin_lock_bh ( & pch -> file. rwait ) ; pch -> file. dead = 1 ; wake_up_interruptible ( & pch -> file. rwait ) ; if ( atomic_dec_and_test ( & pch -> file. refcnt ) ) ppp_destroy_channel ( pch ) ; } spin_unlock_bh ( & pch -> file. rwait ) ; if ( atomic_dec_and_test ( & pch -> file. refcnt ) ) { spin_unlock_bh ( & pch -> file. rwait ) ; pch -> file. dead = 1 ; wake_up_interruptible ( & pch -> file. rwait ) ; if ( atomic_dec_and_test ( & pch -> file. refcnt ) ) ppp_destroy_channel ( pch ) ; },0
791,<S2SV_ModStart> flags ) { struct btrfs_dir_item * di ; struct btrfs_trans_root * root = BTRFS_I ( inode ) -> fs_info -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
792,<S2SV_ModStart> 0xbf ) return 1 <S2SV_ModEnd> ; opdef = <S2SV_ModStart> case WASM_OP_I64EQZ : case WASM_OP_I64NE : case WASM_OP_I64LTU : case WASM_OP_I64GTU : case WASM_OP_I64LEU : case WASM_OP_I64GES : case WASM_OP_I64GEU : case WASM_OP_I64EQZ : case WASM_OP_I64EQZ : case WASM_OP_I64EQ : case WASM_OP_I64LTU : case WASM_OP_I64GTU : case WASM_OP_I64LEU : case WASM_OP_I64GEU : case WASM_OP_I64GES : case WASM_OP_I64GEU : case WASM_OP_I64EQZ : case WASM_OP_I64EQZ : case <S2SV_ModStart> case WASM_OP_I64EQZ : case WASM_OP_I64LTU : case,0
793,<S2SV_ModStart> client ) ; g_object_unref ( & client -> proxy ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> bus_side ) ;,0
794,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
795,"<S2SV_ModStart> = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW, & key -> flags ) || test_bit ( KEY_FLAG_OVERFLOW",0
796,"<S2SV_ModStart> ip ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) { unsigned char * ie = ip + t ; unsigned char * oe = op + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { * op ++ = * ip ++ ; } while ( ip < ie ) ; ip = ie ; op = oe ; } else # endif { unsigned char * ie = ip + t ; unsigned char * oe = op + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { * op ++ = * ip ++ ; } while ( ip < oe ) ; ip = oe ; } state = 4 ; continue ; } # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS",0
797,"<S2SV_ModStart> ; if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; return - EINVAL ; } if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size",0
798,<S2SV_ModStart> ) { vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,"<S2SV_ModStart> goto out6 ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap [ i ]",0
800,"<S2SV_ModStart> ++ ) { if ( sdb_num_set ( sdb, ""entries"", sdb_num_get ( sdb, ""link"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link"", sdb_num_get ( sdb, ""entries"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link"", sdb_num_get ( sdb, ""link_section_name"", sdb_num_get ( sdb, ""link_section_name",0
801,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (",0
802,<S2SV_ModStart> -> is_src_frame_alt_ref )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> avg_frame_bandwidth + af_ratio - 1 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ i ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ i ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> allow-untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ i",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,"<S2SV_ModStart> -= INDENT_INCR ; if ( tbl -> indent < 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else if ( tbl -> indent > CHAR_MAX - mode -> indent_level ) { check_minimum0 ( tbl, MAX_INDENT_LEVEL - mode -> indent_level ) ; addcontentssize ( tbl, offset ) ; } else { check_minimum0 ( tbl, MAX_INDENT_LEVEL - mode -> indent_level ) ; addcontentssize ( tbl, offset ) ; } if ( tbl -> indent > CHAR_MAX - mode -> indent_level ) { check_minimum0 ( tbl, MAX_INDENT_LEVEL - mode -> indent_level ) ; addcontentssize ( tbl, MAX_INDENT_LEVEL - mode -> indent_level ) ; addcontentssize ( tbl, offset ) ; }",0
806,"<S2SV_ModStart> ; if ( e >= b + CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u""\\n"", line, b, e, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u"" ""u"" ""\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_",0
807,<S2SV_ModStart> } # endif # define HEX_LEX_ENVIRONMENT ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define HEX_LEX_ENVIRONMENT ( N ) ( yyss += ( N ) ) int yylen,0
808,<S2SV_ModStart> ib ] ; const short * dequant_ptr = d -> dequant ; const short * coeff_ptr = b -> coeff ; const short * dqcoeff_ptr = b -> dqcoeff ; const short * dequant_ptr = d -> dequant ; const short * dequant_ptr = b -> dequant ; const short * coeff_ptr = b -> coeff ; const short * qcoeff_ptr = b -> qcoeff ; const short * dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ),0
809,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRLEN - 1 ) { my_free ( opt_basedir ) ; opt_basedir = my_strdup ( opt_basedir ),0
810,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) && key -> type == & key_type_keyring ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { zap = dereference_key_locked_rcu ( key ) ; call_rcu ( & zap -> rcu, user_free_payload_rcu ) ; return ret ; }",0
811,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( sk -> sk_filter, sock_owned_by_user ( sk ) ) ; if ( f -> type_mask == 0 ) { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } else { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; }",0
812,"<S2SV_ModStart> decrypt_cb ) { int <S2SV_ModEnd> n = ( <S2SV_ModStart> data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active && ( data + first_partition_length_in_bytes > data_end ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active && ( data + first_partition_length_in_bytes > data_end ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart>. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; }",0
815,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank>",0
816,"<S2SV_ModStart> 0 ) ; if ( cc == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct sock * sk = asoc -> base. sk ; spin_lock_bh ( & sk -> sk_receive_queue ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> ep, transport, GFP_ATOMIC ) ; out_unlock : spin_unlock_bh ( & sk -> sk_receive_queue ) ; sctp_association_put ( asoc ) ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO",0
818,"<S2SV_ModStart> * input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> # define prolog if ( bytes_matched >= max_bytes_matched ) { action = ACTION_KILL_TAIL ; break ; } # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & storage -> fiber_pool, & fiber ) ; fail_",0
819,"<S2SV_ModStart> * returnrate, int <S2SV_ModEnd> returndistortion, int <S2SV_ModStart> returnintra ) { memset ( & best_mode, 0, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, 0, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, 0, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, 0, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, 0, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, 0, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset ( & this_mode, sizeof ( BEST_MODE ) ) ; memset (",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_IOIO_PROT ) ; set_intercept ( svm, INTERCEPT_MSR_PROT ) ; set_intercept ( svm,",0
821,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""mmap <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } if ( h -> addr == NULL ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; }",0
822,"<S2SV_ModStart> const cdf_stream_t * sst <S2SV_ModEnd>, const uint64_t <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"",",0
823,"<S2SV_ModStart> ; uWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i4_max_frm_num ; WORD32 pic_height_in_map_units_minus1, u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv, u4_num_reorder_frames ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; u1_seq_parameter_set_id = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_",0
824,"<S2SV_ModStart> -> palette ) ; if ( err ) return - EFAULT ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) ) ; if ( err ) return - EFAULT ; up_native = compat_alloc_user_space ( sizeof ( struct video_spu_palette ) ) ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) ) ; if ( err ) return - EFAULT ; up_native = compat_alloc_user_space ( sizeof ( struct video_spu_palette ) ) ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) ) ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) ) ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) ) ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) ) ; err |= __copy_to_user ( up_native, sizeof ( struct video_spu_palette ) )",0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, &",0
826,"<S2SV_ModStart> icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ;",0
827,"<S2SV_ModStart> { uint16 bitspersample, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( input_compression == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, input_compression ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, jpegcolormode ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_photometric == ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input_photometric ) ; else if ( input_photometric == ( uint",0
828,"<S2SV_ModStart> a ) { if ( a -> pst == NULL ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set",0
829,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, d -> name )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; } if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, d -> name )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; } fclose ( pathfile ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL, d -> name )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
830,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( fe -> icbTag. strategyType == cpu_to",0
831,"<S2SV_ModStart> TX_SIZE tx_size_uv = mbmi -> tx_size_uv ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; for ( i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_",0
832,"<S2SV_ModStart> dst_size ) { const int namelen = strlen ( name ) ; const int tag_size = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data ) return - 1 ; data += tag_size ; } if ( data_end - data < 3 ) return - 1 ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data ) ; break ; case AMF_DATA_TYPE_STRING : len = ff_amf_tag_size (",0
833,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( queued || fq -> flush_queue_delayed ) { spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ; }",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
835,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if ( cc > TIFF_MAX_HORDI <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX",0
837,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; int err ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) <S2SV_ModEnd> ) ; if",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> * mgr_hdl ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; <S2SV_ModStart> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_",0
840,"<S2SV_ModStart> == NULL || * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * replySize > ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EIN",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info ->",0
842,<S2SV_ModStart> berval ) ; if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_length [ 0 ]!= sizeof ( * code -> key_data_length ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_length [ 0 ]!= sizeof ( * code -> key_data_length ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_length [ 0 ]!= sizeof ( * code -> key_data_length ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_length [ 0 ]!= sizeof ( * code -> key_data_length ) { err = ENOMEM ; goto cleanup ; } if ( code,0
843,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""arguments"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J",0
844,"<S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"",",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> RD_BOOL is_fastpath ; <S2SV_ModStart> ( s, MCS_CONNECT_RESPONSE, & result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, MCS_CONNECT_RESPONSE, & result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_RESULT, & result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; }",0
847,<S2SV_ModStart> ; if ( stkt_server == NULL ) { stkt_server = NULL ; stkt_server = NULL ; } if ( stkt_server == NULL ) { stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; } if ( stkt_server == NULL ) { stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; } if ( stkt_server == NULL ) { stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; } if ( stkt_server == NULL ) { stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt_server = NULL ; stkt,0
848,<S2SV_ModStart> ) || ( ( c >= 0x200C ) && ( c <= 0x200D ) ) || ( ( c >= 0x2070 ) && ( c <= 0x218F ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFDF0 ) && ( c <= 0xFFFD ) ) || ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ),0
849,"<S2SV_ModStart> -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" )",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; return - EINVAL ; } if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; return - EINVAL ; } if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; return - EINVAL ; } if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; mutex_lock ( & userns_state_mutex ) ; if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; return - EINVAL ; } if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; return - EINVAL ; } if ( idx >= map -> nr_extents ) { mutex_unlock ( & userns_state_mutex ) ; mutex_unlock ( & userns_state_mutex ) ; if ( idx >= map -> nr_extents ) { mutex_unlock (,0
852,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g",0
853,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> smb_ofile_t * of <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi ->",0
856,<S2SV_ModStart> = AF_TIPC ; addr -> addr. id. ref = msg_origport ( msg ) ; addr -> addr. id. node = msg_orignode ( msg ) ;,0
857,<S2SV_ModStart> -> userspace_addr & ( PAGE_SIZE - 1 ) ) { r = - EINVAL ; goto out ; } if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) { r = - EINVAL ; goto out_free ; },0
858,"<S2SV_ModStart> ) NULL ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } clone_info = DestroyImageInfo ( clone_info ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; }",0
859,"<S2SV_ModStart> ) ) { if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Missing <S2SV_blank> proxy <S2SV_blank> option"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Missing <S2SV_blank> proxy <S2SV_blank> option"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Missing <S2SV_blank> proxy <S2SV_blank> option"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Missing <S2SV_blank> proxy <S2SV_blank> option"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Missing <S2SV_blank> proxy <S2SV_blank> option"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Missing <S2SV_blank> proxy <S2SV_blank> option"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream",0
860,"<S2SV_ModStart> len ) { PyObject * w ; int kind ; int data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr ; Py_UCS4 chr ; Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) {",0
861,"<S2SV_ModStart> = 0 ; if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( strict_mode == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record",0
862,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & filehdr, sizeof ( Wave64FileHeader ), & bcount ) || bcount!= sizeof ( Wave64FileHeader ) || memcmp ( filehdr. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( filehdr. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid ) || memcmp ( chunk_header. formType, wave_guid ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAV",0
864,<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart> wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank>",0
866,<S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> ; } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL,0
867,"<S2SV_ModStart> -> buffer ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ;",0
868,"<S2SV_ModStart> goto error ; if (! ( ast -> sub_ctx = avformat_alloc_context ( ) ) ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_",0
869,"<S2SV_ModStart> null_server ; int need_error_free <S2SV_ModEnd> ; int local_rcache <S2SV_ModStart> ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error_free ) ) return ( retval ) ; if ( need_error_free && strcmp ( inbuf. data, need_error",0
870,"<S2SV_ModStart> write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; if (",0
872,"<S2SV_ModStart> = 0xAA ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE",0
873,<S2SV_ModStart> new_fs ) { if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; },0
874,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( width & 0xf0 )!= 0 && ( height & 0xf0 )!= 0 ) { vp8_de_alloc_frame_buffers ( oci ) ; return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( width & 0xf0 )!= 0 && ( height & 0xf0 )!= 0 ) { vp8_de_alloc_frame_buffers ( oci ) ; return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( height & 0xf0 )!= 0 && ( height & 0xf0 )!= 0 ) { vp8_de_alloc_frame_buffers ( oci ) ; return - ENOMEM ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( ( width & 0xf0 )!= 0 && ( height & 0xf0 )!= 0 ) { vp8_de_alloc_frame_buffers ( oci ) ; return - ENOMEM ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( height & 0xf0 )!= 0 ) { vp8_de_alloc_frame_buffers ( oci ) ; return,0
875,<S2SV_ModStart> = php_zip_get_properties ; <S2SV_ModEnd> zip_object_handlers. read_property <S2SV_ModStart> = php_zip_read_property ; <S2SV_ModEnd> zip_object_handlers. has_property <S2SV_ModStart> = php_zip_has_property ; <S2SV_ModEnd> zip_object_entry = zend_register_internal_class <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ) <S2SV_ModStart> = zend_register_internal_class ( <S2SV_ModEnd> & ce TSRMLS_CC ),0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( ( iova + length ) > ( mem -> iova + mem -> length ) ) return - EFAULT ; if ( ( iova + length ) > ( mem -> iova + mem -> length ) ) return - EFAULT ; if ( ( iova + length ) > ( mem -> iova + mem -> length ) ) return - EFAULT ; if ( ( iova + length ) > ( mem -> iova + mem -> length ) ) return - EFAULT ;,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) )",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> void * cb_data",0
879,<S2SV_ModStart> ; * sent = 0 ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg,0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return atomic_inc_not_zero ( & <S2SV_ModStart> -> ref ) <S2SV_ModEnd> ; } <S2SV_null>,0
881,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs <S2SV_ModStart> clusters - 1 ) { FAT_ENTRY subseqEntry ; get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( subseqEntry. value == 0 ) subseqEntry. value = 0 ; else subseqEntry. value = 0 ; } else { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster + 1, fs ) ; data = fs -> fat + cluster * 4 ; offs = fs -> fat_start + cluster * 4 ; * ( uint16_t * ) data = htole16 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size = 4 ; } break ; case 64 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; offs = fs -> fat_start + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size",0
882,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
883,<S2SV_ModStart> sk_nulls_node ) ; spin_lock_bh ( & ping_table. lock ) ; <S2SV_ModStart> sk ) ; spin_unlock_bh ( & ping_table. lock ) ;,0
884,"<S2SV_ModStart> u1_num_mbs ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbs ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ), <S2SV_ModEnd> u1_num_mbsNby2, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ) ;",0
885,<S2SV_ModStart> ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) goto free ; if (! atomic_inc_not_zero ( & mm -> mm_users ) ) goto free ; page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) goto free ; page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { ret = - ENOMEM ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! atomic_dec_not_zero ( & mm -> mm_users ) ) goto free ; page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) goto free ; page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { ret = - ENOMEM ; goto free,0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> result = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode",0
887,"<S2SV_ModStart> * user, unsigned int max_events, struct file_system_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
888,"<S2SV_ModStart> in ) ; if ( in -> linesize [ p ]!= in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( in -> linesize [ p ]!= in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], w, h ) ; else if ( in -> linesize [ p ]!= in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( in -> linesize [ p ]!= in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], w, h ) ; else if ( in -> linesize [ p ]!= in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [",0
889,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] && screen -> buffers [ 1 ] ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> sb_buffer ) ; }",0
890,"<S2SV_ModStart> ; if (! tnum_is_const ( reg -> var_off. type ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> var_off. value, off - reg -> off ) ; return - EACCES ; } if (! tnum_is_const ( reg -> var_off. type ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> var_off. value, off - reg -> off ) ; return - EACCES ; } if (! tnum_is_const ( reg -> var_off. type ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is",0
891,"<S2SV_ModStart> ; uint16 nstrips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; uint32 rows = 0 ; tsize_t scanline_size = TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) ; if ( scanline_size == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ; if ( bytes_read < 0 &&! ignore ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> after <S2SV_blank> %lu <S2SV_blank> rows"", ( unsigned long ) rows ) ; return 0 ; } if ( bytes_read < 0 &&! ignore ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> after <S2SV_blank> %lu"", ( unsigned long ) strip, ( unsigned long ) rows ) ; return 0 ; }",0
892,"<S2SV_ModStart> char need_to_append_dot = ( base_name [ base_len - 1 ] == '.' || base_name [ base_len - 1 ] == '/' )? 0 : 1 ; <S2SV_ModStart> ; struct search_domain <S2SV_ModEnd> * dom ; <S2SV_ModStart> ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { char * const newname = ( char * ) mm_malloc ( base_len + need_to_append_dot + 1 ) ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; if (! newname ) return NULL ; }",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
894,"<S2SV_ModStart> out ; if (! msg -> msg_name ) { msg -> msg_name = NULL ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg ->",0
895,"<S2SV_ModStart>, number_planes_filled ; if ( number_planes_filled > MagickMax ( number_planes, 1 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled, ""ImproperImageHeader"" ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled, ""ImproperImageHeader"" ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled, ""ImproperImageHeader"" ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled, ""ImproperImageHeader"" ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> < S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> < S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
897,"<S2SV_ModStart> policy ) { if ( IS_ERR ( policy ) ) return PTR_ERR ( policy ) ; if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) { printk ( KERN_WARNING ""%s: <S2SV_blank> Policy <S2SV_blank> inconsistent <S2SV_blank> with <S2SV_blank> encryption <S2SV_blank> context\\n"", __func__ ) ; return - EINVAL ; } if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) { printk ( KERN_WARNING ""%s: <S2SV_blank> Policy <S2SV_blank> inconsistent <S2SV_blank> with <S2SV_blank> encryption <S2SV_blank> context\\n"", __func__ ) ; return - EINVAL ; } if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; printk ( KERN_WARNING ""%s: <S2SV_blank> Policy <S2SV_blank> inconsistent <S2SV_blank> with <S2SV_blank> encryption <S2SV_blank> context\\n"", __func__ ) ; return - EINVAL ; }",0
898,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
899,"<S2SV_ModStart> = current_cred ( ) <S2SV_ModEnd>,. match_data <S2SV_ModStart>, flags ) ; if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error_free ; } if ( ret == 0 ) { ret = construct_get_dest_keyring ( & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = construct_get_dest_keyring ( & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = construct_get_dest_keyring ( & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } }",0
900,"<S2SV_ModStart> return - EOPNOTSUPP ; if ( flags & MSG_TRUNC ) { memset ( msg -> msg_name, 0, sizeof ( * sin6 ) ) ; memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( * msg -> msg_namelen ) ) ; } else { memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_namelen, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_namelen, sizeof ( * msg -> msg_namelen ) ) ; memset ( msg -> msg_name, sizeof ( * msg -> msg_namelen ) ; msg -> msg_namelen = sizeof ( * msg -> msg_namelen ) ; memset ( msg -> msg_name, 0, sizeof",0
901,<S2SV_ModStart> (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { free ( header ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; free ( pool -> swork. prev_hash ) ; free ( pool -> swork. bbversion ) ; free ( pool -> swork. bbversion ) ; free ( pool -> swork. coinbase1 ) ; free ( pool -> swork. coinbase2 ) ; cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. coinbase2 ) ; free ( pool -> swork. coinbase1 ) ; free ( pool -> swork. coinbase2 ) ; cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. bbversion ) ; free ( pool -> swork. nbit ) ; free ( pool -> swork. ntime ) ; free ( pool -> swork.,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> * size ) ; if ( ptr ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; }",0
904,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER <S2SV_ModEnd> ( __dict__ ) <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___type__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = _Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = _BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } res = _BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null",0
906,"<S2SV_ModStart>, USB_DT_OTG, <S2SV_ModEnd> ( void * <S2SV_ModStart> * * desc ) ; if (! desc ) { dev_err ( & udev -> dev, ""missing <S2SV_blank> OTG <S2SV_blank> descriptor"" ) ; return 0 ; } if ( desc -> bLength < sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""missing <S2SV_blank> OTG <S2SV_blank> descriptor <S2SV_blank> bLength: <S2SV_blank> %d\\n"", desc -> bLength ) ; return 0 ; } if ( desc -> bLength < sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""missing <S2SV_blank> OTG <S2SV_blank> descriptor"" ) ; return 0 ; } if ( desc -> bLength == sizeof ( struct usb_otg_descriptor ) ) { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_ALT_HNP_SUPPORT, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) { dev_err ( & udev -> dev, ""set <S2SV_blank> a_alt_hnp_support <S2SV_blank>",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & event -> id, sizeof ( event -> id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_FILTER : if ( copy_to_user ( ( void __user * ) arg, & event -> filter, sizeof ( event -> filter ) ) ) return - EFAULT ; if ( copy_to_user ( ( void __user * ) arg, & event -> filter, sizeof ( event -> filter ) ) ) return - EFAULT ; if ( copy_to_user ( ( void __user * ) arg, & event -> filter, sizeof ( event -> filter ) ) return - EFAULT ; if ( copy_to_user ( ( void __user * ) arg, & event -> filter, sizeof ( event -> filter ) ) ) return - EFAULT ; if ( copy_to_user ( ( void __user *",0
908,<S2SV_ModStart> -> prr_delivered += delta <S2SV_ModEnd> ; if (,0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( skcipher ) crypto_free_skcipher ( skcipher ) ; return NULL ;",0
911,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp",0
912,<S2SV_ModStart> tile_height ) { av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; av_free ( c -> kempf_flags ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> kempf_buf ) return AVERROR ( ENOMEM ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_buf = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> kempf_buf ) return AVERROR ( ENOMEM ) ;,0
913,"<S2SV_ModStart> sizeof iv ) ; if ( len < sizeof key ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; return Qnil ; } if ( len < sizeof iv ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed)"" ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; return Qnil ; } if ( len < sizeof key ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", len ) ; return Q",0
914,"<S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE,",0
915,"<S2SV_ModStart> ; register_savevm ( <S2SV_ModEnd> dev, ""stellaris_enet""",0
916,"<S2SV_ModStart> p ) { ND_TCHECK ( ( ndo, ""[|chdlc]"" ) ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ;",0
917,"<S2SV_ModStart> referral_walks_count ++ ; if ( cifs_sb -> mnt_cifs_flags & MS_RDONLY ) { rc = - EROFS ; goto out ; } if ( cifs_sb -> mnt_cifs_flags & MS_RDONLY ) { rc = cifs_read_super ( sb, cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags",0
918,"<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 3 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ktime_to_timespec_cond ( skb -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 4 ) ) empty = 0 ; if ( skb_is_err_queue ( skb ) && skb -> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) put_cmsg ( msg, SOL_SOCKET, SCM_TIMESTAMPING_OPT_STATS, skb -> len, skb -> data )",0
919,"<S2SV_ModStart> -> uri_filter ) { raptor_sax2_set_uri_filter ( rdf_xml_parser -> sax2, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_NO_FILE ) ) ; raptor_sax2_parse_start ( rdf_xml_parser -> sax2, uri ) ; if ( rdf_xml_parser -> id_set ) { raptor_free_id_set ( rdf_xml_parser -> id_set ) ; raptor_free_id_set ( rdf_xml_parser -> id_set ) ; rdf_xml_parser -> id_set = NULL ; } if ( RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_CHECK_RDF_ID ) ) { raptor_free_id_set ( rdf_xml_parser -> id_set ) ; rdf_xml_parser -> id_set = NULL ; } if ( RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_CHECK_RDF_ID ) ) { raptor_free_id_set (",0
920,"<S2SV_ModStart> ; if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD",0
921,"<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAccept, encJoinAcceptSize ) ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAccept, encJoinAcceptSize ) ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAccept, encJoinAcceptSize ) ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAccept, encJoinAcceptSize ) ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAccept",0
922,<S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) < 4 ) { return - 1 ; } if ( nghttp2_buf_mark_avail ( & iframe,0
923,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ;,0
924,<S2SV_ModStart> += dif ; kfree ( opt2 ) ;,0
925,"<S2SV_ModStart> intel_arch_events_quirk ) ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_",0
926,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < ch ; ++ i ) if (! do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ;",0
927,"<S2SV_ModStart> ; u32 last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModStart> ( sk ) ; last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> { challenge_timestamp = now ; last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModEnd> ; } if <S2SV_ModStart> { challenge_timestamp = now ; last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModEnd> ; } if <S2SV_ModStart> challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tcp_send_ack ( sk ) ; } else { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModEnd> ; } <S2SV_null>",0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) ) ;",0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * * tp <S2SV_ModStart> ] ; const vpx_extra_bit * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >>",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> -> version = le16_to_cpu ( hdesc -> bcdHID ) ; hid -> country = le16_to_cpu ( hdesc -> bCountry ) ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } <S2SV_ModEnd> if ( hdesc <S2SV_ModStart> -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"",",0
933,"<S2SV_ModStart> int id_len, idtype_len <S2SV_ModEnd> ; const unsigned <S2SV_ModStart> * typedata ; ND_TCHECK ( * ep ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ND_TCHECK ( * ep ) ; UNALIGNED_MEMCPY ( & idtype_len, sizeof ( idtype_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ep + 1 ), id_len - 4 ) ) goto trunc ; } ND_TCHECK ( * ep ) ; UNALIGNED_MEMCPY ( & idtype_len, sizeof ( idtype_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ep + 1 ), id_len - 4 ) ) goto trunc ; } if (",0
934,<S2SV_ModStart> ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # else if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> void * data <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> char * name = strndup ( & obj -> oid. name, sizeof ( obj -> oid. name ), GFP_NOFS ) ; add_preferred_base_object ( name ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; obj -> flags |= OBJECT_ADDED ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
936,<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ) { goto error ; } if (! jas_tvparser_next ( tvp ) ),0
937,"<S2SV_ModStart> urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; <S2SV_ModStart> err_free_urb_to_pipe ; } if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ; goto err_free_urb_to_pipe ; }",0
938,"<S2SV_ModStart>, yt0_jmp ; WORD32 xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_",0
939,<S2SV_ModStart> ] ; if ( unlikely ( ( tag & 0x1f ) == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ;,0
940,"<S2SV_ModStart> val ; if (! ( flags & ( __GFP_ZERO | __GFP_IO ) ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( ( flags & ( __GFP_ZERO | __GFP_IO ) ) == 0 ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( ( flags & __GFP_IO ) == 0 ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( ( flags & ( __GFP_ZERO | __GFP_IO ) ) == ( __GFP_IO | __GFP_IO ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( flags & ( __GFP_ZERO | __GFP_IO ) == 0 ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; }",0
941,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed"" ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len )",0
943,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ field -> value [ n ] - min ], 0, interrupt ) ; if ( field -> value [ n ] >= min && field -> value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 1, interrupt ) ; if ( field -> value [ n ] >=",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,<S2SV_ModStart> ; if ( argReg < 0 || ( argReg + ins_size ) > regsz ) { r_error ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_strerror ( r_str,0
946,"<S2SV_ModStart> ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_version_val, rack_version_val_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_logger_val, req_rack_logger ( req ) ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ;",0
947,<S2SV_ModStart> valuelen ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtblkno = args -> dp -> i_mount -> m_sb. sb_dblocks [ args -> index ]. sb_dblocks [ args -> index ]. sb_dblocks [ args -> rmtblkno ]. sb_dblocks [ args -> rmtblkno ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ]. sb_dblocks [ args -> rmtblknum ].,0
948,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> col_type, prepare_retval <S2SV_ModStart>, prepare_retval ; <S2SV_ModEnd> MYSQL_BIND * bind <S2SV_ModStart>, bind_end ; <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; <S2SV_ModEnd> return 0 ;",0
949,"<S2SV_ModStart> -> destroy ) { atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVATE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVATE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec",0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
951,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart>, { need *= 4 ; } ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) ( need + 1 ) ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_",0
952,"<S2SV_ModStart> ; int err2 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; if ( prev == & ei -> i_orphan ) { jbd_debug ( 4, ""superblock <S2SV_blank> will <S2SV_blank> point <S2SV_blank> to <S2SV_blank> %u\\n"", ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { if ( val < 0 ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; else if (! isfinite ( val ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if (! isfinite ( val ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '0' ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
954,"<S2SV_ModStart> fscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, signtmp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, signtmp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
956,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; }",0
957,"<S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
958,"<S2SV_ModStart> } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device",0
959,"<extra_id_0>) < 0 ) { perror ( ""cJSON_DeleteItemFromArray: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
960,"<S2SV_ModStart> * output ; register <S2SV_ModStart> ; } output = fopen_utf8 ( argv [ i ], ""wb"" ) ; if ( output == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( Mag",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> fail : ext3_msg ( <S2SV_ModEnd> ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"",",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( gid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( gid_",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned <S2SV_ModStart> int left, right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = num_events [ - tree [ i ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 2 ] <= 0 ) right = num_events [ - tree [ i + 2 ] ] ; if ( tree [ i + 3 ] <= 0 ) right = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) right = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) right = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) right = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) right = num_events [ - tree [ i + 3 ] ] ; if ( tree [ i + 3 ] <= 0 ) right = num_events [ -",0
965,"<S2SV_ModStart> s2 ) { return memcmp ( s1, s2, strlen ( s2 ) + 1U ) <S2SV_ModEnd> ; } <S2SV_null>",0
966,<S2SV_ModStart> TRUE ; } gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * to_txt = xmpp_stanza_get_to ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_stanza_get_from ( message ) ; gchar * from_txt = xmpp_,0
967,"<S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. cluster_announce_ip ) ; server. cluster_announce_ip = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. cluster_announce_ip ) ; server. cluster_announce_ip = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ;",0
968,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { print_ssl_options ( ) ; log_flush",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_skeyid_e_nss",0
972,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
973,"<S2SV_ModStart> * zone ; <S2SV_ModEnd> int i ; <S2SV_ModStart> = malloc ( <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> struct map_tile ) ) ) return false ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_width ] ; tilemap [ x + y * y_size ]. frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tilemap [ x + y * x_size ]. tile_index = 0 ; tilemap [ x + y * x_size ]. frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tilemap [ x + y",0
974,"<S2SV_ModStart> void ip_printroute ( struct net_device * dev, const u_char * cp, u_int length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ; } ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; ptr = cp [ 2 ] - 1 ; if ( ptr < 3 || ( ptr + 1 ) & 3 ) || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "","" ) ) ; return ; }",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> i -- ) { if ( ( res = ctx -> priv -> enc. encode ( ctx -> priv -> enc, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { if ( ( res = ctx -> priv -> enc. encode ( ctx -> priv -> enc, img, pts, duration, flags, deadline ) ) ) break ; if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> priv -> enc. encode ( ctx -> priv -> enc, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if (",0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUF_SIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUF_SIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\",0
978,"<S2SV_ModStart> -> chunk_cache ) { size_t size = sizeof ( unsigned char * ) * chm -> num_chunks ; if (! sys -> alloc ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } memset ( chm -> chunk_cache, 0, size ) ; memset ( chm -> chunk_cache, 0, size ) ; return NULL ; } size_t size = sizeof ( unsigned char * ) * chm -> chunk_size ; if (! sys -> read ( fh, buf, size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t ) ( chunk_num * chm -> chunk_size ) )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return",0
979,"<S2SV_ModStart> = fake_used_mask ; memset ( & fake_pmu. group_entry, 0, sizeof ( fake_pmu. group_entry ) ) ; <S2SV_ModStart> group_entry ) { memset ( & fake_pmu. group_entry, 0, sizeof ( fake_pmu. group_entry ) ) ; <S2SV_ModStart> group_entry ) { memset ( & fake_pmu. group_entry, 0, sizeof ( fake_pmu. group_entry ) ) ; memset ( & fake_pmu. group_entry, 0, sizeof ( fake_pmu. group_entry ) ) ; return - EINVAL ; } list_for_each_entry ( sibling, & event -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu. group_entry, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> group_entry, sibling_list ) { if (! validate_event ( & fake_pmu. group_entry, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list,",0
980,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 0 ) { win_maximise ( 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term.",0
981,"<S2SV_ModStart> -> studio_profile ) { if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported"" ) ; } else if ( s -> studio_profile",0
982,"<S2SV_ModStart> ; if (! access_ok ( VERIFY_WRITE, & tsops -> sem_perm, sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ) ) ) return - EFAULT ; if (! access_ok ( VERIFY_WRITE, & tsops -> sem_perm, sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ) ) { if (! access_ok ( VERIFY_WRITE, & tsops -> sem_perm, sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm ), sizeof ( * tsops -> sem_perm",0
983,<S2SV_ModStart> cols + 17 ; i ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; d [ i +,0
984,"<S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz > EXT2_LOG2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz > EXT2_LOG2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank>",0
985,"<S2SV_ModStart> = 0 ; if ( ( npix + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( npix + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( npix + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } #",0
986,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ;,0
987,"<S2SV_ModStart> ; } } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( flags & RE_FLAGS_EXHAUSTIVE ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ) ; break ; } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> jslTokenAsString ( int <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STRING : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank> COMMENT"", len ) ; return ; } if ( token >= _LEX_OPERATOR_START && token < _LEX_R_LIST_",0
989,"<S2SV_ModStart> mnt_instance ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { if (! list_empty ( & mnt -> mnt_mounts ) ) { list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ; spin_lock_bh ( & mnt -> mnt_mounts_lock ) ; spin_unlock_bh ( & mnt -> mnt_mounts_lock ) ; } spin_unlock_bh ( & mnt -> mnt_mounts_lock ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { spin_lock_bh ( & mnt -> mnt_mounts_lock ) ; spin_unlock_bh ( & mnt -> mnt_mounts_lock ) ; spin_unlock_bh ( & mnt -> mnt_mounts_lock ) ; } spin_lock_bh ( & mnt -> mnt_mounts_lock ) ; spin_unlock_bh ( & mnt -> mnt_mounts_lock ) ; spin_",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ) ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi ) ) ; jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ), jpc_pi_lyrno ( pi )",0
992,"<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> ; uint32_t pos ; struct udf_inode_info * iinfo ; down_read ( & iinfo -> i_data_sem ) ; if ( UDF_I ( inode ) -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
993,<S2SV_ModStart> & X2APIC_ENABLE ) { if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_legacy_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( v,0
994,"<S2SV_ModStart>!= NULL ) { if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } cleanup : ldap_msgfree ( result ) ; if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
995,"<S2SV_ModStart> = value ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT ) ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT ) ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT ) ; if ( ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ;",0
996,<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '2' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '3' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '4' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '5' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '6' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '7' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '8' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '9' : psf -> rwf_endian = SF_ENDIAN_,0
997,"<S2SV_ModStart>, ret ; struct cx24116_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
998,"<S2SV_ModStart> ; break ; } memcpy ( cinfo. hci_handle, sco_pi ( sk ) -> conn -> hcon -> handle, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo. dev_class ) ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; if ( copy_to_user ( optval, ( char * ) & cinfo, len ) ) err = - EFAULT ; break ; default : memcpy ( cinfo. hci_handle, sco_pi ( sk ) -> conn -> hcon -> handle, 3 ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len,",0
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ;",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; guint pktnum, hr, min, sec, csec ; char channel [ 10 ], direction [ 10 ] ; if ( num_items_scanned!= 7 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( strcmp ( line, ""OFFSET <S2SV_blank> 0001-0203"" )!= 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have",0
1002,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModStart> < S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> int <S2SV_ModStart> < S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1003,"<S2SV_ModStart> case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_",0
1004,"<S2SV_ModStart> TIPC_NLA_LINK_UP ] ) ; if (! strncmp ( nla_data ( link [ TIPC_NLA_LINK_NAME ], sizeof ( link_info. str ), sizeof ( link_info. str ), sizeof ( link_info. str ) ) ) { err = - EINVAL ; goto error ; } err = tipc_add_tlv ( msg -> rep, TIPC_TLV_LINK_INFO, & link_info, sizeof ( link_info ) ) ; if ( err ) return err ; err = tipc_add_tlv ( msg -> rep, TIPC_TLV_LINK_ERROR, & link_info, sizeof ( link_info ) ) ; if ( err ) return err ; err = tipc_add_tlv ( msg -> rep, TIPC_TLV_LINK_ERROR, & link_info, sizeof ( link_info ) ) ; if ( err ) return err ; err = tipc_add_tlv ( msg -> rep, TIPC_TLV_LINK_ERROR, & link_info, sizeof ( link_info ) ) ; return",0
1005,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; ibuf -> ops = NULL ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe ->,0
1006,"<S2SV_ModStart> -> tokenlen ) { assert (! jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, sizeof ( p ->",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vpx_mse8x16 <S2SV_ModEnd> ; case BLOCK_16X16 <S2SV_ModStart> : return vpx_mse16x16 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
1008,<S2SV_ModStart> | IFF_POINTOPOINT ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> ; if ( video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA <S2SV_ModStart> ; if ( video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA <S2SV_ModStart> ; if ( video_frame_counter > INT_MAX / 2 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA <S2SV_ModStart> ; if ( video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA <S2SV_ModStart> ; if ( video_frame_counter > INT_MAX / 2 || video_frame_counter > INT_MAX / 2 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA <S2SV_ModStart> ; if ( video_frame_counter > INT_MAX / 2 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA,0
1010,<S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32,0
1011,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( plgctx, request, reply, moddata, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP9 ) { return return_pkinit_rep9 ( plgctx, request, reply, moddata, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( plgctx, request, reply, moddata, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( plgctx, request, reply, moddata, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( plgctx, request, reply, moddata, send_pa ) ; } if ( padata -> pa_type == KRB5_",0
1012,"<S2SV_ModStart> if ( CheckQuantumMemory ( count, quantum )!= MagickFalse ) return ( ( void * ) NULL ) ; if (",0
1013,"<S2SV_ModStart> stratum_port ; if (! strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> for <S2SV_blank> pool <S2SV_blank> without <S2SV_blank> domain <S2SV_blank> \'%s\'"", pool -> sockaddr_url ) ; return false ; } if (! strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> for <S2SV_blank> pool <S2SV_blank> without <S2SV_blank> domain <S2SV_blank> \'%s\'"", pool -> sockaddr_url ) ; return false ; } if (! extract_sockaddr ( address, & sockaddr_url, & stratum_port ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> for <S2SV_blank> pool <S2SV_blank> without <S2SV_blank> domain <S2SV_blank> \'%s\'"", pool -> sockaddr_url ) ; return false ; } if (! strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> for <S2SV_blank> pool <S2SV_blank> without <S2SV_blank> domain <S2SV_blank> \'%s\'"", url ) ; return false ; } if (! strchr ( url, ':' ) ) { applog (",0
1014,"<S2SV_ModStart> ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_",0
1015,<S2SV_ModStart> return 0 ; if ( head -> iov_len + len > XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1016,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; spin_lock_irq ( & cluster -> cl_nodes_lock ) ; spin_unlock_irq ( & cluster -> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_PORT, & node",0
1017,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < 0 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < 0 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely",0
1018,<S2SV_ModStart> size ) { if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; } # ifdef HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( size + PREFIX_SIZE ) ; return ( char * ) ptr + PREFIX_SIZE ; # else size = zmalloc_size ( ptr ) ; update_zmalloc_stat_alloc ( size + PREFIX_SIZE ) ; return ( char * ) ptr + PREFIX_SIZE ; },0
1019,"<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, ""file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", psf -> file. filedes -> size ) ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, ""file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", psf -> file. filedes -> size ) ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, ""file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", psf -> file. filedes -> size ) ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, ""file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", psf -> file. filedes -> size ) ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, ""file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank>",0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
1021,"<S2SV_ModStart> = bss_desc ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO ) ) ) ) ), XFS_ERROR ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, XFS_ERROR ( EIO, EIO ) ) ) ) ), XFS_ERROR ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO",0
1023,"<S2SV_ModStart> r ) { int rc ; rc = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( rc < 0 ) return rc ; if ( rc < 0 ) return rc ; rc = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, r ) ; if ( rc < 0 ) return rc ; rc = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( rc < 0 ) return rc ; rc = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, r ) ; if ( rc < 0 ) return rc ; rc = ASN1_item_verify_tail ( ASN1_ITEM_rptr ( X509_CINF ), rc ) ; if ( rc < 0",0
1024,"<S2SV_ModStart> stime -> hrt ) ; ktime_set ( & stime -> ktime, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_ABS ) ; hrtimer_start_range_ns ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_ABS ) ;",0
1025,"<S2SV_ModStart> = data ; <S2SV_ModEnd> struct l2cap_conf_rfc rfc <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) <S2SV_ModEnd> ; break ;",0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return ret ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return ret ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = - 1 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> filesize ) ; av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> chunksize, s -> filesize ) ; return err ; } if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> filesize ) ; av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> chunksize ) ; av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> filesize ) ; }",0
1028,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( u1_nal_ref_idc == IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else if ( u1_nal_ref_idc == IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else if ( u1_nal_ref_idc == IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else if ( u1_nal_ref_idc == IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else if ( u1_nal_ref_idc == IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else if ( u1_nal_ref_idc == IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else if ( u1_nal_ref_idc == IDR_SLICE,0
1029,"<S2SV_ModStart> ; while ( pair!= NULL ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1030,"<S2SV_ModStart> } err = crypto_rng_set_seed <S2SV_ModEnd> ( tfm,",0
1031,"<S2SV_ModStart> = uid ; atomic_set ( & new -> count, 1 ) ; spin_lock_irq ( & ucounts_lock ) ; if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } if ( atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) { hlist_add_head ( & new -> node, hashent ) ; ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; }",0
1032,<S2SV_ModStart> ; if ( msg_sys. msg_namelen == 0 ) msg_sys. msg_namelen = sizeof ( struct compat_mmsghdr ) ; if ( msg_sys. msg_namelen > sizeof ( struct compat_mmsghdr ) ) msg_sys. msg_namelen = sizeof ( struct compat_mmsghdr ) ; if ( msg_sys. msg_namelen > sizeof ( struct compat_mmsghdr ) ) msg_sys. msg_namelen = sizeof ( struct compat_mmsghdr ) ; if ( msg_sys. msg_flags & MSG_TRUNC ) msg_sys. msg_flags &= ~ MSG_TRUNC ; if ( msg_sys. msg_namelen > sizeof ( struct compat_mmsghdr ) ) msg_sys. msg_namelen = sizeof ( struct compat_mmsghdr ) ; if ( msg_sys. msg_namelen > sizeof ( struct compat_mmsghdr ) ) msg_sys. msg_namelen = sizeof ( struct compat_mmsghdr ) ; if ( msg_sys. msg_flags & MSG_TRUNC ) msg_sys. msg_,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> ; for ( int i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; ( void ) tab [ i + 6 * 32 ] ; } <S2SV_null>,0
1035,"<S2SV_ModStart> ; if ( path [ depth ]. p_hdr == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_hdr -> h_block, path [ depth ]. p_hdr -> h_depth ) ; err = - EIO ; goto out2 ; } if ( path [ depth ]. p_hdr == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_hdr -> h_block, path [ depth ]. p_hdr -> h_depth ) ; err = - EIO ; goto out ; } if ( path [ depth ]. p_hdr == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth",0
1036,"<S2SV_ModStart> int update_open_stateid ( fmode_t fmode, <S2SV_ModStart> FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; rcu_read_unlock <S2SV_ModStart> FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) { __update_open_stateid ( state, fmode, & deleg_cur -> stateid, open_flags ) ; ret = 1 ; } else { __update_open_stateid ( state, fmode, & deleg_cur -> stateid, open_flags ) ; ret = 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, page. width, page. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, page. width, page. height ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, page. width, page. height ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist_sum",0
1041,<S2SV_ModStart> } } if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
1042,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds",0
1043,<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ),0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) <S2SV_ModEnd> ; } <S2SV_null>",0
1045,"<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; if ( unlikely ( req -> array_size > DRM_VMW_MAX_ARRAY_SIZE ) ) return - EINVAL ; if ( unlikely ( req -> base_size > DRM_VMW_MAX_ARRAY_SIZE ) return - EINVAL ; if ( unlikely ( req -> svga3d_flags & drm_vmw_surface_flag_scanout ) ) { ret = vmw_surface_gb_priv_define ( dev, size, req -> svga3d_flags, req -> format, req -> mip_levels, req -> array_size, req -> base_size, & backup_handle ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = ttm_read_lock ( & dev_priv -> reservation_sem, true ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = ttm_read_unlock ( & dev_priv -> reservation_sem, true ) ; if ( unlikely ( ret!= 0",0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel,0
1047,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> extend_right ) ; memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } src_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy (",0
1048,"<S2SV_ModStart> sctp_bind_addr * bp ; struct sctp_sockaddr_entry * laddr = & t -> ipaddr ; union sctp_addr daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; sctp_scope_t scope ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"" ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n""",0
1051,"<S2SV_ModStart> -> protocol_timeout ) { g_source_add ( client -> priv -> protocol_timeout, & client -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else { g_source_remove ( client -> priv -> protocol_timeout, & client -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"", client -> priv -> description ) ; g_source_add ( client -> priv -> protocol_timeout, & client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsSetPropertiesProcMask ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsGetPropertiesProcMask ; callbacks_ret -> get_properties. callback = get_properties_callback ; callbacks_ret -> get_properties. manager_data = client ; * mask_ret |= Sms",0
1052,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io < ie &&! ND_TTEST ( * io ) ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ipaddr_string ( ndo, &",0
1053,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent )",0
1054,"<S2SV_ModStart> NULL ) ; if ( RSTRING_LEN ( key ) > MAX_KEY_LEN ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", MAX_KEY_LEN ) ; <S2SV_ModStart> NULL ) ; if ( RSTRING_LEN ( key ) > MAX_KEY_LEN ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", RSTRING_LEN ( key ) ) ; if ( RSTRING_LEN ( key ) > MAX_KEY_LEN ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", key_len ) ; if ( RSTRING_LEN ( key ) > MAX_KEY_LEN ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", RSTRING_LEN ( key ) )!= MAX_KEY_LEN ) ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", MAX_KEY_LEN )",0
1055,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; } for ( j = 0 ; j < ASSOC_ARRAY_FAN_OUT ; j ++ ) { if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1056,<S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart>. port = 11211 <S2SV_ModEnd> ; settings.,0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, <S2SV_ModEnd> x_e, x_f <S2SV_ModStart> ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ;",0
1059,"<S2SV_ModStart> { clips = kmalloc <S2SV_ModEnd> ( num_clips * <S2SV_ModStart> * sizeof ( * clips ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; } ret = copy_from_user ( clips, clips_ptr, num_clips * sizeof ( * clips ) ) ; if ( ret ) { ret = - EFAULT ; goto out_err2 ; }",0
1060,"<S2SV_ModStart> ) ) { if ( pmd_trans_huge_add ( pmd, vma -> vm_mm ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_trans_huge_add ( pmd, vma -> vm_mm ) ) continue ; if ( pmd_trans_huge_add ( pmd, vma -> vm_mm ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_trans_huge_add ( pmd, vma -> vm_mm ) ) continue ; if ( pmd_trans_huge_add ( pmd, vma -> vm_mm ) ) continue ; if ( pmd_trans_huge ( * pmd ) ) continue ; if ( pmd_trans_huge ( * pmd ) ) continue ; if ( pmd_trans_huge ( * pmd ) )",0
1061,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1062,"<S2SV_ModStart> asmop ) ; if (! hint ) { r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; return ; } if ( hint ) { r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; } else { r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assembler, - 1 ) ; r_asm_set_pc ( core -> assemb",0
1063,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n""",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw (",0
1065,"<S2SV_ModStart> OPCODE_DESC * opcode_desc ; r_strbuf_init ( & op -> esil ) ; if (! r_strbuf_getf ( & op -> esil ) ) { r_strbuf_setf ( & op -> esil, """" ) ; opcode_desc -> cycles = 0 ; op -> type = R_ANAL_OP_TYPE_UNK ; } if (! r_strbuf_getf ( & op -> esil ) ) { r_strbuf_setf ( & op -> esil, """" ) ; } if (! r_strbuf_getf ( & op -> esil ) ) { r_strbuf_setf ( & op -> esil, """" ) ; opcode_desc -> handler ( anal, op, buf, len, & fail, cpu ) ; if ( fail ) { goto INVALID_OP ; } if (! r_strbuf_getf ( & op -> esil ) ) { r_strbuf_setf ( & op -> esil, """" ) ; } if (! r_strbuf_getf ( & op -> esil ) ) { r_strbuf_setf (",0
1066,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> * prev ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> * next ; ACPI_FUNCTION_TRACE ( ns_terminate ) ; status = acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) { return_VOID ; } status = acpi_ut_acquire_mutex ( AC,0
1067,"<S2SV_ModStart> = GF_FALSE ; dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL ) ; if ( dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL ) == - 1 ) { dlopen ( NULL, RTLD_NOW | RTLD_GLOBAL ) ; if ( dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL ) == - 1 ) { dlopen ( NULL, RTLD_NOW | RTLD_GLOBAL ) ; } else { dlopen ( the_url, RTLD_GLOBAL ) ; if ( dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL ) == - 1 ) { dlopen ( NULL, RTLD_NOW | RTLD_GLOBAL ) ; if ( dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL ) == - 1 ) { dlopen ( NULL, RTLD_NOW | RTLD_GLOBAL ) ; } else { dlopen ( the_url, RTLD_GLOBAL ) ; if ( dlopen ( NULL, RTLD_NOW | RTLD_",0
1068,"<S2SV_ModStart> int i, result <S2SV_ModEnd> ; _Py_IDENTIFIER ( <S2SV_ModStart>, result ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; if ( result < 0 ) { Py_DECREF ( l ) ; return result ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; if ( result < 0 ) { Py_DECREF ( l ) ; return result ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( Py",0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> priv = calloc ( <S2SV_ModEnd> 1, sizeof <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> ctx -> priv <S2SV_ModStart>. enc ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config. enc ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h ; priv -> cx_data = malloc ( priv -> cx_data_",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_",0
1071,<S2SV_ModStart> ; } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; return 0 ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> total_freq = totfr ;,0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( attrs [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk ) return - EINVAL ; lock_sock ( & tsk -> sk ) ; err = __tipc_nl_list_sk_publ ( skb, cb, tsk, & last_publ ) ; if (! err ) done = 1 ; release_sock ( & tsk -> sk ) ; sock_put ( & tsk -> sk ) ;",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
1074,<S2SV_ModStart> vma ) ; if ( priv -> task ) put_task_struct ( priv -> task ) ;,0
1075,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; if ( length > total_len ) { dev_warn ( ddev, ""too <S2SV_blank> many <S2SV_blank> device <S2SV_blank> caps\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, length ) ; if ( ret < length ) { dev_warn ( ddev, ""too <S2SV_blank> many <S2SV_blank> device <S2SV_blank> caps\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, length ) ; if ( ret < length ) { dev_warn ( ddev, ""too <S2SV_blank> many <S2SV_blank> device <S2SV_blank> caps\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0,",0
1076,"<S2SV_ModStart> { struct task_struct * task ; atomic_long_dec ( & file -> f_count ) ; task = file_sb_list_del ( file ) ; if ( likely (! ( task -> flags & PF_KTHREAD ) ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; } if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; }",0
1077,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++!= '%' ) if ( * ptr ++ =='s' || * ptr == 'S' ) return 1 ; if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1081,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart> goto invalid ; break ; } <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>!= '\\n' ) { <S2SV_ModStart>!= '\\r' ) { <S2SV_ModStart>!= '\\n' ) { <S2SV_ModStart>!= '\\r,0
1082,<S2SV_ModStart> -> name_len > XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args ->,0
1083,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ;",0
1084,<S2SV_ModStart> if ( object_data && object_length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object,0
1085,"<S2SV_ModStart> ; if ( ( int ) shdr -> sh_name >= sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_name >= sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_name >= sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_name >= sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_name >= sizeof ( Elf_ ( Verdef ) ) ) { return false ; }",0
1086,"<S2SV_ModStart> separator!= NULL ) { if ( osStrchr ( token, '=' ) == NULL ) { return ERROR_INVALID_SYNTAX ; } name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\'",0
1087,"<S2SV_ModStart> u8 label_len ; memset ( cp, 0, label_len ) ; if ( cp + label_len >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; if ( cp",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFError ( tif, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModStart>! tmp ) { TIFFError ( tif, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < bps ; count ++ ) { uint32 byte ; _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) {",0
1089,"<S2SV_ModStart> ) ) { if ( unlikely ( pmd_none ( * pmd ) ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; else return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( unlikely ( pmd_none ( * pmd ) ) ) return do_swap_page ( mm, vma, address, pte, pmd, flags ) ; ptl = pte_lockptr ( mm, pmd ) ; spin_lock ( ptl ) ; if ( unlikely (! pte_write ( entry ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; } else { if ( pte_write ( entry ) ) return do_wp_page ( mm, vma,",0
1090,"<S2SV_ModStart> ) { char * <S2SV_ModEnd> r = pool_alloc <S2SV_ModStart> + 1 ) ; if (! r ) return NULL ; if (! strchr ( s,'\0') ) return NULL ; strncpy ( r, s, strlen ( s ) + 1 ) ; if (! strchr ( r,'\0') ) r = pool_alloc ( strlen ( s ) + 1 ) ; if (! r ) return NULL ; if (! strchr ( r,'\0' ) ) r = pool_alloc ( strlen ( s ) + 1 ) ; if (! r ) return NULL ; if (! strchr ( r,'\0') ) r = pool_alloc ( strlen ( s ) + 1 ) ; if (! strchr ( r,'\0') ) r = pool_alloc ( strlen ( s ) + 1 ) ; if (! r ) return NULL ; if (! strchr ( r,'\0' ) ) r = pool_alloc ( strlen ( s ) + 1 ) ; if (! r ) return NULL ; if (! strchr ( r,'\0' ) ) r = pool_alloc ( strlen ( s )",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> lower_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1093,"<S2SV_ModStart> ) ; } if ( i >= cu -> dies [ cu -> length ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= cu -> dies [ cu -> length ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= cu -> dies [ cu -> length ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= cu -> dies [ cu -> length ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= cu -> dies [ cu -> length ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1094,<S2SV_ModStart> b_eos_signalled ) { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; return NULL ; } if ( <S2SV_ModStart> b_eos_signalled ) { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; } <S2SV_ModStart> b_eos_signalled ) { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; } if (! p_enc -> b_eos_pulled ) { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; return NULL ; } if (! p_enc -> b_eos_pulled ) { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; } else { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; } if (! p_enc -> b_eos_pulled ) { schro_encoder_end_of_stream ( p_enc -> p_schro ) ; return NULL ; },0
1095,"<S2SV_ModStart> ; if ( bstrchr ( bfname. str, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", bfname. str ) ; } else if ( bstrchr ( bfname. str, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", bfname. str ) ; } else if ( bstrchr ( bfname. str, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", bfname. str ) ; } else if ( bstrchr ( bfname. str, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", bfname. str ) ; } else if ( bstrchr ( bfname. str, '\\0' ) >= 0 ) { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", bfname. str ) ; }",0
1096,"<S2SV_ModStart> # if 0 if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""class <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""pri <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""pri <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) N",0
1097,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; CHECKINT32 ( idx, len ) ; a -> name = GETINT16 ( buf + idx ) ; idx += 2 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } } else { CHECKINT32 ( idx, len ) ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += 2 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf (",0
1098,"<S2SV_ModStart> ; vma = find_vma_next ( mm, start, & vma_end ) ; if (! vma ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( vma_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( vma_hpagesize > ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( vma_hpagesize > vma_hpagesize ) goto out_unlock",0
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_buf_array, t1_line_array ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_ref_frame_t * data = va_arg ( args, vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb ; vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
1102,"<S2SV_ModStart> ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt",0
1103,"<S2SV_ModStart> ; if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""beginning <S2SV_blank> of <S2SV_blank> image.\\n"", i ) ; return AVERROR_INVALIDDATA ; } if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""end <S2SV_blank> of <S2SV_blank> image.\\n"", i ) ; return AVERROR_INVALIDDATA ; } if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""end <S2SV_blank> of <S2SV_blank> image.\\n"", i ) ; return AVERROR_INVALIDDATA ; } if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> end <S2SV_blank> of <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA",0
1104,"<S2SV_ModStart> ) == 1 && TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 4 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 5 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 6 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; if (! set_context ( c, expr1, Store, ch",0
1105,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> char * mc_running_avg_y = mc_running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> char * running_avg_y = running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> char * avg_y_y = avg_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 1 ]",0
1106,"<S2SV_ModStart> { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-entityTOOLARGE"" ) ; if ( ( sockPtr -> flags & NS_CONN_LINETOOLONG )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> lINETOOLONG"" ) ; } } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-lINETOOLONG"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-lINETOOLONG"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-entityTOOLARGE"" ) ; } }",0
1107,"<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_VALID ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; }",0
1108,<S2SV_ModStart> size ) ; <S2SV_ModEnd> message -> srcIpAddr <S2SV_ModStart> -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. switchPort ; # if ( ETH_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device * <S2SV_ModStart> -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> ) ; mb2_cache_insert ( mb2_cache, <S2SV_ModEnd> HDR ( new_bh <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( mb2_",0
1112,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_active_map_t * const map = va_arg ( args, vpx_active_map_t * ) ; if ( map ) { if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_OK ; else return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> } <S2SV_null>",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) goto out ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT_READ : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT_READ ; if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size, GFP_KERNEL ) ; if (! value ) goto out ; rc = __jfs_setxattr ( tid, inode, ea_name, value, size, 0 ) ; if ( rc ) goto out ;",0
1115,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) )",0
1116,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1117,"<S2SV_ModStart> size_t maxlen = <S2SV_ModEnd> len ; struct <S2SV_ModStart> struct parse_state * state = ecalloc ( 1, sizeof ( * state ) + maxlen ) ; if (! state ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_query ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s",0
1118,<S2SV_ModStart> SUCCESS ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( var ) ;,0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1120,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * data = va_arg ( args, vpx_ref_frame_t * ) ; if (! ctx ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; memset ( & frame -> img, 0, sizeof ( frame -> img ) ) ; <S2SV_ModStart> VP9_REFFRAME sd ; vpx_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; return vp9_copy_reference_dec ( ctx -> pbi <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type <S2SV_ModEnd>, & sd <S2SV_ModStart> VP9_REFFRAME ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1122,"<S2SV_ModStart>. path ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> mailbox = curl_easy_unescape <S2SV_ModEnd> ( data, <S2SV_ModStart>, NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if ( <S2SV_ModStart> (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if ( curl_easy_unescape ( data, path, 0, NULL ) ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ;",0
1123,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> too <S2SV_blank> short <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> too <S2SV_blank> short <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break ; } if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> too <S2SV_blank> short <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break ; } if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> too <S2SV_blank> short <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break",0
1124,"<S2SV_ModStart> ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 1 ) sh -> no_output_of_prior_pics_flag = 1 ; if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ s -> ps. pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1125,"<S2SV_ModStart> u1_num_mbs ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbs ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ), <S2SV_ModEnd> u1_num_mbsNby2, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ++, <S2SV_ModStart> u1_num_mbsNby2 ++, <S2SV_ModEnd> u1_num_mbsNby2 ) ;",0
1126,"<S2SV_ModStart>, u4_y_offset ; WORD8 * pu1_out_p ; WORD8 * pu1_pred ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> == B_PIC ) { memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; <S2SV_ModStart> == B_PIC ) { memset ( pu1_out_p, 0, sizeof ( pu1_out ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu1_pred ) ) ; memset ( pu1_pred, 0, sizeof ( pu",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_,0
1130,<S2SV_ModStart> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1131,<S2SV_ModStart> ++ ) { if <S2SV_ModEnd> ( CONFIG_FAST_UNALIGNED ) <S2SV_ModStart> # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 3 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) src ) [ 3 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t *,0
1132,"<S2SV_ModStart> : return getnum <S2SV_ModEnd> ( L, <S2SV_ModStart> : { int sz = getnum <S2SV_ModEnd> ( L, <S2SV_ModStart> ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'I' : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE",0
1133,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; offset_row = ( row + rowstoread > h? h - row : rowstoread ) ; if ( buf == NULL ) { TIFFError ( tif, ""gtStripSeparate"", ""gtStripSeparate"" ) ; return ( 0 ) ; } if ( buf == NULL ) { TIFFError ( tif, ""gtStripSeparate"", ""gtStripSeparate"" ) ; return ( 0 ) ; } buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, stripsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { TIFFError ( tif, ""gtStripSeparate"", ""gtStripSeparate"", ""gtStripSeparate"" ) ; return ( 0 ) ; } if ( buf == NULL ) { TIFFError ( tif, ""gtStripSeparate"", ""gtStripSeparate"" ) ; return ( 1 ) ; }",0
1134,"<S2SV_ModStart> } } assert ( 0 ) ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) return 0 ; if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 3 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 4 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 5 ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 5 ) ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 3 ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 4 ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 5 ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 6 ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 6 ) == TYPE_COMMENT ) i += 2 ; if ( TYPE ( CHILD ( n, 6 ) == TYPE_COMMENT ) i += 2 ; if (",0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1136,<S2SV_ModStart> upid == - 1 ) { type = PIDTYPE_MAX ; } else if ( upid > UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ; else if ( upid >= UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ; else if ( upid >= UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ; else if ( upid >= UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ;,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else return num ;,0
1139,"<S2SV_ModStart> ] ; const int h = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int y ; for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_null>",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( attr_len > avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n",0
1141,"<S2SV_ModStart> -> private ; if ( cmd == DM_IOCTL_GET_BLOCK ) return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, arg ) ; else return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, cmd, arg ) ;",0
1142,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_TAG : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 7 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 7 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr,0
1143,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1144,"<S2SV_ModStart> fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> running <S2SV_blank> fldd <S2SV_blank> %s\\n"", full_path ) ; sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE ) ; if (! safe_chown ( RUN_LIB_FILE, getuid ( ), getgid ( ) ) ) errExit ( ""safe <S2SV_blank> chown"" ) ; sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE ) ; if (! safe_chown ( RUN_LIB_FILE, getuid ( ), RUN_LIB_FILE ) ) errExit ( ""chown"" ) ; if (! safe_chown ( RUN_LIB_FILE, getgid ( ) ) ) errExit ( ""safe <S2SV_blank> chown"" ) ; sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_",0
1145,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock <S2SV_ModEnd>, sk )",0
1146,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc == IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( imap_exec ( adata, ""CAPABILITY"", IMAP_CMD_NO_FLAGS ) ) goto bail ; } else { if ( imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc == IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } else { if ( imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IM",0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1151,<S2SV_ModStart> -> sect <= 0 <S2SV_ModEnd> || g -> <S2SV_ModStart> head <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1152,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart> & rlen ) ; if (! check_atype_tag ( a, & t, & contents, & clen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & remainder, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & contents, & clen, & rlen ) ) return ASN1_BAD_ID ; if ( check_atype_tag ( a, & t, & contents, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & contents, & clen, & remainder, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & t, & remainder, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & t, & remainder, & rlen ) ) return ASN1_BAD_ID ;",0
1154,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkth",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error (",0
1157,"<S2SV_ModStart> bio ) ; kfree ( pages ) ; pages = kcalloc ( nr_pages, sizeof ( struct page * ), gfp_mask ) ; if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - ENOMEM ; goto out_unmap ; } if (! bio_flagged ( bio, BIO_UPTODATE ) ) { ret = - ENOMEM ; goto out_unmap ; } for ( j = cur_page ; j < page_limit ; j ++ ) { if (! PageReserved ( pages [ j ] ) ) { ret = - ENOMEM ; goto out_unmap ; } if ( unlikely ( ret < 0 ) ) { ret = - ENOMEM ; goto out_unmap ; } if (! bio_flagged ( bio, BIO_UPTODATE ) ) { ret = - ENOMEM ; goto out_unmap ; } for ( j = cur_page ; j < page_limit ; j ++ ) { if (! PageReserved ( pages [ j ] ) ) { ret = - ENOMEM ; goto out_unmap ; } if ( unlikely ( ret < 0 )",0
1158,"<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { jas_eprintf ( ""warning: <S2SV_blank> palettized <S2SV_blank> images <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return - 1 ; } numcolors = hdr -> maplength / 3 ; actualnumcolors = hdr -> maplength / 3 ; for ( i = 0 ; i < numcolors ; i ++ ) { cmap -> data [ i ] = 0 ; } if ( ( c = jas_stream_getc ( in ) ) == EOF ) { return - 1 ; } cmap -> data [ i ] |= RAS_RED ( c ) ; cmap -> data [ j ] |= RAS_GREEN ( c ) ; cmap -> data [ j ] |= RAS_BLUE ( c ) ; cmap -> data [ i ] |= RAS_BLUE ( c ) ; cmap -> data [ j ] |= RAS_BLUE ( c ) ; cmap -> data [ i ] |= RAS_BLUE ( c ) ; cmap -> data [ j ] |= RAS_RED ( c ) ; cmap -> data [ j ] |= RAS_GREEN ( c ) ; cmap -> data [ j ] |=",0
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } Curl_pp_init ( pp ) ; pp -> response_time = RESP_TIMEOUT ; pp -> statemach_act = smtp_statemach_act ; pp -> endofresp = smtp_endofresp ; pp -> conn = conn ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRST",0
1160,"<S2SV_ModStart> } ; for ( ; i < sizeof ( buf ) && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ i ] ) ; } buf [ i ] = 0 ; if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; aop. off = off ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; } if ( str [ i ] == '#' ) { i -- ; continue ; } if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; aop. off = off ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; } if (! assemble [ thumb ] ( & aop, off, buf ) ) { return - 1 ; }",0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,"<S2SV_ModStart> u64 ) 0 ; memset ( & rm -> m_inc. i_hdr, 0, sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) ; memset ( & rm -> m_inc. i_hdr, 0, sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ) ; memset ( & rm -> m_inc. i_hdr, 0, sizeof ( struct rds_header ) + RDS_FRAG_SIZE ) ; if ( rm -> m_inc. i_hdr. h_len == 0 ) i = 1 ; else i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; else i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; if ( work_alloc == 0 ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; ret = - ENOMEM ; goto out",0
1163,"<S2SV_ModStart> ; priv -> regs = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> regs ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> regs = devm_kzalloc ( & pdev -> dev, sizeof ( * priv ), GFP_KERNEL ) ; if (! priv -> regs ) return - ENOMEM ; priv -> regs = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> regs ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> regs = devm_kzalloc ( & pdev -> dev, sizeof ( * priv ), GFP_KERNEL ) ; ret = devm_ioremap ( & pdev -> dev, r -> start, r -> end ) ; if ( ret ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank>",0
1164,"<S2SV_ModStart> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; <S2SV_ModStart> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp",0
1165,"<S2SV_ModStart> = 0 ; if ( * prclyrno >= JAS_CAST ( int, pchg -> pirlvl -> numprclyrnos ) ) { * prclyrno = JAS_CAST ( int, pchg -> pirlvl -> prclyrnos [ pi -> prcno ] ) ; * prclyrno = JAS_CAST ( int, pchg -> pirlvl -> prclyrnos [ pi -> prcno ] ) ; if ( * prclyrno >= JAS_CAST ( int, pchg -> pirlvl -> numprclyrnos ) ) { * prclyrno = JAS_CAST ( int, pchg -> pirlvl -> prclyrnos [ pi -> prcno ] ) ; * prclyrno = JAS_CAST ( int, pchg -> pirlvl -> prclyrnos [ pi -> prcno ] ) ; if ( * prclyrno >= JAS_CAST ( int, pchg -> pirlvl -> numprcs ) ) { * prclyrno = JAS_",0
1166,"<S2SV_ModStart> { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr,",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & ( NON_TGT_OPTION | KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1170,"<S2SV_ModStart> { jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; obj -> myalloc_ = 1 ; if (! stream ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> = NULL ; <S2SV_ModEnd> u_char * pkblob <S2SV_ModStart>, * sig, have_sig ; size_t blen, slen <S2SV_ModStart> ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkalg, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get",0
1172,"<S2SV_ModStart> ; uint32_t bcount ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank>",0
1173,"<S2SV_ModStart> mech ) ) { _sx_debug ( ZONE, ""client <S2SV_blank> requested <S2SV_blank> mechanism <S2SV_blank> (%s) <S2SV_blank> that <S2SV_blank> we <S2SV_blank> didn\'t <S2SV_blank> offer"", mech ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_INVALID_MECHANISM, NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= G",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", """,0
1176,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1177,<S2SV_ModStart> bd_addr ) { int ret ; ret = btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; ret = btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ;,0
1178,"<S2SV_ModStart> 4 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n",0
1179,"<S2SV_ModStart> int i ; jas_matind_t numrows ; jas_matind_t <S2SV_ModEnd> numcols ; if <S2SV_ModStart> < 0 ) { jas_matind_destroy ( matrix ) ; return 0 ; } if ( numrows < 0 || numcols < 0 ) { jas_matind_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = 0 ; matrix -> numcols_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> datasize_ = 0 ; if ( matrix -> maxrows_ > 0 ) { if (! matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> datasize_ > 0 ) { if (! matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for (",0
1180,"<S2SV_ModStart> ; if ( skb_is_gso ( skb ) ) { icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; } if ( skb_is_gso ( skb ) ) { icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; }",0
1181,"<S2SV_ModStart> * req ; <S2SV_ModEnd> SCSIDiskReq * r <S2SV_ModStart> SCSIDiskReq * r ; memset ( r -> iov. iov_base, 0, sizeof ( * r -> iov. iov_base ) ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ;",0
1182,"<S2SV_ModStart> int i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> ; int avail <S2SV_ModEnd> ; nxip = <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> expect = 8 <S2SV_ModStart> expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmax == 0 || xmin > MAX_TXID || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } if ( cm_id -> device",0
1185,"<S2SV_ModStart> ; struct xfrm_dump_info info <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> = NLM_F_MULTI ; spin_lock_bh ( & net -> xfrm. policy_lock ) ; <S2SV_ModStart> = NLM_F_MULTI ; spin_unlock_bh ( & net -> xfrm. policy_lock ) ; <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ] ) { spin_unlock_bh ( & net -> xfrm. policy_lock ) ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; spin_unlock_bh ( & net -> xfrm. policy_lock ) ;",0
1186,"<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1187,"<S2SV_ModStart> -> d_inode ; struct dentry * upper = ovl_dentry_upper ( dentry ) <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } if (! err ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err ;",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s",0
1189,<S2SV_ModStart> size ) ) { av_free ( * ptrptr ) ; return AVERROR ( ENOMEM ) ; } if ( <S2SV_ModStart> &&! ( nmemb && size ) ) { av_free ( * ptrptr ) ; return AVERROR ( ENOMEM ) ; },0
1190,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; },0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box -> <S2SV_ModStart> name ) ; goto error ; } if ( box -> data. jp. magic == JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic == JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic == JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic == JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic == JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic == JP",0
1193,"<S2SV_ModStart>!= M_FS_TYPE_DIR ) { if ( M_fs_perms_can_access ( p2, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } }",0
1194,<S2SV_ModStart> journal_t * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! PageChecked ( page ) ) { ClearPageChecked ( page ) ; return ; } <S2SV_ModEnd> if ( offset,0
1195,"<S2SV_ModStart> i ++ ) { GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if ( writer -> stbl -> ChunkOffset -> type == GF_ISOM_BOX_TYPE_STCO ) writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> int plen ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) strncpy ( md5data, password, 82 ) ; strncpy ( md5data + 1, password, 82 ) ; strncpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size ( width, height )!=",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; const char * basePath ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; return NULL ; }",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> 0xfffffe00UL ) # define PCDGetBits ( n ) ( sum << n ) & 0xffffffff ; bits -= n ; while ( bits <= 24 ) { if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } count = AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( count == 0 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if (",0
1201,"<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case COMMA : if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (",0
1202,"<S2SV_ModStart> g_hash_table_destroy ( headers ) ; headers = web_socket_util_new_headers ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=5;k=blah"" ) ) ; g_hash_table_destroy",0
1203,<S2SV_ModStart> HAVE_IPV6_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1204,"<S2SV_ModStart> ; for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; dst += src_ybc -> y_stride ; } for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; dst += src_ybc -> y_stride ; } for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; dst += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst",0
1205,<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( c -> transform == FF_DWT97_INT ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c,0
1206,"<S2SV_ModStart> * ptr ) { if (! curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) && stringp ) fputs ( stringp, stream ) ; ptr += 2 ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE, & longinfo ) ) fprintf ( stream, ""%ld"", longinfo ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & longinfo ) ) fprintf ( stream, ""%ld"", longinfo ) ; break ; case VAR_REQUEST_SIZE : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_REQUEST_SIZE, & longinfo ) ) fprintf ( stream, ""%ld"", longinfo ) ; break ; case VAR_NUM_CONNECTS : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_NUM_CONNECTS, & longinfo ) ) fprintf ( stream, ""%ld"", longinfo ) ; break ; case VAR_REQUEST_SIZE : if ( CURLE_OK == curl_easy",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> int dummy_rate ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index <",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * bw ) ; tptr = pptr ; tlen = EXTRACT_16BITS ( lmp_com_header -> length ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" )",0
1209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> int_mv mvs [ 2 <S2SV_ModEnd> ], nmv_context_counts <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ i ] [ 0 ]. as_mv ; const MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ i ] [ 0 ]. as_mv ; const MV diff = { mvs [ i",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; kfree_skb ( skb_out ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ;",0
1212,"<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. lock ) ; INIT_WORK ( & sta -> drv_unblock_wk, sta_unblock ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> sta_tx_lock ) ; spin_lock_init ( & sta -> sta_tx_lock ) ; spin_lock_init ( & sta -> sta_tx_lock ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; spin_lock_init ( & sta -> sta_tx_lock ) ; spin_lock_init ( & sta -> sta_tx_lock ) ; spin_lock_init",0
1213,<S2SV_ModStart> &&! capable ( CAP_SYS_ADMIN <S2SV_ModEnd> ) ) return,0
1214,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - ENODEV ; } if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; goto skip_normal_probe ; } if (! epwrite ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epwrite <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; goto skip_normal_probe ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; return - ENODEV ;",0
1215,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
1216,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } netsnmp_init_mib_internals ( ) ; env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var!=",0
1217,"<S2SV_ModStart> struct list_head tmplist <S2SV_ModEnd> ; newsk -> <S2SV_ModStart> do_auto_asconf ) { memcpy ( & tmplist, & newsp -> asconf_list, sizeof ( tmplist ) ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, & newep -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) -> bind_hash = NULL ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, & newep -> base. bind_addr, GFP_KERNEL ) ;",0
1218,<S2SV_ModStart> ; fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY (,0
1219,"<S2SV_ModStart> regs ) { struct desc_struct <S2SV_ModEnd> * desc ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 8, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 8, 8 ) ; case 4 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 5 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 6 : return INSN_CODE_SEG_PARAMS ( 8, 8",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,"<S2SV_ModStart> return ret ; ret = anon_inode_getfd ( ""inotify"", & inotify_fops, group, O_RDONLY | flags ) ; if ( ret < 0 ) { atomic_dec ( & user -> inotify_devs ) ; ret = anon_inode_putfd ( ""inotify"", & inotify_fops, group, O_RDONLY | flags ) ; if ( ret < 0 ) { atomic_dec ( & user -> inotify_devs ) ; ret = anon_inode_putfd ( ""inotify"", & inotify_fops, group, O_RDONLY | flags ) ; if ( ret < 0 ) { atomic_dec ( & user -> inotify_devs ) ; ret = anon_inode_putfd ( ""inotify"", & inotify_fops, group, O_RDONLY | flags ) ; if ( ret < 0 ) { atomic_dec ( & user -> inotify_devs ) ; ret = anon_inode_putfd ( ""inotify"", group, O_RDONLY | flags ) ;",0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> krb5_error_code_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1225,"<S2SV_ModStart> ; while ( impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN )!= START_CODE_PREFIX <S2SV_ModEnd> ) { impeg2d_bit_stream_flush <S2SV_ModStart> ; while ( impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN )!= START_CODE_PREFIX <S2SV_ModEnd> ) { impeg2d_bit_stream_flush <S2SV_ModStart> ; while ( impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN )!= START_CODE_PREFIX ) { impeg2d_bit_stream_flush ( ps_stream, 8 ) ; } u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN ) ; }",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ; if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_COUNT ;",0
1227,"<S2SV_ModStart> ; if (! <S2SV_ModEnd> imethod -> is_inflated <S2SV_ModStart> imethod -> is_inflated ) { mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; } if (! <S2SV_ModEnd> imethod -> is_inflated <S2SV_ModStart> imethod -> is_inflated ) { mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; }",0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ;",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1230,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > F2FS_MAX_LOG_BLOCKS_PER_SEG ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE || le32_to_cpu ( raw_super -> log_sectorsize ) < F2FS_MIN_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> char * last_elem <S2SV_ModEnd>, * wp <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) && repl!= ( const char * ) - 1 ) ) { wp = last_elem ; name += len ; while ( * name!= '\\0'",0
1232,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } rv = h264bsdInit ( & pDecCont -> storage, 0 ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SW",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if (! opt_space ) opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if (! opt_space ) opt_space = rcu_dereference ( rp -> opt_space ) ; if (! opt_space ) opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if (! opt_space ) opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if (! opt_space ) opt_space = rcu_dereference ( opt_space ) ; if (! opt_space ) opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_",0
1234,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( * opt ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( * opt ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ; if ( rtm -> rt_flags & RTCF_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1238,"<S2SV_ModStart> goto errout ; info -> stagemasks = _ogg_malloc ( info -> partitions * 8 * sizeof ( * info -> stagemasks ) ) ; for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 3 ) << 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade ; for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 3 ) << 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade",0
1239,"<S2SV_ModStart> count ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; tp -> copied_seq = seq ; TCP_SKB_CB ( skb ) -> fin = 1 ; tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ; if ( copied > 0 ) tcp_cleanup_rbuf ( sk, copied ) ; return copied ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; tp -> copied_seq = seq ; tp -> copied_seq = seq ; TCP_SKB_CB ( skb ) -> fin = 1 ; tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ; if ( copied > 0 ) tcp_cleanup_rbuf ( sk, copied ) ; return copied ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; tp -> copied_seq = seq ; tp -> copied_seq = seq ; tp -> copied_offset = offset ;",0
1240,"<S2SV_ModStart> = 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data",0
1241,"<S2SV_ModStart> * value ) { PyObject * old_item ; if ( idx >= self -> memo_size ) { if ( _Unpickler_ResizeMemoList ( self, idx * 2 ) < 0 ) return - 1 ; } old_item = self -> memo [ idx ] ; if ( old_item!= NULL ) { Py_DECREF ( old_item ) ; } else { self -> memo_len ++ ; }",0
1242,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1243,"<S2SV_ModStart> filp ) { if ( test_bit ( SOCK_DEAD, & SOCKET_I ( inode ) -> flags ) ) { clear_bit ( SOCK_DEAD, & SOCKET_I ( inode ) -> flags ) ; return 0 ; } if ( test_bit ( SOCK_DEAD, & SOCKET_I ( inode ) -> flags ) ) { clear_bit ( SOCK_DEAD, & SOCKET_I ( inode ) -> flags ) ; }",0
1244,"<S2SV_ModStart> * body, asdl_seq * orelse, int start_lineno, int start_col_offset, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. start_lineno = start_lineno ; p -> v. AsyncFor. start_col_offset = start_col_offset ; if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! orelse ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> orelse <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } p -> v. AsyncFor. orelse = orelse ; p -> v. AsyncFor. start_lineno = start_lineno ; p -> v. AsyncFor. end_lineno = end_lineno ; p -> v. AsyncFor. end_col_offset = end_col_offset",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""-",0
1246,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet6_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1247,<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ),0
1248,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1249,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 """", rdpei_eventid_string ( eventId ) ) ; if ( pduLength > UINT32_MAX ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", pduLength ) ; return UINT_MAX ; } if ( pduLength > UINT32_MAX ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", pduLength ) ; if ( pduLength > UINT32_MAX ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", pduLength ) ; return UINT_MAX ; }",0
1250,"<S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>. LogError ( RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s""",0
1251,"<S2SV_ModStart> ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ;",0
1252,"<S2SV_ModStart> np ) ; struct ip_options_rcu * opt ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return - EINVAL ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null>",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n""",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } InheritException ( exception, & image -> exception ) ; InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart>, ""RDP_NEG_FAILURE"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> stream"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> stream"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read"" ) ; return ; } WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> stream"" ) ; return ; }",0
1257,"<S2SV_ModStart> int ret, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = get_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>!= RSA_PUB ) { * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) { * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } do { * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8",0
1259,<S2SV_ModStart> ) ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) return ERROR_INSUFFICIENT_MEMORY ; stack = ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if (! rq ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if ( rq -> q == hctx -> queue ) fn ( hctx, rq, data, reserved ) ; } else { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq",0
1262,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> j ] [ <S2SV_ModEnd> i ] ;,0
1264,"<S2SV_ModStart> { token ++ ; <S2SV_ModEnd> } while ( <S2SV_ModStart> ] == '[' || token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token",0
1265,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ;",0
1266,"<S2SV_ModStart> ; retval = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ;",0
1267,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; if ( test_bit ( SNDRV_CARDS - 1, snd_cards_lock ) ) err = - EBUSY ; else if ( test_bit ( SNDRV_CARDS - 1, snd_cards_lock ) ) err = - EBUSY ; if ( err < 0 ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_lock ) ; kfree ( card ) ; return err ; } if ( test_bit ( SNDRV_CARDS - 1 ) err = - EBUSY ; if ( err < 0 ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_lock ) ; kfree ( card ) ; return err ; }",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < ( unsigned int ) hash_len ) { return ""2"" ""SIG <S2SV_blank> padding <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; } <S2SV_ModStart> += padlen + 3 ; if ( s_max_octets < ( unsigned int ) hash_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } <S2SV_ModStart> += padlen + 3 ; if ( s_max_octets < ( unsigned int ) hash_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < ( unsigned int ) hash_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < ( unsigned int ) hash_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < ( unsigned int ) hash_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check",0
1270,"<S2SV_ModStart> len ) ; if ( ret < 0 ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", ret ) ; return ret ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tETH_HDR ) ) ; if ( ret < 0 ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", ret ) ; return ret ; } ret = TEMP_FAILURE_RETRY ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", ret ) ; if ( ret < 0 ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", ret ) ; return ret ; }",0
1271,<S2SV_ModStart> -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; <S2SV_ModStart> -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> u4_pic_order_cnt [ 0 ] = ps_cur_poc -> u4_pic_order_cnt [ 0 ] ; ps_prev_poc -> u4_pic_order_cnt [ 1 ] = ps_cur_poc -> u4_pic_order_cnt [ 1 ] ; ps_prev_poc -> u4_pic_order_cnt [ 2 ] = ps_cur_poc -> u4_pic_order_cnt [ 2 ] ; ps_prev_poc -> u4_pic_order_cnt [ 3 ] = ps_cur_poc -> u4_pic_order_cnt [ 3,0
1272,"<S2SV_ModStart> OPENSSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR <S2SV_ModEnd> ) ; return <S2SV_ModStart> OPENSSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR <S2SV_ModEnd> ) ; return <S2SV_ModStart> OPENSSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR <S2SV_ModEnd> ) ; } <S2SV_ModStart> OPENSSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR <S2SV_ModEnd> ) ; return",0
1273,"<S2SV_ModStart> int ret ; if ( args -> buffer_count > I915_NUM_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - ENOMEM ; } exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( """,0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> PTR_ERR ( karg ) ; karg = memdup_user ( uarg, data_size ) ; if ( IS_ERR ( karg ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> - <S2SV_blank> memdup_user <S2SV_blank> returned <S2SV_blank> error <S2SV_blank> [%ld]\\n"", __FILE__, __LINE__, PTR_ERR ( karg ) ) ; return PTR_ERR ( karg ) ; } karg = memdup_user ( uarg, data_size ) ; if ( IS_ERR ( karg ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioinfo() <S2SV_blank> - <S2SV_blank> memdup_user <S2SV_blank> returned <S2SV_blank> error <S2SV_blank> [%ld]\\n"", __FILE__, __LINE__, PTR_ERR ( karg ) ) ; return PTR_ERR (",0
1275,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mount_entry_on_generic ( struct <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t len_sent = <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> char * buf <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! p ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_seek ( wth -> random_fh, seek_off, SEEK_SET, err ) == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_seek ( wth -> random_fh, seek_off, SEEK_SET, err ) == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } pkt_len = parse_netscreen_rec_hdr ( phdr, line, cap_int, & cap_dir, & cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } if ( pkt_len == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_",0
1280,<S2SV_ModStart> rq ) { u64 <S2SV_ModEnd> irq_time ; if <S2SV_ModStart> rq ) ; <S2SV_ModEnd> rq -> clock <S2SV_ModStart> rq ) ; <S2SV_ModEnd> sched_irq_time_avg_update ( rq <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memset ( & blk_rings -> native, 0, sizeof ( blk_rings -> native ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : memset ( & blk_rings -> x86_32, 0, sizeof ( blk_rings -> x86_32 ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, 0, sizeof ( blk_rings -> x86_64 ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memset ( & blk_rings -> x86_32, 0, sizeof ( blk_rings -> x86_32 ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memset ( & blk_rings -> x86_64, 0, sizeof ( blk_rings -> x86_64 ) ) ; break ; default : BUG ( ) ; }",0
1283,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DIS,0
1284,"<S2SV_ModStart> -> offset ; if ( datao + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof",0
1285,"<S2SV_ModStart> ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank>",0
1286,"<S2SV_ModStart> case ICMP_ECHO_PROTOCOL : ND_TCHECK ( dp -> icmp_ip. ip_dst ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; break ; case ICMP_ECHO_PROTOCOL : ND_TCHECK ( dp -> icmp_ip. ip_p ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""%s <S2SV_blank> protocol <S2SV_blank> %d <S2SV_blank> unreachable"", ipaddr_string ( ndo, & dp -> icmp_ip. ip_dst ), dp -> icmp_ip. ip_p ) ; break ; case ICMP_ECHO_PROTOCOL : ND_TCHECK ( dp -> icmp_ip. ip_p ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRA",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> ; } <S2SV_ModEnd> ci = d_inode <S2SV_ModStart> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_DEAD ) ) ci = NULL ; spin_lock ( & dentry -> d_lock ) ; cached_with_key = dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ; spin_unlock ( & dentry -> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> ; dput (,0
1288,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> SERVICE_OPTIONS * opt <S2SV_ModStart> servname ) ; <S2SV_ModEnd> service_free ( & <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> servname ) ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; }",0
1290,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; # else context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8 + ( u32 ) i -> posX ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; # else context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p,0
1291,"<S2SV_ModStart> if ( p + l + 1 > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l + 1 > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l + 1 > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l + 1 > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_SEARCH_ALL && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=",0
1292,"<S2SV_ModStart> exception, message ) { if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream",0
1293,<S2SV_ModStart> void ) { if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) )",0
1295,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; <S2SV_ModStart> ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> %m"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"" <S2SV_ModEnd>, req ->",0
1297,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 ihevcd_ref_list ( codec_t * ps_codec, pps_t * ps_pps, sps_t * ps_sps, sps_slice_t * ps_slice_hdr ) { WORD32 st_rps_idx ; WORD32 ai4_num_st_curr_before, ai4_num_st_curr_after, u4_num_lt_curr, u4_num_total_curr <S2SV_ModEnd> ; WORD8 ai1_curr_delta_poc_msb_present_flag <S2SV_ModStart> ] ; pic_buf_t * as_ref_pic_st_curr_before [ MAX_DPB_SIZE ] ; pic_buf_t * as_ref_pic_st_curr_after [ MAX_DPB_SIZE ] ; pic_buf_t * as_ref_pic_st_curr_before [ MAX_DPB_SIZE ] ; pic_buf_t * as_ref_pic_st_curr_after [ MAX_DPB_SIZE ] ; pic_",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; else ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; if ( ret ) ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; else ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; if ( ret ) ret = - EFAULT ; if ( ret ) ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; if ( ret ) ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; else ret = __put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; if ( ret ) ret = - EFAULT ; if ( ret ) ret =",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } bo = drm_malloc_ab ( bo -> size, 1 ) ; if (! bo ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } if (! bo ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } if (! bo ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> render <S2SV_blank> CLs.\\n"" ) ; goto fail ; }",0
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( child <S2SV_ModStart> = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( str ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! out ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if ( fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ;",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> boolean <S2SV_ModEnd> RD_BOOL <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1302,<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> other )!= sk <S2SV_ModEnd> ) { sock_poll_wait <S2SV_ModStart> other )!= sk <S2SV_ModEnd> ) { sock_poll_wait <S2SV_ModStart> wait ) ; <S2SV_ModEnd> } sock_put (,0
1303,<S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] << 24 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"" <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> += sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"",",0
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> exit_io_context ( void <S2SV_ModStart> struct io_context * ioc <S2SV_ModEnd> ; task_lock ( <S2SV_ModStart> current ) ; <S2SV_ModEnd> ioc = current <S2SV_ModStart> -> io_context ; <S2SV_ModEnd> task_unlock ( current <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> ioc = NULL ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1306,<S2SV_ModStart> length!= 0 && trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; },0
1307,<S2SV_ModStart> data ) { unsigned<extra_id_1>i ; int <S2SV_ModStart> int ret ; * value = 0 ; if (! pci_is_enabled ( dev ) ) return - ENODEV ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ),0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> vp9_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,"<S2SV_ModStart> -> dwc ; spin_lock ( & dwc -> lock ) ; <S2SV_ModStart> -> lock ) ; usb_gadget_unmap_request ( & dep -> endpoint, & req -> request, req -> direction ) ; spin_unlock ( & dwc -> lock ) ; <S2SV_ModStart> lock ) ; usb_gadget_unmap_request ( & dep -> endpoint, & req -> request, req -> direction ) ; spin_lock ( & dwc -> lock ) ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; req -> trb = NULL ; spin_lock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock (",0
1312,<S2SV_ModStart> ; yytype_int16 * yyss1 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yyss2 <S2SV_ModEnd> ; yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yytype_int16 * yytype_int16 * <S2SV_ModStart> ; yytype_int16 * yytype_int16 * yytype_int16,0
1313,"<S2SV_ModStart> DISCE_PROBE ] = sas_probe_devices <S2SV_ModEnd>, [ DISCE_SUSPEND <S2SV_ModStart> DISCE_RESUME ] = sas_resume_devices <S2SV_ModEnd>, [ DISCE_DESTRUCT",0
1314,"<S2SV_ModStart> name, int <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr (",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN unsigned int num_words = curve -> num_words ; unsigned int num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { u",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_MIN_LEN ) ; if ( length < ND_RPL_DAOACK_MIN_LEN ) goto tooshort <S2SV_ModStart> "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; return ; trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_MIN_LEN ) ; if ( length < ND_RPL_DAOACK_MIN_LEN ) goto trunc ; bp += ND_RPL_DAOACK_MIN_LEN ; length -= ND_RPL_DAOACK_MIN_LEN ; if ( RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_TCHECK2 ( * daoack -> rpl_dagid, DAGID_LEN ) ; if ( length < DAGID_LEN ) goto tooshort ; dagid_str = ip6addr_string ( ndo, daoack -> rpl_dagid ) ; bp += DAGID_LEN ; length -= DAGID_LEN ; }",0
1317,"<S2SV_ModStart> ) ; int <S2SV_ModEnd> copied, err <S2SV_ModStart> out ; if ( flags & MSG_TRUNC ) { memset ( msg -> msg_name, 0, sizeof ( msg -> msg_name ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( msg -> msg_namelen ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( msg -> msg_namelen ) ) ; memset ( msg -> msg_name, 0, sizeof ( msg -> msg_name ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( msg -> msg_namelen ) ) ; memset ( msg -> msg_namelen, sizeof ( msg -> msg_namelen ) ) ; memset ( msg -> msg_namelen, sizeof ( msg -> msg_namelen ) ) ; memset ( msg -> msg_namelen, sizeof ( msg -> msg_name ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( msg -> msg_namelen ) ) ; memset ( msg -> msg_namelen, sizeof ( msg -> msg_namelen ) ) ;",0
1318,"<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN <S2SV_ModEnd> | EXT4_EX_NOCACHE ; <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS )",0
1319,<S2SV_ModStart> buf ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; bpf_map_inc ( <S2SV_ModEnd> map, true",0
1321,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> escapes ( const <S2SV_ModStart> [ ] = { ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeEfF"", ""00112233445566778899aAbBcCdDeE",0
1322,"<S2SV_ModStart> char detect [ 4 ] ) { if ( memcmp ( detect, ""YUV4"", 4 ) == 0 ) { return 0 ; } if ( memcmp ( detect, ""YUV5"", 4 ) == 0 ) { return 1 ; } if ( memcmp ( detect, ""YUV6"", 4 ) == 0 ) { return 0 ; } if ( memcmp ( detect, ""YUV7"", 4 ) == 0 ) { return 1 ; } if ( memcmp ( detect, ""YUV7"", 4 ) == 0 ) { return 1 ; }",0
1323,"<S2SV_ModStart> size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ;",0
1324,"<S2SV_ModStart> * lined ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < 256 ; i ++ ) lut [ i ] = - 1 ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1",0
1325,<S2SV_ModStart> ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( b ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( b ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( b ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( b ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( b ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if (,0
1326,<S2SV_ModStart> 256 ; vpx_mse16x16 vpx_mse16x16 ; vpx_mse16x16 <S2SV_ModEnd>. vf = <S2SV_ModStart> vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre,0
1327,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> length ; CURLcode,0
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> msg -> oob ) { value = msg -> data [ msg -> readcount ] ; msg -> readcount += 1 ; msg -> bit += 8 ; } else if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; } if ( msg -> bit & 7 ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nb",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; struct snd_ctl_elem_list list ; <S2SV_ModStart> -> count ; list = kcontrol -> list ; down_write ( & card -> controls_rwsem ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, interface, & dev -> dev ) ; if ( status < 0 ) goto out ; status = register_netdev ( net, & dev -> dev ) ; if ( status < 0 ) goto out ;",0
1331,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; if ( mm == NULL ) { conn -> err = MONGO_ERROR ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { return MONGO_ERROR ; }",0
1332,<S2SV_ModStart> ) ) { g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object_unref ( & item -> object ) ; g_object,0
1333,"<S2SV_ModStart> - 2 ; if ( plen < 2 ) { printf ( ""Invalid <S2SV_blank> packet <S2SV_blank> length: <S2SV_blank> %d\\n"", len ) ; return 1 ; } <S2SV_ModStart> - 2 ; if ( plen < 2 ) { printf ( ""Invalid <S2SV_blank> packet <S2SV_blank> length: <S2SV_blank> %d\\n"", len ) ; return 1 ; }",0
1334,<S2SV_ModStart> { umode_t mode ; mutex_lock ( & inode -> i_mmap_sem ) ; <S2SV_ModStart> err_out ; } mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModEnd> retval = v9fs_vfs_setattr_dotl <S2SV_ModStart> iattr ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> err_out ; mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> err_out ; mutex_lock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> iattr ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> err_out ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock ( & inode -> i_mmap_sem ) ; mutex_unlock (,0
1335,<S2SV_ModStart> ; if (! bin -> classes ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_,0
1336,<S2SV_ModStart> case NPPVpluginNameString : type = RPC_TYPE_STRING ; break ; case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL ; return FALSE ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,"<S2SV_ModStart> data ) { if (! atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set ( & c -> object. refcount, 0 ) ; } else if ( atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set ( & c -> object. refcount, - 1 ) ; } else if (! atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set ( & c -> object. refcount, - 1 ) ; if (! atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set ( & c -> object. refcount, 0 ) ; } else if ( atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set ( & c -> object. refcount, - 1 ) ; } else if (! atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set ( & c -> object. refcount, - 1 ) ; if (! atomic_dec_and_test ( & c -> object. refcount ) ) { atomic_set",0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart
1343,"<S2SV_ModStart> TX_SIZE tx_size, <S2SV_ModEnd> int up_available <S2SV_ModStart> plane ] ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> x_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> x_width ; frame_height = xd -> cur_buf -> y_height ; } x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = ( - xd -> mb_to_top_edge >> (",0
1344,"<S2SV_ModStart> end ++ ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if (",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1346,<S2SV_ModStart> i_completed_io_list ) ; INIT_LIST_HEAD ( & ei -> i_aio_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1347,"<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; mutex_unlock ( & memcg -> thresholds_lock ) ;",0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle * <S2SV_ModEnd> ion_handle_get_by_id ( struct <S2SV_ModStart> lock ) ; handle = ion_idr_find ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; return handle? handle : ERR_PTR ( - EINVAL <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } else { assert ( cm -> profile == PROFILE_1 ) ; vpx_wb_write_bit ( wb, 0 ) ; } } else { assert ( cm -> profile == PROFILE_1 ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, 0 ) ;",0
1350,"<S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-min"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-max"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, ""alt-autoscale-max"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, ""alt-autoscale-max"" ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, ""alt-autoscale-max"" ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, sizeof ( col_nam ) ) ; strncpy ( col_nam, """,0
1351,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; if ( * p == '?' ) { q = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { q = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; q = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return",0
1352,"<S2SV_ModStart> if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; }",0
1353,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC",0
1355,"<S2SV_ModStart> == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> allocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1, gemsafe_prkeys [ i ]. ref ) ; ind += 9 ; } else if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; ind += 9 ; } else { gemsafe_prkeys [ i ]. ref = 0 ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; ind += 9 ; } for ( ; i < gemsafe_cert_max ; i ++ ) { gemsafe_prkeys [ i ]. ref = 0 ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is",0
1356,"<S2SV_ModStart>!= 0 ) { trace_kvm_msr_write_ex ( ecx, data ) ; kvm_inject_gp ( vcpu, 0 ) ; return 1 ; } if ( kvm_set_msr ( vcpu, & msr )!= 0 ) { trace_kvm_msr_write_ex ( ecx, data ) ; kvm_inject_gp ( vcpu, 0 ) ; return 1 ; } if ( vmx_set_msr ( vcpu, & msr )!= 0 ) { trace_kvm_msr_write_ex ( ecx, data ) ; kvm_inject_gp ( vcpu, 0 ) ; return 1 ; } if ( vmx_set_msr ( vcpu, & msr )!= 0 ) { trace_kvm_msr_write_ex ( ecx, data ) ; kvm_inject_gp ( vcpu, 0 ) ; return 1 ; }",0
1357,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_const_dup ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ) ) ) ) ) ) ) ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ) ) ), ( int ) rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= _CACHE_MASK ; return vm_iomap_memory ( vma, fbdev -> fb_phys, fbdev -> fb_len, vma -> vm_pgoff << PAGE_SHIFT, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> ] ) ; if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; return 1 ; } if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; return 1 ; } if ( strlen ( config_opt ) < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" )",0
1360,<S2SV_ModStart> / 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 6 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 5 * state -> xsize ) /,0
1361,"<S2SV_ModStart> idx ) ) { if ( perf_event_overflow ( event, 1, & data, regs ) ) { if ( perf_event_overflow ( event, 0, & data, regs ) ) { if ( perf_event_overflow ( event, 0, & data, regs ) ) { if ( perf_event_overflow ( event, 0, & data, regs ) ) { alpha_pmu_stop ( event, 0 ) ; } } else { if ( perf_event_overflow ( event, 1, & data, regs ) ) { if ( perf_event_overflow ( event, 1, & data, regs ) ) { if ( perf_event_overflow ( event, 0, & data, regs ) ) { if ( perf_event_overflow ( event, 0, & data, regs ) ) { if ( perf_event_overflow ( event, 0, & data, regs ) ) { alpha_pmu_stop ( event, 0 ) ; } } else { if ( perf_event_overflow ( event, 1, & data, regs ) ) { if ( perf_event_overflow ( event, 1, & data, regs ) ) { if ( perf_event_overflow (",0
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,"<S2SV_ModStart> ; err = __fanout_add ( sk, id, type_flags ) ; if ( err ) goto out ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_EBPF || type == PACKET_FANOUT_CBPF || type == PACKET_FANOUT_EBPF || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU",0
1364,<S2SV_ModStart> -> nmi && <S2SV_ModEnd> handle -> event <S2SV_ModStart> -> pending ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } s += size ; len -= size ; } else { * op ++ = ( wchar_t ) <S2SV_ModEnd> ( SURROGATE_PAIR | <S2SV_ModStart> SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } s += size ; len -= size ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1366,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> v, i <S2SV_ModStart>!= 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; }",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; rc = pcmk_ok ; } if ( rc == - EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> register_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_ST",0
1368,<S2SV_ModStart> AF_INET6 ; } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_FH_ID ( p ) ; dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; dt -> vlan_id [ 1 ] = p -> vlan_id [ 1 ] ; } else if ( PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; dt -> vlan_id [ 1 ] = p -> vlan_id [ 1 ] ; dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> remove = 0 ; dt -> seen_last = 0 ; },0
1369,"<S2SV_ModStart> ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851ReadFifo ( interface, context -> rxBuffer, n ) ; ksz8851ClearBit ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ancillary = NET_DEFAULT_RX_ANCILLARY ; nicProcessPacket (",0
1370,<S2SV_ModStart> <S2SV_null> <S2SV_null> struct <S2SV_ModEnd> stmt_ty <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; flush_tlb ( ) ;",0
1372,"<S2SV_ModStart> = - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; if ( error ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; if ( error ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else { error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; if ( error ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; if ( error ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, G",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if ( jas_getuint16 ( in, & siz -> caps ) || jpc_getuint32 ( in, & siz -> width ) || jas_getuint32 ( in, & siz -> height ) || jas_getuint32 ( in, & siz -> tilexoff ) || jas_getuint32 ( in, & siz -> tileyoff ) || jas_getuint16 ( in, & siz -> numcomps ) ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } if (! siz -> width ||! siz -> height ||! siz -> tilewidth ||! siz -> tileheight ||! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank>",0
1374,"<S2SV_ModStart> ; if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, dst_coap_msg_ptr -> token_len ) < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; return - 1 ; } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet",0
1375,"<S2SV_ModStart> << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; if ( memcmp ( xmi_data, ""XDIRINFO"", 4 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; if ( memcmp ( xmi_data, ""XDIRINFO"", 4 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, W",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely (! iov_ok ( iov, nr_segs ) ) ) { ret = - EINVAL ; do_wakeup = 1 ; break ; } <S2SV_ModStart> int error, atomic ; if ( unlikely (! ops -> confirm ( pipe, buf ) ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> error =! <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } atomic =! iov_fault_in_pages_write ( iov, chars ) ; if (! atomic ) { atomic =! iov_fault_in_pages_write ( iov, chars ) ; } redo : if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; else kunmap ( addr ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup =",0
1377,"<S2SV_ModStart> MaxGIFBits ) # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code << number_bits ) ; else datum = ( size_t ) ( code << number_bits ) ; bits += number_bits ; while ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; length ++ ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; length = 0 ; } while ( length >= 254 ) { ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlobByte ( image, length )",0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> argv [ ] ) { p_fm_config_conx_hdlt hdl ; <S2SV_ModStart> res ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } } } if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_",0
1380,"<S2SV_ModStart> ; if ( argc < 1 || argc > 2 ) { usage ( ) ; exit ( EXIT_FAILURE ) ; } verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAXMEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : verbose = 1 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP :",0
1381,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0",0
1382,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else if ( ( RAW ( row, col ) = nonz [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else if ( ( RAW ( row, col ) = nonz [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else if ( ( RAW ( row, col ) = nonz [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else if ( ( RAW ( row, col ) = nonz [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif",0
1383,"<S2SV_ModStart> if ( len > param -> data_size - param -> data_start ) { dm_ioctl ( filp, DM_IOC_ERROR, ""List <S2SV_blank> devices <S2SV_blank> would <S2SV_blank> overrun"", & param -> flags ) ; return - EINVAL ; } if ( len < needed ) { dm_ioctl ( filp, DM_IOC_ERROR, ""List <S2SV_blank> devices <S2SV_blank> would <S2SV_blank> overrun"", & param -> flags ) ; goto out ; } if ( len < param -> data_size - param -> data_start ) { dm_ioctl ( filp, DM_IOC_ERROR, ""List <S2SV_blank> devices <S2SV_blank> would <S2SV_blank> overrun"", & param -> flags ) ; return - EINVAL ; } if ( len < needed ) { dm_ioctl ( filp, DM_IOC_ERROR, ""List <S2SV_blank> devices <S2SV_blank> would <S2SV_blank> overrun"", & param -> flags ) ; goto out ; } if ( len < param -> data_size - param -> data_start ) { dm_ioctl ( filp, DM_IOC_ERROR, ""List <S2SV_blank> devices <S2SV_blank> would <S2SV_blank> overrun"", & param",0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> int idx, ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> nr_rt_entries ) { hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( vcpu ) ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } <S2SV_ModEnd> } hlist_for_each_entry ( <S2SV_ModStart>, & irq_rt -> map [ guest_irq ], link ) { if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; }",0
1386,<S2SV_ModStart> bfqq ) return <S2SV_ModEnd> bfq_idle_slice_timer_body ( bfqq,0
1387,"<S2SV_ModStart> } else { if ( <S2SV_ModEnd> rold -> umin_value <S2SV_ModStart> 0 && rold -> smin_value == U64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg",0
1388,"<S2SV_ModStart> ; if ( IS_ERR_OR_NULL ( handle ) ) { pr_err ( ""sspi_SecureHandleGetUpperPointer: <S2SV_blank> handle <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"" ) ; return NULL ; } pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if ( pointer == NULL ) { pr_err ( ""sspi_SecureHandleGetUpperPointer: <S2SV_blank> handle <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"" ) ; return NULL ; } pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if ( pointer == NULL ) { pr_err ( ""sspi_SecureHandleGetUpperPointer: <S2SV_blank> handle <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"" ) ; return NULL ; }",0
1389,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
1390,<S2SV_ModStart> -> d_inode ) { if ( ovl_dentry_lower ( old ) -> d_inode!= ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode!= ovl_dentry_lower ( old ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode!= ovl_dentry_lower ( old ) -> d_inode ) { if ( ovl_dentry_lower ( old ) -> d_inode!= ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode!= ovl_dentry_lower ( old ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode!= ovl_dentry_lower ( old ) -> d_inode ) { if ( ovl_dentry_lower ( old ) -> d_inode!= ovl_dentry_lower ( new ) -> d_inode ) { if,0
1391,"<S2SV_ModStart> ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int <S2SV_ModStart> ) ) ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int <S2SV_ModStart> ) ) ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int <S2SV_ModStart> ) ) ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int <S2SV_ModStart> ) ) ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int <S2SV_ModStart> ) ) ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int <S2SV_ModStart> ) ) ; fprintf ( stderr <S2SV_ModEnd>, ""size: <S2SV_blank> %d, <S2SV_blank> size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, ( int",0
1392,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
1393,"<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0 ; memset ( msg -> msg_name, 0, sizeof ( * msg ) ) ; if (! ( flags & MSG_TRUNC ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; atm_return ( vcc, skb -> truesize ) ; } if (! ( flags & MSG_PEEK ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; atm_return ( vcc, skb -> truesize ) ; } if (! ( flags & MSG_DONTWAIT ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc )",0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_readers = 0 ;,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd <S2SV_ModEnd> ; set_offsets ( <S2SV_ModStart>, mi_row, mi_col, rate, dist, bsize ) ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
1396,<S2SV_ModStart> ( csum ) { <S2SV_ModEnd> dev -> hw_features <S2SV_ModStart> |= NETIF_F_HW_CSUM | <S2SV_ModEnd> NETIF_F_SG | NETIF_F_FRAGLIST <S2SV_ModStart> |= NETIF_F_HW_CSUM | <S2SV_ModEnd> NETIF_F_FRAGLIST ; } <S2SV_ModStart> ( csum ) { <S2SV_ModEnd> dev -> features <S2SV_ModStart> |= NETIF_F_HW_CSUM | <S2SV_ModEnd> NETIF_F_SG | NETIF_F_FRAGLIST,0
1397,"<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = superblockRead ( & reader, & reader. superblock ) ; if (! * err ) { hrtf = getHrtf ( & reader, err ) ; } if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) break ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1399,"<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange <S2SV_ModStart> ) ) ; if ( pMap -> ranges == NULL ) { LOGW ( ""alloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc() <S2SV_blank> failed: <S2SV_blank> malloc",0
1400,<S2SV_ModStart> __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize / sizeof ( xfs_bmbt_rec_t ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize / sizeof ( xfs_bmbt_rec_t ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize / sizeof ( xfs_bmbt_rec_t ) / sizeof ( xfs_bmbt_rec_t ) ) return __this_address ; if ( mode && be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize / sizeof ( xfs_bmbt_,0
1401,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags &",0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,"<S2SV_ModStart> event ) ; if ( hlist_unhashed ( & event -> hlist_entry ) ) { WARN_ON_ONCE ( swhash -> online ) ; return - EINVAL ; } hlist_add_head_rcu ( & event -> hlist_entry, head ) ; perf_event_update_userpage ( event ) ;",0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv4 <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv4 <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address <S2SV_blank> length"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } if ( tlen < 4 ) { ND_PRINT ( ( n",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'40%%\'>Environment <S2SV_blank> file</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'40%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""</th>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ( constr1, sizeof ( constr1 ) <S2SV_ModEnd>, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", constr2, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""unisw",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; },0
1409,"<S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart>, & len <S2SV_ModEnd>, & iter <S2SV_ModStart>, & len <S2SV_ModEnd>, & iter <S2SV_ModStart> iovec ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) ret = ret ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) ret = ret ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_",0
1410,"<S2SV_ModStart> rsize ) ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else if ( c -> protocol == ascii_prot ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else if ( c -> protocol == ascii_prot ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else",0
1411,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, iad_num, USB_MAXINTERFACES ) ; nintf = nintf_orig ; } else if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, iad_num, USB_MAXINTERFACES ) ; nintf = nintf_orig ; }",0
1412,"<S2SV_ModStart>, err ; mutex_lock ( & card -> controls_mutex ) ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) { mutex_unlock ( & card -> controls_mutex ) ; return - ENOMEM ; } if ( info -> count > UINT_MAX / sizeof ( * info ) ) return - EINVAL ; access = info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ELEM_ACCESS_TLV_",0
1413,"<S2SV_ModStart> 3 ) { exit_client ( client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name",0
1414,<S2SV_ModStart> case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if (,0
1415,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1416,<S2SV_ModStart> ~ IFF_XMIT_DST_RELEASE ; <S2SV_ModEnd> random_ether_addr ( dev,0
1417,"<S2SV_ModStart> 16 ) ; vp8_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; error16x16 = this_rd ; distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; start [ maxlen - 1 ] = 0 ; psf -> headindex = strlen ( ( char * ) psf -> header ) ; psf -> headerindex = strlen ( ( char * ) psf -> header ) ; psf -> headerindex = strlen ( ( char * ) psf -> header ) ; psf -> header [ maxlen - 1 ] = 0 ; psf -> header [ maxlen - 1 ] = 0 ; psf -> header [ maxlen - 1 ] = 0 ; psf -> header [ maxlen - 1 ] = 0 ; psf -> header [ maxlen - 1 ] = 0 ; psf -> header [ maxlen - 1 ] = 0 ; psf -> header [ maxlen - 1 ] = 0 ; psf -> headerindex = strlen ( ( char * ) psf -> header ) ; psf -> headerindex = strlen ( ( char * ) psf -> header ) ; psf -> header [ 0 ] = 0 ; psf -> header [ 0 ] = 0 ; psf -> header [ 1 ] = 0 ; psf -> header [ 0 ] = 0 ; psf -> header [ 0 ] = 0 ;",0
1420,"<S2SV_ModStart> && unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < 0 && unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT - 1 ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank>",0
1421,<S2SV_ModStart> alg_priv ) { if ( ctx -> priv -> iface -> destroy ) ctx -> priv -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } else { if ( ctx -> priv -> name ) ctx -> priv -> name = NULL ; ctx -> priv -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_ERROR ; else { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> iface ) ; ctx -> priv -> iface = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; },0
1422,"<S2SV_ModStart> : return nested_cpu_has ( vmcs12, CPU_BASED_RDPMC_EXITING <S2SV_ModEnd> ) ; case <S2SV_ModStart> : return nested_cpu_has ( vmcs12, CPU_BASED_RDTSC_EXITING <S2SV_ModEnd> ) ; case <S2SV_ModStart> : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_RAID_",0
1423,"<S2SV_ModStart> speed ) { memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> less_rectangular_check = 1 <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> auto_mv_step_size <S2SV_ModStart> = 2 ; <S2SV_ModEnd> sf -> mode_skip_start <S2SV_ModStart> = 10 ; <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA",0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if (! skb_header_ok ( skb, dataoff, sizeof ( _dh ), & dh ) ) return NF_DROP ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET && test_bit ( IPS_ASSURED_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_DROP ; } spin_unlock_bh ( & ct -> lock ) ; <S2SV_ModStart> case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_REQUEST ) ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. state [ old_state ] = new_state ; break ; case CT_DCCP_REQUEST : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp_hdr_seq",0
1425,<S2SV_ModStart> struct compat_timex tx32 ; txc -> modes = tx32. modes ; txc -> freq = tx32. freq ; txc -> maxerror = tx32. maxerror ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> precision = tx32. precision ; txc -> tolerance = tx32. tolerance ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> tick = tx32. tick ; txc -> ppsfreq = tx32. ppsfreq ; txc -> jitter = tx32. jitter ; txc -> shift = tx32. shift ; txc -> stabil = tx32. stabil ; txc ->,0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""no <S2SV_blank> data, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""no <S2SV_blank> data, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""no <S2SV_blank> data, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""no <S2SV_blank> data, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""no <S2SV_blank> data, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, str",0
1427,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MINSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MINSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize",0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote!= Py_CHARMASK ( * s ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; Py_DECREF ( errstr ) ; } else { if ( quote!= Py_CHARMASK ( * s ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", _PyUnicode_AsString ( errstr ) ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; }",0
1430,"<S2SV_ModStart> * input_ptr ; int <S2SV_ModEnd> is_keyframe_qaunt_set = 0 <S2SV_ModStart> == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""spatial-layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if (",0
1431,<S2SV_ModStart> ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; tl_data_orig = tl_data_orig -> tl_data_next ; },0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; data += frame -> linesize [ plane ] ; } } av_log ( ctx, AV_LOG_INFO, ""n:%"" PRId64 "" <S2SV_blank> pts:%s <S2SV_blank> pts_time:%s <S2SV_blank> pos",0
1433,"<S2SV_ModStart> ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf",0
1434,"<S2SV_ModStart> self ) { PyObject * new_memo ;<extra_id_1>Py_ssize_t i ; if ( self -> unpickler -> memo_size == 0 ) return NULL ; new_memo = PyDict_New ( ) ; if ( new_memo == NULL ) return NULL ; for ( i = 0 ; i < self -> unpickler -> memo_size ; i ++ ) { PyObject * key, * value ; status = PyDict_SetItem ( new_memo, key, NULL ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, NULL ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, NULL ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, NULL ) ; Py_DECREF ( key ) ; if ( status < 0 ) goto error ; status = PyDict_SetItem ( new_memo, key, NULL ) ; Py_DECREF ( key )",0
1435,<extra_id_0>) < 0 ) { cJSON_SetError ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_Get,0
1436,"<S2SV_ModStart> ) ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
1437,"<S2SV_ModStart>! ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> size ) == 0 <S2SV_ModEnd> ) pthread_mutex_unlock ( <S2SV_ModStart> slot_lock ) ; BTA_JvRfcommRead ( slot -> rfc_handle, slot -> id ) ; } else if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> scn ) ; need_close = true ; } } else if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> scn, slot",0
1438,"<S2SV_ModStart> ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( phdr ) ) ; memset ( & phdr, 0, sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) { mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) ) ; if ( mpdu_str == NULL ) mpdu_str = g_malloc ( sizeof ( phdr ) )",0
1439,<S2SV_ModStart> ; sh = s_malloc <S2SV_ModEnd> ( hdrlen +,0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> -> ChromaSubsamplingLevel? 1 : 0 <S2SV_ModEnd> ; rw = <S2SV_ModStart> -> ColorLossLevel ; src = data + ( context -> height - 1 ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for (,0
1441,"<S2SV_ModStart> + 1 ; } if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo",0
1442,"<S2SV_ModStart> - EINVAL ) ; * ( ++ top ) = invert ; break ; case ')' : if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ;",0
1443,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf,0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_tx_mode <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 || datalen > sizeof ( * ( unsigned char * ) data ) ) return - EINVAL ; if ( datalen < 1 || datalen > sizeof ( * ( unsigned char * ) data ) ) return - EINVAL ; if ( datalen < 1 || datalen > sizeof ( * ( unsigned char * ) data ) ) return - EINVAL ;,0
1448,"<S2SV_ModStart> rc ) { if ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; } if ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" <S2SV_ModEnd> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" <S2SV_ModEnd> ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; }",0
1449,"<S2SV_ModStart> 6 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1045 ""re_grammar.c"" break ; case 26 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 ""re_grammar.c"" break ; case 27 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1057 ""re_grammar.c"" break ; case 28 : # line 99 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1063 ""re_grammar.c"" break ; case 29 : # line 100 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1069 ""re_grammar.c"" break ; case 30 : # line 100 ""re_grammar.y"" { yr_",0
1450,<S2SV_ModStart> ; * ptr = <S2SV_ModEnd> ( ( col <S2SV_ModStart> bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAY,0
1451,"<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> struct macroblock_plane * <S2SV_ModStart> 32 ] ; <S2SV_ModEnd> const int16_t * <S2SV_ModStart> int16_t * qcoeff = BLOCK_OFFSET ( & cpi -> mb. plane [ plane ], block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_prob ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_prob ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cp",0
1452,"<S2SV_ModStart> ; SrcList * const pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } if ( pSrc -> nSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
1453,"<S2SV_ModStart> & SHM_RND ) { shm_lock_by_ptr ( shp, shmaddr, raddr ) ; if ( shmflg & SHM_MAYWRITE ) { shm_unlock_by_ptr ( shp, shmaddr, raddr ) ; goto out_unlock ; } if ( shmflg & SHM_MAYEXEC ) { shm_unlock_by_ptr ( shp, shmaddr, raddr ) ; goto out_unlock ; } else { shm_unlock_by_ptr ( shp, shmaddr, raddr ) ; if ( shmflg & SHM_MAYEXEC ) { shm_unlock_by_ptr ( shp, shmaddr, raddr ) ; goto out_unlock ; }",0
1454,"<S2SV_ModStart> users ) ; if (! svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM",0
1455,"<S2SV_ModStart> curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R0. x, R0. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits",0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsXEmbedBool : <S2SV_ModEnd> type = RPC_TYPE_BOOLEAN <S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVPluginElementNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1458,"<S2SV_ModStart> ; ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
1459,"<S2SV_ModStart> s ) { if ( errno == EAGAIN ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> = NULL ; const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ;",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> svc_ctx -> internal <S2SV_ModEnd> ; } <S2SV_null>,0
1462,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> mcs_parse_domain_params ( STREAM <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & <S2SV_ModEnd> length ) ;",0
1463,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_exists ( params, hkey. num, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1464,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = _y4m -> vpx_bps <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_type ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_type ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I420,0
1465,"<S2SV_ModStart> struct obj * otmp = NULL ; if ( buf == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ( read_uids_guids ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> ( read_exports_table ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> FALSE ) return FALSE ; if ( parse_fragment_table ( fd, & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( fd, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( fd, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory",0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> -> count = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> } } return env <S2SV_ModEnd> ; } <S2SV_null>,0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_enable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } } else { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vpx",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1471,<S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> curY <S2SV_ModEnd> >= p -> <S2SV_ModStart> curY >= p -> height && context -> cur,0
1472,<S2SV_ModStart> b < 16 ) ; ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; if ( m == Y_PRED ) { ++ x -> y_mode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else if ( m == Y_PRED ) { ++ x -> y_mode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
1473,"<S2SV_ModStart> ) ; } if (! sr -> tid_tree ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; } mutex_enter ( & sr -> fid_ofile -> f_mutex ) ; smb_flush_file ( sr, sr -> fid_ofile ) ; mutex_exit ( & sr -> fid_ofile -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; mutex_exit ( & file -> f_mutex ) ; flist = & sr -> tid_tree -> t_ofile_list ; smb_llist_enter ( flist, RW_READER ) ; file = smb_llist_head ( flist ) ; while ( file ) { mutex_enter ( & file -> f_mutex ) ; smb_flush_file ( sr, file ) ; mutex_exit ( & file -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } smb_llist_exit ( flist ) ;",0
1474,"<S2SV_ModStart> = 0 ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( visbuf, 0, sizeof ( visbuf ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( visbuf, 0, sizeof ( visbuf ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) )",0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd>, * StartClean <S2SV_ModStart> ; double * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s",0
1476,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> id ; net_get_random_once <S2SV_ModEnd> ( & ip_idents_hashrnd <S2SV_ModStart> ( ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1477,"<S2SV_ModStart> expr_ty step ; if ( _PyObject_HasAttrId ( obj, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1479,"<S2SV_ModStart> pw ) < 0 && ctl -> pw -> pw_gecos!= gecos ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; } if ( <S2SV_ModStart> pw ) < 0 && ctl -> pw -> pw_gecos!= gecos ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; } if ( ctl -> pw -> pw_gecos!= gecos ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; } if ( setpwnam ( ctl -> pw ) < 0 && ctl -> pw -> pw_gecos!= gecos ) { warn ( ""setpwnam <S2SV_blank> failed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { if ( radiotap_header -> it_version < IEEE80211_RADIOTAP_VERSION_1 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_2 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_3 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_1 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_2 <S2SV_ModEnd> ) return -,0
1481,<S2SV_ModStart> (! nfp_abm_u32_check_knode <S2SV_ModEnd> ( alink -> <S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr,",0
1483,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. cfg. rc_twopass_stats_in ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = 0 ; } if ( pass ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in =",0
1484,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KE",0
1485,<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_,0
1486,"<S2SV_ModStart> VP9D_CONFIG * oxcf, vpx_bit_depth_t bit_depth <S2SV_ModStart> = vpx_memalign ( bit_depth <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> pbi ) ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> ready_for_new_data = 1 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & cm -> lf_worker ) ; return pbi ; } cm -> error. setjmp = 0 ; vp9_worker_init ( & cm -> lf_worker ) ; return pbi ; } <S2SV_null> <S2SV_null>",0
1487,"<S2SV_ModStart> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; <S2SV_ModStart> -> opt ; rcu_read_unlock ( ) ;,0
1490,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; if ( flags & VP8_EFLAG_NO_REF_LAST ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) upd ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_GF ) upd ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_ARF ) upd ^= VP9_ALT_FLAG ; vp9_",0
1492,"<S2SV_ModStart> wqh ) ; <S2SV_ModEnd> if ( isalarm <S2SV_ModStart> ctx -> clockid == CLOCK_REALTIME_ALARM? ALARM_REALTIME : ALARM_BOOTTIME, timerfd_alarmproc ) ; else if ( ctx -> clockid == CLOCK_BOOTTIME_ALARM ) hrtimer_init ( & ctx -> t. tmr, clockid, HRTIMER_MODE_ABS ) ; else ctx -> t. tmr = ktime_mono_to_real ( 0 ) ; ctx -> moffs = ktime_mono_to_real ( 0 ) ;",0
1493,"<S2SV_ModStart> * child, * q <S2SV_ModEnd> ; int err <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & q -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } unlock_mount_hash ( ) ; cleanup_group_ids ( source_mnt, NULL ) ; <S2SV_ModEnd> } unlock_mount_hash (",0
1494,"<S2SV_ModStart> len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } seq = ( char * ) seq + count * elemtype -> size ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if (! realloc ( seq, ( count + 1 ) * elemtype -> size ) ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret",0
1495,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, - cospi_15_64 ) ; const __m128i k__cospi_p15_m17 = pair_set_epi16 ( cospi_15_64, - cospi_17_64 ) ; const __m128i k__cospi_p21_p11 = pair_set_epi16 ( cospi_21_64, - cospi_11_64 ) ; const __m128i k__cospi_p21_m21 = pair_set_epi16 ( cospi_21_64, - cospi_21_64 ) ; const __m128i k__cospi_p11_m21 = pair_set_epi16 ( cospi_11_64, - cospi_11_64 ) ; const __m128i k__cospi_p11_m21 = pair_set_epi16 ( cospi_11_64, -",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) <S2SV_ModEnd> rc -> av_per_frame_bandwidth,0
1497,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; }",0
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff <S2SV_ModStart> NULL ) { memset ( fout, 0, sizeof ( * fout ) ) ; return - 1 ; } if ( huff -> loc [ ch ] == NULL ) { memset ( fout, 0, sizeof ( * fout ) ) ; return - 1 ; } send ( huff -> loc [ ch ], NULL, fout ) ; for ( i = 7 ; i >= 0 ; i -- ) { add_bit ( ( char ) ( ( ch >> i ) & 0x1 ), fout ) ; add_bit ( ( char ) ( ( ch >> i ) & 0x1 ) ) ; add_bit ( ( char ) ( ( ch >> i ) & 0x1 ), fout ) ; add_bit ( ( char ) ( ( ch >> i ) & 0x1 ), fout ) ; for ( i = 7 ; i >= 0 ; i -- ) { add_bit ( ( char ) ( ( ch >> i ) & 0x1 ), fout ) ; add_bit ( ( char ) ( ( ch >> i ) & 0x",0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart>, int mi_row <S2SV_ModEnd>, int mi_col <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> <S2SV_ModEnd> e_mbd ; MODE_INFO <S2SV_ModStart> ; PICK_MODE_CONTEXT * ctx <S2SV_ModEnd> = get_block_context ( <S2SV_ModStart> ; ctx -> is_coded = 1 ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = ctx -> use_lp32x32fdct ; x -> skip_encode = ( cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) ; if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf. tuning == VP8_TUNE_SSIM ) { if ( cpi -> oxcf. tuning == VP8_TUNE_SSIM ) { adjust_act_zbin_extra ( cpi, x",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> crypto_skcipher * tfm_des <S2SV_ModEnd> ; struct scatterlist <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } rc = crypto_skcipher_encrypt ( req ) ; if ( rc ) cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> encrypt <S2SV_blank> crypt <S2SV_blank> key <S2SV_blank> rc: <S2SV_blank> %d\\n"", rc ) ; smbhash_free_skcipher : crypto_free_skcipher ( tfm_des",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1502,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) {",0
1503,<S2SV_ModStart> += delta ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 0 ; } if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) goto out ;,0
1508,"<S2SV_ModStart> ++ r ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r",0
1509,"<S2SV_ModStart> 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ;",0
1510,"<S2SV_ModStart> length ) { int ret ; <S2SV_ModStart> EINTR ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
1512,"<S2SV_ModStart> ) { memset ( & cfg -> flags, 0, sizeof ( cfg_t ) ) ; if ( ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & OBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK ) && ( flags & O_NONBLOCK )",0
1513,<S2SV_ModStart> -> seg1_blkaddr = le64_to_cpu ( raw_super -> seg1_blkaddr ) ; sm_info -> seg2_blkaddr = le64_to_cpu ( raw_super -> seg2_blkaddr ) ; sm_info -> seg3_blkaddr = le64_to_cpu ( raw_super -> seg3_blkaddr ) ; sm_info -> seg4_blkaddr = le64_to_cpu ( raw_super -> seg4_blkaddr ) ; sm_info -> seg4_blkaddr = le64_to_cpu ( raw_super -> seg4_blkaddr ) ; sm_info -> seg4_blkaddr = le64_to_cpu ( raw_super -> seg4_blkaddr ) ; sm_info -> seg4_blkaddr = le64_to_cpu ( raw_super -> seg4_blkaddr ) ; sm_info -> seg4_blkaddr = le64_to_cpu ( raw_super -> seg4_blkaddr ) ; sm_info -> seg4_blkaddr = le64_to_,0
1514,"<S2SV_ModStart> { outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += strlen ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %",0
1515,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
1516,<S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # if <S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # endif <S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # if <S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # else <S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # endif <S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # endif <S2SV_ModStart> -> mb_cols - mb_col <S2SV_ModEnd> ; # if,0
1517,"<S2SV_ModStart> pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,"<S2SV_ModStart> * data ; data = s -> p ; logger ( Clipboard, Debug, ""cliprdr_process(), <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; if ( status == CLIPRDR_ERROR ) { switch ( type ) { case CLIPRDR_FORMAT_ACK : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_request_data ( format ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, length ) ; ui_clip_handle_data ( length ) ; break ; case 7 : ui_clip_handle_data ( length ) ; break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> packet <S2SV_blank> type <S2SV_blank> %d"", type ) ; } }",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( l -> lineBuf [ c_rows ] =='<S2SV_blank>') { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else { if ( l -> lineBuf [ c_rows ] == '*' ) { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else if ( l -> lineBuf [ c_rows ] == '*' ) { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else { if ( l -> lineBuf [ c_rows ] == '*' ) { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else { if ( l -> lineBuf [ c_rows ] == '*' ) { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else if ( l -> lineBuf [ c_rows ] == '*' ) { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else { if ( l -> lineBuf [ c_rows ] == '*' ) { buf -> currentLine -> lineBuf [ c_rows ] ='<S2SV_blank>'; } else { if ( l -> lineBuf [ c_rows ] ==,0
1521,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; } if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNext,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) return - 1 ; _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { cp [ count ] = tmp [ byte * bps * count + byte ] ; } } _TIFFfree ( tmp ) ; tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; if (! tmp ) return - 1 ; _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { cp [ count ] = tmp [ byte * bps * count + byte ] ; } } _TIFFfree ( tmp ) ; tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; if (! tmp ) return - 1 ; _TIFFmemcpy",0
1525,"<S2SV_ModStart> STREAM s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, __func__ ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s, 0 ) ; in_uint16_le ( s,",0
1526,"<S2SV_ModStart> option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( option == NULL ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( option == NULL ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( option == NULL ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; if ( option == NULL ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,""",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> coef_probs ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
1528,"<S2SV_ModStart> } ; int i ; <S2SV_ModStart> name ) ; if ( tc. c_iflag & IUTF8 ) { SET_FLAG ( tc. c_iflag, IUTF8, 0 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; } if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s",0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ] = { 0xe, 0x80, 0 } ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ds3000_attach, & su3000_ds",0
1530,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && (",0
1531,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> int uv_stride ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart>, stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv",0
1532,"<S2SV_ModStart> = TRUE ; if ( strchr ( origbuf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank>",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static cJSON * cJSON_CreateFloatArray ( double <S2SV_ModEnd> * numbers, <S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; else suffix_object ( p, n ) ; a = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; if",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; die : return ;",0
1535,<S2SV_ModStart> float * w = f -> previous_window [ f -> channels - 1 ] ; f -> previous_window [ f -> channels - 1 ] = 0 ; for ( i = 0 ; i < f -> channels ; ++ i ) { f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < len ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ],0
1536,"<S2SV_ModStart> { VP9_COMMON * const cm = pbi -> common ; const int aligned_mi_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_rows = mi_rows_aligned_to_sb ( cm -> mi_rows ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = MIN ( pbi -> oxcf. max_threads, tile_workers ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1",0
1537,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) ; while ( ( save = ftell ( ifp ) ) < offset ) { if ( ( save = ftell ( ifp ) ) < offset ) break ; if ( ( save = ftell ( ifp ) ) < offset ) break ; if ( ( save = ftell ( ifp ) ) < offset ) break ; if ( ( save = ftell ( ifp ) ) < offset ) break ; if ( tag == 0x505244 ) { fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes",0
1538,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; vpx_clear_segmentation ( seg ) ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LV",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFGetField ( in, TIFFTAG_PLANARCONFIG, & shortv ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> samples/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if (! TIFFIsTiled ( out ) ) { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ; bychunk = ( tw == tilewidth && tl == tilelength ) ; } else if ( tw == tilewidth && tl == tilelength ) { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; TIFFGetField ( in, TIFFTAG_TILE",0
1540,<S2SV_ModStart>. err_detail = error <S2SV_ModEnd> -> has_detail? <S2SV_ModStart> -> has_detail? error <S2SV_ModEnd> -> detail :,0
1541,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1542,"<S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ; <S2SV_ModEnd> b = get_bson",0
1543,"<S2SV_ModStart> ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; int i ; <S2SV_ModStart> ps_cur_slice ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ; <S2SV_ModStart> ps_cur_poc ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv",0
1544,<S2SV_ModStart> -> vm_file -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_dentry -> f_d,0
1545,"<S2SV_ModStart> ssize_t ret ; if (! btpan_cb. congest_packet ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; } ret = read ( fd, btpan_cb. congest_packet, sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; },0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ;",0
1548,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
1549,"<S2SV_ModStart> { 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = 0 ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return -",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi ->",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJOR, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1553,"<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 24 ] ) ; if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( n",0
1554,"<S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModEnd> if ( ok <S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) { * set_rtrn =! * set_rtrn ; * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModEnd> if ( ok <S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) { * set_rtrn =! * set_rtrn ; return false ; } if ( istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq",0
1555,"<S2SV_ModStart> } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> return rc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
1557,"<S2SV_ModStart> MaxTextExtent ] ; size_t <S2SV_ModEnd> length, padding <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image, indexes ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image, indexes ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image",0
1558,"<S2SV_ModStart> ; if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 ; } if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 ; } if ( i >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" )",0
1559,<S2SV_ModStart> ; break ; case '\\0' : break ; case '\\1' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; default : break ; } break ; case '\\0' : break ; case '\\1' : break ; case '\\2' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; default : break ; },0
1560,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> ; int is_valid ; if ( t -> owner -> certificate_check_cb == NULL ) { giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; }",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> mode = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ;",0
1564,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModEnd> if ( prev <S2SV_ModStart> res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml. last_pts_ms = - 1 ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml.",0
1565,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u)"" <S2SV_ModEnd>, tok2str (",0
1566,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ), ""re_ast_get_root_node()"" ) ) ) ) ) ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ), ""re_ast_get_root_node()"" ) ) ) ; } else { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (",0
1567,"<S2SV_ModStart> ( path, <S2SV_ModEnd> iter -> var_expand_table <S2SV_ModStart> ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ;",0
1568,<S2SV_ModStart> ; if ( A >= <S2SV_ModEnd> skb -> len <S2SV_ModStart> A ] ; if ( nla -> nla_len > <S2SV_ModEnd> A - skb <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0 <S2SV_ModStart> A ] ; if ( nla -> nla_len < <S2SV_ModEnd> A - skb <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1569,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>""",0
1571,"<S2SV_ModStart> SC_MAX_SERIALNR ) ; if (! serial -> value ) { SC_FUNC_RETURN ( card -> ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND ) ; }",0
1572,<S2SV_ModStart> -> level = 0 ; tok -> alterror = 0 ; tok -> altwarning = 1 ; tok -> alterror = 1 ; tok -> alttabsize = 1 ; tok -> alttindstack [ 0 ] = 0 ; tok -> altindent = 0 ; tok -> altindstack [ 0 ] = 0 ; tok -> altindent = 0 ; tok -> altindent = 0 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttabsize = 1 ; tok -> alttindstack [ 0 ] = 0 ; tok -> decoding_state = STATE_INIT ; tok -> decoding_erred = 0 ; tok -> decoding_buffer = NULL ; # ifdef PGEN tok -> filename = NULL ; tok -> decoding_readline = NULL ; # endif,0
1573,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } }",0
1574,<S2SV_ModStart> r ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> [ r ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> [ r ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> [ r ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> [ r ] = '\\0' <S2SV_ModEnd> ; set_string (,0
1575,"<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer = ( dpbPicture_t * ) H264SwAllocMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. data = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if",0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart>! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL,0
1577,<extra_id_0><S2SV_null> <S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null>\n<S2SV_null,0
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %u."", Stream_GetRemainingLength ( s ) ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %u."", Stream_GetRemainingLength ( s ) ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %u."", Stream_GetRemainingLength ( s ) ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %u."", Stream_GetRemainingLength ( s ) ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %u."", Stream_GetRemainingLength ( s ) ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> final_p ; struct ipv6_txoptions * opt <S2SV_ModStart> np ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } else if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } else if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt =",0
1580,"<S2SV_ModStart>, found, <S2SV_ModEnd> err, overlays <S2SV_ModStart>, found, <S2SV_ModEnd> err, overlays <S2SV_ModStart>, found, <S2SV_ModEnd> err, overlays <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, dsize <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, dsize <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, dsize <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, dsize <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, dsize <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, dsize",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8",0
1582,"<S2SV_ModStart> ; if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> new_parent ) { old_cred = __task_cred ( child ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) ) ; rcu_read_unlock ( ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1584,"<S2SV_ModStart> pcmk_ok ) { memset ( & private -> command, 0, sizeof ( private -> command ) ) ; <S2SV_ModStart> pcmk_ok ) { memset ( & private -> callback, 0, sizeof ( private -> callback ) ) ; <S2SV_ModStart> pcmk_ok ) { memset ( & private -> command, 0, sizeof ( private -> command ) ) ; free ( private -> command ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command.",0
1585,"<S2SV_ModStart> = ubuf ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err < 0 ) goto out ; err = - EAGAIN ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( addr!= NULL ) { err2 = move_addr_to_user ( addr, addr_len, addr, addr_len ) ; if ( err2 < 0 ) err = err2",0
1586,"<S2SV_ModStart> int num00, tmp_err, <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = INT_MAX ; <S2SV_ModEnd>",0
1587,"<S2SV_ModStart> goto error ; if ( fstat ( h -> fd, & statbuf ) == - 1 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( fstat ( h -> fd, & statbuf ) == - 1 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( fstat ( h -> fd, & statbuf ) == - 1 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } if ( fstat ( h -> fd, & statbuf ) == - 1 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto",0
1588,<S2SV_ModStart> -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody_access : child -> resbody_access ) ; merged -> if_limit_action = ( child -> if_limit_action == NOT_SET? parent -> if_limit_action : child -> if_limit_action ) ;,0
1589,"<S2SV_ModStart> ) ) { memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; } else { memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, sizeof ( ctl",0
1590,"<S2SV_ModStart>, pixel_info_length ; if ( number_planes_filled > MagickMax ( number_planes, 1 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = MagickMax ( number_planes, number_planes_filled ) ; if ( number_planes_filled > MagickMax ( number_planes, 1 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = MagickMax ( number_planes, number_planes_filled ) ; if ( number_planes_filled > MagickMax ( number_planes, 1 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring (",0
1592,"<S2SV_ModStart> tok ) ) { if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event-level"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event-level"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event-level"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else if ( smatch ( option, ""event-level"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; }",0
1593,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; lua_assert (! iswhite ( thread ) ) ; thread -> twups = NULL ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } else { * p = thread -> twups ; thread -> twups = NULL ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } for ( uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } for ( uv = uv -> u. open. next ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } for ( uv = uv -> u. open. next ; uv!= NULL ; uv",0
