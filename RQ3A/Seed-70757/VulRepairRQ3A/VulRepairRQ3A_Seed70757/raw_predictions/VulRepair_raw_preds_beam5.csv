,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_DEBUG, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> 4 ) ; ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> } ND_TCHECK2 ( * tptr, len ) ; if ( type <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( t",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> yamdrv_ioctl_mcs ) ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( skb_headroom ( skb ) < frag_hdr_sz ) ) goto out ;,0
5,"<S2SV_ModStart> { int64_t time ; uint32_t <S2SV_ModEnd> offset ; if <S2SV_ModStart> ; offset = avio_rb32 ( f ) ; if ( offset > size ) { av_log ( mov -> fc, AV_LOG_ERROR, ""Bad <S2SV_blank> moof <S2SV_blank> offset <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> ; if ( tpgt < 1 || tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM ) ; if (! tpg ) return ERR_PTR ( - EINVAL",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; <S2SV_ModEnd> data = * <S2SV_ModStart> ( vcpu -> arch. apic -> vapic_addr ) ; kunmap_atomic ( vapic ) ; <S2SV_ModEnd> apic_set_tpr ( vcpu",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ; flush_fp_to_thread ( src ) ; flush_altivec_to_thread ( src ) ; flush_vsx_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { <S2SV_ModEnd> while ( c <S2SV_ModStart> item > 0 ) { -- item ; c = c -> next ; } <S2SV_ModEnd> return c ; <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"" <S2SV_ModEnd>, ( char",0
12,<S2SV_ModStart> ; if ( unlikely ( unfrag_len > skb_headlen ( skb ) - frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
13,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart> ( PERF_TYPE_SOFTWARE, <S2SV_ModEnd> event_id, nr <S2SV_ModStart>, & data <S2SV_ModEnd>, regs )",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) break ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ; int t0, t1, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart>, x2, x3 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t1, t2, t3 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x0, x1, x2, x3 ; tran_high_t <S2SV_ModEnd> t1, t2 <S2SV_ModStart> ; t0, t1, t2,",0
16,<S2SV_ModStart> env ) ; kfree ( env -> insn_aux_data ) ; env -> insn_aux_data = NULL ;,0
17,"<S2SV_ModStart> -> num_channels ; int64_t <S2SV_ModEnd> i ; wpc <S2SV_ModStart> -> num_channels ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""too <S2SV_blank> many <S2SV_blank> WAVEPACK_CHANNELS <S2SV_blank> in <S2SV_blank> config"" ) ; return FALSE ; } if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""too <S2SV_blank> many <S2SV_blank> WAVEPACK <S2SV_blank> channels <S2SV_blank> in <S2SV_blank> config"" ) ; return FALSE ; } wpc -> num_channels = num_chans ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""too <S2SV_blank> many <S2SV_blank> WAVEPACK_CHANNELS <S2SV_blank> in <S2SV_blank> config"" ) ; return FALSE ; } if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""too <S2SV_blank> many <S2SV_blank> WAVEPACK_CHANNELS <S2SV_blank> in <S2SV_blank> config"" ) ; return FALSE ; }",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> -> sense, <S2SV_ModEnd> sshdr, cgc",0
19,"<S2SV_ModStart> ( get4 ( ) == 0x48454150 || get4 ( ) == 0x48454280 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( get4 ( ) == 0x48454280 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int filter_step = MIN ( cpi -> twopass. section_intra_rating, max_filter_level ) ; int bias = ( best_err >> ( 15 - ( cpi -> twopass. section_intra_rating / 20 ) ) ) * filter_step ; if ( cm -> tx_mode == ONLY_4X",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 2, ""offset <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large."", offset ) ; luaL_checkstack ( L, 3, ""limit <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large."", limit ) ;",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_mv_component ( vpx_writer <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> sign, mvcomp <S2SV_ModEnd> -> sign ) <S2SV_ModStart> sign ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> rng -> seedsize,0
24,<S2SV_ModStart> sa_protocol!= PX_PROTO_PPTP || sockaddr_len < sizeof ( struct sockaddr_pppox ),0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 1024 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } else { <S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_FAILURE ) ; } break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } if (! ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; } if (! ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } jas_stream_close ( instream",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> console_verbose ( ) <S2SV_ModStart> esr ) ; <S2SV_ModEnd> die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"" <S2SV_ModStart> regs, 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> "" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> "" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ) ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; if ( intf1 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf1 -> desc. bNumInterfaces <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart>. bInterfaceNumber, intf2 -> desc. bNumInterfaces <S2SV_ModEnd> ) ; }",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_pc_to_char ( struct udf_sb * sb, const unsigned char * from, int fromlen, unsigned char * to ) { struct pathComponent * pc ; int elen = 0 ; unsigned char * p = NULL ; unsigned char * p2 = NULL ; unsigned char * p3 = NULL ; unsigned char * p4 = NULL ; unsigned char * p = NULL ; unsigned char * p = to ; while ( elen < fromlen ) { pc = ( struct pathComponent * ) ( from + elen ) ; if ( pc -> lengthComponentIdent > 0 ) { p = ( unsigned char * ) <S2SV_ModEnd> from + elen <S2SV_ModStart> case 3 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 3 ) ; p += 3 ; p += 2 ; p4 = udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p4 = udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p4 = ( unsigned char",0
31,"<S2SV_ModStart> ] ) ; if ( server. tcpkeepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; }",0
32,<S2SV_ModStart> unsigned long flags <S2SV_ModEnd> ; spin_lock_irqsave (,0
33,"<S2SV_ModStart> get_version_reply ) ; result = lego_usb_get_version ( dev ) ; if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> -> sh_name ] ; if ( sdb_num_get ( sdb, ""entries"", 0 ) < 0 || sdb_num_get ( sdb, ""offset"", 0 ) < 0 || sdb_num_get ( sdb, ""link"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( s",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key * construct_get_dest_keyring ( struct key * * _dest_keyring, struct request_key_auth * * _authkey_auth <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; * _dest_keyring = NULL ; return NULL ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> case KEY_REQKEY_DEFL_DEFAULT : dest_keyring = key_get ( cred -> default_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> default_key_auth -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> default_key_auth -> dest_keyring ) ; up_read ( & authkey -> sem ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> default_key_auth -> dest_keyring ) ; if ( dest_keyring ) dest_keyring",0
36,<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) { ret = GSS_S_FAILURE ; goto cleanup ; },0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart>!= AF_INET ) goto out_in_use ; ret = - EADDRNOTAVAIL ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; read_lock_bh ( & l2tp_ip_lock ) ; lock_sock ( sk ) ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; ret = - EINVAL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret == RTN_LOCAL && chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) inet -> inet_rcv_saddr = inet -> inet_saddr ; if ( addr -> l,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
39,"<S2SV_ModStart> ( dialog ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" ), RESPONSE_MARK_TRUSTED ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; }",0
40,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> ; memcpy ( hashed <S2SV_ModEnd>, password,",0
42,"<S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_device * adap, struct dvb_usb_device_properties * props ) { struct dvb_usb_device * dev = adap -> dev ; struct dvb_usb_device_state * state = d -> priv ; struct dvb_usb_device_info * info = & adap -> dev ; struct dvb_usb_device_info * info = & adap -> dev ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( transport",0
44,"<S2SV_ModStart> ""group_time"" ) ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_time_str ) group_time_str = mystrsep ( & value, "","" ) ; if (! group_",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if ( cc < 0 ) { TIFFError ( tif -> tif_clientdata, ""horAcc8: <S2SV_blank> cc <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFError ( tif -> tif_clientdata, ""horAcc8: <S2SV_blank> cc <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return 1 ; } <S2SV_null> <S2SV_null>",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAXSCANLINESIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> many <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; }",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> ; if ( pes_header_data_length > length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( pes_packet_length > length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( pes_header_data_length > length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( pes_packet_length > length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( pes_packet_length > length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVER",0
49,"<S2SV_ModStart> if (! e <S2SV_ModEnd> ) goto not_found <S2SV_ModStart> goto not_found ; r = parse_gid ( e + 1, & uid ) ; if ( r < 0 ) { * errnop = ENOMEM ; return NSS_STATUS_TRYAGAIN ; }",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { if (! buf ) return ; if (! buf -> page ) return ; get_page ( buf -> page ) ;",0
51,"<S2SV_ModStart> ep2 ) ; if ( nmap > sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u <S2SV_blank> nmap=%u <S2SV_blank> "", tcount, nmap, sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ) ) ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; if ( nmap > sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u <S2SV_blank> "", tcount, nmap, sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ) ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; if ( nmap > sizeof ( encr_t_map ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> reader -> bytes_available_fd <S2SV_ModEnd>, & read_fds",0
54,<S2SV_ModStart> wp -> config <S2SV_ModEnd> -> pm_max_requests ;,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; const FIRSTPASS_STATS * tmp_next_frame ; if ( still_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; reset_fpf_position (",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { struct jbd2_super_block * sb = handle -> h_transaction -> t_journal -> j_private ; <S2SV_ModStart> handle ) ; if ( IS_ERR ( handle -> h_transaction ) ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; sb = handle -> h_transaction -> t_journal -> j_private ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_private ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal ->,0
57,"<S2SV_ModStart> ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> name_rmt ) ; memset ( name_rmt, 0, sizeof ( * name_rmt ) ) ;",0
59,"<S2SV_ModStart> alg ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) request_module ( ""%s-never"", name ) ; type &= ~ ( <S2SV_ModEnd> CRYPTO_ALG_NEED_FALLBACK | CRYPTO_ALG_NEED_FALLBACK <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ; if ( type & ( <S2SV_ModEnd> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModStart> crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : ERR_PTR ( - EPERM ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } else { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } else { ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; } <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND",0
61,"<S2SV_ModStart> { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( body_size + 2 > job_data_size_limit ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ]!= '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_JOB_TOO_BIG ) ; }",0
62,<S2SV_ModStart> flags ) ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; else dgnc_Board [ brd ] -> state = BOARD_UNKNOWN,0
63,"<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 || ( opt_len > 20 && ( flags & ( TH_SYN | TH_ACK ) ) == TH_SYN ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return 0 ; } if ( mpc -> flags & MP_CAPABLE_C ) ND_PRINT ( ( ndo, "" <S2SV_blank> csum"" ) ) ; if ( opt_len == 12 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS",0
64,"<S2SV_ModStart> ; int procfd = payload -> procfd ; lxc_attach_options_t * options = payload -> options ; struct lxc_proc_context_info * init_ctx <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( ( options -> attach_flags & LXC_ATTACH_SET_PERSONALITY ) { ret = personality ( init_ctx -> personality ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ip",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; memset ( pkt -> ref, 0, sizeof ( * pkt -> ref ) ) ; <S2SV_ModStart> = '\\0' ; memset ( pkt -> msg, 0, sizeof ( * pkt -> msg ) ) ; <S2SV_ModStart> = '\\0' ; memset ( pkt -> ref, 0, sizeof ( * pkt -> ref ) ) ; <S2SV_ModStart> = '\\0' ; memset ( pkt -> msg, 0, sizeof ( * pkt -> msg ) ) ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg [ len ] = '\\0' ; * out = ( git_pkt * ) pkt ; return 0 ;",0
66,<S2SV_ModStart> -> biSize >= 12U <S2SV_ModEnd> ) { header <S2SV_ModStart> -> biSize >= 52U <S2SV_ModEnd> ) { header <S2SV_ModStart> -> biSize >= 56U <S2SV_ModEnd> ) { header <S2SV_ModStart> -> biSize >= 108U <S2SV_ModEnd> ) { header <S2SV_ModStart> -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biPlanes = ( OPJ_UINT16 ) getc ( IN ) ; header -> biPlanes |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount = ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 24 ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ) ;,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk, cmd, arg ) ; if ( ret ) return ret ;",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq_hdr * ureq <S2SV_ModEnd> ; int req_len <S2SV_ModStart> ) ) return - EFAULT ; ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = qinfo. udata_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL )",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> ) ; if ( num < 0 ) { av_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks\\n"" ) ; return AVERROR_PATCHWELCOME ; }",0
76,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mxf_tc ) { <S2SV_ModStart> mxf_tc ) ; if ( <S2SV_ModEnd> mxf_tc ) { <S2SV_ModStart> mxf_tc ) ; if ( <S2SV_ModEnd> mxf_tc ) { <S2SV_ModStart> mxf_tc ) ; if ( <S2SV_ModEnd> mxf_tc ) { <S2SV_ModStart> mxf_tc ) ; if ( <S2SV_ModEnd> mxf_tc ) { <S2SV_ModStart> mxf_tc ) ; if ( <S2SV_ModEnd> mxf_tc ) { <S2SV_ModStart> mxf_tc ) ; },0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } if ( ret!= sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; }",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> += jnx_ext_len ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += jnx_ext_len ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo ->",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,<S2SV_ModStart> * up ; size_t len ; <S2SV_ModStart> rta ) ; len = nla_len ( rta ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } len = nla_len ( rta ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - ENOMEM ; },0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ),0
84,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,"<S2SV_ModStart> (! ( buf = jas_calloc2 <S2SV_ModEnd> ( bufsize, <S2SV_ModStart> ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_calloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_calloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) )",0
86,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } },0
87,"<S2SV_ModStart> size ) { netdev_dbg ( vif -> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } if ( gso -> u. gso. type == XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> char * last <S2SV_ModStart> char * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else <S2SV_ModEnd> { char * <S2SV_ModStart> name ) ; <S2SV_ModEnd> } <S2SV_null>",0
89,<S2SV_ModStart> ) ; } tty_q. flags |= TTY_DO_WRITE_WAKEUP | TTY_DO_THROTTLE ;,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,<S2SV_ModStart> type_flags ) { struct packet_sock * po = pkt_sk ( sk ) ; <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> if ( type <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( &,0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp,",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time",0
95,"<S2SV_ModStart> ; if ( num_fields < 0 || num_fields >= imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> num_fields <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> the <S2SV_blank> number <S2SV_blank> of <S2SV_blank> fields\\n"" ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60SetBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R",0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ) { ret <S2SV_ModStart> flag = EXT4_IO_UNWRITTEN ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN <S2SV_ModEnd> ) ; goto <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; out1 : if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) ==",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } ND_TCHECK_16BITS ( p + 6 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> src <S2SV_blank> %s, <S2SV_blank> dst <S2SV_blank> %s"", ipaddr_string ( ndo, p + 6 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> src <S2SV_blank> %s, <S2SV_blank> dst <S2SV_blank> %s"", ipaddr_string ( ndo, p + 6 ) ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank>",0
101,"<S2SV_ModStart>! caller_is_in_ancestor ( <S2SV_ModEnd> fc -> pid <S2SV_ModStart> fc -> pid, <S2SV_ModEnd> cgroup, NULL <S2SV_ModStart>! caller_is_in_ancestor ( <S2SV_ModEnd> fc -> pid <S2SV_ModStart> -> pid, <S2SV_ModEnd> cgroup, NULL",0
102,"<S2SV_ModStart> int low_var_thresh, vpx_memset_t <S2SV_ModEnd> * limits, <S2SV_ModStart> ; int mb_rows <S2SV_ModEnd> = source -> <S2SV_ModStart> ; int mb_cols <S2SV_ModEnd> = source -> <S2SV_ModStart> ; int mb_rows = source -> mb_rows ; int mb_cols = source -> mb_cols ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> u_stride, source -> uv_stride, limits, 8 ) ; vpx_post_proc_down_and_across_mb",0
103,"<S2SV_ModStart> ptr ) { if (! access_ok ( VERIFY_WRITE, param, sizeof ( * ptr ) ) ) return - EFAULT ;",0
104,"<S2SV_ModStart> skip : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } } else { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> suid = new -> fsuid = new -> suid ; new -> sgid = new -> fsgid ; new -> securebits &= ~ issecure_mask ( new -> securebits ) ; new -> securebits |= issecure_mask ( new -> securebits ) ; new -> securebits |= issecure_mask ( new -> securebits ) ; } new -> securebits |= issecure_mask ( new -> securebits ) ;",0
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; struct mb2_cache_entry * ce ; struct mb2_cache * mb2_cache = ext4_mb_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! mb2_cache ) { <S2SV_ModEnd> error = mb_cache_entry_alloc <S2SV_ModStart> error = mb2_cache_entry_insert ( mb2_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer ( <S2SV_ModEnd> s, code <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z,",0
108,<S2SV_ModStart> = 0 ; struct ip_options_rcu * inet_opt <S2SV_ModStart> = 0 ; inet_opt = rcu_dereference ( net -> ipv4. opt ) ; if ( inet_opt && inet_opt -> opt. flags & IPSKB_DO_REUSE ) inet_opt -> opt. flags &= ~ IPSKB_DO_REUSE ; if ( inet_opt && inet_opt -> opt. flags & IPSKB_MULTICAST ) inet_opt -> opt. flags &= ~ IPSKB_MULTICAST ; if ( inet_opt && inet_opt -> opt. flags & IPSKB_MULTICAST_LOOPBACK ) inet_opt -> opt. opt. flags &= ~ IPSKB_DO_REUSE ; if ( inet_opt && inet_opt -> opt. flags & IPSKB_DO_REUSE ) inet_opt -> opt. flags &= ~ IPSKB_MULTICAST_MASK ; if ( inet_opt -> opt. flags & IPSKB_MULTICAST_IP ) inet_opt -> opt. flags &= ~ IPSKB_MULTICAST_MASK ; if ( inet_opt -> opt. flags &,0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
110,"<S2SV_ModStart> dl = kmalloc ( <S2SV_ModEnd> size, GFP_KERNEL",0
111,"<S2SV_ModStart> trunc : ND_PRINT ( <S2SV_ModEnd> "" <S2SV_blank> [|truncated]"" ) )",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart>, indent ) { const u_char * msg ; u_int pdu_len, hexdump ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_END_OF_DATA_PDU : msg = ( const u_char * ) ( pdu_header + 1 ) ; ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_16BITS ( msg ) ) ; break ; case RPKI_RTR_CACHE_RESET_PDU : case RPKI_RTR_CACHE_RESPONSE_PDU : msg = ( const u_char * ) (",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } if (! rose_parse_facilities ( skb -> data + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> } else { if ( ( opt_flags & P_CHARTAB )!= 0 ) { if ( ( opt_flags & P_NOCHARTAB )!= 0 ) { if ( ( opt_flags & P_NOCHARTAB )!= 0 ) { if ( ( opt_flags & P_NOCHARTAB )!= 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ) { if ( ( opt_flags & P_NOCHARTAB ) == 0 ),0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ; struct o2nm_cluster * <S2SV_ModEnd> cluster = to_o2nm_cluster_from_node <S2SV_ModStart> ; } write_lock ( & cluster -> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - E",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : isoclns_print <S2SV_ModEnd> ( ndo,",0
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } else { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } }",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context, TPM_ALG_HASH hashAlg, TPM2B_DIGEST <S2SV_ModEnd> * resultKey, <S2SV_ModStart> TPM2B_MAX_BUFFER * resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT16 bytes = bits / 8 ; resultKey -> t. size = 0 ; resultKey -> t. size = 0 ; tpm2bLabel. t. size = 0 ; tpm2b_i_2. t. size = 0 ; tpm2b_i_2. t. size = 4 ; tpm2bBits. t. size = 4 ; tpm2b_i_2. t. size = 4 ; bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < bytes ; i ++ ) { i_Swizzled = string_bytes_",0
121,"<S2SV_ModStart> size_t size ; if ( width > JAS_IMG_MAX_WIDTH || height > JAS_IMG_MAX_HEIGHT ) { goto error ; } if ( jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, vstep ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ) { goto error ; } cmpt -> stream_ = jas_stream_memopen2 ( 0, size ) ; if (! jas_stream_memopen2 ( 0, size",0
122,<S2SV_ModStart> s ) { if ( s < 0 ) { abort ( ) ; },0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EBUSY ; goto bail ; } if (,0
124,"<S2SV_ModStart> ) goto END_OF_READING ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) get_net ( <S2SV_ModEnd> peer ) ;,0
126,<S2SV_ModStart> ; if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length < 0 || content_length > content_buf_len ) { break ; } <S2SV_ModStart> ; if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length > content_buf_len ) { break ; } if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length < 0 || content_length > content_buf_len ) { break ; } if ( content_length > content_buf_len ) { break ; } if ( content_length < content_buf_len ) { break ; } if ( content_length < content_buf_len ) { break ; } if ( content_length < content_buf_,0
127,"<S2SV_ModStart> ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len",0
128,<S2SV_ModStart> datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ; if ( unlikely ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ;,0
129,"<S2SV_ModStart> = 0 ; if ( sp -> initmsg. sinit_num_ostreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_outstreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_outstreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > 0 && sp -> initmsg. sinit_max_instreams > sp -> initmsg. sinit_max_instreams ) { pr_debug ( ""%s: <S2SV_blank> sk:%",0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; },0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; memset ( mpu -> dev -> MIDQ, 0, sizeof ( * mpu -> dev -> MIDQ ) ) ;",0
132,<S2SV_ModStart> rule ) ; if ( result < 0 ) return result ; <S2SV_ModStart> rule ) ; if ( result < 0 ) return result ;,0
133,<S2SV_ModStart> file ) ; if ( file -> f_dentry -> d_inode ) fput ( file -> f_dentry -> d_inode ) ; else fput ( file -> f_dentry -> d_inode ) ;,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> setInterval(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> function <S2SV_blank> setTimer(e) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'setInterval(\'checkSession()\', <S2SV_blank> %s);\\n""",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; struct kvec * iov = req -> rq_rcv_buf. head ; size_t attrlen, bitmap [ 3 ] ; size_t recvd ; size_t hdrlen ; u32 recvd ; if ( unlikely ( xdr -> len < hdrlen ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart> acl_len ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> acl_len = attrlen <S2SV_ModEnd> ; } }",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < 0 || unfrag_ip6hlen > MAX_UFO_FRAGMENT_HLEN ) ) goto out ;,0
138,<S2SV_ModStart> ( tmpName [ i <S2SV_ModEnd> ]!= 0,0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ;",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } snprintf ( szFileName, sizeof ( szFileName ) - 5, ""%s/%s"", szPath, pszFileName ) ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( szFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ; } } group = ssplit <S2SV_ModEnd> ( tok, <S2SV_ModStart> ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""too <S2SV_blank> many <S2SV_blank> elements <S2SV_blank> in <S2SV_blank> section <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } if (",0
144,<S2SV_ModStart> ; if ( inet -> opt && inet -> opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
146,<S2SV_ModStart> eigrp_tlv_at_ext ; } ND_TCHECK ( * eigrp_tlv_sw_version ) ; ND_TCHECK ( * eigrp_tlv_ip_ext ) ; ND_TCHECK ( * eigrp_tlv_at_int ) ; ND_TCHECK ( * eigrp_tlv_at_ext ) ;,0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; if ( indexes >= SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ) { ERROR ( ""parse_exports_table: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table <S2SV_blank> blocks\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } * table_start = export_index_table [ 0 ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> * table_start =",0
149,"<S2SV_ModStart> } ptr = memchr <S2SV_ModEnd> ( ptr + <S2SV_ModStart> + 1, '/' ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT,",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
152,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;,0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0 ; uint16 planar = 0 ; uint16 bps = 0, spp = 0 ; uint16 orientation = 0 ; uint16 input_photometric = 0 ; uint16 subsampling_horiz = 0 ; uint16 subsampling_vert = 0 ; uint32 width = 0 ; uint32 length = 0 ; if (! TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, & width ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> width <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGELENGTH, & length ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> length <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanlinesize <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanlinesize <S2SV_blank> tag"" )",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use",0
155,"<S2SV_ModStart>, resp ) ; if ( resp == NULL ) fatal ( ""%s: <S2SV_blank> sshbuf_put_string: <S2SV_blank> %s"", __func__, resp ) ;",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> goto errout ; } <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> gr_ctx. value = kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ; if ( gr -> gr_ctx. value == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ( FALSE ) ; }",0
159,<S2SV_ModStart> = 0 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT_I ( inode ) ; struct ext4_inode_info * ei_inode_info = EXT4_I ( inode ) ; if ( ei_inode_info -> i_flags & EXT4_INDEX_FL ) ei_inode_info -> i_flags |= EXT4_INDEX ( ei_inode_info ( ei_inode ) -> i_flags & ( EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL ) ; if ( ei_inode_info -> i_flags & EXT4_INDEX_FL ( ei_inode ) -> i_flags & ( EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4_INDEX_FL | EXT4,0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx <S2SV_ModEnd> ) ) { <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ( void * ) <S2SV_ModEnd> ( - 1",0
161,<S2SV_ModStart> ; int ret ; if (! capable ( CAP_SYS_ADMIN ) ||! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
162,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> nreslevels >= JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> log2_cblk_width <S2SV_ModStart> c -> log2_cblk_width ) ; c -> log2_cblk_height ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s ->",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; if (! s_alInputDevice ) { s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; } <S2SV_ModStart> CVAR_LATCH ) ; if (! s_alDevice ) { s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; }",0
165,<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ts_status ) ; if ( skb_len < TPACKET_ALIGN ( sizeof ( * h. h2 ) ) || skb_len > TPACKET_ALIGN ( sizeof ( * h. h3 ) ) ) goto drop_n_restore ; if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUM_VALID ; if ( skb_len < TPACKET_ALIGN ( sizeof ( * h. h3 ) ) ) goto drop_n_restore ; if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM,0
166,"<S2SV_ModStart> transports ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; sctp_ssnmap_clear ( trans -> ssnmap ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; } else { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } }",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ;,0
168,"<S2SV_ModStart> int on_exec, <S2SV_ModEnd> char * lsm_label <S2SV_ModStart> ( procfd, <S2SV_ModEnd> on_exec, char <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/exec"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/exec"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/exec"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/exec"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"", O_RDWR <S2SV_ModStart> ( procfd, <S2SV_ModEnd> ""self/attr/current"",",0
169,<S2SV_ModStart> -> tp_on ) { if ( index >= ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) * ( OPJ_UINT32 ),0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } if ( totallen >= ITEMSIZE ) { g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; } else { g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; } else { g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ; g_error ( ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> lquery"" ) ;",0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry * * pce ) { struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache_entry * ce ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; if (! mb2_cache ) return NULL ; <S2SV_ModStart> hash ) ; mb2_cache = ext4_get_mb_cache ( inode -> i_sb ) ; if ( IS_ERR ( mb2_cache_entry_find_first ( mb2_cache, inode -> i_sb -> s_bdev, hash ) ) { struct buffer_head * bh ; struct mb2_cache_entry * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long",0
174,"<S2SV_ModStart> { gint64 offset ; int pkt_len ; gchar line [ COSINE_LINE_LENGTH + 1 ] ; if (! wth -> frame_buffer ) return FALSE ; <S2SV_ModStart> = offset ; <S2SV_ModEnd> pkt_len = parse_cosine_rec_hdr <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; <S2SV_ModStart> return parse_cosine_hex_dump ( wth -> fh, & wth -> phdr, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, wth -> frame_buffer <S2SV_ModEnd>, err,",0
175,"<S2SV_ModStart> = line_end ; if ( line_len == 0 ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) goto done ; }",0
176,"<S2SV_ModStart> { if ( SSL_IS_DTLS ( s ) && <S2SV_ModStart> left > 0 && n > left ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( <S2SV_ModStart> left > 0 && n > left ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; }",0
177,<S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ;,0
178,"<S2SV_ModStart> if ( copy_from_user ( & hdr, ( void * ) arg, sizeof ( hdr ) ) ) { ret = - EFAULT ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ;",0
179,"<S2SV_ModStart> int hstartcol ; register jpc_fix_t * buf2 ; jpc_fix_t * buf3 ; jpc_fix_t * buf4 ; jpc_fix_t * buf5 ; jpc_fix_t * buf6 ; jpc_fix_t * buf7 ; jpc_fix_t * buf6 ; jpc_fix_t * buf7 ; jpc_fix_t * buf7 ; jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf2 ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( )",0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> ) ) ; if ( number_planes_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_colormaps_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_colormaps_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_colormaps_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMaxImagePlanes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > MagickMaxImagePlanes )",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sb -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; },0
183,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface",0
184,"<S2SV_ModStart> ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file\\n"" ) ; fclose ( fp ) ;",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; } else { return NULL ; } },0
186,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nfs_set_open_stateid ( struct <S2SV_ModStart> stateid, int <S2SV_ModEnd> open_flags ) { <S2SV_ModStart>, open_flags ) ; return 0 ; } <S2SV_null>",0
187,"<S2SV_ModStart> AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ast -> codecpar -> sample_rate ) ;",0
188,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""too <S2SV_blank> many <S2SV_blank> elements <S2SV_blank> in <S2SV_blank> section <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } if (",0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> # ifdef AUTOKEY <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> # ifdef DEBUG_TIMING <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == TEMP_FAILURE_RETRY ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == TEMP_FAILURE ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( fd ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
191,<S2SV_ModStart> prev ) ; <S2SV_ModEnd> touch_mnt_namespace ( n,0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> fsindex = fsindex ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; switch_fpu_finish ( prev_p, fpu ) ; task_thread_info ( prev_p ) -> saved_preempt_count = this_cpu_read ( __preempt_count ) ; this_cpu_write ( __preempt_count",0
193,"<S2SV_ModStart> dd ) ; g_hash_table_remove ( g_loaded_texts, name ) ; <S2SV_ModStart> ( ) ; g_hash_table_remove ( g_loaded_texts, name ) ; g_hash_table_remove ( g_loaded_texts, name ) ;",0
194,<S2SV_ModStart> -> i1_output_flag_present_flag = 1 <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> -> i1_output_flag_present_flag = 1 <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> -> i1_output_flag_present_flag = 1 <S2SV_ModEnd> ; BITS_PARSE (,0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> sfsname ) { size_t <S2SV_ModEnd> temp [ NFSX_V3FHMAX <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; if ( strlen ( sfsname ) > NFSX_V3FHMAX ) { strncpy ( temp, sfsname, NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; }",0
197,"<S2SV_ModStart> int transhdrlen, struct ipv6_txoptions * opt <S2SV_ModStart> = SKB_GSO_UDP ; opt ->",0
198,"<S2SV_ModStart> res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail <S2SV_ModEnd> ; mod_timer ( <S2SV_ModStart> goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_C ) ; if ( res",0
199,"<S2SV_ModStart> ] ) ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> count ) ) return 0 ; if (! xdr_decode_hyper ( p, & args -> len ) ) return 0 ; if (! xdr_decode_hyper ( p, & args -> page_len ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( dlen ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> { switch ( <S2SV_ModEnd> ctxt -> op_bytes <S2SV_ModStart> ctxt -> op_bytes ) { case 1 : ctxt -> _eip = ( u8 ) dst ; break ; case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = <S2SV_ModEnd> tvb_captured_length_remaining ( tvb <S2SV_ModStart> offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = g_strdup ( """" ) ; return offset + ( len + 1 ) * 2 ; }",0
205,"<S2SV_ModStart> == READ ) { struct ocfs2_inode_info * ip = OCFS2_I ( inode ) ; struct ocfs2_dinode * ip = OCFS2_I ( inode ) ; struct ocfs2_dinode * dinode = OCFS2_I ( inode ) ; struct ocfs2_dinode * dinode = OCFS2_I ( inode ) ; struct ocfs2_inode * ocfs2_inode = OCFS2_I ( inode ) ; if (! ocfs2_supports_append_dio ( osb ) ) return 0 ; return __blockdev_direct_IO ( iocb, inode, ip -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else get_block = ocfs2_dio_get_block ; if ( ocfs2_supports_append_dio ( osb ) ) get_block = ocfs2_get_block ; else get_block = ocfs2_dio_get_block ;",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> fscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_mmcr0 ( cpuhw,0
209,<S2SV_ModStart> = len ; if ( * nl == 0 ) { * nl = 1 ; break ; },0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> * str ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' || * ( expr_start - 1 ) == ':' ) ; assert ( * ( expr_end - expr_start ) == '!' || * expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_GET_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( kind, data, i ) ) { all_whitespace = 0 ; break ; } } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
213,"<S2SV_ModStart> == 0 ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> len ) ; if ( ( plen > MAX_PLEN ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if ( ( plen > MAX_PLEN ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ;",0
215,"<S2SV_ModStart> -> namelen, xfs_attr3_leaf_name_len ( leaf, i ) ) ; if ( retval ) { xfs_trans_log_buf ( context -> trans, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_ERROR, XFS_ERROR, XFS_RANDOM_ERROR, XFS_RANDOM_ERROR, XFS_ERROR, XFS_ERROR,",0
216,<S2SV_ModStart> - EINVAL ; if ( vlen < sizeof ( struct mmsghdr ) ) return - EINVAL ; if ( vlen > sizeof ( struct mmsghdr ) ) return - EMSGSIZE ; if (,0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ; int ret ; netif_stop_queue ( ndev ) ; <S2SV_ModStart> ret = hns_nic_net_xmit_hw <S2SV_ModEnd> ( ndev, <S2SV_ModStart> tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart> NO_HASHEXPAND, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart> NO_HASHEXPAND, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND, <S2SV_ModStart>, MAXCONNS_FAST, <S2SV_ModEnd> NO_HASHEXPAND,",0
221,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * user_config <S2SV_ModStart> ; } user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx <S2SV_ModStart> event ) { <S2SV_ModEnd> struct hw_perf_event fake_event <S2SV_ModStart> return 1 ; if ( event -> pmu == leader_pmu || event -> state < PERF_EVENT_STATE_OFF || event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( armpmu",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct <S2SV_ModEnd> uid_gid_map * new_map <S2SV_ModStart> return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( ns -> parent, CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_UID ) ) return true ; if ( ns_capable ( current, CAP_SYS_GID ) ) return true ; if ( ns_capable ( current_cred ( ), CAP_SYS_GID ) ) return true ; if ( ns_capable",0
226,"<S2SV_ModStart> ++ ) { if ( j == a -> num_values - 1 ) continue ; <S2SV_ModStart> j ] = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char,",0
227,"<S2SV_ModStart> hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> ; int ret <S2SV_ModEnd> ; hx = <S2SV_ModStart> ; if ( ret < 0 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx ) ; return ret ; } ret = <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart> 0 ) { <S2SV_ModEnd> reset = 1 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ret <S2SV_ModStart> || usb_cypress_writemem ( udev <S2SV_ModStart> - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret < 0 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx ) ; return ret ; } if ( ret < 0 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx",0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND",0
229,<S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strncmp ( handle <S2SV_ModStart> ) == 0 && <S2SV_ModEnd> strncmp ( handle,0
230,<S2SV_ModStart> * bo ; uint32_t num_shaders = 0 ; uint32_t num_shaders = 0 ; if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || exec_size < exec_size || args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || temp_size < exec_size || num_shaders >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || num_shaders >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || num_shaders >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || num_shaders >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || num_shaders >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || num_shaders >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || num_shaders >= ( UINT_MAX / sizeof,0
231,<S2SV_ModStart> # endif # ifdef HAVE_LIBLZMA_H if ( zip -> zipx_lzma_valid ) { lzma_end ( & zip -> zipx_lzma_stream ) ; } # endif # ifdef HAVE_BZLIB_H if ( zip -> bzstream_valid ) { BZ2_bzDecompressEnd ( & zip -> bzstream ) ; } # endif,0
232,<S2SV_ModStart> -> vm_file ) ; clear_page_dirty_for_io ( page ) ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> ( * arg ) { case '\\t' : case '\\r' : case '\\f' : case '\\t' : case '\\t' : case '\\r' : case '\\t' : case '\\t' : case '\\n' : break ; default : * b ++ = * arg ; break ; } arg ++ ; } while ( * arg ) { * b ++ = * arg ; * b ++ = 0 ; * b ++ = 0 ; * b ++ = 0 ; * b ++ = 0 ; * b ++ = 0 ; * b ++ = 0 ; * b ++ = 0 ; * b ++ = 0 ; arg ++ ; } if ( * arg ) { * b ++ = * arg ; * b ++ = 0 ; * b = 0 ; return a ; },0
235,"<S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) ) ;",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; return FALSE ; } <S2SV_ModEnd> client = gsm_xsmp_client_new",0
237,<S2SV_ModStart> = CHECKSUM_NONE ; skb -> ip_summed = CHECKSUM_UNNECESSARY ;,0
238,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/nasty"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; test_checkout_fails (",0
239,"<S2SV_ModStart> ; break ; case SO_LINGERCTIME : v. ling. l_onoff =!! sock_flag ( sk, SOCK_LINGERCTIME ) ; v. ling. l_linger =!! sock_flag ( sk, SOCK_LINGERCTIME ) ; break ; case SO_LINGERCTIME : v. ling. l_linger =!! sock_flag ( sk, SOCK_LINGERCTIME ) ; break ; case SO_LINGERCTIMEOUT : v. ling. l_linger =!! sock_flag ( sk, SOCK_LINGERCTIMEOUT ) ; break ; case SO_SNDBUF : v. val = sock_flag ( sk, SOCK_SNDBUF ) ; break ; case SO_RCVBUF : v. val = sock_flag ( sk, SOCK_RCVBUF ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO",0
240,<S2SV_ModStart> ) { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> ) ; } else { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg_namelen ) ; },0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart>, & bufsize, <S2SV_ModEnd> XN_FLAG_SEP_COMMA_PLUS ) ; <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> ret = crypto_retrieve_X509_sans <S2SV_ModStart>, & bufsize, <S2SV_ModEnd> & md -> <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> ret = crypto_retrieve_X509_sans <S2SV_ModStart>, & bufsize, <S2SV_ModEnd> & md -> <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> ret = crypto_retrieve_X509_sans <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> ret = crypto_retrieve_X509_sans <S2SV_ModStart>, & bufsize, <S2SV_ModEnd> XN_FLAG_SEP_COMMA_PLUS ) ;",0
244,"<S2SV_ModStart> old_memslots ) ; kvm_vm_unmap_memory_slots ( kvm, old_memslots ) ;",0
245,<S2SV_ModStart> = SIGCHLD ; <S2SV_ModEnd> if (! <S2SV_ModStart> = SIGCHLD ; <S2SV_ModEnd> if (!,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ;,0
247,<S2SV_ModStart> * ni ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof (,0
248,<S2SV_ModStart> < 0 ) { kfree ( new -> jit_keyring ) ; return ret ; } if (,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; strncpy <S2SV_ModEnd> ( iname, <S2SV_ModStart> = iname ; strncpy <S2SV_ModEnd> ( bprm -> <S2SV_ModStart> = iname ; strncpy <S2SV_ModEnd> ( bprm ->",0
251,<S2SV_ModStart> = 0.0 ; int <S2SV_ModEnd> iSrc ; res <S2SV_ModStart> iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight,0
252,<S2SV_ModStart> user ) { if ( user == NULL ) return - EINVAL ; <S2SV_ModStart> user ) ; <S2SV_ModEnd> cleanup_srcu_struct ( &,0
253,"<S2SV_ModStart>!= 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; }",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> limit = 0,0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { mobj_free ( mobj ) ; return NULL ; } <S2SV_ModStart> mobj ) ; memset <S2SV_ModEnd> ( mobj_get_va (,0
256,<S2SV_ModStart> += incr ; if (! timer -> it_overrun ) { timer -> it_overrun = 0 ; return ; },0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( NCH ( n ) == ( 1 + is_async ) ) { if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 )",0
258,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
259,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT )",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; if ( r -> iov. iov_len < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; return ; } n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len <S2SV_ModEnd> ) ; }",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } if (",0
263,"<S2SV_ModStart> maxn ) { if ( n < 0 || n >= SWF_ACTION_COUNT ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } if ( actions [ n ]. SWF_ACTIONRECORD. ActionCode >= SWF_ACTION_COUNT ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n",0
264,<S2SV_ModStart> ) ) ; if ( l < 0 || l > ( ssize_t ) l ) { AZ ( VSB_finish ( synth_body ) ) ; AZ ( VSB_finish ( synth_body ) ) ; AZ ( VSB_finish ( synth_body ) ) ; },0
265,<S2SV_ModStart> goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ;,0
266,<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } n = <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( atusb, usb_rcvctrlpipe ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( <S2SV_ModEnd> usb_dev, 0 <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; return ret ;",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> pTable -> nModuleArg <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { sqlite3DbFree ( db, zArg ) ; }",0
270,<S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; } if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ; if ( <S2SV_ModStart>, dwFlags ) ) goto Error ;",0
272,"<S2SV_ModStart> { for ( i = 0 ; i < <S2SV_ModEnd> sec -> size <S2SV_ModStart> size ; i += 4 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut32 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } else { for ( i = 0 ; i < <S2SV_ModEnd> sec -> size <S2SV_ModStart> size ; i += 8 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { RBinAddr * ba = newEntry ( sec -> paddr + i, 0, type, bits ) ; r_list_append ( ret, ba ) ; }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) )",0
274,"<S2SV_ModStart>, accu_r, accu_i <S2SV_ModEnd>, anal_buf, <S2SV_ModStart>, accu_r, accu_i <S2SV_ModEnd>, anal_buf, <S2SV_ModStart>, accu_r, accu_i <S2SV_ModEnd>, anal_buf, <S2SV_ModStart>, accu_r, accu_i <S2SV_ModEnd>, anal_buf, <S2SV_ModStart>, accu_r, accu_i <S2SV_ModEnd>, anal_buf,",0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; },0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqd = bfqq <S2SV_ModEnd> -> bfqd ; <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ;,0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ; if ( unlikely ( tx_credit_exceeded ( vif, txreq. size ) ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; }",0
279,<S2SV_ModStart> cb -> args [ 0 <S2SV_ModEnd> ] ; struct <S2SV_ModStart> walk = ( struct xfrm_policy_walk <S2SV_ModEnd> * ) &,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> ; struct pending_tx_info <S2SV_ModEnd> * pending_tx_info = <S2SV_ModStart> -> status ; if ( unlikely ( netbk -> tx_state!= XEN_NETIF_TX_IN_PROGRESS ) ) { netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; } else if ( unlikely ( netbk -> tx_state!= XEN_NETIF_TX_IN_PROGRESS ) ) { netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; } else { netbk -> tx_state = XEN_NETIF_TX_IN_PROGRESS ; } } for ( i = 0 ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( unlikely ( newerr ) ) { netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> columns <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> columns <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; if ( status == MagickFalse ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, <S2SV_ModEnd> image -> rows",0
284,"<S2SV_ModStart> ; if ( len < sizeof ( struct hv_kvp_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } if ( len < sizeof ( struct cn_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } if ( len < sizeof ( struct cn_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } if ( len < sizeof ( struct cn_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; close ( fd ) ; exit ( EXIT_FAILURE ) ; } if ( len < sizeof ( struct cn_msg ) ) { syslog ( LOG_ERR, ""len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; exit",0
285,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
286,"<S2SV_ModStart> ; if ( client -> ipc == NULL && client -> session == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; crm_",0
287,"<S2SV_ModStart> + x > oldDataLength || diffPtr + x <S2SV_ModStart> + x > oldDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > oldDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > oldDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ; if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( udf_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) e,0
289,"<S2SV_ModStart> = IP_VS_STATE_BACKUP ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ;",0
290,"<S2SV_ModStart> ; err = ip6_xmit <S2SV_ModEnd> ( sk,",0
291,<S2SV_ModStart> ssize_t result ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
292,"<S2SV_ModStart> * fpath = NULL, * <S2SV_ModEnd> cgdir = NULL <S2SV_ModStart> O_RDWR ) ) { if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) {",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; disk = NULL ; continue ; } <S2SV_ModEnd> INIT_LIST_HEAD ( &,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( number_pixels < 1 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 1 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 2 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 2 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 1 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 1 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 2 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 2 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 1 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } if ( number_pixels < 1 ) { MagickError ( ""Image <S2SV_blank> too <S2SV_blank>",0
296,"<S2SV_ModStart> ; int64_t index_pts = FFMAX ( av_rescale ( itime, i, 10000 ), 0 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; }",0
297,<S2SV_ModStart> srp ) ; kfree ( srp ) ;,0
298,"<S2SV_ModStart> endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root ( ""security_context"", & security_context_handler ) ; install_keyword_root (",0
299,"<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; if ( priv_enc_mr_cfg!= NULL ) { priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; } else { priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; } return encoder_common_init ( ctx, priv_enc_mr_cfg ) ;",0
300,<S2SV_ModStart> 0 ) { char * tmpptr ; if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '\\0' ; kfree ( tmpbuf ) ; return 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; } if ( strlen ( key ) + 1 >= length ) { kfree ( tmpbuf ) ; return - 1 ; },0
301,"<S2SV_ModStart>, USEC_INFINITY, <S2SV_ModEnd> UID_INVALID, GID_INVALID",0
302,"<S2SV_ModStart> (! ( box = jas_malloc ( <S2SV_ModEnd> sizeof ( jp2_box_t <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> -> name, <S2SV_ModEnd> \'""\', boxinfo <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo ->",0
303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ResizeMemoList ( UnpicklerObject <S2SV_ModStart>, Py_ssize_t new_size ) { Py_ssize_t <S2SV_ModEnd> i ; assert",0
304,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( unlikely ( q -> flags & IFF_VNET_HDR ) ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_ZEROCOPY ) ) { copylen = vnet_hdr. hdr_len ; if (! copylen ) copylen = GOODCOPY_LEN ; } else { copylen = vnet_hdr. hdr_len ; } <S2SV_ModStart> zerocopy ) { if ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) vnet_hdr. flags &= ~ VIRTIO_NET_HDR_F_NEEDS_CSUM ; if ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) vnet_hdr.,0
305,<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = <S2SV_ModEnd> ( struct ipv6_opt_hdr <S2SV_ModStart> + 1 <= <S2SV_ModEnd> packet_len ) { <S2SV_ModStart> offset + ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> nexthdr ) { if ( ipv6_optlen ( exthdr ) < 0 ) return offset ; offset += ipv6_optlen ( exthdr ) ; <S2SV_ModEnd> * nexthdr = <S2SV_ModStart> nexthdr ) { if ( ipv6_optlen ( exthdr ) < 0 ) return offset ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> nexthdr ) { if ( ipv6_optlen ( exthdr ) < 0 ) return offset ; offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; if ( ipv6_optlen ( exthdr ) < 0 ) return offset ; offset += ipv6_optlen ( exthdr ) ; if ( ipv6_optlen ( exthdr ) < 0 ) return offset ; offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; if ( ipv6_optlen ( exthdr,0
306,"<S2SV_ModStart> void write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
307,"<S2SV_ModStart> mbmi. mv. as_int ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( mvx ) ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( mvy ) ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( mvx ) ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( mvy ) ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( mvx ) ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mbmi. mv. as_int, sizeof ( mvy ) ) ; memcpy <S2SV_ModEnd> ( mvx,",0
308,<S2SV_ModStart> ; sll -> sl_family = AF_INET ; sll -> sl_protocol = htons ( ETH_P_IP ) ; sll -> sl_protocol = htons ( ETH_P_IPX ) ; sll -> sl_port = htons ( ETH_P_IPX ) ; sll -> sl_family = htons ( ETH_P_IPX ) ; sll -> sl_family = htons ( ETH_P_IPX ) ; sll -> sl_family = htons ( ETH_P_IPX ) ; sll -> sl_protocol = htons ( ETH_P_IPX ) ; sll -> sl_port = htons ( ETH_P_IPX ) ; sll -> sl_family = htons ( ETH_P_IPX ) ; sll -> sl_family = htons ( ETH_P_IPX ) ; sll -> sl_family = htons ( ETH_P_IPX ) ; sll -> sl_protocol = htons ( ETH_P_IPX ) ; sll,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr ; sctp_addiphdr_t * addr_hdr ; sctp_addip_param_t * asconf_param ; sctp_addiphdr_t * addr_hdr ; sctp_addiphdr_t * addr_param_t ; sctp_addiphdr_t * addr_param_t ; sctp_addip_param_t * asconf_param ; addr_param = ( union sctp_addr_param * ) ( asconf -> skb -> data + length ) ; chunk_len -= length ; err_code = sctp_process_asconf_param ( asoc, asconf, addr_hdr ) ; if (! err_code ) { sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> param_hdr. length ) ; asconf_param = ( void * ) addr_param + length ; chunk",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n""",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> case KVM_CAP_PPC_PAPR_TCE_64 : case KVM_CAP_PAPR_TCE_VFIO_64 : case KVM_CAP_PAPR_TCE_VFIO_64 : case KVM_CAP_PAPR_TCE_VFIO_64 : r = 1 ; break ; # ifdef CONFIG_KVM_E500V2 case CONFIG_KVM_E500MC : r = 1 ; break ; # endif # ifdef CONFIG_KVM_E500MC case KVM_CAP_SW_TLB : r =! hv_enabled ; break ; # endif,0
316,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> goto response_done ; } memset ( kvp_data -> data. key, 0, sizeof ( * kvp_data -> data. key ) ) ; <S2SV_ModStart> 1 ) ; memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value ) ) ;",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ;,0
319,<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
320,"<S2SV_ModStart> * mbuf = NULL ; int is_ext_ctrl = 0 ; size_t ctrls_size = 0 ; int err = - EINVAL <S2SV_ModStart> case _IOC_NONE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_READ ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> error_idx",0
321,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if (",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart>, u16 indx, void * data, size_t data_size <S2SV_ModStart>, RTL8150_REQT_WRITE, indx, data, data_size <S2SV_ModEnd>, 500 ) <S2SV_ModStart> 500 ) ; } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { if (! edge_port -> open ) { if (! edge_port -> open ) { if (! edge_port -> close_pending ) { dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func__ ) ; edge_tty_recv ( edge_port -> port, NULL, 0 ) ; } else { if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func__ ) ; } else { if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"" ) ; edge_tty_recv ( edge_port -> port, NULL, 0 ) ; } else { if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct cifsSesInfo * <S2SV_ModEnd> cifs_find_smb_ses ( struct <S2SV_ModStart> cifs_ses_lock ) ; list_for_each_entry ( tmp, & server -> smb_ses_list, smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) break ; ++ ses -> ses_count ; write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; if ( ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) ) ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) && ( cfg -> g_w!= 0 ) && ( cfg -> g_h!= 0 ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) && ( cfg -> g_w!= 0 ) ) && ( ( cfg -> g_h!= 0 ) && ( cfg -> g_w!= 0 ) && ( cfg -> g_h!= 0 ) && ( cfg -> g_w!= 0",0
327,"<S2SV_ModStart>'<S2SV_blank>') { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; return - 1 ; } <S2SV_ModEnd> free ( ptr <S2SV_ModStart> ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; return - 1 ; } <S2SV_ModEnd> free ( ptr <S2SV_ModStart> ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } <S2SV_ModEnd> free ( ptr",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private",0
329,<S2SV_ModStart> new ) { struct <S2SV_ModEnd> key * keyring,0
330,"<S2SV_ModStart> = 0 ; size_t scanned = 0 ; size_t readnbd = 0 ; if ( readnbd > ( size_t ) 0U ) { readnbd = ( size_t ) 0U ; scanned = ( size_t ) 0U ; readnbd = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = SSL_read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINT",0
331,"<S2SV_ModStart> & orig ) ; mrb_value fptr_copy ; mrb_value fptr_orig ; <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf",0
332,"<S2SV_ModStart> = current_cred ( ) <S2SV_ModEnd>,. match_data",0
333,"<S2SV_ModStart> cpi ) { vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_init_plane_quantizers ( cpi, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cpi -> bit_depth ) ; vpx_set_bit_depth ( & cpi -> bit_depth, & cp",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr, ctxt -> op_bytes ) ; ctxt -> src. val = 0 ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ;",0
336,"<S2SV_ModStart> ; if ( j < 2 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( j < 2 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( j < 2 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( j < 2 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( j < 2 ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return",0
337,"<S2SV_ModStart> "".txt"" ) ; if ( strlen ( filename ) > MAX_QPATH ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> filename <S2SV_blank> too <S2SV_blank> long.\\n"" ) ; return ; }",0
338,<S2SV_ModStart> } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> ) ) ; if (! got_table ) { r_list_free ( list ) ; return NULL ; } <S2SV_ModEnd> if ( got_table,0
339,"<S2SV_ModStart> -> si_code < 0 ||! capable ( CAP_SYS_ADMIN ) ) <S2SV_ModStart> - EPERM ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) <S2SV_ModEnd> ; } <S2SV_null>",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + ( p + 1 ) * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ;",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! dir ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! fname ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! fname ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) { x = ( c & 0xF0 ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ; } else { x = '?' ; } if ( x == sep ) x = '\\\\' ;",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ), ""allowed_classes"", & options, & classes, & class_hash ) == FAILURE ) { RETURN_FALSE ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( classes && ( Z_TYPE_P ( classes ) == IS_ARRAY ||! zend_is_true ( classes ) ) ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } } if ( classes ) { zend_hash_",0
343,"<S2SV_ModStart> goto __err ; memset ( tu -> queue, 0, sizeof ( * tu -> queue ) ) ;",0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> ptr -> movie_identifier",0
345,<S2SV_ModStart> else buf = vpx_alg_get_global_hdrs <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; if (! buf ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! buf -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! buf -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ;,0
346,<S2SV_ModStart> = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar *,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) { s -> seekable = strtoll ( p, NULL, 10 ) ; s -> filesize = strtoll ( p + strlen ( p ) - 1, NULL, 10 ) ; } else { s -> seekable = - 1 ; s -> filesize = - 1 ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; }",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> i, j <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ;",0
349,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void nfs4_state_set_mode_locked ( struct nfs4_state * state, fmode_t <S2SV_ModEnd> mode ) { <S2SV_ModStart> state == mode || ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( mode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; }",0
350,<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if (,0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"" ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char lbase [ <S2SV_ModStart> 256 ] ; char ltest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; int nbase = 0 ; int ntest = 0 ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest, ""%255[^\\r\\n]"", strtest ) ; assert ( nbase!= 255 && ntest!= 255 ) ; if ( nbase!= 255 || ntest!= 255 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf (",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data_altsetting_ncm data_altsetting_ncm ; int ret ; data_altsetting_ncm = cdc_ncm_select_altsetting ( intf, CDC_NCM_COMM_ALTSETTING_NCM ) ; if ( data_altsetting_ncm!= CDC_NCM_COMM_ALTSETTING_NCM ) { ret = cdc_ncm_bind_common ( dev, data_altsetting_ncm, 0 ) ; usbnet_link_change ( dev, 0, 0 ) ; return ret ; } ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, data_altsetting, CDC_NCM_COMM_ALTSETTING",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, 1 ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 1 ;",0
356,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i",0
357,"<S2SV_ModStart> ; err = check_entry_size_and_hooks ( e, newinfo, base, hook_entries, underflows, valid_hooks",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( encoding && c -> palette_size && c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x <S2SV_blank> is <S2SV_blank> not <S2SV_blank> chunky"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; caplen = length ; }",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) { <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_timer_close ( q ) ; } else { snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_timer_stop ( q -> timer ) ; snd_seq_timer_close ( q ) ; },0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; if (! start_offset ) start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr ++ ; offset += PAGE_CACHE_SIZE ; from = 0 ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; }",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! name ) goto error ; if (! strcmp ( name, FIT_SIG_NODENAME ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ;",0
364,"<S2SV_ModStart> xfs_trans_log_buf ( mp, bp, XFS_LOG_SYNC, ""xfs_attr3_leaf_list_int(), <S2SV_blank> i=%d, <S2SV_blank> hashval=%d, <S2SV_blank> resynch=%d"", mp -> m_sb. sb_ino, cursor -> offset, be32_to_cpu ( entry -> hashval ), context -> dupcnt, xfs_attr3_leaf_entry_hash ( leaf, i ) ) ; if ( retval ) { xfs_trans_log_buf ( mp, bp, XFS_LOG_ERROR, ""xfs_attr_list_int(), <S2SV_blank> retval=%d, <S2SV_blank> hashval=%d, <S2SV_blank> offset=%d, <S2SV_blank> resynch=%d"", mp -> m_sb. sb_ino, cursor -> offset, be32_to_cpu ( entry -> hashval ), context -> resynch, i ) ; return retval ; } <S2SV_ModEnd> if ( entry <S2SV_ModStart> XFS_ATTR_LOCAL ) { xfs_trans_log_buf ( mp, bp, XFS_LOG_ERROR, ""xfs_attr_list_int(), <S2SV_blank> retval=%d, <S2SV_blank> resynch=%d, <S2SV_blank>",0
365,"<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, <S2SV_ModEnd> GFP_KERNEL ) ) <S2SV_ModStart> - ENOMEM ; state -> rx_kfifo_size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo_size = CX23888_IR_TX_KFIFO_SIZE ; sd = & state -> sd ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ;",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } service_name_tlv = nfc_llcp_build_tlv ( LLCP_TLV_SN, sock -> service_name, sock -> service_name_len, & service_name_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } service_name_tlv = nfc_llcp_build_tlv ( LLCP_TLV_SN, sock -> service_name_len, & service_name_tlv_length",0
367,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> monitor_init ( void <S2SV_ModStart> ssh = active_state <S2SV_ModEnd> ; if ( <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; } return mon ; } <S2SV_null>",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS",0
369,"<S2SV_ModStart> * chan ; jas_uint16 numchans ; jas_uint16 type ; jas_uint16 assoc ; if ( jas_getuint16 ( in, & numchans ) ) { return - 1 ; } if (",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
371,<S2SV_ModStart> ; ipc. icmp_code = code ; ipc.,0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; break ; default : if ( ndo -> ndo_vflag < 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag < 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; return 0 ;",0
373,<S2SV_ModStart> 0 ; } skb_dst_drop ( skb ) ;,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> crypto_free_skcipher ( private,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; bprm -> cred -> egid = inode -> i_gid ; }",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> s ) ) { if ( dlen < 2 ) break ; if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; },0
378,<S2SV_ModStart> 1 ) ) { if ( off + bit >= tags -> nr_tags ) break ;,0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if (! skb_is_nonlinear ( skb ),0
382,"<S2SV_ModStart> -> open_flags ) ; if ( arg -> fmode & FMODE_WRITE ) { xdr_encode_fmode ( xdr, arg -> fmode, & arg -> fmode ) ; return ; }",0
383,"<S2SV_ModStart> len < 4 ) goto trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ; bp += 2 ; len -= 2 ;",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tile_buffsize, tl * tile_rowsize ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> }, # if defined _WITH_BFD_ { ""no_bfd"", no_argument, NULL, 3 }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-fork"", no_argument, NULL, 'n' }, # if defined _WITH_VRRP_ { ""vrrp_pid"", required_argument, NULL, 'r' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-respawn"", no_argument, NULL, 'n' }, { ""dont-fork"", no_argument, NULL, 'n' }, # if defined _WITH_VRRP_ { ""vrrp_pid"", required_argument, NULL, 'p' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # if defined _WITH_BFD_ {",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ; } return <S2SV_ModEnd> error ; },0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> cluster -> cl_has_local && <S2SV_ModEnd> node -> nd_num <S2SV_ModStart> cluster -> cl_local_node!= O2NM_INVALID_NODE_NUM <S2SV_ModEnd> ) return - <S2SV_ModStart> - EBUSY ; node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } else { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } return count ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA *",0
389,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x0a : case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f :,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct sctp_sock * sk = asoc -> ep -> base. sk ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_EVENT_T_FAILED, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_EVENT_T_FAILED, SCTP_ST_FAILED",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fflush ( stdout ) ;",0
393,"<S2SV_ModStart> trunc ; ND_TCHECK_32BITS ( lshp -> ls_type ) ; ND_TCHECK_16BITS ( lshp -> ls_age ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", lshp -> ls_age, lshp -> ls_length",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart>. length ) return 0 ; memcpy ( & rates, p + offset, sizeof ( rates ) ) ; offset += rates. length ; length -= rates. length ; <S2SV_ModStart>. length ) return 0 ; memcpy ( & cf, p + offset, sizeof ( cf ) ) ; offset += cf. length ; length -= cf. length ;",0
396,"<S2SV_ModStart> } else { spin_lock_irqsave ( & opipe -> lock, flags ) ; <S2SV_ModStart> obuf ) ; spin_unlock_irqrestore ( & opipe -> lock, flags ) ;",0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; mm_segment_t <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) & r ) ; if ( ret ) return ret ; set_fs ( old_fs ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_is",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""proc"", MS_NODEV | MS_NOEXEC | MS_NOSUID, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS_NOEXEC | MS_NOSUID | MS_RDONLY, NULL }, { LXC_AUTO_PROC_RW, ""proc"", ""proc"", MS_",0
400,"<S2SV_ModStart> ; } } if ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), "" <S2SV_blank> with <S2SV_blank> policy="" ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( ntohs ( portof ( & md -> iface -> ip_addr ) ), "" <S2SV_blank> with <S2SV_blank> policy="" ) ; }",0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> ( stringset == ETH_SS_STATS <S2SV_ModEnd> ) return ARRAY_SIZE,0
404,<S2SV_ModStart> == 1 ) return <S2SV_ModEnd> ( ( image <S2SV_ModStart> / 8 ) <S2SV_ModEnd> ; else return,0
405,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, dev_path ) ; return ; }",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } pcu -> ep_ctrl = & alt -> endpoint [ 0 ]. desc ; pcu -> ep_data = & alt -> endpoint [ 1 ]. desc ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } pcu -> ep_ctrl = & alt -> endpoint [ 0 ]. desc ; pcu -> ep_data = & alt -> endpoint [ 1 ]. desc",0
407,"<S2SV_ModStart> intf ) ; struct device * dev ; struct dvb_usb_device_params * params = d -> props ; struct device_driver * driver = d -> driver ; <S2SV_ModStart> d ) ; dev = & d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; if ( d -> props -> exit ) d -> props -> exit ( d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_dbg ( & dev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dvb_usbv2_exit ( d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; }",0
408,<S2SV_ModStart> pirlvl ) { if ( ( pirlvl -> prcwidthexpn + picomp -> numrlvls - rlvlno - 1 ) > JAS_UINT32_MAX ) { return - 1 ; } <S2SV_ModStart> pirlvl ) { if ( ( pirlvl -> prcheightexpn + picomp -> numrlvls - rlvlno - 1 ) > JAS_UINT32_MAX ) { return - 1 ; },0
409,"<S2SV_ModStart> target_enc ) { if ( <S2SV_ModEnd> cpat, &",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t depth, <S2SV_ModStart>, ssize_t x ; register Quantum index ; register Quantum * q ; register Quantum index ; register Quantum bit ; ssize_t bit ; ssize_t x ; register Quantum index ; register Quantum index ; register Quantum index ; register Quantum index ; if ( q == ( Quantum * ) NULL ) break ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } if ( ( image -> columns % 8 )!= 0",0
411,"<S2SV_ModStart> * ndo, const <S2SV_ModEnd> u_char * tptr <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ) )",0
412,"<S2SV_ModStart> desc_struct ss ; <S2SV_ModEnd> int usermode ; <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data ) == 0x0 ) return - EINVAL ; } else { if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data ) == 0x0 ) return - EINVAL ; } cs_sel |= SELECTOR_RPL_MASK ; cs_sel |= SELECTOR_RPL_MASK ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC",0
413,"<S2SV_ModStart> ; return sprintf_safe <S2SV_ModEnd> ( buf, <S2SV_ModStart> pdev -> driver_override, sizeof ( pdev -> driver_override ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
414,<S2SV_ModStart> ; BIO * <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> tmpout = BIO_new <S2SV_ModStart> tmpout = BIO_new <S2SV_ModEnd> ( BIO_s_mem (,0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> ii = tree <S2SV_ModStart> b ) ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_null> <S2SV_null>",0
417,"<S2SV_ModStart> fclose ( f ) ; if ( config_file && ( f = fopen ( confFile ( CONFIG_FILE ), ""rt"" ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( config_file && ( f = fopen ( confFile ( CONFIG_FILE ), ""rt"" ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( config_file && ( f = fopen ( confFile ( CONFIG_FILE ), ""rt"" ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( f = fopen ( confFile ( CONFIG_FILE ), ""rt"" ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( config_file && ( f = fopen ( confFile ( CONFIG_FILE ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( config_file && ( f = fopen ( confFile ( CONFIG_FILE ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; }",0
418,"<S2SV_ModStart> ; switch ( AF_UNSPEC ( af ) ) { case AF_UNSPEC : strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; protoname = ""unix"" ; break ; case AF_UNIX : strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; strncpy ( addr_text, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0",0
419,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
420,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) ) return - EINVAL ;,0
421,<S2SV_ModStart> avoid_reserve ) { struct hstate * h = vma_to_hstate ( vma ) <S2SV_ModStart> hstate_vma ( vma ) <S2SV_ModEnd> ; struct page <S2SV_ModStart> page ) { <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> ) { hugetlb_put_quota ( <S2SV_ModEnd> inode -> i_mapping <S2SV_ModStart> ) ; } <S2SV_ModEnd> set_page_private ( page <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string,",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> output ) { int x0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s14, s15 ; int x0, x1, x2, x3, x4, x5, <S2SV_ModEnd> x6, x7 <S2SV_ModStart> ] ; int x8 = input [ 7 ] ; int x9 = input [ 8 ] ; int x10 = input [ 10 ] ; int x11 = input [ 11 ] ; int x12 = input [ 3 ] ; int x13 = input [ 12 ] ; int x14 = input [ 1 ] ; int x15 = input [ 2 ] ; s3 = x0 * cospi_1_64 + x1 * cospi_27_64 ; s4 = x1 * cospi_5_64 + x2 * cospi_23_64 ; s5 = x2 * cospi_9_64 + x4 * cospi_23_64 ; s6 = x4 * cospi_9_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAVE_MEDIA ; # endif # if HAVE_MEDIA flags |=,0
426,"<S2SV_ModStart> MODE_INFO * cur_mi <S2SV_ModEnd>, int b",0
427,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFFHorAcc16 <S2SV_ModEnd> ( tif,",0
428,"<S2SV_ModStart> tot_len ) ; memset ( opt2 + 1, 0, sizeof ( * opt2 ) ) ; <S2SV_ModStart> tot_len ) ; memset ( opt2 + 2, 0, sizeof ( * opt2 ) ) ;",0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i",0
430,"<S2SV_ModStart> * fpath = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = <S2SV_ModEnd> - EACCES ; <S2SV_ModStart> out ; } free ( fpath ) ; <S2SV_ModEnd> return ret ;",0
431,"<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= ( flag & ( CL_UNPRIVILEGED | CL_READONLY ) <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> |= MNT_LOCK_READONLY ; mnt -> mnt. mnt_flags |= ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_sb = sb ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & sb -> s_mounts ) ; unlock_mount_hash ( ) ;",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( <S2SV_ModEnd> rdesc [ 104 <S2SV_ModStart> == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 110 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> many <S2SV_blank> EAPOL <S2SV_blank> keys"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> serio ) ; if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> timeout <S2SV_blank> is <S2SV_blank> %d\\n"", str, i8042_notimeout ) ; return IRQ_NONE ; }",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; uint8_t curr ; if ( udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ]",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMMON <S2SV_ModStart> MODE_INFO * * mi_8x8, int ( * temporal_predictor_count ) [ 2 ], int ( * t_unpred_seg_counts ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ], int ( * mis_predictor_count ) [ 2 ]",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; s = <S2SV_ModStart> ; if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; <S2SV_ModEnd> return ( ret",0
442,<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = <S2SV_ModEnd> gdDPExtractData ( out <S2SV_ModStart> size ) ; if ( rv ) return rv ; rv = <S2SV_ModEnd> out -> gd_free,0
443,<S2SV_ModStart> cred ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, & <S2SV_ModStart>, handle, <S2SV_ModEnd> hints, &",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; if ( rctx -> image_height > rctx -> image_width ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> maximum <S2SV_blank> image <S2SV_blank> height"" ) ; goto done ; } if ( rctx -> image_height > rctx -> image_height ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> maximum <S2SV_blank> image <S2SV_blank> height"" ) ; goto done ; } if ( rctx -> image_height > rctx -> image_width ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> maximum <S2SV_blank> image <S2SV_blank> height"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart>, __u16 indx, void * data, __u16 size, int timeout ) { int ret ; ret = usb_control_msg ( pegasus -> usb, <S2SV_ModEnd> PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE <S2SV_ModStart>, indx, <S2SV_ModEnd> data, size <S2SV_ModStart>, ret ) ; if ( ret < 0 ) netif_err ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> static mod_ty <S2SV_ModEnd> Module ( asdl_seq <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>,0
450,"<S2SV_ModStart> destroy_list ) ; sas_discover_event ( dev <S2SV_ModEnd>, DISCE_DESTRUCT )",0
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> -> write_idx ) ; if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { if ( active_map [ active_end ] ) break ; active_map += mb_cols ; } else { if ( active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> code ) { krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> scsi_disk_emulate_read_toc ( r,0
455,<S2SV_ModStart> cur_pic. f ||! s -> cur_pic. pix_fmt ||! s -> cur_pic. pix_fmt <S2SV_ModEnd> || s ->,0
456,"<S2SV_ModStart> { if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; struct rds_header * hdr = & rm -> m_inc. i_hdr ; struct rds_header * fhdr = & rm -> m_inc. i_hdr ; struct rds_header * fhdr = & rm -> m_inc. i_hdr ; unsigned int len = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; if (! ( hdr_off || sg || off ) ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; fhdr -> h_flags |= RDS_FLAG_CONG_BITMAP ; } if ( hdr_off || sg || off ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0",0
457,<S2SV_ModStart> buf ) ) { if ( ext_block -> depth == 0 ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; },0
458,"<S2SV_ModStart> if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } ret = key_permission ( key_ref, KEY_POSITIVE ) ; if ( ret!= 0 ) goto error2 ; if ( ret!= - EACCES ) goto error2 ; if (! is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; }",0
459,"<S2SV_ModStart> ) { ND_TCHECK <S2SV_ModEnd> ( * mh <S2SV_ModStart> 8 ) ; ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%x"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%x"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%x"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%x"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; ND_PRINT ( (",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
461,"<S2SV_ModStart> hmi_data ; uint32_t <S2SV_ModEnd> hmi_bpm = 0 <S2SV_ModStart> ; } * note = NULL ; UNUSED ( hmi_size ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION",0
462,<S2SV_ModStart> id ; * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = <S2SV_ModEnd> inode -> i_generation,0
464,"<S2SV_ModStart> ; } if ( request -> kdc_options & KDC_OPT_DISALLOW_POSTDATED ) { * status = ""DISALLOW <S2SV_blank> POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_DISALLOW_POSTDATED ) ; } if ( isflagset ( request -> kdc_options, KDC_OPT_DISALLOW_POSTDATED ) ) { * status = ""DISALLOW <S2SV_blank> POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_DISALLOW_POSTDATED ) ; } if ( isflagset ( request -> kdc_options, KDC_OPT_DISALLOW_POSTDATED ) ) { * status = ""DISALLOW <S2SV_blank> POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_DISALLOW_POSTDATED ) ; } if ( isflagset ( request -> kdc_options, KDC_OPT_DISALLOW_POSTDATED ) ) { * status = ""DISALLOW <S2SV_blank> POSTDATE <S2SV_blank> NOT <S2SV_blank> ALLOWED"" ; return ( KDC_ERR_CANNOT_DISALLOW_POSTDATED ) ; } if ( isflagset ( request -> kdc_options",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { if ( signed_add_overflows ( dst_reg -> umin_value, umin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MIN ; } else if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE )",0
467,<S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED <S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED <S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum <S2SV_ModStart> MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = luaL_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } }",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; l_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_values ) ) ; if ( l_row_idx_id == NULL ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> CSR <S2SV_blank> file!\\n"" ) ; return",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
473,"<S2SV_ModStart> vpx_codec_err_t res ; if <S2SV_ModEnd> (! data <S2SV_ModStart> || ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) ) res = VPX_CODEC_INVALID_PARAM ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx, res <S2SV_ModEnd> ) ; }",0
474,"<S2SV_ModStart> int ret ; if (! strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank>",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int isofs_read_inode ( struct inode * inode, struct isofs_dir_entry * di ) { struct iso_sb_info * sbi = ISOFS_SB ( sb ) ; int ret = - EIO ; if ( de -> name_len > ISOFS_MAXNAMELEN ) { ret = - EIO ; goto fail ; } if ( di -> name_len > ISOFS_MAXNAMELEN ) { ret = - EIO ; goto fail ; } if ( di -> name_len > ISOFS_MAXNAMELEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> %d\\n"", __func__, di -> name_len ) ; goto fail ; } if ( de -> name_len > ISOFS_MAXNAMELEN ) { ret = - EIO ; goto fail ; } if ( di -> name_len > ISOFS_MAXNAMELEN ) { ret = - EIO ; goto fail ; } if ( di -> name_len > ISOFS_MAXNAMELEN ) { printk ( KERN_INFO ""%s: <S2SV_blank> out",0
476,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
478,"<S2SV_ModStart> ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu",0
479,<S2SV_ModStart> case IS_STRING : <S2SV_ModEnd> affine [ i <S2SV_ModStart> i ] = Z_LVAL_PP <S2SV_ModEnd> ( zval_affine_elem ) <S2SV_ModStart> i ] = Z_DVAL_PP <S2SV_ModEnd> ( zval_affine_elem ) <S2SV_ModStart> i ] = Z_LVAL_PP <S2SV_ModEnd> ( zval_affine_elem ) <S2SV_ModStart> i ] = Z_DVAL_PP <S2SV_ModEnd> ( zval_affine_elem ),0
480,<S2SV_ModStart> self ) { Py_CLEAR <S2SV_ModEnd> ( self -> <S2SV_ModStart> dict ) ; Py_CLEAR <S2SV_ModEnd> ( self ->,0
481,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
482,<S2SV_ModStart> - EFAULT ; if ( offset + len > PAGE_SIZE ) return - EINVAL ;,0
483,"<S2SV_ModStart> argv [ ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n""",0
484,"<S2SV_ModStart> = tty_port_tty_set_termios ( & port -> port, & dummy ) ; if (! tty ) { retval = - ENOMEM ; goto reset_open_count ; }",0
485,<S2SV_ModStart>. type = perf_event_type <S2SV_ModEnd> ; cpuctx ->,0
486,"<S2SV_ModStart> struct iovec * iovec, size_t nr_segs, loff_t * ppos <S2SV_ModStart> = 1 ; * ppos = 0 ;",0
487,<S2SV_ModStart> ext4_group_t flex_group ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> -> s_log_groups_per_flex ; size_t <S2SV_ModEnd> size ; int <S2SV_ModStart> sbi -> s_log_groups_per_flex ; if ( sbi -> s_log_groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModEnd> flex_group_count = ( <S2SV_ModStart> sbi -> s_groups_count <S2SV_ModEnd> ) + (,0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ;,0
489,"<S2SV_ModStart> ; for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
490,"<S2SV_ModStart> if (! cli_sslclifp <S2SV_ModEnd> ( cptr ) <S2SV_ModStart> cptr ) ) { int len = strlen ( parv [ 1 ] ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; len = strlen ( parv [ 1 ] ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; if ( len < 1 ) return send_reply ( cptr, ERR_SASLNOMEM ) ; len = strlen ( parv [ 1 ] ) ; if ( len < 1 ) return send_reply ( cptr, ERR",0
491,<S2SV_ModStart> # endif for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) <S2SV_ModEnd> ) { long,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) return ERROR_DATA_OVERFLOW ; if ( match_length > callback_args -> data_size ) return ERROR_DATA_OVERFLOW ;,0
493,<S2SV_ModStart>! no_port_forwarding_flag && <S2SV_ModEnd>! options.,0
494,"<S2SV_ModStart>! bitstream_read_bit ( bc <S2SV_ModEnd> ) ) { <S2SV_ModStart>! bitstream_read_bit ( bc <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
495,<S2SV_ModStart> err ; } if ( m -> msg_name ) { m -> msg_namelen = 0 ; m -> msg_name [ m -> msg_namelen ]. iov_base = NULL ; m -> msg_name [ m -> msg_namelen ]. iov_len = 0 ; m -> msg_name [ m -> msg_namelen ]. iov_len = 0 ; m -> msg_name [ m -> msg_namelen ]. iov_base = address ; } else { m -> msg_name = NULL ; },0
496,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res ; int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; }",0
497,<S2SV_ModStart> int hstartcol ; jas_int64_t <S2SV_ModEnd> m ; if <S2SV_ModStart> >= 2 ) { jas_int64_t <S2SV_ModEnd> m = numrows <S2SV_ModStart> - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> {",0
501,"<S2SV_ModStart> 1 ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; <S2SV_ModStart> queue ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } while ( queue ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * * ) &",0
502,<S2SV_ModStart> - EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { mnt -> mnt. mnt_flags |= MNT_READONLY ; },0
503,<S2SV_ModStart> ; int copied <S2SV_ModEnd> ; struct sockaddr_ll <S2SV_ModStart> sll ) ; <S2SV_ModEnd> copied = len <S2SV_ModStart> out_free ; } <S2SV_ModEnd> copied += vnet_hdr_len,0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> num_ports < 2 || serial -> num_ports > USB_NUM_PORTS,0
506,"<S2SV_ModStart> qmode ) { <S2SV_ModEnd> ChunkHeader ds64hdr, <S2SV_ModStart> ; RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; <S2SV_ModStart> ds64_chunk ; if ( total_riff_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_riff_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_riff_bytes ) ; do_rf64 = 1 ; } else if ( total_riff_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_riff_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_riff_bytes ) ; do_rf64 = 0 ; } else if ( total_riff_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_riff_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_riff_bytes )",0
507,<S2SV_ModStart> ; if ( msg_sys -> msg_namelen > 0 && msg_sys -> msg_namelen < msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } else if ( msg_sys -> msg_namelen < msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } if ( msg_sys -> msg_namelen > msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModEnd> total_len = err <S2SV_ModStart> ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |=,0
508,<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( ip ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( ip ) ; struct gfs2_dinode * ip_dinode = ip_dinode ; struct gfs2_dinode * ip_d = ip -> i_dinode ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( ip ) ; struct gfs2_dinode * ip_dinode = ip_dinode ( ip_d ) ; if ( ip_dinode -> i_height > ip_height ) { struct gfs2_inode * ip_d = ip_d ; struct gfs2_dinode * ip,0
509,"<S2SV_ModStart> codec -> interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> filename, input -> <S2SV_ModEnd> use_i420? ""I420"" <S2SV_ModStart> : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input",0
510,<S2SV_ModStart> -> prof_nsc_rle_decompress_data ) { <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> -> prof_nsc_decode ) { <S2SV_ModStart> -> decode ( ) ; } <S2SV_ModStart> -> decode ( ) ; },0
511,"<S2SV_ModStart> ; if ( ( attr -> psvi == XSLT_REFACTORED ) && ( attr -> children -> type!= XML_TEXT_NODE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
512,"<S2SV_ModStart> 0 ) { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } else { if ( copy_file_safe ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { if ( copy_file_safe ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } else { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch""",0
513,<S2SV_ModStart> fv -> b. sf -> fv!= & fv -> b ) { if ( sf -> sf -> fv!= & fv -> b ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> timr ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( period == 0 ) { period = sgi_timer_get_interval ( timr ) ; when = timespec_to_ns ( new_setting -> it_value ) ; } else { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; },0
516,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog <S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
517,<S2SV_ModStart> case OFreshOID : if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; },0
518,"<S2SV_ModStart>, multipart_media ; int code = 500, fd = - 1, nranges, ret <S2SV_ModStart> = NULL ; size_t content_length <S2SV_ModEnd> ; int code <S2SV_ModStart> = 500, fd <S2SV_ModEnd> = - 1 <S2SV_ModStart> ; if ( ( nranges = strnlen ( range_str, sizeof ( content_range ) ) ) == 0 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld-%lld"", range -> start, st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content",0
519,"<S2SV_ModStart> = FALSE ; uint16_t ier ; uint16_t isr ; uint16_t ier_data ; <S2SV_ModStart> KSZ8851_IER ) ; ier_data = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ier_data = ksz8851ReadReg ( interface, KSZ8851_IER_DATA ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS ) ; if ( ( isr & ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( &",0
520,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { return vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd>, QINDEX_BITS )",0
521,"<S2SV_ModStart> < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank <S2SV_ModStart> FB_VBLANK_HAVE_COUNT | FB_VBLANK_HAVE_VCOUNT | FB_VBLANK_HAVE_VSYNC <S2SV_ModEnd> ; vblank.,0
524,<S2SV_ModStart> int flags ) { if (! ctx ) return ; if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) { spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; },0
525,"<S2SV_ModStart> nElements, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) { _cmsMallocZero ( ContextID, sizeof ( Curves16Data ) ) ; if ( c16 -> Curves [ i ] == NULL ) { _cmsMallocZero ( ContextID, sizeof ( Curves16Data ) ) ; return NULL ; }",0
526,"<S2SV_ModStart> need_dev ) { path_put ( & path ) ; error = - ENOENT ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) ) { error = - ENOENT ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! path. dentry ) { error = - ENOENT ; goto out ; }",0
527,<S2SV_ModStart> ; if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_,0
528,"<S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0",0
529,"<S2SV_ModStart> ) goto sslerr ; if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_pubkey_bio ( rawcert, NULL ) ) == NULL ) goto sslerr ; } else if ( ( localkey = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localkey = d2i_RSA_pubkey_bio ( rawcert, NULL ) == NULL ) { if ( ( localec = d2i_EC_pubkey_bio ( rawcert, NULL ) == NULL ) goto sslerr ; } else if ( ( localkey = d2i_RSA_pubkey_bio ( rawcert, NULL ) == NULL",0
530,"<S2SV_ModStart> t1_getline ( ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
531,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition_id <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> bsl ) / 4, hbs = ( 1 << bsl ) / 4 <S2SV_ModEnd> ; assert ( <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize )",0
532,<S2SV_ModStart> name ) ; free ( subsection ) ;,0
533,<S2SV_ModStart> ; int block_ptr <S2SV_ModEnd> ; int pixel_x <S2SV_ModStart> pixel_ptr = 0 ; int block_y <S2SV_ModEnd> ; int total_blocks <S2SV_ModStart> break ; case 0xc0 : colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr,0
534,"<S2SV_ModStart> cnt ) { jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ;",0
535,"<S2SV_ModStart> packet_offload * ptype <S2SV_ModEnd> ; __be16 type <S2SV_ModStart> type ; if ( unlikely ( skb_gro_header_hard ( skb, hlen ) ) ) goto out_unlock ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_G",0
536,<S2SV_ModStart> ( matrix = jas_malloc <S2SV_ModEnd> ( sizeof (,0
537,<S2SV_ModStart> } else { if ( session -> sessionHandle == TSS2_SESSION_INVALID_HANDLE ) { return TSS2_SYS_RC_INVALID_HANDLE ; },0
538,"<S2SV_ModStart> ; ret = key_permission ( key_ref, KEY_POSITIVE_READ ) ; if ( ret == 0 ) { ret = - EPERM ; goto error2 ; } if ( is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; } else { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; }",0
539,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 0 ; } else { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 1 ; } } else { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 1 ; } else {,0
540,<S2SV_ModStart> var_off ) ; if (! src_known ||! <S2SV_ModEnd> dst_known ) { <S2SV_ModStart> var_off ) ; },0
541,"<S2SV_ModStart> ) ) { cFYI ( 1, ""duplicate <S2SV_blank> file <S2SV_blank> name"" ) ; rc = - EPERM ; goto lookup_out ; }",0
542,<S2SV_ModStart> = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_OFFSET ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_OFFSET ; info. size = pdev -> bar5_size ; break ; case VFIO_PCI_BAR6_REGION_INDEX : info. offset = VFIO_PCI_BAR6_OFFSET ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR7_REGION_INDEX : info. offset = VFIO_PCI_BAR7_OFFSET ; info. size = pdev -> bar7_size ; break ; case VFI,0
543,"<S2SV_ModStart> ext4_test_inode_state ( inode <S2SV_ModEnd>, EXT4_STATE_ORDERED_MODE )",0
544,<S2SV_ModStart> -> filesize = 0 ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;,0
545,"<S2SV_ModStart> rcv_wscale ) ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; }",0
546,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mutt_b64_decode ( char <S2SV_ModStart> char * in, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> 4 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) >> 2 ) & 0xf0 ) | ( base64val (",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, i ; size_t <S2SV_ModEnd> copied ; loff_t",0
549,<S2SV_ModStart> if (! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> int number_of_frames, number_of_keyframes <S2SV_ModEnd>, encode_frame_count ; <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = 0 ; number_of_keyframes = 0 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count / si -> kf_dist + 1 ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left == 0 ) { return FALSE ; } <S2SV_ModStart> value ; left -- ; } else { * out ++ = value ; left -- ; } } return TRUE ;,0
552,"<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = NULL ; } if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. start_col = 0 ; rect. end_row = 0 ; rect. end_col = 0 ; scrollrect ( rect, old_rows - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; } else if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = 0 ; rect. start_col = 0 ; rect. end_col = new_cols ; scrollrect ( rect, old_rows - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; } screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ]",0
553,"<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * str < end ) ; if ( * str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> no <S2SV_blank> literal"" ) ; return - 1 ; } if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str + 1 ) == ch ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_start = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( literal_start!= literal_end ) { if ( raw ) * literal = decode_unicode_with_escapes ( c, n, literal_start, literal_end - literal_start, NULL, NULL",0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> unsigned char * buf <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> bufsize ) ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ;",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
556,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> struct pcrypt_instance_ctx * <S2SV_ModStart> = crypto_instance_ctx ( <S2SV_ModEnd> inst ) ;,0
558,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ) ) ; if ( ndopts. pref < pref ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref\\n"" ) ; return ; }",0
561,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_proxy_auth_id_print ( netdissect_options <S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> proxy <S2SV_blank> auth_id: <S2SV_blank> %u"", length ) ) ; return - 1 ; }",0
562,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> rp ) ; len = nla_len ( rp ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( replay_esn ) ) return - EINVAL ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; len = nla_len ( rp ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ;,0
563,"<S2SV_ModStart> int ret = proc_check_memory ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent > 100 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 100 ) ; } else { update_perf_cpu_limits ( ) ; }",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd>, UINT_MAX )",0
565,<S2SV_ModStart> l_max_prec ) ; if ( l_max_prec > l_bound ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_ptr ) ; opj_free ( l_tmp_data ) ; opj_free ( l_tmp_ptr ) ; opj_free ( l_tmp_ptr ) ; },0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> prev_mi_grid_visible + idx_str <S2SV_ModEnd> ; vp9_zero ( <S2SV_ModStart> -> mb. <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> cpi -> sf. partition_search_type ) { switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) obuf = opipe -> bufs + nbuf ; else obuf = opipe -> bufs,0
570,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
571,<S2SV_ModStart> } else { <S2SV_ModEnd> if ( Fp <S2SV_ModStart> NULL ) return HTTP_UNAUTHORIZED <S2SV_ModEnd> ; } parser <S2SV_ModStart> Fp == NULL ) return HTTP_INTERNAL_SERVER_ERROR ; <S2SV_ModEnd> } parser ->,0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; },0
573,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char <S2SV_ModStart> ; if ( rspac <S2SV_ModEnd> == NULL ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> rspac == NULL,0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> -> devnum, ci. <S2SV_ModEnd> slow = ps <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart> opt, int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> optlen & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = NULL ; return 0 ; } <S2SV_ModEnd> if ( optlen <S2SV_ModStart> && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) )",0
578,<S2SV_ModStart> -> rmtblkcnt2 ; args -> rmtblkno2 = 0 ; args -> rmtblkcnt2 = 0 ; args -> rmtblkcnt2 = 0 ; args -> rmtblkcnt2 = 0 ;,0
579,"<S2SV_ModStart> ) ) { if ( GetVirtualVolumeDeviceObject ( DeviceObject, drive, NULL ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; else * ( int * ) Irp -> AssociatedIrp. SystemBuffer = FALSE ; <S2SV_ModStart> ) ) { if ( GetVirtualVolumeDeviceObject ( DeviceObject, drive, NULL ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_IOCTL_IS_DEVICE_UNLOAD_DISABLED : if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DriverUnloadDisabled ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TO",0
580,<S2SV_ModStart> ( connection == NULL || strlen ( connection ) <= 0 ) goto error ; else if (,0
581,<S2SV_ModStart> rpcap_findalldevs_if * findalldevs_if ; uint16 nif = 0 ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( d -> description ) { nif ++ ; if ( d -> name ) { nif ++ ; if ( strlen ( d -> name ) > sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } } if ( d -> description ) { nif ++ ; if ( strlen ( d -> description ) > sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( strlen ( d -> name ) > sizeof ( struct rpcap_findalldevs_if ) ) { nif ++ ; if ( d -> name ) { nif ++ ; if ( strlen ( d -> name ) > sizeof ( struct rpcap_findalldevs_if ) ) { nif ++ ; if ( d -> name ) { nif ++ ; if ( strlen ( d -> name ) > sizeof ( struct rpcap_findalldevs_if ) ) { if ( strlen ( d -> name ) > sizeof (,0
582,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; g_hash_table_remove ( problem_info, ""basename"" ) ; g_hash_table_remove ( problem_info, ""cmdline"" ) ;",0
583,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 2 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < 4 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < 4 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart> sock * sk, unsigned int flags <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee. ee_flags = flags <S2SV_ModEnd> ; if ( <S2SV_ModStart> = tstype ; serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; }",0
586,"<S2SV_ModStart> num_images ) ; if ( num_images < 1 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
587,"<S2SV_ModStart> len ; if ( in_cksum ( vec, 1, len ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> cksum <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", vec [ 0 ]. len, len ) ) ; return ; }",0
588,"<S2SV_ModStart> ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__,",0
589,<S2SV_ModStart>! dumpable && ptrace_has_cap <S2SV_ModEnd> ( __task_cred (,0
590,<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { abort ( ) ; },0
591,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; <S2SV_ModStart> i1_sei_parameters_present_flag = 1 ; ps_parse -> <S2SV_ModStart> i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ;,0
594,"<S2SV_ModStart> cypress_private ), <S2SV_ModEnd> GFP_KERNEL ) ;",0
595,<S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> per_sdma ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> per_sdma ) ; kfree ( tmp_sdma_rht ) ;,0
596,<S2SV_ModStart> device_data ; if ( dev ) { device_put ( & dev -> dev ) ; return 0 ; },0
597,"<S2SV_ModStart> name, int rep_quick <S2SV_ModEnd> ) { int <S2SV_ModStart>, rep_quick ) ; if (! ( param -> testflag & ( HA_OPTION_CHECKSUM | HA_OPTION_COMPRESS_RECORD ) ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; }",0
598,<S2SV_ModStart> == q || ( size == ( size_t ) - 1 ),0
599,"<S2SV_ModStart> valuelen ) ; xfs_bmbt_irec_t dblocks ; dblocks = XFS_B_TO_FSB ( mp, size ) ; nblks += dblocks ; nblks += XFS_NEXTENTADD_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ;",0
600,<S2SV_ModStart> } pairs = palloc <S2SV_ModEnd> ( pcount *,0
601,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 1 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 2 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModEnd> text [ 3 <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModEnd> return 0 ;,0
603,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; * hend = '\\0' ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; * hend = '\\r' ; }",0
604,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) <S2SV_ModEnd> outptr [ j <S2SV_ModStart> ++ j ) <S2SV_ModEnd> outptr [ j <S2SV_ModStart> ++ j ) <S2SV_ModEnd> outptr [ j <S2SV_ModStart> ++ j ) <S2SV_ModEnd> outptr [ j <S2SV_ModStart> ++ j ) <S2SV_ModEnd> outptr [ j <S2SV_ModStart> ++ j ) <S2SV_ModEnd> output [ j",0
605,"<S2SV_ModStart> new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) new_exec = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) old_argv",0
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access, argp -> acl_default ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default <S2SV_ModEnd> ) ; if",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; fflush ( fp ) ; fclose ( fp ) ; if ( chmod ( temp_filename, S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__",0
609,<S2SV_ModStart> elen ) ; if ( pc -> lengthComponentIdent < 0 ) return - EINVAL ; <S2SV_ModStart> case 1 : if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; <S2SV_ModStart> case 2 : if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> componentIdent [ 0 ] == '\\0' ) return - EINVAL ; if ( pc -> length,0
610,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str (",0
611,<S2SV_ModStart> tlv_len ) ; if ( len < tlv_len ) goto trunc ; <S2SV_ModStart> tlv_len ) ; if ( len < tlv_len ) goto trunc ; <S2SV_ModStart> tlv_len ) ; if ( len < tlv_len ) goto trunc ; <S2SV_ModStart> tlv_len ) ; if ( len < tlv_len ) goto trunc ; <S2SV_ModStart> tlv_len ) ; if ( len < tlv_len ) goto trunc ;,0
612,"<S2SV_ModStart> userData, ctxt -> token, ctxt -> <S2SV_ModStart> ctxt -> userData, ctxt -> token <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart> ctxt -> userData, ctxt -> token <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart> ctxt -> userData, ctxt -> token <S2SV_ModEnd> ) ; ctxt",0
613,"<S2SV_ModStart> ( sk ) ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> slow ; } inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt || inet_opt -> opt_len < sizeof ( * sin ) ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; }",0
614,"<S2SV_ModStart> len ) { const u_char * tstr ; u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> ; while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; break ; } tlen -= pdu_len ; tptr += pdu_len ; } trunc : ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; }",0
615,"<S2SV_ModStart> int tagval ; if ( s == NULL ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( s -> len < 4 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( s -> len < 4 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( token ) { if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED",0
616,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> chars_processed ; int <S2SV_ModStart> ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return (",0
617,"<S2SV_ModStart> args ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"" ) ;",0
618,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"", <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } child = copy_file ( src, dest ) ; if ( child == - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; }",0
620,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
621,"<S2SV_ModStart> value ) { <S2SV_ModEnd> value -> x <S2SV_ModStart> -> y = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MaxF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MaxF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> x = MaxF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MaxF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MaxF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MaxF <S2SV_ModEnd> ( 1.0f,",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len == PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len < PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if (,0
623,"<S2SV_ModStart> ( check_stack_guard_page ( vma <S2SV_ModEnd>, address )",0
624,<S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( * new_data ) ) ; <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( * new_data ) ) ; <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( * new_data ) ) ;",0
626,<S2SV_ModStart> -> ip6f_offlg ) ; ND_TCHECK_16BITS ( & dp -> ip6f_plen ) ;,0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ; break ; case IP6MOPT_VIP : if ( len - i < IP6MOPT_VIP_MINLEN ) { if ( len - i < IP6MOPT_VIP_",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,<S2SV_ModStart> 0 ) ; assert ( ( occ0 / rowsize ) == 0 ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 >= rowsize ) { <S2SV_ModEnd> occ0 -= rowsize <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ( * sp <S2SV_ModStart> decodepfunc ) ( tif <S2SV_ModStart> occ0 -= rowsize ; op0 += rowsize ; } <S2SV_ModEnd> return 1 ;,0
630,"<S2SV_ModStart>, tcount ; size_t <S2SV_ModEnd> o, datao <S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
631,<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if (,0
632,<S2SV_ModStart> = NULL ; if ( sb -> s_fs_info ) { <S2SV_ModStart> sbi ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
633,"<S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, llbuff, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; break",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> ; res = Curl_convert_from_network <S2SV_ModEnd> ( handle, <S2SV_ModStart>, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; if ( olen ) * olen = strindex ; <S2SV_ModEnd> return ns ;",0
635,"<S2SV_ModStart> RAnalOp next_op ; if ( len < 2 ) { ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", op -> jump ) ; return ; }",0
636,"<S2SV_ModStart> ; if ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } iov_iter_advance ( i, copied ) ; pos += copied ; balance_dirty_pages_ratelimited ( mapping ) ;",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( len > ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( tmp > ring -> rx_buffersize ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", tmp, ring -> rx_buffersize <S2SV_ModEnd> ) ; *",0
638,<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
639,"<S2SV_ModStart> ; show_object ( obj <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; show_object ( obj <S2SV_ModEnd>, NULL,",0
640,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else sub -> flags &= ~ prog -> flags ;,0
641,"<S2SV_ModStart> 0 ) { memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof ( transp ) ) ; memset ( transp, 0, sizeof (",0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten",0
644,<S2SV_ModStart> pixels ++ ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
645,"<S2SV_ModStart> timer ) ; <S2SV_ModEnd> list_for_each_entry_safe ( slave <S2SV_ModStart> slave_list_head, & snd_timer_slave_list <S2SV_ModEnd> ) { spin_lock_irq <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> } mutex_unlock (",0
646,"<S2SV_ModStart> len ; } if ( len < 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 3)"" ) ) ; return len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 7 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 7)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; }",0
647,"<S2SV_ModStart> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_null>",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port, struct asd_sas_rphy * rphy ) { struct asd_sas_rphy <S2SV_ModEnd> * dev, <S2SV_ModStart> * n ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_probe_sata ( port ) ; } list_for_each_entry ( dev, & port -> sas_port_list, <S2SV_ModEnd> disco_list_node ) {",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len <S2SV_ModEnd> ; char line <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if (! netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap ==",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
652,"<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { break ; } if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; int_fast32_t topOverflow = gifFilePtr -> Image. Top + gifFilePtr -> Image. Left + gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; if ( topOverflow > 0 || leftOverflow > 0 ) { sp -> ImageDesc. Top += topOverflow ; } if (! updateGCB ( info, & lastAllocatedGCBIndex ) ) { break ;",0
653,"<S2SV_ModStart> can_read_key : if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error ; } if ( key_is_positive ( key ) ) { ret = - EOPNOTSUPP ; goto error ; } if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } error2 : key_put ( key ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee",0
655,"<S2SV_ModStart> { # define ThrowPICTException ( exception, message ) { if ( image!= ( Image * ) NULL ) DestroyImage ( image ) ; if ( read_info!= ( ImageInfo * ) NULL ) ThrowPICTException ( ( exception ), ( message ) ) ; } # define ThrowReaderException ( exception, message ) { if ( tile_image!= ( Image * ) NULL ) tile_image = DestroyImage ( tile_image ) ; ThrowPICTException ( ( exception ), ( message ) ) ; if ( read_info!= ( ImageInfo * ) NULL ) ThrowReaderException ( ( exception ), ( message ) ) ; if ( read_info!= ( ImageInfo * ) NULL ) ThrowPICTException ( ( exception ), ( message ) ) ; }",0
656,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; if ( jas_iccgetuint ( in, 4, & tmp ) ) return - 1 ; if ( tmp & 0x80000000 ) * val = ( ( tmp & 0x7fffffff ) + 1 ) ; else * val = ( ( tmp & 0x7fffffff ) + 1 ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD_CSWP : rm -> atomic. op_m_fadd. compare = args -> m_fadd. compare ; rm -> atomic. op_m_fadd. swap = args -> m_fadd. swap ; break ; case RDS_CMSG_ATOMIC_CSWP_FADD : rm -> atomic. op_m_cswp. add = args -> m_cswp. add ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_FADD_CSWP : rm -> atomic. op_m_fadd.,0
658,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ; <S2SV_ModEnd> si = &,0
659,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
660,"<S2SV_ModStart> if ( snprintf ( spath, sizeof ( spath ), var <S2SV_ModEnd>, iface )",0
661,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> free ( font_name",0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; #",0
663,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
664,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; }",0
665,"<S2SV_ModStart> return 1 ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; } if ( sk -> sk_state == DCCP_REQUESTING && dccp_check_seqno ( sk, skb ) ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_",0
666,"<S2SV_ModStart> msixcap ; if ( msgnum < 0 || msgnum >= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> msix_table_entries: <S2SV_blank> %d"", __func__, msgnum ) ; return - EINVAL ; } <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &",0
667,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> if ( upperdentry ) { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } <S2SV_ModStart> ) ; } mutex_unlock ( & dentry -> d_inode -> i_mutex ) ;,0
668,<S2SV_ModStart> ; while (! isspace ( * p ) ) p ++ ; if (,0
669,"<S2SV_ModStart> ; if (! authctxt ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
671,"<S2SV_ModStart> + 1 ) ; if ( i >= ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( i >= ctx -> hdrmax ) mx_",0
672,"<S2SV_ModStart> NULL ) { pkiDebug ( ""PKCS7_ISSUER_AND_SERIAL <S2SV_blank> not <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; return KRB5KDC_ERR_PREAUTH_FAILED ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; }",0
673,<S2SV_ModStart> { Jpeg2000Prec * prec <S2SV_ModEnd> = band -> <S2SV_ModStart> precno ++ ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
674,"<S2SV_ModStart> ; if ( ( ctxt -> vctxt. error!= NULL ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } }",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = ip6_xmit ( sk, <S2SV_ModEnd> skb, &",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart>. lossless ) { return ONLY_4X4 ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> magfact ) ; if ( magfact < 0 ) magfact = - 1 ; if ( magfact > 1 ) magfact = 1 ;,0
679,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > sz,0
680,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; },0
681,"<S2SV_ModStart> ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_read_directory ( & info, & h, & dir, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> directory"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> directory"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read",0
682,<S2SV_ModStart> ; size_t sz = <S2SV_ModEnd> size ; if,0
683,"<S2SV_ModStart> } } } if ( vars -> cnt == 0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= AX25_MAXPROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,<S2SV_ModStart> -> _eip ; rc = <S2SV_ModEnd> em_push ( ctxt <S2SV_ModStart> case 4 : rc = <S2SV_ModEnd> em_jmp_far ( ctxt <S2SV_ModStart> case 5 : rc = <S2SV_ModEnd> em_jmp_far ( ctxt <S2SV_ModStart> case 6 : rc = <S2SV_ModEnd> em_jmp_far ( ctxt,0
687,"<S2SV_ModStart> imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ; url. path = errstr + 1 ; url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url. path [ strlen ( url. path ) - 1 ] = '\\0' ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ;",0
688,"<S2SV_ModStart> secret, void * <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> ; struct ceph_crypto_key old_key ; struct ceph_crypto_key new_session_key ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; u64 new_secret_id <S2SV_ModStart> ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto out ; ret = dlen ; dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; tp = tp + dlen ;",0
689,"<S2SV_ModStart> / 2 ; if ( count < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count ) ) ) ;",0
690,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
691,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = log_error_errno ( SYNTHETIC_ERRNO ( ENOMEM ), ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ;,0
693,<S2SV_ModStart>. entry ; if ( * field_rtrn == NULL ) { * field_rtrn = NULL ; * index_rtrn = NULL ; return ( * index_rtrn!= NULL ) ; } <S2SV_ModStart>. entry ; if ( * index_rtrn == NULL ) { * field_rtrn = NULL ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; },0
694,<S2SV_ModStart> lun ) { list_del_init ( & cmd -> eh_entry ) ; scsi_dma_unmap ( cmd ) ;,0
695,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) )!= TYPE_FUNCTION ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; get_last_pos ( body, & end_lineno, & end_col_offset ) ; if ( TYPE ( CHILD ( n, name_i + 4 ) )!= TYPE_FUNCTION ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 5 )!= TYPE_FUNCTION ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 6 )!= TYPE_FUNCTION ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 7 )!= TYPE_FUNCTION ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 6 )!= TYPE_FUNCTION ) return NULL ; if ( TYPE ( CHILD ( n, name",0
696,<S2SV_ModStart> = 0 ; struct sctp_sockaddr_entry * addr = & asoc -> peer. primary_addr ; struct sctp_sockaddr_entry * addr = & asoc -> peer. primary_addr ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if ( sock,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; mutex_lock ( & sk -> sk_receive_queue ) ; <S2SV_ModStart> out_wait ; } mutex_unlock ( & sk -> sk_receive_queue ) ;,0
699,"<S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; l_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; l_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; l_row_idx_id",0
700,<S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ;,0
701,"<S2SV_ModStart> ctxt ) { int rc ; <S2SV_ModStart> ctxt ) ; rc = <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ctxt, rc <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( ctxt, rc <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( ctxt, rc <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) return rc <S2SV_ModEnd> ; } <S2SV_null>",0
702,,1
703,"<S2SV_ModStart> ; freq_reg = devm_ioremap_nocache <S2SV_ModEnd> ( dev, <S2SV_ModStart> res -> start, <S2SV_ModEnd> HI3660_STUB_CLOCK_DATA ) ;",0
704,"<S2SV_ModStart> case SEEK_SET : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> psf_log <S2SV_ModStart> psf -> psf_log <S2SV_ModStart> ; psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; case SEEK_CUR : psf -> psf_log ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; case SEEK_SET : psf -> psf_log ( psf, ""Bad",0
705,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_mutex ; } <S2SV_ModEnd> out_mutex : mutex_unlock",0
706,"<S2SV_ModStart> midi_type ; uint32_t <S2SV_ModEnd> track_size ; uint8_t <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank>",0
707,"<S2SV_ModStart> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_SNDBUFFORCE : if (! capable ( CAP_NET_ADMIN ) ) { ret = - EPERM ; break ; }",0
708,"<S2SV_ModStart> * bh ; unsigned long flags ; <S2SV_ModStart> = 0 ; flags = udf_read_tagged ( sb, block, block, & flags ) ; if ( flags & UDF_FLAG_NO_LVD ) goto out_bh ; <S2SV_ModStart> -> b_data ; if ( flags & UDF_FLAG_NO_ALLOC ) goto out_bh ; <S2SV_ModStart> -> mapTableLength ) ; if ( flags & UDF_FLAG_NO_ALLOC ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else if ( flags & UDF_FLAG_NO_AL",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; return 0 ; } if ( bmp_gethdr ( in, & hdr ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! ( info = bmp_getinfo ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d;",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_cabac -> u4_nxt_word ) { ps_cabac -> u4_ofst = 0 ;,0
712,"<S2SV_ModStart> ; save_text_from_text_view ( g_tv_comment <S2SV_ModEnd>, FILENAME_COMMENT )",0
713,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ;",0
714,<S2SV_ModStart> -> last_line_has_list_loosening_effect ; if ( prev_line_has_list_loosening_effect && <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> indent <S2SV_ModStart> -> last_line_has_list_loosening_effect && <S2SV_ModEnd> line -> type <S2SV_ModStart> -> last_line_has_list_loosening_effect &&,0
715,"<S2SV_ModStart>, extent ; size_t width, height ; size_t depth ; size_t length ; size_t <S2SV_ModEnd> count, y <S2SV_ModStart> count = sun_info. width * sun_info. height * sun_info. depth * sun_info. length ; if ( count < 0 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; width = sun_info. width * sun_info. width ; height = sun_info. height * sun_info. depth * sun_info. depth ; depth = sun_info. depth * sun_info. depth ; if ( length > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( count < 0 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; height = sun_info. height * sun_info. depth * sun_info. depth * sun_info. length ; if ( sun_info. length > sun_info. length ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > sun_info. length ) ThrowReaderException",0
716,"<S2SV_ModStart> client, hdb_entry_ex <S2SV_ModEnd> * krbtgt, <S2SV_ModStart> client_principal, hdb_entry_ex <S2SV_ModEnd> * krbtgt, <S2SV_ModStart>, hdb_entry_ex <S2SV_ModEnd> * krbtgt, <S2SV_ModStart>, hdb_entry_ex <S2SV_ModEnd> * krbtgt,",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> -> loc_addr ; <S2SV_ModEnd> ireq -> opt,0
719,<S2SV_ModStart> struct xmlparser parser ; <S2SV_ModEnd> data -> l_tail,0
720,"<S2SV_ModStart> offset!= 0 && skb_transport_offset ( skb ) + tlen > <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart>, csum_partial ( skb_transport_header ( skb ) + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( skb_transport_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> offset, 0 ) <S2SV_ModEnd> ) ; put_cmsg <S2SV_ModStart> SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), <S2SV_ModEnd> & csum )",0
721,<S2SV_ModStart> pfn ) ; <S2SV_ModEnd> } gfn +=,0
722,"<S2SV_ModStart> } ; memcpy ( & b [ 4 ], cmd -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len > sizeof ( b ) - ( 6 - cmd -> msg_len ) ) return - EINVAL ;",0
723,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct * <S2SV_ModStart> = PERF_EVENT_STATE_OFF ; <S2SV_ModEnd> } raw_spin_lock_irq ( <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 2 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> value ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) | ( buffer [ 0 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> value ; } <S2SV_ModStart> value = ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 0 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 2 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> value ; },0
725,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS",0
726,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> flags -> deblocking_level <S2SV_ModStart>. deblocking_level ; <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> display_mb_modes_flag = <S2SV_ModEnd> ctx -> dbg_color_mb_modes_flag <S2SV_ModStart> -> display_b_modes_flag = <S2SV_ModEnd> ctx -> dbg_color_b_modes_flag,0
727,"<S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely (! RING_GET_REQUEST ( & vif -> tx, cons ) ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ; vif -> tx. req_cons = ++ cons ; if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ;",0
728,<S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len < sizeof ( struct sadb_msg ) ) { kfree_skb ( skb_out ) ; return - ENOBUFS ; },0
729,<S2SV_ModStart> return ; <S2SV_ModEnd> r1. tstamp,0
730,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> many <S2SV_blank> results"" ) ; if ( size == 0 ) { luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; lua_pop ( L, 1 ) ; size = lua_tonumber ( L, - 1 ) ; size = lua_tonumber ( L, - 1 ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> many <S2SV_blank> results"" ) ; if ( size == 0 ) { luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; lua_pop ( L, 1 ) ; size = lua_tonumber ( L, - 1 ) ; size = lua_tonumber ( L, - 1 ) ; luaL_argcheck ( L, pos + size",0
731,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> %u"", msg_len ) ) ; goto trunc ; } if ( msg_len > sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> %u"", msg_len ) ) ; goto trunc ; } if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> %u"", msg_len ) ) ; goto trunc ; } if ( msg_len > sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> %u"", msg_len ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i,",0
732,"<S2SV_ModStart> ; int n ; if ( len < sizeof ( struct oz_multiple_fixed ) + 1 ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, NULL, 0 ) ; return ; } n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, NULL, 0 ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, NULL, 0 ) ; } break ; case OZ_DATA",0
733,<S2SV_ModStart> end_time ) { VP8_COMMON * cm = & cpi -> common ; <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; if ( cpi -> active_map_enabled && cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( cpi -> oxcf. lag_in_frames < 2 ) { dealloc_raw_frame_buffers ( cpi ) ; dealloc_raw_frame_buffers ( cpi,0
734,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; fs_logger2 ( ""clone"", dest ) ; _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; fs_logger2 ( ""clone"", dest ) ; _exit ( 0 ) ; } pid_t rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ;",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> -> synth_cos_tab ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer ->,0
739,"<S2SV_ModStart> ] ; image_w = get_ushort ( & tga [ 8 ] ) ; image_h = get_ushort ( & tga [ 10 ] ) ; pixel_depth = get_ushort ( & tga [ 12 ] ) ; image_desc = tga [ 13 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_w > image_h ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ushort ( & tga [ 14 ] ) ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_w > image_h ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { if <S2SV_ModEnd> ( CPUCLOCK_WHICH ( <S2SV_ModStart> which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart>. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else { tp -> tv_sec = 0 ; } <S2SV_ModEnd> tp -> tv_nsec <S2SV_ModStart> tp ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_authz_provider_spec * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; if ( prov_spec == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02313 ) ""Missing <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> spec"" ) ; return AUTHZ_GENERAL_ERROR ; } prov_spec = parsed_require_line ; prov_spec = parsed_require_line ; if ( prov_spec == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider"" ) ; return AUTHZ_GENERAL_ERROR ; } spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r",0
744,<S2SV_ModStart> * prev ; unsigned <S2SV_ModEnd> long error ; <S2SV_ModStart> ; error = security_mmap_addr <S2SV_ModEnd> ( address ),0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( & inode -> i_mode, & mode, & acl ) ; error = posix_acl_update_mode ( & inode -> i_mode, <S2SV_ModEnd> & mode ) <S2SV_ModStart> <= 0 ) { posix_acl_release_mode ( & inode -> i_mode, & acl ) ; error = xfs_set_mode ( inode, mode ) ; if ( error ) return error ; <S2SV_ModEnd> acl = NULL <S2SV_ModStart> <= 0 ) <S2SV_ModEnd> return error ;",0
746,"<S2SV_ModStart> unsigned long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> mountflags & ~ MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart> mountflags & ~ MS_BIND <S2SV_ModEnd> ) ) {",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr,0
749,<S2SV_ModStart>! proto_end ) return 0 <S2SV_ModEnd> ; cp =,0
750,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
751,"<S2SV_ModStart> -> read && <S2SV_ModEnd> ret > 0 <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> usb_ep_free_request ( io_data <S2SV_ModStart> -> ep, io_data -> req ) ; <S2SV_ModEnd> io_data -> kiocb",0
752,<S2SV_ModStart> ; if ( <S2SV_ModEnd> rt -> rt_flags <S2SV_ModStart> &&! skb_sec_path ( skb ) <S2SV_ModEnd> ) ip_rt_send_redirect (,0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; struct trusted_key_payload * p = rcu_dereference_protected ( key -> payload. data, lockdep_is_held ( & key -> sem ) ) ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; dump_payload ( p ) ; dump_payload ( p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_options ( new_o ) ; dump_payload ( new_p ) ; dump_payload ( new_p",0
755,"<S2SV_ModStart> - 1 ; } if ( c < 0 ) { jas_deprecated ( ""negative <S2SV_blank> number <S2SV_blank> of <S2SV_blank> characters <S2SV_blank> in <S2SV_blank> bmp_getint32"" ) ; return - 1 ; }",0
756,<S2SV_ModStart> int lci_o ; mutex_lock ( & rose_loopback_neigh -> lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & rose_loopback_neigh -> lock ) ; <S2SV_ModStart> 4 ) ; mutex_unlock ( & rose_loopback_neigh -> lock ) ;,0
757,<S2SV_ModStart> goto out_free ; <S2SV_ModEnd> r = - <S2SV_ModStart> goto out_free ; <S2SV_ModEnd> r = - <S2SV_ModStart> goto out_free ; <S2SV_ModEnd> r = - <S2SV_ModStart> goto out_free ; <S2SV_ModEnd> kvm_free_memory_region ( kvm <S2SV_ModStart> goto out_free ; <S2SV_ModEnd> kvm_free_memory_region ( kvm <S2SV_ModStart> goto out_free ; <S2SV_ModEnd> kvm_free_memory_region ( kvm <S2SV_ModStart> goto out_free ; <S2SV_ModEnd> kvm_free_memory_region ( kvm,0
758,<S2SV_ModStart> indev!= NULL &&! nf_ct_is_confirmed ( ct ) ) { rcu_read_unlock ( ) ; return NF_DROP ; },0
759,"<S2SV_ModStart> ; end = fdt_offset_addr <S2SV_ModEnd> ( fdt ) <S2SV_ModStart> ; switch ( tag ) { case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len",0
760,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
761,"<S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
764,"<S2SV_ModStart> -> priv ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", rlen ) ; return - EOPNOTSUPP ; } if ( wbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank>",0
765,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; kfree ( new_root_item ) ; kfree ( path ) ; path = NULL ; dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( path ) ; path = NULL ; goto root_item_alloc_fail ; } new_root_item = kmalloc ( sizeof ( * new_root_item ), GFP_NOFS ) ; if (! new_root_item ) { kfree ( new_root_item ) ; kfree ( path ) ; kfree ( path ) ; path = NULL ; dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( path ) ; path = NULL ; goto root_item_alloc_fail ; } new_root_item = kmalloc ( sizeof ( * new_root_item ) ; if (! new_root_item ) { kfree ( new_root_item ) ; kfree ( new_root_item ) ; } kfree ( new_root_item ) ; kfree ( path",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) <S2SV_ModEnd> ; spin_lock ( <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
770,"<S2SV_ModStart> channel_map!= NULL ) { <S2SV_ModEnd> size_t chanmap_size = <S2SV_ModStart> channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; memset ( psf -> channel_map, 0, chanmap_size ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ;",0
771,"<S2SV_ModStart> { if ( check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4, sf -> x_w, sf -> y_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] [",0
772,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ; if ( ms -> buffer_size_longs > size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,<S2SV_ModStart> ( e -> target_offset <S2SV_ModEnd> == sizeof ( <S2SV_ModStart> ip6t_entry ) && <S2SV_ModEnd> unconditional ( & <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ),0
774,"<S2SV_ModStart> -> xrefs = calloc ( <S2SV_ModEnd> pdf -> n_xrefs <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart>! sock || ( count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return ; <S2SV_ModEnd> opt = xchg <S2SV_ModStart> NULL ) ; rcu_assign_pointer ( np -> opt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> <S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
777,<S2SV_ModStart> = 0 ; BIO * <S2SV_ModEnd> tmpin = NULL <S2SV_ModStart> tmpin = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> return 0 ;,0
778,<S2SV_ModStart> ; src_info. ipi6_opt_len = <S2SV_ModEnd> np -> mcastopt <S2SV_ModStart> np -> mcastopt. bits. <S2SV_ModEnd> pktinfo ; src_info <S2SV_ModStart> np -> mcastopt. bits. <S2SV_ModEnd> pktinfo ; src_info <S2SV_ModStart> np -> mcastopt. bits. <S2SV_ModEnd> pktinfo ; src_info <S2SV_ModStart> np -> mcastopt. bits. <S2SV_ModEnd> pktinfo ; },0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
780,"<S2SV_ModStart> cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command ( ""chanserv"", & cs_flags ) ; service_named_unbind_command",0
781,"<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> info ; netdev_notifier_info_init ( <S2SV_ModEnd> & info, <S2SV_ModStart> dev ) ; return masq_device_event ( this, event, <S2SV_ModEnd> & info )",0
782,<S2SV_ModStart> ( current -> mm <S2SV_ModEnd> ) { leave_mm <S2SV_ModStart> ( smp_processor_id ( ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( smp_processor_id ( ) <S2SV_ModEnd> ) ; },0
783,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; <S2SV_ModEnd> ovpsnr = sse_to_psnr,0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ] = fgetc ( fp ) ; if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } if ( foundit == 1 && ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) ) { fclose ( fp ) ; return NULL ; } temp [ i ] = 0 ; if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; },0
785,<S2SV_ModStart> task ) { if ( <S2SV_ModEnd> task -> slow_task,0
786,"<S2SV_ModStart> { dst_name = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; }",0
787,"<S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> address"" ) ; return - 1 ; }",0
788,"<S2SV_ModStart> plist_data_t ) ; if ( * * object + size > bplist -> length ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } if ( * * object + size > bplist -> length ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x, <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; }",0
789,"<S2SV_ModStart> init ( ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ; } ksz8851WriteReg ( interface, KSZ8851_MARH, h",0
790,<S2SV_ModStart> all_channels_lock ) ; <S2SV_ModEnd> wake_up_interruptible ( &,0
791,"<S2SV_ModStart> flags ) { struct btrfs_root * root = BTRFS_I ( inode ) -> root ; struct btrfs_dir_item * di ; struct btrfs_dir_item * dir_item ; <S2SV_ModStart> & XATTR_REPLACE ) { dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } if (! di &&! value ) goto out ; btrfs_release_path ( path ) ; <S2SV_ModEnd> di = btrfs_lookup_xattr <S2SV_ModStart> trans, root",0
792,<S2SV_ModStart> if ( op -> len < 1 || op -> len > buf_len ) return - 1 ; if ( op -> len < 1 || op -> len > buf_len ) return - 1 ;,0
793,<S2SV_ModStart> client ) ; g_object_unref ( & client -> proxy ) ; g_object_unref ( & client -> client_side ) ; g_object_unref ( & client -> bus_side ) ;,0
794,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_REVOKED, & key -> flags ) ) return - ENOKEY ; if (",0
796,"<S2SV_ModStart> ip ++ ; if ( likely (! HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { goto input_overrun ; } t += 15 + * ip ++ ; } if ( likely (! HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) ) { goto input_overrun ; } t += 3 ; copy_literal_run : # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) { unsigned char * ie = ip + t ; unsigned char * oe = op + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; state = 4 ; continue ; } else if ( state == 4 ) { next = t & 3 ; m_pos = op - 1 ; m_pos -= t >> 2 ; TEST_LB ( m_pos ) ; op [ 0 ] = m_pos [ 0 ] ; op [",0
797,"<S2SV_ModStart> if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO_UNIT_NAME ) ; noffset =",0
798,<S2SV_ModStart> ) { vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> goto out6 ; if (! vmx_msr_bitmap_legacy_x2apic ) { r = - ENOMEM ; goto out3 ; },0
800,"<S2SV_ModStart> -> sh_name ] ; if ( sdb_num_get ( sdb, ""entries"", 0 ) < 0 || sdb_num_get ( sdb, ""offset"", 0 ) < 0 || sdb_num_get ( sdb, ""link"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( sdb, ""link_section_name"", 0 ) < 0 || sdb_num_get ( s",0
801,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (",0
802,<S2SV_ModStart> )? ( rc <S2SV_ModEnd> -> baseline_gf_interval * <S2SV_ModStart> -> baseline_gf_interval * ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + <S2SV_ModEnd> af_ratio - 1 <S2SV_ModStart> 1 ) : ( rc <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> -> av_per_frame_bandwidth * ( rc <S2SV_ModEnd> -> baseline_gf_interval +,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted""",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,"<S2SV_ModStart> -= INDENT_INCR ; if ( tbl -> indent < 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else if ( tbl -> indent > CHAR_MAX ) { check_minimum0 ( tbl, CHAR_MAX ) ; addcontentssize ( tbl, offset ) ; } else { check_minimum0 ( tbl, CHAR_MAX ) ; addcontentssize ( tbl, offset ) ; }",0
806,"<S2SV_ModStart> ; if ( e >= b && e < CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u""\\n"", line, b, e, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u"" ""u"" ""\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_",0
807,<S2SV_ModStart> } # endif # define YYMAXDEPTH ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yyssp = ( N ) ( yyssa -= ( N ) ) int yyssp = ( N ) ( yyssa -= ( N ) ) int yyssp = ( N ) ( yyssp -= ( N ) ) int yyvs = ( ( N ) ) ; if ( yyss + 1 <= ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYPOPSTACK ( N ) ( yyssa -= ( N ) ) int yyss = ( N ) ( yyssa - ( N ) ) ; if ( yyss + 1 <= ( N ) ( yyssp -= ( N ) ) int yyss = ( N ) ( yyss + 1 ) ; if ( yyss + 1 <= ( N ) ) { int yylen = ( N ) ( yyvsp -= ( N ) ) ; int yylen = 0 ; int yylen =,0
808,"<S2SV_ModStart> ib ] ; memset ( dequant_ptr, 0, sizeof ( dequant_ptr ) ) ; memset ( dqcoeff_ptr, 0, sizeof ( dqcoeff_ptr ) ) ;",0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) && <S2SV_ModStart>! test_bit ( KEY_FLAG_NEGATIVE <S2SV_ModEnd>, & key",0
811,<S2SV_ModStart> { struct hci_filter <S2SV_ModEnd> * f =,0
812,"<S2SV_ModStart> decrypt_cb ) { int <S2SV_ModEnd> n = ( <S2SV_ModStart> data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart>. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
815,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fib_size ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if (",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; sctp_association_put ( asoc ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( <S2SV_ModEnd> transport ) ;",0
818,"<S2SV_ModStart>, size_t input_size, size_t <S2SV_ModEnd> flags, RE_MATCH_CALLBACK_FUNC <S2SV_ModStart> { action = ACTION_KILL_TAIL ; break ; } if ( bytes_matched >= max_bytes_matched ) { action = ACTION_CONTINUE ; break ; } <S2SV_ModStart> { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; bytes_matched = 0 ; error = _yr_re_fiber_sync ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ; <S2SV_ModStart> = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; bytes_matched = 0 ; <S2SV_ModStart> = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; error = yr_re_fiber_sync ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ; fibers. head = fiber ; fibers. tail = next_fiber",0
819,"<S2SV_ModStart> * returnrate, int <S2SV_ModEnd> returndistortion, int <S2SV_ModStart>, int * returnintra, int * returnintra_tteob, int * returnintra_done <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # if <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # if <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart> best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # if CONFIG_VP9_HIGHBITDEPTH",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_IOIO_PROT ) ; set_intercept ( svm, INTERCEPT_MSR_PROT ) ;",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; if ( statbuf. st_size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; h -> size = UINT64_MAX / sizeof ( * h -> hdr ) ; if ( h -> size < 0 || h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) ) goto error ; if ( h -> size > UINT64_MAX / sizeof ( * h -> hdr ) > UINT64_MAX / sizeof ( * h -> hdr ) ) goto,0
822,"<S2SV_ModStart> const cdf_stream_t * sst <S2SV_ModEnd>, const uint64_t <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == -",0
823,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id ; WORD32 <S2SV_ModEnd> i2_max_frm_num ; WORD32 <S2SV_ModStart> u1_seq_parameter_set_id ) ; <S2SV_ModEnd> i2_max_frm_num = ih264d_get_max_frm_num <S2SV_ModStart> i2_max_frm_num ) ; <S2SV_ModEnd> i4_num_reorder_frames = ih264d_get_num_reorder_frames ( <S2SV_ModStart> i2_max_frm_num ) ; <S2SV_ModEnd> i4_pic_height_in_map_units_minus1 = ih264d_get_pic_height_in_map_units_minus1 <S2SV_ModStart> i4_pic_ht ) ; <S2SV_ModEnd> i4_num_reorder_frames = ih264d_get_num_reorder_frames ( <S2SV_ModStart> i4_num_reorder_frames ) ; <S2SV_ModEnd> i4_num_reorder_frames = ih264d_get_num_reorder_frames ( i4_pic_height_in_map_units_minus1",0
824,<S2SV_ModStart> -> palette ) ; if ( err ) return - EFAULT ;,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const svc_params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; svc_params -> <S2SV_ModEnd> spatial_layer_id = params <S2SV_ModStart> temporal_layer ; svc_params <S2SV_ModEnd> -> lst_fb_idx = <S2SV_ModStart> -> lst_fb_idx ; svc_params -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = svc_params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = svc_params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf,",0
826,"<S2SV_ModStart> ) ) ; if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; goto err ; }",0
827,"<S2SV_ModStart> { uint16 bitspersample, samplesperpixel, compression ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; uint32 width, length ; uint32 width, length ; uint32 width, length ; uint32 width, length ; uint32 width, length ; uint32 width, length ; uint32 width, length ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> %d\\n"", TIFFFileName ( in ), length ) ; return FALSE ; } if ( width == ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match <S2SV_blank> %d\\n"", TIFFFileName ( in ), length ) ; return FALSE ; } if ( width == ( uint32 ) - 1 ) TIFF",0
828,"<S2SV_ModStart> { # if! defined ( HAVE_LSTAT ) || ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UN",0
829,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
830,"<S2SV_ModStart> sbi ) ; struct udf_entry * ie ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!loc\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( fe ->",0
831,<S2SV_ModStart> TX_SIZE tx_size_uv = mbmi -> tx_size_uv <S2SV_ModEnd> ; const int <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
832,"<S2SV_ModStart> dst_size ) { const uint8_t * const name = ff_amf_get_name ( name ) ; const uint8_t * const data_end = ff_amf_get_data_end ( data, data_end ) ; if ( data_end - data < 3 ) return - 1 ; if ( data_end - data < 3 ) return - 1 ; if ( data_end - data < 3 ) return - 1 ; if ( data_end - data < 3 ) return - 1 ; if ( data_end - data < 3 ) return - 1 ; data ++ ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", *",0
833,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave ( & fq -> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ;",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return TIFF_swabHorDiff16 <S2SV_ModEnd> ( tif, <S2SV_ModStart> wc ) ;",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; int err ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) <S2SV_ModEnd> ) ; if",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl <S2SV_ModEnd> ; pid_t pid <S2SV_ModStart> pid ) ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; <S2SV_ModStart> instance, ( long unsigned ) pid <S2SV_ModEnd> ) ; if",0
840,"<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pReplyData ;",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
843,"<S2SV_ModStart> OP_JUMP ) ; if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } else { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; }",0
844,"<S2SV_ModStart> { if ( l_i < 3 || l_i >= l_line_length ) { LIBXSMM_HANDLE_ERROR ( io_generated_code, LIBXSMM_ERR_CSC_READ_LEN ) ; return ; } if ( l_i >= l_line_length ) { LIBXSMM_HANDLE_ERROR ( io_generated_code, LIBXSMM_ERR_CSC_READ_LEN ) ; return ; } if ( l_i < 3 ) { LIBXSMM_HANDLE_ERROR ( io_generated_code, LIBXSMM_ERR_CSC_READ_LEN ) ; return ; } if ( l_i < l_line_length ) { LIBXSMM_HANDLE_ERROR ( io_generated_code, LIBXSMM_ERR_CSC_READ_LEN ) ; return ; } if ( l_i < l_line_length ) { LIBXSMM_HANDLE_ERROR ( io_generated_code, LIBXSMM_ERR_CSC_READ_LEN ) ; return ; }",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> int length ; <S2SV_ModStart> int length ; RD_BOOL is_fastpath ; uint8 fastpath_hdr ; logger ( Protocol, Debug, ""%s()"", __func__ ) ; s = iso_recv ( & is_fastpath, & fastpath_hdr ) ; if ( s == NULL ) return False ; result = in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_RESULT, & length ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ;",0
847,<S2SV_ModStart> ; if ( stkt_server ) { stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; } else { stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; } else { stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_server ; stkt_server = stkt_,0
848,<S2SV_ModStart> ) ) { if ( ( c >= 0xC0 ) && ( c <= 0xD8 ) ) || ( ( c >= 0xF0 ) && ( c <= 0xF8 ) ) || ( ( c >= 0x370 ) && ( c <= 0x37F ) ) || ( ( c >= 0x218F ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || ( ( c >= 0xFDF0 ) && ( c <= 0xFDF0 ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFDF0 ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xFDFF ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xFDFF ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xFDFF ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFDF0 ) && (,0
849,"<S2SV_ModStart> -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" <S2SV_ModEnd> ) ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> idx ++ ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
852,"<S2SV_ModStart> } } } return send_msg ( g, ""E01"" ) ;",0
853,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ;",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi -> <S2SV_ModStart> mb_row, mb_col <S2SV_ModEnd>, pbi ->",0
856,<S2SV_ModStart> = AF_TIPC ; addr -> addr. id. ref = msg_origport ( msg ) ; addr -> addr. id. node = msg_orignode ( msg ) ;,0
857,<S2SV_ModStart> -> userspace_addr & ( <S2SV_ModEnd> PAGE_SIZE - 1 <S2SV_ModStart> -> userspace_addr & ( <S2SV_ModEnd> PAGE_SIZE - 1 <S2SV_ModStart> -> userspace_addr & ( <S2SV_ModEnd> PAGE_SIZE - 1 <S2SV_ModStart> -> userspace_addr & ( <S2SV_ModEnd> PAGE_SIZE - 1,0
858,"<S2SV_ModStart> NULL ) ; } quantum_info = CloneQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
859,"<S2SV_ModStart> = 0 ; if ( use_ssl ) { if (! use_proxy ) { if (! use_proxy ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""SSL <S2SV_blank> proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } } else { if (! use_proxy ) { if (! use_proxy ) { if (! use_proxy ) { if (! use_proxy ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""SSL <S2SV_blank> proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } } else { if (! use_proxy ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""SSL <S2SV_blank> proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } } else { if (! use_proxy ) { if (! use_proxy ) { if (! use_proxy ) { php_stream_context_set_option ( context, wrapper -> wops -> label, ""proxy_is_not_supported"" ) { return NULL ; } } else { if (! use_proxy",0
860,"<S2SV_ModStart> len ) { PyObject * w ; int kind ; int data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; i = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = decode_utf8 ( c, & s, end ) ; p += 5 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ;",0
861,"<S2SV_ModStart> = 0 ; if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( strict_mode == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record",0
862,"<S2SV_ModStart> WaveHeader ; uint32_t <S2SV_ModEnd> bcount ; int64_t <S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize > DFF_CHUNK_MAX_SIZE ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
864,<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart> int setimes, targisdir <S2SV_ModEnd>, wrerrno = <S2SV_ModStart> wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> wrerrno = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> wrerrno = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> wrerrno = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> wrerrno = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> wrerrno = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> wrerrno = 1 <S2SV_ModEnd> ; if (",0
866,"<S2SV_ModStart> } else if ( myentity_find_ext ( target ) == NULL ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> registered."" ), channel ) ; return ; } if ( myentity_find_ext ( target ) == NULL ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> registered."" ), channel ) ; return ; } if ( myentity_find_ext ( target ) == NULL ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( myentity_find_ext ( target ) == NULL ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> registered."" ), channel ) ; return ; } if ( myentity_find_ext ( target ) == NULL ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel",0
867,"<S2SV_ModStart> -> buffer ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ;",0
868,"<S2SV_ModStart> goto error ; if (! ( ast -> sub_ctx = avformat_alloc_context ( ) ) ) goto error ; if (! ast -> sub_ctx -> pb ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if (! ast -> sub_ctx -> pb ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if (! ast -> sub_ctx -> pb ) goto error ; ast -> sub_ctx -> pb = pb ; if (! ast -> sub_ctx -> pb ) goto error ;",0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0, need_authcon = 0, local_rcache = 0, local_authcon = 0, problem = 0 ; if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else if ( strcmp ( inbuf. data, appl_version ) ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( ticket &&! problem ) return ( problem ) ; if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( flags & KRB5",0
870,"<S2SV_ModStart> write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; if (",0
872,"<S2SV_ModStart> = frametype ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_",0
873,<S2SV_ModStart> = new_ns ; if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; },0
874,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_FRAME_BUFFERS,0
875,<S2SV_ModStart> get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; if ( iova + length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> mem -> iova + length <S2SV_ModEnd> ) ) return,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) )",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> void * cb_data",0
879,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec == 0 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; }",0
880,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> void buffer_pipe_buf_get ( struct pipe_inode_info * pipe, <S2SV_ModStart> -> ref ++ ; return 0 ;",0
881,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs,0
882,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
883,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_hash_del ( sk ) ;,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> } ps_dec ->,0
885,<S2SV_ModStart> ; if ( unlikely (,0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode,",0
887,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct fsnotify_group * <S2SV_ModEnd> inotify_new_group ( struct <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = user ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return group ;,0
888,<S2SV_ModStart> in -> data [ p ] && in -> linesize [ p ],0
889,<S2SV_ModStart> [ 0 ] && screen -> buffers [ 1 ] && screen -> sb_buffer,0
890,"<S2SV_ModStart>, tn_off ) ; if ( tn_off >= size ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> map\\n"", value_regno ) ; return - EACCES ; }",0
891,"<S2SV_ModStart> = 0 ; if ( TIFFGetFieldDefaulted ( in, TIFFTAG_NUM_STRIPS, & nstrips ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
892,"<S2SV_ModStart> char need_to_append_dot = ( base_name [ base_len - 1 ] == '.' || base_name [ base_len - 1 ] == '/' )? 0 : 1 ; struct search_domain * const dom ; if ( state -> head == NULL ) { EVUTIL_ASSERT ( 0 ) ; return NULL ; } for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const char * const newname = ( char * ) mm_malloc ( sizeof ( struct search_domain ) ) ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if (! newname ) return NULL ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; if ( need_to_append_dot ) newname [ base_len + need_to_append_dot ] = 0 ; } else { memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base",0
893,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY (,0
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, number_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, number_planes_filled, number_colormaps, number_planes_filled, <S2SV_ModStart>, number_planes_filled, number_colormaps, number_planes_filled, & pixel_info_length ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException (",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( rle <S2SV_ModStart> < S2SV_null> <S2SV_null> <S2SV_null>,0
897,<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCRYPT_I ( inode ) ; struct fscrypt_inode_info * ei = FSCRYPT_I ( inode ) ; if ( ei -> flags & FSCRYPT_NO_ENCRYPTION ) return - ENOENT ;,0
898,<S2SV_ModStart> value ) { <S2SV_ModEnd> httpSetRouteName ( state,0
899,"<S2SV_ModStart> -> match, <S2SV_ModEnd>. match_data.",0
900,<S2SV_ModStart> return - EOPNOTSUPP ; msg -> msg_namelen = 0,0
901,<S2SV_ModStart>! job_id ||! prev_hash <S2SV_ModEnd> ||! coinbase1 <S2SV_ModStart>! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { free ( header ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if (,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> * size ) ; if ( ptr ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; }",0
904,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER <S2SV_ModEnd> ( __dict__ ) <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___type__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = _Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = _BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } res = _BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null",0
906,"<S2SV_ModStart>, USB_DT_OTG, <S2SV_ModEnd> & desc )",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; case PERF_EVENT_SET_PERIOD : return perf_event_set_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_PERIOD : return perf_event_set_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_GET_FILTER : if ( arg!= - 1 ) { struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; fdput ( output ) ; ret = perf_event_set_filter ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_",0
908,<S2SV_ModStart> -> prr_delivered += delta <S2SV_ModEnd> ; if (,0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( skcipher ) crypto_free_skcipher ( skcipher ) ; return NULL ;",0
911,"<S2SV_ModStart> -> msg_len ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q",0
912,<S2SV_ModStart> tile_stride = FFALIGN ( <S2SV_ModEnd> c -> tile_width,0
913,<S2SV_ModStart> ; return Qnil ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
914,"<S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( JAS_BUFSIZE <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE,",0
915,"<S2SV_ModStart> ; register_savevm ( <S2SV_ModEnd> dev, ""stellaris_enet""",0
916,"<S2SV_ModStart> p ) { register <S2SV_ModEnd> u_int length = <S2SV_ModStart> len ) ; ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ;",0
917,<S2SV_ModStart> = 0 ; if ( cifs_sb -> mnt_cifs_flags & MS_RDONLY ) { rc = - EROFS ; goto out ; },0
918,<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
919,"<S2SV_ModStart> -> uri_filter ) { raptor_sax2_set_uri_filter ( rdf_xml_parser -> sax2, NULL, rdf_parser -> uri_filter_user_data ) ; raptor_sax2_parse_start ( rdf_xml_parser -> sax2, uri ) ; if ( rdf_xml_parser -> id_set ) { raptor_free_id_set ( rdf_xml_parser -> id_set ) ; rdf_xml_parser -> id_set = NULL ; }",0
920,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
921,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE <S2SV_ModEnd> ; } },0
922,<S2SV_ModStart> if (! nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return ( ssize_t ) inlen ; },0
923,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ;,0
924,<S2SV_ModStart> += dif ; kfree ( opt2 ) ;,0
925,<S2SV_ModStart> intel_arch_events_quirk ) ; <S2SV_ModEnd> x86_add_quirk ( intel_arch_events_quirk,0
926,<S2SV_ModStart> ; int n_read = <S2SV_ModEnd> n_read / r <S2SV_ModStart> -> part_size ; if ( n_read < 0 ) goto done ; if ( n_read > r -> end - r -> begin ) goto done ; if (,0
927,<S2SV_ModStart> ; u32 now <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp <S2SV_ModEnd> = now ; <S2SV_ModStart> challenge_timestamp = now <S2SV_ModEnd> ; challenge_count =,0
928,<S2SV_ModStart> struct llc_pktinfo info ; struct net_device * dev = llc_sk ( skb -> sk ) -> dev ; info. lpi_sap = dev -> ifindex ; info. lpi_mac = dev -> dev_addr ; info.,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * * tp <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> ] ; const vpx_extra_bit * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v = v >> ( n - len ) ; v =",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> -> version = le16_to_cpu <S2SV_ModEnd> ( hdesc -> <S2SV_ModStart> -> bcdHID ) ; if (! hdesc -> bNumDescriptors ) { dbg_hid ( ""no <S2SV_blank> descriptor <S2SV_blank> present\\n"" ) ; return - ENODEV ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } <S2SV_ModEnd> if ( hdesc <S2SV_ModStart> -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorType ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( """,0
933,"<S2SV_ModStart> { struct ikev2_id id <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, dumphex ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModEnd> idtype_len = id_len <S2SV_ModStart> case ID_DER_ASN1_DN : ND_PRINT ( ( ndo, "" <S2SV_blank> dn:"" ) ) ; dumphex = 1 ; break ; case ID_DER_ASN1_DN_EXT : ND_PRINT ( ( ndo, "" <S2SV_blank> asn1:"" ) ) ; dumphex = 1 ; break ; case ID_DER_ASN1_EXT : ND_PRINT ( ( ndo, "" <S2SV_blank> asn1",0
934,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> -> robust_list ) ) <S2SV_ModEnd> exit_robust_list ( tsk,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> void * data <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> name = path_name <S2SV_ModEnd> ( path, <S2SV_ModStart> char * ) data <S2SV_ModEnd> ; add_preferred_base_object ( <S2SV_ModStart> obj -> flags |= OBJECT_ADDED ; free ( ( char * ) name ) ; } <S2SV_null> <S2SV_null>",0
936,"<S2SV_ModStart> ) ) { jas_log ( ""jas_error"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_error"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_log(jas_error)"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_log(jas_error)"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_error"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_error"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_log(jas_error)"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_log(jas_error)"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_error"", ""mif_process_cmpt"" ) ; jas_log ( ""jas_error"", ""mif_process_cmpt"" ) ;",0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb_context ) ; <S2SV_ModStart> err_free_urb_to_pipe : usb_unanchor_urb ( urb ) ;,0
938,"<S2SV_ModStart>, yt0_jmp ; WORD32 xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_l2_0, x_h2_1 ; WORD32 x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_",0
939,<S2SV_ModStart> ; if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; if ( unlikely ( ( tag & 0x1f ) == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_,0
940,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
941,"<S2SV_ModStart> mntent, mntent -> mnt_mountpoint <S2SV_ModEnd> ) ; }",0
942,"<S2SV_ModStart> ; if ( signature_len > sizeof ( buf ) ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len > sizeof ( buf ) ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len > sizeof ( buf ) ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", signature_len ) ; return FAILURE ; }",0
943,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ field -> value [ n ] - min ], 0, interrupt ) ; if ( field -> value [ n ] >= min && field -> value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 1, interrupt ) ; if ( field -> value [ n ] >=",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,<S2SV_ModStart> ; if ( argReg < 0 || ( argReg + ins_size ) > regsz ) { return ; },0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset <S2SV_ModEnd> ( env, <S2SV_ModStart> ( env, <S2SV_ModEnd> server_name_val, req_server_name <S2SV_ModStart> ( env, <S2SV_ModEnd> server_port_val, req_server_port",0
947,<S2SV_ModStart> valuelen ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
948,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> prepare_retval ; imp_sth_phb_t <S2SV_ModStart>, prepare_retval ; <S2SV_ModEnd> MYSQL_BIND * bind <S2SV_ModStart>, bind_end ; <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; <S2SV_ModEnd> if ( imp_sth <S2SV_ModStart> imp_dbh -> use_server_side_prepare ) { imp_sth -> is_async = FALSE ; imp_sth -> use_server_side_prepare = FALSE ; <S2SV_ModEnd> do_error ( sth <S2SV_ModStart>, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000""",0
949,<S2SV_ModStart> ; if ( <S2SV_ModEnd> key -> type,0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> { need *= 4 <S2SV_ModEnd> ; } ) <S2SV_ModStart> { need *= 4 <S2SV_ModEnd> ; } ),0
952,<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ;,0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( val < 0 ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; else strncpy <S2SV_ModEnd> ( str,",0
954,"<S2SV_ModStart> fscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, signtmp, <S2SV_ModStart>, prec, temp, & w, temp, & h )!= 9 ) { fclose ( f ) ; fprintf ( stderr, ""ERROR: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> the <S2SV_blank> right <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> from <S2SV_blank> the <S2SV_blank> fscanf() <S2SV_blank> function!\\n"" ) ; return NULL ; }",0
955,<S2SV_ModStart> ; if ( size > 0 && size < 8 ) { <S2SV_ModEnd> ASSERT ( result <S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
956,<S2SV_ModStart> cycles ) ; add_interrupt_bench ( crng_init <S2SV_ModEnd> ) ; if,0
957,"<S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
958,"<S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode &",0
959,,1
960,"<S2SV_ModStart> * output ; register <S2SV_ModStart> ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( MagickTrue ) ; }",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> fail : ext3_msg ( <S2SV_ModEnd> ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"",",0
963,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY (,0
964,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_tree convert_distribution ( vpx_tree i <S2SV_ModEnd>, vpx_tree branch_ct",0
965,"<S2SV_ModStart> s2 ) { return memcmp ( s1, s2, strlen ( s2 ) + 1U ) <S2SV_ModEnd> ; } <S2SV_null>",0
966,"<S2SV_ModStart> TRUE ; } gchar * to = xmpp_stanza_get_to ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; if (! to ) to = from ; Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; Jid * my_jid = jid_create ( my_jid ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return FALSE ; } gchar * from = xmpp_stanza_get_from ( message ) ; if (! from ) from = from ; Jid * my_jid = jid_create ( my_jid ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return FALSE ; } if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ;",0
967,<S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field (,0
968,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ;",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_v1_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_v1_new_iv <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_oakley <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_skeyid_e_nss <S2SV_ModStart> st -> st_oakley, <S2SV_ModEnd> st -> st_",0
972,<S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
973,"<S2SV_ModStart> map_zone * zone ; <S2SV_ModEnd> int x, <S2SV_ModStart> ; if ( <S2SV_ModEnd> tilemap = malloc <S2SV_ModStart> tilemap = malloc <S2SV_ModEnd> ( x_size * <S2SV_ModStart> tilemap = malloc <S2SV_ModEnd> ( x_size * <S2SV_ModStart> tilemap = malloc <S2SV_ModEnd> ( x_size * <S2SV_ModStart> tilemap = malloc <S2SV_ModEnd> ( x_size *",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"" <S2SV_ModEnd>, length ) <S2SV_ModStart> ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"" <S2SV_ModEnd>, cp [ <S2SV_ModStart> ( ndo, "","" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, "","" <S2SV_ModEnd> ) ) ;",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null> <S2SV_null>,0
976,<S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc. encode ( <S2SV_ModEnd> ctx -> priv,0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUF_SIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else { buf [ len ] ='<S2SV_blank>'; buf",0
978,<S2SV_ModStart> ; if ( chunk_num < 0 || chunk_num >= chm -> num_chunks ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } if ( chunk_num >= chm -> num_chunks ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } <S2SV_ModEnd> if (!,0
979,<S2SV_ModStart> = fake_used_mask ; mutex_lock ( & group_mutex ) ; <S2SV_ModStart> group_entry ) { mutex_unlock ( & group_mutex ) ; <S2SV_ModStart> group_entry ) { mutex_unlock ( & group_mutex ) ; <S2SV_ModStart> sibling ) ) { mutex_unlock ( & group_mutex ) ; return - EBUSY ; } } mutex_unlock ( & group_mutex ) ;,0
980,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) win_maximise ( - 2 ) ; else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; }",0
981,"<S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; } else { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; }",0
982,<S2SV_ModStart> ; if ( nsops > OABI_MAX_SEMSIZE,0
983,<S2SV_ModStart> ] ; for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq +=,0
984,"<S2SV_ModStart> blksz ) ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz > EXT2_LOG2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( log2_blksz > EXT2_LOG2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; }",0
985,<S2SV_ModStart> = 0 ; context. curX = i -> posX ; context. curY = i -> posY ; <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> = i -> <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if ( <S2SV_ModStart> frbuff. p4 <S2SV_ModEnd> ; if (,0
986,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""too <S2SV_blank> many <S2SV_blank> elements <S2SV_blank> in <S2SV_blank> section <S2SV_blank> %u\\n"", nelements ) ) ; goto out ; } if (",0
987,"<S2SV_ModStart> ; } } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; }",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> jslTokenAsString ( int <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STRING : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank> COMMENT"", len ) ; return ; } if ( token >= _LEX_OPERATOR_START && token < _LEX_R_LIST_",0
989,<S2SV_ModStart> mnt_instance ) ; mnt -> mnt_ns = NULL ;,0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ) ) ; if ( jas_stream_getrwcount ( in ) < 1 ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_pi_lyrno ( pi )",0
992,"<S2SV_ModStart> ; int err = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> ; uint32_t pos <S2SV_ModEnd> ; iinfo = <S2SV_ModStart> ; pos = udf_block_map ( inode, 0 ) ; down_read ( & iinfo -> i_data_sem ) ; if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
993,<S2SV_ModStart>. apic_base & X2APIC_HIGHBITDEPTH <S2SV_ModEnd> ) msr_bitmap =,0
994,"<S2SV_ModStart> if ( ent == NULL ) { st = ENOMEM ; goto cleanup ; } if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) goto cleanup ; } <S2SV_ModEnd> cleanup : ldap_msgfree",0
995,<S2SV_ModStart> -> i1_output_flag_present_flag = 1 <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> -> i1_output_flag_present_flag = 1 <S2SV_ModEnd> ; BITS_PARSE ( <S2SV_ModStart> -> i1_output_flag_present_flag = 1 <S2SV_ModEnd> ; BITS_PARSE (,0
996,<S2SV_ModStart> ) ) { if ( psf -> header. flags & SF_FLAG_ZERO_SIZE_BITS ) { psf -> header. flags &= ~ SF_FLAG_ZERO_SIZE_BITS ; } else { psf -> header. flags &= ~ SF_FLAG_ZERO_SIZE_BITS ; } <S2SV_ModStart> break ; } if ( psf -> header. flags & SF_FLAG_ZERO_SIZE_BITS ) { psf -> header. flags |= SF_FLAG_ZERO_SIZE_BITS ; } else if ( psf -> header. flags & SF_FLAG_ZERO_SIZE_BITS ) { psf -> header. flags &= ~ SF_FLAG_ZERO_SIZE_BITS ; psf -> header. flags |= SF_FLAG_ZERO_SIZE_BITS ; } else { psf -> header. flags &= ~ SF_FLAG_ZERO_SIZE_BITS ; } if ( psf -> header. flags & SF_FLAG_ZERO_SIZE_BITS ) { psf -> header. flags |= SF_FLAG_ZERO_SIZE_BITS ; } else if ( psf -> header. flags & SF_FLAG_ZERO_SIZE_BITS ) { psf -> header. flags &= ~ SF_FLAG_ZERO_SIZE_BITS ; psf -> header. flags |=,0
997,<S2SV_ModStart> ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len < 0 ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. len = CX24116_DISEQC_MSGLEN + i ; if ( toneburst == CX24116_DISEQC_MESGCACHE ) state -> dsec,0
998,"<S2SV_ModStart> ; } memcpy ( cinfo. handle, sco_pi ( sk ) -> conn -> hcon -> handle, sizeof ( cinfo. handle ) ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo. dev_class ) ) ; if ( copy_to_user ( optval, ( char * ) & cinfo, len ) ) err = - EFAULT ; break ; case",0
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ;",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; guint pktnum, hr, min, sec, csec ; char channel [ 10 ], direction [ 10 ] ; int i, hex_lines ; if ( num_items_scanned!= 7 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank>",0
1002,<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0,0
1003,"<S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key )",0
1004,"<S2SV_ModStart>. str, nla_len ( link [ TIPC_NLA_LINK_NAME ] ) <S2SV_ModEnd> ) ; return",0
1005,"<S2SV_ModStart> } else { spin_lock_irqsave ( & opipe -> lock, flags ) ; <S2SV_ModStart> obuf ) ; spin_unlock_irqrestore ( & opipe -> lock, flags ) ;",0
1006,"<S2SV_ModStart> == p -> tokenlen ||! jv_mem_safe_alloc ( p -> tokenbuf, p -> tokenlen, GFP_NOFS )",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x16 ; } } <S2SV_null>,0
1008,<S2SV_ModStart> | IFF_POINTOPOINT ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> ) ) return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if (,0
1010,<S2SV_ModStart> -> tp_on ) { if ( index >= ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) ) >> ( OPJ_UINT32 ) ( index + 1 ) >> ( OPJ_UINT32 ) ( index + 1 ) ) ) == OPJ_FALSE ) ) { if ( index >= ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( index + 1 ) >> ( OPJ_UINT32 ) ( index + 1 ) ) >> ( OPJ_UINT32 ) ( index + 1 ) ) ) == OPJ_FALSE ) ) { if ( index >= ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_U,0
1011,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, padata, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, padata, request, reply, cb, rock, moddata, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, rock, mod",0
1012,"<S2SV_ModStart> if ( CheckQuantumMemory ( count, quantum )!= MagickFalse ) return ( ( void * ) NULL ) ; if (",0
1013,"<S2SV_ModStart> -> stratum_port ; strncpy <S2SV_ModEnd> ( address, <S2SV_ModStart>, ""%s:%s"", <S2SV_ModEnd> url, port",0
1014,"<S2SV_ModStart> ; if ( len < 2 ) return error ( f, VORBIS_invalid_first_page ) ; if (",0
1015,<S2SV_ModStart> return 0 ; if ( head -> iov_len + len > XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
1016,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; spin_lock_irq ( & cluster -> cl_nodes_lock ) ; spin_unlock_irq ( & cluster -> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_PORT, & node",0
1017,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < 0 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < 0 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1019,<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes == NULL ) return 0,0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
1021,<S2SV_ModStart> -> attempted_bss_desc = NULL <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> -> attempted_bss_desc = NULL <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> -> attempted_bss_desc = NULL <S2SV_ModEnd> ; memset ( <S2SV_ModStart> -> attempted_bss_desc = NULL <S2SV_ModEnd> ; memcpy (,0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_ERROR, dp, XFS_ERRLEVEL_LOW, ""xfs_attr_shortform_list"" ) ; return XFS_ERROR ( EFSCORRUPTED ) ; } <S2SV_ModEnd> sfe = XFS_ATTR_SF_NEXTENTRY <S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_ERROR, dp, XFS_ILOG_ERROR, ""xfs_attr_shortform_list"" ) ; return XFS_ERROR ( EFSCORRUPTED ) ; } <S2SV_ModEnd> sfe = XFS_ATTR_SF_NEXTENTRY",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify_tail ( X509_CINF, a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1024,"<S2SV_ModStart> stime -> hrt ) ; ktime_set ( & stime -> ktime, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_ABS ) ; hrtimer_start_range_ns ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_ABS ) ;",0
1025,"<S2SV_ModStart> = data ; <S2SV_ModEnd> BT_DBG ( ""sk <S2SV_blank> %p"" <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) <S2SV_ModEnd> ; break ;",0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return ret ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = 0 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> filesize ) ; return - 1 ; }",0
1028,<S2SV_ModStart> u4_length ) { if ( ps_cur_slice -> u1_nal_ref_idc > IDR_SLICE_NAL ) { i_status = ERROR_INCOMPLETE_FRAME ; } else { i_status = ERROR_INCOMPLETE_FRAME ; },0
1029,"<S2SV_ModStart> tok ) ; if ( pair == 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; } else { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1030,"<S2SV_ModStart> } err = crypto_rng_set_seed <S2SV_ModEnd> ( tfm,",0
1031,"<S2SV_ModStart> = uid ; atomic_set ( & <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count, 1 <S2SV_ModEnd> ) ; spin_unlock_irq",0
1032,<S2SV_ModStart> ; msg_sys. msg_namelen = 0 ;,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> < len ; ++ i <S2SV_ModEnd> ) { ( <S2SV_ModStart> 32 ] ; } return <S2SV_ModEnd> 0 ; },0
1035,"<S2SV_ModStart> ; if ( path [ depth ]. p_hdr == NULL ) { err = ext4_ext_new_header ( inode, & eh ) ; if ( err ) { err = ext4_ext_new_inode ( handle, inode, & eh, bh_result ) ; goto out2 ; }",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModStart> = 0 ; fmode_t fmode = fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> )!= open_flags",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, page. width, page. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> speed > <S2SV_ModStart> 4 ) { vpx_bit_depth_t rate ; vpx_bit_t dist ; vpx_bit_depth_t bit_depth <S2SV_ModStart> = sse ; bit_depth_t bit_depth = pd -> dequant [ 1 ] >> 3 ; if ( bit_depth < 8 ) { vpx_bit_depth_t rate ; vpx_bit_depth_t dist ; vpx_bit_depth_t bit_depth = pd -> dequant [ 1 ] >> 3 ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist, & bit_depth ) ; rate_sum += rate ; dist_sum += dist ; } else { int rate",0
1041,<S2SV_ModStart> } } if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
1042,"<S2SV_ModStart> ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } if ( source_address_length > length ) { ND_",0
1043,<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ),0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) <S2SV_ModEnd> ; } <S2SV_null>",0
1045,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> array_size > PAGE_SIZE ) ) return - EINVAL ; if ( unlikely ( req -> base_size > PAGE_SIZE ) ) return - EINVAL ;,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> struct desc_struct * <S2SV_ModEnd> get_desc ( unsigned <S2SV_ModStart> = NULL ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart>. lock ) ; <S2SV_ModEnd> return desc ; <S2SV_ModStart> ( ldt && <S2SV_ModEnd> sel < ldt <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_,0
1047,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> extend_right ) ; memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1048,"<S2SV_ModStart> sctp_sockaddr_entry * bp ; struct sctp_sockaddr_entry * laddr = & t -> ipaddr ; union sctp_addr daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; sctp_scope_t scope ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if (",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2 = smb_fdata2 <S2SV_ModEnd> ( ndo,",0
1051,<S2SV_ModStart> -> protocol_timeout ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; },0
1052,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; if ( io < ie &&! ND_TTEST ( * io ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; if ( io < ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_",0
1053,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent )",0
1054,"<S2SV_ModStart> NULL ) ; rcu_assign_pointer ( ctx -> key, key ) ;",0
1055,<S2SV_ModStart> ; if (! edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) { kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> dead_leaf ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; if (! edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) { kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> dead_leaf ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; },0
1056,<S2SV_ModStart> = 11211 ; settings. <S2SV_ModEnd> udpport = 11211 <S2SV_ModStart> udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart> udpport = 11211 <S2SV_ModEnd> ; settings.,0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, <S2SV_ModEnd> x_e, x_f <S2SV_ModStart> ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_d = x_0 + x_2 ; x_a = x_1 + x_3 ; x_b = x_4 + x_6 ; x_c = x_5 + x_7 ; x_d = * x0 ++ ; x_d = * x0 ++ ; <S2SV_ModStart> ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; <S2SV_ModStart> ++ ; x",0
1059,"<S2SV_ModStart> { clips = kmalloc <S2SV_ModEnd> ( num_clips * <S2SV_ModStart> ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; }",0
1060,<S2SV_ModStart> ( unlikely ( pmd_none_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1061,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1062,"<S2SV_ModStart> ) ; } if ( i < len ) { r_cons_printf ( ""%s"", color ) ; return ; } if (",0
1063,"<S2SV_ModStart>, frames ; int width, height ; int target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( fin, & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( fout, & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout ) ;",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTmp = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; },0
1066,"<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> * prev ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> * next ; if (! acpi_gbl_module_code_list ) { ACPI_ERROR ( ( AE_INFO, ""No <S2SV_blank> module <S2SV_blank> code <S2SV_blank> defined\\n"" ) ) ; return_VOID ; } <S2SV_ModEnd> next = acpi_gbl_module_code_list",0
1067,"<S2SV_ModStart> } else { if (! strcmp ( arg, ""-rti"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack""",0
1068,"<S2SV_ModStart> num_fields ) { Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; int result ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; if (! result ) { Py_DECREF ( l ) ; return 0 ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result ; }",0
1069,<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> struct vpx_codec_alg_priv * <S2SV_ModStart> priv ) { vpx_codec_alg_priv_t * <S2SV_ModEnd> priv ; vpx_codec_enc_cfg_t <S2SV_ModStart> enc ) { vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg ; unsigned <S2SV_ModStart> i ++ ) { vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = & <S2SV_ModStart> i ++ ) { vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = & <S2SV_ModStart> cfg = & <S2SV_ModEnd> extracfg_map [ i <S2SV_ModStart> i ++ ) { vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = & <S2SV_ModStart> cfg = & <S2SV_ModEnd> extracfg_map [ i <S2SV_ModStart> i ++ ) { vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = & <S2SV_ModStart> cfg ; vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = & <S2SV_ModStart> i ++ ) { vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = & <S2SV_ModStart> cfg ; vpx_codec_enc_cfg_t * <S2SV_ModEnd> vp8_cfg = extracfg_map <S2SV_ModStart> cfg ; vpx_codec_enc_cfg_t * <S2SV_ModEnd> cfg = &,0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs",0
1071,"<S2SV_ModStart> c ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ;",0
1072,"<S2SV_ModStart> ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( attrs [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk ) return - EINVAL ; lock_sock ( & tsk -> sk ) ; err = __tipc_nl_list_sk_publ ( skb, cb, tsk, & last_publ ) ; if (! err ) done = 1 ; release_sock ( & tsk -> sk ) ; sock_put ( & tsk -> sk ) ;",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
1074,<S2SV_ModStart> vma ) ; if ( priv -> task ) put_task_struct ( priv -> task ) ;,0
1075,<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; if ( total_len < length ) break ; total_len -= length ;,0
1076,<S2SV_ModStart> ) ) { struct <S2SV_ModEnd> task_struct * task <S2SV_ModStart> task = current <S2SV_ModEnd> ; file_sb_list_del (,0
1077,"<S2SV_ModStart> extLength ) { memset ( & iinfo -> i_location, 0, sizeof ( iinfo -> i_location ) ) ;",0
1078,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1081,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart> goto invalid ; break ; } <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>!= '\\n' ) { <S2SV_ModStart>!= '\\r' ) { <S2SV_ModStart>!= '\\n' ) { <S2SV_ModStart>!= '\\r,0
1082,<S2SV_ModStart> ; if ( name_loc -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_loc -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen < XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_loc -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 || name_rmt -> namelen < XFS_LBSIZE ( args -> dp ->,0
1083,"<S2SV_ModStart> ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest <S2SV_ModEnd> ) ; UtRegisterTest <S2SV_ModStart> ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""IPV6DefragIPv4TooLargeTest"", IPV6DefragIPv4TooLargeTest ) ;",0
1084,<S2SV_ModStart> if ( object_data && object_length + add_v1_record > sizeof ( new_object. data ) ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object,0
1085,"<S2SV_ModStart> ) ) ; if ( sdb_num_get ( sdb, ""entries"", 0 ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sdb_num_get ( sdb, ""offset"", 0 ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sdb_num_get ( sdb, ""link_section_name"", link_section_name, 0 ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sdb_num_get ( sdb, ""link_section_name"", link_section_name, 0 ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1086,"<S2SV_ModStart> separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> separator!= NULL ) { if ( separator == NULL ) return ERROR_INVALID_SYNTAX ; name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ n - 1 ] == \'\\""\' ) value [ n - 1 ]",0
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp,",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFError ( tif, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModStart>! tmp ) { TIFFError ( tif, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { if ( tmp [ byte * wc + count ]!= tmp [ byte * wc + count ] ) { TIFFError ( tif, ""MemoryAllocationFailed"" ) ; return 0 ; } _TIFFfree ( tmp ) ; tmp = ( uint8 * ) cp0 ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; if ( unlikely (! pmd_none ( * pmd ) ) ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; if ( unlikely (! pmd_none ( * pmd ) ) ) return do_swap_page ( mm, vma, address, pte, pmd, flags, entry ) ; spin_lock ( ptl ) ; entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_spurious_fault ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_READ ) flush_tlb_fix_spurious_fault ( v",0
1090,"<S2SV_ModStart> ) { char * <S2SV_ModEnd> r = pool_alloc <S2SV_ModStart> + 1 ) ; if (! r ) return NULL <S2SV_ModEnd> ; strcpy ( <S2SV_ModStart> + 1 ) ; memcpy ( r, s, strlen ( s ) ) ;",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,<S2SV_ModStart> -> nr_extents ++ ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
1093,"<S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> dies [ cu -> length ]. attr_values [ i ] ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1094,"<S2SV_ModStart> p_enc ) ; if ( p_enc -> p_enc_state!= ENCODER_STATE_IDLE ) { msg_Err ( p_enc, ""EncStream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> an <S2SV_blank> invalid <S2SV_blank> state"" ) ; return NULL ; }",0
1095,"<S2SV_ModStart> bfname ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; goto exit_mf ; }",0
1096,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> <S2SV_ModEnd> ip6_plen ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> <S2SV_ModEnd> ip6_flow ) ; <S2SV_ModStart> # else if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""class <S2SV_blank> 0x%02x, <S2SV_blank> "", ( flow & 0x000fffff ) >> 20 ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x000fffff ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%02x, <S2SV_blank> "", flow",0
1097,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ;,0
1098,"<S2SV_ModStart> ; vma = find_vma ( mm, start, & vma_end ) ; if (! vma ) goto out_unlock ; ret = - EINVAL ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; }",0
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ; strcat ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> fb ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1102,"<S2SV_ModStart> ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt",0
1103,"<S2SV_ModStart> ; if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""beginning <S2SV_blank> of <S2SV_blank> image.\\n"", i ) ; return AVERROR_INVALIDDATA ; } if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""end <S2SV_blank> of <S2SV_blank> image.\\n"", i ) ; return AVERROR_INVALIDDATA ; } if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""end <S2SV_blank> of <S2SV_blank> image.\\n"", i ) ; return AVERROR_INVALIDDATA ; } if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> end <S2SV_blank> of <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! expr1 ) return NULL ; ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 3 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 4 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 5 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 6 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 6 ) ; if (! set_",0
1105,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, unsigned char * running_avg_y, int avg_y_stride, int motion_magnitude, int y_offset, int uv_offset ) { int sig_stride = 16 ; unsigned char * sig_y = signal -> y_buffer + y_offset ; int sig_stride = 16 ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else adjustment =",0
1106,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( sockPtr -> <S2SV_ModStart> & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-entityTOOLARGE"" ) ; }",0
1107,<S2SV_ModStart> ; int ret ; if (! xtregs_valid ( xtregs ) ) return - EINVAL,0
1108,<S2SV_ModStart> size ) ; <S2SV_ModEnd> message -> srcIpAddr <S2SV_ModStart> -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. port ; message -> timestamp = queueItem -> ancillary. timestamp ; message ->,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close",0
1111,"<S2SV_ModStart> int error ; unsigned long flags ; <S2SV_ModStart> new_bh ) ; flags = EXT2_SB ( sb ) -> s_mb_cache -> s_mb_flags & MS_SYNCHRONOUS ; if ( flags & MS_SYNCHRONOUS ) { new_bh = NULL ; get_bh ( new_bh ) ; if ( flags & MS_SYNCHRONOUS ) { if (! buffer_unhashed ( new_bh ) ) { ext2_xattr_cache_insert ( inode, flags, & new_bh ) ; goto cleanup ; } } else if ( flags & MS_SYNCHRONOUS ) { if ( flags & MS_SYNCHRONOUS ) { ext2_xattr_cache_insert ( inode, flags, & new_bh ) ; if ( flags & MS_SYNCHRONOUS ) { if (! buffer_unhashed ( new_bh ) ) { ext2_xattr_cache_insert ( inode, flags, & new_bh ) ; goto cleanup ; } if ( flags & MS_SYNCHRONOUS ) { if ( flags & MS_SYN",0
1112,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const active_map = va_arg ( args, vpx_active_map_t * ) ; if ( active_map ) { if (! vp9_set_active_map ( ctx -> cpi, active_map, map -> rows, map -> cols ) ) return VPX_CODEC_OK ; else return VPX_CODEC_INVALID_PARAM ; } else { if (! vp9_set_active_map ( ctx -> cpi, NULL, 0, 0 ) ) return VPX_CODEC_INVALID_PARAM ; }",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) goto out ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ;",0
1115,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows,",0
1116,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1117,<S2SV_ModStart> size_t maxlen = <S2SV_ModEnd> 3 * len,0
1118,"<S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point <S2SV_blank> in <S2SV_blank> your <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; } else { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> one <S2SV_blank> point"" ) ; RETURN_FALSE ; }",0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify,0
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetMagickMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetMagickMemory ( imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetMagickMemory ( imsy <S2SV_ModEnd> ) ; if",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) <S2SV_ModEnd> { vpx_ref_frame_t * <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG sd ; vpx_ref_frame_t * frame = ( vpx_ref_frame_t * ) vpx_calloc ( 1, sizeof ( vpx_ref_frame_t ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_copy_reference_dec ( ctx -> pbi <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) ; return vp9_copy_reference_dec ( ctx -> pbi <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) <S2SV_ModEnd> ; } <S2SV_null>",0
1122,"<S2SV_ModStart>. path ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> mailbox = curl_easy_unescape <S2SV_ModEnd> ( data, <S2SV_ModStart>, NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ;",0
1123,<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ;,0
1124,<S2SV_ModStart> -> first_slice_in_pic_flag = get_bits2 <S2SV_ModEnd> ( gb ) <S2SV_ModStart> -> first_slice_in_pic_flag = get_bits2 <S2SV_ModEnd> ( gb ) <S2SV_ModStart> -> first_slice_in_pic_flag = get_bits2 <S2SV_ModEnd> ( gb ) <S2SV_ModStart> -> first_slice_in_pic_flag = get_bits2 <S2SV_ModEnd> ( gb ) <S2SV_ModStart> -> first_slice_in_pic_flag = get_bits2 <S2SV_ModEnd> ( gb ),0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> } ps_dec ->,0
1126,"<S2SV_ModStart>, u4_x_offset ; <S2SV_ModEnd> UWORD32 u4_y_offset ; <S2SV_ModStart> B_PIC ) { <S2SV_ModEnd> ps_dec -> u2_prev_intra_mb <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u2_prev_intra_mb = 0 ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModEnd> ps_dec -> u2_prev_intra_mb <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; } else { ps_dec -> u2_prev_intra_mb = 1 ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb =",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg = cm -> ref_frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> reference <S2SV_blank> frame <S2SV_blank> config"" ) ; } else { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> int i ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int step = 1 << ( tx_size << 1 ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; for ( r = 0 ; r < num_4x4_w ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_h ; c += ( 1 << tx_size ) ) { if ( r,0
1130,<S2SV_ModStart> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1131,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1132,"<S2SV_ModStart> : return getnum <S2SV_ModEnd> ( L, <S2SV_ModStart> : { int sz = getnum <S2SV_ModEnd> ( L, <S2SV_ModStart> : { int sz = getnum <S2SV_ModEnd> ( L,",0
1133,"<S2SV_ModStart> nrow ) { if ( ( row + img -> row_offset ) % rowsperstrip == 0 ) { TIFFError ( tif, ""InvalidRowOffset"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( ( row + img -> row_offset ) % rowsperstrip == 0 ) { TIFFError ( tif, ""InvalidRowOffset"" ) ; return ( 0 ) ; } nrow = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip ; if ( nrow == 0 ) { TIFFError ( tif, ""InvalidRowOffset"" ) ; return ( 0 ) ; } if ( ( row + img -> row_offset ) % rowsperstrip == 0 ) { TIFFError ( tif, ""InvalidRowOffset"" ) ; return ( 0 ) ; } if ( ( row + img -> row_offset ) % rowsperstrip == 0 ) { TIFFError ( tif, ""InvalidRowOffset"" ) ; return ( 0 ) ; } if ( nrow == 0 ) { TIFFError ( tif, ""InvalidRowOffset"" ) ; return ( 0",0
1134,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1136,<S2SV_ModStart> upid == - 1 || upid == 0,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ;,0
1139,"<S2SV_ModStart> ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int x ; for ( x = 0 ; x < y2 ; ++ x ) { if ( fread ( buf, 1, x, w, file )!= x ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_null>",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, attr_len ) ; return 0",0
1141,"<S2SV_ModStart> -> private ; return dm_bdev_ioctl ( lc -> dev -> bdev, <S2SV_ModStart>, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
1142,"<S2SV_ModStart> ) ) ; if ( actx -> tag_len!= 0 ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LENGTH_ERROR ) ; return 0 ; }",0
1143,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1144,"<S2SV_ModStart> fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> running <S2SV_blank> fldd <S2SV_blank> %s\\n"", full_path ) ;",0
1145,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock <S2SV_ModEnd>, sk )",0
1146,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sign ) flags |= NTLMSSP_NEGOTIATE_SIGN ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ;,0
1148,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc == IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( imap_exec ( adata, ""CAPABILITY"", IMAP_CMD_NO_FLAGS ) ) goto bail ; } else { if ( imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc == IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } else { if ( imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IM",0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if ( ( cc % stride ) == 0 ) { TIFFError ( tif -> tif_clientdata, ""horDiff8"", ""horDiff8"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFError ( tif -> tif_clientdata, ""horDiff8"", ""horDiff8"" ) ; return 1 ; }",0
1151,<S2SV_ModStart> -> sect <= 0 || <S2SV_ModEnd> g -> head <S2SV_ModStart> -> head <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1152,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } if ( user == NULL || user -> password == NULL ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> password\\r\\n"" ) )",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0",0
1157,<S2SV_ModStart> cur_page ++ ; if ( unlikely ( j >= page_limit ) ) { ret = - EFAULT ; goto out_unmap ; },0
1158,<S2SV_ModStart> depth ; assert ( numcolors >= RAS_CMAP_MINSIZ <S2SV_ModEnd> ) ; actualnumcolors,0
1159,<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn ->,0
1160,<S2SV_ModStart> ; i < sizeof ( buf ) && str [ i ] && j < sizeof ( buf ),0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> return sizeof ( struct rds_header ) <S2SV_ModEnd> + RDS_CONG_MAP_BYTES ; <S2SV_ModStart> return sizeof ( struct rds_header ) <S2SV_ModEnd> + RDS_CONG_MAP_BYTES ;,0
1163,"<S2SV_ModStart> r ) ; if (! priv -> base ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; }",0
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,"<S2SV_ModStart> -> prgvolfirst ) { JAS_DBG ( ""jas_nextrlcp: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d",0
1166,"<S2SV_ModStart> ) ) { r_cons_printf <S2SV_ModEnd> ( ""Num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Vaddr <S2SV_blank> <S2SV_blank> %d\\n"", <S2SV_ModStart> ) ) ; } else { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Vaddr <S2SV_blank> %d\\n"", laddr, va ) ; }",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr,",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( krb5_principal_compare ( kdc_context, t2enc -> princ, server_princ ) ) { * status = ""SERVER_NOMATCH"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""NOT_ALLOWED_TO_DELEGATE"" ; return errcode ; }",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1170,"<S2SV_ModStart> bufsize ) { jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; obj -> myalloc_ = 1 ; if (! stream ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF,",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> = NULL ; <S2SV_ModEnd> u_char * pkblob <S2SV_ModStart>, * sig, have_sig ; size_t blen, slen <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & slen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh",0
1172,"<S2SV_ModStart> = 0 ; int64_t <S2SV_ModEnd> bcount ; uint32_t <S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1173,"<S2SV_ModStart> mech ) ) { _sx_debug ( ZONE, ""client <S2SV_blank> requested <S2SV_blank> mechanism <S2SV_blank> (%s) <S2SV_blank> that <S2SV_blank> we <S2SV_blank> didn\'t <S2SV_blank> offer"", mech ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_INVALID_MECHANISM, NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= G",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
1176,"<S2SV_ModStart> sbi -> s_mount_state = EXT2_SB_UNINITIALIZED ; if ( sbi -> s_mount_state == EXT2_SB_UNINITIALIZED ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> uninitialized <S2SV_blank> filesystem"" ) ; goto failed_sbi ; } if ( sbi -> s_mount_state == EXT2_SB_UNINITIALIZED ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> uninitialized <S2SV_blank> filesystem"" ) ; goto failed_sbi ; } if ( sbi -> s_mount_state == EXT2_SB_UNINITIALIZED ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> uninitialized <S2SV_blank> filesystem"" ) ; goto failed_sbi ; } if ( sbi -> s_mount_state == EXT2_SB_UNINITIALIZED ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> uninitialized <S2SV_blank> filesystem"" ) ; goto failed_sbi ; } if ( sbi -> s_mount_state == EXT2_SB_UNINITIALIZED ) { ext2_msg ( sb",0
1177,<S2SV_ModStart> bd_addr ) { btif_dm_lock ( ) ; btif_dm_unlock ( ) ;,0
1178,<S2SV_ModStart> * 4 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if (,0
1179,"<S2SV_ModStart> int i ; jas_matind_t numrows ; jas_matind_t numcols ; jas_matind_t numcols ; jas_matind_t numrows_ ; if ( numrows < 0 || numcols > jas_matind_max ( numrows, numcols ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> datasize_ > 0 ) { if (! matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) { jas_matrix_destroy",0
1180,<S2SV_ModStart> ; if ( ipv6_hdr_is_multicast ( tmp_hdr ) ) goto slow_path ; if ( ipv6_hdr_is_multicast ( tmp_hdr ) ) goto slow_path ;,0
1181,"<S2SV_ModStart> SCSIDiskReq * r ; struct scsi_device * qdev = DO_UPCAST ( SCSIDiskDevice, qdev ) ; <S2SV_ModStart> SCSIDiskReq * r ; qdev = DO_UPCAST ( SCSIDiskDevice, qdev ) ; <S2SV_ModStart> r = DO_UPCAST ( SCSIDiskReq <S2SV_ModEnd>, req,",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> ; int avail ; size_t <S2SV_ModEnd> xmin, xmax <S2SV_ModStart> ; expect = 0 ; if ( expect > buf -> len ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmax == 0 || xmin > MAX_TXID || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; snap -> xmin = xmin ; snap -> xmax = xmax ; for ( i = 0 ; i < nx",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1184,"<S2SV_ModStart> if ( ret || cm_id -> device -> node_type!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; }",0
1185,<S2SV_ModStart> ; struct xfrm_dump_info info <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ] ) { <S2SV_ModEnd> walk = ( <S2SV_ModStart> = 1 ; <S2SV_ModEnd> xfrm_policy_walk_init ( walk,0
1186,<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> -> d_inode ; struct dentry * upper = ovl_dentry_upper ( dentry ) <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { dput ( upper ) ; } inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s",0
1189,<S2SV_ModStart> &&! ( nmemb && size ) ) return AVERROR ( ENOMEM ) ; if ( <S2SV_ModStart> &&! ( nmemb <S2SV_ModEnd> && size ),0
1190,<S2SV_ModStart> a -> name == MAPI_BODY_HTML || a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"" <S2SV_ModEnd>, box -> <S2SV_ModStart> name ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type, box -> data. jp. magic ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> type, box -> data. jp. magic ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box",0
1193,<S2SV_ModStart> pnew ) ; M_free ( pold ) ;,0
1194,<S2SV_ModStart> journal_t * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if (! PageChecked ( page ) ) { ClearPageChecked ( page ) ; return ; } <S2SV_ModEnd> if ( offset,0
1195,<S2SV_ModStart> i ++ ) { writer = GF_SAFEALLOC ( TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = ( GF_MediaBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> mdia ) goto exit ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> stbl ) goto exit ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer ->,0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy ( md5data + 1, password, 82 ) ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( )!= - 1 ) { width = htole16 ( height ) ; height = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; height = htole16 ( height ) ;",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; return NULL ; }",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { SNMP_FREE ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> 0xfffffe00UL ) # define PCDGetBits ( n ) ( sum << n ) & 0xffffffff ; bits -= n ; while ( bits <= 24 ) { if ( p >= buffer + 0x800 ) break ; count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } if ( count < 0 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) AcquireQuantumMemory ( 0x800",0
1201,"<S2SV_ModStart> if ( TYPE ( CHILD ( n, i ) ) == COMMA ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) == TYPE_COMMENT ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; } else { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; }",0
1202,"<S2SV_ModStart> g_assert_not_reached ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ;",0
1203,<S2SV_ModStart> HAVE_IPV6_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1204,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
1205,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> cblk_style == 0 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""missing <S2SV_blank> cblk <S2SV_blank> style\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1206,"<S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ) ) { fputc ( '%', stream ) ; ptr += 2 ; } else if ( '}' == ptr [ 1 ] ) { fputs ( ""%{"", stream ) ; ptr += 2 ; } else { fputc ( '}', stream ) ; ptr += 2 ; } else if ('<S2SV_blank>'== ptr [ 1 ] ) { fputc ('<S2SV_blank> ', stream ) ; ptr += 2 ; } else { if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ) fputs ( stringp, stream ) ; } else if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_REQUEST_SIZE : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_REQUEST_SIZE",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; <S2SV_ModEnd> BLOCK_SIZE i ; <S2SV_ModStart> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ;",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; ND_TCHECK ( * lmp_obj_header ) ; ND_TCHECK ( * lmp_obj_header ) ; ND_TCHECK ( * lmp_obj_header ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %u, <S2SV_blank> Flags: <S2SV_blank> [%u], <S2SV_blank> length: <S2SV_blank> %u"", lmp_obj_len, len ) ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> offset: <S2SV_blank> %u, <S2SV_blank> link-type: <S2SV_blank> %u, <S2SV_blank> length: <S2SV_blank> %u"", lmp_obj_len, lmp_obj_ctype, lmp_obj_len, lmp_obj_ctype, lmp_obj_len, lmp_obj_ctype ) ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> length: <S2SV_blank> %",0
1209,"<S2SV_ModStart> int_mv mvs [ 2 <S2SV_ModEnd> ], nmv_context_counts <S2SV_ModStart> int_mv mvs [ 2 <S2SV_ModEnd> ], nmv_context_counts",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; kfree_skb ( skb_out ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ;",0
1212,"<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. lock ) ; INIT_WORK ( & sta -> drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_ba_session_work ) ; mutex_init ( & sta -> ampdu_mlme. mtx",0
1213,<S2SV_ModStart> &&! capable ( CAP_SYS_ADMIN <S2SV_ModEnd> ) ) return,0
1214,<S2SV_ModStart> 1 ) ; if (! data_interface ) goto skip_normal_probe ; if (! control_interface ) goto skip_normal_probe ;,0
1215,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
1216,"<S2SV_ModStart> return ; netsnmp_init_mib_internals ( ) ; env_var = strdup ( env_var ) ; if (! env_var ) return ; <S2SV_ModStart> entry ) { add_mibfile <S2SV_ModEnd> ( entry, <S2SV_ModStart> NULL, NULL ) ; } env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } env_var = strdup ( env_var ) ; if ( env_var ) { env_var = strdup ( env_var ) ; env_var = strdup ( env_var ) ; } else { env_var = strdup ( env_var ) ; } env_var = strdup ( env_var ) ; env_var = strdup ( env_var ) ; env_var = strdup ( env_var ) ; if ( env_var ) {",0
1217,"<S2SV_ModStart> struct list_head tmplist <S2SV_ModEnd> ; newsk -> <S2SV_ModStart> do_auto_asconf ) { sctp_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk_copy_descendant ( newsk, newsk ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_sk ( newsk ) -> bind_hash = NULL ; sctp_sk ( newsk ) -> bind_hash = NULL ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp",0
1218,"<S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, UI_SET_EVBIT, EV_KEY <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart>, UI_SET_EVBIT, EV_REL <S2SV_ModEnd> ) ; ioctl <S2SV_ModStart>, UI_SET_EVBIT, <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. mapped_id <S2SV_ModEnd> ) ; if <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. <S2SV_ModEnd> mapped_id ) ; <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. <S2SV_ModEnd> mapped_id ) ;",0
1219,"<S2SV_ModStart> regs ) { struct desc_struct <S2SV_ModEnd> * desc ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 16 ) ; case 4 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 5 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 6 : return INSN_CODE_SEG_PARAMS ( 8, 16 ) ; case 7 : return INSN_CODE_SEG_PARAMS ( 8, 8 ) ; case 8 : return",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,"<S2SV_ModStart> return ret ; ret = anon_inode_getfd ( ""inotify"", & inotify_fops, group, O_RDONLY | flags ) ; if ( ret < 0 ) { atomic_dec ( & user -> inotify_devs ) ; free_uid ( user ) ; return ret ; }",0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1225,"<S2SV_ModStart> ( ps_stream, <S2SV_ModEnd> START_CODE_PREFIX_LEN )!=",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if ( flood_duration_test ) { if (! ipc_count ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_COUNT ; }",0
1227,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> imethod -> is_inflated <S2SV_ModStart> imethod -> is_inflated ) { mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> tmp_context ) ;",0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf, buffer, count ) ) return - EFAULT ; if ( count > sizeof ( buf ) ) return - EINVAL ; if (",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1230,"<S2SV_ModStart> -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> { char * last_elem, * wp ; size_t len ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) && repl!= ( const char * ) - 1 ) ) { wp = last_elem ; name += len ; while (",0
1232,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } rv = h264bsdInit ( & pDecCont -> storage, 0 ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SW",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space ; struct sockaddr_in6 * sin6 = msg -> msg_name ; struct ipv6_txoptions * opt2 <S2SV_ModStart> ) ; opt2 = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; if (! opt2 ) { opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return - ENOMEM ; opt_space = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; }",0
1234,"<S2SV_ModStart> drop ; } if ( iph -> ihl >= IP_OPTIONS_MAX / sizeof ( struct iphdr ) ) { IPCB ( skb ) -> opt. <S2SV_ModEnd> optlen = iph <S2SV_ModStart> ihl * 4 - sizeof ( struct iphdr ) ; if ( opt -> opt. <S2SV_ModEnd> optlen = iph <S2SV_ModStart> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> opt.",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ; if ( ip_hdr ( skb ) -> protocol == IPPROTO_UDP && rt -> rt_flags & RTCF_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1238,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1239,<S2SV_ModStart> -> copied_seq = seq ; tp -> copied_offset = offset ;,0
1240,"<S2SV_ModStart> = 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ;",0
1241,"<S2SV_ModStart> self, Py_ssize_t <S2SV_ModEnd> idx, PyObject <S2SV_ModStart> value ) { if ( idx >= self -> memo_size ) { if ( _Unpickler_ResizeMemoList ( self, idx * 2 ) < 0 ) return - 1 ; assert ( idx < self -> memo_size ) ; }",0
1242,<S2SV_ModStart> ] ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else {,0
1243,<S2SV_ModStart> filp ) { if ( filp ) fput ( filp ) ;,0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart>, name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""-",0
1246,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet6_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1247,<S2SV_ModStart> ) ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags &= ~ KVM_GUEST_FLAG ; if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG ) { if ( kvm_get_cpl ( kvm_run ) -> flags & KVM_GUEST_FLAG,0
1248,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1249,"<S2SV_ModStart> UINT error ; if ( pduLength > UINT32_MAX ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> pdu <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", pduLength ) ; return UINT_MAX ; }",0
1250,"<S2SV_ModStart> -> multicastHops ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ;",0
1251,"<S2SV_ModStart> ( hugepage_subpool_get_pages ( spool <S2SV_ModEnd>, chg ) <S2SV_ModStart> return - ENOSPC ; set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ;",0
1252,"<S2SV_ModStart> np ) ; struct ip_options_rcu * opt ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) return - EINVAL",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) goto END_OF_READING ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; UINT32 failureCode ; WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; <S2SV_ModStart> = NEGO_STATE_FAIL ; return 0 ;",0
1257,"<S2SV_ModStart> int ret, last_pwd <S2SV_ModEnd> ; krb5_boolean have_pol <S2SV_ModStart>, last_pwd, keepold, & have_pol, & last_pwd <S2SV_ModEnd> ) ; if",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>!= RSA_PUB ) { <S2SV_ModEnd> bn_mod_2b ( m <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> bn_mod_2b ( m <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>!= RSA_PUB ) { <S2SV_ModEnd> bn_mod_2b ( m <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart>!= RSA_PUB ) { <S2SV_ModEnd> bn_mod_2b ( m <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> bn_mod_2b ( m <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } do { <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>!= RSA_PUB ) { <S2SV_ModEnd> bn_mod_2b",0
1259,<S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_ARGS ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_ARGS ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if ( off + bit >= hctx -> tags -> nr_tags ) break ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) break ;",0
1262,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> j ] [ <S2SV_ModEnd> i ] ;,0
1264,<S2SV_ModStart> { token ++ ; } if (! token ) { return false ; },0
1265,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> -> act_zbin_adj = 1 <S2SV_ModEnd> ; vp9_setup_pre_planes ( <S2SV_ModStart> ; vp9_setup_dst_planes ( xd, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; memset ( xd -> above_context, 0, sizeof ( * xd -> above_context ) * aligned_mi_cols ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols )",0
1266,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ;",0
1267,"<S2SV_ModStart> ) ) ; if ( number_planes_filled < 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; if ( number_planes_filled < number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled < number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled < number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled < number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled < number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled < number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" )",0
1268,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_lock ( & snd_card_mutex ) ;,0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,"<S2SV_ModStart> len ) ; if ( ret < 0 ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", ret ) ; return ret ; }",0
1271,<S2SV_ModStart> i4_poc ) ; if ( ps_cur_poc -> i4_pic_order_cnt_lsb < 0 || ps_cur_poc -> i4_pic_order_cnt_msb < 0 || ps_cur_poc -> i4_delta_pic_order_cnt_lsb < 0 || ps_cur_poc -> i4_pic_order_cnt_msb < 0 || ps_cur_poc -> i4_delta_pic_order_cnt_bottom < 0 || ps_cur_poc -> i4_pic_order_cnt_msb < 0 || ps_cur_poc -> i4_pic_order_cnt_msb < 0 || ps_cur_poc -> i4_delta_pic_order_cnt_lsb < 0 || ps_cur_poc -> i4_pic_order_cnt_msb < 0 || ps_cur_poc -> i4_delta_pic_order_cnt_bottom < 0 || ps_cur_poc -> i4_pic_order_cnt_msb < 0 || ps_cur_poc ->,0
1272,"<S2SV_ModStart> OPENSSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( item ) ; OPENSSL_free ( item",0
1273,"<S2SV_ModStart> ; if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) { DRM_DEBUG ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - ENOMEM ; } exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ) ; if ( exec2_list",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; } <S2SV_ModStart> PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> PTR_ERR ( karg",0
1275,"<S2SV_ModStart> const char * path, unsigned long flags <S2SV_ModStart> mnt_type, flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t len_sent = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * buf <S2SV_ModStart> -> mm -> <S2SV_ModEnd> arg_start ; audit_log_format <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } kfree ( buf ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent,",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_seek ( wth -> random_fh, seek_off, SEEK_SET, err ) == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_seek ( line, NETSCREEN_LINE_LENGTH, SEEK_SET, err ) == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } pkt_len = parse_netscreen_rec_hdr ( phdr, line, cap_int, & cap_dir, & cap_dir, cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } if ( pkt_len == - 1 ) { * err = WTAP_ERR_SHORT_READ ; } if ( pkt_len == - 1 ) { * err = WTAP_ERR_",0
1280,<S2SV_ModStart> rq ) { u64 <S2SV_ModEnd> irq_time ; if <S2SV_ModStart> rq ) ; <S2SV_ModEnd> rq -> clock <S2SV_ModStart> rq ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>,0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> st ) { <S2SV_ModEnd> struct blkif_response resp <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> : memcpy ( RING_GET_RESPONSE <S2SV_ModEnd> ( & blk_rings",0
1283,<S2SV_ModStart> ; if ( n_ks_tuple < 1 || n_ks_tuple > KRB5_KDB_MAX_NUM_TIX ) return ; if ( n_ks_tuple < 1 || n_ks_tuple > KRB5_KDB_MAX_NUM_TIX ) return ; if (,0
1284,"<S2SV_ModStart> -> offset ; if ( datao + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof",0
1285,"<S2SV_ModStart> safiles ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( <S2SV_ModStart> safiles ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( <S2SV_ModStart> safiles ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1286,"<S2SV_ModStart> case ICMP_ECHO_PROTOCOL : ND_TCHECK_16BITS ( & dp -> icmp_ip. ip_dst ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_ip. ip_p ) ; break ; case ICMP_ECHO_REPLY : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; break ; case ICMP_ECHO_REPLY : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s,",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> -> i_crypt_info ; <S2SV_ModEnd> if ( ci <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart>!= NULL ) <S2SV_ModEnd> ; dput (,0
1288,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> service_options. next <S2SV_ModStart>. next ; <S2SV_ModEnd> service_free ( & <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; }",0
1290,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; context. curWidth = i -> width ; context. curHeight = i -> height ; context. curWidth = i -> width ; context. curHeight = i -> height ; context. curWidth = i -> width ; context. curHeight = i -> height ; context. curWidth = i -> width ; context. curHeight = i -> height ; context. curWidth = i -> width ; context. curX = i -> posX ; context. curY = i -> posY ; context. curHeight = i -> height ; <S2SV_ModStart> -> width ; context. frbuff_p. p32 = context. line_p. p32 + ( u32 ) i -> posX ; context. frbuff_p. p32 = context. line_p. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p32 = context. line_p. p32 + ( u32 ) i -> posX ; context. frbuff_p. p32 = context. line_p. p32 + ( u32 ) i -> posX ;,0
1291,"<S2SV_ModStart> + n ) ; if ( l > ( size_t ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > ( size_t ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > ( size_t ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > ( size_t ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > ( size_t ) n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if (",0
1292,"<S2SV_ModStart>, message ) { if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_",0
1293,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT14 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) )",0
1295,"<S2SV_ModStart> ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( num_pad_bytes > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( num_pad_bytes > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> %d"", req -> socket, n ) ;",0
1297,<S2SV_ModStart> ps_slice_hdr ) { if ( ps_slice_hdr -> st_type == SPEED_2X2 ) { ps_dpb_mgr -> dpb_num_st_curr_before ++ ; ps_dpb_mgr -> dpb_num_st_curr_after ++ ; ps_dpb_mgr -> dpb_num_lt_curr_before ++ ; ps_dpb_mgr -> dpb_num_lt_curr_before ++ ; ps_dpb_mgr -> dpb_num_lt_curr_after ++ ; ps_dpb_mgr -> dpb_num_st_curr_after ++ ; ps_dpb_mgr -> dpb_num_st_curr_after ++ ; ps_dpb_mgr -> dpb_num_st_curr_after ++ ; ps_dpb_mgr -> dpb_num_lt_curr_after ++ ; ps_dpb_mgr -> dpb_num_lt_curr_after ++ ; ps_dpb_mgr -> dpb_num_lt_curr_after ++ ; ps_dpb_mgr -> dpb_num_lt_curr_,0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = put_user ( ptrace_test_thread_area ( child ) -> tp_value, datap ) ; else ret = <S2SV_ModEnd> put_user ( ptrace_test_thread_area",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { <S2SV_ModEnd> ++ numentries ; <S2SV_ModStart> ++ numentries ; child = child -> next ; } if (! entries ) { cJSON_free ( entries ) ; return 0 ; } entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( str ) + 2 + ( fmt? 2 : 0 ) ; if (! entries [ i ++ ] ) { cJSON_free ( entries ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; return 0 ; } if (! out ) { cJSON_free ( entries ) ; return 0 ; } * out = '{' ; ptr = out + 1 ; if ( fmt ) for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; cJSON_free ( entries ) ; cJSON_",0
1301,"<S2SV_ModStart> int tagval, int <S2SV_ModEnd> * length )",0
1302,<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> other )!= sk <S2SV_ModEnd> ) { sock_poll_wait <S2SV_ModStart> other )!= sk <S2SV_ModEnd> ) { sock_poll_wait <S2SV_ModStart> wait ) ; <S2SV_ModEnd> } sock_put (,0
1303,<S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] ; } <S2SV_ModEnd> value = ( <S2SV_ModStart> ] << 24 ; value |= buffer [ 0 ] << 16 ; value |= buffer [ 1 ] << 8 ; value |= buffer [ 2 ] << 16 ; value |= buffer [ 3 ] ; value |= buffer [ 3 ] ; value |= buffer [ 0 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart> unsigned_value = ( value <S2SV_ModEnd> & 0xffffffff ) <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; flushBuffer ( ) ;",0
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> exit_io_context ( void <S2SV_ModStart> struct io_context * ioc <S2SV_ModEnd> ; task_lock ( <S2SV_ModStart> current ) ; <S2SV_ModEnd> ioc = current <S2SV_ModStart> -> io_context ; <S2SV_ModEnd> task_unlock ( current <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) { <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> ioc -> nr_tasks ) { if ( ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1306,<S2SV_ModStart> { * minor_status = 0 <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg |= ptr [ 0 ] << 8 ; sealalg |= ptr [ 1 ] << 8 ; if ( ptr [ 2 ]!= 0xFF || ptr [ 3 ]!= 0xFF || ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF || ptr [ 6 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; },0
1307,<S2SV_ModStart> data ) { unsigned int <S2SV_ModEnd> i ; int <S2SV_ModStart> int ret ; * value = 0 ; if (! pci_is_enabled ( dev ) ) return - ENODEV ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM,0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> vp9_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,"<S2SV_ModStart> -> dwc ; spin_lock ( & dwc -> lock ) ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> -> lock ) ; spin_unlock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ;",0
1312,<S2SV_ModStart> } # endif # define YY_PARSE ( N ) ( yyvsp -= ( N ) ) int yylen1 = 0 ; int yylen2 = 0 ; int yylen3 = 0 ; int yylen4 = 0 ; int yylen5 = 0 ; int yylen7 = 0 ; int yylen8 = 0 ; int yylen9 = 0 ; int yylen10 = 0 ; int yylen11 = 0 ; int yylen12 = 0 ; int yylen10 = 0 ; int yylen10 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen11 = 0 ; int yylen12 = 0 ; int yylen13 = 0 ; int yylen13 = 0 ; int yylen11 = 0 ; int yylen11 = 0 ; int yylen12 = 0 ; int yylen10 = 0 ; int yylen11 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int yylen12 = 0 ; int,0
1313,"<S2SV_ModStart> DISCE_PROBE ] = sas_probe_devices <S2SV_ModEnd>, [ DISCE_SUSPEND <S2SV_ModStart> DISCE_RESUME ] = sas_resume_devices <S2SV_ModEnd>, [ DISCE_DESTRUCT",0
1314,"<S2SV_ModStart> name, int <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> name, rep_quick ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr (",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ;",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_MIN_LEN ) ; if ( length < ND_RPL_DAOACK_MIN_LEN ) goto tooshort ;",0
1317,"<S2SV_ModStart> ( sk ) ; struct ip_options_rcu * inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> out ; } inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1318,"<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN <S2SV_ModEnd> | EXT4_EX_NOCACHE ; <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS )",0
1319,<S2SV_ModStart> buf ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; bpf_map_inc ( <S2SV_ModEnd> map, true",0
1321,"<S2SV_ModStart> ( * cp && cp [ 1 ] && cp [ 2 ] ) { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789"", cp [ 1 ] ) ) { meta = 1 ; cp ++ ; } else if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++",0
1322,"<S2SV_ModStart> char detect [ 4 ] ) { if ( memcmp ( detect, ""YUV4"", 4 ) == 0 ) { return 0 ; }",0
1323,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; }",0
1324,"<S2SV_ModStart> * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixm = pixFewColorsOctcubeQuant1 ( pixs, level ) ; pixg = pixGetColormap ( pixm ) ; pixg = pixGetColormap ( pixg ) ; pixd = pixGetColormap ( pixd ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; lut [ index ] = - 1 ; lut [ index ] = - 1 ; lut [ index ] = - 1 ; lut [ index ] = - 1 ; lut [ index ] = - 1 ; lut [ index ] = - 1 ; lut [ index ] = - 1 ; lut = ( l_int32 * ) LE",0
1325,"<S2SV_ModStart>, ubits = BN_num_bits ( u ), vbits = BN_num_bits ( v ) ; if ( ubits > BN_num_bits ( v ) ) goto err ; if ( vbits > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( b ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( b ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( b ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_",0
1326,<S2SV_ModStart> 256 ; vpx_mse16x16 vpx_mse16x16 ; vpx_mse16x16 <S2SV_ModEnd>. vf = <S2SV_ModStart> vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> col_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> row_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> col_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> row_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> col_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> row_buffer + recon_yoffset ; xd -> pre.,0
1327,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> length ; CURLcode,0
1328,"<S2SV_ModStart> ; int nbits ; if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ; } if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ; } if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ; } if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ; } if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ; } if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ; } if ( msg -> bit + bits > msg -> len ) { com_Error ( ERR_DROP, ""too <S2SV_blank> many <S2SV_blank> bits"" ) ; return 0 ;",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; struct snd_ctl_elem_list list ; <S2SV_ModStart> -> count ; list = kcontrol -> list ; down_write ( & card -> controls_rwsem ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; if (! list_add_tail ( & list, & card -> controls ) ) { up_write ( & card -> controls_rwsem ) ; err = - ENOMEM ; goto error ; } list_add_tail ( & list, & card -> controls ) ; card -> controls_count += kcontrol -> count ; card -> last_numid += kcontrol -> count ; list = kcontrol -> list ; up_write ( & card -> controls_rwsem ) ; list = kcontrol -> next ; kcontrol -> next = NULL ; list = kcontrol -> next ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify",0
1330,<S2SV_ModStart> -> txq_pause ) ; spin_lock_init ( & dev -> lock ) ; <S2SV_ModStart> -> txq_pause ) ; spin_unlock_init ( & dev -> lock ) ;,0
1331,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( count < 0 ) { return MONGO_ERROR ; } if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { conn -> err = MONGO_ERROR ; return MONGO_ERROR ; } data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { if ( mongo_check_last_error ( conn, ns, write_concern ) == MONGO_ERROR ) { return MONGO_ERROR ; } data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { if ( mongo_data_send ( conn, mm ) == MONGO_ERROR ) { return MONGO_ERROR ; } data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { if ( mongo_check_last_error",0
1332,<S2SV_ModStart> ( textview ) ; gtk_text_view_destroy ( textview ) ;,0
1333,"<S2SV_ModStart> - 2 ; if ( plen < 2 ) { printf ( ""Invalid <S2SV_blank> packet <S2SV_blank> length: <S2SV_blank> %d\\n"", len ) ; return 1 ; }",0
1334,"<S2SV_ModStart> { umode_t mode <S2SV_ModEnd> ; retval = <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case ACL_TYPE_DEFAULT_ACCESS : if ( S_ISDIR ( inode -> i_mode ) ) { retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; goto err_out ; } break ; case ACL_TYPE_DEFAULT_READ : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EPERM ; goto err_out ; } break ; case ACL_TYPE_DEFAULT_READ : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EPERM ; goto err_out ; } break ; case ACL_TYPE_DEFAULT_READ : if (! S_ISDIR ( inode -> i_mode ) { retval = - EPERM ; goto err_out ; } break ; case ACL_TYPE_DEFAULT_READ : if (! S_ISDIR ( inode -> i_mode ) { retval = - EPERM ; goto err_out ; } break ; case ACL_TYPE_READ : if",0
1335,<S2SV_ModStart> ; if (! bin -> classes ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_,0
1336,<S2SV_ModStart> case NPPVpluginDescriptionString : <S2SV_ModEnd> type = RPC_TYPE_STRING <S2SV_ModStart> case NPPVformValue : <S2SV_ModEnd> type = RPC_TYPE_STRING <S2SV_ModStart> case NPPVjavascriptPushCallerBool : <S2SV_ModEnd> type = RPC_TYPE_BOOLEAN <S2SV_ModStart> case NPPVpluginKeepLibraryInMemory : <S2SV_ModEnd> type = RPC_TYPE_BOOLEAN,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> state = NEGO_STATE_FAIL ; return FALSE ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; <S2SV_ModStart> active_worst_quality ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_",0
1339,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,"<S2SV_ModStart> data ) { atomic_set ( & c -> refcnt, 1 ) ;",0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1343,"<S2SV_ModStart> TX_SIZE tx_size, <S2SV_ModEnd> int up_available <S2SV_ModStart> plane ] ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; if ( up_available ) { DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; uint8_t * const_above_row = above_data + 16 ; uint8_t * const_above_row = above_row ; uint8_t * const_above_row = above_row + 16 ; uint8_t * const_above_row = above_data + 16 ; uint8_t * const_above_row = above_data + 16 ; uint8_t * const_above_row = above_row +",0
1344,"<S2SV_ModStart> end ++ ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if (",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1346,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> cur_aio_dio <S2SV_ModStart> cur_aio_dio = NULL <S2SV_ModEnd> ; ei ->,0
1347,<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; <S2SV_ModStart> synchronize_rcu ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle * <S2SV_ModEnd> ion_handle_get_by_id ( struct <S2SV_ModStart> lock ) ; handle = ion_idr_find ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; return handle? handle : ERR_PTR ( - EINVAL <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> common ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1350,<S2SV_ModStart> ; if ( stroff > 0 && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff > 0 && stroff > 0 && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff > 0 && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof ( long_tmp ) && stroff < sizeof (,0
1351,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart>'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osStrncpy ( p + 1, queryString, n - 1 ) ; context -> bufferLen = context -> bufferLen + n - m ; p [ 0 ] = '?' ; osStrncpy ( p + 1, queryString, n - 1 ) ; context -> bufferLen = context -> bufferLen + n - m ; context -> requestState = HTTP_REQ_STATE_FORMAT_HEADER ; return NO_ERROR ;",0
1352,"<S2SV_ModStart> if ( TYPE ( CHILD ( n, i ) ) == COMMA ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; return - 1 ; } if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; } else if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; } else { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; }",0
1353,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC",0
1355,"<S2SV_ModStart> == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> allocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1, gemsafe_prkeys [ i ]. ref ) ; ind += 9 ; } else if ( ibuf [ ind + 1 ] == 0xFE ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; ind += 9 ; } else { gemsafe_prkeys [ i ]. ref = 0 ; } <S2SV_ModEnd> i ++ ;",0
1356,"<S2SV_ModStart>!= 0 ) { trace_kvm_msr_write_ex ( ecx, data ) ; kvm_inject_gp ( vcpu, 0",0
1357,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_const_dup ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ) ) ) ) ) ) ) ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ) ) ) ), ( int ) rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= _CACHE_MASK ; return vm_iomap_memory ( vma, fbdev -> fb_phys, fbdev -> fb_len, vma -> vm_pgoff << PAGE_SHIFT, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> config_arg ) ; if ( i < 0 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> / 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 6 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 5 * state -> xsize ) /,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> ; err = - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EBUSY ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_EBPF || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_EBPF || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU,0
1364,<S2SV_ModStart> -> nmi && <S2SV_ModEnd> handle -> event <S2SV_ModStart> -> pending ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * s += size ; len -= size ; } else { * op ++ = ( wchar_t ) * s ++ ; len -= size ; } <S2SV_ModEnd> op += size",0
1366,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> v, i <S2SV_ModStart>!= 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; }",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; }",0
1368,<S2SV_ModStart> AF_INET6 ; } if ( dt -> vlan_id [ 0 ] < 0 || dt -> vlan_id [ 1 ] < 0 || dt -> vlan_id [ 0 ] > UINT32_MAX / sizeof ( dt -> vlan_id [ 0 ] ) ) { dt -> vlan_id [ 0 ] = UINT32_MAX / sizeof ( dt -> vlan_id [ 0 ] ) ; dt -> vlan_id [ 1 ] = UINT32_MAX / sizeof ( dt -> vlan_id [ 1 ] ) ; } else { dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; dt -> vlan_id [ 1 ] = UINT32_MAX / sizeof ( dt -> vlan_id [ 1 ] ) ; },0
1369,"<S2SV_ModStart> ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ancillary = NET_DEFAULT_RX_ANCILLARY ; nicProcessPacket ( interface, context -> rxBuffer, n, & ancillary ) ; return ERROR_INVALID_PACKET ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1370,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ast_for_funcdef_impl ( struct <S2SV_ModStart>, int is_async, const asdl_seq * decorator_seq <S2SV_ModStart>, returns, type_comment, LINENO ( n ) <S2SV_ModEnd>, c -> <S2SV_ModStart>, type_comment, LINENO ( n ) <S2SV_ModEnd>, n -> <S2SV_ModStart>, type_comment, LINENO ( n ) <S2SV_ModEnd>, n -> <S2SV_ModStart>, LINENO ( n ) <S2SV_ModEnd>, n ->",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; flush_tlb ( ) ;",0
1372,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED, <S2SV_ModEnd> & sa,",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; jas_uint32_t tilewidth = 0 ; jas_uint32_t tileheight = 0 ; jas_uint32_t tilexoff = 0 ; jas_uint32_t tileyoff = 0 ; if ( jas_getuint32 ( in, & tilewidth ) || jas_getuint32 ( in, & tileheight ) || jpc_getuint32 ( in, & tilexoff ) || jas_getuint32 ( in, & tileyoff ) || jpc_getuint32 ( in, & tileheight ) ||! siz -> width ||! siz -> height ||! siz -> tilewidth ||! siz -> tileheight ||! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height || siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height",0
1374,"<S2SV_ModStart> = 0 ; if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; }",0
1375,"<S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely (! iov_ok ( iov, nr_segs ) ) ) { ret = - EINVAL ; do_wakeup = 1 ; break ; } <S2SV_ModStart> -> ops ; size_t <S2SV_ModEnd> error, atomic <S2SV_ModStart> int error, atomic ; if ( unlikely (! ops -> confirm ( pipe, buf ) ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> error =! <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } atomic =! iov_fault_in_pages_write ( iov, chars ) ; if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = 0 ; break ; } if (! ret ) ret = error ; break ; } do_wakeup",0
1377,"<S2SV_ModStart> MaxGIFBits ) # define GIFOutputCode ( code ) { if ( bits + number_bits > data_size ) { MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( ""MagickError(MagickError(MagickError(MagickError ( ""MagickError(MagickError(MagickError"" ) ), ""MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickError(MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickImageEncodeError"", ""MagickImageEncodeError"", """,0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> argv [ ] ) { p_fm_config_conx_hdlt hdl ; int instance = 0 ; fm_mgr_config_errno_t res <S2SV_ModStart> ) ) ; res = - 1 ; <S2SV_ModStart> ) ) ; res = - 1 ; goto die_clean ; } if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { if ( strcmp ( command, commandList [ i ]. name ) == 0 ) { if ( commandList [ i ]. cmdPtr == NULL ) { fprintf ( stderr, ""Command <S2SV_blank> (%s) <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"", commandList [ i ]. name ) ; return - 1 ; } } if ( strcmp ( command, commandList [ i ]. name ) == 0 ) { fprintf ( stderr, ""Command <S2SV_blank> (%s) <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"", commandList [ i ]. mgr, ( argc - optind ), & argv [",0
1380,"<S2SV_ModStart> ; if ( argc < 1 || argc > 2 ) { fprintf ( stderr, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> arguments\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( argc < 1 ) { fprintf ( stderr, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> arguments\\n"" ) ; exit ( EXIT_FAILURE ) ; } cmdname = argv [ 0 ] ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : usage ( ) ; break ; } jas_setdbglevel ( verbose ) ; jas_setdbglevel ( debug ) ; jas_setdbglevel ( verbose ) ; jas_set",0
1381,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,<S2SV_ModStart> ; for ( int i = 0 ; i < raw_height ; i ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) > 4098 && j < width ) derror ( ) ; } else if ( ( j = raw_bits ( 8 ) ) > 4098 && j < width ) derror ( ) ; } else if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) > 4098 && j < width ) derror ( ) ; } else if ( ( j = raw_bits ( 8 ) ) > 4098 && j < width ) derror ( ) ; } else,0
1383,<S2SV_ModStart> len < needed ||! nl,0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> int idx, ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> nr_rt_entries ) { if ( guest_irq >= irq_rt -> nr_rt_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( vcpu, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } goto out ; } <S2SV_ModEnd> } } }",0
1386,<S2SV_ModStart> bfqq ) return <S2SV_ModEnd> bfq_idle_slice_timer_body ( bfqq,0
1387,<S2SV_ModStart> } else { if ( <S2SV_ModEnd> rold -> umin_value <S2SV_ModStart> -> umax_value == 0 <S2SV_ModEnd> && rold -> <S2SV_ModStart> -> smin_value == S64_MIN <S2SV_ModEnd> && rold -> <S2SV_ModStart> -> smax_value == S64_MAX <S2SV_ModEnd> && tnum_is_unknown (,0
1388,<S2SV_ModStart> ; if ( handle == NULL || handle -> dwUpper < 0 ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if ( pointer == NULL ) return NULL ;,0
1389,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
1390,<S2SV_ModStart> -> d_inode ) { if ( ovl_dentry_lower ( old ) -> d_inode!= ovl_dentry_lower ( new ) -> d_inode ) goto out ; if ( ovl_dentry_lower ( new ) -> d_inode!= ovl_dentry_lower ( old ) -> d_inode ) goto out ; },0
1391,"<S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; fprintf <S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; fprintf <S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; fprintf <S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; fprintf <S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; fprintf <S2SV_ModStart>, tlen, tlen2 <S2SV_ModEnd> ) ; fprintf",0
1392,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
1393,<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0,0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_readers = 0 ;,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; <S2SV_ModEnd> int mi_row, <S2SV_ModStart>, mi_row, mi_col, rate, dist, BLOCK_SIZE bsize ) { if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; <S2SV_ModEnd> } <S2SV_null>",0
1396,<S2SV_ModStart> ( csum ) { <S2SV_ModEnd> dev -> hw_features <S2SV_ModStart> |= NETIF_F_HW_CSUM | <S2SV_ModEnd> NETIF_F_SG | NETIF_F_FRAGLIST <S2SV_ModStart> |= NETIF_F_HW_CSUM | <S2SV_ModEnd> NETIF_F_FRAGLIST ; } <S2SV_ModStart> ( csum ) { <S2SV_ModEnd> dev -> features <S2SV_ModStart> |= NETIF_F_HW_CSUM | <S2SV_ModEnd> NETIF_F_SG | NETIF_F_FRAGLIST,0
1397,"<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse )",0
1399,<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange <S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
1400,<S2SV_ModStart> -> m_rtdev_targ ) ) return __this_address ; <S2SV_ModEnd> if ( di_size <S2SV_ModStart> di_anextents ) + be16_to_cpu ( dip -> di_freecount ) > mp -> m_sb. sb_inodesize ) return __this_address ; <S2SV_ModEnd> if ( mode,0
1401,"<S2SV_ModStart> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG",0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,<S2SV_ModStart> event ) ; WARN_ON_ONCE ( swhash -> online ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_HOSTNAME : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> res -> outputbuffer, ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; snprintf ( constr2, sizeof ( constr2 ), ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; snprintf ( constr1, sizeof ( constr1 ), ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; snprintf ( constr2, sizeof ( constr2 ), ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ) ; snprintf ( constr2, sizeof ( constr2 ), ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; snprintf ( constr2, sizeof ( ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ), ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ; snprintf ( constr2, sizeof ( constr2 ), ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ) ;",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; },0
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> compat ) ; <S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ;",0
1410,"<S2SV_ModStart>. cas ) ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; } else { fprintf ( stderr, ""%d: <S2SV_blank> Client <S2SV_blank> using <S2SV_blank> the <S2SV_blank> %s <S2SV_blank> protocol\\n"", c -> sfd, prot_text ( c -> protocol ) ) ; }",0
1411,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES ) ; iad_num ++ ; }",0
1412,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if ( info -> count > MAX_USER_CONTROLS ) return - EINVAL ; if (,0
1413,"<S2SV_ModStart> { exit_client ( client_p <S2SV_ModEnd>, client_p, <S2SV_ModStart>, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS ), me. name, ""*"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDARGS",0
1414,<S2SV_ModStart> ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ^ 6 ; break ; case 0x67 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else if ( mode == X86EMUL_MODE_REAL ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else if ( mode == X86EMUL_MODE_PROT32 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else if ( mode == X86EMUL_MODE_REAL ) ctxt -> ad_bytes = def_ad_bytes ; else if ( mode == X86EMUL_MODE_VM86 ) ctxt -> ad_bytes = def_ad_bytes ; else if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_,0
1415,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1416,<S2SV_ModStart> ~ IFF_XMIT_DST_RELEASE ; <S2SV_ModEnd> random_ether_addr ( dev,0
1417,"<S2SV_ModStart> 16 ) ; vp8_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; error16x16 = this_rd ; distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; start [ maxlen - 1 ] = 0 ; psf -> headindex = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) <S2SV_ModEnd> ; return ;",0
1420,<S2SV_ModStart> ; if ( unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < 0 && unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < 0 && unconditional ( e <S2SV_ModEnd> ) ) ||,0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> destroy ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> priv -> alg_priv <S2SV_ModEnd> ) ; },0
1422,<S2SV_ModStart> CPU_BASED_RDTSC_EXITING ) ; <S2SV_ModEnd> case EXIT_REASON_RDPMC_EXITING : <S2SV_ModStart> CPU_BASED_RDPMC_EXITING ) ; <S2SV_ModEnd> case EXIT_REASON_RDTSC_EXITING : <S2SV_ModStart> CPU_BASED_RDTSC_EXITING ) ; <S2SV_ModEnd> case EXIT_REASON_RDPMC_EXITING :,0
1423,<S2SV_ModStart> speed ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_SPATIAL ) { if ( cpi -> frame_type,0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < 0 ) return NF_DROP ;",0
1425,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * raw ++ = * raw ++ ; int quote = Py_CHARMASK ( * raw ++ ) ; char * s = _PyUnicode_AsString ( raw ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; Py_DECREF ( type ) ; Py_DECREF ( tback ) ; Py_DECREF ( type ) ; Py_DECREF ( type ) ; Py_DECREF ( tback ) ; Py_DECREF ( type ) ; Py_DE",0
1430,"<S2SV_ModStart> * input_ptr ; int <S2SV_ModEnd> is_keyframe_qaunt_set = 0 <S2SV_ModStart> ; } else if ( strcmp ( ""spatial-layers"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> spatial <S2SV_blank> layers: <S2SV_blank> %s\\n"", option_name ) ; return res ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> scale-factors: <S2SV_blank> %s\\n"", option_name ) ; return res ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> quantizers: <S2SV_blank> %s\\n"", option_name ) ; return res ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> quantizers-keyframe: <S2SV_blank> %s\\n"", option_name",0
1431,"<S2SV_ModStart> context ) ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return",0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; data += frame -> linesize [ plane ] ; } } av_log ( ctx, AV_LOG_INFO, ""n:%"" PRId64 "" <S2SV_blank> pts:%s <S2SV_blank> pts_time:%s <S2SV_blank> pos",0
1433,"<S2SV_ModStart> ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; }",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> ) ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
1437,"<S2SV_ModStart> (! ( flags & ( SOCK_THREAD_FD_READ | SOCK_THREAD_FD_WRITE ) ) || ( ( flags & ( SOCK_THREAD_FD_WRITE | SOCK_THREAD_FD_EXCEPTION ) ) && ( ( flags & ( SOCK_THREAD_FD_READ | SOCK_THREAD_FD_WRITE ) ) == 0 && size ) ) ) { pthread_mutex_unlock ( & slot_lock ) ; BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id ) ; } else { BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id ) ; } } if ( flags & ( SOCK_THREAD_FD_RD | SOCK_THREAD_FD_WR ) ) && ( flags & ( SOCK_THREAD_FD_WRITE | SOCK_THREAD_FD_EXCEPTION ) ) { pthread_mutex_unlock ( & slot_lock ) ; cleanup_rfc_slot ( slot ) ; } if ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION ) ) { if ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION ) ) { pthread_mutex_unlock ( & slot_",0
1438,"<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( len_remain < 4 ) { pr_err ( ""%s: <S2SV_blank> Too <S2SV_blank> short <S2SV_blank> PPI <S2SV_blank> packet"", __func__ ) ; return ; } if ( len_remain < 4 ) { pr_err ( ""%s: <S2SV_blank> Too <S2SV_blank> short <S2SV_blank> PPI <S2SV_blank> packet"", __func__ ) ; return ; } if ( len_remain < 4 ) { pr_err ( ""%s: <S2SV_blank> Too <S2SV_blank> short <S2SV_blank> PPI <S2SV_blank> packet"", __func__ ) ; return ; } if ( mpdu_len < 4 ) { pr_err ( ""%s: <S2SV_blank> Too <S2SV_blank> short <S2SV_blank> PPI <S2SV_blank> packet"", __func__ ) ; return ; }",0
1439,<S2SV_ModStart> ; sh = s_malloc <S2SV_ModEnd> ( hdrlen +,0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> -> ChromaSubsamplingLevel? 1 : 0 <S2SV_ModEnd> ; rw = <S2SV_ModStart> -> ColorLossLevel ; src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 4 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 5 ] + y * scanline ; for ( x = 0 ; x < context -> width ; x ++ ) { BYTE r_val = * src ++ ; BYTE g_val = * src ++ ; BYTE b_val = * src ++ ; BYTE r_val = * src ++ ; BYTE b_val = * src ++ ; BYTE a_val = * src,0
1441,"<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; } else { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; }",0
1442,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS ) { parse_error ( pe, FILT_ERR_TOO_MANY_PRE",0
1443,<S2SV_ModStart> cpi ) { RATE_CONTROL * const rc = & cpi -> rc <S2SV_ModEnd> ; int target <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2,0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_tx_mode <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,"<S2SV_ModStart> OSPF_TYPE_HELLO : { ND_TCHECK_32BITS ( & hellop -> hello_options ) ; ND_PRINT ( ( ndo, ""\\n\\tOptions <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK_16BITS ( & hellop -> hello_deadint ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %u, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %u, <S2SV_blank> Interface-ID <S2SV_blank> %u, <S2SV_blank> Priority <S2SV_blank> %u"", ipaddr_string ( ndo, & hellop -> hello_ifid ), hellop -> hello_priority ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hello",0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 ) return - EINVAL ; if (,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; if ( rc -> uwbd. task == NULL ) { mutex_unlock ( & rc -> uwbd. mutex ) ; return ; } <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ;",0
1449,"<S2SV_ModStart> 6 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1045 ""re_grammar.c"" break ; case 26 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 ""re_grammar.c"" break ; case 27 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1057 ""re_grammar.c"" break ; case 29 : # line 100 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1069 ""re_grammar.c"" break ; case 29 : # line 101 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1055 ""re_grammar.c"" break ; case 30 : # line 102 ""re_grammar.y"" { yr_",0
1450,<S2SV_ModStart> char ) ( ( <S2SV_ModEnd> col & mask <S2SV_ModStart> bitIdx ) ) <S2SV_ModEnd> ; if (,0
1451,"<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> const MACROBLOCKD * <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t * const coef_probs = cpi -> fc. coef_probs [ tx_size ] [ <S2SV_ModEnd> ref ] ; <S2SV_ModStart> int aoff, loff <S2SV_ModEnd> ; pt = <S2SV_ModStart> txfrm_block_to_raster_xy ( plane_bsize <S2SV_ModStart> txfrm_block_to_raster_xy ( plane_bsize, tx_size, block, & aoff, & loff ) ; pt = get_entropy_context ( tx_size, pd -> above_context + aoff, pd -> above_context + loff, band ) ; pt = get_entropy_context ( tx_size, pd -> above_context + aoff, band ) ; pt = get_entropy_context ( tx_size",0
1452,<S2SV_ModStart>. pSrc ; if ( pSelect -> nSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } if (,0
1453,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &= <S2SV_ModStart> ( shmflg & SHM_MAYWRITE <S2SV_ModEnd> ) addr &=,0
1454,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) return cb_info -> serv ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ;",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVSupportsWebkit : type = RPC_TYPE_UINT32 ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVPluginElementNPObject : type = RPC_TYPE_NP_OBJECT ; break ; default : type = RPC_ERROR_GENERIC ; break ; },0
1458,"<S2SV_ModStart> ; ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
1459,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> siz:%d, <S2SV_blank> siz:%d, <S2SV_blank> ret:%d"", sock_fd, s, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( strcmp ( xIter -> value, XML_ATTR_ID ) == 0 ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } while ( cIter!= NULL ) { xmlNode * child = cIter ; cIter = __xml",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> svc_ctx -> internal <S2SV_ModEnd> ; } <S2SV_null>,0
1462,"<S2SV_ModStart> STREAM s ) { RD_UINT32 <S2SV_ModEnd> length ;ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & <S2SV_ModEnd> length ) ;",0
1463,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } <S2SV_null>,0
1464,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = _y4m -> vpx_bps <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ) { fprintf <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ) ; } <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if (,0
1465,"<S2SV_ModStart> struct obj * otmp ; if (! isprint ( buf ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp == & zeroobj ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ; if ( read_uid_guids ( fd, & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start =",0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> -> count = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> count ++ ; },0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_rows * cm -> mi_cols, sizeof ( cpi -> segmentation_map ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_cols, sizeof ( cpi -> complexity_map ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_rows * cm -> mi_cols, sizeof ( cpi -> complexity_map ) ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, & AST_type, 4 ) ) return 0 ; stmt_attributes = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, & AST_type, 4 ) ) return 0 ; stmt_attributes = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModStart> ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16",0
1471,<S2SV_ModStart> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 8 ; } break ; case 3 : context -> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case 5 : context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 6 : context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 7 : context -> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case 8 : context -> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i,0
1472,<S2SV_ModStart> b < 16 ) ; } # else ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1473,"<S2SV_ModStart> ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> ) ; } mutex_enter ( & file -> f_mutex ) ; smb_flush_file ( sr, file ) ; mutex_exit ( & file -> f_mutex ) ; file = smb_llist_next ( flist, file ) ;",0
1474,<S2SV_ModStart> 0 ] == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> ] == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> ] == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> 0 ] == '\\0' <S2SV_ModEnd> || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0 <S2SV_ModStart> == '\\0' || <S2SV_ModEnd> buf [ 0,0
1475,"<S2SV_ModStart> cinput ) { char * s, * t, * StartClean ; double * argbuf = 0 <S2SV_ModStart> * s, * t, * StartClean, * <S2SV_ModStart> * t, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart> ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1 ) ; } } StartClean =",0
1476,"<S2SV_ModStart> { static u32 <S2SV_ModEnd> ip_idents_hashrnd __read_mostly ; <S2SV_ModStart> id ; net_get_random_once ( & ip_idents_hashrnd, sizeof ( ip_idents_hashrnd ) ) ; <S2SV_ModStart> id ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1477,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ;",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1479,"<S2SV_ModStart> = gecos ; if ( ctl -> pw -> pw_gecos!= gecos ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { if ( radiotap_header -> it_version < IEEE80211_RADIOTAP_VERSION_1 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_2 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_3 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_1 || radiotap_header -> it_version > IEEE80211_RADIOTAP_VERSION_2 <S2SV_ModEnd> ) return -,0
1481,"<S2SV_ModStart> int err ; struct tc_cls_u32_knode_sel * sel ; <S2SV_ModStart> extack ) ) goto err_delete ; sel = nfp_abm_u32_sel_knode_sel ( knode ) ; if (! sel ) goto err_delete ; mask = sel -> keys [ 0 ]. mask >> tos_off & 0xff ; val = sel -> keys [ 0 ]. val >> tos_off & 0xff ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } list_add ( & match -> list, & alink -> dscp_map ) ; }",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr,",0
1483,<S2SV_ModStart>. cfg. <S2SV_ModEnd> g_pass = global <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get,0
1484,"<S2SV_ModStart> new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_auto ( GStrv ) groups = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) new_exec = NULL ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_autoptr ( GOutputStream ) out_stream = g_strdup ( tmpfile_name ) ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) old_argv",0
1485,<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_,0
1486,"<S2SV_ModStart> VP9D_CONFIG * oxcf, vpx_bit_depth_t bit_depth <S2SV_ModStart> = vpx_memalign ( bit_depth <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> pbi ) ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> ready_for_new_data = 1 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & cm -> lf_worker ) ; return pbi ; } cm -> error. setjmp = 0 ; vp9_worker_init ( & cm -> lf_worker ) ; return pbi ; } <S2SV_null> <S2SV_null>",0
1487,"<S2SV_ModStart> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1489,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; opt = rcu_dereference_protected ( req_inet -> opt, sock_owned_by_user ( req -> sk ) ) ; if ( opt == NULL || opt -> cipso == 0 ) return ; opt -> cipso = 0 ;",0
1490,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_ARF ) upd ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF",0
1492,"<S2SV_ModStart> wqh ) ; <S2SV_ModEnd> if ( isalarm <S2SV_ModStart> clockid == CLOCK_REALTIME_ALARM? ALARM_REALTIME : ALARM_BOOTTIME <S2SV_ModEnd>, timerfd_alarmproc )",0
1493,"<S2SV_ModStart> * child, * <S2SV_ModStart> int err ; if ( IS_MNT_UNSHARED ( dest_mnt ) ) { err = invent_group_ids ( source_mnt, true ) ; if ( err ) goto out ; unlock_mount_hash ( ) ; set_mnt_shared ( dest_mnt ) ; } else { lock_mount_hash ( ) ; } if ( parent_path ) { mnt_set_mountpoint ( dest_mnt, parent_path ) ; touch_mnt_namespace ( dest_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; touch_mnt_namespace ( dest_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; touch_mnt_namespace ( dest_mnt -> mnt_ns ) ; } unlock_mount_hash ( ) ; cleanup_group_ids ( source_mnt, NULL ) ; <S2SV_ModEnd> } <S2SV_null>",0
1494,"<S2SV_ModStart> len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; }",0
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) <S2SV_ModEnd> rc -> av_per_frame_bandwidth,0
1497,"<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN <S2SV_ModStart> MIF_MAGICLEN ] ; jas_uchar buf [ 4 ] ; jas_uchar magicbuf [ MIF_MAGICLEN ] ; char buf [ 4096 ] ; jas_stream_read ( in, buf, sizeof ( buf ) ) ; if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ; } if ( jas_stream_read ( in, buf, sizeof ( buf ) )!= MIF_MAGICLEN ) { jas_eprintf ( ""error: <S2SV_blank> bad <S2SV_blank> signature\\n"" ) ; goto error ;",0
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff <S2SV_ModStart> NYT, fout ) ; if ( huff -> loc [ ch ] == NULL ) { send ( huff -> loc [ ch ], NULL, fout ) ; } else { send ( huff -> loc [ ch ], NULL, fout ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMMON <S2SV_ModStart> x = & cpi <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & cpi <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & cpi <S2SV_ModEnd> -> e_mbd ; <S2SV_ModStart> x = & cpi <S2SV_ModEnd> -> e_mbd ; <S2SV_ModStart> -> skip_recode = <S2SV_ModEnd> ctx -> is_coded <S2SV_ModStart> -> skip_optimize = <S2SV_ModEnd> ctx -> is_coded <S2SV_ModStart> skip_encode ) return ; if ( cpi -> oxcf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) return ; if ( cm -> frame_type == KEY_FRAME ) { set_ref_ptrs ( cm, xd, mi -> ref_frame [ 0 ], mbmi -> ref_frame [ 1 ], mbmi -> ref_frame [ 2 ], mbmi -> ref_frame [ 3 ], mbmi -> ref_frame [ 4 ], mbmi -> ref_frame [ 5 ], mbmi -> ref_frame [ 6 ], mbmi -> ref_frame [ 7 ], mbmi -> ref_frame [ 8 ], mbmi ->",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> crypto_skcipher * tfm_des = NULL <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"", 0 <S2SV_ModEnd>, CRYPTO_ALG_ASYNC ) <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0,",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1502,"<S2SV_ModStart> uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) {",0
1503,<S2SV_ModStart> += delta ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info & VMX_IDT_VECTOR_NMI ) return 0 ;",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) goto out ;,0
1508,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) { assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; return r ; } assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <=",0
1509,"<S2SV_ModStart> 4 ) { if ( dds_info -> width < x || dds_info -> height < y ) return MagickFalse ; <S2SV_ModStart> dds_info, x, <S2SV_ModStart> dds_info, y, <S2SV_ModStart> dds_info, x + 4, dds_info -> width, dds_info -> height <S2SV_ModEnd> ), exception <S2SV_ModStart> dds_info, x + 4, dds_info -> height <S2SV_ModEnd> ), exception <S2SV_ModStart> dds_info, 8 <S2SV_ModEnd> ) ; return",0
1510,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ;",0
1512,<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1513,"<S2SV_ModStart> ; if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; else if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ;",0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; }",0
1515,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
1516,"<S2SV_ModStart> * totalrate ) { memset ( tp, 0, sizeof ( TOKENEXTRA ) ) ; memset ( tp_start, 0, sizeof ( TOKENEXTRA ) ) ; memset ( tp_start, 0, sizeof ( TOKENEXTRA ) ) ;",0
1517,"<S2SV_ModStart> pvc ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( <S2SV_ModStart> type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,"<S2SV_ModStart> * data ; if (! s_check_rem ( s, 4 ) ) { abort ( ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { abort ( ) ; } if ( status == CLIPRDR_ERROR ) { switch ( type ) { case CLIPRDR_FORMAT_ACK : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_DATA_REQUEST : ui_clip_request_data ( last_formats_length ) ; break ; case CLIPRDR_DATA_RESPONSE : ui_clip_handle_data ( last_formats, last_formats_length ) ; break ; case 7 : ui_clip_handle_data ( last_formats, last_formats_length ) ; break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> error <S2SV_blank> (type=%d)"", type ) ; }",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( l -> lineBuf [ c_rows ] =='<S2SV_blank>') break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c_rows ] == '*' ) break ; if ( l -> lineBuf [ c,0
1521,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; } if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxBlock -> xBlockSize = xWantedSize ; pxBlock -> pxNextFreeBlock = pxBlock ->,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFError ( tif, ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return - 1 ; } if ( cc <= 0 ) { TIFFError ( tif, ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return - 1 ; } if ( cc <= 0 ) { TIFFError ( tif, ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModEnd> _TIFFmemcpy ( tmp <S2SV_ModStart> ++ ) { TIFFError ( tif, ""MemoryAllocationFailed"", ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return 0 ;",0
1525,"<S2SV_ModStart> STREAM s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, __func__ ) ; if ( s -> l + 4 > MAX_STREAM_SIZE ) { abort ( ) ; } <S2SV_ModStart> ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if",0
1526,"<S2SV_ModStart> } else { if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""level"" ) ) { level = ( ssize ) getnum ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Level <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Level <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> lar",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> coef_probs ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
1528,"<S2SV_ModStart> } ; assert ( name ) ; <S2SV_ModStart> name ) ; r = loop_write ( fd, ""\\033%G"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ;",0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_state * state = d -> priv ; if ( dvb_usb_generic_rw ( d, state, 3, & state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, state, 3, & state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, state, 3, & state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ds3000_attach, & su3000_ds3000_config, & d -> dev -> i2c_adap ) ; if (",0
1530,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && (",0
1531,"<S2SV_ModStart>, int stride, vpx_bit_depth_t bit_depth <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> int uv_stride ; vpx_bit_depth_t bit_depth = vpx_bit_depth_to_bit_depth ( bit_depth ) ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], bit_depth, & mv, scale, bit_depth, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], bit_depth, which_mv, kernel, MV_PRECISION_Q4, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr",0
1532,"<S2SV_ModStart> ; mungspaces ( strncpy <S2SV_ModEnd> ( buf, <S2SV_ModStart> origbuf ) ) ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'' ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'' ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank>",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * cJSON_CreateFloatArray ( double <S2SV_ModEnd> * numbers, <S2SV_ModStart> < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_null>",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; die : return ;",0
1535,<S2SV_ModStart> float * w = f -> previous_window [ f -> channels - 1 ] <S2SV_ModEnd> ; for (,0
1536,"<S2SV_ModStart> { VP9_COMMON * const cm = pbi -> common ; const int num_workers = MIN ( pbi -> oxcf. max_threads, pbi -> oxcf. tile_workers ) ; const int tile_cols = MIN ( pbi -> oxcf. tile_workers, tile_cols ) ; const int tile_rows = MIN ( pbi -> oxcf. tile_rows, tile_rows ) ; const int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = MIN ( pbi -> oxcf. max_threads, pbi -> oxcf. tile_workers ) ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm",0
1537,<S2SV_ModStart> * 0x101 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp,0
1538,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; vpx_clear_segmentation ( seg ) ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = ( double ) segment_rdmult / base_rdmult <S2SV_ModEnd> ; for ( <S2SV_ModStart> i ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_enable_segfeature",0
1539,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> samplesperpixel <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> samplesperpixel <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; }",0
1540,<S2SV_ModStart>. err_detail = error <S2SV_ModEnd> -> has_detail? <S2SV_ModStart> -> has_detail? error <S2SV_ModEnd> -> detail :,0
1541,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1542,"<S2SV_ModStart>, 4, BSON_VALIDATE_DOT_KEYS <S2SV_ModEnd>, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\""""",0
1543,"<S2SV_ModStart> ; pocstruct_t * ps_prev_poc, * ps_cur_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (",0
1544,<S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> if ( is_vm_hugetlb_page <S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> if ( is_vm_hugetlb_page <S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> if ( is_vm_hugetlb_page <S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> if ( is_vm_hugetlb_page <S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> if ( is_vm_hugetlb_page,0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> congest_packet ) ) ),0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> ; do { if (! isdigit ( * ( * fmt ) ++ ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * ( * fmt ) ) ) ; return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ;",0
1548,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
1549,"<S2SV_ModStart> { 'S' } ; uint8_t * ssl_request = & ssl_request [ sizeof ssl_request ] ; uint8_t * ssl_ok = & ssl_ok [ sizeof ssl_ok ] ; if ( phase == PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank>",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> char * server <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks = <S2SV_ModStart> cib_fd_callbacks = { } <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_ICMP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( cpi ->",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJOR, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1553,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ 1 ] ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x",0
1554,"<S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) { * set_rtrn = false ; return false ; } <S2SV_ModEnd> if ( ok",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> int rc ; <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1557,"<S2SV_ModStart> MaxTextExtent ] ; size_t <S2SV_ModEnd> length, padding <S2SV_ModStart>, length, padding <S2SV_ModEnd>, version, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value,",0
1558,"<S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc ->",0
1559,"<S2SV_ModStart> chanmode ) { if ( irc_mode_channel_add_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_remove_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_add_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_remove_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_add_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_remove_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_add_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_remove_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_remove_arg ( server, channel, set_flag, argument ) ) { if ( irc_mode_channel_remove_arg ( server, channel, set_flag, argument ) )",0
1560,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = <S2SV_ModEnd> t -> owner <S2SV_ModStart> -> certificate_check_cb ( cert, <S2SV_ModEnd> is_valid, t <S2SV_ModStart> -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; }",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> mode = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ;",0
1564,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream -> config ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream -> config. cfg ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( stream -> config. cfg ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. debug = global -> debug ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> ebml. cfg. g_lag_in_frames = 0 ; stream -> next = NULL ; return stream ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1565,"<S2SV_ModStart> nd_opt_rdnssl * opds ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opp -> nd_opt_mtu ), opp -> nd_opt_len ) ;",0
1566,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr_printf ( yr_printf ( yr_printf ( yr_printf ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> root_node\\n"", sizeof ( RE_AST ) ) ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr_printf ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> root_node\\n"", sizeof ( RE_AST ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr_printf ( yr_printf ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> root_node\\n"", sizeof ( RE_AST ) ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr",0
1567,"<S2SV_ModStart> ( path, <S2SV_ModEnd> iter -> var_expand_table <S2SV_ModStart> ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ;",0
1568,<S2SV_ModStart> ; if ( A >= <S2SV_ModEnd> skb -> len <S2SV_ModStart> A ] ; if ( nla -> nla_len > <S2SV_ModEnd> A - skb <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0 <S2SV_ModStart> A ] ; if ( nla -> nla_len < <S2SV_ModEnd> A - skb <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>""",0
1571,"<S2SV_ModStart> SC_MAX_SERIALNR ) ; if (! serial -> value ) { SC_FUNC_RETURN ( card -> ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND ) ; }",0
1572,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1573,"<S2SV_ModStart> maxBitrate ; } av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config",0
1574,<S2SV_ModStart> r ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> ] = '\\0' <S2SV_ModEnd> ; set_string ( <S2SV_ModStart> ] = '\\0' <S2SV_ModEnd> ; set_string (,0
1575,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS * 384 + 32 + 15 ) ; ASSERT ( noReordering ) ;,0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! sock ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen ) addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_,0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> final_p ; struct ipv6_txoptions * opt <S2SV_ModStart> np ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } else if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected (",0
1580,"<S2SV_ModStart>, found, <S2SV_ModEnd> err, overlays <S2SV_ModStart>, found, <S2SV_ModEnd> err, overlays <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, found, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart> pe_plus, corrupted_cur <S2SV_ModEnd> ) ; #",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR ) & DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; dm9000ReadReg <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
1582,"<S2SV_ModStart> -> tiff_datasize ) ; if ( striplength > t2p -> tiff_samplesize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_samplesize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_samplesize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank>",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * cred = __task_cred ( child ) ; <S2SV_ModStart> new_parent, cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, <S2SV_ModEnd> & ( private <S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, <S2SV_ModEnd> & ( private <S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, <S2SV_ModEnd> & ( private <S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, <S2SV_ModEnd> & ( private <S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, <S2SV_ModEnd> & ( private <S2SV_ModStart> private -> callback ) ; } } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_",0
1585,<S2SV_ModStart> = ubuf ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ;,0
1586,"<S2SV_ModStart> int num00, tmp_err <S2SV_ModEnd>, n, <S2SV_ModStart> int new_mv_mode_penalty = 0 <S2SV_ModEnd> ; const int <S2SV_ModStart> int new_mv_mode_penalty = 0 <S2SV_ModEnd> ; const int <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err <",0
1587,"<S2SV_ModStart> goto error ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1588,<S2SV_ModStart> = ( child -> <S2SV_ModEnd> resbody_access == NOT_SET <S2SV_ModStart> = ( child -> <S2SV_ModEnd> resbody_access == NOT_SET <S2SV_ModStart> = ( child -> <S2SV_ModEnd> if_limit_action == NOT_SET <S2SV_ModStart> = ( child -> <S2SV_ModEnd> if_limit_action == NOT_SET <S2SV_ModStart> = ( child -> <S2SV_ModEnd> of_limit_action == NOT_SET <S2SV_ModStart> = ( child -> <S2SV_ModEnd> if_limit_action == NOT_SET <S2SV_ModStart> = ( child -> <S2SV_ModEnd> if_limit_action ==,0
1589,"<S2SV_ModStart> ctl_buf, ctl_len, <S2SV_ModEnd> msg_sys -> msg_namelen <S2SV_ModStart> ctl_buf, ctl_len, msg_sys -> <S2SV_ModStart> ctl_buf, ctl_len, msg_sys -> msg_namelen <S2SV_ModEnd> ) ; if",0
1590,"<S2SV_ModStart>, number_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, pixel_info_length ) ; if ( pixel_info_length < 0 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf",0
1592,"<S2SV_ModStart> tok ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { return - 1 ; } ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } if ( smatch ( option, ""content"" ) ) { httpSetTraceContentSize ( route -> trace, ( ssize ) getnum ( ovalue ) ) ; } else if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; }",0
1593,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> id ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { lua_assert (! iswhite ( thread ) ) ; markvalue ( g, uv -> v ) ; } else { if (! iswhite ( thread ) ) markvalue ( g, uv -> v ) ; } else { if (! iswhite ( thread ) ) markvalue ( g, uv -> v ) ; } else { if (! iswhite ( thread ) ) markvalue ( g, uv -> v ) ; }",0
