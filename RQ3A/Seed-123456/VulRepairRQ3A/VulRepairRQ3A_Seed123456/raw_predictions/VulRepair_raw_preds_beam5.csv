,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""N2SIZE <S2SV_blank> too <S2SV_blank> short: <S2SV_blank> %d"", n2size ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ; return ; } <S2SV_ModStart> 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_TCHECK2 ( * tptr,",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_to_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( yi. cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) goto out ; <S2SV_ModStart> unfrag_ip6hlen ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) goto out ; <S2SV_ModStart> unfrag_len ) ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) goto out ;,0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; } else { time = avio_rb64 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; u64 tpgt_val <S2SV_ModEnd> ; int ret <S2SV_ModStart> - EINVAL ) ; tpgt_val = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt_val > UINT_MAX ) tpgt_val = UINT_MAX ; tpgt_val = tpgt_val <S2SV_ModEnd> ; tpg =",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> u32 data ; <S2SV_ModStart> return ; vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic ) ; <S2SV_ModEnd> apic_set_tpr ( vcpu",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> c -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"" <S2SV_ModEnd>, ( char",0
12,"<S2SV_ModStart> = NEXTHDR_FRAGMENT ; memset ( fptr, 0, unfrag_len ) ;",0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, & data <S2SV_ModEnd>, regs )",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ) ] ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t step1 [ 8 ] ; tran_high_t step2 [ 8 ] ; tran_high_t step3 [ 8 ] ; tran_high_t step4 [ 8 ] ; tran_high_t step5 [ 8 ] ; tran_high_t step6 [ 8 ] ; tran_high_t step7 [ 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp2 ; input <S2SV_ModStart> 8 ] ; tran_high_t temp1, temp2 ; tran_high_t temp3 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5",0
16,<S2SV_ModStart> env ) ; kfree ( env ) ;,0
17,"<S2SV_ModStart> -> num_channels ; int64_t <S2SV_ModEnd> i ; wpc <S2SV_ModStart> -> num_channels ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { return FALSE ; } <S2SV_ModStart> -> num_channels ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { return FALSE ; } <S2SV_ModStart> -> num_channels ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""libwavpack <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""highbrid <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } <S2SV_ModStart> -> num_channels ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""libwavpack <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } if ( config -> flags & CONFIG_HYBRID_FLAG ) { strcpy ( wpc -> error_message, ""hybrid <S2SV_blank>",0
18,<S2SV_ModStart> ; retry : if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModEnd> result = scsi_execute,0
19,"<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & sd -> common ; struct loopfilter * const lf = & cpi -> loopfilter <S2SV_ModEnd> ; const int <S2SV_ModStart> = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int filter_step = MIN ( filt_mid +",0
21,<S2SV_ModStart> left == 0 || c. left > INT_MAX,0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_mv_component ( vpx_writer <S2SV_ModStart>, comp ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart>, comp ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> cra_rng. rng_make_random && <S2SV_ModEnd> ralg -> cra_rng,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,"<S2SV_ModStart> char * fmtname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 0 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( infile ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } else { if (! ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> console_verbose ( ) <S2SV_ModStart> esr ) ; die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", regs, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ;",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; <S2SV_ModStart> intf ) ; if ( intf1 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf1 -> desc. bNumInterfaces <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> udev, intf1 -> desc. bNumInterfaces <S2SV_ModEnd>, alt )",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> * from, size_t <S2SV_ModEnd> fromlen, unsigned <S2SV_ModStart>, unsigned char * <S2SV_ModEnd> to ) { <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> elen = 0 <S2SV_ModStart> case 3 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 8 : memcpy ( p, ""../"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case",0
31,"<S2SV_ModStart> ; } } else if ( server. tcpkeepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; }",0
32,<S2SV_ModStart> unsigned long flags <S2SV_ModEnd> ; spin_lock_irqsave (,0
33,"<S2SV_ModStart> ) ) { retval = - ENODEV ; goto error ; } if (! dev -> interrupt_in_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> in <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if (! dev -> interrupt_out_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> out <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> ) ) ; if ( sdb_num_get ( sdb, ""entries"" ) < 0 || sdb_num_get ( sdb, ""offset"" ) < 0 || sdb_num_get ( sdb, ""link"" ) < 0 || sdb_num_get ( sdb, ""link"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""section_name"" ) < 0 || sdb_num_get ( sdb, ""section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""section_name"" )",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; down_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; if ( dest_keyring ) break ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( cred -> request_key_auth -> dest_keyring ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( rka -> dest_keyring ) ; else dest_keyring = key_get ( authkey -> dest_keyring",0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || addr -> l2tp_family!= AF_INET ) return - EINVAL ; if ( addr -> l2tp_family!= AF_L2TP <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; read_lock_bh ( & l2tp_ip_lock ) ; <S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) || addr -> l2tp_conn_id < 0 ) return - EINVAL ; ret = - EINVAL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) inet -> inet_saddr = 0 ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = addr -> l2tp_addr. s_addr ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int stack_maxrandom_size ( <S2SV_ModStart> ) { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> ( - 1U <S2SV_ModEnd> ) & STACK_RND_MASK <S2SV_ModStart> << PAGE_SHIFT ; return max ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
39,"<S2SV_ModStart> ( dialog ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ <S2SV_ModStart> ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" ), RESPONSE_MARK_TRUSTED ) ; gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ;",0
40,"<S2SV_ModStart> ; tm = g_time_sub ( <S2SV_ModEnd> t, 0 <S2SV_ModStart> t ) ; if (! tm ) return NULL",0
41,<S2SV_ModStart> length ) ; if ( strlen ( password ) + length > MAXPASS ) { abort ( ) ; },0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> 0 } ; struct dvb_usb_device * d = d -> dev ; struct dvb_usb_device_priv * priv = d -> priv ; struct dvb_usb_device_priv * priv = d -> priv ; struct dvb_usb_device_fe * fe = d -> fe_adap [ 0 ]. fe ; if ( fe == NULL ) return - EIO ; if ( d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & priv -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } if",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc ->",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w ->",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
46,"<S2SV_ModStart> tsample_t s ; if (! inbuf ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> cpcontig2SeparateByRow"" ) ; goto bad ; }",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> ) ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,<S2SV_ModStart> if (! e <S2SV_ModEnd> || e ==,0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { struct page * page ; <S2SV_ModStart> ) { get_page ( page ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> ep2 ) ; if ( ep2 ) ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> ep=%s <S2SV_blank> "", tcount, ep2 ) ) ;",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY )",0
54,<S2SV_ModStart> wp -> config -> <S2SV_ModEnd> pm_max_requests ; if,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( TWO_PASS <S2SV_ModStart> { int trans_to_still = 0 ; TWO_PASS * const twopass = & twopass -> twopass_base <S2SV_ModEnd> ; if ( <S2SV_ModStart> > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter",0
56,"<S2SV_ModStart> 0 ; } err = jbd2_journal_stop ( handle ) ; if ( handle -> h_err ) return handle -> h_err ; <S2SV_ModStart> handle ) ; handle -> h_err = err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : <S2SV_ModEnd> jbd2_journal_stop ( handle <S2SV_ModStart> handle ) ; if (! err ) err = <S2SV_ModEnd> jbd2_journal_stop ( handle <S2SV_ModStart> handle ) ; if (! err ) err = jbd2_journal_stop ( handle ) ; if (! err ) err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! rc ) err = rc ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
57,"<S2SV_ModStart> return ret ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) )",0
59,"<S2SV_ModStart> alg ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
60,"<S2SV_ModStart> 2 ) { if ( len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
61,"<S2SV_ModStart> ) { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> ) ; } if ( body_size + 2 > job_data_size_limit ) { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; }",0
62,<S2SV_ModStart> flags ) ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
63,<S2SV_ModStart> && flags & TH_SYN <S2SV_ModEnd> ) &&!,0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> ; int fd ; uid_t new_uid ; gid_t new_gid <S2SV_ModEnd> ; expected = <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) { ret = lxc_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket",0
65,<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 2 ) goto out_err ; <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ; <S2SV_ModStart> + 1 ; if ( strlen ( line ) < 2 ) goto out_err ; <S2SV_ModStart> += 2 ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ; <S2SV_ModStart> + 1 ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ; if ( strlen ( line ) < 2 ) goto out_err ;,0
66,<S2SV_ModStart> header -> biSize < 12U || header -> biSize < 52U || header -> biSize < 56U || header -> biSize < 108U || header -> biSize < 124U,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> - ENOBUFS ; } else { line. clock_type = get_status ( port ) -> clocking ; line. clock_rate = 0 ; line. loopback = 0 ;,0
71,<S2SV_ModStart> arg ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> ) { BYTE flags ; UINT16 length ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ; <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ; <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ;,0
74,<S2SV_ModStart> c ) { jas_matind_t <S2SV_ModEnd> m ; m,0
75,<S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> } } } if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
76,"<S2SV_ModStart> = NULL ; if (! mxf_tc ) { <S2SV_ModStart> ; } } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = mxf_tc ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = mxf_tc ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = mxf_tc ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> time",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock <S2SV_ModEnd> ( mntent,",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,<S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> tlv_len ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS (,0
80,<S2SV_ModStart> NF_STOLEN ; return NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,0
81,"<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_entry * entry ; <S2SV_ModStart> rta ) ; entry = kmemdup ( up, xfrm_replay_state_esn_len ( up ) <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> - ENOMEM ; if (! entry ) return - ENOMEM ; <S2SV_ModStart> = kmemdup ( entry <S2SV_ModEnd>, xfrm_replay_state_esn_len ( <S2SV_ModStart> ), GFP_KERNEL ) ; if (! pp ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
82,<S2SV_ModStart> - ENODEV ; if (! io -> io_size ) return - EINVAL ; <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> ( value + <S2SV_ModStart> value + 0.5 ) ) ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case LeftShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case LogEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( Mag,0
84,<S2SV_ModStart> ) ) ; if ( ret ) btif_config_free ( bdstr ) ;,0
85,"<S2SV_ModStart> ( buf = jas_calloc <S2SV_ModEnd> ( bufsize,",0
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if (! cfg ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) return VPX_CODEC_INCAPABLE ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> for ( map,0
87,"<S2SV_ModStart> size ) { netdev_dbg <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int show_object ( <S2SV_ModEnd> struct strbuf * <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, void * data <S2SV_ModEnd> ) { struct <S2SV_ModStart>. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { free ( name ) ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
89,<S2SV_ModStart> newparity ) ; newparity = baud_to_parity ( opts. parity ) ; newbits = baud_to_bits ( opts. bits ) ;,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,<S2SV_ModStart> type_flags ) { struct net * net = sock_net ( sk ) ; struct <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; if ( po -> fanout ) return - EALREADY ; if ( type == PACKET_FANOUT_LB ) return - EINVAL ; if ( type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM ) return - EINVAL ; if ( type == PACKET_FANOUT_LB ) return - EINVAL ; if ( type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT,0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp, <S2SV_ModStart> ( struct ipv6_pinfo ) )",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> ; if ( num_fields < 0 || num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_INTERNAL, ""number <S2SV_blank> of <S2SV_blank> fields <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", num_fields, imp_sth -> num_fields ) ; return Nullav ; }",0
96,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
98,"<S2SV_ModStart> ( page && ( access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && ( <S2SV_ModStart> ( page && ( access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && ( <S2SV_ModStart> ( page && ( access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && ( <S2SV_ModStart> ( page && ( access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && ( <S2SV_ModStart> ( page && ( access_ok <S2SV_ModEnd> ( page,",0
99,"<S2SV_ModStart>, path ) ; ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN <S2SV_ModEnd> ) ; goto <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( (",0
100,<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ;,0
101,"<S2SV_ModStart> { if ( <S2SV_ModEnd>! caller_is_in_ancestor ( <S2SV_ModStart>, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } <S2SV_ModEnd> if (!",0
102,"<S2SV_ModStart> low_var_thresh, int flag <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; ( void ) low_var_thresh ; ( void ) flag ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb",0
103,"<S2SV_ModStart> { ret = copy_to_user <S2SV_ModEnd> ( param,",0
104,"<S2SV_ModStart>!= old -> uid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { new -> euid = new -> uid ; } } new -> suid = new -> fsuid = new -> egid ; if (! capable ( CAP_FULL_SET ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! capable ( CAP_FULL_SET ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_",0
105,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct mb2_cache <S2SV_ModEnd> * ext4_xattr_cache_insert ( <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! ce ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> return ; } <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s,",0
107,<S2SV_ModStart> c == LUA_SIGNATURE [ 0 ] || <S2SV_ModEnd> c == LUA_SIGNATURE,0
108,<S2SV_ModStart> ; int err ; sock -> state = SS_UNCONNECTED ; if ( protocol < 0 || protocol > IPPROTO_MAX ) { err = - EINVAL ; goto out_rcu_unlock ; },0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( opt -> opt. opt_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
110,"<S2SV_ModStart> dl = kmalloc ( size <S2SV_ModEnd>, GFP_KERNEL )",0
111,<S2SV_ModStart> trunc : ND_PRINT (,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart>, u_int indent ) { const u_char * msg = ( const u_char * ) tptr ; <S2SV_ModStart> -> length ) ; ND_TCHECK2 ( * tptr, pdu_len ) ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type, pdu_len ) ) ; ND_TCHECK2 ( * tptr, pdu_len ) ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type, pdu",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> ; len = min_t <S2SV_ModEnd> ( unsigned int <S2SV_ModStart>, sizeof ( struct rose_facilities_struct ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>! rose_parse_facilities ( skb -> data <S2SV_ModEnd> + len + <S2SV_ModStart> + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = sk_acceptq_is_full (",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ;",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,<S2SV_ModStart> ) ; struct o2nm_cluster * cluster <S2SV_ModEnd> = to_o2nm_cluster_from_node ( <S2SV_ModStart> ) ; } if (! node -> nd_ipv4_address ) return - EINVAL ;,0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : ND_PRINT ( ( ndo, ""[|isoclns]"" ) ) ; break ; case BSD_AFNUM_APPLETALK : atalk_print ( ndo, p, length ) ; break ; case BSD_AFNUM_IPX : ipx_print ( ndo, p, length ) ; break ; default : ND_PRINT ( ( ndo, ""[|isoclns]"" ) ) ;",0
119,"<S2SV_ModStart> separator = * src ++ ; for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } }",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context, TPM_ALG_HASH hashAlg, TPM2B_DIGEST * resultKey, UINT16 bits, UINT8 * key, UINT8 * label, UINT8 * contextU, UINT16 bits, UINT8 * contextV <S2SV_ModEnd> ) { TPM2B_DIGEST <S2SV_ModStart> TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; TPM2B_DIGEST tpm2b_i_2 ; UINT32 bitsSwizzled, i_Swizzled ; TPM2B_DIGEST tpm2bLabel, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBits",0
121,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size )",0
122,<S2SV_ModStart> tsize_t s ) { assert ( s > 0 ) ;,0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! capable ( CAP_SYS_ADMIN ) ) ) { ret = - EPERM ; goto bail ; },0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) get_net ( net ),0
126,"<S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { <S2SV_ModStart> ; } } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc",0
127,<S2SV_ModStart> ; if (! POKE_UINT16 ( chassis -> e_type ) && POKE_UINT16 ( chassis -> e_vlan_id ) && POKE_UINT16 ( chassis -> e_ppvid ) && POKE_UINT16 ( chassis -> e_vlan_id ) && POKE_UINT16 ( chassis -> e_vlan_id ) && POKE_UINT16 ( chassis -> e_ppvid ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( chassis -> e_privtype ) && POKE_UINT16 ( ch,0
128,<S2SV_ModStart> || dp == 0 ||,0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> assocparams, 0, sizeof ( struct sctp_assocparams ) ) ;",0
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = get_bits ( gb, 4 ) ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; u16 wTmp ; <S2SV_ModStart> ( mpu -> input_lock <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( mpu -> input_lock <S2SV_ModEnd> ) ; while <S2SV_ModStart> + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) writew ( 0, <S2SV_ModEnd> mpu -> dev",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { result = - EINVAL ; goto out ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; out :",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { __be32 <S2SV_ModEnd> savep ; uint32_t <S2SV_ModStart> int status ; if ( <S2SV_ModEnd> decode_op_hdr ( xdr <S2SV_ModStart> OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep )!= 0 ) goto out ; if ( likely ( status == - EIO ) ) return - EIO ; if ( likely ( status == - EINVAL ) ) return - EINVAL ; <S2SV_ModEnd> xdr",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz || unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
138,<S2SV_ModStart> while ( ( tmpName [ i ]!= 0 ) && ( i < to_read ) ) { i ++ ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> AVPALETTE_SIZE ) ; if (! in -> data [ plane ] ) { av_frame_free ( & in ) ; return AVERROR ( ENOMEM ) ; } for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < width ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j",0
141,"<S2SV_ModStart> '/' ) { strncpy <S2SV_ModEnd> ( szFileName, <S2SV_ModStart> pszFileName ) ; } else if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX - 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } }",0
143,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""cannot <S2SV_blank> allocate <S2SV_blank> empty <S2SV_blank> property <S2SV_blank> info\\n"" ) ) ; return - 1 ; }",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,0
146,"<S2SV_ModStart> struct eigrp_tlv_at_cable_setup_t * eigrp_tlv_at_cable_setup ; } ND_TCHECK ( * eigrp_tlv_at_ext ) ; <S2SV_ModStart> eigrp_tlv_at_ext ) ; ND_TCHECK ( * eigrp_tlv_at_cable_setup ) ; if ( eigrp_tlv_at_int ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> at <S2SV_blank> cable <S2SV_blank> setup <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( eigrp_tlv_at_ext ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> at <S2SV_blank> ext <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } ND_TCHECK ( * eigrp_tlv_at_ext ) ; if ( eigrp_tlv_at_int ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> at <S2SV_blank> cable <S2SV_blank> setup <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( eigrp_tlv_at_",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # else number_aau = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; # endif <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] <S2SV_ModEnd> ; res = <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] <S2SV_ModEnd> ; res = <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_",0
149,<S2SV_ModStart> } ptr = kstrchr <S2SV_ModEnd> ( ptr +,0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
152,<S2SV_ModStart> & final ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;,0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0, planar = 0 <S2SV_ModStart> = 0 ; nstrips = 0 ; ntiles = 0 ; <S2SV_ModStart> = 0 ; ntiles = 0 ; <S2SV_ModStart> = 0 ; nstrips = TIFFGetField ( in, TIFFTAG_NSTRIPS, & nstrips ) ; ntiles = TIFFGetField ( in, TIFFTAG_NTILES, & ntiles ) ; if ( nstrips > TIFF_MAX_STRIPS ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; <S2SV_ModStart> = 0 ; if ( ntiles > TIFF_MAX_TILES ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> ntiles <S2SV_blank> tag"" ) ; <S2SV_ModStart> = 0 ; ntiles = TIFFGetField ( in, TIFFTAG_NTILES, & ntiles ) ; <S2SV_ModStart> = 0 ; if ( nstrips > TIFFMAX_STRIPS ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; <S2SV_ModStart> = 0 ; if ( ntiles > TIFFMAX_TILES ) TIFFError ( ""load",0
154,"<S2SV_ModStart> 0 ; # if CONFIG_VP10_ENCODER if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp13"" ) == 0 ) { ctrl_args = vp13_args ; ctrl_args_map = vp13_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp14"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } for ( argi = argj",0
155,"<S2SV_ModStart> ) ) { if ( resp == NULL ) fatal ( ""%s: <S2SV_blank> sshbuf_new"", __func__ ) ;",0
156,<S2SV_ModStart> = & l2tp_eth_netdev_ops ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,<S2SV_ModStart> } if ( <S2SV_ModEnd> gr -> gr_ctx <S2SV_ModStart> gss_union_ctx_id_desc ) ) { if ( gr -> gr_ctx. value == NULL ) { <S2SV_ModEnd> fprintf ( stderr,0
159,"<S2SV_ModStart> err = 0 ; unsigned long data_size = EXT4_I ( inode ) -> i_data ; <S2SV_ModStart> out ; } data_size = ext4_ext_get_actual_len ( inode ) ; if ( data_size > EXT4_I ( inode ) -> i_data ) data_size = EXT4_I ( inode ) -> i_data + ( data_size - EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> i_data ) ; neh = ext_block_hdr ( bh ) ; if (! ext_depth ( inode ) ) goto out ; neh = ext_block_hdr ( bh ) ; if (! ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh ) ; set_buffer_uptodate ( bh ) ;",0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 1 ;",0
161,<S2SV_ModStart> ; int ret ; if (! capable ( CAP_SYS_ADMIN ) ||! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
162,"<S2SV_ModStart> ; if (! memcmp <S2SV_ModEnd> ( cmac,",0
163,"<S2SV_ModStart> } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> 2 <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { avpriv_",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDopplerFactor = Cvar_Get ( ""s_alDopplerFactor"", ""1.0"", CVAR_ARCHIVE ) ; s_alRolloff = Cvar_Get ( ""s_alRolloff"", ""2"", CVAR_CHEAT ) ; s_alGraceDistance = Cvar_Get ( ""s_alGraceDistance"", ""512"", CVAR_LATCH ) ; s_alDriver = Cvar_Get ( ""s_alDriver"", ALDRIVER_DEFAULT, CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_",0
165,<S2SV_ModStart> ts_status ; bool is_drop_n_account <S2SV_ModEnd> ; if (,0
166,"<S2SV_ModStart> ) ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { list_add_tail ( & trans -> transports, & new -> peer. transport_addr_list ) ; sctp_assoc_rm_peer ( asoc, trans ) ; }",0
167,<S2SV_ModStart> ; return false <S2SV_ModEnd> ; } <S2SV_null>,0
168,"<S2SV_ModStart> int on_exec, int lsm_label_size <S2SV_ModEnd> ) { int <S2SV_ModStart> = - 1 ; int labelfd = - 1 ; int ret = 0 ; const char * lsm_name = lsm_name ( ) ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( lsm_label_size < 0 ) { SYSERROR ( ""Invalid <S2SV_blank> LSM <S2SV_blank> label <S2SV_blank> size"" ) ; goto out ; } if ( lsm_label_size < 0 ) { SYSERROR ( ""Invalid <S2SV_blank> LSM <S2SV_blank> label <S2SV_blank> size"" ) ; ret = - 1 ; goto out ; } if ( lsm_label_size > lsm_label_size ) { SYSERROR ( ""Invalid <S2SV_blank> LSM <S2SV_blank> label <S2SV_blank> size"" ) ; ret = - 1 ; goto out ; } if ( lsm_label_size < 0 ) { SYSERROR ( ""Invalid <S2SV_blank> LSM <S2SV_blank> label <S2SV_blank> size"" ) ; ret = - 1 ; goto out ; } if ( lsm_label_size > lsm_label_size ) { SYSERROR ( ""Invalid <S2SV_blank> LSM <S2SV_blank> label <S2SV_blank> size"" ) ; ret = -",0
169,<S2SV_ModStart> ) ) { if ( comp -> dx < 0 || comp -> dy < 0 ) { return OPJ_FALSE ; },0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. bits_left -= bits_used ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
172,"<S2SV_ModStart> charlen ; } if ( num > totallen ) { num = totallen ; numOR = 0 ; } <S2SV_ModStart> num ++ ; if ( numOR > totallen ) { curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * numOR ) ; curqlevel -> flag |= LQL_NOT ; hasnot = true ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; curqlevel -> flag |= LQL_NOT ; hasnot = true ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; else UNCHAR ; } else if ( charlen == 1 && t_iseq ( ptr, '*' ) ) { GETVAR ( curqlevel ) = l",0
173,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ) hash ) ; struct mb2_cache_entry * ce ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode -> i_sb ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB2_CACHE ( inode -> i_sb ) ; if (! mb2_cache_entry_exists ( mb2_cache, hash ) ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", (",0
174,"<S2SV_ModStart> data_offset ) { int pkt_len ; char line [ COSINE_LINE_LENGTH ] ; <S2SV_ModStart> offset ; pkt_len = parse_cosine_rec_hdr ( wth, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; * data_offset = offset ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer <S2SV_ModEnd>, err,",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,<S2SV_ModStart> left > 0 && n < left && SSL_IS_DTLS ( s ),0
177,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
178,"<S2SV_ModStart> if ( copy_from_user ( & hdr, ( void * ) arg, sizeof ( hdr ) ) ) { ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; }",0
179,<S2SV_ModStart> int hstartcol ; jpc_fix_t * buf2 ; jpc_fix_t * srcptr ; jpc_fix_t * dstptr ; register jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; register jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; register jpc_fix_t m ; hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; srcptr = & a [ ( 2 - parity ) * stride ] ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dst,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x07 char * buf <S2SV_ModEnd> ; int opcode <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mount_state & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; },0
183,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> more <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> usbinterface\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } <S2SV_ModStart> desc ) ; if (! usb_endpoint_dir_in ( endpoint -> desc. bEndpointAddress ) ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> more <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> usbinterface\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } <S2SV_ModStart> desc ) ; if (! usb_endpoint_dir_in ( endpoint -> desc. bEndpointAddress ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> more <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> usbinterface\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } <S2SV_ModStart> desc ) ; if (! usb_endpoint_dir_in ( endpoint -> desc. bEndpointAddress ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> more <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> usbinterface\\n"" )",0
184,"<S2SV_ModStart> ( buf, sizeof ( buf ) <S2SV_ModEnd> ) ; free",0
185,"<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { struct o2nm_cluster * o2nm_cluster = container_of ( node -> nd_item. ci_parent, struct o2nm_cluster, node ) ; if (! o2nm_cluster ) return NULL ; return o2nm_cluster ; } <S2SV_ModEnd> return to_o2nm_cluster ( <S2SV_ModStart> -> ci_parent ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> seqlock ) ; if ( fmode & FMODE_WRITE ) nfs_set_open_stateid_locked ( state, stateid, fmode <S2SV_ModEnd> ) ; else",0
187,"<S2SV_ModStart> ; if ( avio_read_bit ( pb, 1 )!= 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> %d\\n"", ast -> codecpar -> bit_depth ) ; return AVERROR ( EINVAL ) ; }",0
188,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""cannot <S2SV_blank> allocate <S2SV_blank> empty <S2SV_blank> property <S2SV_blank> info\\n"" ) ) ; return - 1 ; }",0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, ""loopstats"", & loopstats ) ; filegen_register ( statsdir, ""rawstats"", & rawstats ) ; filegen_register ( statsdir, ""sysstats"", & sysstats ) ; <S2SV_ModEnd> # ifdef AUTOKEY <S2SV_ModStart> ( statsdir, ""cryptostats"", & cryptostats ) ; filegen_register ( statsdir, ""timingstats"", & timingstats ) ; # endif <S2SV_ModEnd> # ifdef DEBUG",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd =",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & n -> mnt_mounts ) ) attach_shadowed ( mnt, parent <S2SV_ModEnd>, shadows )",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { load_fs_index ( next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { load_gs_index ( next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> es ) wrmsrl ( MSR_ES_BASE, next -> es ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { load_fs_index ( next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( next -> ds ) wrmsrl ( MSR_DS_BASE, next -> ds ) ; if ( gsindex ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev ->",0
193,"<S2SV_ModStart> dd ) ; if ( g_cd ) problem_data_set_content_or_null ( g_cd, name, new_value ) ;",0
194,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; <S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ;,0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << DB_VECTOR ) | ( 1u << BP_VECTOR,0
196,"<S2SV_ModStart> sfsname ) { char * temp = malloc ( <S2SV_ModEnd> NFSX_V3FHMAX + 1 <S2SV_ModStart> NFSX_V3FHMAX + 1 ) ; if ( temp == NULL ) { ND_PRINT ( ( ndo, ""NFSX_V3FHMAX <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } <S2SV_ModStart> NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; }",0
197,"<S2SV_ModStart> transhdrlen, int <S2SV_ModEnd> mtu, unsigned <S2SV_ModStart> skb_gso_udp ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) ->",0
198,<S2SV_ModStart> return res ; if ( protocol_version == HSR_PROT_NONE ) { netif_carrier_on ( hsr_dev ) ; <S2SV_ModStart> return res ; } if ( protocol_version == HSR_PROT_NONE ) { netif_carrier_on ( hsr_dev ) ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; },0
199,"<S2SV_ModStart> ) ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const yv12_src <S2SV_ModEnd>, int mi_row <S2SV_ModStart> const YV12_BUFFER_CONFIG * const yv12_src <S2SV_ModEnd>, int mi_col <S2SV_ModStart> const int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride, src -> v_stride, src -> alpha_stride } ; const int i = 0 ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & yv12_src -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } } <S2SV_null> <S2SV_null>",0
201,"<S2SV_ModStart> ; len = xdr_decode_hyper ( p, & args -> count ) ; if ( len!= args -> count ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( args -> count ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( args -> count ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) { switch ( ctxt -> op_bytes ) { case 1 : ctxt -> _eip = ( u16 ) dst ; break ; case 2 : ctxt -> _eip = ( u32 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; case 8 : ctxt -> _eip = ( u16 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = tvb_captured_length_remaining <S2SV_ModEnd> ( tvb,",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) { ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host <S2SV_ModEnd>, iter,",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
208,"<S2SV_ModStart> val < 0 ) { write_mmcr0 ( cpuhw, <S2SV_ModEnd> cpuhw -> mmcr",0
209,<S2SV_ModStart> = len ; if ( len >= 0 ) len += tested ;,0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> ; int all_whitespace <S2SV_ModEnd> ; int kind <S2SV_ModStart> ; PyObject * o, * fstring_name <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ':' ) ; all_whitespace = 1 ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; memcpy ( str + 2, expr_start, len ) ; str [ 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; <S2SV_ModEnd> while ( c",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> * len ) ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; }",0
215,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
216,"<S2SV_ModStart> - EINVAL ; if ( vlen < sizeof ( struct mmsghdr ) ) return - EINVAL ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ; <S2SV_ModEnd> return datagrams ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; int ret ; skb -> protocol = eth_type_trans ( skb ) <S2SV_ModEnd> ; ret = <S2SV_ModStart> hns_nic_net_xmit_hw ( ndev, skb <S2SV_ModEnd>, & tx_ring_data <S2SV_ModStart> tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } else { netif_trans_update ( ndev ) ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX <S2SV_ModStart>, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX <S2SV_ModStart>, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX <S2SV_ModEnd>, NO_INLINE_ASCII_RESP, <S2SV_ModStart> NO_INLINE_ASCII_RESP, NO_MODERN, NO_MODERN, NO_MODERN_MIN, NO_MODERN_MAX <S2SV_ModEnd>, NO_MODERN_MIN, <S2SV_ModStart> NO_MODERN_MIN, NO_MODERN_MAX <S2SV_ModEnd>, NO_MODERN_MAX <S2SV_ModEnd>, NO_MODERN_MAX <S2SV_ModEnd>, NO_MODERN_MAX, <S2SV_ModStart> NO_MODERN_MAX, NO_MODERN_MAX <S2SV_ModEnd>, NO_MODERN_MAX,",0
221,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ; } repo_config = perf_pathdup ( <S2SV_ModEnd> ""config"" ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx <S2SV_ModStart> event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> ( event -> pmu <S2SV_ModEnd>!= leader_pmu || <S2SV_ModStart> state < PERF_EVENT_STATE_OFF <S2SV_ModEnd> ) return 1 <S2SV_ModStart> return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event, & ctx -> event ) >= 0 ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace * user_ns <S2SV_ModEnd>, int cap_setid <S2SV_ModStart> return true ; if (! ns_capable ( user_ns <S2SV_ModEnd>, cap_setid )",0
226,"<S2SV_ModStart> ++ ) { if ( j == a -> num_values - 1 ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; } else { body [ j ] = XMALLOC ( VarLenData, 1 ) ; } <S2SV_ModStart> } return body <S2SV_ModEnd> ; } <S2SV_null>",0
227,"<S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; hx = kcalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart>, GFP_KERNEL ), sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> 0 ) { ret = <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart>. cpu_cs_register, & <S2SV_ModEnd> reset, 1 <S2SV_ModStart> 1 ) )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; kfree ( hx ) ; return ret <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ;",0
229,"<S2SV_ModStart> ; if ( handle -> params. realm && strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp",0
230,"<S2SV_ModStart> * bo ; uint32_t uniforms_size = 0 ; uint32_t temp_size = 0 ; if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } exec -> bin_cl_u = temp + bin_offset ; exec -> shader_rec_u = temp + shader_rec_offset ; exec -> uniforms_u = temp + exec_size ; exec -> shader_state = temp + exec_size ; exec -> shader_state_size = temp_size ; if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } bin = temp + bin_offset ; exec -> shader_rec_u = temp + shader_rec_offset ; exec -> uniforms_u = temp + shader_rec_offset ; exec -> shader_state = temp + exec_size ; exec -> shader_state_size =",0
231,<S2SV_ModStart> endif # if HAVE_LIBLZMA_H <S2SV_ModEnd> if ( zip,0
232,<S2SV_ModStart> -> vm_file ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write_nolock ; else get_block = ext4_get_block_write_nolock,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> arg ) { case '\\t' : case '\\r' : break ; default : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> case '\\n' : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> break ; default : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> break ; default : * b ++ <S2SV_ModEnd> = * arg,0
235,"<S2SV_ModStart> ep2 ) ; if ( ep2 ) ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ep2 ) ) ) ;",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client",0
237,<S2SV_ModStart> ; if ( unlikely (,0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_LINGER : v. ling. l_onoff =!! sock_flag ( sk, SOCK_LINGER ) ; v. ling. l_linger =!! sock_flag ( sk, SOCK_LINGER ) ;",0
240,<S2SV_ModStart> sk_shutdown & RCV_SHUTDOWN ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> msg_namelen ) ; } <S2SV_ModEnd> return err ;,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL )",0
244,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, & new ) ;",0
245,"<S2SV_ModStart> err = 0 ; } if (! err ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ;",0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0,0
247,"<S2SV_ModStart> * ni ; register u_int i ; int j ; int trunc ; <S2SV_ModStart> case RIP6_REQUEST : ni = kmalloc ( <S2SV_ModEnd> length, GFP_KERNEL <S2SV_ModStart>, GFP_KERNEL ) ; if (! ni ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> dump"" ) ) ; break ; } if (! ni ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; return ; } <S2SV_ModStart> case RIP6_RESPONSE : ni = kmalloc ( <S2SV_ModEnd> length, GFP_KERNEL <S2SV_ModStart>, GFP_KERNEL ) ; if (! ni ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; break ; } if (! ni ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; return ; } <S2SV_ModEnd> j = length <S2SV_ModStart> * ni ) ; if (! ni ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ;",0
248,<S2SV_ModStart> < 0 ) { if ( ret!= - EEXIST ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_DEFAULT_KEYRING : case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = install_default_keyring_to_cred ( new ) ; if ( ret!= - EEXIST ) goto error ; ret = - EINVAL ; goto error ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) goto error ; ret = 0 ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,<S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ;,0
251,<S2SV_ModStart> = 0.0 ; register int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iRight - iLeft + 1 > windows_size ) { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } <S2SV_ModEnd> if ( dTotalWeight,0
252,<S2SV_ModStart> user ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; <S2SV_ModStart> user ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" <S2SV_ModEnd> ) ; return",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; <S2SV_ModStart> mobj ) { memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart>, 0 ), 0, size ) ; return mobj ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
256,<S2SV_ModStart> += incr ; if (! timer -> it_overrun ) { timer -> it_overrun = 0 ; delta -= incr ; },0
257,"<S2SV_ModStart> * for_ch ; asdl_seq * ifs ; int is_async ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c ->",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride <S2SV_ModEnd> ] ; const <S2SV_ModStart> -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ]",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> scsi_req_data ( &",0
262,<S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT || <S2SV_ModEnd> cs < 0,0
263,"<S2SV_ModStart> maxn ) { SWF_RETURN_ERROR ( ""Action <S2SV_blank> overflow!!"" ) ; if ( n < 0 ) { SWF_RETURN_ERROR ( ""Action <S2SV_blank> overflow!!"" ) ; return SWF_RETURN_ERROR ( ""Action <S2SV_blank> overflow!!"" ) ; } <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : return decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : return decompileTRACE ( n",0
264,<S2SV_ModStart> ) ) ; AZ ( VSB_free ( synth_body ) ) ;,0
265,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
266,"<S2SV_ModStart> ; if ( len > PAGE_SIZE - 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> big"" ) ) ; <S2SV_ModStart> - 1 ) ; } if ( len < sizeof ( * prep ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> big"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> - 1 ) ;",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart>, ATUSB_REQ_FROM_DEV, ( void * ) <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, ( void * ) <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> ( 2 + <S2SV_ModStart> -> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * azModuleArg ; <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, <S2SV_ModEnd> pTable -> azModuleArg",0
270,<S2SV_ModStart> } } } outbuffer [ XMLRPC_BUFSIZE - 1 ] = '\\0' ;,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> array <S2SV_blank> is <S2SV_blank> empty"" ) ; goto Error ; } <S2SV_ModStart> } } } if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> array <S2SV_blank> is <S2SV_blank> empty"" ) ; goto Error ; }",0
272,<S2SV_ModStart> 32 ) { ut32 addr32 ; <S2SV_ModStart> } else { ut64 addr64 ; <S2SV_ModStart> 8 ) { ut64 <S2SV_ModEnd> addr64 = r_read_le64,0
273,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( tptr + 4 ) ;,0
274,<S2SV_ModStart> ) ) { if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i - anal_size ] ; } else if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i - anal_size ] ; } else if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i - anal_size ] ; } else if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start,0
275,"<S2SV_ModStart> -> enc, p, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, p, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin ) ;",0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else goto schedule_dispatch ;,0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; } if ( unlikely ( <S2SV_ModStart> work_to_do < 0 ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModStart>. req_cons ; if ( unlikely ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, & txfrags [ idx ] ) ; continue ; } <S2SV_ModStart>. size ; if ( unlikely ( txreq. flags & XEN_NETTXF_extra_info ) ) { netbk_tx_err ( vif, & txfrags [ idx ] ) ; continue ; } <S2SV_ModStart>. size ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx. req_cons ; if ( unlikely ( txreq. flags & XEN_NETTXF_extra_info ) { netbk_tx_err ( vif, & txfrags [ idx ] ) ; continue ; } <S2SV_ModStart>. size ;",0
279,<S2SV_ModStart> cb -> args [ 0 <S2SV_ModEnd> ] ; struct <S2SV_ModStart> walk = ( struct xfrm_policy_walk <S2SV_ModEnd> * ) &,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_vif * vif = netbk -> vif ; int nr_frags = netbk -> shinfo -> nr_frags ; <S2SV_ModStart> -> status ; if ( unlikely ( nr_frags < 0 ) ) return - EINVAL ; <S2SV_ModStart> ( unlikely ( nr_frags < 0 ) ) return - EINVAL <S2SV_ModEnd> ; index = <S2SV_ModStart> ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & netbk -> pending_tx_info [ index ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; for ( i = 0 ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ]",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, resize_image, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, resize_image, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ;",0
284,"<S2SV_ModStart> ; incoming_cn_msg -> data = kmalloc ( len, GFP_KERNEL ) ; if (! incoming_cn_msg -> data ) { free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; incoming_cn_msg -> data = kmalloc ( len, GFP_KERNEL ) ; if (! incoming_cn_msg -> data ) { free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if (! incoming_cn_msg -> data ) { free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; }",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; <S2SV_ModEnd> type = crm_element_value <S2SV_ModStart> F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if (",0
287,"<S2SV_ModStart> + x > <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,"<S2SV_ModStart> ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> ebh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; goto out_err ; } } else { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; goto out_err ; } } } else { if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh",0
289,"<S2SV_ModStart> ) ) ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ;",0
290,<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ;,0
291,<S2SV_ModStart> struct ib_ucm_cmd_hdr hdr ; size_t result ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
292,"<S2SV_ModStart>, * controller <S2SV_ModEnd> = NULL, <S2SV_ModStart>, * cgdir <S2SV_ModEnd> = NULL ; <S2SV_ModStart> O_RDWR ) ) { if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_may_access ( fc -> pid, controller, path1, NULL, O_RDONLY ) ) { ret = <S2SV_ModEnd> - EACCES ; <S2SV_ModStart> goto out ; } <S2SV_ModEnd> ret = cgfs_create <S2SV_ModStart> cgroup ) ; <S2SV_ModEnd> printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n""",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; <S2SV_ModStart> continue ; } if (! capable ( CAP_SYS_RAWIO ) ) { kfree ( cd -> name ) ; cd -> name = NULL ; continue ; },0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> = MagickFalseType ; if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( number_data_bands < 2 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( number_data_bands < 3 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; }",0
296,<S2SV_ModStart> pktnum ; int64_t <S2SV_ModEnd> index_pts = FFMAX,0
297,<S2SV_ModStart> srp ) ; if ( unlikely ( srp -> timeout > SG_MAX_RETRY ) ) return - EBUSY,0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""smtp_alert_vrrp"", & smtp_alert_vrrp_handler ) ; # endif # ifdef _WITH_LVS",0
299,"<S2SV_ModStart> ) { return encoder_common_init <S2SV_ModEnd> ( ctx, <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>",0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; tmpptr = key + 1 ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart>, USEC_INFINITY, 0 <S2SV_ModEnd> ) ; }",0
302,"<S2SV_ModStart> 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"", boxinfo -> name, \'""\', box -> type, box -> len ) ) ; <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""pre",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr. hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( vnet_hdr. hdr_len > len ) goto err ; copylen = len - vnet_hdr. hdr_len ; if (! copylen ) copylen = GOODCOPY_LEN ; } else copylen = vnet_hdr. hdr_len ; if (! copylen ) copylen = GOODCOPY_LEN ;,0
305,<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) <S2SV_ModEnd> ; struct ipv6_opt_hdr <S2SV_ModStart> ( offset + ipv6_optlen ( exthdr ) <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> ; offset += ipv6_optlen <S2SV_ModEnd> ( exthdr ) <S2SV_ModStart> ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> delta_q ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = 0 ; mvy [ vcnt ] = 0 ; if ( left -> mbmi. mv. as_int ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = left -> mbmi. mv. as_int ; mvy [ vcnt ] = left -> mbmi. mv. as_int ; mvy [ vcnt ] = left -> mbmi. mv. as_int ; if ( mv. as_int ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvy [ vcnt ] = left -> mbmi. ref_frame ; }",0
308,<S2SV_ModStart> sll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( * vnet_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( * vnet_hdr ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; <S2SV_ModEnd> msg -> msg_name <S2SV_ModStart> msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( * vnet_hdr ) ; msg -> msg_namelen = sizeof ( *,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; }",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { struct sctp_addip_chunk * addip = & asoc -> addip_chunk ; sctp_addip_chunk_t * addip = & asoc -> addip_chunk ; sctp_addip_chunk_t * addip = & asoc -> addip_chunk ; sctp_addip_chunk_t * addip = & asoc -> addip_chunk ; sctp_addip_chunk_t * chunk_hdr = & asconf -> chunk_hdr ; union sctp_addr_param * addr_param = ( union sctp_addr_param * ) ( asconf -> skb -> data + length ) ; <S2SV_ModStart> asconf, asconf_param, & addip <S2SV_ModEnd> ) ; if <S2SV_ModStart> SCTP_ERROR_NO_ERROR!= err_code ) { all_param_pass = 1 ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu) <S2SV_blank> -> <S2SV_blank> %p\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> ; # ifdef CONFIG_PPC_BOOKE_SREGS case KVM_CAP_PPC_BOOKE_WATCHDOG : case KVM_CAP_PPC_HIOR_32 : case KVM_CAP_PPC_HIOR_64 : case KVM_CAP_PPC_HIOR_32 : case KVM_CAP_PPC_HIOR_64 : r =! hv_enabled ; break ; # ifdef CONFIG_KVM_E500V2 case CONFIG_KVM_E500MC : case CONFIG_KVM_E500MC : case CONFIG_KVM_E500V2 : case CONFIG_KVM_E500MC : r =! hv_enabled ; break ; # endif,0
316,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> } keylen = utf8s_to_utf16s <S2SV_ModEnd> ( key_name, <S2SV_ModStart> ( key_name ), & kvp_data -> data. key ) ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; valuelen = utf8s_to_utf16s <S2SV_ModEnd> ( value, <S2SV_ModStart> ( value, & valuelen, & kvp_data -> data. value ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; kvp_data -> data. value_type = REG_SZ ; kvp_data -> data. value_type = REG_SZ ; icmsghdrp -> status = HV_S_OK ; response_done : icmsghdrp -> icflags = ICMSGHDRFLAG_TRANSACTION | ICMSGHDRFLAG_RESPONSE ; vmbus_sendpacket ( channel, recv_buffer, buf_len, req_id, sizeof ( struct vmbuspipe_hdr ) ) ; if (! ( icmsghdrp -> status & HV_E_FAIL ) ) { pr_warn ( ""KVP: <S2SV_blank> Transaction <S2SV_blank> not <S2SV_blank>",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; } <S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; },0
319,"<S2SV_ModStart> ; } } else { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
320,"<S2SV_ModStart> ; int is_ext_ctrl <S2SV_ModEnd> ; long err <S2SV_ModStart> - EINVAL ; size_t ctrls_size <S2SV_ModEnd> = 0 ; <S2SV_ModStart> case _IOC_NONE : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; <S2SV_ModStart> case _IOC_READ : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; if ( is_ext_ctrl ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; mbuf = kmalloc ( ctrls_size, GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; if ( _IOC_DIR ( cmd ) & _IO",0
321,"<S2SV_ModStart> ) ) ; addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if (",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data, size, long timeout ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0 ), RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, 0 <S2SV_ModEnd>, data, <S2SV_ModStart> 500 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0 ), ret <S2SV_ModEnd>, indx, <S2SV_ModStart>, 0, ret <S2SV_ModEnd>, 500 ) <S2SV_ModStart> 500 ) ; if ( ret < size ) return ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { <S2SV_ModStart> uri ) ; g_free ( uri ) ; <S2SV_ModStart> uri ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { struct usb_serial_state * state = urb -> context ; <S2SV_ModStart> -> lsr_event ) { state = LOAD_LSR_EVENT ( edge_port, * data ) ; if ( state == LOAD_LSR_RECEIVED ) { handle_new_lsr ( edge_port, state <S2SV_ModEnd>, * data",0
325,"<S2SV_ModStart> * server, const <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! strncmp <S2SV_ModEnd> ( ses -> <S2SV_ModStart>, username, MAX_USERNAME_SIZE ) ) break ; ++ ses -> ses_count <S2SV_ModEnd> ; write_unlock (",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) <S2SV_ModEnd> ) ) ERROR <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # else ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> height",0
327,"<S2SV_ModStart>'<S2SV_blank>') input ++ ; if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if ( <S2SV_ModStart>'<S2SV_blank>') input ++ ; if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf",0
328,"<S2SV_ModStart> ) ; if ( vm_flags & VM_NORESERVE ) return 0 ; if ( <S2SV_ModStart> return chg ; ret = hugetlb_get_quota ( inode <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; <S2SV_ModEnd> return ret ;",0
329,<S2SV_ModStart> new ) { <S2SV_ModEnd> keyring = keyring_alloc,0
330,<S2SV_ModStart> = 0 ; size_t scanned = 0 ; size_t readnbd = 0 ; if ( readnbd > cmdsize ) { readnbd = cmdsize ; },0
331,"<S2SV_ModStart> & orig ) ; mrb_value fptr_copy ; mrb_value fptr_orig ; fptr_copy = NULL ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; if ( fptr_copy!= NULL ) { mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@fptr"" ), fptr_copy ) ; mrb_free ( mrb, fptr_copy ) ; } fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; if ( fptr_copy == NULL ) { mrb_free ( mrb, fptr_copy ) ; } fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; mrb_free ( mrb, fptr_copy ) ; } fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; if ( fptr_copy == NULL ) { mrb_free ( m",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( * param ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; u32 eip ; <S2SV_ModStart> 2 ) ; eip = get_segment_selector ( ctxt, VCPU_SREG_EIP <S2SV_ModEnd> ) ; old_eip <S2SV_ModStart> VCPU_SREG_EIP ) ) { if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> return X86EMUL_CONTINUE ; } <S2SV_ModStart>, VCPU_SREG_EIP ) ) { if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart>, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> VCPU_SREG_EIP ) ) { if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> return X86EMUL_CONTINUE ; }",0
336,"<S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" <S2SV_ModEnd>, codsty -> <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" <S2SV_ModEnd>, codsty -> <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" <S2SV_ModEnd>, codsty -> <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" <S2SV_ModEnd>, codsty -> <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" <S2SV_ModEnd>, codsty -> <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" <S2SV_ModEnd>, codsty ->",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; }",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> ( ut32 ) ) ; if (! got_table ) { <S2SV_ModStart> ; } } if ( got_table ) { ut32 offset = 0 ; for ( i = 0 ; i < n_got ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } got_table [ i ]. addr_to_patch = got_entry ; got_table [ i ]. data_offset = got_entry + BFLT_HDR_SIZE ; } got_table [ i ]. addr_to_patch = got_entry ; got_table [ i ]. data_offset = got_entry + BFLT_",0
339,<S2SV_ModStart> -> si_code >= 0 && info -> si_signo >= 0 ) return - EPERM ; <S2SV_ModEnd> info -> si_signo <S2SV_ModStart> - EPERM ; <S2SV_ModEnd> return do_send_specific (,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ),",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> ( utf8 ) x *= 3 ; if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModEnd> x = strlen <S2SV_ModStart> sep ) fname ++ ; p = & name [ <S2SV_ModEnd> strlen ( ( <S2SV_ModStart> fname ++ ; if ( fname >= fe ) { free ( name ) ; return NULL ; } <S2SV_ModEnd> p = & <S2SV_ModStart> fname ++ ; if ( fname >= name ) { free ( name ) ; return NULL ; } if ( fname >= p ) { free ( name ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( fname >= p ) { free ( name ) ; return NULL ; } if ( fname >= p ) { free ( name ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xF0 ) << 12 ; x",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; }",0
343,"<S2SV_ModStart> __err ; kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; } }",0
344,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! <S2SV_ModStart> ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ptr -> size ) return GF_ISOM_INVALID_FILE ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ptr -> size ) return GF_ISOM_INVALID_FILE ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> tmp_strsize ) return GF_ISOM_INVALID_FILE ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ptr -> size ) return GF_ISOM_INVALID_FILE ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> tmp_strsize ) return GF_ISOM_INVALID_FILE,0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> = US ; uschar * cmd_line = NULL ; uschar * cmd_line_buf = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_start = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_start = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_start = NULL ; uschar * cmd_line_start_line = NULL ; uschar * cmd_line_buf = NULL ; uschar * cmd_line_buf = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_start = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_start = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line_start_line = NULL ; uschar * cmd_line_buf = NULL ; uschar * cmd_line_buf = NULL ; uschar * cmd_line_end = NULL ; uschar * cmd_line,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) { <S2SV_ModStart> 10 ) ; if ( strlen ( p ) > 1 ) { s -> filesize = simple_strtol ( p + 1, NULL, 10 ) ; } else { s -> filesize = simple_strtol ( p + 1, NULL, 10 ) ; } <S2SV_ModEnd> } if (",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> maxw = ( <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) * <S2SV_ModEnd> max ) ; <S2SV_ModStart> int ) *",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> state == mode || fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModStart> return ; if ( fmode & ( FMODE_READ | FMODE_EXEC )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } state -> state = mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 || ( r = sshpkt_get_end ( ssh )",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, p -> columns, p -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> 0 ; char * lbase = NULL, * ltest = NULL, * strbase = NULL, * strtest = NULL ; char * ltest = NULL ; char * strbase = NULL ; char * strtest = NULL ; char * ltest = NULL ; char * strbase = NULL ; char * strtest = NULL ; int same = 0 ; int nbase = 0 ; int ntest = 0 ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( lbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ;",0
354,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> ret = cdc_ncm_bind_common <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM <S2SV_ModEnd>, 0 ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;",0
355,"<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem. <S2SV_ModStart> len ) ; if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModEnd> return len ;",0
356,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->",0
357,"<S2SV_ModStart> ; err = check_entry_offsets_ext <S2SV_ModEnd> ( e,",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Chunk <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( caplen < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( caplen < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) { <S2SV_ModStart> timer ) ; } <S2SV_ModStart> q ) ; <S2SV_ModEnd> snd_use_lock_sync ( &,0
361,"<S2SV_ModStart> int error ; pgoff_t curr ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) <S2SV_ModEnd> >> PAGE_CACHE_SHIFT ; <S2SV_ModStart> ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; <S2SV_ModStart> FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } mark_inode_dirty ( inode ) ; out : brelse ( dibh ) ; return <S2SV_ModEnd> error ; }",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; }",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit <S2SV_ModEnd>, noffset,",0
364,<S2SV_ModStart> xfs_attr_leaf_name_local_t * name_loc ; if (! cursor -> offset ) { cursor -> offset = 0 ; cursor -> hashval = 0 ; } else { cursor -> hashval = cpu_to_be32 ( XFS_ATTR_HASHVAL ( be16_to_cpu ( entry -> hashval ) ) ) ; },0
365,<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo. size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo. size = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> -> sd ; <S2SV_ModEnd> mutex_init ( &,0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv ) { <S2SV_ModStart> service_name_tlv_length ) ; if ( miux_tlv ) { <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv ) { <S2SV_ModStart> rw_tlv_length ) ; },0
367,"<S2SV_ModStart> ssh * ssh <S2SV_ModEnd> = active_state ; <S2SV_ModStart>. compression ) { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) && iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC",0
369,"<S2SV_ModStart> unsigned int channo ; if (! jas_stream_check ( in, sizeof ( jp2_cdefent_t ) ) ) { return - 1 ; }",0
370,"<S2SV_ModStart> TJA1100_CONFIG1_MII_MODE ; value &= ~ TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; value |= TJA1100_CONFIG1_MII_MODE_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_",0
371,<S2SV_ModStart> ; icmp_param. icmp_type = type ; icmp_param. icmp_code = code ; icmp_param. tos = tos ; icmp_param.,0
372,<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ;,0
373,<S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { crypto_free_skcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> bprm ) { umode_t mode = bprm -> file -> f_path. dentry -> d_inode -> i_mode ; umode_t euid = current_euid ( ) ; umode_t egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && euid_has_mapping ( bprm -> cred -> user_ns, euid ) && kuid_has_mapping ( bprm -> cred -> user_ns, euid ) && kgid_has_mapping ( bprm -> cred -> user_ns, egid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = euid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModEnd> * pt ++,0
378,"<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( tags,",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if (! skb_is_nonlinear ( skb ) ) return 0 ; if (,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ; bp += 2 ; len -= 2 ; if ( ( flags & GRE_CP ) | ( len & GRE_RP ) ) { if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ( flags & GRE_KP ) ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> %lu <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"" <S2SV_ModEnd>, tile_buffsize ) <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%u)"", tile_buffsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%u)"", tile_buffsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%u)"", tile_buffsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%u)"", tile_buffsize ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> }, # if defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__ ) &&! defined ( __GNUC__",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; error = <S2SV_ModEnd> register_inout ( dev <S2SV_ModStart> break ; } <S2SV_ModEnd> printf ( ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" <S2SV_ModStart> ; return error <S2SV_ModEnd> ; } <S2SV_null>",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> cluster -> cl_has_local && node -> nd_num!= O2NM_INVALID_NODE_NUM && cluster -> cl_local_node!= O2NM_INVALID_NODE_NUM <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> cluster -> cl_has_local && node -> nd_num!= O2NM_INVALID_NODE_NUM && cluster -> cl_local_node!= O2NM_INVALID_NODE_NUM ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; } if (! tmp && cluster -> cl_has_local && cluster -> cl_local_node == O2NM_INVALID_NODE_NUM ) { o2net_stop_listening ( node ) ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; },0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""int"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA *",0
389,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x20 : case 0x21 : case 0x22 : case 0x23 : case 0x2a : case 0x2b : case 0x2c : case 0x2f : case 0x3a : case 0x3b : case 0x3e : case 0x4b : case 0x4f : case 0x50 : case 0x51 : case 0x52 : case 0x53 : case 0x54 : case 0x57 : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6e : case 0x7a : case 0x7b : case 0x7c : case 0x7f :,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> sctp_transport_put ( transport",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; if ( ninst == 0 ) { fprintf ( stderr, ""No <S2SV_blank> files <S2SV_blank> were <S2SV_blank> compiled"" ) ; ON_ERROR ( - 1, ""Can\'t <S2SV_blank> create <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fflush ( stdout ) ; return - E_NOTHANDLED ; }",0
393,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) goto trunc ;,0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset + 1 ), elementlen ) ) return 0 ; if ( length < elementlen + 3 ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 3 ) ) return 0 ; if ( length < elementlen + 4 ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen + 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 4 ) ) return 0 ; if ( length < elementlen + 3 ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 3 ) ) return 0 ; if ( length < elementlen + 4 ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen + 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen + 4 ) ) return 0 ; if ( length < elementlen",0
396,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; <S2SV_ModStart> } else { * obuf = * obuf ; obuf -> flags |= PIPE_BUF_FLAG_NONINTERRUPT ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; obuf -> len = len ; ret += obuf -> len ;,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long err ; mm_segment_t old_fs = get_fs ( ) ; <S2SV_ModStart> KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime, & ur -> ru_utime ) ; err |= __put_user ( r. ru_stime, & ur -> ru_stime ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS",0
400,"<S2SV_ModStart> v2N_NO_PROPOSAL_CHOSES ) ; if ( md -> iface -> ip_addr. s_addr!= & md -> iface -> ip_addr ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( ntohs ( portof ( & md -> iface -> ip_addr ) ) ) ; } else { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart>, bmpdata, UINT32 <S2SV_ModEnd> rowstride ) { <S2SV_ModStart> ) { nsc_encode_argb_to_aycocg <S2SV_ModEnd> ( context, <S2SV_ModStart> ) ; } return TRUE ;",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
403,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_TIPS ) return ARRAY_SIZE ( g_xgmac_tips_string ) ; if ( stringset == ETH_SS_STATS || stringset == ETH_SS_TIPS ) return ARRAY_SIZE ( g_xgmac_tips_string ),0
404,<S2SV_ModStart> == 1 ) return ( image -> columns * GetPSDPacketSize ( image ) <S2SV_ModEnd> ) ; else,0
405,"<S2SV_ModStart> fd = open ( <S2SV_ModEnd> dev_path, O_RDWR <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, dev_path ) ; return ; }",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModEnd> pcu -> ep_ctrl <S2SV_ModStart> -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EIN",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> -> name ; <S2SV_ModEnd> dev = d <S2SV_ModStart> dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME <S2SV_ModEnd>, name ) <S2SV_ModStart> d ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls < 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_",0
409,<S2SV_ModStart> target_enc ) { if ( ci -> syntax == ONIG_SYNTAX_NONE ) { r = ONIGERR_INVALID_FORMAT ; goto err2 ; },0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int InsertRow ( <S2SV_ModEnd> Image * <S2SV_ModStart> image, ssize_t depth, size_t x, ssize_t <S2SV_ModEnd> y, ExceptionInfo <S2SV_ModStart>, ssize_t x, size_t <S2SV_ModEnd> y, ExceptionInfo <S2SV_ModStart>, ssize_t x, size_t <S2SV_ModEnd> y, ExceptionInfo <S2SV_ModStart>, ssize_t x, size_t <S2SV_ModEnd> y, ExceptionInfo <S2SV_ModStart>, x, <S2SV_ModEnd> y, exception <S2SV_ModStart>, x, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, exception <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> exception ) ; <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> exception ) ; <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart> y, image -> columns, <S2SV_ModEnd> y, image <S2SV_ModStart> y, image -> columns, <S2SV_ModEnd> y, exception <S2SV_ModStart>, x, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart>, y, <S2SV_ModEnd> y, image <S2SV_ModStart> y, image -> columns, <S2SV_ModEnd> y,",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> const u_char * <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type",0
412,"<S2SV_ModStart> desc_struct ss ; u32 eip <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & eip ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; else return emulate_gp ( ctxt, 0 ) ; } else { if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & eip ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; } else { if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & eip ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; else return emulate_gp ( ctxt, 0 ) ; } <S2SV_ModEnd> cs_sel |= SELECTOR_RPL_MASK <S2SV_ModStart> ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_",0
413,<S2SV_ModStart> dev ) ; if (! pdev ) return - ENODEV ; <S2SV_ModStart> -> driver_override ) ) return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
414,"<S2SV_ModStart> = NULL, * tmpout = NULL ; if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } tmpout = BIO_new ( BIO_s_mem ( ) ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } tmpout = BIO_new ( BIO_s_null ( ) ) ; tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS",0
415,"<S2SV_ModStart> retval, response <S2SV_ModEnd>, NULL )",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vp9_cost_bit ( prob, b ) ; if ( cc <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart> config_file ) ; if ( ( tmp_dir == NULL ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir [ 0 ] == '\\0' ) || ( tmp_dir,0
418,"<S2SV_ModStart> ; switch ( c -> protocol ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_INET6 : ( void ) ipv6_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; if ( ipv6_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; if ( ipv6_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun",0
419,"<S2SV_ModStart> write_buffer_16x16 ( int16_t <S2SV_ModEnd> * output,",0
420,"<S2SV_ModStart> & 0xffff ; memset ( event_rec, 0, sizeof ( event_rec ) - 4 ) ;",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; struct address_space * mapping = vma -> vm_file -> f_mapping ; struct inode * inode = mapping -> host ; long chg ; if ( vma_needs_reservation ( h, vma, addr ) ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_page ( alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } <S2SV_ModEnd> set_page_private ( page",0
422,"<S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> filegen_file ) ; if ( filegen -> flag & FGEN_FLAG_DISABLED ) { NTP_INSIST ( 0 ) ; }",0
423,"<S2SV_ModStart> -> stamp_path ) { if ( t -> last_trigger. realtime!= t -> last_trigger. realtime ) <S2SV_ModStart>, t -> last_trigger. realtime <S2SV_ModEnd>, UID_INVALID,",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t s14, s15 ; tran_high_t s15 = input [ 15 ] ; tran_high_t x0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 13 ] ; tran_high_t x3 = input [ 4 ] ; tran_high_t x4 = input [ 5 ] ; tran_high_t x5 = input [ 6 ] ; tran_high_t x7 = input [ 7 ] ; tran_high_t",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif return flags & mask ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return 0 ;,0
428,"<S2SV_ModStart> tot_len ) ; memset ( & opt2 -> opt, 0, sizeof ( * opt2 ) ) ;",0
429,"<S2SV_ModStart> length ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> fpath = NULL <S2SV_ModEnd> ; const char <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
431,"<S2SV_ModStart> ( flag & CL_UNPRIVILEGED ) &&! ( mnt -> mnt. mnt_flags & MNT_READONLY ) <S2SV_ModStart> |= MNT_LOCK_READONLY ; if (! ( flag & CL_UNPRIVILEGED ) && <S2SV_ModStart> & CL_UNPRIVILEGED ) &&! ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt -> mnt. mnt_flags & MNT_LOCKED ) ) { list_add_tail ( & mnt -> mnt_expire, & old -> mnt_expire ) ; mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; }",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } else if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; }",0
433,"<S2SV_ModStart> * rsize >= 111 <S2SV_ModEnd> && rdesc [ <S2SV_ModStart> [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> serio ) ; if ( str & I8042_STR_OBF ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; if ( irq ) dbg ( ""Interrupt <S2SV_blank> %d, <S2SV_blank> without <S2SV_blank> any <S2SV_blank> data\\n"", irq ) ; goto out ; }",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_translate_to_linux ( uint8_t * newName <S2SV_ModEnd>, int udfLen <S2SV_ModStart> newIndex, int udfLen, uint8_t * fidName <S2SV_ModEnd>, int fidNameLen <S2SV_ModStart> fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; if ( udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' ) { needsCRC = 1 ; newIndex = udfLen ; memcpy ( newName, udfName + 1, udfNameLen - 1 ) ; } else { if ( udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' ) { needsCRC = 1 ; newIndex = udfLen ; memcpy ( newName, udfName + 1, udfNameLen - 1 ) ; } else { if",0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( const <S2SV_ModStart> const tile, const MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> ] ; const int bs = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; const int hbs = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; int bw, bh ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi,",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> * s ; unsigned char * p ; int ret = - 1 ; if ( sigbuf == NULL ) goto err ; p = d2i_DSA_SIG ( & s, & p, siglen ) ; if ( p == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & p, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, p, s, dsa ) ; err : DSA_SIG_free ( s ) ; return ( ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
442,"<S2SV_ModStart> NULL ) ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) return rv ; <S2SV_ModStart> rv = gdDPExtractData <S2SV_ModEnd> ( out,",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; oe_addrinfo_data_t * addr = NULL ; <S2SV_ModStart>, handle, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & p <S2SV_ModStart>, & addr <S2SV_ModEnd>, & canonnamelen <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_addrlen, <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_addrlen, <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_addrlen, <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_socktype, <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_protocol, <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_addrlen, <S2SV_ModStart>, & addr <S2SV_ModEnd> -> ai_addrlen, <S2SV_ModStart>, & addr <S2SV_ModEnd>, & canonnamelen",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> ] ) ; if ( rctx -> image_height > 8 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> image <S2SV_blank> size"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart>, 100 ) ; kfree ( buf ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,<S2SV_ModStart> destroy_list ) ; sas_destruct_event ( dev <S2SV_ModEnd> ) ; },0
451,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth <S2SV_ModStart> ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( row = 0 ; row < mb_rows ; ++ row ) { if ( active_map [ row ] ) break ; } if ( col == mb_cols ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { if (! active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } active_map += mb_",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,<S2SV_ModStart> return code ; <S2SV_ModEnd> code = verify_s4u_x509_user_checksum,0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> r, outbuf, 8",0
455,<S2SV_ModStart> cur_pic. f && s -> cur_pic. f -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> cur_pic. f -> pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. f -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> cur_pic. f -> pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIXEL_FMT_YUV420P || s -> cur_pic. f -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> { if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; memset ( & hdr, 0, sizeof ( struct rds_header ) ) ; hdr -> h_len = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> ) + be32_to_cpu ( hdr -> m_inc. i_hdr. h_len ) ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, sizeof ( * hdr ) ) ; rds_inc_put ( & rm -> m_inc ) ; rds_inc_put ( & rm -> m_inc ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
457,<S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; ext_block =,0
458,<S2SV_ModStart> ; if ( key -> type -> flags & KEY_FLAG_NEGATIVE ) { ret = - EINVAL ; goto error2 ; } if (,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; <S2SV_ModStart> 8 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IEEE80211_TX_SKB_SHARING ; dev -> priv_flags &= ~ IEEE80211_TX_SKB_SHARING,0
461,"<S2SV_ModStart> hmi_data ; uint32_t <S2SV_ModEnd> hmi_bpm = 0 <S2SV_ModStart> channel ; } * note = NULL ; uint32_t <S2SV_ModEnd> hmi_tmp = 0 <S2SV_ModStart> hmi_tmp = 0 ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__,",0
462,<S2SV_ModStart> -> id ; * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 <S2SV_ModEnd> ] = inode,0
464,"<S2SV_ModStart> ) ) { if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } else if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( signed_add_overflows ( dst_reg -> umin_value, umin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart> LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) filt_guess -= 4 ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) filt_guess -= 4 ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) filt_guess -= 4 ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) filt_guess -= 4 ; else if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) filt_guess -= 4 ; if ( cpi -> oxcf. key_frame_mode == KEY_FRAME ) filt_guess -= 4 ; if ( cpi -> oxcf. key_frame_mode == KEY_FRAME )",0
467,"<S2SV_ModStart> ) ) ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ;",0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count, <S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_column_count, <S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count,",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( data, 0, data_sz ) ; if (! data ||! data_sz ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> iface -> dec. decode ) res = ctx -> iface -> dec. decode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv, data, data_sz, user_priv <S2SV_ModEnd> ) ; }",0
474,"<S2SV_ModStart> ; if (! strchr <S2SV_ModEnd> ( value, <S2SV_ModStart>, ',' ) &&! strchr <S2SV_ModEnd> ( value,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
476,"<S2SV_ModStart> ) ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_number > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if (",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
478,<S2SV_ModStart> } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_COUNTER_IDX ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } <S2SV_ModEnd> if (!,0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
480,<S2SV_ModStart> self ) { if ( self -> dict ),0
481,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free ( szSepLine ) ;,0
482,"<S2SV_ModStart> ; r = copy_to_user <S2SV_ModEnd> ( data,",0
483,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank>",0
484,<S2SV_ModStart> = baud ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> type = cpu_context ; mutex_lock ( & cpuctx -> ctx. mutex ) ;,0
486,"<S2SV_ModStart> len, struct iov_iter * iter <S2SV_ModStart> = 1 ; iter -> iov_base = NULL ; iovec -> iov_len = 0 ;",0
487,<S2SV_ModStart> ext4_group_t flex_group ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = EXT4_SB ( sb ) -> s_log_groups_per_flex <S2SV_ModEnd> ; groups_per_flex = <S2SV_ModStart> -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = EXT4_SB ( sb ) -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = EXT4_SB ( sb ) -> s_log_groups_per_flex <S2SV_ModEnd> ; flex_group_count =,0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if (,0
489,"<S2SV_ModStart> = cJSON_CreateArray ( <S2SV_ModEnd> ) ; for <S2SV_ModStart> ] ) ; if ( n ) { if (! i ) a -> child = n ; else suffix_object ( p, n ) ; } else { suffix_object ( p, n ) ; }",0
490,"<S2SV_ModStart> ) ) { int len = strlen ( parv [ 1 ] ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; len = strlen ( parv [ 1 ] ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if ( len > HOSTLEN ) return send_reply ( cptr, ERR_SASLTOOSHORT ) ; if (",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) <S2SV_ModEnd> ; } },0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
493,<S2SV_ModStart>! no_port_forwarding_flag && <S2SV_ModEnd>! options.,0
494,<S2SV_ModStart> if (! <S2SV_ModEnd> bitstream_read_bit ( bc,0
495,<S2SV_ModStart> err ; } if ( m -> msg_name ) free_sockaddr_storage ( address ) ;,0
496,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores ) ) { int res ; int res ; int res ; int res ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_RuntimeError, """,0
497,<S2SV_ModStart> int hstartcol ; register jas_int64_t numcols ; register jas_int64_t <S2SV_ModEnd> m ; if <S2SV_ModStart> 2 ) { numcols = ( numrows + 1 - parity ) >> 1 ; hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( numrows + 1 - parity ) * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = numcols - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = numcols - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ;,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank>",0
501,"<S2SV_ModStart> ) ; if ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( queue ) { if ( free_func ) free_func ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } else { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } } hashbin -> hb_current = NULL ; hashbin -> magic = ~ HB_MAGIC ; if ( queue ) { if ( free_func ) free_func ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * *",0
502,<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { mnt -> mnt. mnt_flags |= MNT_READONLY ; },0
503,<S2SV_ModStart> * skb ; struct sockaddr_ll * sll <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } sll = msg -> msg_name <S2SV_ModEnd> ; err =,0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> if ( serial -> num_ports < 2 ||! serial -> port [ 1 ],0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader ds64hdr, datahdr, fmthdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; int64_t total_riff_bytes ; int64_t total_riff_bytes ; int64_t total_riff_bytes ; int64_t total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_",0
507,"<S2SV_ModStart> msg ) ; msg_sys -> msg_namelen = 0 ; <S2SV_ModStart>, VERIFY_WRITE ) ; msg_sys -> msg_flags |= MSG_CMSG_COMPAT ; <S2SV_ModStart>, VERIFY_WRITE ) ; msg_sys -> msg_iovlen = 0 ;",0
508,<S2SV_ModStart> ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct buffer_head * dibh = NULL ; struct metapath * mp = & ip2 -> i_meta_inode <S2SV_ModStart> -> mp_bh [ height <S2SV_ModEnd> ] ; u64,0
509,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\",0
510,"<S2SV_ModStart> return FALSE ; ret = <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; if ( ret ) return FALSE ; ret = <S2SV_ModStart> -> prof_nsc_decode ) ; if ( ret ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, NULL, flip ) ) return FALSE ; ret = <S2SV_ModStart> -> priv -> prof_nsc_decode ) ; if ( ret ) return FALSE ; ret = nsc_context_initialize ( context, s ) ; if (! ret ) return FALSE ; ret = nsc_decode ( context, ret ) ; if (! ret ) return FALSE ; ret = nsc_rle_decompress_data ( context ) ; if (! ret ) return FALSE ; ret = <S2SV_ModEnd> nsc_rle_decompress_data ( context <S2SV_ModStart> -> priv -> prof_nsc_decode ) ; if ( ret ) return",0
511,"<S2SV_ModStart> ) ; } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; } else if ( copyNs == origNs ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; } else { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; }",0
512,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd>",0
513,<S2SV_ModStart>. nextsame!= NULL <S2SV_ModEnd> || fv ->,0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> timr ) ; <S2SV_ModEnd> if ( when <S2SV_ModStart> it_value ) ; period <S2SV_ModEnd> = timespec_to_ns ( <S2SV_ModStart> it_interval ) ; <S2SV_ModEnd> if ( when,0
516,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
517,<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } <S2SV_ModEnd> break ; case,0
518,"<S2SV_ModStart> * multipart_media ; <S2SV_ModEnd> struct range * <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> ; int code = 500, fd = - 1, nranges = 0, ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( st -> st_size <= 0 ) goto abort ; <S2SV_ModStart> ; if ( st -> st_size <= 0 ) goto abort ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> buffer_add_range ( fd <S2SV_ModStart>, evb, <S2SV_ModEnd> range ) == <S2SV_ModStart> goto abort ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort ; <S2SV_ModStart> abort ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ;",0
519,"<S2SV_ModStart> = FALSE ; uint32_t ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!=",0
520,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> x_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> z_dc_delta_q ) ; write_delta_q ( wb, cm -> z_ac_delta_q ) ; }",0
521,<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
525,"<S2SV_ModStart> { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { return NULL ; }",0
526,<S2SV_ModStart> { if (! path. is_dir ) { error = - ENOMEM ; goto out ; } if (,0
527,<S2SV_ModStart> bus -> m_wMaxReqSize ) { ret = SAA_ERR_BAD_PARAMETER ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size + buf_size > bus -> m_dwSizeGetRing,0
528,"<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { retval_t new_len = INT_MAX ; retval_t <S2SV_ModEnd> replaced, ( <S2SV_ModStart> ) new_len, 0 ) ; } else { retval_t new_len = INT_MAX ; retval_t <S2SV_ModEnd> replaced, (",0
529,<S2SV_ModStart> peerec ) ) { ret = - 1 ; goto sslerr ; } <S2SV_ModStart> peerec ) ) { ret = - 1 ; goto sslerr ; },0
530,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_line_array,",0
531,"<S2SV_ModStart> BLOCK_SIZE subsize, int partition_id <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; int <S2SV_ModEnd> bsl = b_width_log2 <S2SV_ModStart> ; int hbs = partition_lookup [ partition_id <S2SV_ModEnd> ] [ subsize <S2SV_ModStart> ; PARTITION_TYPE partition = partition_lookup [ partition_id <S2SV_ModEnd> ] [ subsize <S2SV_ModStart> subsize ] ; * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col + hbs ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get",0
532,<S2SV_ModStart> name ) ; if (! name ) return 0,0
533,<S2SV_ModStart> ; int pixel_ptr <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> ; pixel_ptr = 0 <S2SV_ModEnd> ; block_ptr =,0
534,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
535,<S2SV_ModStart> * ptype ; struct gre_base_hdr * greh2 ; if (! NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) ->,0
536,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; },0
537,<S2SV_ModStart> } else { if ( session -> sessionHandle == TPM_RH_NULL ) { return TSS2_SYS_RC_INVALID_SESSION_HANDLE ; } <S2SV_ModStart> } else { if ( session -> sessionHandle == TPM_RH_NULL ) { return TSS2_SYS_RC_INVALID_SESSION_HANDLE ; } <S2SV_ModStart> } else { if ( session -> sessionHandle == TPM_RH_NULL ) { return TSS2_SYS_RC_INVALID_SESSION_HANDLE ; } else { return TSS2_SYS_RC_INVALID_SESSION_HANDLE ; },0
538,"<S2SV_ModStart> ; ret = key_permission_check <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; },0
540,<S2SV_ModStart> ; dst_known =! <S2SV_ModEnd> src_known ; switch,0
541,"<S2SV_ModStart> cifs_sb ) ; cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> in <S2SV_blank> cifs_sb <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ;",0
542,"<S2SV_ModStart> -> cfg_size ; memset ( & caps, 0, sizeof ( caps ) ) ;",0
543,"<S2SV_ModStart> copied ) ; if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,"<S2SV_ModStart> = 1 ; if (! s -> filesize ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> file <S2SV_blank> size <S2SV_blank> found.\\n"" ) ; return AVERROR ( ENOMEM ) ; }",0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; }",0
546,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> char * in, size_t <S2SV_ModEnd> len ) { <S2SV_ModStart> ++ = ( base64val ( digit1 ) << 4 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; len ++ ; if ( <S2SV_ModEnd> digit4!= '=' <S2SV_ModStart>!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf",0
547,<S2SV_ModStart> gc ) ; if ( gpio_dev -> pctrl ) <S2SV_ModStart> pctrl ) ; <S2SV_ModEnd> return 0 ;,0
548,<S2SV_ModStart> size_t copied = 0 <S2SV_ModEnd> ; ssize_t total_written <S2SV_ModStart> copied = min_t <S2SV_ModEnd> ( const size_t,0
549,<S2SV_ModStart> if (! <S2SV_ModEnd> ( quirks &,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ; encode_frame_count = svc_ctx <S2SV_ModEnd> -> encode_frame_count ; <S2SV_ModStart> ; if ( svc_ctx <S2SV_ModEnd> -> encode_frame_count <= <S2SV_ModStart> -> encode_frame_count <= 0 ) { svc_log_get_message ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; return NULL ; } for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && i == 1 || i == 3 ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left <= 0 ) { return FALSE ; } <S2SV_ModStart> } else { if ( left <= 0 ) { return FALSE ; } <S2SV_ModStart> value ) ; left -= len ; } else { * out ++ = value ; left -- ; } <S2SV_ModEnd> } * (,0
552,"<S2SV_ModStart> = new_cols ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer )",0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; int in_nested_escape = 0 ; int in_nested_escape = 0 ; int in_nested_escape = 0 ; int in_nested_escape = 0 ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_nested_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_nested_escape = 1 ; } else if ( in_nested_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_nested_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) {,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> int bufsize ) { assert ( bufsize <= JAS_SSIZE_MAX ) ; <S2SV_ModEnd> JAS_DBGLOG ( 100 <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"" <S2SV_ModEnd>, m,",0
555,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
556,"<S2SV_ModStart> ; if (! strcmp <S2SV_ModEnd> ( pred_txt, <S2SV_ModStart> pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; }",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_instance_ctx * ctx <S2SV_ModStart> crypto_instance_ctx ( inst ) ; <S2SV_ModEnd> crypto_drop_aead ( &,0
558,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ( ptr -> height ) ; } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ) ) ; if ( ndopts. pref < pref ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> pref <S2SV_blank> for <S2SV_blank> %s\\n"", in6_dev -> name ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; size_t replay_esn_len = <S2SV_ModEnd> nla_len ( rp <S2SV_ModStart> rp ) ; replay_esn_len = <S2SV_ModEnd> xfrm_replay_state_esn_len ( replay_esn <S2SV_ModStart> xfrm_replay_state_esn_len ( up ) ; if ( replay_esn_len!= xfrm_replay_state_esn_len ( up ) <S2SV_ModEnd> ) return - <S2SV_ModStart> up )!= xfrm_replay_state_esn_len <S2SV_ModEnd> ( up ),0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table,",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> l_step_l ) ; if ( l_step_l > l_max_res ) { return 00 ; } <S2SV_ModStart> l_step_l ) ; if ( l_step_l > l_max_res ) { return 00 ; } <S2SV_ModStart> l_step_l ) ; if ( l_step_l > l_max_res ) { return 00 ; },0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> mi_col ; MODE_INFO * const mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> mi_grid_visible + mi <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> -> prev_mi_grid_visible + mi <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> BLOCK_SIZE bsize ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> -> prev_mi_grid_visible + mi <S2SV_ModEnd> ; vp9_zero ( <S2SV_ModStart> ) ) ; vp9_zero ( & cpi -> mb. <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( & cpi -> <S2SV_ModEnd> sf. partition_search_type <S2SV_ModStart> case VAR_BASED_PARTITION : set_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> mi_col ) ; set_source_var_based_partition ( cpi, tile, mi <S2SV_ModEnd>, tp, <S2SV_ModStart> mi_col ) ; set_source_var_based_partition ( cpi, tile, mi <S2SV_ModEnd>, BLOCK_64X64, <S2SV_ModStart> BLOCK_64X64, & dummy_rate",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) obuf = opipe -> bufs + nbuf ; else obuf = opipe -> bufs + nbuf ;,0
570,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
571,"<S2SV_ModStart> } else { int err ; <S2SV_ModStart> return HTTP_INTERNAL_SERVER_ERROR ; err = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart>, ""wb"" ) ; if ( err!= 0 ) { ret_code = HTTP_UNAUTHORIZED ; goto ExitFunction ; } <S2SV_ModStart> == NULL ) { err = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart> return HTTP_UNAUTHORIZED ; goto ExitFunction ; } if ( err!= 0 ) { ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } <S2SV_ModStart> == NULL ) return HTTP_UNAUTHORIZED ; exitFunction : fclose ( Fp ) ; if ( err!= 0 ) { ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } <S2SV_ModStart> ; } } if ( err!= 0 ) { ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } <S2SV_ModStart> } if ( err!= 0 ) { ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } if ( err!= 0 ) { ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; }",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg,0
573,"<S2SV_ModStart> ) ) { if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char,0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> -> devnum, ci. <S2SV_ModEnd> slow = ps <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart>, int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; opt -> optlen = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; }",0
578,<S2SV_ModStart> -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ; <S2SV_ModStart> args -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ;,0
579,"<S2SV_ModStart> ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_GET_DEVICE_COUNT : if ( IoEnumerateDeviceObjectList ( TCDeviceObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_IS_DEVICE_UNLOAD_DISABLED : if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DriverUnloadDisabled ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int",0
580,"<S2SV_ModStart> ""Upgrade"" ) ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( ws_key == NULL || strcmp ( ws_key, ""Sec-WebSocket-Key"" )!= 0 ) goto error ; if (",0
581,<S2SV_ModStart> uint16 nif = 0 ; uint32 len = 0 ; <S2SV_ModStart> 0 ; } len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> description ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_findalldevs_if ) ; len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_sockaddr ) * len <S2SV_ModEnd> ; for ( <S2SV_ModStart> -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_sockaddr ) * len <S2SV_ModEnd> ; break ; <S2SV_ModStart> case AF_INET6 : len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_sockaddr ) * len <S2SV_ModEnd> ; break ; <S2SV_ModStart> case AF_INET : len <S2SV_ModEnd> += sizeof (,0
582,"<S2SV_ModStart> struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
583,"<S2SV_ModStart> ) ; for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < 4 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ;",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart> sk, int <S2SV_ModEnd> tstype ) { <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) serr -> ee. ee_data -= sk -> sk_tskey ; } <S2SV_ModEnd> err = sock_queue_err_skb",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,<S2SV_ModStart> = len ; ND_TCHECK ( bp [ 1 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 2 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 3 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 4 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 5 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 6 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 7 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 8 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 9 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 10 ] ) ; ND_TCHECK ( bp [ 11 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 12 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 13 ] ) ; ND_TCHECK ( bp [ 13 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 13 ] ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 13 ] ) ; ND_TCHECK (,0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN (",0
589,<S2SV_ModStart>! dumpable &&! capable ( CAP_SYS_PTRACE <S2SV_ModEnd> ) ) {,0
590,<S2SV_ModStart> long ) ) { if ( i + sizeof ( long ) > w ) { abort ( ) ; },0
591,"<S2SV_ModStart> & __GFP_ZERO ) memset <S2SV_ModEnd> ( addr,",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> i4_payload_size ) ; if ( 0 == ps_bitstrm -> u4_bit_length ) { ps_bitstrm -> u4_bit_length = 0 ; } <S2SV_ModStart> i4_payload_size ) ; if ( 0 == ps_bitstrm -> u4_bit_length ) { ps_bitstrm -> u4_bit_length = 0 ; } <S2SV_ModStart> i4_payload_size ) ; if ( 0 == ps_bitstrm -> u4_bit_length ) { ps_bitstrm -> u4_bit_length = ps_bitstrm -> u4_bit_length ; ps_bitstrm -> u4_bit_length = 0 ; },0
594,<S2SV_ModStart> cypress_private ) ; if (! serial ) return - ENODEV,0
595,<S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> ) ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_engine_list ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_engine_list ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_engine_list ) ; kfree ( tmp_sdma_rht ) ;,0
596,<S2SV_ModStart> -> device_data ; device -> device_data = NULL ;,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> char * name <S2SV_ModStart> name, int rep_quick ) { int got_error ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; }",0
598,"<S2SV_ModStart> q, 10 ) ; if ( p == q || size < 16 || size > 256",0
599,"<S2SV_ModStart> valuelen ) ; xfs_bmbt_irec_t dblocks ; dblocks = XFS_B_TO_FSB ( mp, valuelen ) ; nblks += dblocks",0
600,"<S2SV_ModStart> } pairs = calloc ( pcount, <S2SV_ModEnd> sizeof ( Pairs <S2SV_ModStart> ) ) ; if (! pairs ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> command <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank>",0
602,<S2SV_ModStart> ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ; <S2SV_ModStart> ( yyscanner ) ;,0
603,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; * hend = '\\r' ; } for ( b = c -> buf ;'<S2SV_blank> '!= * b ; b ++ ) { if ( '\\0' == * b ) { return bad_request ( c, 400, __LINE__ ) ; } agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, c -> buf ) ; * hend = '\\r' ; } for ( b = c -> buf ;'<S2SV_blank> '!= * b ; b ++ ) { if ( '\\0' == * b ) { return bad_request ( c, 400, __LINE__ ) ; } agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str",0
604,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart> new_data_len ) ; if ( g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_",0
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_access ) ; if ( error ) <S2SV_ModEnd> goto out_drop_write ; <S2SV_ModStart> goto out_drop_write ; fh_unlock ( fh ) ; <S2SV_ModEnd> error = fh_want_write <S2SV_ModStart> fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; if ( error ) goto out_drop_drop_write ; fh_unlock ( fh ) ;",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, ""No <S2SV_blank> meta-tree <S2SV_blank> in <S2SV_blank> compile_tree"" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> ( fp, ""[%s]\\n"" <S2SV_ModEnd>, section -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp",0
609,<S2SV_ModStart> elen ) ; if (! pc -> componentIdent ) return - EINVAL ; <S2SV_ModStart> case 1 : if (! pc -> lengthComponentIdent ) return - EINVAL ; <S2SV_ModStart> case 2 : if (! pc -> lengthComponentIdent ) return - EINVAL ; <S2SV_ModStart> case 3 : if (! pc -> lengthComponentIdent ) return - EINVAL ; <S2SV_ModStart> break ; case 4 : if (! pc -> componentIdent ) return - EINVAL ; <S2SV_ModStart> break ; case 5 : if (! pc -> lengthComponentIdent ) return - EINVAL ; <S2SV_ModStart> break ; } <S2SV_ModEnd> elen += sizeof <S2SV_ModStart> struct pathComponent ) + <S2SV_ModEnd> pc -> lengthComponentIdent,0
610,<S2SV_ModStart> ) ) ; if ( dp == NULL ) goto trunc ;,0
611,"<S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : ND_TCHECK_32BITS ( tptr ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ;",0
612,"<S2SV_ModStart> userData, target, NULL <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, target, NULL <S2SV_ModEnd> ) ; ctxt",0
613,"<S2SV_ModStart> ) ; bool checksum_valid = false <S2SV_ModStart> slow ) ; if (! checksum_valid ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INERRORS, is_udplite ) ; }",0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> tlen, pdu_type <S2SV_ModStart> ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( tptr ++ ) ; pdu_len = EXTRACT_32BITS ( tptr ++ ) ; if (! pdu_type ) { break ; } if (! pdu_len ) { goto trunc ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; tlen -= pdu_len ; tptr += pdu_len ; } tlen -= pdu_len ; <S2SV_ModEnd> } return ;",0
615,"<S2SV_ModStart> int tagval ; struct stream packet = * new ; if ( s -> p [ 0 ]!= 0x80 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( s -> p [ 0 ]!= 0x81 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> 0x81, <S2SV_blank> got <S2SV_blank> 0x81"" ) ; return False ; } if ( s -> p [ 0 ]!= 0x81 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( s -> p [ 0 ]!= 0x81 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> 0x81, <S2SV_blank> got 0x81"" ) ; return False ; } if ( s -> p [ 1 ]!= 0x81 ) { if ( s",0
616,"<S2SV_ModStart> ; int chars_processed <S2SV_ModEnd> ; int elt <S2SV_ModStart> ; int data_size <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; chars_processed = 0 ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + <S2SV_ModEnd> ( ( ( <S2SV_ModStart> * cp ++ ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return",0
617,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE | XFS_ILOG_ADATA ) ; args -> rmtvaluelen = args -> valuelen ;",0
618,"<S2SV_ModStart> int rv = Socket_print <S2SV_ModEnd> ( S, <S2SV_ModStart>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"",",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } child = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> dest ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; <S2SV_ModEnd> } <S2SV_null>",0
620,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
621,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return 0 ; },0
623,"<S2SV_ModStart> page_table ) ; spin_lock_irqsave ( & vma -> vm_page_lock, flags ) ;",0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> * new_data, * old_data ; new_data = env -> insn_aux_data ; old_data = env -> insn_aux_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ) { env -> insn_aux_data = new_data ; return 0 ; } <S2SV_ModEnd> vfree ( old_data",0
626,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_16BITS ( & dp -> ip6f_offlg ) ; <S2SV_ModStart> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (%d|%ld)"", EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; }",0
627,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,<S2SV_ModStart> ( occ0 % rowsize <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( occ0 % rowsize <S2SV_ModEnd> ) == 0,0
630,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; exif_mnote_data_canon_clear ( n ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof (",0
631,<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if (,0
632,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
633,"<S2SV_ModStart>, llbuff, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; }",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""r%d,r%d,^,!,"" <S2SV_ModEnd>, r,",0
636,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) <S2SV_ModStart> again ; } if ( unlikely ( iov_iter_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; }",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( len < ring -> rx_buffersize ) ) { b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", len, ring -> rx_buffersize ) ; goto drop_recycle_buffer ; }",0
638,<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
639,"<S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ;",0
640,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags | eflags ; else sub -> flags &= ~ ( prog -> flags | eflags ) ;,0
641,<S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( tidx >= 768 ) return AVERROR_INVALIDDATA ; },0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_GENERR ; }",0
644,<S2SV_ModStart> j ++ ) { if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return ( i ) ; if ( j + length > ( ssize_t ) number_pixels ) return (,0
645,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; <S2SV_ModStart> slave_active_lock ) ; spin_unlock ( & timeri -> timer_lock ) ; <S2SV_ModStart> NULL ; } spin_unlock ( & timeri -> timer_lock ) ;,0
646,"<S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ), 1 <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } ND_TCHECK2 ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> len ; } N",0
647,"<S2SV_ModStart> has_va ; const char * arch = info -> arch ; const int bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; <S2SV_ModStart> -> cpu ) { r_config_set ( r, ""anal.cpu"", info -> cpu ) ; } else { r_config_set ( r, ""anal.cpu"", 0 ) ; } <S2SV_ModEnd> r_asm_use ( r <S2SV_ModStart> arch ) ; r_asm_use ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.bits"", bits ) ; r_config_set ( r -> config, ""anal.baseaddr"", baseaddr ) ; r_config_set ( r -> config, ""anal.baseaddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.arch"", arch ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_",0
648,<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> domain_device * dev <S2SV_ModEnd> ; struct asd_sas_discovery_event,0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len <S2SV_ModEnd> ; char line <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH + NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; <S2SV_ModStart> return FALSE ; pkt_len = parse_netscreen_rec_hdr ( wth, line, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth",0
651,"<S2SV_ModStart> 0 ) ; if ( s -> s3 -> rrec. seq_num!= s -> d1 -> processed_rcds. seq_num ) { s -> s3 -> rrec. seq_num = dtls1_next_seq_num ( s -> s3, s -> d1 -> processed_rcds. seq_num ) ; } else { s -> s3 -> rrec. seq_num = dtls1_next_seq_num ( s -> s3, s -> d1 -> processed_rcds. seq_num ) ; }",0
652,<S2SV_ModStart> decode ) { const uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; const uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> RasterSize = newRasterSize ; break ; } <S2SV_ModEnd> if ( decode <S2SV_ModStart> decode ) { const uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; const uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> RasterSize = newRasterSize ; break ; } <S2SV_ModEnd> if ( decode <S2SV_ModStart> ) { const uint_fast32_t <S2SV_ModEnd> originalWidth = gifFilePtr <S2SV_ModStart> -> originalWidth ; const uint_fast32_t <S2SV_ModEnd> originalHeight = gifFilePtr <S2SV_ModStart> -> originalHeight,0
653,"<S2SV_ModStart> can_read_key : if ( key -> type -> validate ) { down_read ( & key -> sem ) ; <S2SV_ModStart> - EOPNOTSUPP ; } <S2SV_ModStart> ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; } else { ret = - EOPNOTSUPP ; } <S2SV_ModEnd> error2 : key_put",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val = <S2SV_ModStart> tmp & 0x7fffffff <S2SV_ModEnd> ) + 1,0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD_PAGE : rm -> atomic. op_m_fadd. page = page ; break ; case RDS_CMSG_ATOMIC_CSWP_PAGE : rm -> atomic. op_m_cswp. page = page ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_ATOMIC_FADD_PAGE : rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = ~ 0 ;,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
659,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= <S2SV_ModEnd> sizeof ( spath",0
661,<S2SV_ModStart> 0 ) { int i ; <S2SV_ModStart> ++ s ; if ( i < 9 ) break ; <S2SV_ModStart> ++ s ; if ( i < 9 ) break ; <S2SV_ModStart>! isspace ( * i ) ) t ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! isspace ( * i <S2SV_ModEnd> ) ) t,0
662,"<S2SV_ModStart> 0 ) { if ( ctx -> deleted ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } else { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; }",0
663,<S2SV_ModStart> objp ) ; xdrs -> x_op = XDR_END ;,0
664,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY (",0
665,<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) goto discard ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ;,0
666,<S2SV_ModStart> msixcap ; if ( <S2SV_ModEnd> msgnum >= 1 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
667,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> upperdentry ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> ) ; } mutex_unlock ( & dentry -> d_inode -> i_mutex ) ;,0
668,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
669,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid &&! authctxt -> user ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (",0
670,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> decode_unsigned_max ( struct <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
671,<S2SV_ModStart> i < ctx -> hdrmax <S2SV_ModEnd> ; i ++,0
672,"<S2SV_ModStart> goto cleanup ; if ( is -> issuer == NULL || is -> serial == NULL ) { retval = KRB5KDC_ERR_NO_ISSUER_SERIAL ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ;",0
673,<S2SV_ModStart> precno ++ ) { Jpeg2000Prec_t <S2SV_ModEnd> * prec = <S2SV_ModStart> prec ) ; if ( prec ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
674,"<S2SV_ModStart> ) ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; }",0
675,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;,0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMP * cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> ] ) ; if ( magfact < 0 ) magfact = - 1 ; <S2SV_ModStart> ] ) ; if ( magfact > 1 ) magfact = 1 ;,0
679,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX,1
680,<S2SV_ModStart> ) b ; if ( buf1 -> size > buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; },0
681,"<S2SV_ModStart> ; if ( ( i = cdf_read_scn ( ms, & h, & scn ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SCN"" ; goto out0 ; } if ( ( i = cdf_read_sst ( ms, & h, & scn, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SST"" ; goto out1 ; } if ( ( i = cdf_read_ssat ( ms, & h, & sat, & ssat, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SSAT"" ; goto out2 ; } if ( ( i = cdf_read_dir ( ms, & h, & dir, & dir, & root_storage ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out3 ; } if ( ( i = cdf_read_short_stream ( ms, & h, & sat, & dir, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SHORT",0
682,<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof,0
683,"<S2SV_ModStart>! eof ) { if ( vars -> end - vars -> ptr > sizeof ( vars -> str ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
686,<S2SV_ModStart> -> _eip ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart> case 4 : if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart> case 5 : if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart> case 6 : if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ;,0
687,"<S2SV_ModStart> name ) ; mutt_strncpy <S2SV_ModEnd> ( errstr,",0
688,"<S2SV_ModStart> * secret, const struct ceph_crypto_key * key <S2SV_ModEnd>, void * <S2SV_ModStart> * th ; struct ceph_crypto_key * old_key ; struct ceph_crypto_key * new_session_key ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; int ret <S2SV_ModEnd> ; int dlen <S2SV_ModStart> dlen = ceph_x_decrypt <S2SV_ModEnd> ( secret, <S2SV_ModStart> end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dlen = dp - dbuf ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto bad ; th = get_ticket_handler ( ac, type ) ; if ( IS_ERR ( th ) ) { ret = PTR_ERR ( th ) ; goto out ; } dlen = dp + dlen ; tkt_struct_v = get_ticket_handler ( ac, type ) ; if ( IS_ERR ( th ) ) { ret = PTR_ERR ( th ) ; goto out",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
690,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
691,<S2SV_ModStart> b ) ; mutex_lock ( & b -> manager -> mutex ) ; <S2SV_ModStart> b ) ; mutex_unlock ( & b -> manager -> mutex ) ;,0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
693,<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF <S2SV_ModStart> ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
694,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
695,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == NAME ) { if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; } args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body",0
696,"<S2SV_ModStart> * sock ; sctp_bind_addr_t primary_addr ; struct sockaddr_storage addr_space ; <S2SV_ModStart> = 0 ; addr_space = sock -> sk -> sk_bound_dev_if ; sctp_bind_addr_init ( & primary_addr, sizeof ( struct sockaddr_storage ) ) ;",0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count, <S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_column_count, <S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count,",0
700,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
701,"<S2SV_ModStart> ctxt ) { struct x86_emulate_reg * reg = & ctxt -> reg ; int rc = 0 ; if ( reg_read ( ctxt, VCPU_REGS_RCX ) == 0 ) return X86EMUL_CONTINUE ; if ( address_mask ( ctxt, reg_read ( ctxt, VCPU_REGS_RCX )!= 0 ) && test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) rc = 1 ; else rc = 0 ; if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) rc = <S2SV_ModEnd> jmp_rel ( ctxt <S2SV_ModStart>. val ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; return X86EMUL_CONTINUE <S2SV_ModStart> X86EMUL_CONTINUE ; } return rc <S2SV_ModEnd> ; } <S2SV_null>",0
702,,1
703,"<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ; <S2SV_ModStart> ( dev, <S2SV_ModEnd> res -> start",0
704,<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + position <= <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + position <= <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf,0
705,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks,0
706,"<S2SV_ModStart> uint32_t track_size ; uint8_t * sysex_store ; uint32_t <S2SV_ModEnd> no_tracks ; uint32_t <S2SV_ModStart> no_tracks ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> no_tracks ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> no_tracks ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } midi_data += 4 ; mid",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ;",0
708,"<S2SV_ModStart> * bh ; uint32_t mapTableLength ; <S2SV_ModStart> TAG_IDENT_LVD ) ; mapTableLength = le32_to_cpu ( lvd -> mapTableLength ) ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < mapTableLength ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; return 0 <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"" <S2SV_ModEnd>, info -> <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank>",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; char nfunc <S2SV_ModStart> ) ; else pr_notice <S2SV_ModEnd> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", <S2SV_ModStart> ) ; else pr_notice <S2SV_ModEnd> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"",",0
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_nxt_word ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
712,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment,",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> continue ; media_device_kpad_to_upad ( & links -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( & links -> links [ l ]. sink, & link. sink ) ; if ( copy_to_user ( & links -> links [ l ]. flags, & link. flags ) ) return - EFAULT ;",0
714,<S2SV_ModStart> ) ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; } else if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_BLANK ; } else if ( line -> type == MD_LINE_LIST_LOOSE_EFFECT && line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; } else if ( line -> type == MD_LINE_LIST_LOOSE_EFFECT && line -> type == MD_LINE_LIST_LOOSE_EFFECT && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; } else if ( line -> type == MD_LINE_LIST_LOOSE_EFFECT && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; } else if ( line -> type == MD_,0
715,"<S2SV_ModStart>, extent ; size_t width, height ; size_t depth, length ; <S2SV_ModStart>, height, depth, length, type, maptype, maplength ; if ( sun_info. type!= RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels!= ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels )",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex *",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,"<S2SV_ModStart> -> loc_addr ; ireq -> opt = rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
719,<S2SV_ModStart> struct xmlparser parser ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; parser. xmlstart = buffer ; parser. xmlend = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = bufsize ; parser. xmlstart = buffer ; parser. xmlend = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
720,"<S2SV_ModStart>!= 0 ) { __wsum csum = 0 ; <S2SV_ModStart>, csum_partial ( skb_transport_header ( skb ) <S2SV_ModEnd> + tlen, <S2SV_ModStart>, offset, 0 ) <S2SV_ModEnd> ) ; put_cmsg",0
721,"<S2SV_ModStart> pfn ) ; r = - ENOMEM ; goto unmap_pages <S2SV_ModEnd> ; } gfn <S2SV_ModStart> unmap_pages : kvm_iommu_put_pages <S2SV_ModEnd> ( kvm,",0
722,"<S2SV_ModStart> 4 ], cmd -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len > sizeof ( b ) - 6 ) return - EINVAL",0
723,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ) ; <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> value ; value <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 0 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 2 ] <S2SV_ModEnd> ) ) ; <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
725,"<S2SV_ModStart> ) ; struct free_nid_entry <S2SV_ModEnd> * i ; <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( GFP_NOFS ) ; <S2SV_ModEnd> ne = __lookup_nat_cache <S2SV_ModStart> ( nm_i, nid ) ; if (! <S2SV_ModEnd> ne && ( <S2SV_ModStart>! get_nat_flag ( ne, IS_CHECKPOINTED ) || nat_get_blkaddr ( ne )!= NULL_ADDR ) ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload_error ( ) ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ),0
727,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely ( extra. type >= XEN_NETIF_EXTRA_TYPE_MAX ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ;",0
728,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
729,<S2SV_ModStart> r1. event = event ; r1. tstamp = * tstamp ; r1.,0
730,"<S2SV_ModStart> 1 ; defaultoptions ( & h ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; luaL_pop ( L, 1 ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; size = lua_tonumber ( L, - 1 ) ; lua_pop ( L, 1 ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt )",0
731,"<S2SV_ModStart> = 0 ; if ( msg_len < 0 ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> too <S2SV_blank> short"", msg_len ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < 0 ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> too <S2SV_blank> short"", msg_len ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len > msg_tlen ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> too <S2SV_blank> short"", msg_len ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if ( msg_len < 0 ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> too <S2SV_blank> short"", msg_len ) ) ; goto trunc ; } if ( msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> too <S2SV_blank> short"", msg_len ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr,",0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_ext * body = ( struct oz_multiple_ext * ) data_hdr ; int data_len = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_EXTEND : { struct oz_iso_fixed * body = ( struct oz_iso_fixed * ) data_hdr ;",0
733,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> res = 0 ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. noise_sensitivity > 0 && cpi -> oxcf. noise_sensitivity > 0 <S2SV_ModStart> timer ) ; # endif if ( cpi -> oxcf. noise_sensitivity > 0 && cpi -> oxcf. noise_sensitivity > 0 && cpi -> oxcf. noise_sensitivity < cpi -> oxcf. Width * cpi -> oxcf. Height * cpi -> oxcf. lag_in_frames ) { assert ( 0 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> return 1 ;",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( ptr_hbe_txposer ->,0
739,"<S2SV_ModStart> ] ; # if 0 <S2SV_ModStart> ] ) ; # endif <S2SV_ModStart> ] ) ; <S2SV_ModEnd> image_w = get_ushort <S2SV_ModStart> 10 ] ) ; <S2SV_ModEnd> image_h = get_ushort <S2SV_ModStart> 12 ] ) ; <S2SV_ModEnd> pixel_depth = tga <S2SV_ModStart> 16 ] ) ; image_desc = tga [ 15 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp )!= 1 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp ) ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n""",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> { if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem ( <S2SV_ModEnd> cpu. sched <S2SV_ModStart>. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else <S2SV_ModEnd> tp -> tv_sec <S2SV_ModStart> tp ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
742,<S2SV_ModStart> -> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; lua_authz_provider_args * prov_args = parsed_require_line ; lua_authz_provider_args * prov_args = NULL <S2SV_ModStart> r ) ; if ( prov_args ) { int i ; if (! lua_checkstack ( L, prov_args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> check <S2SV_blank> stack <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> args"" ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if (",0
744,"<S2SV_ModStart> * prev ; unsigned long addr <S2SV_ModEnd> ; error = <S2SV_ModStart> address ) ; if ( address < vma -> vm_start || address >= vma -> vm_end ) return - EINVAL ; <S2SV_ModStart> ; error = security_mmap_addr ( address, vma -> vm_pgoff",0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( inode, & mode, & acl ) ; error = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode <S2SV_ModStart> inode -> i_mode, <S2SV_ModEnd> & mode ) <S2SV_ModStart> error ; } <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> char * data <S2SV_ModEnd>, int optional <S2SV_ModStart> mountflags & ~ MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart> mountflags & ~ MS_BIND <S2SV_ModEnd> ) { if <S2SV_ModStart>, target, fstype <S2SV_ModEnd> ) ) {",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,<S2SV_ModStart> if (! proto_end ||! proto_end [ 3 ],0
750,"<S2SV_ModStart>, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
751,<S2SV_ModStart> -> actual ; struct usb_ep * ep = io_data -> ep ; struct usb_request * req = io_data -> req ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd && req <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( io_data,0
752,<S2SV_ModStart> ; if ( <S2SV_ModEnd> rt -> rt_flags <S2SV_ModStart> &&! skb_sec_path ( skb ) ) ip_rt_send_redirect ( skb ) ;,0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { <S2SV_ModEnd> struct trusted_key_payload * <S2SV_ModStart> trusted_key_payload * p <S2SV_ModEnd> ; struct trusted_key_options <S2SV_ModStart> trusted_key_payload * new_p = kmalloc ( sizeof ( * new_p ), GFP_KERNEL ) ; if (! new_p ) { ret = - ENOMEM ; goto out ; } <S2SV_ModEnd> dump_payload ( p <S2SV_ModStart> new_p ) ; <S2SV_ModEnd> dump_payload ( new_p",0
755,<S2SV_ModStart> } v |= ( jas_uint_fast32_t ) <S2SV_ModEnd> c << 24,0
756,"<S2SV_ModStart> ; while ( ( skb = skb_dequeue ( & rose_loopback_queue ) )!= NULL ) { dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( ( skb = skb_dequeue ( & loopback_queue ) ) == NULL ) { kfree_skb ( skb ) ; continue ; } } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } } } <S2SV_ModEnd> } } <S2SV_null>",0
757,"<S2SV_ModStart> out_free ; } kvm_release_memory_region ( kvm, mem ) ; kvm_release_memory_region ( kvm, mem ) ;",0
758,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
759,"<S2SV_ModStart> fdt ) ; if ( path_len < 2 ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( path_len < 2 ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> FDT_PROP : include = want >= 2 ; stop_at = offset ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT",0
760,"<S2SV_ModStart> ) ) { if ( debug_logging_mode ) error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
761,"<S2SV_ModStart> ) ; } if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> ) ; } if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if (",0
764,"<S2SV_ModStart> -> priv ; struct dvb_usb_device_state * dev = d -> priv ; int ret = 0, wo = 0 <S2SV_ModStart> EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret <S2SV_ModEnd> ; } mutex_lock",0
765,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds <S2SV_ModEnd> ( 5,",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; if ( new_root_item -> index!= index ) { ret = btrfs_insert_empty_dir_item ( trans, fs_info, path, root, new_root_item -> index ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( trans, fs_info, root, new_root_item, index ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( trans, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( trans, fs_info, root, new_root_item, index ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( trans, fs_info, root, new_root_item, index ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( trans, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( trans, fs_info, root, new_root_item",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> chanmap_size * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > psf -> sf. channels ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> chanmap_size ) ; <S2SV_ModEnd> free ( psf,0
771,"<S2SV_ModStart> check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4, sf -> x_w, sf -> y_w, sf -> y_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [",0
772,<S2SV_ModStart> ) { int32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> ms -> nest_size [ ms -> nest_level - 1,0
773,"<S2SV_ModStart> verdict < 0 || visited ) { unsigned int oldpos, size ; <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ; if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 )",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1,",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt ) <S2SV_ModStart> ( sk, opt <S2SV_ModEnd>, opt -> <S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
777,"<S2SV_ModStart> * cmsbio = NULL, * tmpin = NULL ; if (! dcont && check_content ( cms ) ) return 0 ; <S2SV_ModStart> tmpin ) ; <S2SV_ModEnd> if (!",0
778,"<S2SV_ModStart> 0 ) ; memset ( & src_info, 0, sizeof ( src_info ) ) ;",0
779,<S2SV_ModStart> sctp_del_protocol ( ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw_init ) ; unregister_pernet_subsys ( & sctp_protosw,0
780,<S2SV_ModStart> cs_flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> info ; netdev_notifier_info_init <S2SV_ModEnd> ( & info,0
782,<S2SV_ModStart> ) ; if (! mm ) { leave_mm ( smp_processor_id ( ) ) ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (,0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ;",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ( fp ) ; if ( i >= sizeof ( temp ) ) break ;,0
785,<S2SV_ModStart> task -> slow_task ) { if <S2SV_ModEnd> (! del_timer,0
786,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
787,"<S2SV_ModStart> ; if ( ( length = strncmp ( frame, LLDP_MULTICAST_ADDR, sizeof ( LLDP_MULTICAST_ADDR ), sizeof ( LLDP_MULTICAST_ADDR ), sizeof ( LLDP_MULTICAST_ADDR ) )!= 0 ) { <S2SV_ModStart> - 1 ; } if ( ( length = strncmp ( frame, LLDP_MULTICAST_ADDR, sizeof ( LLDP_MULTICAST_ADDR ) )!= 0 ) { log_warn ( ""lldp"", ""received <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( ( length = strncmp ( frame, LLDP_MULTICAST_ADDR, sizeof ( LLDP_MULTICAST_ADDR ) )!= 0 ) { if ( ( length = strncmp ( frame, LLDP_MULTICAST_ADDR, sizeof ( LLDP_MULTICAST_ADDR ) )!= 0 ) { log_warn ( ""lldp"", ""received <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart>",0
788,"<S2SV_ModStart> plist_data_t data ; if ( size == BPLIST_FILL ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; if ( size == BPLIST_FILL ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; ( * object ) += size ; if ( next_size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; }",0
789,"<S2SV_ModStart> init ( ) ; # if ( KSZ8851_SPI_SUPPORT == ENABLED ) { interface -> extIntDriver -> init ( ) ; } # endif <S2SV_ModStart> init ( ) ; # if ( KSZ8851_REV_A3_ID == 0 ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY",0
790,<S2SV_ModStart> all_channels_lock ) ; if (! pch -> file. dead ) { atomic_inc ( & pch -> file. refcnt ) ; pch -> file. dead = 1 ; },0
791,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> & XATTR_REPLACE ) { struct btrfs_dir_item * dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } if (! dir_item ) { ret = - ENODATA ; goto out ; } dir_item = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if (! dir_item ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, dir_item ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di",0
792,<S2SV_ModStart> 0xbf ) return 0 ; if ( op -> op < 0 || op -> op >= WASM_OP_MAX ) return 0 <S2SV_ModStart> 1 ; if ( op -> op >= WASM_OP_MAX ) return 0,0
793,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart> plane, encode_block_intra <S2SV_ModEnd> ) ; }",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; if (",0
796,"<S2SV_ModStart> ++ ; # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { <S2SV_ModStart> t + 15 ) && HAVE_OP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; } if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) { if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { unsigned char * ie = ip + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < oe ) ; ip = ie ; op = oe ; } else # endif <S2SV_ModStart> # endif { if ( likely ( HAVE_IP ( t +",0
797,"<S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> goto out6 ; r = - ENOMEM ; if ( r ) goto out7 ;,0
800,"<S2SV_ModStart> ) ) ; if ( sdb_num_get ( sdb, ""entries"" ) < 0 || sdb_num_get ( sdb, ""offset"" ) < 0 || sdb_num_get ( sdb, ""link"" ) < 0 || sdb_num_get ( sdb, ""link"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""section_name"" ) < 0 || sdb_num_get ( sdb, ""section_name"" ) < 0 || sdb_num_get ( sdb, ""link_section_name"" ) < 0 || sdb_num_get ( sdb, ""section_name"" )",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> -> baseline_gf_interval * rc -> avg_gf_interval <S2SV_ModEnd> ) / ( <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_gf_interval <S2SV_ModEnd> ) : ( <S2SV_ModStart> -> baseline_gf_interval * rc -> avg_gf_interval <S2SV_ModEnd> ) / ( <S2SV_ModStart> ; # else target = rc -> avg_gf_interval <S2SV_ModEnd> ; # endif,0
803,"<S2SV_ModStart> i ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ;",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,<S2SV_ModStart> } offset = 0 ; if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ;,0
806,"<S2SV_ModStart> tail ; if ( sst -> sst_len < CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) <S2SV_ModEnd>, sst ->",0
807,<S2SV_ModStart> } # else ( void ) lex_env ; # <S2SV_ModStart> } # else ( void ) lex_env ; # endif <S2SV_ModStart> } # else ( void ) lex_env ; # endif <S2SV_ModStart> } # else ( void ) lex_env ; # endif # define YYCHECK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # if YYERROR_VERBOSE char yymsgbuf [ 128 ] ; char * yymsg_alloc = sizeof ( yymsgbuf ) ; # endif # define YYCHECK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # else ( void ) lex_env ; # endif # define YYCHECK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYCHECK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # if YYCHECK ( N ) ( char * yymsg = yymsgbuf ; # endif # define YYCHECK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # if YYCHECK ( N ) ( yy,0
808,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
809,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; } <S2SV_ModStart> 1 ) ; if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { error = - 1 ; goto exit ; },0
810,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { zap = dereference_key_locked ( key ) ; if ( zap ) call_rcu ( & zap -> rcu, user_free_payload_rcu ) ; }",0
811,<S2SV_ModStart> hci_filter * f = <S2SV_ModEnd> sock -> sk_filter,0
812,"<S2SV_ModStart> -> decrypt_cb ) { const int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; }",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart> peer. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { list_add_tail ( & asoc -> peer. transport_addr_list, & new -> peer. transport_addr_list ) ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, new -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { list_add_tail ( & asoc -> peer. transport_addr_list, & asoc -> peer. transport_addr_list ) ; }",0
815,"<S2SV_ModStart> cleanup ; } if ( fibsize == 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; }",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> (%d)"", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> sk ) ; spin_lock_bh ( & sk -> sk_receive_queue ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { spin_unlock_bh ( & sk -> sk_receive_queue ) ; sctp_association_put ( asoc ) ; } <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n""",0
818,"<S2SV_ModStart> * input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> ACTION_KILL_TAIL 3 # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModEnd> if ( _yr_re_alloc_storage <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModEnd> if ( _yr_re_alloc_storage <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else if ( flags & RE_FLAGS_WIDE ) character_size =",0
819,"<S2SV_ModStart> returnrate, int <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> returnintra ) { RATE_DISTORTION rd ; RATE_DISTORTION uv_intra_distortion, uv_intra_tteob ; int uv_intra_done ; PREDICTION_MODE uv_intra_mode ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; # endif <S2SV_ModStart> best_rd_sse = zero_mv_sse <S2SV_ModEnd> ; best_rd_sse = <S2SV_ModStart> best_rd_sse = zero_mv_sse <S2SV_ModEnd> ; # endif <S2SV_ModStart> =",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_exception_intercept ( svm, PF_VECTOR ) ; set_exception_intercept ( svm, PF_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_RDPMC ) ; set_intercept ( svm, INTERCEPT_CPUID ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
822,"<S2SV_ModStart> * h, const cdf_stream_t * sst, const cdf_property_info_t * info, size_t count <S2SV_ModStart> break ; } if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; <S2SV_ModStart> ; } m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m <S2SV_ModEnd> ; } <S2SV_null>",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 u4_num_reorder_frames ; WORD32 i4_max_frm_num ; WORD32 u4_pic_height_in_map_units_minus1 ; WORD32 u4_cropped_wd, u4_cropped_ht ; WORD32 u4_crop_offset_y, u4_crop_offset_uv ; u4_num_reorder_frames = ih264d_get_num_reorder_frames ( ps_bitstrm ) ; u4_num_reorder_frames = ih264d_get_num_reorder_frames ( ps_bitstrm ) ; u4_cropped_ht = u4_cropped_ht ; u4_num_reorder_frames = u4_num_reorder_frames ; u4_num_reorder_frames = 0 ; u4_num_reorder_frames = ih264d_get_num_reorder_frames ( ps_bitstrm ) ; u4_num",0
824,<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ; <S2SV_ModStart> length ) ; if ( err ) return - EFAULT,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const svc_params = va_arg ( args, vpx_svc_parameters_t * ) ; vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height ) ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = svc_params -> spatial_layer ; cpi -> svc. temporal_layer_id = svc_params -> temporal_layer ; cpi -> lst_fb_idx = svc_params -> lst_fb_idx ; cpi -> gld_fb_idx = svc_params -> gld_fb_idx ; cpi -> alt_fb_idx = svc_params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer =",0
826,"<S2SV_ModStart> ) ) ; <S2SV_ModEnd> icmpv6_param_prob ( skb <S2SV_ModStart> icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ;",0
827,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample ; uint16 samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; <S2SV_ModStart>, input_photometric ; cf = TIFFGetCopyFunc ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample, & samplesperpixel, & length ) ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> of <S2SV_blank> cp <S2SV_blank> tag <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } <S2SV_ModStart>, input_photometric ) ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint",0
828,"<S2SV_ModStart> a ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; <S2SV_ModStart> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if (! S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( 0 ) ; } a -> pst = NULL ; if (! S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a ->",0
829,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
830,"<S2SV_ModStart> unsigned int link_count ; struct buffer_head * nbh = NULL ; struct indirectEntry * ie ; <S2SV_ModStart> ibh ) { if ( ie -> indirectICB. extLength == 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart>. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n""",0
831,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi, shift_y, shift_uv ) ; const int filter_level_uv = get_filter_level_uv ( lfi_n, mbmi, shift_uv ) ; const int filter_level_y = get_filter_level_y ( lfi_n, mbmi, shift_y, shift_uv ) ; const int filter_level_uv = get_filter_level_uv ( lfi_n, mbmi, shift_uv ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16",0
832,"<S2SV_ModStart> dst_size ) { const <S2SV_ModStart> data < data_end && data < data_end <S2SV_ModStart> - 1 ; if ( data < data_end ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data < data_end ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data_end - data < 3 ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data < data_end ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data_end - data < 2 ) return - 1 ; if ( data_end - data < 2 ) return - 1 ; if (! memcmp ( data, name, namelen ) ) return - 1 ; if (! memcmp ( data, name, namelen ) ) return - 1 ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) return - 1 ; if (! memcmp ( data, name, namelen ) ) return - 1 ; if (! memcmp ( data, name, namelen ) ) return - 1 ; if (! memcmp ( data, name, namelen ) ) return - 1 ; if (! memcmp ( data, name, namelen ) ) return -",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1,0
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return swabHorDiff <S2SV_ModEnd> ( tif, <S2SV_ModStart> wc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""name"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl <S2SV_ModEnd> ; pid_t pid <S2SV_ModStart> ( s_path ) ) ; memset <S2SV_ModEnd> ( c_path, <S2SV_ModStart> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } } if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_",0
840,<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ),0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!=,0
843,"<S2SV_ModStart> OP_JUMP ) ; if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; }",0
844,"<S2SV_ModStart> if ( sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart>, o_row_count, o_column_count, o_element_count ) == 4 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count ) ) ; * o_values = 0 ; } else { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_values ) ) ; * o_column_idx_id = 0 ; }",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> STREAM s ; <S2SV_ModStart> int length ; RD_BOOL is_fastpath ; uint8 fastpath_hdr <S2SV_ModEnd> ; logger ( <S2SV_ModStart> return False ; if (! s_check_end ( s ) ) return False ; <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) return False ; <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) return False ; <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) return False ; <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) return False ; <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) return False ; <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) return False ;,0
847,<S2SV_ModStart> ; if ( server ) { if ( server -> stkt_client == NULL ) { stkt_server -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; } else { stkt_server -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; } } if ( stkt_server -> stkt_client!= NULL ) { stkt_server -> stkt_client -> stkt_client -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; } else { stkt_server -> stkt_client = NULL ; stkt_server -> stkt_client = NULL ; } } if ( stkt_server -> stkt_client!= NULL ) { stkt_server -> stkt_client -> stkt_client -> stkt_client = stkt_server ; stkt_server -> stkt_client -> stkt_client = stkt_server ; stkt_server -> stkt_,0
848,"<S2SV_ModStart> ) ) { if ( len >= MAX_XML_NAME_LEN ) { xmlParseError ( ctxt, ""Invalid <S2SV_blank> XML <S2SV_blank> name <S2SV_blank> length"" ) ; return ( NULL ) ; }",0
849,"<S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> number: <S2SV_blank> %d\\n"", __func__ ) ; return ret ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [ <S2SV_ModStart> ] == 0x3c && rdesc [ 16 ] == 0xff && rdesc [ 12 ] == 0x02,0
851,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
852,"<S2SV_ModStart> } } } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ;",0
853,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ) ; } if ( sr -> fid_ofile == NULL ) { smb2sr_put_error ( sr, SDRC_ERROR ) ; return ( SDRC_ERROR ) ; }",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> -> mode_info_context ; memset <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, 0, sizeof ( lf_mic -> mode_info_context ) ) ;",0
856,<S2SV_ModStart> = AF_TIPC ; <S2SV_ModEnd> addr -> addr.,0
857,<S2SV_ModStart> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if (,0
858,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
859,"<S2SV_ModStart> ; if ( use_ssl ) { if ( tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } tmpzval = tmpzval ; if ( tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } tmpzval = tmpzval ; if ( tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ;",0
860,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * buf <S2SV_ModEnd> ; char * <S2SV_ModStart> char * p ; const char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == buf ) { Py_DECREF ( u ) ; return NULL ; } p += 5 ; if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; } if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; } if ( * s & 0x80 ) { * p ++ = * s ++ ; } if ( p - buf <= Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u )",0
861,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function )",0
862,"<S2SV_ModStart> WaveHeader ; uint32_t <S2SV_ModEnd> bcount ; infilesize <S2SV_ModStart> bcount ; } if (! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_",0
863,"<S2SV_ModStart> ) ) { if ( debug_logging_mode ) error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
864,<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock <S2SV_ModEnd> ( & slave_active_lock,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> ; char ch <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; if ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP ( <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) ; if <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ) SCREWUP (",0
866,<S2SV_ModStart> } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && <S2SV_ModStart> ; } else if ( myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && myentity_find_ext ( target )!= NULL && myentity_find_ext ( target ),0
867,"<S2SV_ModStart> -> buffer ; if (! ctx -> valid ) return - ENOKEY ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ;",0
868,<S2SV_ModStart> goto error ; if (! ast -> sub_ctx ) { av_freep ( & pd. buf ) ; <S2SV_ModStart> goto error ; } <S2SV_ModStart> sub_ctx ) ; if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> sub_ctx ) ; if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> goto error ; } if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; <S2SV_ModStart> goto error ; } if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> sub_ctx ) ; if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> goto error ; } if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } if (! ast -> sub_ctx ->,0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; int problem = 0 ; if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( ap_version && strcmp ( inbuf. data, ap_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( ap_option && strcmp ( inbuf. data, sendauth_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
872,"<S2SV_ModStart> = 0xAA ; memset ( dptr, 0, ROSE_ADDR_LEN + ROSE_ADDR_LEN ) ; memset ( dptr, 0, ROSE_ADDR_LEN + ROSE_ADDR_LEN ) ;",0
873,<S2SV_ModStart> = new_ns ; if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( p -> mnt. mnt == new_fs -> root. mnt ) { mntget ( & q -> mnt ) ; pwdmnt = & q -> mnt. mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { mntget ( & q -> mnt ) ; pwdmnt = & q -> mnt. mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { mntget ( & q -> mnt ) ; pwdmnt = & q -> mnt ; },0
874,"<S2SV_ModStart> ; if ( vpx_calloc ( sizeof ( ENTROPY_CONTEXT_PLANES ) * oci -> mb_cols, 1 ) < 0 ) { vp8_de_alloc_frame_buffers ( oci ) ; return - ENOMEM ; }",0
875,<S2SV_ModStart> php_zip_get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; return <S2SV_ModEnd> 0 ; },0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; }",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,<S2SV_ModStart> ; * sent = 0 ; if ( n_vec == 0 ) return - EINVAL,0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ <S2SV_ModEnd> ; } <S2SV_null>,0
881,<S2SV_ModStart> FAT_ENTRY subseqEntry ; <S2SV_ModEnd> get_fat ( & <S2SV_ModStart> clusters - 1 && cluster < fs -> clusters,0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; sk_common_release ( sk ) ;,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u2_total_mbs_coded,0
885,<S2SV_ModStart> ; if ( unlikely (,0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode, int flags <S2SV_ModStart> result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { if ( flags & MS_RDONLY ) result = parse_rock_ridge_inode_internal ( de, inode, 0, flags & ~ MS_RDONLY ) ; else result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = parse_rock_ridge_inode_internal",0
887,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> fsnotify_group * inotify_new_group <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = user ; <S2SV_ModEnd> group -> inotify_data,0
888,<S2SV_ModStart> p < 4 && in -> data [ p ] && in -> linesize [ p ],0
889,<S2SV_ModStart> 1 ] ) vterm_allocator_free <S2SV_ModEnd> ( screen ->,0
890,"<S2SV_ModStart> ; if (! reg -> var_off. is_const ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off, off - reg -> off",0
891,"<S2SV_ModStart> uint16 strip, nstrips ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
892,"<S2SV_ModStart> base_name ) ; size_t <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { char * const newname = ( char * ) mm_malloc ( base_len + 1 ) ; if (! newname ) return NULL ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; return NULL ; }",0
893,<S2SV_ModStart> ( err = <S2SV_ModEnd> nanosleep ( & <S2SV_ModStart> & delay ) <S2SV_ModEnd> ; } <S2SV_null>,0
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, one ; size_t pixel_info_length = number_planes_filled * sizeof ( * pixel_info ) <S2SV_ModStart> number_planes_filled ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled >",0
896,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> = context -> PlaneBuffers <S2SV_ModEnd> ; for ( <S2SV_ModStart> ], originalSize, 0xFF <S2SV_ModEnd> ) ; else <S2SV_ModStart> < originalSize ) { if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < original",0
897,"<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; if (! is_encryption_context_consistent_with_policy ( ei, policy ) ) return - EINVAL ; if (! is_encryption_context_consistent_with_policy ( ei, policy ) ) return 0 ;",0
898,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> value ), "" <S2SV_blank> \\t,"" <S2SV_ModEnd>, NULL )",0
899,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> cmp = key_default_cmp <S2SV_ModEnd>,. match_data",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart>! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime <S2SV_ModEnd> ) { if <S2SV_ModStart> ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> ) { void * ptr ; if ( num > 0 ) { ptr = safe_calloc <S2SV_ModEnd> ( num * <S2SV_ModStart> size ) ) ; } else { memset <S2SV_ModEnd> ( ptr,",0
904,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; <S2SV_ModEnd> PyId___dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModEnd> return res ;",0
906,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_PERIOD : return perf_event_set_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_GET_ID : { u64 id ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user",0
908,<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd <S2SV_ModEnd> ; sndcnt =,0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) { pr_err ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> skcipher <S2SV_blank> with <S2SV_blank> mask <S2SV_blank> %d\\n"", __func__, name ) ; return NULL ; }",0
911,<S2SV_ModStart> ; if ( sb_count > 0 && sb_count < CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > 0 && sb_count > 0 && sb_count < CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; <S2SV_ModStart> ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; if ( sb_count > CCP_MAX_OPS ) return - EINVAL ; if ( sb_count > CCP_MAX_OPS ) return - EIN,0
912,"<S2SV_ModStart> tile_height ) { int stride = <S2SV_ModEnd> c -> tile_width <S2SV_ModStart> c -> tile_width * 3, 16 ) ; aligned_height = FFALIGN ( c -> tile_height, 16 ) ; av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; av_free ( c -> kempf_flags ) ; c -> synth_tile = av_mallocz ( stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> kempf_buf ) return AVERROR ( ENOMEM ) ; c -> kempf_flags = av_mallocz ( stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> synth_tile = av_mallocz ( stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( stride * aligned_height + FF_INPUT",0
913,<S2SV_ModStart> ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
914,"<S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE,",0
915,"<S2SV_ModStart> ; register_savevm ( <S2SV_ModEnd> dev, ""stellaris_enet""",0
916,"<S2SV_ModStart> p ) { u_int <S2SV_ModEnd> length = h <S2SV_ModStart> ) ; } ND_TCHECK_32BITS ( p, length ) ; <S2SV_ModStart> ) ; } ND_TCHECK_32BITS ( p, length ) ;",0
917,<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NO <S2SV_blank> FS ) { rc = - EBUSY ; goto out ; },0
918,<S2SV_ModStart> && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
919,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> raptor_sax2_parse_start ( rdf_xml_parser,0
920,"<S2SV_ModStart> alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
921,<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE || encJoinAcceptSize > MAX_JOIN_ACCEPT_SIZE ) { return SECURE_ELEMENT_ERROR_NPE <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_NPE ; <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_NPE ; },0
922,<S2SV_ModStart> ) ) { if (! nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_NO_DATA ; },0
923,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ;,0
924,<S2SV_ModStart> += dif ; if ( opt2 -> hopopt ) * ( ( char * * ) & opt2 -> hopopt ) += dif ; if ( opt2 -> dst0opt ) * ( ( char * * ) & opt2 -> dst0opt ) += dif ; if ( opt2 -> dst1opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> srcrt ) * ( ( char * * ) & opt2 -> srcrt ) += dif ;,0
925,"<S2SV_ModStart> ; if ( cpu_has_feature ( X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON2 ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON3 ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON2 ) ) return - ENODEV ; } else if ( cpu_has ( X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON2 ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON3 ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON2 ) ) return - ENODEV ; } else if ( cpu_has ( X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu",0
926,<S2SV_ModStart> ; int n_read <S2SV_ModEnd> = r -> <S2SV_ModStart> end - r -> begin ; if ( n_read < r -> part_size ) n_read = r -> part_size,0
927,<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time <S2SV_ModEnd> ; challenge_count =,0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * stop ) { const int t = p -> token ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; int i = 2 * p -> skip_eob_node ; if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> saved_wb ; write_compressed_header ( cpi, & wb ) ; saved_wb = wb ; uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table ( ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; unsigned int <S2SV_ModEnd> n ; quirks <S2SV_ModStart> - ENODEV ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } if ( <S2SV_ModEnd> hdesc -> bNumDescriptors <S2SV_ModStart> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
933,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> * typedata ; ND_TCHECK ( * ep ) ; <S2SV_ModStart> ( * ep <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ) ) ; ND_TCHECK ( * ep ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModEnd> idtype_len = idtype_len <S2SV_ModStart> case ID_DER_ASN1_DN : ND_PRINT ( ( ndo, "" <S2SV_blank> dndn:"" ) ) ; dumpascii = 1 ; break ; case ID_DER_ASN1_DN : ND_PRINT ( ( ndo, "" <S2SV_blank> dndn:"" ) ) ; dumpascii = 1 ; break ; case ID_",0
934,<S2SV_ModStart> group_dead ) ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
936,<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ;,0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
938,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0, xl0_0, xl1_0, xl20_0, xl21_0, x_0, x_1, x_l1_0, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_h0_0, x_h1_0, x_h1_0, x_l1_1, x_l2_0, x_h2_0 ; WORD32 xh0_0, xh1_0",0
939,<S2SV_ModStart> ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } len = data [ dp ++ ] ; if ( len <= 0x7f ) { if ( unlikely ( len <= 0x80 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ;,0
940,<S2SV_ModStart> ( flags & __GFP_ZERO <S2SV_ModEnd> ) memset (,0
941,<S2SV_ModStart> mntent ) { if (! IS_ERR ( mntent -> mnt_dir ) ) return 0 ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; }",0
943,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( value, field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,<S2SV_ModStart> ; if ( argReg < 0 || argReg >= regsz + ins_size,0
946,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ;",0
947,<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
948,"<S2SV_ModStart> endif int col_type <S2SV_ModEnd>, prepare_retval ; <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = FALSE ; imp_sth -> use_server_side_prepare = TRUE ; imp_sth -> is_async = FALSE ; imp_sth -> is_async = FALSE ; imp_sth -> use_server_side_prepare = FALSE ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { imp_sth -> use_server_side_prepare = TRUE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version"", ""HY000"" ) ; return 0 ; } <S2SV_ModStart> -> use_server_side_prepare = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side",0
949,<S2SV_ModStart> ; if ( key -> type -> destroy ) key -> type -> destroy ( key ) ; <S2SV_ModEnd> security_key_free ( key,0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 ; char * line ; char * lp <S2SV_ModStart> { need *= 4 ; lp = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if (! line ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; return ; },0
952,<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ;,0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( val < 0 ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; else strncpy <S2SV_ModEnd> ( str,",0
954,"<S2SV_ModStart> fscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, signtmp,",0
955,<S2SV_ModStart> size < 6 || size > 8 <S2SV_ModStart> size < 6 || size > 8 <S2SV_ModStart> size < 6 || size > 8 <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
956,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; return ; } <S2SV_ModEnd> if ( (",0
957,"<S2SV_ModStart> { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else jslTokenAsString ( lex -> tk, str, len )",0
958,"<S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( st. st_mode & ( S_IFREG | S_IFLNK ) == 0 ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
959,,1
960,<S2SV_ModStart> * output ; char c ; size_t i ; <S2SV_ModStart> ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 2 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 2 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 2 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 2 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc - 1 ) && i < ( ssize_t ) ( argc,0
961,<S2SV_ModStart> const si = get_svc_internal ( svc_ctx ) ; if ( si == NULL ) { return VPX_CODEC_INVALID_PARAM ; },0
962,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname (",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> atomic_dir = ""/tmp"" <S2SV_ModEnd> ; pw_init ( <S2SV_ModStart> ( fp = tempnam <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> tmpname, atomic_dir <S2SV_ModEnd> ) ) ==",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> * tree,",0
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ; gchar * to = xmpp_stanza_get_to ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get,0
967,"<S2SV_ModStart> ) ; } if ( server. rdb_filename == NULL ) { addReplyError ( c, ""dbfilename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; }",0
968,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_service_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,<S2SV_ModStart> st_v1_new_iv ) ; if ( st -> st_v1_new_iv. len == 0 ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len > st -> st_oakley. ta_decrypt_size ) { st -> st_v1_new_iv. len = st -> st_oakley. ta_decrypt_size ; } else { st -> st_v1_new_iv. len = st -> st_oakley. ta_decrypt_size <S2SV_ModEnd> ; } },0
972,<S2SV_ModStart> ps_dec ) ; if ( 0 == ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; },0
973,"<S2SV_ModStart> int x, <S2SV_ModEnd> y, i <S2SV_ModStart> ( tilemap = kcalloc <S2SV_ModEnd> ( x_size * <S2SV_ModStart> * y_size, GFP_KERNEL <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( tilemap = kcalloc <S2SV_ModEnd> ( x_size *",0
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; ND_TCHECK_16BIT ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BIT ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BIT ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BIT ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BIT ( length ) ; ND_TCHECK_16BIT ( length ) ;,0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char * <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv <S2SV_ModEnd>, img, <S2SV_ModStart> enc. encode ( ctx -> priv <S2SV_ModEnd>, img,",0
977,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModEnd> sscanf ( argv <S2SV_ModStart> + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModEnd> sscanf ( argv <S2SV_ModStart> + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ++ ; ret = <S2SV_ModEnd> sscanf ( argv <S2SV_ModStart> + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) {",0
978,<S2SV_ModStart> ; if ( chunk_num < 0 || chunk_num >= chm -> num_chunks,0
979,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( sibling, & event -> sibling_list, group_entry ) { if ( sibling -> group_leader!= leader ) return - EINVAL ; } if (! validate_event ( & fake_pmu, sibling <S2SV_ModEnd> ) ) return <S2SV_ModStart> group_entry ) { if ( sibling -> group_leader!= event ) return - EINVAL ; } if (! validate_event ( & fake_pmu, event ) ) return - EINVAL ; <S2SV_ModEnd> return 0 ;",0
980,"<S2SV_ModStart> } } when 10 : if ( term. csi_argc!= 2 ) return ; <S2SV_ModStart> ; } } when 11 : if ( term. csi_argc!= 2 ) return ; win_set_pixels ( arg1, arg2 ) ; when 12 : if ( term. csi_argc!= 1 ) return ; win_set_zorder ( false ) ;",0
981,"<S2SV_ModStart> ; if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
982,<S2SV_ModStart> int i ; if ( nsops > INT_MAX / sizeof ( * sops ) || nsops > INT_MAX / sizeof ( * sops ),0
983,<S2SV_ModStart> ] ; for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = 0 ; i < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; d [ i + 8 ] = 0 ; } for ( i = 0 ; i < cols + 8 ; i ++ ) { sum += s [ i ] * s [ i ] ; sum += s [ i ] ; sumsq += x * y ; d [ i + 8 ] = 0 ; } for ( i = 0 ;,0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> = 0 ; context. curX = i -> posX ; context. curY = i -> posY ; if (! context. curX ) { fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if (! context. curY ) { fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; return - 1 ; } if (! context. curX ) { fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if (! context. curY ) { fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if (! context. curX ) { fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING",0
986,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""cannot <S2SV_blank> allocate <S2SV_blank> empty <S2SV_blank> property <S2SV_blank> info\\n"" ) ) ; return - 1 ; }",0
987,"<S2SV_ModStart> ) ) ; if ( bytes_matched >= MAX_FAST_RE_SIZE ) { FAIL_ON_ERROR ( callback ( ERROR_INVALID_ARGS, ""re_fast_exec"" ) ) ; break ; }",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> token ) { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED",0
989,<S2SV_ModStart> mnt_instance ) ; if (! list_empty ( & mnt -> mnt_mounts ) ),0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ) ) ; if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jas_pi_lyrno ( pi )",0
992,"<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> * iinfo ; struct udf_inode_info * udf_inode = UDF_I ( inode ) ; uint32_t pos ; <S2SV_ModStart> iinfo ; iinfo = UDF_I ( inode ) ; pos = udf_block_map ( inode, 0 ) ; if (! iinfo ) goto out ; <S2SV_ModStart> 0 ; out : <S2SV_ModEnd> up_read ( & <S2SV_ModStart> iinfo -> i_data_sem ) ; <S2SV_ModEnd> SetPageError ( page <S2SV_ModStart> 0 ; out : up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
993,<S2SV_ModStart> vcpu -> arch. x2apic_base <S2SV_ModEnd> & X2APIC_ENABLE ),0
994,<S2SV_ModStart> ( ent!= NULL && <S2SV_ModEnd> * policy!= <S2SV_ModStart> * policy ) ) { if ( <S2SV_ModEnd> * policy!= <S2SV_ModStart> goto cleanup ; } <S2SV_ModEnd> ldap_msgfree ( result,0
995,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; <S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ;,0
996,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_",0
997,"<S2SV_ModStart>, ret ; d -> msg_len = min_t ( u16, d -> msg_len, CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) ; if ( d -> msg_len < 0 ) return - EINVAL ; if ( d -> msg_len > CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) return - EINVAL ;",0
998,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> _exit ( 0",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int pktnum, hr, min, sec, csec ; char channel [ 10 ], direction [ 10 ] ; if ( num_items_scanned!= 7 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> record <S2SV_blank> header <S2SV_blank> isn\'t <S2SV_blank> valid"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""%9d] <S2SV_blank> %2d:%2d.%9d <S2SV_blank> %9s <S2SV_blank> %9s"", & pktnum, & hr, & min, & sec, & csec, channel, direction ) ; if ( num_items_scanned!= 7 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_",0
1002,<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0,0
1003,<S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> key,0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags |= PIPE_BUF_FLAG_GIFT ; <S2SV_ModStart> } else { * obuf = * obuf ; obuf -> flags |= PIPE_BUF_FLAG_NONBLOCK ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; obuf -> len = len ; ret += obuf -> len ;,0
1006,"<S2SV_ModStart> -> tokenlen ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( p -> tokenbuf ) ; }",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; } },0
1008,<S2SV_ModStart> | IFF_POINTOPOINT ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> -> codecpar ) ; if (! st -> codecpar ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> -> codecpar ) ; if (! st -> codecpar -> codec_tag ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> -> codecpar ) ; if (! st -> codecpar -> codec_tag ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> -> codecpar ) ; if (! st -> codecpar -> codec_tag ) return AVERROR_INVALIDDATA ;,0
1010,<S2SV_ModStart> ) ) { if ( comp -> dx == 0 || comp -> dy == 0 ) { return OPJ_FALSE ; } <S2SV_ModStart> ) ) { if ( comp -> dx == 0 || comp -> dy == 0 ) { return OPJ_FALSE ; } <S2SV_ModStart> ) ) { if ( comp -> dx == 0 || comp -> dy == 0 ) { return OPJ_FALSE ; },0
1011,"<S2SV_ModStart> send_pa ) ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, mod",0
1012,"<S2SV_ModStart> if ( CheckQuantumMemoryOverflow <S2SV_ModEnd> ( count,",0
1013,"<S2SV_ModStart> -> stratum_port ; stratum_port = strchr ( url, ':' ) ; if (! stratum_port ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } stratum_port = strchr ( url, ':' ) ; if (! stratum_port ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } stratum_port = strchr ( stratum_port, ':' ) ; if (! stratum_port ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", stratum_port ) ; return false ; }",0
1014,"<S2SV_ModStart> ; if ( max_submaps < 0 || max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ;",0
1015,<S2SV_ModStart> return 0 ; if ( head -> iov_len + hdr > XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1016,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; mutex_lock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> - EINVAL ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ;,0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < 0 || input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! vb ) { dev_dbg ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> saf",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1019,<S2SV_ModStart> ssize_t count ; if ( items > SENSIBLE_SIZE ) items = SENSIBLE_SIZE,0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> in <S2SV_blank> ADHOC_S_CMD\\n"", __func__ ) ; return - 1 ; } <S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> in <S2SV_blank> ADHOC_S_CMD\\n"", __func__ ) ; return - 1 ; }",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp -> i_mount, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp -> i_mountp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO ) ) ) ), XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, EIO ) ) ) ) ; } else { xfs_trans_log_inode ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, ) ) ) ) ) ; }",0
1023,<S2SV_ModStart> r ) { if (! a ) return 0 ; return ( ASN1_item_verify <S2SV_ModEnd> ( ASN1_ITEM_rptr (,0
1024,<S2SV_ModStart> stime -> hrt ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1025,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc = {. mode = L2CAP_MODE_BASIC,. <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; case L2",0
1026,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) )",0
1027,<S2SV_ModStart> = 0 ; if ( s -> line_count >= MAX_URL_SIZE ) return - 1 ;,0
1028,<S2SV_ModStart> u4_length ) { if ( ps_dec -> u4_slice_start_code_found == 0 ) { i_status = ERROR_INCOMPLETE_FRAME ; } else { i_status = ERROR_INCOMPLETE_FRAME ; },0
1029,"<S2SV_ModStart> tok ) ; if ( pair == 0 ) { mprAddItem ( app -> formData, NULL ) ; return ; }",0
1030,"<S2SV_ModStart> } err = crypto_rng_setseed <S2SV_ModEnd> ( tfm,",0
1031,"<S2SV_ModStart> = uid ; if (! atomic_inc_not_zero ( & ucounts -> count ) ) { atomic_set ( & ucounts -> count, 1 ) ; ucounts = new ; } } else if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ;",0
1032,<S2SV_ModStart> msg_sys ) ; if ( msg_sys. msg_namelen == 0 ) { err = - EINVAL ; break ; } <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> msg_sys ) ; if ( msg_sys. msg_namelen == 0 ) { err = - EINVAL ; break ; } <S2SV_ModEnd> msg_sys. msg_namelen,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> i ; for ( ; i < len / 8 ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1035,"<S2SV_ModStart> ) ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; }",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode |= ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ; rcu_read_lock ( <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; }",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart> int64_t * out_rate_sum <S2SV_ModEnd>, int64_t * <S2SV_ModStart> int64_t * out_dist_sum <S2SV_ModEnd> ) { int <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int64_t quantizer ; if ( pd -> dequant [ 1 ] >> 3 ) rate = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >> 3 ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer ; if ( pd -> dequant [ 1 ] >> 3 ) rate = ( sse * pd -> dequant [ 1 ] >> 3 ) ; else rate = 0 ; dist = ( sse * pd -> dequant [ 1 ] >>",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge <S2SV_ModEnd> ( pmd ),0
1042,"<S2SV_ModStart> ) ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_number > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""bad <S2SV_blank> packet!"" ) ) ; return ; } if (",0
1043,<S2SV_ModStart>!= '\\0' ) { <S2SV_ModStart> =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( (,0
1044,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_segment_id ( vpx_reader <S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,<S2SV_ModStart> uint32_t backup_handle ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> struct desc_struct * desc <S2SV_ModEnd> ; # ifdef <S2SV_ModStart> == SEGMENT_LDT ) { <S2SV_ModEnd> struct ldt_struct * <S2SV_ModStart> ldt = current -> active_mm -> context. ldt ; if (! ldt ) { mutex_lock ( & current -> active_mm -> context. lock ) ; return NULL ; } <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart>. lock ) ; desc = & gdt_desc. entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; <S2SV_ModStart> ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> -> nr_entries ) { <S2SV_ModEnd> desc = & <S2SV_ModStart> -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return NULL ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> ( desc_base > <S2SV_ModEnd> gdt_desc. size <S2SV_ModStart>. size ) { mutex_unlock ( & current -> active_mm -> context. lock ) ; return NULL ; } <S2SV_ModEnd> # endif native_store_gdt,0
1047,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1048,"<S2SV_ModStart> struct sctp_sockaddr_entry * laddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen <S2SV_ModEnd> ; __u8 bmatchlen <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! dst ) { pr_debug ( ""%s: <S2SV_blank> dst=%pI6 <S2SV_blank> "", __func__, & fl6 -> daddr ) ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2 = smb_fdata2 <S2SV_ModEnd> ( ndo,",0
1051,<S2SV_ModStart> -> protocol_timeout ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; },0
1052,<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST,0
1053,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } <S2SV_ModEnd> return NO_ERROR ;",0
1054,"<S2SV_ModStart> NULL ) ; if (! RTEST ( rb_get_cipher_state ( ctx ) ) ) ossl_raise ( eCipherError, ""Cipher <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ;",0
1055,"<S2SV_ModStart> -> dead_leaf ; if (! edit -> leaf_p ) { pr_devel ( ""insert <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return false ; }",0
1056,<S2SV_ModStart> ; settings. <S2SV_ModEnd> udpport = 11211 <S2SV_ModStart> udpport = 11211 <S2SV_ModEnd> ; settings. <S2SV_ModStart> = 11211 ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer_password = NULL ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer,0
1057,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( domains_to_finalize,0
1058,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15, x_16, x_19, x_20, x_21, n31 ; WORD32 n00, n10, n20, n01, n10, n11, n21, n31 ; WORD32 n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n03, n13, n23, n33 ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n11 = x_0 - x_2 ; n12 = x_1 - x_3 ; n12 = x_4 + x_6 ; n11 = x_5 + x_7 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n23 = x_6 + x_7 ; n33 = x_",0
1059,<S2SV_ModStart> clips_ptr ) { if (! clips ) { ret = - ENOMEM ; goto out_err1 ; },0
1060,<S2SV_ModStart> ; if ( pmd_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd_none_or_clear_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_clear_bad ( pmd,0
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> ) ) { if ( i == len ) { r_cons_printf ( ""\\n\\n"" ) ; break ; } <S2SV_ModStart> ) ) { if ( i == len ) { r_cons_printf ( ""\\n\\n"" ) ; break ; } <S2SV_ModStart> ) ) { if ( i == len ) { r_cons_printf ( ""\\n\\n"" ) ; break ; } <S2SV_ModStart> ) ) { r_cons_printf ( ""\\n\\n"" ) ; break ; } if ( i == len ) { r_cons_printf ( ""\\n\\n"" ) ; break ; }",0
1063,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ;",0
1064,<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; if ( <S2SV_ModEnd> readw ( chip <S2SV_ModStart> + JQS_wHead ) >= <S2SV_ModEnd> chip -> DSPQ <S2SV_ModStart> + JQS_wHead ) >= <S2SV_ModEnd> chip -> DSPQ <S2SV_ModStart> + JQS_wHead ) ) break ; <S2SV_ModEnd> wTmp = readw <S2SV_ModStart> + JQS_wHead ) ; <S2SV_ModEnd> writew ( wTmp,0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc <S2SV_ModEnd> ; ut16 ins,0
1066,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> union acpi_operand_object * next ; struct acpi_namespace_node * ns_node = acpi_gbl_root_node ; struct acpi_namespace_node * root_node = acpi_gbl_root_node ; struct acpi_namespace_node * root_node = acpi_gbl_root_node ; struct acpi_namespace_node * prev = acpi_gbl_module_code_list ; while ( root_node ) { root_node = next ; next = root_node -> method. mutex ; prev -> method. mutex = NULL ; } next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; next = next -> method. mutex ; prev -> method. mutex = NULL ; } next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; } next = acpi_gbl_module_code_list ; while ( next ) { prev = next -> method.,0
1067,<S2SV_ModStart> = GF_FALSE ; # if defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC,0
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_mr_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> enc ) { priv = calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = priv ; } if ( ctx -> config. enc ) { ctx -> priv -> enc = * ctx -> config. enc ; } else { ctx -> priv = & priv -> base ; } ctx -> priv -> sz = sizeof ( * priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc (",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; <S2SV_ModStart> bp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, XFS_ERROR ( EIO ) ) ; xfs_trans_log_in",0
1071,"<S2SV_ModStart> ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = 0 ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 4 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ;",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested <S2SV_ModEnd> ( sock, <S2SV_ModStart>, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! attrs [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } else { tsk_portid = nla_get_u32 ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; } else { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0,0
1074,<S2SV_ModStart> = v ; if <S2SV_ModEnd> ( priv ->,0
1075,<S2SV_ModStart> -> bLength ; if ( total_len < length ) break ;,0
1076,"<S2SV_ModStart> ) ) { struct task_struct * task = current ; file_sb_list_del ( file ) ; if ( likely ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; }",0
1077,<S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ; <S2SV_ModStart> i_location = lelb_to_cpu ( ie -> <S2SV_ModEnd> extLocation ) ;,0
1078,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; while ( * ptr!= '\\0' ) if ( * ptr ++!= '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if (,0
1080,<S2SV_ModStart> sk_forward_alloc ) ; <S2SV_ModEnd> dst_release ( rcu_dereference_check,0
1081,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { goto invalid ; } break ; } c -= '0' ; if ( result > INT_MAX / 10 ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } } else { result += c ; } bp ++ ; len -- ; saw_digit = 1 ; } } } if (! saw_digit ) { goto invalid ; } break ; } <S2SV_ModEnd> } c -= <S2SV_ModStart> '9' ) { if ( result > INT_MAX / 10 ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) {,0
1082,"<S2SV_ModStart> ( args -> op_flags & XFS_DA_OP_OKNOENT ) { xfs_trans_log_buf ( args -> dp -> i_mount -> m_sb, XFS_ERROR ( EIO ) ) ; return XFS_ERROR ( EIO ) ; } if ( args -> op_flags & XFS_DA_OP_OKNOENT ) { xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( EIO ) ) ; return XFS_ERROR ( EIO ) ; }",0
1083,"<S2SV_ModStart> ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV",0
1084,<S2SV_ModStart> if ( object_data && object_length,0
1085,"<S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""version"", sz, 0 ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; }",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) goto err ; if ( name_end < 0 ) name_end = j ; j += label_len ; if ( ptr_count > length ) return - 1 ; if ( name_end >= length ) return - 1 ; if ( name_end >= length ) return - 1 ; if ( name_end >= length ) return - 1 ; if ( ptr_count > length ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len <S2SV_ModEnd> ; j += <S2SV_ModStart> - 1 ; if ( ptr_count > length ) return - 1 ; if ( name_end >= length ) return - 1 ; if ( name_end >= length ) return - 1 ; if ( name_end >= length ) return - 1 ; if ( ptr_count > length ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len <S2SV_ModEnd> ; j +=",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % ( bps <S2SV_ModEnd> * stride ) <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> cc <S2SV_blank> %(bps*stride) <S2SV_blank>!=0"", __func__ ) ; <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> cc <S2SV_blank>!=0"", __func__ ) ; return - 1 ; } <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> cc <S2SV_blank> %(bps*stride)!= 0 ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> cc <S2SV_blank> %(bps*stride) <S2SV_blank>!=0"", __func__ ) ; return - 1 ; } <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> cc <S2SV_blank>!=0"", __func__ ) ; return - 1 ; } <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> cc <S2SV_blank> %(b",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags, entry ) ; if ( unlikely ( pmd_none ( * pmd ) ) ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; if ( unlikely ( pmd_none ( * pmd ) ) ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags, entry ) ; if ( pmd_none ( * pmd ) ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; if ( unlikely (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { if (! pte_write ( entry ) )",0
1090,"<S2SV_ModStart> s ) { size_t len = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, s, len <S2SV_ModEnd> ) ; return",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,<S2SV_ModStart> -> nr_extents ++ ; if ( new_map. nr_extents >= sizeof ( new_map. extent ) ) { ret = - ENOMEM ; goto out ; },0
1093,<S2SV_ModStart> -> attr_values [ i <S2SV_ModEnd> ] ) ; <S2SV_ModStart> -> attr_values [ i <S2SV_ModEnd> ] ) ;,0
1094,"<S2SV_ModStart> p_output_chain ) ; if (! p_output_chain ) { msg_Err ( p_enc, ""No <S2SV_blank> output <S2SV_blank> chain <S2SV_blank> for <S2SV_blank> this <S2SV_blank> picture"" ) ; return NULL ; }",0
1095,"<S2SV_ModStart> bfname ) ; if (! bfname. len ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; break ; }",0
1096,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; ND_TCHECK_32BITS ( ip6 ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6 ) ; ND_TCHECK_32BITS ( ip6 ) ; ND_TCHECK_32BITS ( ip6 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( ip6,0
1097,"<S2SV_ModStart> 4 ) ; size_t num_properties ; CHECKINT32 ( idx, len ) ; num_properties = GETINT32 ( buf + idx ) ; idx += 4 ;",0
1098,"<S2SV_ModStart> mmap_sem ) ; prev = vma = find_vma_next ( mm, start, & vma_end ) ; if (! vma ) goto out_unlock ;",0
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_parallel_decode ) { yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_OK ; } else { <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> * fb ; } <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ;",0
1102,"<S2SV_ModStart> ctxt ) ; if ( ops -> get_msr ( ctxt, MSR_EFER, & efer )!= efer ) return - EINVAL ; <S2SV_ModStart> efer ) ; if ( ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> regs [ VCPU_REGS_RCX ] = ctxt -> _eip",0
1103,"<S2SV_ModStart> ; if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( i >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 1 ) ) ) { case testlist : e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( ch, 2 ) ) { case Name_kind : case Attribute_kind : expr2 = ast_for_expr ( c, ch ) ; break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * running_avg_y, int running_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride ) { unsigned char * mc_running_avg_y = mc_running_avg_y <S2SV_ModEnd> ; int mc_avg_y_stride <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6, 7, 8, 15 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] ; int",0
1106,"<S2SV_ModStart> ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" <S2SV_ModEnd> ) ; }",0
1107,"<S2SV_ModStart> ; int ret ; ret = security_ptrace_setxregs ( child, uregs ) ; if ( ret ) return - EFAULT",0
1108,<S2SV_ModStart> -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. switchPort ; message ->,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> struct se_device * <S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> -> dst_dev ; } else { <S2SV_ModStart> -> src_dev ; } <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - EINVAL ; goto close_sock ; }",0
1111,<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; new_bh = NULL ; get_bh ( new_bh ) ;,0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ;",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> inode -> i_ctime <S2SV_ModStart> inode -> i_ctime <S2SV_ModEnd> ) mark_inode_dirty",0
1115,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1116,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1117,<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3,0
1118,"<S2SV_ModStart> SUCCESS ) { long x ; long y ; <S2SV_ModStart> var ) ; x = Z_LVAL_PP ( var ) ; points [ i ]. y = Z_LVAL_PP ( var ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> SUCCESS ) { <S2SV_ModEnd> convert_to_long ( * <S2SV_ModStart> var ) ; y = Z_LVAL_PP ( var ) ; points [ i ]. z = Z_LVAL_PP ( var ) ; } if ( <S2SV_ModStart> SUCCESS ) { <S2SV_ModEnd> convert_to_long ( * <S2SV_ModStart> var ) ; <S2SV_ModEnd> points [ i <S2SV_ModStart> i ]. z = Z_LVAL_PP ( var ) ; points [ i ]. y = Z_LVAL_PP ( var ) ; } if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var ) == SUCCESS ) { convert_to_long ( * var ) ; points [ i ]. x = Z_LVAL_PP ( var ) ; } if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var",0
1119,<S2SV_ModStart> -> it_sigev_notify & SIGEV_THREAD_ID <S2SV_ModEnd> ) == SIGEV_NONE,0
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ;",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) { vpx_ref_frame_t * const frame = va_arg ( args, vpx_ref_frame_t * ) ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( frame_worker_data ) { vpx_ref_frame_t * const frame_worker_data = ( vpx_ref_frame_t * ) frame_worker_data <S2SV_ModEnd> ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> & sd ) ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; YV12_BUFFER_CONFIG sd ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data",0
1122,"<S2SV_ModStart>. path ; int err ; err = curl_easy_unescape <S2SV_ModEnd> ( data, <S2SV_ModStart>, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; pop3c -> mailbox = NULL ; } if (! pop3c -> mailbox ) { err = curl_easy_unescape ( data, path, 0, NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; return CURLE_OK ; }",0
1123,<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0,0
1124,<S2SV_ModStart> first_slice_in_pic_flag = get_bits0 <S2SV_ModEnd> ( gb ),0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> ps_dec -> u2_total_mbs_coded,0
1126,"<S2SV_ModStart>, u4_y_offset ; if ( ps_dec -> e_pic_type == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModStart> ps_dec ) ; }",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VPxWorker * const worker = cm -> worker ; <S2SV_ModStart> YV12_BUFFER_CONFIG * const cfg = & worker -> frame_bufs [ cm -> ref_frame_map [ 0 ] <S2SV_ModEnd> ]. buf <S2SV_ModStart> ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ;",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( plane, pd ) ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> pd -> subsampling_x ) ; if ( xd -> mb_to_bottom_edge >> pd -> subsampling_y ) ) max_blocks_high += ( xd -> mb_to_bottom_edge >> pd -> subsampling_y ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> pd -> subsampling_x ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_",0
1130,<S2SV_ModStart> ( ) ; if ( mmap_is_legacy ( ) ) { mm -> mmap_base = mmap_legacy_base ( random_factor ) ; } else { mm -> mmap_base = mmap_base ( random_factor ) ; },0
1131,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1132,"<S2SV_ModStart> case 'c' : return getnum <S2SV_ModEnd> ( L, <S2SV_ModStart> sizeof ( int ) ) <S2SV_ModEnd> ; case 'i' <S2SV_ModStart> 'I' : { size_t sz = getnum <S2SV_ModEnd> ( L,",0
1133,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip,0
1134,<S2SV_ModStart> } } } if ( NCH ( n ) < 2 ) { Py_FatalError ( buf ) ; },0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1136,<S2SV_ModStart> upid == - 1 || upid == 0,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ) { if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << number ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1139,"<S2SV_ModStart> [ plane ] ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int y ; for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; struct dm_dev * bd = lc -> bd -> bd_dev ; return dm_dev_driver_ioctl ( bd <S2SV_ModEnd> -> bdev, <S2SV_ModStart>, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
1142,"<S2SV_ModStart> ) ) ; if ( actx -> tag_len!= 0 ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LENGTH_ERROR ) ; return 0 ; }",0
1143,"<S2SV_ModStart>. size, 0 <S2SV_ModEnd> ) ; if",0
1144,"<S2SV_ModStart> fp ) ; if (! safe_mkdir ( RUN_LIB_FILE ) ) errExit ( ""mkdir"" ) ;",0
1145,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart> sk ) ; memset ( sa, 0, sizeof ( * sa ) )",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch )",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SIGN <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc",0
1151,<S2SV_ModStart> <= 0 || <S2SV_ModEnd> g -> head <S2SV_ModStart> -> head <= 0 || <S2SV_ModEnd> g -> track,0
1152,"<S2SV_ModStart> line ) ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else if ( strncmp ( line, ""{\\""class\\"":\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> * slavename ; int len ; <S2SV_ModStart> = 0 ; len = strlen ( curconn -> username ) ; <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, len ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( len < 17 ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; <S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ( name, ""__debug__"" <S2SV_ModEnd> ) == 0",0
1157,"<S2SV_ModStart> out_unmap : bio_for_each_segment_all <S2SV_ModEnd> ( bio,",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart>, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ;",0
1160,<S2SV_ModStart> ; i < <S2SV_ModEnd> sizeof ( buf <S2SV_ModStart> ++ ) { if ( i >= sizeof ( buf ) ) { return - 1 ; },0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> + RDS_CONG_MAP_BYTES ; if ( off < sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; if ( off < sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; },0
1163,"<S2SV_ModStart> -> base = devm_ioremap_nocache <S2SV_ModEnd> ( & pdev <S2SV_ModStart> -> base, <S2SV_ModEnd> resource_size ( r",0
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1166,"<S2SV_ModStart> ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr, res <S2SV_ModEnd> ) ; if",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""BADOPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if (! isflagset ( t2enc -> flags, TKT_FLG_SUPPORT ) ) { * status = ""EVIDENCE_TKT_SUPPORT"" ; return KRB5_TKT_SUPPORT ; } if (! isflagset ( t2enc -> flags, TKT_FLG_SUPPORT ) ) { * status = ""EVIDENCE_TKT_SUPPORT"" ; return KRB5_TKT_SUPPORT ; } if (! isflagset ( t2enc -> flags, TKT_FLG_SUPPORT ) ) { * status = ""EVIDENCE_TKT_SUPPORT"" ; return KRB5_TKT_SUPPORT ; } if (! isflagset ( t2enc -> flags, TKT_FLG_SUPPORT ) { * status = ""EVIDENCE_TKT_SUPPORT"" ; return KRB5_TKT_SUPPORT ;",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModStart> ARM_r3 ; } <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1170,"<S2SV_ModStart> { jas_stream_t * stream <S2SV_ModEnd> ; jas_stream_memobj_t * <S2SV_ModStart> ) ) ; stream = jas_stream_create ( ) ; if (! stream ) { jas_dbglog ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ; obj -> myalloc_ = 1 ; } if ( bufsize <= 0 ) { obj -> bufsize_ = 1024 ; obj -> growable_ = 1 ; } else { obj -> bufsize_ = bufsize ; obj -> growable_ = 0 ; } if ( buf ) { obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ = 1 ; } if (! obj -> buf_ ) { jas",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> sshkey * key <S2SV_ModEnd> ; char * <S2SV_ModStart> ; char * userstyle <S2SV_ModEnd> = NULL ; <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> ; u_char * sig, have_sig ; size_t blen, slen ; int r, pktype ; int authenticated = 0 ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u",0
1172,"<S2SV_ModStart> uint32_t bcount ; int64_t samples_per_sample = 0 ; int64_t samples_per_sample = 0 <S2SV_ModEnd> ; infilesize = <S2SV_ModStart> ; if ( samples_per_sample > WAVPACK_MAX_SAMPLE_COUNT ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart>. ckSize && chunk_header. ckSize > WAVPACK_MAX_SAMPLE_COUNT ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart>. ckSize && chunk_header. ckSize > WAVPACK_MAX_SAMPLE_COUNT ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart>. ckSize && chunk_header. ckSize > WAVPACK_MAX_SAMPLE_COUNT ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank>",0
1173,"<S2SV_ModStart> mech ) ) { _sx_debug ( ZONE, ""client <S2SV_blank> requested <S2SV_blank> mechanism <S2SV_blank> (%s) <S2SV_blank> that <S2SV_blank> we <S2SV_blank> didn\'t <S2SV_blank> offer"", mech ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_INVALID_MECHANISM, NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
1176,"<S2SV_ModStart> ; if ( db_count < 0 ) { ext2_msg ( sb, KERN_ERR, ""blockgroup <S2SV_blank> too <S2SV_blank> large"" ) ; goto failed_sbi ; } if ( db_count > EXT2_MAX_DB_ENTRIES ) { ext2_msg ( sb, KERN_ERR, ""blockgroup <S2SV_blank> too <S2SV_blank> large"" ) ; goto failed_sbi ; }",0
1177,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY,0
1178,"<S2SV_ModStart> * 4 ; if ( tcp_hdrlen + tcph -> doff > skb -> len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; }",0
1179,"<S2SV_ModStart> * matrix ; size_t datasize ; <S2SV_ModStart> return 0 ; datasize = numrows * numcols ; if ( datasize < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = numrows ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numrows ; if ( matrix -> datasize_ < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < numrows ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i",0
1180,<S2SV_ModStart> ; if ( hlen < 0 || hlen >= IP6_MAX_FRAG_HDR_LEN || hlen >= IP6_MAX_FRAG_HDR_LEN || hlen >= IP6_MAX_FRAG_HDR_LEN,0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_req * r ; if (! qemu_blockalign_check ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL <S2SV_ModEnd> ; r = <S2SV_ModStart>, req ) ; if (! qemu_blockalign_check ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ;",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> ; nxip = pq_getmsgint ( buf, 4 ) ; avail = buf -> len - buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax == 0 || xmax > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur >= xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header.,0
1184,<S2SV_ModStart> || cm_id -> device,0
1185,<S2SV_ModStart> ) ; struct xfrm_dump_info <S2SV_ModEnd> info ; struct <S2SV_ModStart> 1 ] ; struct xfrm_dump_info info <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = cb <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> info. in_skb <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = cb <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> xfrm_policy_walk_init ( walk,0
1186,<S2SV_ModStart> = - 1 ; struct file * file = _cast_file ( epoll_ ) ; <S2SV_ModStart> = 0 ; if (! file ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> -> d_inode ; <S2SV_ModEnd> int err ; <S2SV_ModStart> = - ESTALE ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; dput ( upper ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL",0
1189,<S2SV_ModStart> &&! ( nmemb || size ),0
1190,<S2SV_ModStart> name == MAPI_BODY_HTML || <S2SV_ModEnd> a -> name <S2SV_ModStart> == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; } else if ( a -> name == MAPI_BODY_RAW ) { body. rtf_bodies = get_rtf_data ( a ) ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; } else if ( a -> name == MAPI_BODY_,0
1191,<S2SV_ModStart> 0 ; default : return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"" <S2SV_ModEnd>, box ->",0
1193,,1
1194,<S2SV_ModStart> * journal = EXT4_JOURNAL ( page_file_mapping ( page ) -> host ) ; if (! try_to_release_page ( page ) ) { ClearPageChecked ( page ) ; return ; } <S2SV_ModEnd> if ( offset,0
1195,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; if (! trak ) return GF_OUT_OF_MEM ; writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data +",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * baseDir = Cvar_VariableString ( ""fs_basepath"" ) ; char libPath [ MAX_OSPATH ] ; char * basePath = Cvar_VariableString ( ""fs_basepath"" ) ; if (! baseDir ||! * baseDir ) baseDir = ""."" ; if ( FS_FilenameCompare ( baseDir, baseDir ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", baseDir, PATH_SEP, name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; }",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> 0xfffffe00UL ) # define PCDGetBits <S2SV_ModEnd> ( n ) <S2SV_ModStart> n ) { if ( bits <= 24 ) { if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } else if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } else if ( p >= buffer + 0x800 ) { count = AcquireQuantumMemory ( 0x800, buffer ) ; }",0
1201,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; else i += 1 ;",0
1202,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1203,"<S2SV_ModStart> HAVE_IPV6 char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { p = memchr ( str + 1, ']', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; host = estrndup ( str + 1, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return host ; <S2SV_ModStart> colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return host ;",0
1204,"<S2SV_ModStart> -> y_buffer ; const int rows = src_ybc -> y_height ; const int cols = src_ybc -> y_height ; const int rows_per_row = src_ybc -> y_height ; const int rows_per_row = src_ybc -> y_height ; for ( row = 0 ; row < rows_per_row ; ++ row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( src,",0
1205,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( c -> cblk_style!= 0 ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; }",0
1206,<S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ( '%' == ( unsigned char ),0
1207,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> x -> mb_index ) for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> mb_index = 0 ; x -> mb_index < 4 ; ++ x -> mb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x -> mb_index ) for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> mb_index ) for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++,0
1208,"<S2SV_ModStart> ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; ND_TCHECK ( * lmp_obj_header ) ; lmp_obj_hdr = ( const struct lmp_object_header * ) pptr ; lmp_obj_hdr = ( const struct lmp_object_header * ) pptr ; lmp_obj_hdr = ( const struct lmp_object_header * ) pptr ; ND_TCHECK ( * lmp_obj_hdr ) ; ND_TCHECK ( * lmp_obj_hdr ) ; obj_tlen = EXTRACT_16BITS ( lmp_obj_hdr -> length ) ; obj_tlen = EXTRACT_16BITS ( lmp_obj_hdr -> length ) ; if ( obj_tlen!= lmp_obj_len ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> object <S2SV_blank> length"" ) ) ; return ; } <S2SV_ModStart> obj_tlen ) ; if ( obj_tlen!= lmp_obj_len ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank>",0
1209,"<S2SV_ModStart> const MB_MODE_INFO * mbmi <S2SV_ModEnd>, nmv_context_counts *",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,<S2SV_ModStart> ) ; if ( skb_out -> len + skb -> len > size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; },0
1212,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ;,0
1213,<S2SV_ModStart> &&! capable <S2SV_ModEnd> ( CAP_SYS_ADMIN ),0
1214,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface\\n"" ) ; return - ENODEV ; }",0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> return ; netsnmp_init_mib_internals ( ) ; netsnmp_init_mib_internals ( ) ; <S2SV_ModEnd> entry = strtok_r <S2SV_ModStart> entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = NULL ; env_var = strdup ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR,",0
1217,"<S2SV_ModStart> ; struct list_head <S2SV_ModEnd> tmplist ; newsk <S2SV_ModStart> sk_rcvbuf ; if ( newsk -> sk_state == SCTP_SS_ESTABLISHED ) { list_add_tail ( & tmplist, & newsk -> sk_receive_queue ) ; newsk -> sk_state = SCTP_SS_ESTABLISHED ; } else { memcpy ( & tmplist, & newsk -> sk_receive_queue ) ; } sctp_skb_for_each ( skb, & newsk -> sk_receive_queue, tmp ) { sctp_ulpevent_free ( event ) ; sctp_ulpevent_free ( event ) ; } sctp_skb_for_each ( skb, & assoc -> reasm_receive_queue, tmp ) { sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb, & assoc -> reasm_receive_queue, tmp ) { sctp_ulpevent_free ( event ) ; sctp_ulpevent_free ( event ) ; } sctp_skb_for_each ( skb",0
1218,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ; TEMP_FAILURE_RETRY (",0
1219,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 16 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * )",0
1225,<S2SV_ModStart> START_CODE_PREFIX_LEN )!= START_CODE_PREFIX <S2SV_ModEnd> ) { impeg2d_bit_stream_flush,0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
1227,<S2SV_ModStart> imethod ) ; if (! method -> is_inflated ) { mono_reflection_method_unbind ( rmethod ) ; return NULL ; },0
1228,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> is_path ) { const char * repl ; size_t len ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? l -> l_origin : _dl_platform ; if (",0
1232,"<S2SV_ModStart> } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> -> opt_name ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; if (",0
1234,<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if (! iph ) goto inhdr_error ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> opt -> optlen,0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> rt = rcu_dereference_protected <S2SV_ModStart> ) ; } rcu_read_lock ( ) ;,0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1239,"<S2SV_ModStart> break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
1240,"<S2SV_ModStart> ; krb5_key_data * key_data = NULL ; if ( key_data_in == NULL ) goto cleanup ; <S2SV_ModStart> & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ;",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> ] ) ; if ( nByte > INT64_MAX ) { rc = SQLITE_OVERFLOW ; } else if ( nByte > INT64_MAX ) { rc = SQLITE_OVERFLOW ; },0
1243,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_ADMIN ) ) return - EPERM,0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> mi_check_print_error ( param, ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, name )",0
1246,"<S2SV_ModStart> } } return opt? xchg ( & inet6_sk ( sk ) -> opt, opt ) : NULL",0
1247,"<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; }",0
1248,"<S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return """,0
1249,<S2SV_ModStart> UINT error ; if ( Stream_GetRemainingLength ( s ) < 4 ) return CHANNEL_RC_INVALID_DATA ; <S2SV_ModStart> pduLength ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return CHANNEL_RC_INVALID_DATA,0
1250,"<S2SV_ModStart> ) ; } if ( pData -> socket -> state == ZSOCKET_DISCONNECTED ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_disconnected <S2SV_blank> for <S2SV_blank> %s"", pData -> description ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1251,"<S2SV_ModStart> return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC <S2SV_ModEnd> ; ret = <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma,",0
1252,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModEnd> ; struct flowi6 <S2SV_ModStart>. daddr ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> SCTP_MIB_OUTSCTPPACKS ) ; if (! opt ) return - EINVAL ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart>, & fl6, opt <S2SV_ModEnd>, np -> <S2SV_ModStart>, np -> opt, np -> tclass ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
1257,"<S2SV_ModStart> int ret, <S2SV_ModEnd> last_pwd ; krb5_boolean",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ) ) { result = RLC_ERR <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = RLC_ERR <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = RLC_ERR <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> { result = RLC_ERR <S2SV_ModEnd> ; } do <S2SV_ModStart> 8 ) ; } while ( m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; if (! bn_is_zero ( t ) ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_",0
1259,<S2SV_ModStart> ; if (! is_undef ( r2 ) ) mem [ r1. i ] += r2. i ; <S2SV_ModStart> ; if (! is_undef ( r3 ) ) mem [ r1. i ] += r3. i ; <S2SV_ModStart> ; if (! is_undef ( r2 ) ) mem [ r1. i ],0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( hctx ->,0
1262,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j,0
1264,<S2SV_ModStart> { token ++ ; } if (! token ) { return false ; },0
1265,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; VP9_COMMON <S2SV_ModStart> -> mi_cols ) ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> <S2SV_ModEnd> e_mbd, cm <S2SV_ModStart> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
1266,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } return ( retval ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1267,<S2SV_ModStart> EOFOp 0x07 char * buf <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; buf <S2SV_ModEnd> = ReadBlob ( <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> columns = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> columns = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> columns = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> columns = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLSBShort ( image ) ; buf <S2SV_ModEnd> -> rows = <S2SV_ModStart> ReadBlobLS,0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; mutex_lock ( & snd_card_mutex ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; }",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 < sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,"<S2SV_ModStart> len ) ; BTIF_TRACE_DEBUG ( ""ret:%d"", ret",0
1271,<S2SV_ModStart> -> u2_frame_num ; ps_dec -> u2_first_slice_in_pic = 0 ; ps_dec -> u2_last_slice_in_pic = 0 ;,0
1272,<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; item = NULL ; if ( item == NULL ) { OPENSSL_free ( rdata ) ; pitem_free ( item ) ; return ( 0 ) ; } <S2SV_ModStart> item ) ; if ( item == NULL ) { OPENSSL_free ( rdata ) ; pitem_free ( item ) ; return ( 0 ) ; } <S2SV_ModStart> ) ; return ( 1 ) <S2SV_ModEnd> ; } <S2SV_null>,0
1273,"<S2SV_ModStart> int ret ; struct drm_i915_gem_exec_object2 * exec2 ; if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2 = kcalloc ( args -> buffer_count, sizeof ( * exec2 ), GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2 ) { ret = - EFAULT ; DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)\\n"", args -> buffer_count, ret ) ; drm_free_large ( exec2_list ) ; return ret ; } exec2 = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2 == NULL ) { DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> exec <S2SV_blank> list <S2SV_blank> for <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ;",0
1275,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> const char * <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> * ab ) { size_t i, <S2SV_ModEnd> len ; size_t <S2SV_ModStart> * ab, ""argc=%d"" <S2SV_ModEnd>, context -> <S2SV_ModStart> -> argc ) ; if (! audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ) { audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ; return ; } <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> buf = kmalloc <S2SV_ModStart> GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> char line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; gboolean <S2SV_ModStart> FALSE ; } pkt_len = parse_netscreen_rec_hdr ( phdr, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if ( parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, & cap_dir, cap_dst, buf, err, err_info ) ) return FALSE ; if ( pkt_len == - 1 ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, & cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap",0
1280,"<S2SV_ModStart> rq ) { struct kvm_vcpu * vcpu = & __get_cpu_var ( vcpu_info, cpu ) ; <S2SV_ModStart> ) ; u64 <S2SV_ModEnd> irq_time ; rq <S2SV_ModStart> ) ; } if (! rq -> skip_clock_update ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> struct blkif_response resp <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memset <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : memset <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : memset <S2SV_ModEnd> ( & blk_rings <S2SV_ModStart> ( & blk_rings -> x86_32, sizeof ( blk_rings -> x86_32, sizeof ( blk_rings -> x86_32 ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memset ( & blk_rings -> x86_64, sizeof ( blk_rings -> x86_64 ) ) ; break ; default : BUG ( ) ; } blk_rings -> common. rsp_prod_pvt ++ ; RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & blk_rings -> common, notify ) ; <S2SV_ModEnd> blk_rings -> common",0
1283,<S2SV_ModStart> mask & KADM5_ATTRIBUTES <S2SV_ModEnd> ) ||!,0
1284,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( datao, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if (! c ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE_NOMEM, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; if (! exif_mem_alloc ( en -> mem, sizeof ( M",0
1285,"<S2SV_ModStart> ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1286,"<S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> (",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } if ( d_inode ( dir ) -> i_crypt_info ) { ci = d_inode ( dir ) -> i_crypt_info ; } else { ci = NULL ; } <S2SV_ModEnd> dput ( dir,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ) ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank>",0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; }",0
1290,<S2SV_ModStart> parent ) ; if (! i -> width ) return - 1 ; if (! i -> height ) return - 1 ; if (! i -> width ) return - 1 ; if (! i -> height ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if (! GetWord ( i -> parent ) ) return - 1 ; if ( GetWord ( i -> parent ) ) return - 1 ; if ( GetWord ( i -> parent ) ) return -,0
1291,"<S2SV_ModStart> n ) ; if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; }",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) Relinqu",0
1293,<S2SV_ModStart> void ) { recovery_started = 1 ;,0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT14 <S2SV_ModEnd> )",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ;",0
1297,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 st_rps_idx <S2SV_ModStart> ps_slice_hdr ) { if ( ps_slice_hdr -> st_rps_idx > MAX_DPB_SIZE ) { ps_codec -> codec_error = 1 ; ps_codec -> codec_state = CODEC_STATE_UNKNOWN ; } else { ps_codec -> codec_error = 1 ; } <S2SV_ModStart> ps_slice_hdr ) ; if ( ps_slice_hdr -> st_rps_idx > MAX_DPB_SIZE ) { ps_codec -> codec_error = 1 ; ps_codec -> codec_state = CODEC_STATE_ERROR ; ps_codec -> codec_state = CODEC_ERROR ; } <S2SV_ModStart> ps_slice_hdr ) ; ps_codec -> codec_state = CODEC_STATE_IDLE ; } else { ps_codec -> codec_error = 1 ; } <S2SV_ModStart> ps_slice_hdr ) ; if ( ps_slice_hdr -> st_rps_idx > MAX_DPB_SIZE ) { ps_codec -> codec_error = 1 ; ps_codec -> codec_state = CODEC_STATE_ERROR ; ps_codec -> codec,0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = get_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = set_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_GET_SYSCALL : ret = set_user ( child -> thread. syscall, datap ) ; break ; case PTRACE_GET_FPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ; break ; # endif",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart>, fmt ) { int i = 0, j = 0 ; if (! item -> child ) return 0 ; if (! child ) return 0 ; <S2SV_ModEnd> numentries = child <S2SV_ModStart> = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( str ) + 2 ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ;",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> RD_BOOLber_parse_header <S2SV_ModEnd> ( STREAM s,0
1302,"<S2SV_ModStart> ; other = sock_owned_by_user ( sk )? unix_peer_get ( sk ) : NULL ; if ( other ) { if ( unix_peer ( other ) == sk ) { <S2SV_ModEnd> writable = 0 <S2SV_ModStart> 0 ; } } <S2SV_ModEnd> sock_poll_wait ( file <S2SV_ModStart> wait ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } <S2SV_ModEnd> sock_put ( other",0
1303,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] << 24 ; value = ( size_t ) ( buffer [ 0 ] << 24 ) ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; value |= buffer [ 0 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void exit_io_context ( <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ) ; ioc = <S2SV_ModEnd> current -> io_context <S2SV_ModStart> -> io_context ; mutex_unlock <S2SV_ModEnd> ( current ) <S2SV_ModStart> -> io_context = NULL ; mutex_unlock ( current ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> ioc -> nr_tasks ) { if ( ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1306,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
1307,<S2SV_ModStart> data ) { u32 value [ 2 ] <S2SV_ModEnd> ; int ret <S2SV_ModStart> int ret ; * value = 0 ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; else * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; else * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [,0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg ( args, vpx_ref_frame_t <S2SV_ModEnd> ) ; if <S2SV_ModStart> NULL ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1310,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
1311,<S2SV_ModStart> -> dwc ; <S2SV_ModEnd> list_del ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,<S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> } # endif # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( <S2SV_ModStart> : # if (! ( ( <S2SV_ModStart> : # if (! ( ( <S2SV_ModStart> : # if (! ( ( <S2SV_ModStart> : # if (! ( ( <S2SV_ModStart> : # if (! ( ( yyerrstatus || (! ( ( yyerrstatus || (! ( ( yyerrstatus || (! ( yyerrstatus || (! (,0
1313,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> DISCE_PROBE ] = <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, <S2SV_ModEnd> DISCE_DESTRUCT ] =",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> const char * <S2SV_ModStart> name, int rep_quick ) { DBUG_ENTER ( ""mi_repair_by_sort"" ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; }",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve",0
1316,<S2SV_ModStart> trunc : ND_TCHECK ( length,0
1317,"<S2SV_ModStart> ) ; int err ; struct ip_options_data * inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> out ; if ( inet_opt ) { <S2SV_ModStart> -> sin_family = inet_opt -> inet_family ; sin = & inet_opt -> inet_opt -> sin_addr ; sin -> sin_zero. s_addr = ip_hdr ( skb ) -> saddr ; sin -> sin_zero. s_zerolen = inet_opt -> sin_zero. s_zerolen <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> cmsg_flags ) ip_cmsg_recv_timestamp ( msg, sk, skb ) ; if ( sin ) { memcpy ( sin -> sin_zero, & inet_opt -> inet_opt -> sin_zero, sizeof ( isk -> inet_opt -> sin_zero ) ) ; } <S2SV_ModEnd> if ( isk <S2SV_ModStart> -> cmsg_flags ) ip_cmsg_recv_timestamp ( msg, sk, skb ) ; <S2SV_ModStart> -> sin_zero ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> cmsg_flags ) ip_cmsg_recv_",0
1318,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModStart> EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_lock ( & inode -> i_mutex ) ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags &= ~ EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModStart> EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags &= ~ EXT4_GET_BLOCKS_KEEP_SIZE ; if (! ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags &= ~ EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT ; if ( mode & FALLOC_FL_KE",0
1319,<S2SV_ModStart> buf ; } else if ( pool -> free_total < pool -> max_free ) { pool -> free_arr [ pool -> free ++ ] = buf ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; bpf_map_inc_nolock <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> { while ( * cp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> 2 ] ) { NESTDATA const char <S2SV_ModEnd> hex [ ] <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } size_left -= 4 ; table_id = ntohs ( ipfix_template_record -> TemplateID ) ; count = ntohs ( ipfix_template_record -> FieldCount ) ; dbg_printf ( ""\\n[%u] <S2SV_blank> Template <S2SV_blank> ID: <S2SV_blank> %u\\n"", exporter -> info. id, table_id ) ; memset ( ( void * ) cache. common_extensions, 0, count ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map [ i ]. id == ipfix_element_map [ i ]. id ) { uint32_t",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd, * <S2SV_ModStart> = 15 ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; <S2SV_ModStart> ( pixc = pixFewColorsOctcubeQuant3 <S2SV_ModEnd> ( pixs, <S2SV_ModStart>, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; <S2SV_ModStart> == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; <S2SV_ModStart> NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; <S2SV_ModStart> ( pixc = pixFewColorsOctcubeQuant3 <S2SV_ModEnd> ( pixs, <S2SV_ModStart>, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; <S2SV_ModStart> == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank>",0
1325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> i, ubits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>",0
1326,<S2SV_ModStart> 256 ; vpx_mse16x16 vpx_mse16x16 ; vpx_mse16x16 <S2SV_ModEnd>. vf = <S2SV_ModStart> vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; vpx_mse16x16. vf = v,0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart> ; value = 0 ; msg -> bit = 0 <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> msg -> oob ) { msg -> readcount = 0 ; msg -> bit = 0 ; } else { msg -> bit = 0 ; } <S2SV_ModStart> & 7 ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits & 7 ; if ( msg -> oob ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits & 7 ; if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i += 8 ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; } if ( msg -> oob ) { if ( msg -> readcount ) { short temp ; CopyLittleShort ( & temp, & msg -> data [ msg -> readcount",0
1329,"<S2SV_ModStart> int err ; struct snd_ctl_elem_id id ; <S2SV_ModStart> -> count ; id = kcontrol -> id ; <S2SV_ModStart> -> count ; <S2SV_ModEnd> id. index <S2SV_ModStart> ++, id. numid <S2SV_ModEnd> ++ ) snd_ctl_notify",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { status = - ENODEV ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Error <S2SV_blank> registering <S2SV_blank> network <S2SV_blank> device\\n"" ) ; goto out ; }",0
1331,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; if ( ( size - overhead ) > conn -> max_bson_size ) { return MONGO_BSON_TOO_LARGE ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( flags & MONGO_CONTINUE_ON_ERROR ) { if ( mongo_check_last_error ( conn, ns, write_concern ) == MONGO_ERROR ) { return MONGO_ERROR ; }",0
1332,<S2SV_ModStart> ( textview ) ; gtk_widget_set_text_view ( textview ) ;,0
1333,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> err_out ; else <S2SV_ModEnd> iattr. ia_mode <S2SV_ModStart> ia_valid = ATTR_MODE <S2SV_ModEnd> ; v9fs_vfs_setattr_dotl (",0
1335,<S2SV_ModStart> ) free ) ; if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> header. class_size > bin -> size ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free (,0
1336,<S2SV_ModStart> case NPPVpluginNameString : case NPPVpluginDescriptionString : <S2SV_ModStart> case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } last_error = bits_per_mb_at_this_q - target_bits",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { atomic_set <S2SV_ModEnd> ( & c,0
1342,"<S2SV_ModStart> ; if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) ) == STAR ) ) { i ++ ; if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) ) == tfpdef || TYPE ( CHILD ( n, i ) ) == vfpdef ) ) { i ++ ; } } if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) == DOUBLESTAR ) ) { i ++ ; if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) ) == DOUBLESTAR ) { i ++ ; if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) ) == tfpdef || TYPE ( CHILD ( n, i ) ) == vfpdef ) ) { i ++ ; } } if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) == STAR ) ) ) { i ++ ; if ( i < NCH ( n ) && ( TYPE ( CHILD ( n, i ) ) == DOUBLESTAR ) ) { i ++ ; if ( TYPE ( CHILD ( n, i",0
1343,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int x, int y, int plane ) { DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else if ( plane == 0 ) { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } if ( x0 + bs <= frame_width ) { for ( i = 0 ; i < x0 ; ++ i ) left",0
1344,"<S2SV_ModStart> } else { if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1346,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_datasync_tid = 0 ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1347,<S2SV_ModStart> BUG ( ) ; if (! thresholds ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModStart> synchronize_rcu ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1348,"<S2SV_ModStart> * ion_handle_get_by_id ( struct ion_client * client <S2SV_ModEnd>, int id <S2SV_ModStart> lock ) ; handle = idr_find_and_get ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; <S2SV_ModEnd> return handle? <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, <S2SV_ModEnd> cm -> frame_type <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1350,<S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; } <S2SV_ModStart> long long_tmp ; if ( long_tmp < 0 ) { exit ( 1 ) ; },0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
1352,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) )!= TYPE_COMMENT ) { ast_error ( c, CHILD ( n, i ), ""type <S2SV_blank> comment <S2SV_blank> must <S2SV_blank> follow <S2SV_blank> bare <S2SV_blank> *"" ) ; return - 1 ; }",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> segment_feature_data ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> refresh_alt_ref_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [",0
1354,"<S2SV_ModStart> error ; uint16_t nextPacket <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, context -> nextPacket <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, sizeof ( uint8_t ) ) ; n = letoh16 ( n ) ; status = letoh32 ( status ) ; if ( ( status & ENC624J600_RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, sizeof ( uint8_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status",0
1355,"<S2SV_ModStart> = 2 ; if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ;",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), 0 ) ), rb_const_get ( rb_const_get ( rb_const_get ( ), RB_ROOT ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ""rb_const_get"" ), rb_const_get ( ""rb_const_get"" ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( ""rb_const_get"" ) ), rb_const_get ( rb_const_get ( rb_const_get ( ), RB_ROOT ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ""rb_const_get"" ), rb_const_get ( ""rb_const_get"" ) ) ) )",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> au1200fb_device * fbdev = info -> par ; <S2SV_ModEnd> vma -> vm_pgoff <S2SV_ModStart> |= _CACHE_MASK ; if ( fbdev -> fb_len < fbdev -> fb_len ) { return - EINVAL ; } vma -> vm_flags |= VM_IO ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma, fbdev -> fb_len, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ; <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ],0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> fanout_mutex ) ; mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> - EINVAL ; mutex_unlock ( & fanout_mutex ) ;,0
1364,<S2SV_ModStart> -> nmi ) { handle -> event -> pending_wakeup = 1 ; <S2SV_ModStart> -> pending ) ; } else <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } s += size",0
1366,"<S2SV_ModStart> { int v, i ; if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; s -> transparent_color_be [ 2 * i ] = v ; } else if ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; s -> transparent_color_be [ 2 * i ] = v ; } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) s -> transparent_color_be [ 2 * i ] = v ; else s -> transparent_color_be [ 2 * i ] = v ; } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) s",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1368,<S2SV_ModStart> = AF_INET6 ; } <S2SV_ModEnd> dt -> vlan_id,0
1369,"<S2SV_ModStart> ; status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFH",0
1370,"<S2SV_ModStart>, asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart>, is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; expr_ty type_comment = NULL ; int name_i = 1 ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, n, name_i + 3 ) ) ; if (! type_comment && NCH ( n",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pgd = find_pgd ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pud, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_none_or_clear_bad ( pte ) ) goto out ; <S2SV_ModEnd> flush_tlb ( )",0
1372,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED <S2SV_ModEnd>, NULL,",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; jas_uint32_t tilewidth = 0 ; jas_uint32_t tileheight = 0 ; <S2SV_ModStart> numcomps ) ) { if ( siz -> numcomps > 16384 ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1",0
1374,"<S2SV_ModStart> ; if ( 0 == ( * packet_data_pptr ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr",0
1375,"<S2SV_ModStart> = 0 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> = 0 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> = 0 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> = 0 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; }",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely (! iov_ok ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; ret = <S2SV_ModStart> ; size_t chars = iov -> len <S2SV_ModEnd> ; int error <S2SV_ModStart>, atomic ; if ( unlikely ( chars > total_len ) ) chars = total_len ; error = ops -> confirm ( pipe, buf ) ; if ( error ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> do_wakeup = 0 <S2SV_ModStart>, atomic ; if ( unlikely (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> len -= chars ; if (! buf -> len ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> ops = NULL ; ops -> release ( pipe, buf ) ; break ; } <S2SV_ModEnd> do_wakeup = 0 <S2SV_ModStart> ; if (! ret ) ret = error ;",0
1377,<S2SV_ModStart> GIFOutputCode ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) << bits ; \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> while ( ( <S2SV_ModStart> ) break ;,0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> ] ) { p_fm_config_conx_hdlt hdl <S2SV_ModEnd> ; int instance <S2SV_ModStart> res ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n""",0
1380,"<S2SV_ModStart> ; if (! jas_supported ( ) ) { abort ( ) ; } <S2SV_ModStart> ] ; infile = 0 ; max_mem = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_MAXMEM : max_mem = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : usage ( ) ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ;",0
1381,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) sh = 4 >> ( 3 - pana_bits ( 2 ) ) ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ),0
1383,<S2SV_ModStart> len < needed ||! nl,0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> vcpu_info ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> nr_rt_entries ) { if ( guest_irq >= irq_rt -> nr_rt_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } } else { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN",0
1386,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfqd -> queue_lock ) ; <S2SV_ModStart> bfqq ) ; spin_unlock_irq ( & bfqd -> queue_lock,0
1387,<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if (,0
1388,<S2SV_ModStart> handle ) return NULL <S2SV_ModEnd> ; pointer =,0
1389,<S2SV_ModStart> += 1 ; if ( orderInfo -> controlFlags & ORDER_TYPE_CHANGE ) length += 2 ; <S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
1390,<S2SV_ModStart> new_upperdir ) ; if ( new_upperdir -> d_inode!= old -> d_inode ) { if ( new_upperdir -> d_inode!= new -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_inode ) { if (! new_upperdir -> d_in,0
1391,"<S2SV_ModStart>, tlen, tlen2, s, sprev <S2SV_ModEnd> ) ; if",0
1392,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
1393,<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0,0
1394,<S2SV_ModStart> = hash ; <S2SV_ModEnd> } } return,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; const int mi_row = cpi -> cur_tile -> mi_row ; const int mi_col = cpi -> cur_tile -> mi_col ; const BLOCK_SIZE bsize = cpi -> cur_tile -> mi_cols [ mi_row ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( cpi -> cur_tile -> mi_row!= mi_row || cpi -> cur_tile -> mi_col!= mi_col ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; }",0
1396,<S2SV_ModStart> { dev -> priv_flags |= IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; <S2SV_ModStart> csum ) { dev -> priv_flags |= IFF_TX_SKB_SHARING ; dev -> features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; } else { dev -> priv_flags &= ~ ( IFF_TX_SKB_SHARING | IFF_TX_SKB_SHARING ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> features |= <S2SV_ModEnd> NETIF_F_HW_CSUM | NETIF_F_SG <S2SV_ModStart> | NETIF_F_FRAGLIST ; },0
1397,<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { * err = EINVAL ; return NULL ; },0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException (",0
1399,"<S2SV_ModStart> = 1 ; if (! pMap -> ranges ) { LOGE ( ""alloc() <S2SV_blank> failed: <S2SV_blank> %s\\n"", sizeof ( MappedRange ) ) ; return - 1 ; }",0
1400,<S2SV_ModStart> __this_address ; if ( di_size!= sizeof ( xfs_dinode_t ) ) return __this_address ; if ( di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t,0
1401,"<S2SV_ModStart> ( ( flags & VP8_EFLAG_NO_UPD_GF ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_AL",0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> res -> outputbuffer <S2SV_ModEnd>, ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ( constr1, sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart> ( constr2, sizeof ( constr2 ) <S2SV_ModEnd> ) ; if",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ; <S2SV_ModStart>, & nr_segs, <S2SV_ModEnd> iovec ) ;",0
1410,<S2SV_ModStart> binary_header. request. key = 0 ; c -> binary_header. request. bodylen = 0 ; c -> binary_header. request. cas = 0 ;,0
1411,"<S2SV_ModStart> ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgno, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; }",0
1412,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) { <S2SV_ModStart> - ENOMEM ; },0
1413,"<S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" <S2SV_ModEnd> ) ; return",0
1414,<S2SV_ModStart> ; if (! has_seg_override ) { if ( mode == X86EMUL_MODE_PROT16 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT16 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT16 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if (,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> ~ IFF_XMIT_DST_RELEASE ; <S2SV_ModEnd> random_ether_addr ( dev,0
1417,"<S2SV_ModStart> 16 ) ; if ( error16x16 > INT_MAX ) { error16x16 = INT_MAX ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; } else { error16x16 = INT_MAX ; }",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> psf -> header ) ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; }",0
1420,<S2SV_ModStart> && unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < 0 && unconditional ( e <S2SV_ModEnd> ) ) ||,0
1421,<S2SV_ModStart> priv -> alg_priv ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; else ctx -> priv -> destroy ( NULL ) ; },0
1422,"<S2SV_ModStart> ( vmcs12, CPU_BASED_RDPMC_EXITING <S2SV_ModEnd> ) ; case",0
1423,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_motion_search = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_,0
1424,<S2SV_ModStart> ct_dccp_roles role ; if ( dataoff < sizeof ( _dh ) ) return NF_DROP ;,0
1425,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s <S2SV_ModEnd> = STR ( <S2SV_ModStart> 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote < 0 ) { return NULL ; } s = _PyUnicode_AsString ( s ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; Py_DECREF ( errstr ) ; if ( quote < 0 ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; if ( errstr ) { char * s = """" ; char * buf = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } Py_",0
1430,"<S2SV_ModStart> * input_ptr ; vpx_codec_err_t res <S2SV_ModEnd> ; vpx_codec_err_t is_keyframe_qaunt_set <S2SV_ModStart> } else if ( strcmp ( ""keyframes"", option_name ) == 0 ) { is_keyframe_qaunt_set = 1 ; } else if ( strcmp ( ""keyframes"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> name <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""spatial-layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc",0
1431,"<S2SV_ModStart> mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_LAST_FAILED ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, &",0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; if ( linesize < 0 ) return linesize ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( plane = 0 ; plane < 4 ; plane ++ ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum",0
1433,"<S2SV_ModStart> } fprintf ( <S2SV_ModEnd> ""\\n"" ) ;",0
1434,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
1435,,1
1436,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1437,<S2SV_ModStart>! ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_WRITE <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( need_close || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) ) || <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_WRITE <S2SV_ModEnd> ) ) ),0
1438,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; struct ieee_sta_info * sta = NULL ; struct <S2SV_ModStart> ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( struct ieee_sta_info ) ) ; if ( sta ) { sta = & sta -> phdr ; memcpy ( & phdr, sta, sizeof ( struct ieee_sta_info ) ) ; if ( sta ) { sta = & sta -> phdr ; memset ( & sta, 0, sizeof ( struct ieee_sta_phdr ) ) ; memcpy ( & sta -> phdr, 0, sizeof ( struct ieee_sta_info ) ) ; } else { sta = & sta -> phdr ; memcpy ( & phdr, sta, sizeof ( struct ieee_sta_info ) ) ; } if ( sta ) { sta -> phdr_len = sta -> phdr_len ; memcpy ( & sta, sizeof ( struct ieee_sta",0
1439,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> a_val ; UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x ++ ) { src = data + ( context -> width - x ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ]",0
1441,"<S2SV_ModStart> + 1 ; } offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) { <S2SV_ModStart> hf_keybuffer ) ; }",0
1442,"<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; return ERR_PTR ( - EINVAL ) ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
1443,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> int ) cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> ) cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ; <S2SV_ModStart> = ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> ) cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> ; } return,0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,"<S2SV_ModStart> struct hello6 * hellop ; ND_TCHECK_32BITS ( & hellop -> hello_options ) ; ND_TCHECK_16BITS ( & hellop -> hello_deadint ) ; ND_TCHECK ( hellop -> hello_helloint ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Priority <S2SV_blank> %u"", EXTRACT_16BITS ( & hellop -> hello_priority ) ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hellop -> hello_bdr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_bdr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hello",0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 ) return - EINVAL ; <S2SV_ModEnd> return 1 ;,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & uwbd_mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & uwbd_mutex ) ; <S2SV_ModStart> rc, ""uwbd"" ) ; mutex_unlock ( & uwbd_mutex ) ;",0
1449,"<S2SV_ModStart> : # line 1044 <S2SV_ModEnd> ""re_grammar.y""{ yr_free ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_free ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_free ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_free ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_free ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_re_node_destroy ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_re_node_destroy ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y""{ yr_re_node_destroy (",0
1450,<S2SV_ModStart> char ) ( <S2SV_ModEnd> existing & ~ <S2SV_ModStart> bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ~ mask ) << bitIdx ) ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( col & mask ) << bitIdx ) ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( existing | ( ( col & mask ) <S2SV_ModEnd> << bitIdx ),0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = & cpi -> mb. plane [ plane ] ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( x -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob_prob ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vpx_prob ( * const eob_prob ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [",0
1452,<S2SV_ModStart> ; SrcList * const pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &=,0
1454,"<S2SV_ModStart> ; serv = svc_create ( & nfs4_callback_program <S2SV_ModEnd>, NFS4_CALLBACK_BUFSIZE,",0
1455,"<S2SV_ModStart> point, const CurveZZ_p <S2SV_ModEnd> curve ) {",0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsXEmbedBool : case NPNVSupportsWindowless :,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
1459,"<S2SV_ModStart> s ) { int len = s ; do len = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ; if ( len < s ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> = NULL ; const char * prop_name = ( const char * ) crm_first_attr ( xml ) ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; free ( path ) ; free ( path ) ; return ; } <S2SV_ModEnd> while ( cIter",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> svc_ctx ) { return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> ) { int <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; if (! in_uint8s ( s, length ) ) return RD_FALSE",0
1463,<S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1464,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> VPX_IMG_FMT_I420 ; _y4m -> vpx_bps <S2SV_ModEnd> = 12 ; <S2SV_ModStart> = 12 ; _y4m -> chroma_type [ 0 ] = '4' ; _y4m -> chroma_type [ 1 ] = '2' ; _y4m -> chroma_type [ 2 ] = '3' ; _y4m -> chroma_type [ 0 ] = '3' ; _y4m -> chroma_type [ 0 ] = '2' ; _y4m -> chroma_type [ 1 ] = '3' ; _y4m -> chroma_type [ 2 ] = '4' ; _y4m -> interlace = '?' ; _y4m -> interlace = '?' ; _y4m -> interlace = '?' ; _y4m -> interlace = 'p' ; _y4m -> interlace = '?' ; _y4m -> interlace = 'p' ; _y4m -> interlace = 'p' ; _y4m -> interlace =,0
1465,"<S2SV_ModStart> { struct obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = read_obj_nam ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ; if ( read_uid_guids_table <S2SV_ModEnd> ( & table_start <S2SV_ModStart> FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start =",0
1467,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> -> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e, * eq ; size_t len ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } <S2SV_ModEnd> return env ;",0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, 0, cm -> mi_rows * cm -> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, 0, cm -> mi_rows * cm -> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, 0, cm -> mi_rows * cm -> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9",0
1469,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, 4 ) ) return 0 ; <S2SV_ModStart> 5 ) ; if",0
1470,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1471,<S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> ; if ( context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY ++ <S2SV_ModEnd> ; if ( <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY ++ <S2SV_ModEnd> ; if ( <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY ++ <S2SV_ModEnd> ; if ( <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY ++ <S2SV_ModEnd> ; if ( <S2SV_ModStart> context -> curY >= <S2SV_ModEnd> p -> height <S2SV_ModStart> context -> curY ++ <S2SV_ModEnd> ; if ( <S2SV_ModStart> context ->,0
1472,<S2SV_ModStart> } # endif if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else {,0
1473,<S2SV_ModStart> } smb_flush_file ( sr <S2SV_ModEnd> ) ; },0
1474,"<S2SV_ModStart> ) ) { if ( WARN_ON ( sizeof ( buf ) > sizeof ( visbuf ) ) ) { run_err ( ""too <S2SV_blank> many <S2SV_blank> entries <S2SV_blank> for <S2SV_blank> %s"", targ ) ; exit ( 1 ) ; }",0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * * StartClean <S2SV_ModEnd> ; outpos = <S2SV_ModStart> = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>",0
1476,"<S2SV_ModStart> segs ) { static u32 ip_idents_hashrnd __read_mostly <S2SV_ModEnd> ; u32 hash <S2SV_ModStart> id ; net_get_random_once <S2SV_ModEnd> ( & ip_idents_hashrnd <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words <S2SV_ModEnd> ( ( __force <S2SV_ModStart> ) iph -> daddr <S2SV_ModEnd>, ( __force <S2SV_ModStart> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1477,"<S2SV_ModStart> expr_ty step ; int res ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out",0
1478,"<S2SV_ModStart> write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> * probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
1479,"<S2SV_ModStart> ; if ( ctl -> pw -> pw_uid!= ctl -> pw -> pw_uid ) { warn ( ""setpwnam <S2SV_blank> failed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = & radiotap_header ; if ( radiotap_header -> it_version!= IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; if ( max_length < get_unaligned_le32 ( & radiotap_header -> it_len ) ) return - EINVAL ; if (,0
1481,"<S2SV_ModStart> int err ; if (! nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) goto err_delete ; mask = knode -> sel -> keys [ 0 ]. mask >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; <S2SV_ModStart> err_delete ; } if (! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; }",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( <S2SV_ModEnd> IM, gdImagePtr",0
1483,<S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart> -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; else stream -> config. cfg. rc_twopass_stats_in = VPX_RC_ONE_PASS ; <S2SV_ModStart> ( pass ) stream -> config. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get,0
1484,"<S2SV_ModStart> new_data_len ) ; if ( g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_data, "".service"" ) &&! g_str_has_prefix ( new_",0
1485,"<S2SV_ModStart> { VP9_COMMON * const cm <S2SV_ModEnd> = & pbi <S2SV_ModStart> ; int tile_row, tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int",0
1486,"<S2SV_ModStart> vp9_decoder_create ( const VP9D_COMMON * common <S2SV_ModEnd>, const VP9D_CONFIG <S2SV_ModStart>, oxcf ) { const VP9_COMMON * const cm = common? & common -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; cm -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; } vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1487,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> -> count ; fpl -> count = 0 ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ( opt == NULL || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
1490,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> ( ctx, pts ) ; if ( res!= VPX_CODEC_OK <S2SV_ModEnd> ) { res <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( res!= VPX_CODEC_OK <S2SV_ModEnd> ) { ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( res!= VPX_CODEC_OK ) { res = validate_img ( ctx, img ) ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( <S2SV_ModStart> VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD",0
1492,<S2SV_ModStart> -> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY (,0
1493,"<S2SV_ModStart> ) ; struct path * path <S2SV_ModEnd> ; struct mount <S2SV_ModStart> * child ; struct mountpoint * dest_parent = source_mnt -> mnt_parent -> mnt. mnt_parent ; <S2SV_ModStart> int err ; if (! is_mnt_mountpoint ( source_mnt -> mnt_mountpoint ) ) goto out ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, dest_mnt, dest_mp ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; } if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; mnt_set_mountpoint ( dest",0
1494,"<S2SV_ModStart>, & len, 0",1
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> ) { Huff_transmit <S2SV_ModEnd> ( huff, <S2SV_ModStart> NULL, fout ) ; return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * x, MACROBLOCKD * xd <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_ModStart> x = & xd <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> select_txfm_size && x -> select_txfm_size && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; const int mi_width = num_8x8_blocks_wide_lookup [ mi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mi -> sb_type ] ; const int mi_width = num_8x8_blocks_wide_lookup [ mi -> sb_type ] ; const int mi_height = num_",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> struct crypto_skcipher * <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModEnd> req = skcipher_request_alloc <S2SV_ModStart>, 0, CRYPTO_ALG_ASYNC ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModEnd> skcipher_setkey ( tfm_des <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> sg_init_one ( &",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModEnd> x ; },0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVER",0
1503,<S2SV_ModStart> delta ; else { if ( i + insn -> off + 1 < pos ) <S2SV_ModEnd> insn -> off,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info ) return 0 ;",0
1505,"<S2SV_ModStart> { } else if ( c == '\\0' || c == ',' || c == ';' ) { param -> name = p + i ; } else if ( c == '=' ) { separatorFound = TRUE ; param -> nameLen = p + i - param -> name ; } else if ( c == '\\0' || c == ',' || c == ';' ) { param -> nameLen = p + i - param -> name ; } else if ( c =='<S2SV_blank>'|| c == '\\t' ) { param -> nameLen = p + i - param -> name ; } else if ( c =='<S2SV_blank>'|| c == '\\t' ) { param -> nameLen = p + i - param -> name ; } else if ( c == '=' ) { separatorFound = TRUE ; param -> nameLen = p + i - param -> name ; } else if ( c == \'\\""\' ) { i = param -> name + param -> nameLen - p ; error = NO_ERROR ; } else if ( c == '=' ) { separatorFound = TRUE ; param -> nameLen = p + i - param -> name ; } else if ( c == '=' ) { separatorFound = TRUE ; param -> nameLen = p + i",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) goto out ;,0
1508,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( <S2SV_ModEnd> ( ( float <S2SV_ModStart> + 1, dim ) ) <= entries ) ++ r ; if ( ( int ) floor ( pow ( <S2SV_ModEnd> ( ( float <S2SV_ModStart> + 1, dim ) ) <= entries ) ++ r ; if ( ( int ) floor ( pow ( <S2SV_ModEnd> ( ( float <S2SV_ModStart> + 1, dim ) ) <= entries ) ++ r ; <S2SV_ModEnd> return r ;",0
1509,"<S2SV_ModStart> 4 ) { if ( dds_info -> width < x || dds_info -> height < y || <S2SV_ModStart> dds_info -> height < y || <S2SV_ModStart> dds_info -> width < x || dds_info -> height < y || <S2SV_ModStart> dds_info -> height < y || dds_info -> width < x || dds_info -> height < y || dds_info -> height < y || <S2SV_ModStart> dds_info -> height < y || x > dds_info -> width || y > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; <S2SV_ModStart> dds_info, 8 <S2SV_ModEnd> ) ; return",0
1510,<S2SV_ModStart> length ) { int ret ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1512,"<S2SV_ModStart> cfg ) { size_t <S2SV_ModEnd> i ; memset <S2SV_ModStart> ; } } memset ( cfg, 0, sizeof ( cfg_t ) ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = argv [ i ] + 1 ; if ( strcmp ( argv [ i ], ""version"" ) == 0 ) cfg -> version = argv [ i ] + 2 ; if ( strcmp ( argv [ i ], ""version="", 12 ) == 0 ) cfg -> version = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""version="", 12 ) == 0 ) cfg -> version = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""version="", 12 ) == 0 ) cfg -> version = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""version="", 12 ) == 0 ) cfg -> version = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""version="", 12 ) == 0 ) cfg -> version = argv [ i ] + 12 ; if ( strcmp ( argv [ i ],",0
1513,<S2SV_ModStart> = 1 << F2FS_IPU_FSYNC <S2SV_ModEnd> ; sm_info -> <S2SV_ModStart> = 1 << F2FS_IPU_FSYNC <S2SV_ModEnd> ; sm_info -> <S2SV_ModStart> = 1 << F2FS_IPU_FSYNC <S2SV_ModEnd> ; sm_info -> <S2SV_ModStart> = 1 << F2FS_IPU_FSYNC <S2SV_ModEnd> ; sm_info -> <S2SV_ModStart> = 1 << F2FS_IPU_FSYNC <S2SV_ModEnd> ; sm_info ->,0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
1515,"<S2SV_ModStart> FALSE ; WLog_DBG ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ;",0
1516,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > 16 ) { vp8_writer * w = & cpi -> temp_writer ; vp8_writer_reset ( w ) ; } # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. bit_depth > 16 ) { vp8_writer_reset ( w ) ; } # endif # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> b_multi_threaded!= 0 ) && ( mb_row!= 0 ) ) last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else current_mb_col = & rightmost_col ; } # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_,0
1517,"<S2SV_ModStart> ( pvc ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,"<S2SV_ModStart> * data ; if (! s_check_rem ( s, 4 ) ) { abort ( ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, 4 ) ) { abort ( ) ; } <S2SV_ModStart> CLIPRDR_ERROR ) { if (! s_check_rem ( s, 4 ) ) { abort ( ) ; }",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( c_rows > 1 ) { <S2SV_ModStart> ; if ( c_rows > 2 ) { <S2SV_ModStart> ; if ( c_rows > 3 ) { <S2SV_ModStart> ; if ( c_rows > 2 ) { <S2SV_ModStart> ; if ( c_rows > 3 ) { <S2SV_ModStart> ; if ( c_rows > 2 ) { <S2SV_ModStart> ; if ( c_rows > 3 ) { if ( c_rows > 2 ) { if ( c_rows > 3 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 1 ) { if ( rows > 2 ) { if ( rows > 2 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 2 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 2 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 2 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 2 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows > 3 ) { if ( rows,0
1521,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( bps <S2SV_ModEnd> * stride ) <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory: <S2SV_blank> %d\\n"", __func__, cc ) ; <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory: <S2SV_blank> %d\\n"", __func__, cc ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory: <S2SV_blank> %d: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory: <S2SV_blank> %d\\n"", __func__, cc ) ; return 0 ; } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++",0
1525,"<S2SV_ModStart> STREAM s ) { int i ; <S2SV_ModStart> int i ; if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, Bpp ) ; if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (!",0
1526,"<S2SV_ModStart> } else { if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> \'%s\'"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
1528,<S2SV_ModStart> { } ; struct termios * tmp ; <S2SV_ModStart> name ) ; tmp = alloc_termios ( 1 ) ; if ( tmp == NULL ) { free ( tmp ) ; r = alloc_termios ( 1 ) ; if ( tmp == NULL ) { free ( tmp ) ; } } <S2SV_ModEnd> r = loop_write,0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int su3000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_settings * settings = d -> priv ; struct dvb_usb_device_state * state = d -> priv ; struct dvb_usb_device_state * state = & d -> state ; if ( dvb_usb_generic_rw ( d, 3, & state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, & state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 ; state -> data",0
1530,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( (",0
1531,"<S2SV_ModStart> stride, int offset <S2SV_ModEnd>, int mv_row <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } <S2SV_ModEnd> vp9_build_inter_predictor ( y_mb_ptr <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, & pred <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, & mv <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, & mv <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, & mv <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, which_mv, <S2SV_ModStart>, which_mv, kernel, mv_precision_uv, x, y ) ; } <S2SV_ModEnd> vp9_build_inter_predictor ( u_mb_ptr <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, & pred <S2SV_ModStart>, uv_stride, offset <S2SV_ModEnd>, & pred <S2SV_ModStart>,",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) < 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) < 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> < count && <S2SV_ModEnd> n = cJSON_CreateFloat <S2SV_ModStart> ] ) ; if (! n ) a -> child = 0 ; else suffix_object ( p, n ) ; n = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; return a ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1534,"<S2SV_ModStart> goto retry_rebind ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,"<S2SV_ModStart> ; float * w ; w = get_window ( f, n ) ; if (! w ) return 0 ;",0
1536,"<S2SV_ModStart> data_end ) { VP9_COMMON_EXT * const cm = & pbi -> common. ext <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> tile_cols ) ; const int tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( tile_cols <= ( 1 << 6 ) ) tile_cols = 1 << 6 ; const int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd> & ~ 1 <S2SV_ModStart> num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_workers ) <S2SV_ModStart> worker = & pbi <S2SV_ModEnd> -> tile_workers [ <S2SV_ModStart> worker = & pbi <S2SV_ModEnd> -> tile_workers [ <S2SV_ModStart> worker = & pbi <S2SV_ModEnd> -> tile_workers [ <S2SV_ModStart> -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc (",0
1537,<S2SV_ModStart> * 0x101 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'R' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' ) return ; <S2SV_ModStart> ( ) ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'M' ) return ;,0
1538,"<S2SV_ModStart> -> common ; VP9_COMMON_INFO * const info = & cpi -> common. info ; struct segmentation_info * const seg = & cpi -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> y_dc_delta_q ) ; const int qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_",0
1539,"<S2SV_ModStart> int bychunk ; if ( bitspersample!= 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; }",0
1540,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t err_code ; if ( ctx -> base. err_detail ) err_code = ctx -> base. err_detail <S2SV_ModEnd> ; return error,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, ""keys <S2SV_blank> cannot <S2SV_blank> end <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST",0
1543,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; <S2SV_ModStart> ps_cur_slice ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ; ps_dec -> ps_prev_poc = NULL ; ps_dec -> ps_cur_poc = NULL ;",0
1544,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_,0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. congest_packet ) ),0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; while ( isdigit ( * * fmt ) ) { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; },0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold <S2SV_ModEnd> ( g,",0
1548,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
1549,"<S2SV_ModStart> 'S' } ; uint8_t * ssl_request = & ssl_request [ sizeof ssl_request ] <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write (",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { } <S2SV_ModEnd> ; connection -> <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = 0 ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return -",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi,",0
1552,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1553,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( bp [ 26 ] ) ; <S2SV_ModStart> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 26 ] & 0x07 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if (",0
1554,<S2SV_ModStart> case EXPR_NOT : if (! * set_rtrn ) * set_rtrn =! * set_rtrn,0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> - EFAULT ; } if ( copy_from_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { <S2SV_ModEnd> printk ( KERN_ERR <S2SV_ModStart> - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
1557,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register MagickBooleanType <S2SV_ModStart> height, length, padding, value, version, width ; image = DestroyImageList ( image ) ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> status = OpenBlob <S2SV_ModStart> buffer )!= ( MagickFalse ) ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickSignature ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return",0
1558,"<S2SV_ModStart> ; if ( mainhdrlen < 0 ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } if ( mainhdrlen > JAS_STREAM_MAXHDRLEN ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( mainhdrlen > JAS_STREAM_MAXHDRLEN ) { jas_eprintf ( ""mainhdr <S2SV_blank> too <S2SV_blank> long\\n"" ) ; return - 1 ; }",0
1559,<S2SV_ModStart> chanmode ) { case '\\0' : break ; case '\\n' : break ; case '\\t' : break ; case '\\r' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\r' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; } break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\r' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; case '\\t' : break ; },0
1560,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> * decode_uniform ( <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; if ( v < 0 ) { vpx_reader_error ( r ) ; return - 1 ; } <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 1 ) ; if ( v < 0 ) { vpx_reader_error ( r ) ; return - 1 ; } return v <S2SV_ModEnd> ; } <S2SV_null>",0
1561,<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; error <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; if ( error!= GIT_OK <S2SV_ModEnd> ) error =,0
1562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_cost_tokens_skip ( int,0
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> mode = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ctx ] ) ; if (! cm -> frame_parallel_decoding_mode ) ++ cm -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1564,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; stream -> index ++ ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; # if CONFIG_WEBM_IO stream -> ebml. last_pts_ms = - 1 ; # endif stream -> ebml. debug = global -> debug ;",0
1565,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "" <S2SV_ModEnd>, tok2str (",0
1566,<S2SV_ModStart> = 0 ; ( * re_ast ) -> parent_node = NULL ; ( * re_ast ) ->,0
1567,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, key -> <S2SV_ModStart> key -> key, error ) ; } else { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s",0
1568,<S2SV_ModStart> ; if ( <S2SV_ModEnd> A > skb <S2SV_ModStart> A ] ; if ( <S2SV_ModEnd> nla -> nla_len <S2SV_ModStart> -> nla_len > A <S2SV_ModEnd> - skb -> <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>""",0
1571,"<S2SV_ModStart> cac_id, priv -> cac_id_len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",0
1572,<S2SV_ModStart> = 0 ; tok -> type_comments = 0 ; tok -> type_comments <S2SV_ModStart> = 0 ; tok -> type_comments = 0 ;,0
1573,<S2SV_ModStart> maxBitrate ; } av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config ) ;,0
1574,<S2SV_ModStart> r ] = '\\0' <S2SV_ModEnd> ; set_string (,0
1575,<S2SV_ModStart> maxFrameNum ) ; if ( dpbSize == 0 ) return ( MEMORY_ALLOCATION_ERROR ) ; <S2SV_ModStart> dpbSize ) ; if ( dpb -> numRefFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_EINVAL ) ; if (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; addrlen_out = * addrlen ; addrlen_in = addrlen_out ; if ( addrlen_in > addrlen_out ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = addrlen_in ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = addrlen_out ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ),0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; }",0
1580,"<S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart> pe_plus = 0 <S2SV_ModEnd> ; int upxfn <S2SV_ModStart> = CL_CLEAN ; # if HAVE_SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL, * subsystem = NULL ; uint32_t viruses_found = 0 ; uint32_t valign = 0 ; uint32_t valign = 0 ; size_t hdr_size = 0 <S2SV_ModStart>, j ; if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE_SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif <S2SV_ModStart> # endif if (! archtype ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> archtype <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif <S2SV_ModStart> # endif if (! <S2SV_ModStart>",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR ) & DM9000_EPCR_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1582,"<S2SV_ModStart> -> tiff_datasize ) ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image"" ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> -> tiff_datasize ) ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image"" ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> -> tiff_datasize ) ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image"" ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred = __task_cred ( child ) ; <S2SV_ModStart> ) ; __ptrace_link <S2SV_ModEnd> ( child, <S2SV_ModStart> new_parent, old_cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { int rc ; <S2SV_ModStart> pcmk_ok ) { int rc ; <S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_strerror ( private -> command. session ) ) ; return - EINVAL ; } <S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port ) ; return - EINVAL ; } } } <S2SV_ModEnd> if ( rc <S2SV_ModStart> pcmk_ok ) { if (! private -> command. encrypted ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> command. session, private -> command. encrypted ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name,",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, n, <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX",0
1587,<S2SV_ModStart> ntreg_header ) ; assert ( sizeof ( h -> ntreg_header ) == sizeof ( h -> ntreg_header ) ) ; assert ( sizeof ( h -> ntreg_header ) == sizeof ( h -> ntreg_header ),0
1588,"<S2SV_ModStart> ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"" <S2SV_ModEnd>, _parent,",0
1589,"<S2SV_ModStart> -> msg_controllen, ctl_buf, ctl_len ) ; if ( err ) goto out_freeiov ;",0
1590,"<S2SV_ModStart>, one ; size_t pixel_info_length ; size_t number_planes_filled = number_planes_filled? number_planes_filled : 0 <S2SV_ModStart> number_planes_filled ) { pixel_info_length = number_planes_filled * sizeof ( * pixel_info ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_string ( b",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,"<S2SV_ModStart> cib_client_t * client <S2SV_ModEnd> = user_data ; <S2SV_ModStart> num_clients ) ; g_object_unref <S2SV_ModEnd> ( client ) <S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( client -> <S2SV_ModStart> user ) ; g_object_unref <S2SV_ModEnd> ( client -> <S2SV_ModStart> client ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { <S2SV_ModStart> work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { <S2SV_ModStart> uv ) { work ++ <S2SV_ModEnd> ; if (",0
