,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> n2size ) ; if ( err_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed: <S2SV_blank> %s"", err_val. text ) ; goto out ; } <S2SV_ModEnd> nonce1 = json_object_get <S2SV_ModStart> ""nonce1"" ) ; if (! nonce1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed: <S2SV_blank> %s"", err_val. text ) ; goto out ; } <S2SV_ModEnd> sessionid = json_object_get <S2SV_ModStart> ""sessionid"" ) ; if (! err_val ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed: <S2SV_blank> %s"", err_val. text ) ; goto out ; } <S2SV_ModEnd> nonce1 = json_object_get <S2SV_ModStart> ""nonce1"" ) ; if (! nonce1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed: <S2SV_blank> %s"", err_val. text ) ; goto out ; } <S2SV_ModEnd> nonce1 = json_object_get <S2SV_ModStart> ""nonce1"" ) ; if (! nonce1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed: <S2SV_blank> %s"", err_val. text ) ; goto out",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; return ; } <S2SV_ModStart> 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)""",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> struct yamdrv_ioctl_mcs * ym_init = kmalloc ( sizeof ( * ym_init ), GFP_KERNEL ) ; if ( ( ym_init = kmalloc ( sizeof ( * ym_init ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym_init = kmalloc ( sizeof ( * ym_init ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym_init = kmalloc ( sizeof ( * ym_init ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym_init = kmalloc ( sizeof ( * ym_init ) ) == NULL ) return - ENOBUFS ; if ( ( ym_init = kmalloc ( sizeof ( * ym_init ), GFP_KERNEL ) ) == NULL ) return - ENOMEM ; if ( ( ym_init = kmalloc ( sizeof ( * ym_init ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( (",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> unfrag_ip6hlen ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } <S2SV_ModStart> unfrag_ip6hlen ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; } if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( unfrag_ip6hlen ) ; },0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> ""tpgt_"" )!= name <S2SV_ModEnd> ) return ERR_PTR <S2SV_ModStart> - EINVAL ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
7,"<S2SV_ModStart> ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vcpu ) { u64 <S2SV_ModEnd> data ; void <S2SV_ModStart> return ; vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic -> apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic ) ; <S2SV_ModEnd> apic_set_tpr ( vcpu",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> c -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ']' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ']' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return",0
12,<S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( unlikely ( unfrag_len > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_goto out_g,0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, & data <S2SV_ModEnd>, regs )",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header * leaf ; struct grub_ext4_extent * ext ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( ext [ i ]. len ) ; i ++ ) {",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t step1 [ 8 ] ; tran_high_t step2 [ 8 ] ; tran_high_t step3 [ 8 ] ; tran_high_t step4 [ 8 ] ; tran_high_t step5 [ 8 ] ; tran_high_t step6 [ 8 ] ; tran_high_t input [ 8 ] ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 10 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 4 ] ; s2",0
16,"<S2SV_ModStart> env ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret ) goto err_unlock ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( * env -> explored_states ), GFP_KERNEL ) ; if (! env -> explored_states ) goto err_free_env ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( * env -> explored_states ), GFP_KERNEL ) ; if (! env -> explored_states ) { kfree ( env -> explored_states ) ; env -> explored_states = NULL ; } else if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret ) goto err_unlock ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( * env -> explored_states ), GFP_KERNEL ) ; if (! env -> explored_states",0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; i -- ) if ( ( config -> sample_rate % sample_rates [ i ] ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; } } else { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; } } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""highbrid <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = 0 ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD",0
18,"<S2SV_ModStart> ; retry : if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_test_unit_ready ( SDev ) ; if ( driver_byte ( result )!= 0 ) goto retry ; if ( driver_byte ( result )!= 0 ) goto retry ; if ( driver_byte ( result )!= 0 ) goto retry ; if ( driver_byte ( result )!= 0 ) goto retry ; if ( driver_byte ( result )!= 0 ) goto retry ; if ( driver_byte ( result )!= 0 ) goto retry ; if ( driver_byte ( result )!= 0 ) goto retry ; switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready <S2SV_blank> yet.\\n"" ) ; if (! cgc -> quiet ) sr_print",0
19,<S2SV_ModStart> ( ) == 0x48454150 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x484542994 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x48454299 || get4 ( ) == 0x484542994 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & sd -> common ; struct loopfilter * const lf = cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int filter_step = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ; const int filt_high = MIN ( filt_mid + filter_step",0
21,"<S2SV_ModStart> left == 0 ) { luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."" <S2SV_ModEnd>, offset,",0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_mv_component ( vpx_writer <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } else { vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { int i ; const int n = mv_class + CLASS0_BITS - 1 ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ]",0
23,<S2SV_ModStart> cra_rng. rng_make_random && <S2SV_ModEnd> ralg -> cra_rng,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( * sp ) || <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,"<S2SV_ModStart> char * fmtname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 0 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( infile ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } else { if (! ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid",0
27,"<S2SV_ModStart> int esr ) { console_verbose ( ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"", handler [ reason ], esr ) ; die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"" <S2SV_ModEnd>, regs,",0
28,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> "" <S2SV_ModEnd> ) ) ;",0
29,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> alt = uas_find_uas_alt_setting <S2SV_ModStart> intf ) ; if ( alt < 0 ) return alt ; alt = <S2SV_ModEnd> intf -> altsetting <S2SV_ModStart> ]. desc. bNumEndpoints <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> udev, intf -> altsetting <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> alt ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> * from, size_t fromlen, size_t <S2SV_ModEnd> to ) { <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> elen = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( elen <S2SV_ModStart> case 3 : memcpy ( p, ""../"" <S2SV_ModEnd>, 3 ) <S2SV_ModStart> += 3 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 2 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 2 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 3 ) <S2SV_ModStart> += 3 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart> += 2 ; memcpy ( p, ""./"" <S2SV_ModEnd>, 4 ) <S2SV_ModStart>",0
31,"<S2SV_ModStart> ) ) { if ( server. tcp_keepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; } } else if ( server. tcpkeepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; }",0
32,<S2SV_ModStart> unsigned long flags <S2SV_ModEnd> ; spin_lock_irqsave (,0
33,"<S2SV_ModStart> goto error ; if ( usb_endpoint_dir_in ( endpoint ) &&! dev -> interrupt_in_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> in <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if (! dev -> interrupt_out_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> out <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if (! dev -> interrupt_in_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> in <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if (! dev -> interrupt_in_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> in <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if (! dev -> interrupt_out_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> out <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; } if (! dev -> interrupt_in_endpoint ) { dev_err ( idev, ""interrupt <S2SV_blank> in <S2SV_blank> endpoint <S2SV_blank> not <S2SV_blank> found\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> ; if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz > SIZE_MAX - shdr -> sh_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz > SIZE_MAX - shdr -> sh_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; if (! dest_keyring ) break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring )",0
36,<S2SV_ModStart> = create_spnego_ctx ( 0,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || addr -> l2tp_family!= AF_INET ) return - EINVAL ; if ( addr -> l2tp_family!= AF_L2TP <S2SV_ModEnd> ) return - <S2SV_ModStart> - EINVAL ; read_lock_bh ( & l2tp_ip_lock ) ; <S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) || addr_len > sizeof ( struct sockaddr_l2tpip_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void,0
39,"<S2SV_ModStart> ( dialog ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" ), RESPONSE_MARK_TRUSTED ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; }",0
40,<S2SV_ModStart> tm = g_time_to_tm ( <S2SV_ModEnd> t ) ;,0
41,<S2SV_ModStart> length ) ; if ( strlen ( password ) + length > MAXPASS ) { abort ( ) ; },0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> ( d, 0x51 <S2SV_ModEnd>, obuf, <S2SV_ModStart>, obuf, sizeof ( obuf ) <S2SV_ModEnd>, ibuf, <S2SV_ModStart>, ibuf, sizeof ( ibuf ) <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } if ( dvb_attach ( m88rs2000_attach, d -> fe_adap [ 0 ]. fe, & s421_m88rs",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc ->",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%ll",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein < 0 ) { TIFFError ( TIFFFileName ( in ), ""Invalid <S2SV_blank> scanline <S2SV_blank> size: <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; } inbuf = _TIFFmalloc ( scanlinesizein ) ; if (! inbuf ) { TIFFError ( TIFFFileName ( in ), ""Invalid <S2SV_blank> scanline <S2SV_blank> size: <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; } outbuf = _TIFFmalloc ( scanlinesizeout ) ; if (! outbuf ) { TIFFError ( TIFFFileName ( out ), ""Invalid <S2SV_blank> scanline <S2SV_blank> size: <S2SV_blank> %lu"", ( unsigned long ) scanlinesizeout ) ; goto bad ; } for ( row = 0 ; row < imagelength ; row ++ ) { if ( TIFFReadScanline ( in, inbuf, row, 0 ) < 0 &&! ignore ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can\'t <S2SV_blank> read <S2SV_blank> scanline <S2SV_blank> %lu"", ( unsigned long ) row ) ; goto bad ; } inp += spp ; outp = (",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( <S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", machine, ( uint32_t ) uid ) ; if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { get_page ( buf -> page ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> ) ) ; if (! idstr ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, STR_OR_ID ( t. t_type, ikev2_t_type_map ) ) ) ; return NULL ; } <S2SV_ModStart> ) ) ; if (! idstr ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, STR_OR_ID ( t. t_type, ikev2_t_type_map ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, STR_OR_ID ( t. t_type, ikev2_t_type_map ) ) ; if (! <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, STR_OR_ID ( t. t_type, ikev2_t_type_map ) ) ; return NULL ; }",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart>",0
54,"<S2SV_ModStart> wp -> config -> pm_max_requests ; if ( 0 > fpm_stdio_init_child ( wp ) || 0 > fpm_status_init_child ( wp ) || 0 > fpm_unix_init_child ( wp ) || 0 > fpm_signals_init_child ( ) || 0 > fpm_php_init_child ( wp ) || 0 > fpm_stdio_init_child ( wp ) || 0 > fpm_stdio_init_child ( wp ) || 0 > fpm_stdio_init_child ( wp ) || 0 > fpm_status_init_child ( wp ) || 0 > fpm_signals_init_child ( ) || 0 > fpm_env_init_child ( wp ) || 0 > fpm_php_init_child ( wp ) ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( TWO_PASS <S2SV_ModStart> ) { int trans_to_still = 0 ; const FIRSTPASS_STATS * position <S2SV_ModEnd> = twopass -> <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next",0
56,"<S2SV_ModStart> 0 ; } err = jbd2_journal_stop ( handle ) ; if ( handle -> h_err ) return handle -> h_err ; <S2SV_ModStart> ) ; return <S2SV_ModEnd> handle -> h_err <S2SV_ModStart> : err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : <S2SV_ModEnd> jbd2_journal_stop ( handle <S2SV_ModStart> handle ) ; if (! err ) err = <S2SV_ModEnd> jbd2_journal_stop ( handle <S2SV_ModStart> handle ) ; if (! err ) err = jbd2_journal_stop ( handle ) ; if (! err ) err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! rc ) err = rc ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; if (! err ) __ext4_std_error ( sb, where, line, err ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
57,"<S2SV_ModStart> return ret ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
59,<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) { if (! capable ( CAP_SYS_ADMIN,0
60,"<S2SV_ModStart> 2 ) { if ( len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
61,"<S2SV_ModStart> ) { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,<S2SV_ModStart> flags ) ; if (! mutex_trylock ( & dgnc_global_lock ) ) { mutex_unlock ( & dgnc_global_lock ) ; return - EBUSY ; } <S2SV_ModStart> dinfo_nboards = dgnc_NumBoards ; if (! mutex_trylock ( & dgnc_global_lock ) ) { mutex_unlock ( & dgnc_global_lock ) ; return - EBUSY ; } mutex_unlock ( & dgnc_global_lock ) ; if (! mutex_trylock ( & dgnc_global_lock ) ) { mutex_unlock ( & dgnc_global_lock ) ; return - EBUSY ; } mutex_unlock ( & dgnc_global_lock ) ; if (! mutex_trylock ( & dgnc_global_lock ) ) { mutex_unlock ( & dgnc_global_lock ) ; return - EBUSY ; } mutex_unlock ( & dgnc_global_lock ) ; if (! mutex_trylock ( & dgnc_global_lock ) ) { mutex_unlock ( & dgnc_global_lock ),0
63,<S2SV_ModStart> && flags & TH_SYN <S2SV_ModEnd> ) &&!,0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; <S2SV_ModStart> + 3 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; * out = ( git_",0
66,<S2SV_ModStart> = ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitCount |= ( OPJ_UINT16 ) getc ( IN ) << 8 ; header -> biBitsPerSample = ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) << 16 ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) << 8 ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) getc ( IN ) ; header ->,0
67,"<S2SV_ModStart> SAS_DPRINTK ( ""DONE <S2SV_blank> DISCOVERY <S2SV_blank> on <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> pid:%d, <S2SV_blank> result:%d\\n"" <S2SV_ModEnd>, port -> <S2SV_ModStart> port_dev = NULL ; break ; case SAS_END_DEVICE : error = sas_discover_end_dev ( dev ) ; break ; case SAS_EDGE_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_SATA_DEV : error = sas_discover_sata ( dev ) ; break ; case SAS_SATA_PM : error = sas_discover_sata ( dev ) ; break ; # ifdef CONFIG_SCSI_SAS_ATA error = sas_discover_sata ( dev ) ; # endif",0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> - ENOBUFS ; } else { line. clock_type = get_status ( port ) -> clocking ; line. clock_rate = 0 ; line. loopback = 0 ;,0
71,<S2SV_ModStart> arg ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) ) { kfree ( ureq ) ; <S2SV_ModStart> - EFAULT ; } ureq = memdup_user ( udata, req_len ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = qinfo. udata_len ; iob = qeth_get_adapter_cmd ( card, IPA_SETADP_SET_SNMP_CONTROL, QETH_SNMP_SETADP_CMDLENGTH + qinfo. udata_len ) ; cmd = ( struct qeth_ipa_cmd * ) ( iob -> data + IPA_PDU_HEADER_SIZE ) ; memcpy ( & cmd -> data. setadapterparms",0
74,<S2SV_ModStart> c ) { jas_matind_t <S2SV_ModEnd> m ; m,0
75,<S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; } <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; } <S2SV_ModStart> 0 ) { if ( a,0
76,"<S2SV_ModStart> = NULL ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = mxf_tc ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = mxf_tc ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = mxf_tc ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVER",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ;",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, offset ) <S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, offset ) <S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, psf -> <S2SV_ModStart> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, offset ) <S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, offset ) <S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"" <S2SV_ModEnd>, offset ) <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]""",0
80,<S2SV_ModStart> NF_STOLEN ; return NF_DROP <S2SV_ModEnd> ; } <S2SV_null>,0
81,<S2SV_ModStart> * up ; * replay_esn = NULL ; * preplay_esn = NULL ; <S2SV_ModStart> rta ) ; if (! up ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay,0
82,"<S2SV_ModStart> - ENODEV ; for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 6 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 7 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; # ifdef readq case 8 : io -> inputb = mem_inq ; io -> outputb = mem_inq ; break ; # endif for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ;",0
83,<S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> ( value + <S2SV_ModStart> value + 0.5 ) ) ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case LeftShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case LogEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> value + 0.5 ) ) ; break ; } case ReverseShiftEvaluateOperator : { result = ( Mag,0
84,"<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"" ) ; return ret ; } ret = <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"" ) ; return ret ; } if ( ret < 0 ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"" ) ; return ret ; } ret = btif_config_flush ( ) ; if ( ret < 0 ) { btif_storage_error ( ""BTIF_STORAGE_ADD_BONDED_DEVICE"", ""BTIF_STORAGE_ADD_BONDED_DEVICE"" ) ; return ret ; }",0
85,<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE,0
86,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map <S2SV_ModEnd> ; if ( <S2SV_ModStart> = iface -> enc. cfg_maps ; if (! map ) { res = VPX_CODEC_INVALID_PARAM ; break ; } <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> return res ;,0
87,"<S2SV_ModStart> size ) { netdev_dbg <S2SV_ModEnd> ( vif -> <S2SV_ModStart> ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int show_object ( <S2SV_ModEnd> struct strbuf * <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, void * data <S2SV_ModEnd> ) { struct <S2SV_ModStart>. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { free ( name ) ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
89,<S2SV_ModStart> ; newparity = baud_to_parity ( opts. parity ) ; newbits = baud_to_parity ( opts. bits ) ; if ( newparity!= baud_to_parity ( opts. parity ) ) newparity = baud_to_parity ( opts. parity ) ; if ( newparity!= baud_to_parity ( opts. bits ) ) newparity = baud_to_parity ( opts. parity ) ; if ( newparity!= baud_to_parity ( opts. parity ) ) newparity = baud_to_parity ( opts. bits ) ; if ( newparity!= baud_to_parity ( opts. parity ) ) newparity = baud_to_parity ( opts. parity ) ; if ( newparity!= baud_to_parity ( opts. bits ) ) newparity = baud_to_parity ( opts. parity ) ; if ( newparity!= baud_to_parity ( opts. parity ) ) newparity = baud_to_parity,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,<S2SV_ModStart> type_flags ) { struct net * net = sock_net ( sk ) ; struct <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; if ( po -> fanout ) return - EALREADY ; if ( type == PACKET_FANOUT_LB ) return - EINVAL ; if ( type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM ) return - EINVAL ; if ( type == PACKET_FANOUT_LB ) return - EINVAL ; if ( type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT,0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp, <S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( opt ) ; if ( opt ) opt = ipv6_dup_options",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModEnd>, frame_in,",0
95,<S2SV_ModStart> ; if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> result -> rows ) { if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> result -> rows ) { if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags &,0
96,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
98,"<S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page, <S2SV_ModStart> ( page && access_ok <S2SV_ModEnd> ( page,",0
99,"<S2SV_ModStart>, path ) ; if ( flags & EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_",0
100,"<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank>",0
101,"<S2SV_ModStart> { if ( <S2SV_ModEnd>! caller_is_in_ancestor ( <S2SV_ModStart>, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 0600 ; sb ->",0
102,"<S2SV_ModStart> flag ) { ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and",0
103,"<S2SV_ModStart> ) ) { if ( ptr -> flags & FD_RAW_READ ) { ret = copy_to_user ( param, ptr, sizeof ( * ptr ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_EXEC ) && ( ptr -> flags & FD_RAW_",0
104,"<S2SV_ModStart> ( ( new -> euid!= 0 || new -> egid!= 0 ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> cap_permitted = cap_intersect ( new -> cap_permitted, old -> cap_permitted ) ; } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> egid ; if ( effective ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset ( CAP_FULL_SET, new -> cap_effective ) ) { if (! cap_issubset (",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! ce ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { r_socket_http_error ( s, ""HTTP/1.1 403 <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden <S2SV_blank> Forbidden",0
107,<S2SV_ModStart> c == LUA_SIGNATURE [ 0 ] || <S2SV_ModEnd> c == LUA_SIGNATURE,0
108,"<S2SV_ModStart> = 0 ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> = 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) { inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; sock -> state = SS_UNCONNECTED ; goto out_rcu_unlock ; } inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt ) goto out_rcu_unlock ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt ) goto out_rcu_unlock ; goto out_rcu_unlock ; } inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt ) goto out_rcu_unlock",0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( opt -> opt. opt_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
110,"<S2SV_ModStart> ; dl = kmalloc_array <S2SV_ModEnd> ( size, <S2SV_ModStart>, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = * dev -> src ; ( di + n ) -> dst = * dev -> dst ; bacpy ( & ( di + n ) -> src, & dev -> src ) ; bacpy ( & ( di + n ) -> dst, & dev -> dst ) ; if ( ++ n >= dev_num ) break ; }",0
111,<S2SV_ModStart> trunc : ND_PRINT (,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ) tptr, u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_TCHECK2 ( * tptr, pdu_len <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case RPKI_RTR_CACHE_RESET_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Cache: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_16BITS ( pdu_header -> u. session_id ) ) ; break ; case RPKI_RTR_CACHE_RESPONSE_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart>! rose_parse_facilities ( skb <S2SV_ModEnd>, & facilities <S2SV_ModStart> & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ||",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> )",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = node -> nd_cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> 0 ; } write_lock ( & cluster -> cl_nodes_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if ( length < BSD_MINLEN ) { ND_PRINT ( ( ndo, ""[|null]"" ) ) ; return ( NULL_HDRLEN ) ; } <S2SV_ModStart> case BSD_AFNUM_APPLETALK : if ( length < BSD_MINLEN ) { ND_PRINT ( ( ndo, ""[|null]"" ) ) ; return ( NULL_HDRLEN ) ; }",0
119,"<S2SV_ModStart> separator = * src ++ ; for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } else if ( src [ 0 ] == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } else if ( src [ 0 ] == '/' ) { src ++ ; continue ; } else if ( src [ 0 ] == '.' ) { if ( src [ 1 ] == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context <S2SV_ModEnd>, UINT16 bits <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled ; UINT32 i_Swizzled ; while ( resultKey -> t. size < bytes ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2",0
121,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size )",0
122,<S2SV_ModStart> s ) { if ( s > UINT32_MAX / sizeof ( tdata_t ) ) { return ( malloc ( ( size_t ) s ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE (! access_ok ( VERIFY_WRITE, data, count ) ) ) { ret = - EACCES ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } dest = ( void * ) dest ; src = ( void * ) src ; break ; case QIB_CMD_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_TID_UPDATE : copy = sizeof ( cmd. cmd. tid_update ) ; dest = & cmd. cmd. tid_update ; src = & ucmd -> cmd. tid_update ; break ; case QIB_CMD_TID_FREE : copy = sizeof ( cmd. cmd. tid_free ) ; dest = & cmd. cmd. tid_free ; src = & ucmd -> cmd. tid_",0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,<S2SV_ModStart> peer ) get_net ( peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;,0
126,"<S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { <S2SV_ModStart> ; } } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc",0
127,<S2SV_ModStart> ; if (! POKE_UINT8 ( c_id_subtype ) && POKE_UINT8 ( c_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p,0
128,<S2SV_ModStart> datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] < csp ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] < tdp ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op,0
129,<S2SV_ModStart> ) ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock <S2SV_ModEnd> ) ; sp <S2SV_ModStart> ) ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock <S2SV_ModEnd> ) ; spin_lock_bh <S2SV_ModStart> ) ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock <S2SV_ModEnd> ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_lock_bh ( & net -> sctp. addr_wq_lock ) ; spin_unlock_bh ( & net -> sctp. addr_wq_lock ) ; spin,0
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> = get_bits ( <S2SV_ModEnd> gb, 4 <S2SV_ModStart> gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; if (! test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode )",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> LSM <S2SV_blank> rule <S2SV_blank> %d\\n"", __func__, result ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid LSM <S2SV_blank> rule <S2SV_blank> %d\\n"", __func__, result ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid LSM <S2SV_blank> rule <S2SV_blank> %d\\n"", __func__, result ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; return result ;",0
133,<S2SV_ModStart> file ) ; file -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred ->,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { __be32 <S2SV_ModEnd> savep ; uint32_t <S2SV_ModStart> int status ; * acl_len = 0 ; if ( <S2SV_ModEnd> decode_op_hdr ( xdr <S2SV_ModStart> OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart> acl_len ) ; <S2SV_ModEnd>",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen <,0
138,<S2SV_ModStart> while ( ( tmpName [ i ] && ( i < to_read ) ) ) { i ++ ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read - 1 ) { ptr -> nameURN = NULL ; ptr -> location = NULL ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> location = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> AVPALETTE_SIZE ) ; if (! in -> data [ plane ] ) { av_frame_free ( & in ) ; return AVERROR ( ENOMEM ) ; } for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < width ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX - 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX - 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( smatch ( group, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } }",0
143,<S2SV_ModStart> = CDF_TOLE4 ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ;,0
144,"<S2SV_ModStart> ; if ( inet -> inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> struct eigrp_tlv_at_cable_setup_t * eigrp_tlv_at_cable_setup ; } ND_TCHECK ( * eigrp_tlv_at_ext ) ; <S2SV_ModStart> eigrp_tlv_at_ext ) ; ND_TCHECK ( * eigrp_tlv_at_int ) ; if ( eigrp_tlv_at_cable_setup ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> at <S2SV_blank> cable <S2SV_blank> setup <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } ND_TCHECK ( * eigrp_tlv_at_ext ) ; <S2SV_ModStart> eigrp_tlv_at_ext ) ; ND_TCHECK ( * eigrp_tlv_at_int ) ; if ( eigrp_tlv_at_cable_setup ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> at <S2SV_blank> cable <S2SV_blank> setup <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> at <S2SV_blank> cable <S2SV_blank> setup",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( number_aau < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; # else addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] <S2SV_ModEnd> ; res = <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] <S2SV_ModEnd> ; res = <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_",0
149,"<S2SV_ModStart> 0 ) ; } if ( strcmp ( ptr, '/' ) == 0 ) { rw_exit ( & sdvp -> sdev_contents ) ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_dsk, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_dsk, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_dsk, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_rdsk, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
152,"<S2SV_ModStart> ; final_p = rcu_dereference_protected <S2SV_ModEnd> ( np -> <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; dst = ip6_dst_lookup_flow ( sk, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; } dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; dst = ip6_dst_lookup_flow ( sk, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; }",0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0 ; uint16 planar = 0 ; uint16 bps = 0, spp = 0 ; uint16 orientation = 0 ; TIFFGetFieldDefaulted ( in, TIFFTAG_PLANARCONFIG, & planar ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bps ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_SAMPLESPERPIXEL, & spp ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_ORIENTATION, & orientation ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, & width ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> width <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGELENGTH, & length ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> length <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanlinesize <S2SV_blank> tag"" )",0
154,"<S2SV_ModStart> 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 || strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_host, fwd. listen_port, ( u_short ) packet_get_int ( ) <S2SV_ModEnd> ) ; debug <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) packet_get_int ( ) <S2SV_ModEnd> ; debug ( <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_host, fwd. listen_port, ( u_short ) packet_get_int ( ) <S2SV_ModEnd> ) ; debug <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) packet_get_int ( ) <S2SV_ModEnd> ) ; }",0
156,<S2SV_ModStart> = & l2tp_eth_netdev_ops ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> } if ( ( gr -> gr_ctx. value = kmalloc ( sizeof ( gss_union_ctx_id_desc ), GFP_KERNEL ) ) == NULL ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> after <S2SV_blank> allocating <S2SV_blank> gss_union_ctx_id_desc: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> after <S2SV_blank> allocating <S2SV_blank> gss_union_ctx_id_desc\\n"" ) ; return ( FALSE ) ; } <S2SV_ModEnd> log_debug ( ""in <S2SV_blank> svcauth_gss_accept_context: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> after <S2SV_blank> allocating <S2SV_blank> gss_union_ctx_id_desc: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> after <S2SV_blank> allocating <S2SV_blank> memory <S2SV_blank> after <S2SV_blank> allocating <S2SV_blank> gss_union_ctx_id_desc: <S2SV_blank> out <S2SV_blank> memory <S2SV_blank> after <S2SV_blank> allocating <S2SV_blank> gss_union_ctx_id_desc\\n""",0
159,"<S2SV_ModStart> err = 0 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; <S2SV_ModStart> out ; } ei_inode = EXT4_I ( inode ) ; neh = ext_block_hdr ( bh ) ; if ( ei_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, ei_inode -> i_blocks - 1 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, ei_inode -> i_blocks - 1 ) ) ; neh = ext_block_hdr ( bh ) ; if ( ei_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, ei_inode -> i_blocks - 1 ) ) ; else neh -> eh_max =",0
160,"<S2SV_ModStart> 1 ; } s_log ( LOG_INFO, ""Certificate <S2SV_blank> verification <S2SV_blank> disabled"" ) ; return 1 ; } if ( verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 1 ;",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if (! memcmp <S2SV_ModEnd> ( cmac,",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } c -> nreslevels2decode = c -> nreslevels - s -> reduction_factor ; c -> log2_cblk_width = c -> log2_cblk_height = c -> log2_cblk_width ; c -> log2_cblk_height = c -> log2_cblk_width ; c -> log2_cblk_height = c -> log2_cblk_height ; if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alSpeaker = Cvar_Get ( ""s_alSpeaker"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alSpeaker = Cvar_Get ( ""s_alSpeaker"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alSpeaker = Cvar_Get ( ""s_alSpeaker"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alSpeaker = Cvar_Get ( ""s_alSpeaker"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alSpeaker = Cvar_Get ( ""s_alSpeaker"", """", CVAR_ARCHIVE | CVAR_LATCH ) ;",0
165,<S2SV_ModStart> ts_status ; bool is_drop_n_account = false ; <S2SV_ModStart> is_drop_n_account = true ; if ( skb -> pkt_type == PACKET_LOOPBACK ) { if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_UNNEGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGO ) { if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_UNNEGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGO,0
166,"<S2SV_ModStart> ) ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { list_add_tail ( & trans -> transports, & new -> peer. transport_addr_list ) ; sctp_assoc_rm_peer ( asoc, trans ) ; }",0
167,<S2SV_ModStart> return false ; if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> lsm_set_label_at ( int <S2SV_ModStart> lsm_label ) { int labelfd = - 1 ; int ret <S2SV_ModEnd> = 0 ; <S2SV_ModStart> 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to",0
169,<S2SV_ModStart> ) ) { if ( ( comp -> dx + comp -> dx ) > ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( comp -> dy + ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) ( OPJ_UINT32 ) (,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; } cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
172,<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; if ( curqlevel == NULL ) { g_error ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_,0
173,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ) hash ) ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> : ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_block, le32_to_cpu ( BHDR ( bh ) -> h_refcount ), EXT4_XATTR_REFCOUNT_MAX ) ; } brelse ( bh ) ; * pce = ce ; return bh ; } <S2SV_ModEnd>",0
174,"<S2SV_ModStart> data_offset ) { int pkt_len ; char line [ COSINE_LINE_LENGTH ] ; <S2SV_ModStart> offset ; pkt_len = parse_cosine_rec_hdr ( wth, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> -> frame_buffer, <S2SV_ModEnd> err, err_info <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> err, err_info ) <S2SV_ModEnd> ; } <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if (",0
177,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( Cor",0
178,"<S2SV_ModStart> ; if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; }",0
179,<S2SV_ModStart> int hstartcol ; register jpc_fix_t * dstptr ; register jpc_fix_t * srcptr ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; register jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; register jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; int m ; hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * dstptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ],0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x07 char * buf <S2SV_ModEnd> ; int opcode <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobByte ( image, & buf <S2SV_ModEnd> ) ; image",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_mount_state & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; ext2_sync_super ( sb, es, 1 ) ; } db_count = sbi -> s_gdb_count ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) if ( sbi -> s_group",0
183,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""Using <S2SV_blank> USB <S2SV_blank> interface <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""Using <S2SV_blank> USB <S2SV_blank> interface <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg (",0
184,"<S2SV_ModStart> ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove",0
185,"<S2SV_ModStart> node ) { struct o2nm_cluster * o2nm_cluster ; if ( node -> nd_item. ci_parent ) { o2nm_cluster = container_of ( node -> nd_item. ci_parent, struct o2nm_cluster, node ) ; return o2nm_cluster ; } <S2SV_ModEnd> return to_o2nm_cluster ( <S2SV_ModStart> -> ci_parent ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ; if ( avio_read_bit ( pb, 1 )!= 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> %d\\n"", avio_read_bit ( pb, 1 ) ) ; return AVERROR ( ENOMEM ) ; } <S2SV_ModStart> ; if ( avio_read_bit ( pb, 1 )!= 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> %d\\n"", avio_read_bit ( pb, 1 ) ) ; return AVERROR ( ENOMEM ) ; } if ( avio_read_bit ( pb, 1 )!= 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> %d\\n"", avio_read_bit ( pb, 1 ) ) ; return AVERROR ( ENOMEM ) ; } if ( avio_read_bit ( pb, 1 )!= 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> %d\\n"", avi",0
188,<S2SV_ModStart> = CDF_TOLE4 ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ;,0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, <S2SV_ModEnd> ""cryptostats"", & <S2SV_ModStart> cryptostats ) ; filegen_register ( statsdir, <S2SV_ModEnd> ""timingstats"", & <S2SV_ModStart> timingstats ) ; filegen_register ( statsdir, <S2SV_ModEnd> ""step_callback"", &",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & n -> mnt_mounts ) ) attach_shadowed ( mnt, parent <S2SV_ModEnd>, shadows )",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { load_fs_index ( next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { load_gs_index ( next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> es ) wrmsrl ( MSR_ES_BASE, next -> es ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { load_fs_index ( next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( next -> ds ) wrmsrl ( MSR_DS_BASE, next -> ds ) ; if ( gsindex ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev ->",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> update_gui_state_from_problem_data ( 0,0
194,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ;,0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << DB_VECTOR ) ; if ( ( vcpu -> guest_debug & KVM_GUESTDBG_ENABLE ) == ( KVM_GUESTDBG_ENABLE ) ) eb |= 1u << BP_VECTOR ; if ( ( vcpu -> guest_debug & KVM_GUESTDBG_USE_SW_BP ) ) eb |= 1u << BP_VECTOR ; if ( ( vcpu -> guest_debug & KVM_GUESTDBG_ENABLE ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= 1u << PF_VECTOR ; if ( enable_ept ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( is_guest_mode ( vcpu ) ) eb |= ( 1u << DB_VECTOR ),0
196,"<S2SV_ModStart> { static char temp <S2SV_ModEnd> [ NFSX_V3FHMAX + <S2SV_ModStart> NFSX_V3FHMAX + 1 <S2SV_ModEnd> ] ; temp <S2SV_ModStart> sfsname, NFSX_V3FHMAX ) ; if ( temp [ sizeof ( temp ) - 1 ]!= '\\0' ) temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, temp [ sizeof ( temp ) - 1 ] ) ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; }",0
197,"<S2SV_ModStart> transhdrlen, int <S2SV_ModEnd> mtu, unsigned <S2SV_ModStart> skb_gso_udp ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) ->",0
198,"<S2SV_ModStart> return res ; res = hsr_create_self_node ( & hsr -> self_node_db, hsr_dev -> dev_addr ) ; if ( res < 0 ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_create_self_node ( & hsr -> self_node_db, hsr_dev -> dev_addr, hsr_dev -> dev_addr, hsr_dev -> dev_addr ) ; if ( res < 0 ) goto fail ; res = hsr_create_self_node ( & hsr -> self_node_db, hsr_dev -> dev_addr, hsr_dev -> dev_addr ) ; if ( res < 0 ) goto fail ; res = hsr_create_self_node ( & hsr -> self_node_db, hsr_dev -> dev_addr, h",0
199,"<S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_SHORT ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_SHORT ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_SHORT ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_SHORT ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_SHORT ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_SHORT ) ; }",0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> { uint8_t * const buffers <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst",0
201,<S2SV_ModStart> ++ ) ; if (! args -> stable ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( args -> count ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( args -> count ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) { switch ( ctxt -> op_bytes ) { case 1 : ctxt -> _eip = ( u16 ) dst ; break ; case 2 : ctxt -> _eip = ( u32 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; case 8 : ctxt -> _eip = ( u16 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining ( tvb, offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = g_strdup ( """" ) ; return offset + ( len + 1 ) * 2 ; }",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) { ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { get_block = ocfs2_get_block ; ret = __blockdev_direct_IO ( iocb, inode, file -> f_mapping -> host, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", ( void * ) <S2SV_ModStart>, strparm ) ; if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%i"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%",0
208,"<S2SV_ModStart> val < 0 ) { write_mmcr0 ( cpuhw, <S2SV_ModEnd> cpuhw -> mmcr",0
209,<S2SV_ModStart> = len ; if ( len >= 0 ) len += tested ;,0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> ; int all_whitespace <S2SV_ModEnd> ; int kind <S2SV_ModStart> ; PyObject * o, * fstring_name <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ':' ) ; all_whitespace = 1 ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; memcpy ( str + 2, expr_start, len ) ; str [ 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; <S2SV_ModEnd> while ( c",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %",0
215,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
216,"<S2SV_ModStart> - EINVAL ; if ( vlen < sizeof ( struct mmsghdr ) ) return - EINVAL ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ; <S2SV_ModEnd> return datagrams ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; int ret ; skb -> protocol = eth_type_trans ( skb ) <S2SV_ModEnd> ; ret = <S2SV_ModStart> hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; return ( netdev_tx_t ) ret ; } ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_errors ++ ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MIN, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_TTL_MAX, <S2SV_ModStart>, TEMPORARY_TTL_MAX, TEMPORARY_TTL_MAX <S2SV_ModEnd>, TEMPORARY_",0
221,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { char * user_config = NULL, * repo_config = NULL ; <S2SV_ModStart> = perf_pathdup ( <S2SV_ModEnd> ""config"" ) ; <S2SV_ModStart> ) ; } user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; if ( found == 0 && home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; } if ( found == 0 && home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free",0
224,<S2SV_ModStart> <S2SV_null> <S2SV_null> int validate_event <S2SV_ModEnd> ( struct pmu_hw_events <S2SV_ModStart> event ) { <S2SV_ModEnd> struct hw_perf_event fake_event <S2SV_ModStart>!= leader_pmu || <S2SV_ModEnd> event -> state <S2SV_ModStart> state < PERF_EVENT_STATE_OFF <S2SV_ModEnd> ) return 1 <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { if ( new_map -> nr_extents > 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( uid_eq ( uid, current_fsuid ( ) ) ) return true ; if ( gid_eq ( gid, current_fsgid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETUID ) { kuid_t uid = make_kuid ( user_ns -> user_ns, id ) ; if ( uid_eq ( uid, current_fsuid ( ) ) return true ; } else if ( cap_setid == CAP_SETGID ) { kgid_t gid = make_kgid ( user_ns -> user_ns, id ) ; if ( gid_eq ( gid, current_fsgid ( ) ) return true ; } else if ( cap_valid ( cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid )",0
226,"<S2SV_ModStart> ) { body [ j ] = CHECKED_XMALLOC ( VarLenData, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]",0
227,"<S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; int ret <S2SV_ModStart>, pos = 0 ; struct hexline * hx = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; hx = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 1 ) )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> stop <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; while ( ( ret = dvb_usb_get_hexline ( fw, hx, & pos ) ) > 0 ) { deb_fw ( ""writing <S2SV_blank> to <S2SV_blank> address <S2SV_blank> 0x%04x <S2SV_blank> (buffer: <S2SV_blank> 0x%02x <S2SV_blank> %02x)\\n"", hx -> addr, hx -> len, hx -> chk ) ; ret = usb_cypress_writemem ( udev, hx -> addr, hx -> data, hx -> len ) ; if ( ret!= hx -> len ) { err ( ""error <S2SV_blank> while <S2SV_blank> transferring <S2SV_blank> firmware <S2SV_blank> (transferred <S2SV_blank> size: <S2SV_blank> %",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length <S2SV_ModEnd> ++ ; val_l <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> ) ) ; length <S2SV_ModEnd> ++ ; ND_PRINT <S2SV_ModStart> )",0
229,"<S2SV_ModStart> ; if ( c1 && c2 && strncmp ( c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( handle -> params. realm, ""kadmin"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length",0
230,"<S2SV_ModStart> * bo ; uint32_t bin_size = 0 ; uint32_t shader_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t uniforms_offset = roundup ( bin_offset + args -> shader_cl_size, 16 ) ; uint32_t exec_size = roundup ( bin_size + args -> shader_rec_size, 16 ) ; if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || exec_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } bin_size = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; exec_size = roundup ( bin_size + args -> shader_rec_size, 16 ) ; if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || exec_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail",0
231,<S2SV_ModStart> endif # if HAVA_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
232,"<S2SV_ModStart> -> vm_file ) ; if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_nonda_switch ( inode -> i_sb ) ) { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } else if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_journal_data ( inode ) &&! ext4_nonda_switch ( inode -> i_sb, DELALLOC ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb, DELALLOC ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_",0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> arg ) { r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\r' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; break ; default : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; } arg ++ ; } if ( * arg == '\\t' ) { r_return_val_if_fail ( * arg, NULL ) ; } else if ( * arg == '\\r' ) { r_return_val_if_fail ( * arg == '\\t' ) ; r_return_val_if_fail ( * arg == '\\r' ) ; break ; default : * b ++ <S2SV_ModEnd> = * arg",0
235,"<S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ) ;",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return TRUE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return TRUE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object",0
237,<S2SV_ModStart> ; if ( unlikely (,0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", ""master"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", ""master"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", ""master"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
239,"<S2SV_ModStart> ; break ; case IPPROTO_TCP : v. val =!! sock_flag ( sk, IPPROTO_UDP ) ; break ; case IPPROTO_UDP : v. val =!! sock_flag ( sk, IPPROTO_RAW ) ; break ; case IPPROTO_UDP : v. val =!! sock_flag ( sk, IPPROTO_RAW ) ; break ; case IPPROTO_RAW : v. val =!! sock_flag ( sk, IPPROTO_TCP ) ; break ; case IPPROTO_UDP : v. val =!! sock_flag ( sk, IPPROTO_UDP ) ; break ; case IPPROTO_UDP : v. val =!! sock_flag ( sk, IPPROTO_RAW ) ; break ; case IPPROTO_RAW : v. val =!! sock_flag ( sk, IPPROTO_RAW ) ; break ; case IPPROTO_RAW : v. val =!! sock_flag ( sk, IPPROTO_RAW ) ; break ; case IPPROTO_UDP : v. val =!! sock_flag ( sk, IPPROTO_UDP ) ; break ; case IPPROTO_TCP : v. val =!! sock_flag (",0
240,"<S2SV_ModStart> sk_shutdown & RCV_SHUTDOWN ) { msg -> msg_namelen = 0 ; return 0 ; } copied = skb -> len ; if ( len < copied ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( err == 0 ) { sock_recv_ts_and_drops ( msg, sk, skb ) ; if ( bt_sk ( sk ) -> skb_msg_name ) bt_sk ( sk ) -> skb_msg_name ( skb, msg -> msg_name, & msg -> msg_namelen ) ; else msg -> msg_namelen = 0 ; } <S2SV_ModEnd> return err?",0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL )",0
244,"<S2SV_ModStart> out_free ; } kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size, kvm_iommu_unmap_pages ( kvm, mem -> memory_size ) ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> memory_size ) ; kvm_iommu_unmap_pages ( kvm, mem -> guest_phys_addr, mem -> memory",0
245,"<S2SV_ModStart> err = 0 ; } if (! err ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ;",0
246,"<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = iov -> iov_len ; iov ++ ) { if (! list_empty ( & ctx -> tsgl ) ) { struct skcipher_sg_list * sgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; struct skcipher_sg_list * sgl = sgl -> sg ; for ( i = 0 ; i < iov -> iov_len ; i ++ ) { struct skcipher_sg_list * sgl = sgl -> sg ; while (! sgl -> length ) sgl ++ ; if (! sgl -> length ) { struct skcipher_sg_list * sgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; struct skcipher_sg_list * sgl = sgl -> sg ; for ( i = 0 ; i < iov -> iov_len ; i ++ ) { struct skcipher_sg_list * sgl =",0
247,"<S2SV_ModStart> ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> case RIP6_REQUEST : if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; <S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; <S2SV_ModStart> } if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_RESPONSE : if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; break ; case R",0
248,<S2SV_ModStart> < 0 ) { if ( ret!= - EEXIST ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_USER_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = install_user_session_keyring_to_cred ( new ) ; if ( ret!= - EEXIST ) goto error ; ret = install_user_session_keyring_to_cred ( new ) ; if ( ret!= - EEXIST,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,<S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ;,0
251,<S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } <S2SV_ModEnd> if ( dTotalWeight,0
252,<S2SV_ModStart> user ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; <S2SV_ModStart> user ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" <S2SV_ModEnd> ) ; return",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; <S2SV_ModStart> mobj ) { memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart>, 0 ), 0, size ) ; return mobj ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
256,<S2SV_ModStart> += incr ; if (! timer -> it_overrun ) { timer -> it_overrun = 0 ; delta -= incr ; },0
257,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Comment <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Comment <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = compre",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; for ( idx = 0 ; idx <",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> scsi_req_data ( &",0
262,<S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT || <S2SV_ModEnd> cs < 0,0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE",0
264,<S2SV_ModStart> ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) {,0
265,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
266,"<S2SV_ModStart> ) ) { ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> - 1 ) ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * ie ; char c = '<' ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ) ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct id_off * ) ie ; for ( ie = io + ps -> nid ; ie < ie && ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart> -> usb_dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"" <S2SV_ModEnd>, reg ) <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, 0, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, 0, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> ( 2 + <S2SV_ModStart> -> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * azModuleArg ; <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, <S2SV_ModEnd> pTable -> azModuleArg",0
270,<S2SV_ModStart> } } } outbuffer [ XMLRPC_BUFSIZE - 1 ] = '\\0' ;,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error",0
272,"<S2SV_ModStart> 32 ) { ut32 addr32 = r_read_le32 ( buf + i ) ; <S2SV_ModStart> } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; } } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; } } <S2SV_ModEnd> free ( buf",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl >= 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; if ( subl == 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl >= 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl",0
274,"<S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; memset ( anal_buf, 0, TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; <S2SV_ModStart> -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; memset ( anal_buf, 0, TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) )",0
275,"<S2SV_ModStart> -> enc, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, reg -> dmin, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, reg -> dmin, reg -> dmin, reg -> dmin <S2SV_ModStart> -> enc, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin <S2SV_ModStart> -> dmin, reg -> dmin <S2SV_ModStart> -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin, reg -> dmin ) ;",0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_,0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; } if ( unlikely ( <S2SV_ModStart> work_to_do < 0 ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModStart>. req_cons ; if ( unlikely ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, & txfrags [ idx ] ) ; continue ; } <S2SV_ModStart>. size ; if ( unlikely ( txreq. flags & XEN_NETTXF_extra_info ) ) { netbk_tx_err ( vif, & txfrags [ idx ] ) ; continue ; } <S2SV_ModStart>. size ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx. req_cons ; if ( unlikely ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do",0
279,<S2SV_ModStart> cb -> args [ 0 <S2SV_ModEnd> ] ; struct <S2SV_ModStart> walk = ( struct xfrm_policy_walk <S2SV_ModEnd> * ) &,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp ; <S2SV_ModStart> -> status ; txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; for ( i = 0 ; i < nr_frags ; i ++ ) { int j, newerr ; pending_ring_idx_t index ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( unlikely (! newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, resize_image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, resize_image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, resize_image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( resize_image ) ) ;",0
284,"<S2SV_ModStart> ; incoming_cn_msg -> data = kmalloc ( len, GFP_KERNEL ) ; if (! incoming_cn_msg -> data ) { free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; incoming_cn_msg -> data = kmalloc ( len, GFP_KERNEL ) ; if (! incoming_cn_msg -> data ) { free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; incoming_cn_msg -> data = kmalloc ( len, GFP_KERNEL ) ; if (! incoming_cn_msg -> data ) { free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; }",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> ; if ( client -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_",0
287,"<S2SV_ModStart> + x > <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,"<S2SV_ModStart> ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> ebh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; goto out_err ; } } if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> ebh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ; goto out_err ; } } if (! fibh -> sbh ) { fibh -> sbh = udf_tread_super ( dir -> i_sb, block ) ;",0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL || cmd == IP_VS_SO_GET_DAEMON ) { d [ 0 ]. state = IP_VS_STATE_DEFAULT ; strlcpy ( d [ 0 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 0 ]. mcast_ifn ) ) ; d [ 0 ]. syncid = ipvs -> master_syncid ; } else if ( cmd == IP_VS_BASE_CTL ) { pr_err ( ""get_ctl: <S2SV_blank> len <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> %u\\n"", sizeof ( d [ 0 ]. mcast_ifn ) ) ; d [ 1 ]. state = IP_VS_STATE_DEFAULT ; strlcpy ( d [ 1 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; d [ 1 ]. syncid = ipvs -> backup_syncid ; }",0
290,<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ;,0
291,<S2SV_ModStart> struct ib_ucm_cmd_hdr hdr ; size_t result ; if (! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_,0
292,"<S2SV_ModStart>, * controller <S2SV_ModEnd> = NULL, <S2SV_ModStart> ( fc, controller <S2SV_ModEnd>, path1, <S2SV_ModStart> O_RDWR ) ) { if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_may_access ( fc -> pid, controller, path1, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup",0
293,<S2SV_ModStart> queue ) { kfree ( disk ) ; <S2SV_ModStart> continue ; } if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) { kfree ( disk ) ; continue ; } if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) { kfree ( disk ) ; continue ; } if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) { kfree ( disk ) ; continue ; } if (! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) &&! capable ( CAP_SYS_RAWIO ) ) kfree ( disk,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> break ; case VFF_TYP_BIT : case VFF_TYP_1_BYTE : case VFF_TYP_2_BYTE : case VFF_TYP_4_BYTE : case VFF_TYP_DOUBLE : case VFF_TYP_BIT : case VFF_TYP_BIT : case VFF_TYP_BIT_8 : case VFF_TYP_BIT_16 : case VFF_TYP_BIT_16 <S2SV_ModEnd> : if ( <S2SV_ModStart> break ; case VFF_TYP_BIT : case VFF_TYP_1_BYTE : case VFF_TYP_2_BYTE : case VFF_TYP_4_BYTE : case VFF_TYP_DOUBLE : case VFF_TYP_BIT : case VFF_TYP_BIT_8 : case VFF_TYP_BIT_16 : case VFF_TYP_BIT_8 : case VFF_TYP_BIT_16 : case VFF_TYP_BIT_8 : case VFF_TYP_5_BYTE : case VFF_TYP_5_BYTE : case VFF_TYP,0
296,"<S2SV_ModStart> ; int64_t index_pts ; av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; index_pts = FFMAX ( av_rescale ( itime, i, 10000 ), ict ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_DEBUG, ""index_pts:0x%"" PRIx64 "", <S2SV_blank> index_pts:%d\\n"", index_pts ) ; goto end ; }",0
297,<S2SV_ModStart> srp ) ; mutex_lock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock ( & sfp -> rq_lock <S2SV_ModEnd> ) ; return,0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""smtp_alert_vrrp"", & smtp_alert_vrrp_handler ) ; # endif # ifdef _WITH_LVS",0
299,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_ctx_t * ctx = ( vpx_codec_ctx_t * ) ctx ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; vpx_codec_priv_enc_mr_cfg_t_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_,0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; tmpptr = key + 1 ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart>, USEC_INFINITY, 0 <S2SV_ModEnd> ) ; }",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, box",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr. hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && vnet_hdr. csum_start + vnet_hdr. csum_offset + 2 > len ) vnet_hdr. hdr_len = vnet_hdr. csum_start + vnet_hdr. csum_offset + 2 ; } if ( q -> flags & IFF_VNET_HDR ) { err = - EINVAL ; if ( vnet_hdr. hdr_len > len ) goto err ; vnet_hdr. hdr_len = len - vnet_hdr. csum_offset ; vnet_hdr. hdr_len = vnet_hdr. csum_start + vnet_hdr. csum_offset + 2 ; err = - EINVAL ; if ( vnet_hdr. hdr_len > len ) goto err,0
305,<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) ; <S2SV_ModStart> ( offset + ipv6_optlen ( exthdr ) <S2SV_ModEnd> <= packet_len ) <S2SV_ModStart> offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ]",0
308,"<S2SV_ModStart> sll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart>. msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; msg -> msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; msg -> msg_namelen = sizeof ( * sll ) ; msg -> msg_namelen = min_t ( size_t, len, sizeof ( * sll ) ) ; <S2SV_ModEnd> msg -> msg_namelen",0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index )",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr = ( sctp_addiphdr_t * ) asconf -> skb -> data ; union sctp_addr_param * addr_param = ( union sctp_addr_param * ) ( asconf -> skb -> data + sizeof ( sctp_addiphdr_t ) ) ; union sctp_addr_param * asconf_param = ( void * ) asconf -> skb -> data + length ; err_code = sctp_process_asconf_param ( asoc, asconf, addr_param ) ; if ( SCTP_ERROR_NO_ERROR == err_code ) { sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if (! err_code ) goto done ; length = ntohs ( asconf_param -> param_hdr. length )",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu) <S2SV_blank> -> <S2SV_blank> %p\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if (,0
316,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> response_done ; } memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> + 1 ) ; memcpy ( kvp_data -> data. key, key_name, keylen ) ; memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> + 1 ) ; memcpy <S2SV_ModEnd> ( kvp_data -> <S2SV_ModStart> + 1 ) ; memcpy ( kvp_data -> data. value, value, valuelen ) ; memcpy ( kvp_data -> data. key_type, valuelen ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; kvp_data -> data. key_type = REG_SZ ; kvp_data -> data. value_type = REG_SZ ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; memcpy ( kvp_data -> data. value, value, valuelen ) ; memcpy ( kvp_data -> data. value_type, valuelen ) ; memcpy ( kvp_data -> data. value_type, valuelen ) ; memcpy ( kvp_data -> data",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; } <S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; } <S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; ctx = eventfd_ctx_fileget ( eventfp ) ; ctx = NULL ; } else { mutex_unlock ( & d -> mutex ) ; ctx = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ; } } if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; break ; } if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; ctx = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ; },0
319,<S2SV_ModStart> ; } } else if ( ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) &&,0
320,"<S2SV_ModStart> ; int is_ext_ctrl <S2SV_ModEnd> ; long err <S2SV_ModStart> - EINVAL ; size_t ctrls_size = 0 ; void __user * user_ptr = NULL <S2SV_ModEnd> ; int is_ext_ctrl <S2SV_ModStart> case _IOC_NONE : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; mbuf = kmalloc ( ctrls_size, GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mbuf = kmalloc ( ctrls_size, GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC",0
321,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'""",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> ) { return <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0 ), RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, indx <S2SV_ModEnd>, data, <S2SV_ModStart> 500 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { usb_serial_debug_data ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; <S2SV_ModStart> actual_length ) { usb_serial_debug_data ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- data ; } if (! usb_serial_debug_data ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; edge_port",0
325,"<S2SV_ModStart> cifs_find_smb_ses ( struct TCP_Server_Info * server, const <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) continue ; ++ ses -> ses_count ; } write_unlock ( & cifs_tcp_ses_lock ) ; if (! list_empty ( & server -> smb_ses_list ) ) { list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) continue ; ++ ses -> ses_count ; write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ) ERROR <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # else if ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_",0
327,"<S2SV_ModStart>'<S2SV_blank>') input ++ ; ptr = strchr ( input,'<S2SV_blank>') ; if ( ptr ) { * ptr = 0 ; ptr ++ ; ptr2 = strchr ( ptr,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; free ( ptr ) ; } break ; case '/' : eprintf ( ""List <S2SV_blank> commands <S2SV_blank> in <S2SV_blank> radare <S2SV_blank> format\\n""",0
328,"<S2SV_ModStart> ) ; if ( vm_flags & VM_NORESERVE ) return 0 ; if ( <S2SV_ModStart> return chg ; ret = hugetlb_get_quota ( inode <S2SV_ModEnd>, chg ) <S2SV_ModStart> 0 ) { ret = <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; <S2SV_ModEnd> return ret ;",0
329,<S2SV_ModStart> new ) { <S2SV_ModEnd> keyring = keyring_alloc,0
330,"<S2SV_ModStart> size_t scanned ; size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd + readnbd, cmd + readnbd ) ; readnbd = ( size_t ) 0U ; }",0
331,"<S2SV_ModStart> & orig ) ; mrb_value fptr_copy ; mrb_value fptr_orig ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; fptr_copy -> fd = mrb_dup ( mrb, fptr_orig -> fd, & failed ) ; if ( failed ) { close ( fptr_copy -> fd ) ; mrb_sys_fail ( mrb, 0 ) ; } mrb_fd_cloexec ( mrb, fp",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, <S2SV_ModStart> callee_params ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( * param ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return",0
335,"<S2SV_ModStart> ; old_cs = get_segment_selector <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> VCPU_SREG_CS ) ; if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> return X86EMUL_CONTINUE ; if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_height ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_width < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> un",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } <S2SV_ModStart>, "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } <S2SV_ModStart>, "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> ( ut32 ) ) ; if (! got_table ) { <S2SV_ModStart> ; } } if ( got_table ) { ut32 offset = 0 ; for ( i = 0 ; i < n_got ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } got_table [ i ]. addr_to_patch = got_entry ; got_table [ i ]. data_offset = got_entry + BFLT_HDR_SIZE ; } got_table [ i ]. addr_to_patch = got_entry ; got_table [ i ]. data_offset = got_entry + BFLT_",0
339,<S2SV_ModStart> -> si_code >= 0 && info -> si_signo >= 0 ) { info -> si_signo = sig ; return - EPERM ; } <S2SV_ModEnd> info -> si_signo,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ),",0
341,"<S2SV_ModStart> char * dir <S2SV_ModEnd>, int lower <S2SV_ModStart> ) fname ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModEnd> x += strlen <S2SV_ModStart> sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ] ; if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xC0 ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { ALLOC_HASHTABLE ( class_hash ) ; zend_hash_init ( class_hash, 0, NULL, NULL, 0 ) ; } if ( class_hash && ( Z_TYPE_P ( classes ) == IS_ARRAY ) ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; zend_hash_init ( class_hash, 0, NULL, NULL, 0 ) ; } if ( class_hash && ( Z_TYPE_P ( classes ) == IS_ARRAY ) ) { zend_hash_init ( class_hash, 0, NULL, NULL, 0 ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ;",0
343,"<S2SV_ModStart> __err ; kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; } } else { tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; }",0
344,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart>,0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int group_count = <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
347,<S2SV_ModStart> ; s -> seekable = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; else s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 10 ) ; if ( s -> filesize == - 1 ) s -> filesize = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> s -> filesize,0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw, maxh ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart> ; upb = ( size_t ) img -> comps [ 0 ]. prec ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxh ; ++ i ) { for ( j = 0U ; j < maxw ; ++ j ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r,",0
349,"<S2SV_ModStart> <S2SV_null> <S2SV_null> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states,",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!=",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL )",0
353,"<S2SV_ModStart> ; char * lbase <S2SV_ModEnd> [ 256 ] <S2SV_ModStart> 256 ] ; char * strbase <S2SV_ModEnd> ; char * <S2SV_ModStart> 256 ] ; char * ltest <S2SV_ModEnd> [ 256 ] <S2SV_ModStart> 256 ] ; char * strtest <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r",0
354,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> ret = cdc_ncm_bind_common <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM <S2SV_ModEnd>, 0 ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModEnd> memcpy ( elem",0
356,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->",0
357,"<S2SV_ModStart> ; err = check_entry_size ( e, limit, hook_entries, underflows, valid_hooks ) ; if ( err ) return err ; for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) if (! ( valid_hooks & ( 1 << h ) ) ) continue ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if (! check_underflow ( e ) ) { pr_debug ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; }",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Chunk <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Chunk <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Chunk <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Chunk <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Chunk <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR",0
359,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) { <S2SV_ModStart> timer ) ; } <S2SV_ModStart> q ) ; <S2SV_ModEnd> snd_use_lock_sync ( &,0
361,"<S2SV_ModStart> int error ; pgoff_t curr ; pgoff_t start = offset >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) <S2SV_ModEnd> >> PAGE_CACHE_SHIFT ; <S2SV_ModStart> ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; <S2SV_ModStart> FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr ++ ; offset += PAGE_CACHE_SIZE ; from = 0 ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; i_size_write ( inode, offset + to ) ; } brelse ( dibh ) ; out",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } }",0
364,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
365,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo. size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo. size = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = & <S2SV_ModStart> -> sd ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ;",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv ) { <S2SV_ModStart> service_name_tlv_length ) ; if ( miux_tlv ) { <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv ) { <S2SV_ModStart> rw_tlv_length ) ; },0
367,"<S2SV_ModStart> ssh * ssh <S2SV_ModEnd> = active_state ; <S2SV_ModStart>. compression ) { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & V",0
369,"<S2SV_ModStart> unsigned int channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, T",0
371,"<S2SV_ModStart> ) ) { struct iphdr iph ; if ( iph -> protocol!= IPPROTO_ICMP || iph -> frag_off!= IP_OFFSET ) goto out ; iph = ip_hdr ( skb_in ) ; itp = skb_header_pointer ( skb_in, iph -> ihl << 2 ) + offsetof ( struct icmphdr, type ) - skb_in -> data, sizeof ( * itp ), & _inner_type ) ; if ( itp == NULL ) { struct iphdr iph ; itp = skb_header_pointer ( skb_in, sizeof ( * iph ), & _inner_type ) ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error ) goto out ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_",0
372,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> Option <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"", tok2str ( bacconfopts_values, ""Unknown"", opt ), opt, len ) ) ; return 0 ; } <S2SV_ModStart> 4 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> Option <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"", tok2str ( bacconfopts_values, ""Unknown"", opt ), opt, len ) ) ; return 0 ; }",0
373,<S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { crypto_free_skcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModEnd> * pt ++,0
378,"<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( tags,",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if (! skb_is_nonlinear ( skb ) ) return 0 ; if (,0
382,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_KP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( n",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> %lu <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"" <S2SV_ModEnd>, tile_buffsize ) <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%lu)"", tile_buffsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%lu)"", ( tl * tile_rowsize ) ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%lu)"", ( tl * tile_rowsize ) ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> (%lu)"", ( tl * tile_rowsize ) ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> }, # if defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; error = <S2SV_ModEnd> register_inout ( dev <S2SV_ModStart> break ; } <S2SV_ModEnd> printf ( ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" <S2SV_ModStart> ; return error <S2SV_ModEnd> ; } <S2SV_null>",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> cl_has_local && cluster -> cl_local_node!= node -> nd_num ) return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmp == cluster -> cl_has_local && cluster -> cl_local_node == node -> nd_num ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; } if (! tmp && cluster -> cl_has_local ) { ret = o2net_stop_listening ( node ) ; if ( ret ) return ret ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } if (! tmp && cluster -> cl_has_local && cluster -> cl_local_node == O2NM_INVALID_NODE_NUM ) { o2net_stop_listening ( node ) ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2N,0
388,"<S2SV_ModStart> ; if (! fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""int"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""double"" ) ) return ( PTA * )",0
389,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x20 : case 0x21 : case 0x22 : case 0x23 : case 0x24 : case 0x25 : case 0x26 : case 0x27 : case 0x2a : case 0x2b : case 0x2c : case 0x2f : case 0x3a : case 0x3b : case 0x3c : case 0x3f : case 0x4a : case 0x4b : case 0x4f : case 0x50 : case 0x51 : case 0x52 : case 0x53 : case 0x54 : case 0x57 : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x6a : case 0x6b : case 0x6e : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f :,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), as",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file )",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> = '\\0' ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p +",0
396,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; <S2SV_ModStart> } else { * obuf = * obuf ; obuf -> flags |= PIPE_BUF_FLAG_NONINTERRUPT ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; obuf -> len = len ; ret += obuf -> len ;,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long err ; mm_segment_t old_fs = get_fs ( ) ; <S2SV_ModStart> KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; <S2SV_ModStart> 0 ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS",0
400,"<S2SV_ModStart> ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; c = find_host_connection ( & md -> iface -> ip_addr, pluto_port, ( ip_address * ) NULL, md -> sender_port, policy ) ; if (! addrinsubnet ( & md -> sender, & d -> spd. that. client, & d -> spd. that. client ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s""",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( context <S2SV_ModEnd>, bmpdata, <S2SV_ModStart> { nsc_encode_subsampling ( context <S2SV_ModEnd> ) ; }",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
403,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_TIPS ) return ARRAY_SIZE ( g_xgmac_tips_string ) ; if ( stringset == ETH_SS_STATS ) return ARRAY_SIZE ( g_xgmac_tips_string ) ; if ( stringset == ETH_SS_TIPS ) return ARRAY_SIZE ( g_xgmac_tips_string ) ; if ( stringset == ETH_SS_TIPS ) return ARRAY_SIZE ( g_xgmac_tips_string ) ;,0
404,<S2SV_ModStart> == 1 ) return ( <S2SV_ModEnd> image -> columns <S2SV_ModStart> ) / 8 ) ; else return ( image -> columns * GetPSDPacketSize ( image ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
405,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd =,0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModEnd> pcu -> ep_ctrl <S2SV_ModStart> -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EIN",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> -> name ; <S2SV_ModEnd> dev = d <S2SV_ModStart> dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME <S2SV_ModEnd>, name ) <S2SV_ModStart> d ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> pirlvl ) { if ( rlvlno == 0 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST",0
409,"<S2SV_ModStart> target_enc ) { * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_NULL ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; } r = conv_enc ( ci -> pattern_enc, ci -> target_enc, pattern, pattern_end, & cpat, & cpat_end ) ; if ( r!= 0 ) { r = ONIGERR_MEMORY ; goto err2 ; } * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_NULL ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= ONIGERR_MEMORY ) goto err2 ;",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> ) { ssize_t bit <S2SV_ModEnd> ; ssize_t x <S2SV_ModStart> ; ssize_t x ; register Quantum index <S2SV_ModEnd> ; index = <S2SV_ModStart> case 1 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; q += GetPixelChannels ( image ) ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 )? 0x01 : 0x",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> const u_char * <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ) )",0
412,"<S2SV_ModStart> ; u64 msr_data <S2SV_ModEnd> ; int usermode <S2SV_ModStart> X86EMUL_MODE_PROT32 ; cs. dpl = 3 ; ss. dpl = 3 ; ss. dpl = 3 ; ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data ) ; switch ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data ) ) { case X86EMUL_MODE_PROT32 : cs_sel = ( u16 ) ( msr_data + 16 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ;",0
413,"<S2SV_ModStart> ; return sprintf ( buf <S2SV_ModEnd>, ""%s\\n"", <S2SV_ModStart> -> driver_override ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } tmpout = BIO_new ( BIO_s_mem ( ) ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; }",0
415,"<S2SV_ModStart> retval, response <S2SV_ModEnd>, NULL )",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vp9_cost_bit ( prob, b ) ; if ( cc <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart>. st_mode & ( S_IRUSR | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in * ) sock_addr ) -> sin_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_in * ) sock_addr ) -> sin_port ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; if ( inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) { strcat ( addr_text, ""]"" )",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; DEB ( printk ( ""sequencer_write(dev=%d, <S2SV_blank> count=%d)\\n"", dev, count ) ) ; <S2SV_ModStart> 0xffff ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( seq_mode == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return - EINVAL ;",0
421,"<S2SV_ModStart> hstate * h <S2SV_ModEnd> = hstate_vma ( <S2SV_ModStart> vma ) ; <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg ; if ( vma_needs_reservation ( h, vma, addr ) ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_page ( alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } <S2SV_ModEnd> set_page_private ( page",0
422,"<S2SV_ModStart> ; DPRINTF ( 4 <S2SV_ModEnd>, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string <S2SV_ModEnd>, filegen_file,",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; <S2SV_ModStart>, GID_INVALID, 0 ) ; timer_set_state ( t, TIMER_RUNNING ) ; return ; } r = manager_add_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ; if ( r < 0 ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t s14, s15 ; tran_high_t s15 = input [ 15 ] ; tran_high_t x0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 13 ] ; tran_high_t x3 = input [ 4 ] ; tran_high_t x4 = input [ 5 ] ; tran_high_t x5 = input [ 6 ] ; tran_high_t x7 = input [ 7 ] ; tran_high_t",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif return flags & mask ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,<S2SV_ModStart> tot_len ) ; if ( newtype == IPV6_HOPOPTS ) { opt2 -> hopopt = IPV6_HOPOPTS ; opt2 -> dst0opt = IPV6_DSTOPTS ; opt2 -> dst1opt = IPV6_DSTOPTS ; } else if ( newtype == IPV6_RTHDR ) { opt2 -> dst1opt = IPV6_DSTOPTS ; } else if ( newtype == IPV6_HOPOPTS ) { opt2 -> hopopt = IPV6_HOPOPTS ; opt2 -> dst0opt = IPV6_RTHDRDSTOPTS ; opt2 -> dst1opt = IPV6_DSTOPTS ; } else if ( newtype == IPV6_RTHDR ) opt2 -> dst1opt = IPV6_DSTOPTS ; else opt2 -> dst1opt = IPV6_DSTOPTS ;,0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { av",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> fpath = NULL <S2SV_ModEnd> ; const char <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
431,<S2SV_ModStart> ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & mnt -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_LOCK,0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } else if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; }",0
433,"<S2SV_ModStart> * rsize >= 100 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } <S2SV_ModEnd> return rdesc ;",0
434,"<S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> serio ) ; if ( str & I8042_STR_OBF ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; if ( irq ) dbg ( ""Interrupt <S2SV_blank> %d, <S2SV_blank> without <S2SV_blank> any <S2SV_blank> data\\n"", irq ) ; goto out ; }",0
436,"<S2SV_ModStart> ) ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } if ( ( dp = parsefh ( ndo, dp, v3 ) ) && ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> newName, uint8_t * udfName, int udfLen, uint8_t * fidName <S2SV_ModEnd>, int fidNameLen <S2SV_ModStart> fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; if ( udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName [ udfLen - 1 ] == '.' && udfName",0
438,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> ] ; const int bs = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; const int hbs = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predict",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_CLOSE_AFTER_REPLY ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_SLAVE ) && ( server. current_client -> flags & CLIENT_CLOSE_AFTER_REPLY ) ) && ( server. current_client -> flags & CLIENT_CLOSE_AFTER_REPLY ) && ( server. current_client -> flags & CLIENT_,0
440,"<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; err = ext4_journal_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks",0
441,"<S2SV_ModStart> * s ; unsigned char * p ; int ret = - 1 ; if ( d2i_DSA_SIG ( & s, & p, sigbuf, siglen ) == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & p, & sigbuf, siglen ) == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & p, & sigbuf, siglen ) == NULL ) goto err ; if ( d2i_DSA_SIG ( & s, & p, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & p, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; return ( ret ) <S2SV_ModEnd> ; } <S2SV_null>",0
442,"<S2SV_ModStart> NULL ) ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) return rv ; <S2SV_ModStart> rv = gdDPExtractData <S2SV_ModEnd> ( out,",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; oe_addrinfo_t * p_alloc = NULL ; <S2SV_ModStart>, handle, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p <S2SV_ModStart>, & p_free <S2SV_ModEnd>, & canonnamelen <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & canonnamelen <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & canonnamelen <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & canonnamelen <S2SV_ModStart>, & p_alloc <S2SV_ModEnd>, & p_free",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ; has_local_ct = ( int ) ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] >> 7 ) & 0x07 ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ; } if (! rctx -> has_transparency ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; } if (! rctx -> has_transparency ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; } if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; } if (! rctx -> has_transparency ) { if (! iwgif_read",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret ; ret = <S2SV_ModStart>, indx, <S2SV_ModEnd> data, size <S2SV_ModStart> size, 100 ) ; if ( ret < 0 ) netif_warn ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ; } ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_warn ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,<S2SV_ModStart> destroy_list ) ; sas_destruct_event ( dev <S2SV_ModEnd> ) ; },0
451,"<S2SV_ModStart> * src, # if USE_PARTIAL_COPY int row, col, active_end ; # else int row, col, active_end ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, (",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> outbuf ) ; if ( scsi_disk_emulate_read_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc_10 ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC_10 : if ( scsi_disk_emulate_read_toc_10 ( r, outbuf ) < 0 ) goto illegal_request ;",0
455,<S2SV_ModStart>. field_picture ||! s -> cur_pic. cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic || s -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic -> cur_pic,0
456,"<S2SV_ModStart> off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; <S2SV_ModStart> ( struct rds_header ) ; hdr -> h_len = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> m_inc ) ; if ( hdr_off || sg || off ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } else { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } if ( hdr_off || sg || off ) { rds_inc_init ( & hdr -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & hdr -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_send_drop_acked ( conn, be64_to_cpu ( hdr -> m_inc. i_sequence ), NULL ) ; rds_inc_put ( & hdr -> m_inc ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
457,"<S2SV_ModStart> ) return 0 ; if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; ext_block = ( struct grub_ext4_extent_header * ) buf ; } if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) return 0 ; return 0 ; }",0
458,"<S2SV_ModStart> key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } ret = key_permission ( key_ref, KEY_POSITIVE ) ; if ( ret!= 0 ) goto error2 ; if (! is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( ret!= - EOPNOTSUPP ; if ( is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if (! is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ;",0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; <S2SV_ModStart> 8 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IEEE80211_TX_SKB_SHARING ; dev -> priv_flags &= ~ IEEE80211_TX_SKB_SHARING,0
461,"<S2SV_ModStart> hmi_data ; uint32_t <S2SV_ModEnd> hmi_bpm = 0 <S2SV_ModStart> channel ; } * note = NULL ; UNUSED ( hmi_tmp ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __",0
462,<S2SV_ModStart> -> id ; * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 <S2SV_ModEnd> ] = inode,0
464,"<S2SV_ModStart> ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE""",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart> LPF_PICK_FROM_Q ) { const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( method == LPF_PICK_FROM_SUBIMAGE ) { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q ) ; }",0
467,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; # endif,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = luaL_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; }",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int * ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int )",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( data_sz > VPX_CODEC_MAX_DATA_SIZE || ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) || ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) ) res = VPX_CODEC_INVALID_PARAM ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_INVALID_PARAM ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX,0
474,"<S2SV_ModStart> ; if (! strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (! strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; }",0
475,"<S2SV_ModStart> inode * inode ) { struct iso_directory_record * de2 = de ; struct iso_directory_record * tmpde2 = kmalloc ( de_len, GFP_KERNEL ) ; if (! tmpde2 ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } tmpde2 = kmalloc ( de_len, GFP_KERNEL ) ; if (! tmpde2 ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } if (! tmpde2 ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } de = tmpde ; de2 = kmalloc ( de_len, GFP_KERNEL ) ; if (! tmpde2 ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; goto",0
476,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * optr ) ; if ( li > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> PDU <S2SV_blank> size <S2SV_blank> (%u)!"", li, length ) ) ; return ; } if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; } if ( li < length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ )",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
478,"<S2SV_ModStart> } else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_EVENT_IDX ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else <S2SV_ModEnd> { if ( <S2SV_ModStart> } else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_EVENT_COUNTER_IDX ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p ->",0
479,"<S2SV_ModStart> case IS_STRING : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; case IS_DOUBLE : if (! Z_TYPE_PP ( zval_affine_elem ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i",0
480,<S2SV_ModStart> self ) { # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) &&,0
481,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free ( szSepLine ) ;,0
482,"<S2SV_ModStart> ; r = copy_to_user <S2SV_ModEnd> ( data,",0
483,"<S2SV_ModStart> ] ) { printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; printf <S2SV_ModStart> VERSION ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n",0
484,<S2SV_ModStart> = baud ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> type = cpu_context ; mutex_lock ( & cpuctx -> ctx. mutex ) ;,0
486,"<S2SV_ModStart>, struct iov_iter * iter <S2SV_ModStart> 1 ; return __aio_setup_single_vector ( iter, rw, buf, len, nr_segs, iovec ) <S2SV_ModEnd> ; } <S2SV_null>",0
487,<S2SV_ModStart> ext4_group_t flex_group ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> -> s_log_groups_per_flex ; sbi -> s_log_groups_per_disk = EXT4_SB ( sb ) -> s_log_groups_per_disk <S2SV_ModEnd> ; groups_per_flex = <S2SV_ModStart> -> s_log_groups_per_disk ; sbi -> s_log_groups_per_disk = EXT4_SB ( sb ) -> s_log_groups_per_disk <S2SV_ModEnd> ; flex_group_count =,0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) SCTP_MAX_CHUNK_SIZE - required_length ) ) return 0 ; if (,0
489,"<S2SV_ModStart> ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; } return a ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
490,"<S2SV_ModStart> if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s <S2SV_blank> "" <S2SV_ModEnd>, realhost,",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src1 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - 8 ; i += 8 ) { dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; dst [ i + 3 ] = src1 [ i + 3 ] - src2 [ i + 3 ] ; dst [ i + 4 ] = src1 [ i + 4 ] - src2 [ i + 4 ] ; dst [ i + 5 ] = src1 [ i + 5 ] - src2 [ i + 5 ] ; dst [ i + 6 ] = src1 [ i + 6 ] - src2 [ i + 6 ] ; } # endif,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) match_length = callback_args -> data_size <S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) match_length = callback_args -> data_size <S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) match_length = callback_args -> data_size ;,0
493,"<S2SV_ModStart>! no_port_forwarding_flag && ( <S2SV_ModEnd> options. allow_streamlocal_forwarding <S2SV_ModStart>! options. disable_forwarding ) ) { c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; }",0
494,"<S2SV_ModStart> if (! <S2SV_ModEnd> bitstream_read_bit ( bc <S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> bitstream_read_bit ( bc <S2SV_ModStart> ) ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! bitstream_read_bit ( bc ) ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
495,"<S2SV_ModStart> err ; } if ( m -> msg_name ) memset ( m -> msg_name, 0, sizeof ( * m -> msg_name ) ) ;",0
496,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores ) ) { int res ; int res ; int res ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed",0
497,<S2SV_ModStart> int hstartcol ; jas_assert ( bufsize <= QMFB_SPLITBUFSIZE ) ; hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ ( 2 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ;,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank>",0
501,"<S2SV_ModStart> ) ; if ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( queue ) { if ( free_func ) free_func ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( free_func ) free_func ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ]",0
502,"<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { err = - EPERM ; goto out ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) err = security_sb_remount ( sb, data ) ; if ( err ) return err ; up_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPER",0
503,"<S2SV_ModStart> * skb ; struct sockaddr_ll * sll <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> ; sll = kmalloc ( vnet_hdr_len, GFP_KERNEL ) ; if ( sll == NULL ) { err = - ENOMEM ; goto out_free ; } <S2SV_ModEnd> sll = kmemdup <S2SV_ModStart> sll, sizeof ( * sll ), GFP_KERNEL ) ; if (! sll ) { sll = kmalloc ( vnet_hdr_len, GFP_KERNEL ) ; if (! sll ) { struct sockaddr_ll * sll = kmalloc ( vnet_hdr_len, GFP_KERNEL ) ; if (! sll ) { struct sockaddr_ll * sll = kmemdup ( sll, sizeof ( * sll ), GFP_KERNEL ) ; if (! sll ) { sll = kmalloc ( vnet_hdr_len, GFP_KERNEL ) ; if (! sll ) { struct sockaddr_ll * sll = kmalloc ( vnet_hdr_len, GFP_KERNEL ) ; if",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> if ( serial -> num_ports < 2 ||! serial -> port [ 1 ],0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader ds64hdr, datahdr, fmthdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_",0
507,"<S2SV_ModStart> msg ) ; err = - EINVAL ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModStart>, & addr, VERIFY_READ ) ; } else { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModEnd> total_len = err <S2SV_ModStart>, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, total_len, flags ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags",0
508,"<S2SV_ModStart> ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct buffer_head * dibh = gfs2_meta_inode_buffer ( ip2, height - 1 ) <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata ) ; if ( ip2 -> i_height < ip2 -> i_height ) { struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; dibh = gfs2_meta_inode_buffer ( ip2, end_of_metadata ) ; if ( dibh == NULL ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [",0
509,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( input -> codec_interface <S2SV_ModEnd> ) ) ; <S2SV_ModStart>,0
510,"<S2SV_ModStart> ret ) return FALSE ; PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> context ) ; PROFILER_EXIT ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> context ) ; PROFILER_EXIT ( context -> priv -> prof_nsc_decode ) if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA",0
511,"<S2SV_ModStart> ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> namespace <S2SV_blank> of <S2SV_blank> a <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> """,0
512,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart>",0
513,<S2SV_ModStart>. nextsame!= NULL <S2SV_ModEnd> || fv -> <S2SV_ModStart> fv -> b ) { if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } _FVCloseWindows ( fv ) ; if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else RecentFilesRemember ( sf -> origname ) ;,0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> ) ; when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) when = timespec_to_ns ( new_setting -> it_interval ) ; if ( period == 0 ) period = timespec_to_ns ( new_setting -> it_interval ) ; <S2SV_ModStart> n ) ; if ( when > now ) when -= now ; <S2SV_ModStart> n ) ; if ( period == 0 ) period = timespec_to_ns ( new_setting -> it_interval ) <S2SV_ModStart> it_interval ) ; <S2SV_ModEnd> if ( when,0
516,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
517,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- sp -> arg == 0 ) { sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } else if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( size == 0 ) { sp -> op = OFreshOID",0
518,"<S2SV_ModStart> * multipart_media ; <S2SV_ModEnd> struct range * <S2SV_ModStart> ; size_t content_length = 0 <S2SV_ModStart> ; int code = 500, fd = - 1, nranges, ret ; const char * errstr = NULL ; <S2SV_ModStart> ; if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( <S2SV_ModStart> 1 ) { <S2SV_ModEnd> ( void ) <S2SV_ModStart> ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort",0
519,"<S2SV_ModStart> = FALSE ; uint32_t ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd>",0
520,"<S2SV_ModStart> void encode_quantization ( const VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> x_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> z_dc_delta_q ) ; write_delta_q ( wb, cm -> z_ac_delta_q ) ;",0
521,<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ),0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,<S2SV_ModStart> flags ) { spin_lock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
525,"<S2SV_ModStart> ++ ) { if ( nElements == 256 ) { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_8_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } }",0
526,"<S2SV_ModStart> if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) ) { error = - ENOENT ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! rdev. name ) { error = - ENOMEM ; goto out ; } if (! rdev. name ) { error = - ENOMEM ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! rdev. name ) { error = - ENOMEM ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! rdev. name ) { error = - ENOMEM ; goto out ; } if (! rdev. name ) { error = - ENOMEM ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if (! rdev. name ) { error = - ENOMEM ; goto out ; }",0
527,<S2SV_ModStart> ; if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_,0
528,"<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { retval_t new_len = INT_MAX ; retval_t old_len = ( int ) new_len ; retval_t <S2SV_ModEnd> old_len = ( <S2SV_ModStart> new_len, 0 ) ; } else { retval_t new_len = INT_MAX ; retval_t old_len = ( int ) new_len ; retval_t old_len = ( int ) new_len ; retval_t old_len = INT_MAX ; retval_t old_len = INT_MAX ; retval_t old_len = ( int ) new_len ; retval_t <S2SV_ModEnd> old_len = ( <S2SV_ModStart> ) old_len, old_len <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY",0
530,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_line_array,",0
531,"<S2SV_ModStart> BLOCK_SIZE bsize, BLOCK_SIZE <S2SV_ModEnd> subsize ) { <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 2 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 3 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 2 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 3 ] ) = get_block_",0
532,"<S2SV_ModStart> name ) ; if (! check_submodule_name ( name ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
533,"<S2SV_ModStart> ; int pixel_ptr <S2SV_ModEnd> ; int block_ptr <S2SV_ModStart> ; block_ptr = 0 ; int pixel_x, pixel_y ; int total_blocks ; while ( stream_ptr < chunk_size ) { if ( s -> buf [ stream_ptr ]!= 0xe1 ) av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank> is <S2SV_blank> 0x%02x <S2SV_blank> instead <S2SV_blank> of <S2SV_blank> 0xe1\\n"", s -> buf [ stream_ptr ] ) ; chunk_size = AV_RB32 ( & s -> buf [ stream_ptr ] ) & 0x00FFFFFF ; stream_ptr += 4 ; if ( chunk_size!= s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk",0
534,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
535,<S2SV_ModStart> * ptype ; if ( skb_is_nonlinear ( skb ) ) { rcu_read_lock ( ) ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (!,0
536,"<S2SV_ModStart> if (! ( matrix = jas_malloc2 ( numrows * numcols, sizeof ( jas_matind_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if (! matrix -> data_ ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = NULL ; } for ( i = 0 ; i < matrix -> numcols_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> numcols_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> numcols_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i",0
537,"<S2SV_ModStart> } else { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> authValueBind. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (",0
538,"<S2SV_ModStart> ; ret = key_permission ( key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto error2 ; if ( is_key_possessed ( key_ref ) ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == - EOPNOTSUPP ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( is_key_possessed ( key_ref ) ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == - EOPNOTSUPP ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUP",0
539,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 0 ; } else if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; } else if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 1 ; } else if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ; } else if ( ps_dec -> u4_first_slice_in_pic == 1 ) { ps_dec -> u4_first_slice_in_pic = 1 ;,0
540,"<S2SV_ModStart> var_off ) ; if ( dst_reg -> smin_value == S64_MIN && dst_reg -> smax_value == S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } dst_reg -> var_off = tnum_sub ( dst_reg -> var_off, src_reg. var_off",0
541,"<S2SV_ModStart> cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) { int i ; for ( i = 0 ; i < 3 ; i ++ ) if ( direntry -> d_name. name [ i ] == '\\' ) { cFYI ( 1, ""Invalid <S2SV_blank> file <S2SV_blank> name"" ) ; rc = - EINVAL ; goto lookup_out ; } }",0
542,<S2SV_ModStart> ; break ; case VFIO_PCI_CONFIG_REGION_INDEX : info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev ->,0
543,"<S2SV_ModStart> copied ) ; if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,<S2SV_ModStart> = 1 ; if ( uri [ strlen ( uri ) - 1 ] == '\\0' ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;,0
545,"<S2SV_ModStart> = rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } <S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) == NULL ) { ret = NULL ; goto out ; } <S2SV_ModStart> = rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) == NULL ) { ret = NULL ; goto out ; } if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) == NULL ) { ret = NULL ; goto out ; }",0
546,"<S2SV_ModStart> char * in, size_t len <S2SV_ModStart> += 4 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 <S2SV_ModEnd> ) ; len",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, i ; size_t <S2SV_ModEnd> total_written = 0 <S2SV_ModStart> ++ ) { size_t copied = min_t ( size_t, len, ( size_t ) nr_pages - i ) ; if ( copied > ( size_t ) cur_len ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> total_written += copied <S2SV_ModStart> ++ ) { copied = min_t ( size_t, cur_len, ( size_t ) nr_pages - i ) ; if (! rc ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> total_written += copied <S2SV_ModStart> ++ ) { size_t copied = min_t ( size_t, cur_len, ( size_t ) nr_pages - i ) ; if ( copied > ( size_t ) cur_len ) { rc = - EINVAL ; break ; } <S2SV_ModStart> ++ ) { copied = min_t ( size_t, cur_len, ( size_t ) nr_pages - i ) ; if (! rc ) { rc = - EINVAL ; break ; }",0
549,<S2SV_ModStart> int i ; if (! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 && rdesc [ i + 3 ] == 0x29 && rdesc [ i + 1 ] == 0x19 && rdesc [ i + 2 ] == 0x29 ) { rdesc [ i ] = 0x19 ; rdesc [ i + 2 ] = 0x29 ; } for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 && rdesc [ i + 3 ] == 0x29 && rdesc [ i + 1 ] == 0x19 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x29 ; rdesc [ i + 2 ] = 0x19 ; } for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; int number_of_frames, number_of_keyframes, encode_frame_count ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ( svc_ctx ) ; number_of_frames = si -> number_of_frames ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ]",0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { <S2SV_ModEnd> value = * <S2SV_ModStart> = value ; left -- ; } else if ( value == * in ) { in ++ ; if ( * in < 0xFF ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } } * ( ( UINT32 * ) in ) = * ( ( UINT32 * ) in ) ; } else if ( value == * in ) { in ++ ; if ( * in < 0xFF ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 4 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } return TRUE ;",0
552,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free <S2SV_ModEnd> ( screen -> <S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if (! screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ;",0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> const char * literal_start = * str ; const char * literal_end <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> '}' ) { if ( in_named_escape && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> * buf ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m ) ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> bufsize ) ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DB",0
555,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
556,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> struct pcrypt_instance_ctx * <S2SV_ModStart> = crypto_instance_ctx ( <S2SV_ModEnd> inst ) ;,0
558,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) h1 = ( ptr -> height ) ; } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,<S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { if <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_PRINTK <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST <S2SV_ModEnd> ) { ND_,0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; size_t replay_esn_len = xfrm_replay_state_esn_len ( up ) ; if ( replay_esn_len!= replay_esn_len ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( up )!= replay_esn_len ) return - EINVAL ; replay_esn = nla_data ( rp ) ; replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( xfrm_replay_state_esn_len ( up )!= replay_esn_len ) return - EINVAL ; replay_esn_len = xfrm_replay_state_esn_len ( up ) ; if ( xfrm_replay_state_esn_len ( replay_esn )!= xfrm_replay_state_esn_len ( up ) ) return - EIN,0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table,",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> opj_image_comp_t * l_img_comp = ( opj_image_comp_t * ) opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp_t ) ) ; if ( l_img_comp == ( opj_image_comp_t * ) opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp_t ) ) ) { opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp_t ) ) ; return 00 ; } <S2SV_ModStart> opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp_t ) ) ; if ( l_img_comp == ( opj_image_comp_t * ) opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp_t ) ) ) { opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp_t ) ) ; return 00 ; } <S2SV_ModStart> opj_malloc ( p_image -> numcomps * sizeof ( opj_image_comp,0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> mi_col ; MODE_INFO * const mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> -> mi_grid_visible + mi <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> mi_col ; MODE_INFO * const prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> prev_mi_8x8 = cm -> prev_mi_grid_visible + mi <S2SV_ModEnd> ; vp9_zero ( <S2SV_ModStart> ; vp9_zero ( cpi -> <S2SV_ModEnd> sf. partition_search_type <S2SV_ModStart> case VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case SOURCE_VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION :",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) obuf = opipe -> bufs + nbuf ; else obuf = opipe -> bufs + nbuf ;,0
570,"<S2SV_ModStart> state ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & _dh ) ; if ( dh == NULL ) { nf_log_packet ( net, IPPROTO_DCCP, 0, NULL, NULL, ""%s"", ""null <S2SV_blank> packet"" ) ; return false ; } state = dccp_state_table [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; if ( state == CT_DCCP_REQUEST ) state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. state = state ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto.",0
571,"<S2SV_ModStart> { Fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_",0
572,<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> PTR_ERR ( blkg ) ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; } else { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; },0
573,"<S2SV_ModStart> ; if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ret < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> frame",0
574,"<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char <S2SV_ModStart> ; if ( rcu_dereference_protected ( krbtgt_out, rcu_dereference ( krbtgt_out_principal ) )!= NULL ) return rcu_dereference_protected ( krbtgt_out_principal, 1 ) ; if ( rcu_dereference_protected ( krbtgt_out, 2 )!= NULL ) return rcu_dereference_protected ( krbtgt_out, 2 ) ; if ( rcu_dereference_protected ( krbtgt_out, 2 )!= NULL ) return rcu_dereference_protected ( krbtgt_out, 2 ) ; if ( rcu_dereference_protected ( krbtgt_out, 2 )!= 0 ) return rcu_dereference_protected ( krbtgt_out, 2 ) ) return rcu_dereference_protected ( krbtgt_out, 2 ) ; if ( rcu_dereference_protected ( krbtgt_out, 2 )!= NULL ) return rcu_dereference_protected ( krbtgt_out, 2 )",0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> -> devnum, ci. <S2SV_ModEnd> slow = ps <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart>, int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; opt -> optlen = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; }",0
578,"<S2SV_ModStart> ; } retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == ENOSPC ) { xfs_trans_brelse ( args -> trans, bp ) ; return error ; } if ( args -> flags & ATTR_REPLACE ) { xfs_trans_brelse ( args -> trans, bp ) ; return retval ; } if ( args -> rmtblkcnt2 ) { xfs_trans_brelse ( args -> trans, bp ) ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = 0 ; }",0
579,"<S2SV_ModStart> ) ) { long tmp = 0 ; memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_GET_DEVICE_COUNT : if ( IoEnumerateDeviceObjectList ( TCDeviceObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; } break ; case TC_IOCTL_IS_DEVICE_UNLOAD_DISABLED : if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int *",0
580,"<S2SV_ModStart> ""Upgrade"" ) ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> goto error ; if ( ws_key == NULL || strcmp ( ws_key, ""Sec-WebSocket-Key"" )!= 0 || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' || ws_key [ strlen ( ws_key ) - 1 ] == '\\0' )",0
581,"<S2SV_ModStart> uint16 nif = 0, len <S2SV_ModStart> 0 ; } len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> description ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_findalldevs_if ) ; len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_sockaddr ) * len <S2SV_ModEnd> ; for ( <S2SV_ModStart> -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_sockaddr ) * len <S2SV_ModEnd> ; break ; <S2SV_ModStart> case AF_INET6 : len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> struct rpcap_sockaddr ) * len <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } len <S2SV_ModEnd> += sizeof (",0
582,"<S2SV_ModStart> struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } g_hash_table_remove ( problem_info, ""basename"" ) ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
583,"<S2SV_ModStart> ) ; for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 2 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 4 )!= 0 ) { for ( bit = 0 ; bit < 4 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ;",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart> sk, int <S2SV_ModEnd> tstype ) { <S2SV_ModStart> ; int err <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) serr -> ee. ee_data -= sk -> sk_tskey ; } if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } <S2SV_ModEnd> err = sock_queue_err_skb",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ;",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN (",0
589,<S2SV_ModStart>! dumpable &&! capable ( CAP_SYS_PTRACE <S2SV_ModEnd> ) ) {,0
590,"<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { pr_err ( ""add_bytes_l2_c: <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> Overflow <S2SV_blank> in <S2SV_blank> add_bytes_l2_c():",0
591,"<S2SV_ModStart> & __GFP_ZERO ) memset <S2SV_ModEnd> ( addr,",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,"<S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining!= u4_payload_size ) { <S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining!= u4_payload_size ) { <S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining!= u4_payload_size ) { <S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining!= u4_payload_size ) { memset ( & ps_parse -> s_sei_params, 0, u4_payload_size ) ; } else { <S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining!= u4_payload_size ) { memset ( & ps_parse -> s_sei_params, 0, u4_payload_size ) ; } <S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining!= u4_payload_size ) { memset ( & ps_parse -> s_bitstrm, 0, u4_payload_size ) ; } else { memset ( & ps_parse -> s_bitstrm, 0, u4_payload_size )",0
594,"<S2SV_ModStart> cypress_private ) ; if (! serial ||! port -> interrupt_in_urb ) { dev_err ( & port -> dev, ""missing <S2SV_blank> port <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
595,<S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; if (! dd -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; } <S2SV_ModStart> -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; kfree ( tmp_sdma_rht ) ; } <S2SV_ModStart> -> sdma_descq ) ; if (! dd -> per_sdma ) { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> -> sdma_descq_cnt ) ; kfree ( tmp_sdma_rht ) ; },0
596,<S2SV_ModStart> -> device_data ; device -> device_data = NULL ;,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> char * name <S2SV_ModStart> name ) ; if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table",0
598,"<S2SV_ModStart> == q || ( ( int ) ( ( unsigned char ) * p ) == 0 ) || ( ( int ) ( ( unsigned char ) * p ) == 0 ) || ( * p == ',' ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( ( size == ( size_t ) ( ( int ) ( ( unsigned char ) * p ) ) == 0 ) || ( ( int ) ( ( unsigned char ) * p ) == 0 ) || ( * p == ',' ) ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( i == 10 ) i = 10 ; for ( i = 0 ; i < * count ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], exception ) ; if ( resized == (",0
599,"<S2SV_ModStart> valuelen ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, 1 ) ; if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) {",0
600,"<S2SV_ModStart> ) ; } if ( pcount > INT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT32_MAX ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( text [ 1 ] <S2SV_ModEnd> == EOF ) <S2SV_ModStart> ( yyscanner ) ; if ( text [ 2 ] <S2SV_ModEnd> == EOF ) <S2SV_ModStart> ( yyscanner ) ; if ( text [ 3 ] <S2SV_ModEnd> == EOF ) <S2SV_ModStart> ( yyscanner ) ; if ( text [ 3 ] <S2SV_ModEnd> == EOF ) <S2SV_ModStart> ( yyscanner ) ; if ( text [ 2 ] <S2SV_ModEnd> == EOF ) <S2SV_ModStart> ( yyscanner ) ; if ( text [ 3 ] <S2SV_ModEnd> == EOF ),0
603,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; * hend = '\\r' ; } for ( b = c -> buf ;'<S2SV_blank> '!= * b ; b ++ ) { if ( '\\0' == * b ) { return bad_request ( c, 400, __LINE__ ) ; } agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), c -> id, c -> buf ) ; * hend = '\\r' ; } for ( b = c -> buf ;'<S2SV_blank> '!= * b ; b ++ ) { if ( '\\0' == * b ) { return bad_request ( c, 400, __LINE__ ) ; } agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str",0
604,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart> ; g_autoptr ( GOutputStream ) out_stream = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) new_argv = NULL ; g_auto ( GStrv ) old_argc = NULL ; g_auto ( GStrv ) new_argc = NULL ; g_auto ( GStrv ) new_arch = NULL ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_access ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; if ( error ) goto out_drop_lock <S2SV_ModEnd> ; error = <S2SV_ModStart> goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT <S2SV_ModEnd>, argp -> <S2SV_ModStart> argp -> acl_default ) ; if ( error ) goto out_drop_lock <S2SV_ModEnd> ; fh_unlock (",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, ""Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ) fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry",0
609,"<S2SV_ModStart> ; switch ( <S2SV_ModEnd> pc -> componentType <S2SV_ModStart> case 1 : <S2SV_ModEnd> if ( tolen <S2SV_ModStart> case 2 : if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= 2 ; break ; case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 6 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 7 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 6 : if (",0
610,"<S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3 <S2SV_ModStart> ( ndo, ""%s"", nfsv3_sattr_to_str <S2SV_ModEnd> ( & sa3",0
611,"<S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : ND_TCHECK_32BITS ( tptr ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : ND_TCHECK_32BITS ( tptr ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr <S2SV_ModEnd> ) ) ;",0
612,"<S2SV_ModStart> -> userData, ctxt -> lineno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt ->",0
613,"<S2SV_ModStart> ) ; bool checksum_valid = false <S2SV_ModStart> slow ) ; if (! checksum_valid ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INERRORS, is_udplite ) ; }",0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> tlen, pdu_type <S2SV_ModStart> trunc ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { tlen -= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { break ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; tlen -= pdu_len ; tptr += pdu_len ; } tptr += pdu_len ; }",0
615,"<S2SV_ModStart> int tagval ; if ( length > 4 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> 4 <S2SV_blank> bytes, <S2SV_blank> got <S2SV_blank> 4 <S2SV_blank> bytes"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval,",0
616,"<S2SV_ModStart> ; int chars_processed <S2SV_ModEnd> ; int elt <S2SV_ModStart> ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + <S2SV_ModEnd> ( ( ( <S2SV_ModStart> & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL )",0
617,"<S2SV_ModStart> args ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE <S2SV_ModEnd> ) ; error <S2SV_ModStart> valuelen ) ; if ( error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_ERROR, dp, XFS_ERRLEVEL_LOW, & args -> dp -> i_mount -> m_sb, XFS_ILOG_CORE ) ; return error ; } xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ILOG_CORE <S2SV_ModEnd> ) ; error <S2SV_ModStart> valuelen ) ; if ( error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_ERROR, dp, XFS_ERRLEVEL_LOW, & args -> dp -> i_mount -> m_sb, XFS_ILOG_CORE ) ; return error ; }",0
618,"<S2SV_ModStart> int rv = Socket_print <S2SV_ModEnd> ( S, <S2SV_ModStart>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"",",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } child = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> dest ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
620,"<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; wait_for_completion ( & fcomp. comp ) ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK ) { rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; } else { hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> rx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc -> lip_count ; hstats -> nos_count = fcstats -> fc -> nos_count ; hstats -> error_frames",0
621,"<S2SV_ModStart> * value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; <S2SV_ModEnd> value -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return 0 ; },0
623,"<S2SV_ModStart> ; if ( unlikely ( try_get_page ( page ) ) ) return VM_FAULT_SIGSEGV ; spin_lock_irqsave ( & vma -> vm_page_lock, flags ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! page_table ) { spin_unlock_irqrestore ( & vma -> vm_page_lock, flags ) ; return VM_FAULT_SIGSEGV ; } spin_unlock_irqrestore ( & vma -> vm_page_lock, flags ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! page_table ) goto unlock ; entry = pte_mkwrite ( pte_mkdirty ( entry ) ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkwrite ( entry ) ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) )",0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> <S2SV_ModEnd> sasl_username = src <S2SV_ModStart> -> sasl_username ; rec -> <S2SV_ModEnd> sasl_password = src <S2SV_ModStart> -> sasl_password ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> * new_data, * old_data ; new_data = env -> insn_aux_data ; old_data = env -> insn_aux_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ) { env -> insn_aux_data = new_data ; return 0 ; } <S2SV_ModEnd> new_data = vzalloc <S2SV_ModStart> ) * ( prog_len - off - cnt + 1 ) ; new_data = vzalloc ( sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off, old_data + off, sizeof ( struct bpf_insn_aux_",0
626,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_16BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; }",0
627,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> occ0 % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""bad <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) ) ; TIFFErrorExt ( tif -> tif_clientdata, ""bad <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) ) ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""bad <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) ) ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""bad <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif, ""bad <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) )",0
630,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; exif_mnote_data_canon_clear ( n ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof (",0
631,"<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, toktype )",0
632,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
633,"<S2SV_ModStart> ; break ; case HA_ERR_NO_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank>",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> while ( -- <S2SV_ModStart> alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ( ISXDIGIT ( string [ 2 ] ) && ( ISXDIGIT ( string [ 3 ] ) ) ) { free ( ns ) ; return NULL ; } in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; if (! avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ) { RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; if (! avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ) { RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr +",0
636,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) <S2SV_ModStart> again ; } if ( unlikely ( iov_iter_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; }",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( len < ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } } if ( unlikely ( cnt > ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; }",0
638,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defAuthType"", snmpv3_authtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" )",0
639,"<S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show",0
640,<S2SV_ModStart> ; return! <S2SV_ModEnd> match ( prog <S2SV_ModStart> sub ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
641,"<S2SV_ModStart> j ++, dst += c -> framebuf_stride ) for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; <S2SV_ModStart> j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst +",0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
644,<S2SV_ModStart> j ++ ) { if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t ) number_pixels ) return ( - 1 ) ; if ( j >= ( ssize_t,0
645,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> timer -> lock ) ; spin_unlock_irq ( & timeri -> timer -> lock ) ; <S2SV_ModStart> timer = NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> timer -> open_list_head, open_list ) { spin_unlock_irq ( & timeri -> timer -> lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> timer -> open_list ) ; } mutex_unlock ( & timeri -> timer -> lock ) ;",0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank>",0
647,"<S2SV_ModStart> ; const char * arch = info -> arch ; const int bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set_i ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""asm.arch"", arch ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_del_init ( & dev -> dev_list_node ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len <S2SV_ModEnd> ; char line <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH + NETSCREEN_MAX_INT_NAME_LENGTH + 1 ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH + 1 ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH + 1 ] ; gboolean cap_dir ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH + 1 ] ; if (! parse_netscreen_hex_dump ( wth -> fh, line, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_process_record ( s ) ) return ( 0 ) ; <S2SV_ModStart> seq_num ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_process_record ( s ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec ), s ->",0
652,<S2SV_ModStart> decode ) { const uint_fast32_t widthOverflow = gifFilePtr -> Image. Width ; const uint_fast32_t heightOverflow = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } <S2SV_ModEnd> if ( decode <S2SV_ModStart> decode ) { const uint_fast32_t widthOverflow = gifFilePtr -> Image. Width ; const uint_fast32_t heightOverflow = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { const uint_fast32_t widthOverflow = gifFilePtr -> Image. Width ; const uint_fast32_t heightOverflow = gifFilePtr -> Image. Height ; const uint_,0
653,"<S2SV_ModStart> can_read_key : if ( key -> type -> validate ) { ret = - EOPNOTSUPP ; if ( key -> type -> validate ) { down_read ( & key -> sem ) ; ret = key -> type -> validate ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; } } if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; } } <S2SV_ModEnd> error2 : key_put",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> validator -> user ) ) { ret_error ; } size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", props -> filter. buf? props -> filter. buf : """" ) ; ret = ret_not_found ; }",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageData",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val = <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return 0 ;,0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> m_fadd. add ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. add = args -> cswp. add ; rm -> atomic. op_m_cswp,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
659,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = sizeof ( * sin )",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= <S2SV_ModEnd> sizeof ( spath <S2SV_ModStart> spath ) ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; return - 1 ; }",0
661,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len ) ; return ; } <S2SV_ModStart> ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModStart> = ++ s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) t, len ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> == '/' ) { t1mac_output_data ( ( byte * ) t, len ) ; t1mac_output_data ( ( byte * ) t, len ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc",0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> len <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_",0
663,<S2SV_ModStart> objp ) ; return TRUE ; case XDR_CLEAR_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
664,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. active_set, TEMP_FAILURE_RETRY (",0
665,"<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_",0
666,<S2SV_ModStart> msixcap ; assert ( <S2SV_ModEnd> msgnum >= 1 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
667,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> upperdentry ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> ) ; } mutex_unlock ( & dentry -> d_inode -> i_mutex ) ;,0
668,<S2SV_ModStart> while ( isspace <S2SV_ModEnd> ( * p,0
669,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
671,"<S2SV_ModStart> ) ; for ( i = 0 ; i < ctx -> hdrmax ; i ++ ) if ( mutt_str_strcmp ( line, ctx -> hdrmax [ i ] -> data ) == 0 ) break ; if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; } else if ( i >= ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrmax",0
672,"<S2SV_ModStart> goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup :",0
673,<S2SV_ModStart> precno ++ ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
674,"<S2SV_ModStart> ) ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } }",0
675,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ; err = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; rcu_read_unlock ( ) ;",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 :,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> gf == GF_VDEF && im -> gdes [ vidx ]. step > 0 ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; } if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) continue ; } if (! finite ( im -> gdes [ vidx ]. data [ ii ] ) ) { if (! finite ( im -> gdes [ vidx ]. data [,0
679,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) <S2SV_ModEnd> ) { return <S2SV_ModStart> goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0,0
680,<S2SV_ModStart> ) b ; size_t size ; if ( buf1 -> size > buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; },0
681,"<S2SV_ModStart> ) ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_corrupt ( ms, fd, nbytes ) ) == - 1 ) { if ( ( i = cdf_check_cor",0
682,"<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof <S2SV_ModStart> * info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY",0
683,"<S2SV_ModStart>! eof ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
686,<S2SV_ModStart> -> _eip ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart> case 4 : if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart> case 5 : if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ; if (! x86_emulate_is_imm ( ctxt ) ) return X86EMUL_CONTINUE ;,0
687,"<S2SV_ModStart>, sizeof ( errstr ) <S2SV_ModEnd>, list. <S2SV_ModStart> name ) ; if (! mutt_str_strcmp ( url. path, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ; url_tostring ( & url, buf + 10, sizeof ( buf ) - 10, 0 ) ;",0
688,"<S2SV_ModStart> * secret, <S2SV_ModEnd> void * end <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> dlen = ceph_x_decrypt <S2SV_ModEnd> ( secret, <S2SV_ModStart> end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto out ; dlen = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto out ; ret = dlen ; goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } ret = dlen ; tkt_struct_v = get_ticket_handler ( ac, type ) ; if ( IS_ERR ( th ) ) { ret = PTR_ERR ( th ) ; goto out ; }",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
690,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
691,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
693,"<S2SV_ModStart> return true ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = expr -> array_ref. entry ; return ( * field_rtrn!= NULL ) ; <S2SV_ModEnd> case EXPR_IDENT : <S2SV_ModStart> * elem_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. field ) ; * index_rtrn = expr -> ident. entry ; return ( * field_rtrn!= NULL",0
694,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
695,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == NAME ) { if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! name ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; } args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body",0
696,<S2SV_ModStart> = 0 ; struct sockaddr_storage addr = & asoc -> peer. primary_addr ; struct sockaddr_storage addr = & asoc -> peer. primary_addr ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM ; if (! sock_owned_by_user ( sock -> sk ) ) return - EPERM,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,"<S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= SS_UNCONNECTED ) { if ( sock_flag ( sk, SOCK_DONE ) ) err = - ENOTCONN ; goto out ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg -> msg_iovlen = min_t ( size_t, len - copied, sizeof ( * msg -> msg_iov ) ) ; if ( msg -> msg_namelen > sizeof ( * msg -> msg_iov ) ) msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_iovlen = min_t ( size_t, len - copied, sizeof ( * msg -> msg_iov ) ) ; if ( msg -> msg_namelen > sizeof ( * msg -> msg_iov ) ) msg -> msg_namelen = sizeof ( * msg -> msg_iov ) ; msg -> msg_namelen = sizeof ( * msg -> msg_i",0
699,"<S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count, <S2SV_ModStart> ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int * ) * ( * o_row_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count",0
700,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( Cor",0
701,"<S2SV_ModStart> ctxt ) { int i ; for ( i = 0 ; i < 64 ; ++ i ) { register_address_increment ( ctxt, reg_rmw ( ctxt, VCPU_REGS_RCX, - 1 ) ) ; if ( address_mask ( ctxt, reg_read ( ctxt, VCPU_REGS_RCX )!= 0 ) && test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( test_cc (",0
702,,1
703,<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ; <S2SV_ModStart> ; freq_reg += <S2SV_ModEnd> HI3660_STUB_CLOCK_DATA ; for,0
704,<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + position <= <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> + position <= <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> += position ;,0
705,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ioffset ) ; <S2SV_ModEnd> credits = ext4_writepage_trans_blocks,0
706,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; break ; case SO_RCVBUF : val = min_t ( u32, val * 2, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; break ; case SO_RCVBUF_LOCK : sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; break ; case SO_RCVBUF_LOCK : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; break ; case SO_RCVBUF_LOCK : sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBU",0
708,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = udf_read_tagged <S2SV_ModStart> TAG_IDENT_LVD ) ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else if ( type == 0 ) { struct genericPartitionMap1 * gpm1 = ( struct genericPartitionMap1 * ) gpm ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! info ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"" <S2SV_ModEnd>, info -> <S2SV_ModStart> JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank>",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; char nfunc <S2SV_ModStart> ) ; else pr_notice <S2SV_ModEnd> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", <S2SV_ModStart> ) ; else pr_notice <S2SV_ModEnd> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"",",0
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_nxt_word ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
712,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ;",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> entity ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) ) return - EFAULT ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink, & link. sink ) ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) ) return - EFAULT ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; if ( copy_to_user ( & link. flags, & link. flags, sizeof ( link. flags ) ) ) return - EFAULT ;",0
714,<S2SV_ModStart> ) ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; prev_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; prev_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; prev_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT && line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; prev_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_B,0
715,"<S2SV_ModStart>, extent ; size_t width = sun_info. width ; size_t height = sun_info. height ; size_t <S2SV_ModStart> sun_data ) ; if ( sun_data == ( unsigned char * ) NULL ) <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels == ( unsigned char * ) NULL ) <S2SV_ModStart> sun_data ) ; if ( sun_pixels == ( unsigned char * ) NULL ) <S2SV_ModStart> sun_pixels ) ; if ( sun_data == ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_data ) ; if ( sun_pixels == ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels == ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_pixels == ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_pixels == ( unsigned char * ) NULL ) ThrowReaderException ( CorruptImageError, ""Im",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex *",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> -> loc_addr ; ireq -> opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ;,0
719,<S2SV_ModStart> struct xmlparser parser ; parser. starteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
720,"<S2SV_ModStart>!= 0 ) { __wsum csum = 0 ; <S2SV_ModStart> + tlen, csum_partial <S2SV_ModEnd> ( skb_transport_header ( <S2SV_ModStart> + tlen, csum_partial <S2SV_ModEnd> ( skb_transport_header ( <S2SV_ModStart> + tlen, csum_partial <S2SV_ModEnd> ( skb_transport_header ( <S2SV_ModStart> + tlen, csum_partial <S2SV_ModEnd> ( skb_transport_header ( <S2SV_ModStart> + tlen, csum_partial <S2SV_ModEnd> ( skb )",0
721,"<S2SV_ModStart> pfn ) ; r = - ENOMEM <S2SV_ModEnd> ; goto unmap_pages <S2SV_ModStart> goto unmap_pages ; } r = kvm_iommu_put_pages ( kvm, slot -> base_gfn, slot -> npages ) ; if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; goto unmap_pages ; } gfn += page_size >> PAGE_SHIFT ;",0
722,"<S2SV_ModStart> 4 ], cmd -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len > sizeof ( b ) - 6 ) return - EINVAL",0
723,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF ; perf_event_ctx_unlock ( event ) ; if ( ctx -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader ->,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ) ; <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> value ; value <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 0 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 2 ] <S2SV_ModEnd> ) ) ; <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
725,"<S2SV_ModStart> ( sbi ) <S2SV_ModEnd> ; struct free_nid <S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart>, GFP_NOFS ) ; if (! i ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } <S2SV_ModEnd> ne = __lookup_nat_cache <S2SV_ModStart> ( ne, IS_CHECKPOINTED ) || nat_get_blkaddr ( ne )!= NULL_ADDR ) ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST,",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ),0
727,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely ( extra. type >= XEN_NETIF_EXTRA_TYPE_MAX ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ;",0
728,"<S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len!= sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) { kfree_skb ( skb_out ) ; return - EINVAL ; } <S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len!= sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) { kfree_skb ( skb_out ) ; hdr = ( struct sadb_msg * ) skb_put ( skb_out, sizeof ( struct sadb_msg ) ) ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_len = sizeof ( struct sadb_msg ) ; if ( hdr -> sadb_msg_errno!= 0 ) { kfree_skb ( skb_out ) ; return - EINVAL ; }",0
729,<S2SV_ModStart> r1. event = event ; r1. tstamp = * tstamp ; r1.,0
730,"<S2SV_ModStart> 1 ; defaultoptions ( & h ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; size = optsize ( L, opt, & fmt ) ; pos += gettoalign ( pos, & h, opt, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'b' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'h' : { int issigned = islower ( opt ) ; lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ;",0
731,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ;",0
732,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if ( <S2SV_ModStart> body -> unit_size ) { n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_MULTIPLE_FIXED : { struct oz_multiple_fixed * body = ( struct oz_multiple_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_multiple_fixed ) + 1 ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = (",0
733,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> res = 0 ; # if CONFIG_RUNTIME_CPU_DETECT VP8_COMMON * cm = & cpi -> common ; # endif <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, NULL ) ) res = - 1 ; if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_",0
734,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,"<S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ; } else { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset <S2SV_ModEnd> ( ptr_hbe_txposer -> <S2SV_ModStart>, sfb ) { memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ) ; } else { memset ( ptr_hbe_txposer -> synth_buf, 0, 1280 * sizeof ( FLOAT32 ) ) ) ; } }",0
739,"<S2SV_ModStart> 2 ] ; unsigned short x_origin, y_origin ; unsigned short image_w, image_h ; <S2SV_ModStart> ] ) ; image_w = get_ushort ( & tga [ 6 ] ) ; image_h = get_ushort ( & tga [ 9 ] ) ; pixel_depth = tga [ 13 ] ; image_desc = tga [ 14 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; <S2SV_ModStart> 10 ] ) ; <S2SV_ModEnd> # endif image_w <S2SV_ModStart> 12 ] ) ; image_h = get_ushort ( & tga [ 13 ] ) ; pixel_depth = tga [ 15 ] ; image_desc = tga [ 16 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> { if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem ( <S2SV_ModEnd> cpu. sched <S2SV_ModStart>. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else <S2SV_ModEnd> tp -> tv_sec <S2SV_ModStart> tp ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
742,"<S2SV_ModStart> -> tif_dir ; int64_t <S2SV_ModEnd> nstrips ; if <S2SV_ModStart> -> td_nstrips = TIFFhowmany_32 ( td -> td_imagelength, td -> td_rowsperstrip ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrips, ( uint32 ) td -> td_samplesperpixel, ""TIFFNumberOfStrips"" ) ; if ( td -> td_planarconfig == PLANARCONFIG_SEPARATE ) nstrips = _TIFFMultiply32 ( tif, nstrip",0
743,"<S2SV_ModStart> lua_module ) ; luaLuaProviderConfig * prov_config = ap_get_provider_config ( r -> server -> module_config, & lua_module ) ; luaLuaProviderConfig * prov_config = ap_get_provider_config ( r -> per_dir_config, & lua_module ) ; luaLuaProviderConfig * prov_config = ap_get_provider_config ( r -> per_dir_config, & lua_module ) ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, prov_spec -> function_name, ""authz <S2SV_blank> provider"" ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua",0
744,<S2SV_ModStart> * prev ; unsigned long addr <S2SV_ModEnd> ; error = <S2SV_ModStart> = security_mmap_addr ( <S2SV_ModEnd> address ) ; <S2SV_ModStart> address ) ; if ( error ) return error ; prev = vma -> vm_prev ; if (! ( prev -> vm_flags & VM_GROWSDOWN ) ) { if ( address - prev -> vm_start < stack_guard_gap ) return - ENOMEM ; } if (! ( vma -> vm_flags & VM_GROWSDOWN ) ) { if ( address - prev -> vm_start < stack_guard_gap ) return - ENOMEM ; } if (! ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) { if ( address - prev -> vm_end < stack_guard_gap ) return - ENOMEM ; } if (! ( vma -> vm_flags & VM_GROWSDOWN ) ) { if ( address - prev -> vm_end < stack_guard_gap ) return - ENOMEM ; if (! ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM,0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( inode, & mode, & acl ) ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> char * data <S2SV_ModEnd>, int optional <S2SV_ModStart> mountflags & ~ MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart> mountflags & ~ MS_BIND <S2SV_ModEnd> ) { if <S2SV_ModStart> mountflags & ~ MS_NOEXEC <S2SV_ModEnd> ) { DEBUG <S2SV_ModStart> mountflags ) ; if ( mountflags & MS_NOEXEC ) { DEBUG ( ""mountflags <S2SV_blank> already <S2SV_blank> was <S2SV_blank> %lu, <S2SV_blank> skipping <S2SV_blank> remount"", mountflags ) ; goto skipremount ; } if ( sb. f_flag & MS_NOEXEC ) { DEBUG ( ""mountflags <S2SV_blank> already <S2SV_blank> was <S2SV_blank> %lu, <S2SV_blank> skipping <S2SV_blank> remount"", mountflags ) ; goto skipremount ; } if ( sb. f_flag & MS_NOEXEC ) { DEBUG ( ""mountflags <S2SV_blank> already <S2SV_blank> was <S2SV_blank> %lu, <S2SV_blank> skipping <S2SV_blank> remount"", mountflags ) ; goto skipremount ; } if ( sb. f_flag & MS_NOEXEC ) { DEBUG ( ""mountflags <S2SV_blank> already <S2SV_blank> was <S2SV_blank> %lu, <S2SV_blank> skipping <S2SV_blank> remount"", mountflags ) ; goto skipremount ; } if ( sb. f_flag & MS_NOEXEC ) { DEBUG ( ""mountflags <S2SV_blank> already <S2SV_blank> was <S2SV_blank> %lu",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,"<S2SV_ModStart> if (! proto_end ||! strchr ( proto_end, ""://"" ) ||! strchr ( proto_end + 3, '@' ) ||! strchr ( proto_end + 3, ':' ) ) return 0 ; cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else if ( at <= cp ) { host = at + 1 ; } else if ( at <= cp ) { c -> username = url_decode ( cp, at - cp ) ; c -> password = url_decode ( cp, at - cp ) ; c -> username = url_decode ( cp, at - cp ) ; c -> password = url_decode ( cp + 1, at - ( cp + 1 ) ) ; c -> username = url_decode ( cp, at - cp ) ; c -> password = url_decode ( colon + 1, at - ( colon + 1 ) ) ; } else if ( at <= cp ) { c -> username = url_decode ( cp, at - cp ) ; c -> password = url_decode ( cp, at",0
750,"<S2SV_ModStart>, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
751,"<S2SV_ModStart> -> actual ; struct usb_ep * ep = io_data -> ep ; struct usb_request * req = io_data -> req ; <S2SV_ModStart> ; usb_ep_free_request ( ep <S2SV_ModEnd>, io_data -> <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb",0
752,<S2SV_ModStart> ; if ( <S2SV_ModEnd> rt -> rt_flags <S2SV_ModStart> &&! skb_sec_path ( skb ) ) ip_rt_send_redirect ( skb ) ;,0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { struct key_payload * p = & key -> payload <S2SV_ModEnd> ; struct trusted_key_options <S2SV_ModStart> trusted_key_payload * new_p = NULL ; struct trusted_key_options * new_o = NULL ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> pcrlock ) { pr_info ( ""trusted_key: <S2SV_blank> pcrlock <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_o ) ; goto out ; } if (! p -> migratable ) { pr_info ( ""trusted_key: <S2SV_blank> key_migratable <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_o ) ; goto out ; } <S2SV_ModEnd> dump_payload (",0
755,<S2SV_ModStart> 1 ; } if ( n <= 0 ) { break ; } v |= <S2SV_ModEnd> ( c << <S2SV_ModStart> << 24 ) ; if ( n <= 0 ) { break ; } v >>= 8 ; } if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; * val = ( int_fast32_t ) jas_malloc ( 4 ) ; } if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; } if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; } if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; } if ( val ) { * val = ( int_fast32_t ) jas_malloc ( 4 ) ; if ( val ) { * val = ( int_fast32_t,0
756,"<S2SV_ModStart> int lci_o ; if (! skb_queue_empty ( & loopback_queue ) ) break ; lci_i = ( ( skb -> data [ 0 ] << 8 ) & 0xF00 ) + ( ( skb -> data [ 1 ] << 0 ) & 0x0FF ) ; frametype = skb -> data [ 2 ] ; dest = ( rose_address * ) ( skb -> data + 4 ) ; skb_reset_transport_header ( skb ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( ( dev = rose_dev_get ( dest ) ) == NULL ) k",0
757,"<S2SV_ModStart> gfn ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, & new ) ; kvm_iommu_unmap_pages ( kvm, &",0
758,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
759,"<S2SV_ModStart> fdt ) ; if ( end - path < path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if ( end - path < path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> FDT_PROP : include = want >= 2 ; stop_at = offset ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if (! end ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE",0
760,"<S2SV_ModStart> ) ) ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SO",0
761,"<S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE",0
762,"<S2SV_ModStart> ) ) { if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> expires <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lldslots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lldslots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank>",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
764,"<S2SV_ModStart> -> priv ; u8 wo = 0 <S2SV_ModStart> EOPNOTSUPP ; } if ( wlen > MAX_XFER_SIZE - 1 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } mutex_lock ( & d -> data_mutex ) ; st -> data [ 0 ] = cmd ; memcpy ( & st -> data [ 1 ], wbuf, wlen ) ; memcpy ( & st -> data [ 1 + wlen ], rbuf, rlen ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_",0
765,"<S2SV_ModStart> -> priv -> watch_id = g_io_add_watch ( channel, G_IO_IN | G_IO_ERR, ( GIOFunc ) client_iochannel_watch, client ) ; <S2SV_ModStart> -> priv -> watch_id = g_io_add_watch ( channel, G_IO_IN | G_IO_ERR, ( GIOFunc ) client_iochannel_watch, client ) ; g_io_channel_unref ( channel ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ;",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; kfree ( new_root_item ) ; new_root_item = kmalloc ( sizeof ( * new_root_item ), GFP_NOFS ) ; if (! new_root_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; kfree ( new_root_item ) ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> s ) ; <S2SV_ModEnd> if ( atomic_long_dec_and_test <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null>,0
770,"<S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> chanmap_size * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> chanmap_size ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> NULL ) { size_t chanmap_size = map_info -> chanmap_size * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, map_info -> chanmap_size ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, map_info -> chanmap_size )",0
771,"<S2SV_ModStart> check_scale_factors ( sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4, sf -> x_w, sf -> y_w, sf -> y_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [",0
772,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> nest_level < 0 ) return GPMF_ERROR_BAD_STRUCTURE ; nestsize = ms -> nest_size [ ms -> nest_level ] ; if ( nestsize > ( int32_t ) ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE,0
773,"<S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( e -> comefrom & ( 1 << NF_INET_NUMHOOKS ) ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp (",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1,",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; if ( opt <S2SV_ModEnd> ) sock_kfree_s ( <S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
777,"<S2SV_ModStart> * cmsbio = NULL, * tmpin = NULL ; if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } <S2SV_ModStart> tmpin ) ; if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } <S2SV_ModStart> tmpin ) ; } if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ; goto err ; } if (! dcont &&! check_content ( cms ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_CONTENT ) ;",0
778,"<S2SV_ModStart> = rcu_dereference_protected ( np -> mcastopt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ; if ( copy_to_user ( optval, & np -> mcastopt. bits. src, sizeof ( * np -> mcastopt. bits. src ), sizeof ( * np -> mcastopt. bits. src ) ) ) return - EFAULT ; if ( copy_to_user ( optval, & np -> mcastopt. bits. dst, sizeof ( * np -> mcastopt. bits. dst ), sizeof ( * np -> mcastopt. bits. src )!= sizeof ( * np -> mcastopt. bits. dst ) || copy_to_user ( optval, & np -> mcastopt. bits. src ), sizeof ( * np -> mcastopt. bits. src ) ) return - EFAULT ; if ( copy_to_user ( optval, & np -> mcastopt. dst, sizeof ( * np -> mcastopt. dst ), sizeof ( * np -> mcastopt. dst ), sizeof ( * np -> mcastopt",0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops_rcu <S2SV_ModEnd> ) ; sctp_v4_del_protocol <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_protosw_,0
780,<S2SV_ModStart> cs_flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> info ; netdev_notifier_info_init <S2SV_ModEnd> ( & info,0
782,"<S2SV_ModStart> ) ; if (! mm ) { leave_mm ( smp_processor_id ( ) ) ; base_pages_to_flush = TLB_FLUSH_ALL ; } if ( ( start!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_CEILING ) ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_",0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ;",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ) { temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( foundit == 1 && ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) ) { temp [ i ] = 0 ; break ; } if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { temp [ i ] = 0 ; break ; } if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { temp [ i ] = 0 ; break ; } <S2SV_ModEnd> i ++ ;,0
785,<S2SV_ModStart> task -> slow_task ) { spin_lock_irq ( & task -> slow_task -> lock ) ; <S2SV_ModStart> slow_task -> timer ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
786,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
787,"<S2SV_ModStart> tlv_size ) ; if ( ( tlv = calloc ( tlv_size, sizeof ( * tlv ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> port"" ) ; return - 1 ; } <S2SV_ModStart> tlv_size ) ; if ( ( tlv = calloc ( tlv_size, sizeof ( * tlv ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> port"" ) ; return - 1 ; } <S2SV_ModStart> -> c_port ) ; if ( ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
788,"<S2SV_ModStart>, data ) ; if ( next_size == BPLIST_UINT ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } next_size = UINT_TO_HOST ( * object, next_size ) ; if ( next_size == BPLIST_UINT ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, next_size ) ; ( * object ) ++ ; if ( next_size == BPLIST_UINT ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ;",0
789,"<S2SV_ModStart> -> init ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rx",0
790,"<S2SV_ModStart> all_channels_lock ) ; if (! atomic_dec_and_test ( & pch -> file. refcnt ) ) { pr_debug ( "" <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
791,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> XATTR_REPLACE ) { struct btrfs_dir_item * di = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans",0
792,<S2SV_ModStart> 0xbf ) return 0 <S2SV_ModEnd> ; op -> <S2SV_ModStart> op -> op == WASM_OP_I32EQZ || op -> op == WASM_OP_I32EQZ || op -> op == WASM_OP_I32EQZ || op -> op == WASM_OP_I32EQZ || op -> op == WASM_OP_I32EQZ || op -> op == WASM_OP_I32EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || <S2SV_ModStart> WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == WASM_OP_I64EQZ || op -> op == W,0
793,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart> plane, encode_block_intra <S2SV_ModEnd> ) ; }",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; if (",0
796,<S2SV_ModStart> ++ ; } # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_ModStart> t + 15 ) && HAVE_OP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; } else # endif <S2SV_ModStart> # endif { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) && do { * ip ++ = * ip ++ ; } while ( ip < ip_end ) ; ip ++ ; } t += 3 ; copy_literal_run : # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) ) { * ip ++ = * ip ++ ; do { * op ++ = * ip ++ ; } while ( ip < ip_end ) ; ip = ie ;,0
797,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; }",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out2 ; vmx_msr_bitmap_legacy_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out3 ; vmx_msr_bitmap_longmode_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_bitmap_longmode_x2apic ) goto out4 ; vmx_msr_bitmap_nested_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested_x2apic ) goto out5 ;,0
800,"<S2SV_ModStart> ; if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz > SIZE_MAX - shdr -> sh_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz > SIZE_MAX - shdr -> sh_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> -> av_per_frame_bandwidth * ( rc <S2SV_ModEnd> -> baseline_gf_interval * <S2SV_ModStart> -> baseline_gf_interval * ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc <S2SV_ModEnd> -> baseline_gf_interval + <S2SV_ModStart> -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline,0
803,"<S2SV_ModStart> i ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; }",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,<S2SV_ModStart> } offset = 0 ; if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ;,0
806,"<S2SV_ModStart> tail ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) return 0 ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst",0
807,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModStart> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModStart> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null > BOOL <S2SV_ModStart> <S2SV_null> BOOL > <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModStart> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL <S2SV_ModEnd> <S2SV_null> BOOL,0
808,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ;,0
809,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { error = - 1 ; goto exit ; } if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { buff [ FN_DIRSEP - 1 ] = 0 ; } if ( strlen ( opt_basedir ) > FN_DIRSEP - 1 ) { my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if ( opt_basedir ) { my_free ( opt_basedir ) ; opt_basedir",0
810,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { zap = dereference_key_locked ( key ) ; if ( zap ) call_rcu ( & zap -> rcu, user_free_payload_rcu ) ; }",0
811,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( sk -> sk_filter, sock_owned_by_user ( sk ) ) ; if ( f -> type_mask == 0 ) { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; } else { uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. type_mask = * ( ( u32 * ) f -> type_mask + 1 ) ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } else { uf. type_mask = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. opcode = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = *",0
812,"<S2SV_ModStart> -> decrypt_cb ) { const int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } if ( pbi -> decrypt_cb ) { const int n = ( int ) ( data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } if ( pbi -> decrypt_cb ) { const int n = ( int ) ( data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRU",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart> peer. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; list_add_tail ( & asoc -> peer. transport_addr_list, & new -> peer. transport_addr_list ) ; } else { list_add_tail ( & asoc -> peer. transport_addr_list, & asoc -> peer. transport_addr_list ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; }",0
815,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> (%d)"", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) )",0
818,"<S2SV_ModStart> * input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> ) break ; # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_ModEnd> if ( _yr_re_alloc_storage <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_BACKWARDS ) { <S2SV_ModStart> input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re",0
819,"<S2SV_ModStart> returnrate, int <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> returnintra ) { # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> best_rd_sse = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = best_ref_mv_sb [",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm,",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; h -> hdr -> magic [ 0 ] = '\\0' ; h -> hdr -> magic [ 1 ] = '\\0' ; h -> hdr -> magic [ 2 ] = '\\0' ; h -> hdr -> magic [ 3 ] = '\\0' ; h -> hdr -> magic [ 4 ] = '\\0' ; h -> hdr -> magic [ 5 ] = '\\0' ; h -> hdr -> magic [ 6 ] = '\\0' ; h -> hdr -> magic [ 7 ] = '\\0' ; h -> hdr -> magic [ 8 ] = '\\0' ; h -> hdr -> magic [ 9 ] = '\\0' ; h -> hdr -> magic [ 10 ] = '\\0' ; h -> hdr -> magic [ 11 ] = '\\0' ; h -> hdr -> magic [ 12 ] = '\\0' ; h -> hdr -> magic [ 13 ] = '\\0' ; h -> hdr -> magic [ 13 ] = '\\0' ; h -> hdr -> magic [ 14 ] = '\\0' ; h -> hdr -> magic [ 9 ] = '\\0' ; h -> hdr -> magic [ 10 ] = '\\0' ; h,0
822,"<S2SV_ModStart> h, const cdf_stream_t <S2SV_ModEnd> * sst, <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; <S2SV_ModStart> break ; } m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m <S2SV_ModEnd> ; } <S2SV_null>",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc <S2SV_ModEnd>, u1_seq_parameter_set_id ; <S2SV_ModStart> ; u1_level_idc = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_seq_parameter_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_level_idc = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 (",0
824,<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ; <S2SV_ModStart> length ) ; if ( err ) return - EFAULT,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> const params = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> vpx_svc_parameters_t * ) ; vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height ) ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_",0
826,"<S2SV_ModStart> ) ) ; if ( fhdr -> frag_off & htons ( IP6_MF ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
827,"<S2SV_ModStart> out ) { TIFFSetField ( in, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( in, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; TIFFSetField ( in, TIFFTAG_COMPRESSION, compression ) ; TIFFSetField ( in, TIFFTAG_PHOTOMETRIC, input_photometric ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName (",0
828,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int check_symlinks <S2SV_ModEnd> ( struct archive_write_disk <S2SV_ModStart> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } if ( S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if (! S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } a -> pst = NULL ; if (! S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED )",0
829,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
830,"<S2SV_ModStart> sbi ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> -> i_location ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart>. extLength && ( bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) ) { if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino",0
831,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi, shift_y, shift_uv ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int index = shift_y ; for ( i = 0 ; i < h ; i ++ ) { memset ( & lfm ->",0
832,"<S2SV_ModStart> dst_size ) { const <S2SV_ModStart> { int namelen = ff_amf_tag_size ( data, data_end ) ; if ( namelen < 0 ) namelen = 0 ; while ( data < data_end ) { len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 ) <S2SV_ModEnd> len = data_end <S2SV_ModStart> - 1 ; data += len ; } if ( data_end - data < 3 ) return - 1 ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if (! size ) break ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data, name, namelen )",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return swabHorDiff <S2SV_ModEnd> ( tif, <S2SV_ModStart> wc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""name"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! smatch ( option, ""visible"" ) ) { httpSetRouteSessionVisibility ( state -> route, scaselessmatch ( ovalue, ""visible"" ) ) ; } else if ( smatch ( option, ""name"" ) ) { httpSetRouteSessionVisibility ( state -> route, scaselessmatch ( ovalue, ""name"" ) ; } else if ( smatch ( option, ""visible"" ) ) { httpSetRouteSessionVisibility ( state -> route, scaselessmatch ( ovalue, ""visible"" ) ) ; } else if ( smatch ( option, ""name""",0
837,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> * mgr_hdl ; pid_t <S2SV_ModEnd> pid ; memset <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( s_path, <S2SV_ModStart> ( s_path ) ) ; memset <S2SV_ModEnd> ( c_path, <S2SV_ModStart> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_",0
840,<S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart> == NULL || ( effect_param_t ) <S2SV_ModStart>,0
841,"<S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( Cor",0
842,"<S2SV_ModStart> ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( * code ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( * code ), & err ) ; if ( ret [ j ] -> key_data_length [ 0 ] == 0 ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( * code ), & err ) ; if ( ret [ j ] -> key_data",0
843,"<S2SV_ModStart> OP_JUMP ) ; if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } } else { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; }",0
844,"<S2SV_ModStart> if ( sscanf <S2SV_ModEnd> ( l_line, <S2SV_ModStart> o_element_count ) == 4 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count ) ) ; * o_values = ( double * ) malloc ( sizeof ( double * ) * ( * o_row_count ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count ) ) ; * o_column_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_values ) ) ; * o_column_idx_id = l_i ; }",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> STREAM s ; <S2SV_ModStart> int length ; if (! s_check_end ( s ) ) { rdp_protocol_error ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> closed"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) { rdp_protocol_error ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> closed"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) { rdp_protocol_error ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> closed"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) { rdp_protocol_error ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> closed"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) { rdp_protocol_error ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> stream <S2SV_blank>",0
847,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int st_idx <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> st_idx = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> st_idx = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> st_idx = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> st_idx = 0 <S2SV_ModStart> ; if ( st_idx < S2SV_null > && st_idx < S2SV_null > && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx < S2SV_null && st_idx,0
848,<S2SV_ModStart> (! ( ( ( c >= 0xC0 ) && ( c <= 0xD6 ) ) || ( ( c >= 0xF8 ) && ( c <= 0x2FF ) ) || ( ( c >= 0x370 ) && ( c <= 0x37D ) ) || ( ( c >= 0x37F ) && ( c <= 0x1FFF ) ) || ( ( c >= 0x200C ) && ( c <= 0x218F ) ) || ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFD0 ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xFD0 ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xFD0 ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xFD0 ) && ( c <= 0xFDFF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFD0 ) && (,0
849,"<S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> number: <S2SV_blank> %d\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> number: <S2SV_blank> %d\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> number: <S2SV_blank> %d\\n"", __func__ ) ; return ret ; } if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> number: <S2SV_blank> %d\\n"", __func__ ) ; return ret ; } <S2SV_ModEnd> ch = i40e_find_channel <S2SV_ModStart> ch ) ; if (! ch ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> number: <S2SV_blank> %d\\n"", __func__ ) ; return ret",0
850,"<S2SV_ModStart> { if ( <S2SV_ModEnd> * rsize >= <S2SV_ModStart> ] == 0x3c && rdesc [ 16 ] == 0xff && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = 0x3c ; rdesc [ 16 ] = 0x02 ; } else if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = 0x3c ; rdesc [ 12 ] = 0x02 ; }",0
851,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
852,"<S2SV_ModStart> } } } eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send",0
853,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ;",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> -> mode_info_context ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, yv12_fb_new -> y_buffer, yv12_fb_new -> u_buffer ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, yv12_fb_new -> v_buffer, yv12_fb_new -> u_buffer ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, yv12_fb_new -> mode_info_context, yv12_fb_new -> uv_buffer, yv12_fb_new -> u_buffer ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, yv12_fb_new -> v_buffer, yv12_fb_new -> u_buffer ) ; memcpy ( lf_mic -> mode_info_context, yv12_fb_new -> mode_info_context, uv_stride ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context",0
856,<S2SV_ModStart> = AF_TIPC ; <S2SV_ModEnd> addr -> addr. <S2SV_ModStart> = TIPC_ADDR_ID ; if (! msg_is_msg ( msg ) ) addr -> addrtype = TIPC_ADDR_ID_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
857,<S2SV_ModStart> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if (,0
858,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
859,"<S2SV_ModStart> ; if ( use_ssl && tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( use_proxy && tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( use_proxy && tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( use_proxy && tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( use_proxy && tmpzval == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if (",0
860,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * buf <S2SV_ModEnd> ; char * <S2SV_ModStart> char * p ; const char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == buf ) { Py_DECREF ( u ) ; return NULL ; } p += 5 ; if ( * s & 0x80 ) { int kind ; void * data ; Py_ssize_t i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p -",0
861,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( data_size > ( ssize_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( ssize_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( ssize_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LI",0
862,"<S2SV_ModStart> WaveHeader ; uint32_t <S2SV_ModEnd> bcount ; infilesize <S2SV_ModStart> bcount ; } if (! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_",0
863,"<S2SV_ModStart> ) ) ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SO",0
864,<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock <S2SV_ModEnd> ( & slave_active_lock,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> ; char ch <S2SV_ModStart> = 0 ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_name, stb. st_uid ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_gid, stb. st_uid, stb. st_gid ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_uid, stb. st_gid ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_gid, stb. st_gid, stb. st_gid ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %",0
866,"<S2SV_ModStart> } else if ( metadata_find ( mc, ""private:close:closer"" ) && ( target || has_priv ( si, PRIV_CHAN_AUSPEX ) ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( metadata_find ( mc, ""private:close:closer"" ) && ( target || has_priv ( si, PRIV_CHAN_AUSPEX ) ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( metadata_find ( mc, ""private:close:closer"" ) && ( target || has_priv ( si, PRIV_CHAN_AUSPEX ) ) { unsigned int flags = ( target!= NULL )? flags_to_bitmask ( target, 0 ) : 0 ; do_list ( si, mc, flags ) ; return ; } else if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) ==",0
867,"<S2SV_ModStart> -> buffer ; if (! ctx -> valid ) { ghash_set_error ( ctx, - ENOKEY ) ; return - ENOKEY ; } memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ; if (! ghash_set_error ( ctx, - ENOKEY ) ) { ghash_set_error ( ctx, - ENOKEY ) ; return - ENOKEY ; } memcpy ( dst, dctx -> buffer, GHASH_BLOCK_SIZE ) ; if (! ghash_check_error ( ctx, - ENOKEY ) ) { ghash_set_error ( ctx, - ENOKEY ) ; return - ENOKEY ; } if (! ghash_set_error ( ctx, - ENOKEY ) ) { ghash_set_error ( ctx, - ENOKEY ) ; return - ENOKEY ; } memcpy ( dst, dctx -> buffer, GHASH_BLOCK_SIZE ) ; if (! ghash_check_error ( ctx, - ENOKEY ) ) { ghash_set_error ( ctx, - ENOKEY ) ; return - ENOKEY ; }",0
868,"<S2SV_ModStart> ; if (! ast -> sub_ctx ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> sub_ctx ) ; if (! ast -> sub_ctx -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> sub_ctx ) ; if (! ast -> sub_input -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } <S2SV_ModStart> sub_ctx ) ; if (! ff_copy_whiteblacklists ( ast -> sub_ctx, s ) ) goto error ; ast -> sub_ctx -> sub_input = sub_demuxer ; if (! ast -> sub_input -> sub_input ) { av_freep ( & pd. buf ) ; goto error ; } if (! ff_copy_whiteblacklists ( ast -> sub_ctx, s ) ) goto error ; ast -> sub_ctx -> sub_input = sub_demuxer ; if (! ff_copy_whiteblacklists ( ast -> sub_ctx, s ) ) goto error ; ast -> sub_input -> pb = pb ; if (! ast -> sub_",0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; int problem = 0 ; if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( ap_version && strcmp ( inbuf. data, ap_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( ap_option && strcmp ( inbuf. data, sendauth_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
872,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 0 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 1 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 2 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 3 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 4 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 5 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & buffer [ 6 ], ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR",0
873,<S2SV_ModStart> ; if ( p -> mnt. mnt_root == q -> mnt. mnt_root && <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
874,"<S2SV_ModStart> ( i = 0 ; i < NUM_YV12_BUFFERS ; i ++ ) { if ( vp8_yv12_alloc_frame_buffer ( & oci -> yv12_fb [ i ], width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; } for ( i = 0 ; i < NUM_YV12_BUFFERS ; i ++ ) { if ( vp8_yv12_alloc_frame_buffer ( & oci -> yv12_fb [ i ], width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; } for ( i = 0 ; i < NUM_YV12_BUFFERS ; i ++ ) { if ( vp8_yv12_alloc_frame_buffer ( & oci -> yv12_fb [ i ], width, height, VP8BORDERINPIXELS ) < 0 ) goto",0
875,<S2SV_ModStart> php_zip_get_properties ; zip_object_handlers. get_properties_ptr = php_zip_get_properties_ptr ; zip_object_handlers. get_properties_ptr = php_zip_get_properties_ptr ; zip_object_handlers. get_properties_ptr = php_zip_get_properties_ptr <S2SV_ModStart> ; zip_object_handlers. get_properties_ptr = php_zip_get_properties_ptr ; zip_object_handlers. get_properties_ptr_ptr = php_zip_get_properties_ptr <S2SV_ModStart> ; zip_object_handlers. get_properties_ptr = php_zip_get_properties_ptr ; zip_object_handlers. get_properties_ptr = php_zip_get_properties_ptr ; zip_object_handlers. get_properties_ptr = php_zip_get_properties ; zip_object_handlers. get_properties_ptr = php_zip_get_properties ; zip_object_handlers. get_properties_ptr = php_zip_get_properties ; zip_object_handlers. get_properties_ptr = php_zip_get_properties <S2SV_ModEnd> ; zip_object_handlers.,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; if ( iova + length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> -> iova ) || ( iova + length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> -> iova ) || ( iova + length > <S2SV_ModEnd> mem -> iova <S2SV_ModStart> -> iova ) || ( iova + length > <S2SV_ModEnd> mem -> iova,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) )",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec == 0 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; return - EAGAIN ; }",0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ <S2SV_ModEnd> ; } <S2SV_null>,0
881,"<S2SV_ModStart> FAT_ENTRY subseqEntry ; if ( cluster!= fs -> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; else subseqEntry. value = 0 ; <S2SV_ModStart> clusters - 1 ) <S2SV_ModEnd> get_fat ( & <S2SV_ModStart> ; if ( cluster!= fs -> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ; size = 4 ; break ; case 64 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster - 1, fs ) ; data = fs -> fat + cluster * 4 ; * ( unsigned short * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size = 4 ; } break ; case 48 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; sk_common_release ( sk ) ;,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u2_total_mbs_coded ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbsNby2 ++ ; ps_dec -> u2_total_mbs_coded += u1_num_mbsNby2 ++ ; <S2SV_ModStart> u2_total_mbs_coded ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbsNby2 ++ ; ps_dec -> u2_total_mbs_coded += u1_num,0
885,<S2SV_ModStart> ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { free_page ( ( unsigned long ) page ) ; return - ENOMEM ; },0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> inode ) { int result ; <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode, <S2SV_ModStart> ) ) { result = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode,",0
887,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> fsnotify_group * inotify_new_group <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = user ; <S2SV_ModEnd> group -> inotify_data,0
888,"<S2SV_ModStart> ) ; } if ( in -> data [ p ] ) { int w = inlink -> w ; int h = inlink -> h ; int r = s -> radius ; if (! FFMIN ( w, h ) > 2 * r ) filter ( s, out -> data [ p ], in -> data [ p ], w, h ) ; else if (! FFMIN ( w, h ) > 2 * r ) filter ( s, out -> data [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize",0
889,"<S2SV_ModStart> [ 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> buffers [ 4 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; if ( screen -> buffers [ 5 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ;",0
890,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
891,"<S2SV_ModStart> uint16 strip, nstrips ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
892,"<S2SV_ModStart> base_name ) ; size_t <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { char * const newname = ( char * ) mm_malloc ( base_len + 1 ) ; if (! newname ) return NULL ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; if (! n -- ) { char * const newname = ( char * ) mm_malloc ( base_len + 1 ) ; if (! newname ) return NULL ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len )",0
893,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int err = <S2SV_ModStart> <S2SV_null> err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY * TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY",0
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart> one, one2 <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> number_planes_filled ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> number_planes_filled ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( Cor",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> += planeSize ; return TRUE ;,0
897,"<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; if (! ei -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! is_encryption_context_consistent_with_policy ( ei, policy ) ) return 0 ; if (! is_encryption_context_consistent_with_policy ( ei, policy ) ) return 0 ; if (! is_encryption_context_consistent_with_policy ( ei, policy ) ) return 0 ; if (! is_encryption_context_consistent_with_policy ( ei, policy ) ) return - EINVAL ;",0
898,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> state -> host <S2SV_ModStart> state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
899,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. raw_data = description,. match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key_put ( key ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ;",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart>! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime || <S2SV_ModStart> ) { if ( prev_hash ) free ( prev_hash ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if ( bbversion ) free ( bbversion ) ; if ( nbit ) free ( nbit ) ; if ( ntime ) free ( ntime ) ;,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,<S2SV_ModStart> ) { void * free_ptr = safe_calloc <S2SV_ModEnd> ( num * <S2SV_ModStart> ) ) { free_ptr <S2SV_ModEnd> ( ptr ) <S2SV_ModStart> ptr ) { free_ptr <S2SV_ModEnd> ( ptr ) <S2SV_ModStart> } return free_ptr <S2SV_ModEnd> ; } <S2SV_null>,0
904,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; <S2SV_ModEnd> PyId___dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
906,"<S2SV_ModStart>, USB_DT_OTG, sizeof ( * desc ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) & desc ) ; if (! desc ) return 0 ; if ( desc -> bmAttributes & USB_OTG_HNP ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; } else if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err ( & udev -> dev, ""can\'t <S2SV_blank> set <S2SV_blank> HNP <S2SV_blank> mode: <S2SV_blank> %d\\",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_PERIOD : return perf_event_set_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_GET_ID : { u64 id ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; tp -> prr_out = dividend ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; tp -> prr_out = dividend ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( skcipher ) { crypto_free_skcipher ( skcipher ) ; return NULL ; } <S2SV_ModStart> mask ) ; skcipher = crypto_alloc_skcipher ( name, type, mask ) ; if (! skcipher ) { crypto_free_skcipher ( skcipher ) ; return NULL ; }",0
911,"<S2SV_ModStart> -> src_len ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3, 0 ) ) return - EINVAL ; <S2SV_ModStart> -> src_len ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3, 0 ) ) return - EINVAL ; <S2SV_ModStart> -> src_len ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3, 0 ) ) return - EINVAL ; } <S2SV_ModStart> -> src_len ) { if (! ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3, 0 ) ) return - EINVAL ; if (! ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3, 0 ) ) return - EINVAL ; } <S2SV_ModStart> -> src_len ) { if (! ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3, 0 ) ) return - EINVAL ; } <S2SV_ModStart> -> src_len ) { if (! ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 3,",0
912,<S2SV_ModStart> tile_height ) { av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> kempf_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> synth_tile ) c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ;,0
913,"<S2SV_ModStart> iv ) ; if (! NIL_P ( vpass ) ) { rb_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; <S2SV_ModStart> ) ; } if (! NIL_P ( vpass ) ) { rb_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> PKCS#5 <S2SV_blank> key"" ) ; }",0
914,<S2SV_ModStart> { * dstptr2 = * dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; dstptr = & a [ ( 1 - parity ) * stride ] ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr,0
915,"<S2SV_ModStart> ; register_savevm ( <S2SV_ModEnd> dev, ""stellaris_enet""",0
916,"<S2SV_ModStart> p ) { u_int <S2SV_ModEnd> length = h <S2SV_ModStart> ) ; } ND_TCHECK_32BITS ( p, length ) ; <S2SV_ModStart> ) ; } ND_TCHECK_32BITS ( p, length ) ;",0
917,<S2SV_ModStart> ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NO <S2SV_blank> FS ) { rc = - EBUSY ; goto out ; },0
918,<S2SV_ModStart> & SOF_TIMESTAMPING_OPT_STATS ) { if <S2SV_ModEnd> ( sk -> <S2SV_ModStart> & SOF_TIMESTAMPING_OPT_STATS ) { if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_SOFTWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_SOFTWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_SOFTWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) &&! ( sk -> sk_tsflags & SOF_,0
919,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> raptor_sax2_parse_start ( rdf_xml_parser,0
920,"<S2SV_ModStart> alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED",0
921,"<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( * versionMinor == 0 ) { if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_ENCRYPT ; }",0
922,"<S2SV_ModStart>, session -> recv_window_size, session -> local_window_size <S2SV_ModStart>, session -> recv_window_size, session -> local_window_size ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } rv = nghttp2_session_adjust_idle_stream ( session ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } if ( nghttp2_is_fatal ( rv ) ) { return rv ; } if ( nghttp2_is_fatal ( rv ) ) { return rv ; } if (! nghttp2_session_want_read ( session ) ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( memcmp ( & NGHTTP2_CLIENT_MAGIC [ NGHTTP2_CLIENT_MAGIC_LEN - iframe -> payloadleft ], in, readlen )!= 0 ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_FIRST_SETTINGS ; }",0
923,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ;,0
924,<S2SV_ModStart> += dif ; if ( opt2 -> hopopt ) * ( ( char * * ) & opt2 -> hopopt ) += dif ; if ( opt2 -> dst0opt ) * ( ( char * * ) & opt2 -> dst0opt ) += dif ; if ( opt2 -> dst1opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> srcrt ) * ( ( char * * ) & opt2 -> srcrt ) += dif ;,0
925,"<S2SV_ModStart> intel_arch_events_quirk ) ; if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON )",0
926,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < ch ; ++ i ) if (! do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( j = 0 ; j < ch ; ++ j ) if (! do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; if ( rtype == 2 && ch!= 1 ) { for ( j = 0 ; j < ch ; ++ j ) if (! do_not_decode [ j ] ) memset ( residue_buffers [ i ], 0, sizeof ( float )",0
927,"<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> ; challenge_count = sysctl_tcp_challenge_ack_limit ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> last_oow_ack_time = now ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK_LIMIT ) { NET_INC_STATS ( sock_net ( sk ), LINU",0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * stop ) { const int t = p -> token ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; int i = 2 * p -> skip_eob_node ; if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> saved_wb ; write_uncompressed_header ( cpi, & wb ) ; uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; unsigned int <S2SV_ModEnd> n ; quirks <S2SV_ModStart> - ENODEV ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
933,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> int id_len, idtype_len, i ; unsigned int dumpascii, dumphex ; const unsigned char * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModStart>",0
934,<S2SV_ModStart> group_dead ) ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd>, void * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",1
936,"<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) -> id ) ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) -> id ) ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_",0
937,"<S2SV_ModStart> urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> err_free_urb_to_pipe ; } if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ; goto err_",0
938,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0, xl0_0, xl1_0, xl20_0, xl21_0, x_0, x_1, x_l1_0, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l1_1, x_l2_0, x_l2_1, x_h2_",0
939,<S2SV_ModStart> ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } len = data [ dp ++ ] ; if ( len <= 0x7f ) { dp += len ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if,0
940,<S2SV_ModStart> ( flags & __GFP_ZERO <S2SV_ModEnd> ) memset (,0
941,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ) ; return FAILURE ; }",0
943,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 ) goto exit ; value [ n ] = min < 0? snto32 ( hid_field_extract ( hid, data, offset + n * size, size ) : hid_field_extract ( hid, data, offset + n * size, size ) ; value [ n ] = max < 0? snto32 ( hid_field_extract ( hid, data, offset + n * size, size ), size ) : hid_field_extract ( hid, data, offset + n * size, size ) ; if (! ( field -> flags & HID_MAIN_ITEM_VARIABLE ) && value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 ) goto exit ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,"<S2SV_ModStart> ; if ( argReg < 0 || argReg >= sizeof ( struct dex_debug_local_t ) <S2SV_ModEnd> ) { return <S2SV_ModStart> = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; if (! ( param_type_idx = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) { return ; } if (! ( param_type_idx = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) ) { return ; } if (! ( param_type_idx = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) ) { return ; } if (! ( param_type_idx = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) { return ; } if (! ( param_type_idx = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ) { return ; } if (! ( param_type_idx = r_uleb",0
946,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, proxy_host_val, req_proxy_host ( req ) ) ; rb_hash_aset ( env, proxy_port_val, req_proxy_port ( req ) ) ; rb_hash_aset ( env, proxy_port_val, req_proxy_port ( req ) ) ; rb_hash_aset ( env, proxy_username_val, req_proxy_username ( req ) ) ; rb_hash_aset ( env, proxy_password_val, req_proxy_password ( req ) ) ; rb_hash_aset ( env, proxy_password_val, req_proxy_password ( req ) ) ; rb_hash_aset ( env, proxy_username_val, req_proxy_username ( req ) ) ; rb_hash_aset ( env, proxy_password_val, req_proxy_password ( req ) ) ; rb_hash_aset ( env,",0
947,<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
948,"<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = FALSE ; # endif <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version"", ""HY000"" ) ;",0
949,"<S2SV_ModStart> type -> destroy ) { atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> qnkeys ) ; atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic",0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 ; char * line ; char * lp <S2SV_ModStart> { need *= 4 ; lp = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if (! line ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; return ; },0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; }",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { const JsVarFloat stopAtError = 0.0000001 ; if ( isnan ( val ) ) strncpy ( str, ""NaN"", len ) ; else if (! isfinite ( val ) ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,"<S2SV_ModStart> 5 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( length == 5 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d",0
956,"<S2SV_ModStart> cycles ) ; if ( unlikely ( irq_flags & IRQF_ONESHOT ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; }",0
957,"<S2SV_ModStart> { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_STR ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_ID ) { strncat ( str, ""ID:"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else jslTokenAsString ( lex -> tk, str, len )",0
958,"<S2SV_ModStart> } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device",0
959,,1
960,"<S2SV_ModStart> * output ; <S2SV_ModEnd> ssize_t i ; <S2SV_ModStart> ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( output ) ; return ( MagickTrue ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
961,<S2SV_ModStart> const si = get_svc_internal ( svc_ctx ) ; if ( si == NULL ) { return VPX_CODEC_INVALID_PARAM ; },0
962,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname (",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> atomic_dir = ""/tmp"" <S2SV_ModEnd> ; pw_init ( <S2SV_ModStart> ( fp = tempnam <S2SV_ModEnd> ( & tmpname <S2SV_ModStart>, atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * raw_to = xmpp_stanza_get_raw_to ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_to = xmpp_stanza_get_raw_to ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = x,0
967,"<S2SV_ModStart> ; } } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""DB <S2SV_blank> filename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""DB <S2SV_blank> filename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""DB <S2SV_blank> filename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename",0
968,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> ) ) ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1",0
972,<S2SV_ModStart> u4_num_bytes_consumed ) { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_,0
973,"<S2SV_ModStart> x, y, old_width, old_height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ) return false ; old_width = s_map -> layers [ layer ]. width ; old_height = s_map -> layers [ layer ]. height ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset,",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 3 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; return - 1 ;",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
977,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L",0
978,"<S2SV_ModStart> * buf ; size_t size = sizeof ( unsigned char * ) * chunk_num * chm -> chunk_size ; if (! chunk_num ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if ( chunk_num > chm -> num_chunks ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } size = sizeof ( unsigned char * ) * chunk_num * chm -> chunk_size ; if (! sys -> read ( fh, buf, ( int ) chm -> chunk_size ) ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t ) ( chunk_num * chunk_size ) )!= ( int ) chunk_size ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ;",0
979,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( sibling, & event -> sibling_list, group_entry ) { if ( sibling -> group_leader!= leader ) return - EINVAL ; if ( sibling -> group_leader!= sibling ) return - EINVAL ; } if (! validate_event <S2SV_ModEnd> ( & fake_pmu <S2SV_ModStart> group_entry ) { if ( sibling -> group_leader!= event ) return - EINVAL ; if ( sibling -> group_leader!= leader ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } if (! validate_event <S2SV_ModEnd> ( & fake_pmu",0
980,"<S2SV_ModStart> } } when 10 : if ( term. csi_argc!= 1 ) return ; <S2SV_ModStart> } } when 11 : if ( term. csi_argc!= 1 ) return ; win_set_pixels ( arg1, arg2 ) ; when 12 : if ( term. csi_argc!= 1 ) return ; win_set_zorder ( false ) ; when 13 : if ( term. csi_argc!= 1 ) return ; win_invalidate_all ( true ) ; when 14 : if ( term. csi_argc!= 1 ) return ; win_invalidate_all ( true ) ; when 15 : if ( term. csi_argc!= 1 ) return ; win_set_pixels ( arg1, arg2 ) ; when 16 : if ( term. csi_argc!= 1 ) return ; if ( term. csi_argc!= 1 ) return ; if ( term. csi_argc!= 1 ) return ; win_invalidate_all ( false ) ;",0
981,"<S2SV_ModStart> -> codec_tag == AV_RL32 ( ""WV1F"" ) && show_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( get_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( get_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( get_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( s -> codec_tag == AV_RL32 ( ""WV1F"" ) && show_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( get_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( get_bits ( gb, 26 ) == 0x575630 ) { skip_bits ( gb, 26 ) ; if ( s -> codec_tag == AV_RL32 ( ""WV1F"" ) && show_bits ( gb",0
982,"<S2SV_ModStart> ; if ( __get_user ( nsops, & tsops -> sem_num, err ) ; if ( __get_user ( nsops, & tsops -> sem_op, err ) ) { err = - EFAULT ; } else if ( __get_user ( nsops, & tsops -> sem_flg, err ) ) { err = - EFAULT ; } else if ( __get_user ( nsops, & tsops -> sem_num, err ) ) { err = - EFAULT ; } else if ( __get_user ( nsops, & tsops -> sem_op, err ) ; if ( __get_user ( nsops, & tsops -> sem_flg, err ) ) { err = - EFAULT ; } else if ( __get_user ( nsops, & tsops -> sem_flg, err ) ) { err = - EFAULT ; } else if ( __get_user ( nsops, & tsops -> sem_num, err ) ) { err = - EFAULT ; } else if ( __get_user ( nsops, & tsops -> sem_op, err ) ) { err = - EFAULT",0
983,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s,0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ].",0
985,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; <S2SV_ModEnd> i -> posY <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; <S2SV_ModEnd> i -> posY <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position",0
986,<S2SV_ModStart> = CDF_TOLE4 ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ;,0
987,<S2SV_ModStart> ; } } if ( bytes_matched >= max_bytes_matched ) { FAIL_ON_ERROR ( callback ( callback ( callback ( callback ( callback ( callback ( callback ( callback ( flags & ~ ( RE_FLAGS_BACKWARDS | ( RE_FLAGS_FORWARDS | ( RE_FLAGS_FORWARDS | ( RE_FLAGS_FORWARDS | ( RE_FLAGS_BACKWARDS | ( RE_FLAGS_FORWARDS | ( RE_FLAGS_BACKWARDS ) ) ) ) ) ) ) ) ; },0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> token ) { case LEX_EOF : strncpy ( str, ""EOF"" ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED",0
989,"<S2SV_ModStart> mnt_instance ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ;",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ) ) ; if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jas_pi_lyrno ( pi ) ) ; if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ), jpc_pi_lyrno ( pi ) ) ; }",0
992,"<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> iinfo ; uint32_t <S2SV_ModEnd> pos ; iinfo <S2SV_ModStart> iinfo ; pos = udf_block_map ( inode, 0 ) ; symlink = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; <S2SV_ModEnd> SetPageUptodate ( page <S2SV_ModStart> 0 ; out : up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
993,<S2SV_ModStart> else if ( vcpu -> arch. apic_base & X2APIC_MASK ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_legacy_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_legacy_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_apic_enabled ( vcpu -> kvm ),0
994,<S2SV_ModStart> ( ent!= NULL && <S2SV_ModEnd> * policy!= <S2SV_ModStart> ; } cleanup : ldap_msgfree ( result ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { * policy = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; if ( * policy!= NULL ) { * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy,0
995,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ; <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_sps_done ) return IHEVCD_INVALID_HEADER ;,0
996,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_long ( psf, data ) ; } else if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_le_",0
997,"<S2SV_ModStart> ; if ( d -> msg_len > CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) { printk ( KERN_INFO ""cx24116: <S2SV_blank> %s("", __func__ ) ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = * d -> msg [ i ] ; if ( ++ i < d -> msg_len ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = * d -> msg [ i ] ; if ( i < d -> msg_len ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = * d -> msg [ i ] ; state -> dsec_cmd. len = CX24116_DISEQC_",0
998,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> } pid_t child ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> _exit ( 0",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; int pktnum, hr, min, sec, csec, channel [ 10 ], direction [ 10 ] ; if ( num_items_scanned!= 7 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""%9d] <S2SV_blank> %2d:%2d.%9d <S2SV_blank> %9s <S2SV_blank> %9s"", & pktnum, & hr, & min, & sec, & csec, channel, direction ) ; if ( num_items_scanned!= 7 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len )",0
1002,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> ) ) { memset ( iucv -> msg_cmsg_buf, 0, sizeof ( * iucv -> msg_cmsg_buf ), 0, sizeof ( * iucv -> msg_cmsg_buf ) ) ; memset ( iucv -> msg_cmsg_buf, 0, sizeof ( * iucv -> msg_cmsg_buf ) ) ; memset ( iucv -> msg_cmsg_buf, 0, sizeof ( * iucv -> msg_cmsg_buf ) ) ; memset ( iucv -> msg_cmsg_buf, 0, sizeof ( * iucv -> msg_cmsg_buf ) ) ; memset ( iucv -> msg_cmsg_buf, 0, sizeof ( * iucv -> msg_cmsg_buf ) ) ;",0
1003,"<S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( zend_symtable_find <S2SV_ModStart> ; if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ),",0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags |= PIPE_BUF_FLAG_GIFT ; <S2SV_ModStart> } else { * obuf = * obuf ; obuf -> flags |= PIPE_BUF_FLAG_NONBLOCK ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; obuf -> len = len ; ret += obuf -> len ;,0
1006,"<S2SV_ModStart> tokenlen ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( * p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( * p -> tokenbuf ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( * p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( * p -> tokenbuf ) * 2 + 256 ; } else if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( * p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( * p -> tokenbuf ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( * p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( * p -> tokenbuf ) * 2 + 256 ; } else if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( * p -> tokenbuf ) ) ) { p -> tokenlen = sizeof ( * p -> token",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; } },0
1008,<S2SV_ModStart> | IFF_POINTOPOINT ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALID,0
1010,<S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp ) ) ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp ) ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) (,0
1011,"<S2SV_ModStart> send_pa ) ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, cb, rock, moddata",0
1012,"<S2SV_ModStart> if ( CheckQuantumMemoryOverflow <S2SV_ModEnd> ( count,",0
1013,"<S2SV_ModStart> -> stratum_port ; stratum_port = ( char * ) json_string_value ( json_array_get ( val, 2 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 3 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 4 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 2 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 3 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 4 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val,",0
1014,"<S2SV_ModStart> max_submaps ) { if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps",0
1015,<S2SV_ModStart> return 0 ; if ( head -> iov_len + hdr > XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1016,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; mutex_lock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> - EINVAL ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ;,0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < 0 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < 0 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank>",0
1018,<S2SV_ModStart> size ) { if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; update_zmalloc_stat_alloc ( ZMALLOC_MAX_SIZE ) ; return NULL ; } if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; update_zmalloc_stat_alloc ( ZMALLOC_MAX_SIZE ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1019,<S2SV_ModStart> ssize_t count ; if ( items > SENSIBLE_SIZE ) items = SENSIBLE_SIZE,0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, I",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EF",0
1023,"<S2SV_ModStart> r ) { return ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1024,<S2SV_ModStart> stime -> hrt ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1025,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ;",0
1026,"<S2SV_ModStart> { do { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) ) ) <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1027,<S2SV_ModStart> = 0 ; if ( s -> line_count >= MAX_URL_SIZE ) return - 1 ;,0
1028,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL,0
1029,"<S2SV_ModStart>!= 0 ) { if ( tok == 0 ) { mprAddItem ( app -> formData, NULL ) ; return ; } <S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( tok ) ) ; pair = stok ( 0, ""&"", & tok ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1030,"<S2SV_ModStart> } err = crypto_rng_setseed <S2SV_ModEnd> ( tfm,",0
1031,"<S2SV_ModStart> = uid ; atomic_set ( & ucounts -> count, 1 ) ; spin_lock_irq ( & ucounts_lock ) ; <S2SV_ModStart> } if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> ; if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ;",0
1032,<S2SV_ModStart> msg_sys ) ; if ( msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen < 0 ) { err = - EINVAL ; break ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_sys ) ; if ( msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen < 0 ) { err = - EINVAL ; break ; } <S2SV_ModEnd> if ( msg_sys <S2SV_ModStart> msg_flags & MSG_TRUNC ) { if ( msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ),0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> i ; for ( ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1035,"<S2SV_ModStart> ) ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; }",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode |= ( fmode & ( FMODE_READ | FMODE_WRITE ) ) <S2SV_ModEnd> ; rcu_read_lock ( <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1040,"<S2SV_ModStart> int64_t * out_rate_sum, int64_t * out_dist_sum <S2SV_ModEnd> ) { int <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; x -> pred_sse [ ref ] = sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; (",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge <S2SV_ModEnd> ( pmd ),0
1042,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * optr ) ; if ( li > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> PDU <S2SV_blank> size <S2SV_blank> (%u)!"", li, length ) ) ; return ; } if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; } if ( li < length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ )",0
1043,<S2SV_ModStart>!= '\\0' ) { if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ),0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
1045,<S2SV_ModStart> uint32_t backup_handle ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> struct desc_struct * <S2SV_ModEnd> desc = NULL <S2SV_ModStart> = NULL ; # ifdef CONFIG_MODIFY_LDT_SYSCALL if ( ( sel & SEGMENT_TI_MASK ) == SEGMENT_LDT ) { <S2SV_ModEnd> struct ldt_struct * <S2SV_ModStart> ldt = current -> active_mm -> context. ldt ; if ( ldt && sel < ldt -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } # ifdef CONFIG_MODIFY_LDT_SYSCALL if ( ( sel & SEGMENT_TI_MASK ) == SEGMENT_LDT ) { struct ldt_struct * ldt = current -> active_mm -> context. ldt ; mutex_lock ( & current -> active_mm -> context. lock ) ; desc = & gdt_desc. entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> ( & gdt,0
1047,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1048,"<S2SV_ModStart> struct sctp_sockaddr_entry * laddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen <S2SV_ModEnd> ; __u8 bmatchlen <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! dst ) { pr_debug ( ""%s: <S2SV_blank> dst=%pI6 <S2SV_blank> "", __func__, & fl6 -> daddr ) ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> ++ ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if (",0
1051,"<S2SV_ModStart> -> protocol_timeout ) { g_source_add ( client -> priv -> protocol_timeout, gsm_xsmp_protocol_timeout_callback ) ; client -> priv -> protocol_timeout = 0 ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"" <S2SV_ModStart> -> description ) ; g_source_add ( client -> priv -> protocol_timeout, gsm_xsmp_protocol_timeout_callback ) ; g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsSetPropertiesProcMask ; callbacks_ret -> set_properties. callback = set_properties_callback ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |=",0
1052,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ ps ) if (! ND_TTEST ( * ps ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ++ io ) if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; } else { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ; if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; } else { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS (",0
1053,"<S2SV_ModStart> ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; } <S2SV_ModEnd> return NO_ERROR ;",0
1054,"<S2SV_ModStart> NULL ) ; if ( RSTRING_LEN ( key )!= sizeof ( key ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d <S2SV_blank> bytes"", sizeof ( key ) ) ; <S2SV_ModStart> key ) ; if ( RSTRING_LEN ( key )!= sizeof ( key ) ) ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d <S2SV_blank> bytes"", sizeof ( key ) ) ;",0
1055,"<S2SV_ModStart> ""insert <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; if ( free_slot >= ASSOC_ARRAY_FAN_OUT ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; free_slot = - 1 ; } else if (! assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""insert <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""insert <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [insert]\\n"", __func",0
1056,"<S2SV_ModStart> = 11211 ; settings. host = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix_prefix = ""127.0.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix_prefix = ""127.0.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port_prefix = ""127.0.0.1"" ; settings. port",0
1057,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( domains_to_finalize,0
1058,"<S2SV_ModStart> x_7 ; WORD32 x_0, x_1, x_2, x_3 ; WORD32 x_4, x_5, x_6, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; x_0 = * x0 ++ ; x_1 = * x0 ++ ; x_2 = * x0 ++ ; x_3 = * x0 ++ ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ; x_8 = *",0
1059,<S2SV_ModStart> clips_ptr ) { if (! clips ) { ret = - ENOMEM ; goto out_err1 ; },0
1060,<S2SV_ModStart> ; if ( pmd_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd_none_or_clear_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_trans_huge_or_clear_bad ( pmd,0
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> asmop ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new (",0
1063,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTmp = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc <S2SV_ModEnd> ; ut16 ins <S2SV_ModStart> 1 ] ; if ( len < 2 ) { goto INVALID_OP ; } <S2SV_ModStart> 1 ] ; if ( len < 2 ) { goto INVALID_OP ; },0
1066,<S2SV_ModStart> ACPI_STATUS status ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> } } # endif <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1067,<S2SV_ModStart> # ifdef GPAC_MEMORY_TRACKING if ( mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerBackTrace || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTracker,0
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_mr_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> enc ) { priv = calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = priv ; } cfg = & ctx -> config. enc ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = * cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = malloc ( priv -> cx_data_sz ) ; if (! priv -> cfg ) return VPX_CODEC_MEM_ERROR ; priv -> vp8_cfg. pkt_list = malloc ( priv -> cx_data_sz ) ; if (! priv -> cfg ) return VPX_CODEC_MEM_ERROR ;",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO ) ) ; xfs",0
1071,"<S2SV_ModStart> ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += ( pixel -> freq [ i16_17 + j ] >> 1 ) + 1 ; pixel -> freq [ i16_17 + j ] = ( pixel -> freq [ i16_17 + j ] >> 1 ) + 1 ; pixel -> lookup [ i ] = sum ; } for ( i",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested <S2SV_ModEnd> ( sock, <S2SV_ModStart>, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; else tsk_portid = nla_get_u32 ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1,0
1074,<S2SV_ModStart> = v ; if <S2SV_ModEnd> ( priv ->,0
1075,"<S2SV_ModStart> -> bLength ; if ( total_len < length ) { dev_warn ( ddev, ""too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> BOS <S2SV_blank> device\\n"" ) ; break ; } <S2SV_ModEnd> length = cap <S2SV_ModStart> -> bLength ; if ( total_len < length ) { dev_warn ( ddev, ""too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> BOS <S2SV_blank> device\\n"" ) ; break ; } <S2SV_ModEnd> total_len -= length <S2SV_ModStart> bLength ; if ( total_len < length ) break ; total_len -= length ; if ( cap -> bDescriptorType == USB_DT_DEVICE_CAPABILITY ) { dev_warn ( ddev, ""too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> BOS <S2SV_blank> device\\n"" ) ; break ; } <S2SV_ModEnd> total_len -= length",0
1076,"<S2SV_ModStart> ) ) { struct task_struct * task = current ; file_sb_list_del ( file ) ; if ( likely ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; } init_task_work ( task, & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! task_work_add (",0
1077,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; }",0
1078,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++!= '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ;,0
1080,<S2SV_ModStart> sk_forward_alloc ) ; <S2SV_ModEnd> dst_release ( rcu_dereference_check,0
1081,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart> goto invalid ; } break ; } c -= '0' ; if ( result > INT_MAX / 10 ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX && c > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } break ; } c -= '0' ; if ( result > INT_MAX / 10 ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX && c > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } } else { result *= 10 ; if ( result == INT_MAX,0
1082,<S2SV_ModStart> ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) ; name_rmt -> n,0
1083,"<S2SV_ModStart> DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6Def",0
1084,<S2SV_ModStart> = object_length ; if (! object_data ) { sc_cardctl_coolkey_object_t new_object ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1085,"<S2SV_ModStart> ; if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz > sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( sz < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) goto err ; GET16 ( x ) do { if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( ptr_count > length ) return - 1 ; if ( ++ ptr_count > length ) return - 1 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0xc0 ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end,0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % ( bps * stride <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( cc % ( bps * stride <S2SV_ModEnd> ) ) == <S2SV_ModStart> (! tmp ) { return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; if ( WORDS_BIGENDIAN cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # else cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # endif } } _TIFFfree ( tmp ) ; return 1 ;",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; } return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) return do_numa_page ( mm, vma, address, pte, pmd, ptl, entry ) ; if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) return do_wp_page ( mm, v",0
1090,"<S2SV_ModStart> s ) { char * r ; r = pool_calloc ( <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ), GFP_KERNEL ) ; if (! r ) return NULL <S2SV_ModEnd> ; strcpy (",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; }",0
1093,"<S2SV_ModStart> ; } } if ( cu -> length && cu -> capacity == cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1094,"<S2SV_ModStart> b_auto_field_coding ) schro_encoder_setting_set_double ( p_enc -> p_schro, ""auto_field_coding"",! p_sys -> b_auto_field_coding ) ; } else { if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_enc -> p_schro, ""auto_field_coding"",! p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_enc -> p_schro, ""auto_field_coding"",! p_sys -> b_auto_field_coding ) ; } else { if (! p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_enc -> p_schro, ""auto_field_coding"",! p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_enc -> p_schro, ""auto_field_coding"",! p_sys -> b_auto_field_coding ) ; }",0
1095,"<S2SV_ModStart> bfname ) { if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank>",0
1096,"<S2SV_ModStart> ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""class <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) )",0
1097,"<S2SV_ModStart> 4 ) ; size_t num_properties ; CHECKINT16 ( idx, len ) ; num_properties = GETINT16 ( buf + idx ) ; idx += 2 ; <S2SV_ModStart> ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t i ; a -> name = CHECKINT32 ( buf + idx ) ; idx += 4 ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; a -> num_names = GETINT32 ( buf + idx ) ; idx += 4 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ;",0
1098,"<S2SV_ModStart> mmap_sem ) ; prev = vma ; vma = find_vma_next ( mm, start, & vma_end ) ; if (! vma ) goto out_unlock ; ret = - EINVAL ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; } if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; } if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; }",0
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,<S2SV_ModStart> t1_line_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG * fb ; if ( ctx -> frame_parallel_decode ) { yuvconfig2image ( & data -> img, NULL, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1102,"<S2SV_ModStart> ) ; ops -> get_msr <S2SV_ModEnd> ( ctxt, <S2SV_ModStart>, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } else { cs. l = 0 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment (",0
1103,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, ch ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr2, Store, ch ) ) return NULL ; expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * running_avg_y, int running_avg_y_stride, <S2SV_ModEnd> int r, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] ; int adjustment = 0 ; int absdiff = abs ( diff ) ; if ( absdiff >= <S2SV_ModEnd> 3 ) { <S2SV_ModStart> = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c",0
1106,"<S2SV_ModStart> ) ) { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else if ( ( reqPtr -> request. line == NULL ) ) { sockPtr -> flags = NS_CONN_LINETOOLONG ; } else { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags =",0
1107,"<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0 & XTREGS_CP_BITMASK ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; }",0
1108,<S2SV_ModStart> -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. switchPort ; message ->,0
1109,"<S2SV_ModStart> xop ) { struct se_node_acl * se_node_acl <S2SV_ModEnd> ; if ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) se_node_acl = xop -> src_dev -> se_node_acl <S2SV_ModEnd> ; else remote_dev <S2SV_ModStart> -> dst_dev ; else se_node_acl = xop -> src_dev -> se_node_acl <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"", se_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - EINVAL ; goto close_sock ; }",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> cleanup ) ; mb2_mb_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> cleanup ) ; mb2_mb_cache_insert ( ext2_mb_cache <S2SV_ModEnd>, new_bh ) <S2SV_ModStart> new_bh ) ; mb2_",0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ;",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> inode -> i_ctime <S2SV_ModStart> inode -> i_ctime <S2SV_ModEnd> ) mark_inode_dirty",0
1115,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1116,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1117,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> * len ; if ( len > MAX_URL_LEN ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Maximum <S2SV_blank> URL <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; efree ( state ) ; return NULL ; }",0
1118,"<S2SV_ModStart> SUCCESS ) { if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points <S2SV_blank> in <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points <S2SV_blank> in <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points <S2SV_blank> in <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points <S2SV_blank> in <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( i >= npoints ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Too <S2SV_blank> many <S2SV_blank> points <S2SV_blank> in <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ;",0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1120,"<S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) imsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsy, <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsy, <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsy, <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsy, <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx * <S2SV_ModStart> AcquireQuantumMemory ( ( size_t <S2SV_ModEnd> ) dmsx",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( frame_worker_data ) { FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData *",0
1122,"<S2SV_ModStart>. path ; size_t <S2SV_ModEnd> mailbox = curl_easy_unescape <S2SV_ModStart>, NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> = curl_easy_unescape ( data <S2SV_ModEnd>, path, <S2SV_ModStart>, NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ;",0
1123,"<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1124,"<S2SV_ModStart> ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 1 ) sh -> no_output_of_prior_pics_flag = 1 ; if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ s -> ps. pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u2_total_mbs_coded ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbsNby2 ++ ; ps_dec -> u2_total_mbs_coded += u1_num_mbsNby2 ++ ; <S2SV_ModStart> u2_total_mbs_coded ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbsNby2 ++ ; ps_dec -> u2_total_mbs_coded += u1_num,0
1126,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> IMPEG2D_ERROR_CODES_T e_error ; <S2SV_ModStart> B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } if ( e_error!= ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ) { break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } <S2SV_ModStart> == B_PIC ) { e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAPABLE ; break ; } if ( e_error!= ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_INCAP",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VPxWorker * const worker = cm -> worker ; <S2SV_ModStart> YV12_BUFFER_CONFIG * const cfg = & worker -> frame_bufs <S2SV_ModEnd> [ cm -> <S2SV_ModStart> ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = get_plane_block_size ( bsize, pd ) ; const int num_4x4_h = get_plane_block_size ( bsize, pd ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; const int step = 1 << ( tx_size << 1 ) ; const int i = 0 ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> pd -> subsampling_x ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> pd -> subsampling_y ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb",0
1130,<S2SV_ModStart> ( ) ; if ( mmap_is_legacy ( ) ) { mm -> mmap_base = mmap_legacy_base ( random_factor ) ; } else { mm -> mmap_base = mmap_base ( random_factor ) ; },0
1131,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1132,"<S2SV_ModStart> 1 ; case 'C' : return getnum ( L, fmt, sizeof ( int ) ) ; case 'u' : case 'U' : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'u' : case 'U' : { size_t sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return 0 ; }",0
1133,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip ; offset_row = row + img -> row_offset ; <S2SV_ModStart> % rowsperstrip ; buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, TIFFComputeStrip ( bufsize, & p0, & p1, & p2, & pa ) ; if ( buf == NULL ) { return 0 ; } <S2SV_ModStart> -> row_offset ; buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, TIFFComputeStrip ( bufsize, & p2, & pa ) ; if ( buf == NULL ) { return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, TIFFComputeStrip ( bufsize, & p0, & p1, & p2, & pa ) ; if ( buf == NULL ) { return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, TIFFComputeStrip ( bufsize, & p1, & pa ) ; if ( buf ==",0
1134,"<S2SV_ModStart> } } } if ( TYPE ( n )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( n ), NCH ( n ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 2 ) ) ) ; } if ( TYPE ( CHILD ( n, 3 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ; Py_FatalError ( ""Type <S2SV_blank> comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 3 ) ) ) ; }",0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1136,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> - 1 ) && ( options & WNOHANG ) && ( options & WUNTRACED ) && ( options & WCONTINUED ) ) { type = PIDTYPE_MAX ; } else if ( ( options & WCONTINUED ) && ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WNOHANG ) ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WCONTINUED ) ) { if ( ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WNOHANG ) ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & WNOHANG ) && ( options & W",0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ) { if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << number ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1139,"<S2SV_ModStart> [ plane ] ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; int y ; for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, attr_len ) ;",0
1141,"<S2SV_ModStart> -> private ; if ( cmd == DM_IOCTL_GET_CHILD ) return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, cmd, arg ) ; else return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>",0
1142,"<S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_DATA_ERROR ) ; return 0 ; } <S2SV_ModStart> ; if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_DATA_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_DATA_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_COPY_ERROR ) ; return 0 ; } if ( ctx -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_NO_CIPHER_",0
1143,"<S2SV_ModStart>. size, 0 <S2SV_ModEnd> ) ; if",0
1144,"<S2SV_ModStart> fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ;",0
1145,"<S2SV_ModStart> -> sk ; switch ( sa -> rc_family ) { case AF_BLUETOOTH : sa -> rc_family = AF_BLUETOOTH ; break ; case AF_INET : sa -> rc_channel = 0 ; break ; case AF_INET6 : sa -> rc_family = AF_INET ; break ; case AF_INET : sa -> rc_channel = 0 ; break ; case AF_INET6 : sa -> rc_family = AF_INET6 ; break ; case AF_INET6 : sa -> rc_channel = 0 ; break ; case AF_INET : sa -> rc_family = AF_INET6 ; break ; default : BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock, sk ) ; return - EINVAL ; }",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch )",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SIGN <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sign ) <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } if ( ans == MUTT_NO ) { mutt_socket_empty ( adata -> conn ) ; if ( imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> neg",0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"" ) ; return 0 ; }",0
1151,<S2SV_ModStart> <= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1152,"<S2SV_ModStart> line ) ) { memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"" ) ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, sizeof",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( ) ; <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, 82 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr ->",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; <S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> PyUnicode_CompareWithASCIIString ( name <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) ==",0
1157,<S2SV_ModStart> out_unmap ; } for ( j = 0 ; j < page_limit ; j ++ ) { if (! pages [ j ] ) { ret = - ENOMEM ; goto out_unmap ; } },0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = kstrndup <S2SV_ModEnd> ( path, <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> domain = kstrndup <S2SV_ModEnd> ( path, <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_",0
1160,<S2SV_ModStart> ; i < <S2SV_ModEnd> sizeof ( buf <S2SV_ModStart> ++ ) { if ( i >= sizeof ( buf ) ) { return - 1 ; },0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> + RDS_CONG_MAP_BYTES ; if ( sg + off > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; if ( sg + off > sizeof ( struct rds_header ) ) { ret = - EINVAL ; goto out ; },0
1163,"<S2SV_ModStart> ; priv -> mii_bus = devm_ioremap_nocache ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return - ENOMEM ; }",0
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1166,"<S2SV_ModStart> ) ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) {",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr, res <S2SV_ModEnd> ) ; if",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_NOMATCH ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModStart> ARM_r3 ; } <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1170,"<S2SV_ModStart> { jas_stream_t * stream <S2SV_ModEnd> ; jas_stream_memobj_t * <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; if (! ( stream = jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_ops ; if (! jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> buf_ = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; obj -> myalloc_ = 1 ;",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> sshkey * key <S2SV_ModEnd> ; char * <S2SV_ModStart> * key_s = NULL, * ca_s = NULL ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype <S2SV_ModEnd> ; int authenticated <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u",0
1172,"<S2SV_ModStart> uint32_t bcount ; if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> = 0 ; if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ;",0
1173,"<S2SV_ModStart> mech ) ) { _sx_debug ( ZONE, ""client <S2SV_blank> requested <S2SV_blank> mechanism <S2SV_blank> (%s) <S2SV_blank> that <S2SV_blank> we <S2SV_blank> didn\'t <S2SV_blank> offer"", mech ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_INVALID_MECHANISM, NULL ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl",0
1174,"<S2SV_ModStart> tn_buf ) ; return - EACCES ; } off = regs [ regno ]. off + regs [ regno ]. var_off. value ; if (! tnum_is_const ( regs [ regno ]. var_off ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%s\\n"", regno, tn_buf ) ; return - EACCES ; } if (! tnum_is_const ( regs [ regno ]. var_off ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%s\\n"", regno, tn_buf ) ; return - EACCES ; }",0
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
1176,"<S2SV_ModStart> ; if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; } if ( sbi -> s_mb_cache == NULL ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock <S2SV_blank> cache"" ) ; goto failed_sbi ; } if ( sbi -> s_mb_cache == NULL ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; } if ( sbi -> s_mb_cache == NULL ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock <S2SV_blank> cache"" ) ; goto failed_sbi ; } if ( sbi -> s_mb_cache == NULL ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; }",0
1177,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY,0
1178,"<S2SV_ModStart> < tcp_hdrlen ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } else if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } else if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; }",0
1179,"<S2SV_ModStart> numrows < 0 || numcols > jas_matind_max ( numrows, numcols ) ) { return 0 ; } if ( numrows > jas_matind_max ( numrows, numcols ) ) { return 0 ; } if ( numcols > jas_matind_max ( numcols ) ) { return 0 ; } if ( numrows > jas_matind_max ( numrows ) ) { return 0 ; } if ( numcols > jas_matind_max ( numcols ) ) { return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> rows_, sizeof ( jas_seqent_ * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < numrows ; ++ i ) { matrix -> rows_ [ i ] = &",0
1180,"<S2SV_ModStart> ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_hdr, sock_owned_by_user ( skb -> dev ) ) ; if ( tmp_hdr ) { icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; } if ( tmp_hdr ) { memcpy ( tmp_hdr, tmp_hdr, sizeof ( * tmp_hdr ) ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree",0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_req * r ; if (! qemu_blockalign_safe ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL <S2SV_ModEnd> ; r = <S2SV_ModStart>, req ) ; if (! qemu_blockalign_safe ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ; <S2SV_ModEnd> r -> iov <S2SV_ModStart> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; if (! qemu_blockalign_safe ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ; r = DO_UPCAST ( SCSIDiskReq, req ) ; if (! qemu_blockalign_safe ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; if (! qemu_blockalign_safe ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> ; nxip = pq_getmsgint ( buf, 4 ) ; avail = buf -> len - buf -> cursor ; expect = 8 <S2SV_ModEnd> + 8 + <S2SV_ModStart> + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur >= xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_unbind_addr ( cm_id, ( struct sockaddr * ) & sin ) ; if ( ret ) { rdma_unbind_addr ( cm_id, ( struct sockaddr * ) & sin ) ; ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; }",0
1185,"<S2SV_ModStart> ) ; struct xfrm_dump_info <S2SV_ModEnd> info ; struct <S2SV_ModStart> ; struct xfrm_dump_info <S2SV_ModEnd> info ; BUILD_BUG_ON <S2SV_ModStart> ; if ( <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args && <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args && <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args && <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args && <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args && <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args [ 0 ] ) { xfrm_policy_walk_init ( & walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len <S2SV_ModEnd> ; } <S2SV_null>",0
1186,<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> -> d_inode ; struct dentry * upper = ovl_dentry_upper ( dentry ) ; int err <S2SV_ModEnd> ; inode_lock_nested ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; dput ( upper ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; } else err = vfs_unlink ( dir, upper, NULL ) ; dput ( upper ) ; inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1",0
1189,<S2SV_ModStart> nmemb && size &&! av_is_zero ( * ptrptr ) &&! av_is_zero ( * ptrptr ) ) return AVERROR ( ENOMEM ) ; if (! av_is_zero ( * ptrptr ) &&! ( nmemb && size &&! av_is_zero ( * ptrptr ) &&! av_is_zero ( * ptrptr ) &&! av_is_zero ( * ptrptr ) ) return AVERROR ( ENOMEM ) ; if (! av_is_zero ( * ptrptr ) &&! av_is_zero ( * ptrptr ) ) return AVERROR ( ENOMEM ) ; if (! av_is_zero ( * ptrptr ) &&! ( nmemb && size &&! av_is_zero ( * ptrptr ) &&! av_is_zero ( * ptrptr ) &&! av_is_zero ( * ptrptr ) ) return AVERROR ( ENOMEM ) ; if (! av_is_zero ( * ptrptr ) ) return AVERROR ( ENOMEM ) ; if (! av_is_zero ( * ptrptr ) ) return AVERROR ( ENOMEM ),0
1190,<S2SV_ModStart> name == MAPI_BODY_HTML || <S2SV_ModEnd> a -> name <S2SV_ModStart> == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; } else if ( a -> name == MAPI_BODY_PLAINTEXT ) { body. text_body = get_plain_text_data ( a ) ; } else if ( a -> name == MAPI_BODY_PLAINTEXT ) { body. text_body = get_plain_text_data ( a ) ; } else if ( a -> name == MAPI_BODY_PLAINTEXT ) { body. text_body = get_plain_text_data ( a ) ; } else if ( a -> name == MAPI_BODY_PLAINTEXT ) { body. text_body = get_plain_text_data ( a ) ; } else if ( a -> name == MAPI_BODY_PLAINTEXT ) { body. text_body = get_plain_text_data ( a ) ; } else if ( a,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; default : <S2SV_ModEnd> errno = EINVAL,0
1192,"<S2SV_ModStart> 1 ) { if ( box -> info -> type!= JAS_BOX_JP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> JP\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 0 ) { if ( box -> info -> type!= JAS_BOX_FTYP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> is <S2SV_blank> FTYP\\n"" ) ; goto error ; } <S2SV_ModStart> 0 ) { if ( box -> info -> name!= JAS_BOX_JP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> JP\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 0 ) { if ( box -> info -> type!= JAS_BOX_FTYP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> is <S2SV_blank> FTYP\\n"" ) ; goto error ; } <S2SV_ModStart> 0 ) { if ( box -> info -> name!= JAS_BOX_JP ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> JP\\n"", box -> info -> name ) ; goto error",0
1193,,1
1194,"<S2SV_ModStart> ) { journal_t * journal ; if (! TestClearPageChecked ( page ) ) { ClearPageChecked ( page ) ; return ; } journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ;",0
1195,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; if (! trak ) goto exit ; writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stbl ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ;",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82 ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * libPath [ MAX_OSPATH ] ; const char * basePath = Cvar_VariableString ( ""fs_basepath"" ) ; if (! basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( basePath, topDir ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; Com_sprintf ( libPath, sizeof ( libPath ), ""%s%c%s"", basePath, PATH_SEP, name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; }",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> ( sum ) <S2SV_ModEnd> bits -= n <S2SV_ModStart> bits -= n ; if ( bits <= 24 ) { if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } else if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; } else if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } if ( p >= buffer + 0x800 ) { count = AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException (",0
1201,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) )!= TYPE_COMMENT ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment",0
1202,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1203,"<S2SV_ModStart> HAVE_IPV6 char * p ; if ( str_len > 1 && * ( str + 1 ) == '[' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } p = memchr ( str + 1, ']', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 1 ) ; host = estrndup ( str, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } <S2SV_ModEnd> return host ;",0
1204,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_width ) ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_width ) ; } # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG",0
1205,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( c -> cblk_style!= 0 ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; }",0
1206,"<S2SV_ModStart> { if (! curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE_PROXY ) ) continue ; if (! curl",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> mb_index = 0 ; x -> mb_index < 4 ; ++ x",0
1208,"<S2SV_ModStart> ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; ND_TCHECK ( * lmp_obj_header ) ; lmp_obj_hdr = ( const struct lmp_object_header * ) pptr ; lmp_obj_hdr = ( const struct lmp_object_header * ) pptr ; lmp_obj_hdr = ( const struct lmp_object_header * ) pptr ; ND_TCHECK ( * lmp_obj_hdr ) ; if ( lmp_obj_hdr -> length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_hdr -> length ) ) ; return ; } if ( lmp_obj_hdr -> length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_hdr -> length ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds",0
1209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> mbmi ) { const MV * ref <S2SV_ModEnd> = & mbmi <S2SV_ModStart> ] ] [ 0 ] ; const int_mv diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. col }",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ) ; if ( skb_out -> len + skb -> len > size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ;",0
1212,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> lock ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; <S2SV_ModStart> sta_unblock ) ; spin_lock_init ( & sta -> tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock <S2SV_ModEnd> ) ; INIT_WORK <S2SV_ModStart> sta_tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock <S2SV_ModEnd> ) ; INIT_WORK <S2SV_ModStart> sta_tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat_lock <S2SV_ModEnd> ) ; mutex_init <S2SV_ModStart> sta_tx_lat_lock ) ; spin_lock_init ( & sta -> tx_lat,0
1213,<S2SV_ModStart> tp_event ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( perf_paranoid_kernel ( ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attr. sample_type & PERF_SAMPLE_RAW ) return 0 ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( tp_event -> flags & TRACE_EVENT_FL,0
1214,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""Missing <S2SV_blank> interface <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = NULL ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } SNMP_FREE ( env_var ) ;",0
1217,"<S2SV_ModStart> * head ; struct list_head tmplist <S2SV_ModEnd> ; newsk -> <S2SV_ModStart> sk_rcvbuf ; if ( newsp -> do_auto_asconf ) { memcpy ( & tmplist, & assoc -> asconf_list, sizeof ( tmplist ) ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & newsp -> asconf_list, sizeof ( tmplist ) ) ; } else { inet_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & assoc -> asconf_list, sizeof ( tmplist ) ) ; } spin_lock ( & head -> lock ) ; pp = sctp_sk ( newsk ) -> bind_hash ; sk_add_bind_node ( newsk, & pp -> owner ) ; sctp_sk ( newsk ) -> bind_hash = pp ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_sk ( new",0
1218,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ; TEMP_FAILURE_RETRY (",0
1219,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> << 1 ) | desc -> l ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 4 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * )",0
1225,"<S2SV_ModStart>!= START_CODE_PREFIX ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN ) ; if ( u4_start_code == USER_DATA_START_CODE ) { while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, 8 ) ; } } while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN ) ; if ( u4_start_code == USER_DATA_START_CODE ) { while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_PREFIX_LEN )!= START_CODE_PREFIX ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream,",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_",0
1227,"<S2SV_ModStart> imethod ) ; if (! method -> is_inflated ) { mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_TYPE ) ; mono_reflection_set_error ( rmethod, MONO_ERR_INVALID_PARAMETER_",0
1228,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> tmp ; if <S2SV_ModStart> copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_ERR, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; f2fs_sb_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1231,"<S2SV_ModStart> is_path ) { const char * repl ; size_t len ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? l -> l_origin : _dl_platform ; if (",0
1232,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> ) ; } opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { rcu_assign_pointer ( rp -> opt_space, rcu_dereference ( rcu_dereference ( rcu_dereference ( rp -> opt_space ) ) ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ) { rcu_assign_pointer ( rp -> opt_space, rcu_dereference ( rcu_dereference ( rcu_dereference ( rcu_dereference ( rp -> opt_space ) ) ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ;",0
1234,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if ( iph -> ihl == 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,"<S2SV_ModStart> ) ) { struct ip_options_rcu * inet_opt = rcu_dereference_protected ( net -> ipv4. opt, sock_owned_by_user ( in_skb -> sk ) ) ; rt = rcu_dereference_protected ( net -> ipv4. opt, sock_owned_by_user ( in_skb -> sk ) ) ; if ( rt == NULL ) { rt = rcu_dereference ( net -> ipv4. opt ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; } ip_options_rcu_deref ( inet_opt ) ; } else if ( rt -> rt_flags & RTCF_MULTICAST ) { rt -> rt_flags &= ~ RTCF_MULTICAST_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,"<S2SV_ModStart> goto errout ; if (! info -> stagemasks ) { int cascade = 0 ; if ( oggpack_eop ( opb ) ) goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( book >= ci -> books ) { int cascade = 0 ; if ( oggpack_eop ( opb ) ) goto errout ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 1 ) << 3 ) ; if ( cascade >= ci -> books ) { int cascade = ( unsigned char ) oggpack_read ( opb, 3 ) ; if ( oggpack_eop ( opb ) ) goto errout ;",0
1239,"<S2SV_ModStart> break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
1240,"<S2SV_ModStart> 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; rc = SQLITE_NOMEM ; }",0
1243,<S2SV_ModStart> filp ) { if (! capable ( CAP_SYS_ADMIN ) ) return - EPERM,0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'"", name ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> disabled\\n"", name ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> disabled\\n"", name ) ; DBUG_RETURN ( - 1 ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> disabled\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> disabled\\n"", name )",0
1246,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1247,"<S2SV_ModStart> ) ) { if ( is_invalid_opcode ( intr_info ) ) { if ( is_guest_mode ( vcpu ) ) { kvm_queue_exception ( vcpu, UD_VECTOR ) ; return 1 ; } er = emulate_instruction ( vcpu, EMULTYPE_TRAP_UD ) ; if ( er!= EMULATE_DONE ) kvm_queue_exception ( vcpu, UD_VECTOR ) ; return 1 ; } if ( is_invalid_opcode ( intr_info ) ) { if ( is_guest_mode ( vcpu ) ) { if ( is_guest_mode ( vcpu ) ) { kvm_queue_exception ( vcpu, UD_VECTOR ) ; return 1 ; } er = emulate_instruction ( vcpu, EMULTYPE_TRAP_UD ) ; if ( er!= EMULATE_DONE ) kvm_queue_exception ( vcpu, UD_VECTOR ) ; return 1 ; } er = emulate_instruction ( vcpu, EMULTYPE_TRAP_UD ) ; if ( er!= EMULATE_DONE ) kvm_queue_exception (",0
1248,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version""",0
1249,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId",0
1250,"<S2SV_ModStart> RS_RET_NO_ERRCODE ) ; if ( IS_ERR ( pData -> socket ) ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( IS_ERR ( pData -> socket ) ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( IS_ERR ( pData -> socket ) ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE",0
1251,"<S2SV_ModStart> return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ;",0
1252,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModEnd> ; struct flowi6 <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>. daddr ) ; rcu_read_lock ( ) ; <S2SV_ModStart> local_df = 1 ; rcu_read_unlock ( ) ; return rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type!= & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""%s\\n"", path. dentry -> d_sb -> s_type -> name, path. dentry -> d_sb -> s_name ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type!= & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""%s\\n"", path. dentry -> d_sb -> s_type -> name, path. dentry -> d_name ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ) ; return FALSE <S2SV_ModEnd> ; } <S2SV_null>,0
1257,"<S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; <S2SV_ModStart> pol ) ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; else last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = poll_last_pwd ( handle -> context, & last_pwd ) ; if ( last_pwd == NULL ) last_pwd = poll_last_pwd ( handle -> context, &",0
1258,"<S2SV_ModStart>, result = RLC_ERR ; bn_t t ; bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_r",0
1259,<S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; if ( <S2SV_ModStart> ) ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ) ) return ERROR_INSUFFICIENT_MEMORY ; stack = ( YR_VALUE * ) yr_malloc ( stack_size ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size ),0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( hctx ->,0
1262,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j,0
1264,"<S2SV_ModStart> { token ++ ; } if ( token [ 0 ] == '[' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands",0
1265,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> mi_cols ) ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> <S2SV_ModEnd> e_mbd, cm <S2SV_ModStart> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
1266,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart>!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO, 0 ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO, 0 ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart>!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc ->",0
1267,"<S2SV_ModStart> EOFOp 0x07 char * buf <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; buf <S2SV_ModEnd> = ReadBlob ( <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, buf <S2SV_ModEnd>,",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, module_slot_match, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, module_slot_match, module ) ; if ( idx < 0 ) err = - ENODEV ; else if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, err ) ; kfree ( card ) ; return err ; }",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 < sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
1271,<S2SV_ModStart> -> i4_prev_pic_order_cnt_lsb ; ps_dec -> i4_prev_pic_order_cnt_msb = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 0 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 1 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 2 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 3 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt_msb = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 2 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 3 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt [ 4 ] = 0 ; ps_dec -> i4_prev_pic_order_cnt_msb = 0 ; ps_dec -> i4_prev_pic_order_cnt_bottom = ps_cur_poc -> i4_prev_pic_order_cnt_bottom ; ps,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> OPENSSL_free ( rdata ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ;",0
1273,"<S2SV_ModStart> ; if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ;",0
1275,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> const char * <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> * ab ) { size_t i, len <S2SV_ModEnd> ; size_t len_sent <S2SV_ModStart> * ab, ""argc=%d"" <S2SV_ModEnd>, context -> <S2SV_ModStart> -> argc ) ; if (! audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ) { audit_log_format ( * ab, ""argc=%d"", context -> execve. argc ) ; return ; } <S2SV_ModStart> -> arg_start ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ )",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> char line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; gboolean <S2SV_ModStart> FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ;",0
1280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void update_rq_clock ( <S2SV_ModStart> ) ; u64 <S2SV_ModEnd> irq_time ; rq <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> struct blkif_response resp <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> int notify ; resp. id = id ; resp. operation = op ; resp. status = st ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> blk_rings ->",0
1283,<S2SV_ModStart> mask & KADM5_ATTRIBUTES <S2SV_ModEnd> ) ||!,0
1284,"<S2SV_ModStart> -> offset ; if ( ( datao + 12 < datao ) || ( datao + 12 < 12 ) || ( datao + 12 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; if (! exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", ""Short",0
1285,"<S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return ERROR_INT ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return ERROR_INT ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return 1 ; } <S2SV_ModStart> fname ) ; if ( fname == NULL ) { L_ERROR ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return ERROR_INT ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return ERROR_INT ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName ) ; return ERROR_INT ( ""fname <S2SV_blank> not <S2SV_blank> defined\\n"", procName",0
1286,"<S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> (",0
1287,<S2SV_ModStart> ) { struct <S2SV_ModEnd> fscrypt_info * ci <S2SV_ModStart> 0 ; } ci = d_inode ( dir ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ) ci = NULL ; <S2SV_ModEnd> dput ( dir,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed",0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; }",0
1290,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p. p8 = 0 ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p. p8 = 0 ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p. p8 = 0 ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p. p8 = 0 ; context. frbuff_p. p8 = 0 ; context. line_p. p8 = 0 ; context. line_p,0
1291,"<S2SV_ModStart> n ) ; if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; }",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart>!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( info. scale!= ( Quantum * ) NULL ) info.",0
1293,<S2SV_ModStart> void ) { if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } else { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } else { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; } if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode =! recovery_is_in_recovery_mode ( ) ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT14 <S2SV_ModEnd> )",0
1295,"<S2SV_ModStart> == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( ( Image * ) NULL ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( ( Image * ) NULL",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"", req -> socket ) ; goto error <S2SV_ModEnd> ; } DECODELENGTH_CHECKLIMIT <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"", req -> socket ) ; goto error <S2SV_ModEnd> ; } DECODELENGTH_CHECKLIMIT <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"" <S2SV_ModEnd>, req -> <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read() <S2SV_blank> failed""",0
1297,"<S2SV_ModStart> ps_slice_hdr ) { ps_dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; WORD32 ai4_num_st_curr_before, ai4_num_st_curr_after, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr, u4_num_total_curr <S2SV_ModEnd> ; WORD8 ai4_curr_delta_poc_msb_present_flag <S2SV_ModStart> ps_slice_hdr ) { ps_dpb_mgr -> ai4_num_st_curr_before = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after = 0 ; ps_dpb_mgr -> ai4_num_lt_curr =",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = get_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = set_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_GET_SYSCALL : ret = set_user ( child -> thread. syscall, datap ) ; break ; case PTRACE_GETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ; break ; # endif",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; }",0
1300,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( ret ) len += strlen ( ret ) + 2 ; else fail = 1 ; child = child -> next ; } if (! fail ) {,0
1301,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1302,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_wmem_alloc, sock_owned_by_user ( sk ) ) ; if (! other ) { if ( unix_peer ( other )!= sk ) { <S2SV_ModEnd> writable = 0 <S2SV_ModStart> 0 ; } } <S2SV_ModEnd> sock_poll_wait ( file <S2SV_ModStart> wait ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } <S2SV_ModEnd> sock_put ( other",0
1303,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> value = ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; value |= buffer [ 0 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ; return (,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void exit_io_context ( <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ) ; ioc = <S2SV_ModEnd> current -> io_context <S2SV_ModStart> -> io_context = NULL ; mutex_unlock ( current ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> ioc -> nr_tasks ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1306,<S2SV_ModStart> ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len <S2SV_ModEnd> + 14 ) <S2SV_ModStart> ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len,0
1307,<S2SV_ModStart> data ) { u32 value [ 2 ] <S2SV_ModEnd> ; int ret <S2SV_ModStart> int ret ; * value = 0 ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; else * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; else * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [,0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) { vpx_ref_frame_t * frame = va_arg ( args, vpx_ref_frame_t <S2SV_ModEnd> ) ; if <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1310,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
1311,<S2SV_ModStart> -> dwc ; <S2SV_ModEnd> list_del ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,"<S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, & yyval, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, sizeof ( * yyval ) <S2SV_ModEnd> ) ; break <S2SV_ModStart>, sizeof ( *",0
1313,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> DISCE_PROBE ] = <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, <S2SV_ModEnd> DISCE_DESTRUCT ] =",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> const char * <S2SV_ModStart> name, int rep_quick ) { if ( param -> testflag & T_UNPACK ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; } else { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; }",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * daoack, ND_DAOACK_TRUNC_LEN ) ; if ( length < ND_DAOACK_TRUNC_LEN ) goto tooshort <S2SV_ModEnd> ; dagid_str = <S2SV_ModStart> ( ndo, ""%s"", rpl_daoack_trumps [ daoack -> rpl_flags & ND_D <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1317,"<S2SV_ModStart> ) ; int err ; struct ip_options_data * inet_opt ; <S2SV_ModStart> goto out ; inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> if ( addr_len ) { sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; <S2SV_ModStart> -> cmsg_flags ) ip_cmsg_recv_timestamp ( msg, sk, skb ) ; if ( isk -> cmsg_flags ) ip_cmsg_recv_timestamp ( msg, sk, skb ) ; <S2SV_ModStart> = AF_INET ; sin -> sin_family = AF_INET ; sin -> sin_zero. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> cmsg",0
1318,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( ( mode & FALLOC_FL_KEEP_SIZE ) &&! ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModStart> EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_lock ( & inode -> i_mutex ) ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP",0
1319,"<S2SV_ModStart> buf ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( new_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; } else { free ( buf ) ; } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1320,"<S2SV_ModStart> map ; bpf_map_inc_nolock <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> tp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } size_left -= 4 ; table_id = ntohs ( ipfix_template_record -> TemplateID ) ; count = ntohs ( ipfix_template_record -> FieldCount ) ; dbg_printf ( ""\\n[%u] <S2SV_blank> Template <S2SV_blank> ID: <S2SV_blank> %u\\n"", exporter -> info. id, table_id ) ; memset ( ( void * ) cache. common_extensions, 0, count ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map [ i ]. id == ipfix_element_map [ i ]. id ) { uint32_t",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd, * <S2SV_ModStart> = 15 ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; <S2SV_ModStart> == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; if ( lut == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( lut == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( lut == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName,",0
1325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> i, ubits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vbits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ubits = BN_num_bits <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vbits = BN_num_bits",0
1326,"<S2SV_ModStart> 256 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_pen",0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits & 7 ; if ( msg -> oob ) { if ( bits == 8 ) { value = msg -> data [ msg -> readcount ] ; msg -> readcount += 1 ; } else { for ( i = 0 ; i < bits ; i += 8 ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits & 7 ; for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits )",0
1329,"<S2SV_ModStart> int err ; struct snd_ctl_elem_id id ; <S2SV_ModStart> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { status = - ENODEV ; goto out ; } if ( status < 0 ) { dev_err ( & udev -> dev, ""Error <S2SV_blank> registering <S2SV_blank> network <S2SV_blank> device\\n"" ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Error <S2SV_blank> registering <S2SV_blank> network <S2SV_blank> device\\n"" ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { status = - ENODEV ; goto out ; } if ( status < 0 ) { dev_err ( & udev -> dev, ""Error <S2SV_blank> registering <S2SV_blank> network <S2SV_blank> device\\n"" ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Error <S2SV_blank> registering <S2SV_blank> network <S2SV_blank> device\\n"" ) ; goto out ; }",0
1331,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> = overhead ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> size = overhead ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; }",0
1332,<S2SV_ModStart> ) ; } if ( item -> flags & CD_FLAG_TXT ) { g_string_free ( item -> content ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; } else if ( item -> flags & CD_FLAG_TXT ) { g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name ) ; } else if ( item -> flags & CD_FLAG_TXT ) { g_string_free ( item_name ) ; g_string_free ( item_name ) ; g_string_free ( item_name,0
1333,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval <S2SV_ModEnd> ) goto err_out <S2SV_ModStart> err_out ; else <S2SV_ModEnd> iattr. ia_mode <S2SV_ModStart> ia_valid = ATTR_MODE <S2SV_ModEnd> ; v9fs_vfs_setattr_dotl (",0
1335,<S2SV_ModStart> ; if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> header. class_size > bin -> size ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free (,0
1336,<S2SV_ModStart> case NPPVpluginNameString : type = RPC_TYPE_STRING ; break ; case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } last_error = bits_per_mb_at_this_q - target_bits",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { atomic_set <S2SV_ModEnd> ( & c <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart
1343,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart>, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else if ( plane == 0 ) { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = ( - xd -> mb_to_top_edge >> ( 3 + pd -> subsampling_y ) )",0
1344,"<S2SV_ModStart> } else { if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ current ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1346,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_datasync_tid = 0 ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1347,"<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; mutex_unlock ( & memcg -> thresholds_lock ) ;",0
1348,"<S2SV_ModStart> * ion_handle_get_by_id ( struct ion_client * client <S2SV_ModEnd>, int id <S2SV_ModStart> lock ) ; handle = idr_find_and_get ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; <S2SV_ModEnd> return handle? <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit ( wb, cm -> bit_depth <S2SV_ModEnd> ) ; if <S2SV_ModStart> == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vpx_wb_write_bit ( wb, cm -> subsampling_x ) ; vpx_wb_write_bit ( wb, cm -> subsampling_y ) ; } }",0
1350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> stroff = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> stroff = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> stroff = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> stroff = 0 <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
1352,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch )",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> refresh_alt_ref_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [",0
1354,"<S2SV_ModStart> error ; uint16_t nextPacket <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( uint8_t ) ) ; n = letoh16 ( n ) ; status = letoh32 ( status ) ; if ( ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )",0
1355,"<S2SV_ModStart> = 2 ; if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ;",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, argv <S2SV_ModStart> ) ) ; if ( NULL == ctx ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; } else { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; } schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, error ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; } else { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; } xmlSetStructuredErrorFunc ( NULL, error ) ; xmlSetStructuredErrorFunc ( NULL, error ) ; xmlSetStructuredErrorFunc ( NULL, error ) ; xmlSetStructuredErrorFunc ( NULL",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart>, off ; <S2SV_ModEnd> vma -> vm_pgoff <S2SV_ModStart> |= _CACHE_MASK ; if ( fbdev -> fb_len < fbdev -> fb_len ) return - EINVAL ; start = fbdev -> fb_phys & ~ PAGE_MASK ; len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; off = vma -> vm_pgoff << PAGE_SHIFT ; if ( ( vma -> vm_end - vma -> vm_start + off ) > len ) { return - EINVAL ; } return io_remap_pfn_range ( vma, vma -> vm_start, off >> PAGE_SHIFT, vma -> vm_end - vma -> vm_start, vma -> vm_page_prot ) ; } return vm_iomap_memory ( vma, start, fbdev -> fb_len, vma -> vm_page_prot ) <S2SV_ModEnd> ) ; }",0
1359,"<S2SV_ModStart> ) ) { if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> string <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> string <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> string <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) < 4 ) { print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> string <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> string <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> string <S2SV_blank> in <S2SV_blank>",0
1360,<S2SV_ModStart> 2 ] ; out [ 3 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 0 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 1 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2 ] ; out [ 2 ] <S2SV_ModEnd> = ptr [ <S2SV_ModStart> 2,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,"<S2SV_ModStart> 1 ) ; if <S2SV_ModEnd> ( ( unsigned <S2SV_ModStart> unsigned int ) arg >= cdi -> capacity ) return - EINVAL ; if (! CDROM_CAN ( CDC_SELECT_DISC ) ||! ( arg & CDSL_CURRENT ) ) return - EINVAL ; info = kmalloc ( sizeof ( * info ), GFP_KERNEL ) ; if (! info ) return - ENOMEM ; ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_status_lookup ( cdi, info ) ; if (! ret ) ret = mech_",0
1363,"<S2SV_ModStart> fanout_mutex ) ; if ( type == PACKET_FANOUT_LB ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; rollover -> num_failed = 0 ; } else if ( type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_",0
1364,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS",0
1366,"<S2SV_ModStart> { int v <S2SV_ModEnd>, i ; <S2SV_ModStart> 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s ->",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1368,<S2SV_ModStart> = AF_INET6 ; } <S2SV_ModEnd> dt -> vlan_id,0
1369,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RX",0
1370,"<S2SV_ModStart>, asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; string type_comment = NULL ; int name_i = 1 ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! type_comment ) return NULL ; name = NEW_IDENTIFIER ( n, name_i ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( n,",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pgd = find_pgd ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pud, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_none_or_clear_bad ( pte ) ) goto out ; <S2SV_ModEnd> flush_tlb ( )",0
1372,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED <S2SV_ModEnd>, NULL,",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image",0
1374,"<S2SV_ModStart> ) ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>",0
1375,"<S2SV_ModStart> xmi_catlen ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> xmi_subformlen ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL,",0
1376,"<S2SV_ModStart> ; size_t total_len ; int error ; <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart>, atomic ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModStart> ; size_t chars = iov_len ( iov, nr_segs ) ; if ( unlikely ( chars > total_len ) ) chars = total_len ; error = ops -> confirm ( pipe, buf ) ; if ( error ) { if (! ret ) ret = error ; break ; } atomic =! iov_fault_in_pages_write ( iov, chars ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { if (! ret ) ret = error ; break ; } ret +=",0
1377,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ( code ) \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> ] ) { p_fm_config_conx_hdlt hdl <S2SV_ModEnd> ; int instance <S2SV_ModStart> res ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n""",0
1380,"<S2SV_ModStart> ; if (! jas_supported ( ) ) { abort ( ) ; } <S2SV_ModStart> ] ; infile = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ;",0
1381,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,<S2SV_ModStart> ( row = 0 <S2SV_ModEnd> ; row < <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) sh = 4 ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] -= j << sh ; } else if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) {,0
1383,<S2SV_ModStart> < needed ) { if ( param -> data_size < param -> data_start + param -> data_size ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + len ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; } else { * event_nr = dm_get_event_nr ( hc -> md ) ; },0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> vcpu_info ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> nr_rt_entries ) { if ( guest_irq >= irq_rt -> nr_rt_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\",0
1386,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfqd -> queue_lock ) ; <S2SV_ModStart> bfqq ) ; spin_unlock_irq ( & bfqd -> queue_lock,0
1387,"<S2SV_ModStart> } else { return rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == U64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ; } case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur )",0
1388,<S2SV_ModStart> handle ) return NULL <S2SV_ModEnd> ; pointer =,0
1389,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
1390,<S2SV_ModStart> ; if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type,0
1391,"<S2SV_ModStart> ; if ( s == NULL ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s, <S2SV_blank> start: <S2SV_blank> %s, <S2SV_blank> sprev: <S2SV_blank> %s\\n"", ( int ) str, ( int ) end, ( int ) sprev ) ; return - 1 ; } <S2SV_ModStart> ; if ( s == NULL ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s, <S2SV_blank> sprev: <S2SV_blank> %s\\n"", ( int ) s, ( int ) sprev ) ; return - 1 ; } <S2SV_ModStart> ; if ( s == NULL ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s, <S2SV_blank> start: <S2SV_blank> %s, <S2SV_blank> sprev: <S2SV_blank> %s\\n"", ( int ) s, ( int ) sprev ) ; return - 1 ; }",0
1392,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_high_depth ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_high_depth ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_high_depth ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_high_depth ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_high_",0
1393,"<S2SV_ModStart> * skb ; size_t <S2SV_ModEnd> copied, error <S2SV_ModStart> ; copied = min_t ( size_t, size, msg -> msg_namelen ) ; if ( copied > size ) { error = - EINVAL ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; atm_return ( vcc, skb -> truesize ) ; } if (! ( flags & MSG_PEEK ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; }",0
1394,<S2SV_ModStart> = hash ; <S2SV_ModEnd> } } return,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> cpi, const TileInfo * tile_info, int mi_row, int mi_col, int * rate, int64_t * dist, BLOCK_SIZE bsize ) { <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart> x -> e_mbd, tile_info, mi_row, mi_col, bsize ) ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_info, mi_row, mi_col, rate, dist, bsize ) ; } else if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_info, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; }",0
1396,<S2SV_ModStart> { dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST | NETIF_F_TX_SKB_SHARING ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_TX_SKB_SHARING ) <S2SV_ModEnd> ; if (,0
1397,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) reader. gcol = gcolOpen ( reader. gcol, ""r"" ) ; else reader. gcol = gcolOpen ( reader. gcol, ""w"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. gcol = gcolOpen ( reader. gcol, ""w"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. gcol = gcolOpen ( reader. gcol, ""w"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. gcol = gcolOpen ( reader. gcol, ""r"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. fhd = stdin ; if (! reader. fhd ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; } if ( strcmp ( filename, ""-"" ) ) reader. fhd = stdin ; if (! reader. fhd ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) )",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> __this_address ; if ( di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) ) return __this_address ; if ( di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) ) return __this_address ; if ( di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) && di_size!= sizeof ( xfs_dinode_t ) ) return __this_address ;,0
1401,"<S2SV_ModStart> ( ( flags & VP8_EFLAG_NO_UPD_GF ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_AL",0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ] ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'60%%\'>Host</th>"" ""<th <S2SV_blank> width=\'40%%\'>Process <S2SV_blank> id</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'60%%\'>Host</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> bool zx_confirmZxLiquidTx ( <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg ) ) <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data_initial_chunk <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg ) ) <S2SV_ModStart>! zx_confirmZxLiquidTx ( <S2SV_ModEnd> msg -> data,0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ; <S2SV_ModStart> iovec ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; }",0
1410,"<S2SV_ModStart> = ntohs ( req -> request. keylen ) ; c -> binary_header. request. bodylen = ntohl ( req -> request. bodylen ) ; c -> binary_header. request. cas = ntohl ( req -> request. cas ) ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> request. keylen ) ; c -> binary_header. request. bodylen = ntohl ( req -> request. bodylen ) ; c -> binary_header. request. cas = ntohll ( req -> request. cas ) ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> request. keylen ) ; c -> binary_header. request. keylen = ntohs ( req -> request. keylen ) ; c -> binary_header. request.",0
1411,"<S2SV_ModStart> ) ) { dev_warn ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( header -> bLength < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bLength ) ; return - EINVAL ; } if ( header -> bLength < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType ) ; return - EINVAL ; }",0
1412,"<S2SV_ModStart>, err ; mutex_lock ( & card -> card_mutex ) ; <S2SV_ModStart> -> user_ctl_count >= MAX_USER_CONTROLS ) { mutex_unlock ( & card -> card_mutex ) ; return - EBUSY <S2SV_ModEnd> ; } access <S2SV_ModStart> SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READ",0
1413,"<S2SV_ModStart> { exit_client ( <S2SV_ModEnd> client_p, client_p <S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( strlen ( parv [ 2 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""*"" ) ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""*"" ) ) { sendto_one ( source_p",0
1414,<S2SV_ModStart> ; if (! has_seg_override ) { if ( mode == X86EMUL_MODE_PROT16 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT16 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT16 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if (,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> ~ IFF_XMIT_DST_RELEASE ; <S2SV_ModEnd> random_ether_addr ( dev,0
1417,<S2SV_ModStart> 16 ) ; if ( error16x16 > INT_MAX ) { error16x16 = INT_MAX ; distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd> )",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; <S2SV_ModStart> psf -> header ) ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ; <S2SV_ModEnd> return ; }",0
1420,"<S2SV_ModStart> ( e -> target_offset <S2SV_ModEnd> == sizeof ( <S2SV_ModStart> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && unconditional ( & e -> arp ) ) || ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && unconditional",0
1421,<S2SV_ModStart> priv -> alg_priv ) { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; else ctx -> priv -> destroy ( NULL ) ; },0
1422,<S2SV_ModStart> ) ) ; switch ( exit_reason ) { case EXIT_REASON_NMI_WINDOW : if ( is_page_fault ( intr_info ) ) return enable_ept ; return vmcs12 -> exception_bitmap & ( 1u << ( intr_info & INTR_INFO_VECTOR_MASK ) ) ; else if ( is_kernel_page_fault ( intr_info ) ) return enable_ept ; return vmcs12 -> exception_bitmap & ( 1u << ( intr_info & INTR_INFO_VECTOR_MASK ) ) ; else if ( is_kernel_page_fault ( intr_info ) ) return enable_ept ; return vmcs12 -> exception_bitmap & ( 1u << ( intr_info & INTR_INFO_VECTOR_MASK ) ) ; else if ( is_kernel_page_fault ( intr_info ) ) return enable_ept ; return vmcs12 -> exception_bitmap & ( 1u << ( intr_info & INTR_INFO_VECTOR_MASK ) ) ; else if ( is_kernel_page_fault ( intr_info ) ) return enable_ept ; return,0
1423,<S2SV_ModStart> -> adaptive_rd_thresh = ( speed < 1 )? ALLOW_RECODE : ALLOW_RECODE_KFMAXBW ; sf -> allow_skip_recode = 1 ; if ( speed >= 1 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cpi ) ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1424,"<S2SV_ModStart> ct_dccp_roles role ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & ct -> proto. dccp. hdr_len ) ; BUG_ON ( dh == NULL ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET &&! test_bit ( IPS_SEEN_REPLY_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_lock_bh ( & ct -> lock ) ; role = ct -> proto. dccp. role [ dir ] ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; } break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_REQUEST ) ct -> proto. dccp",0
1425,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MINSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( goodsize < LUAI_MINSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ;",0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] ; while ( * raw && * raw!= '\\'' ) { * raw ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } if (! str ) { Py_DECREF ( type ) ; Py_DECREF ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DE",0
1430,"<S2SV_ModStart> * input_ptr ; vpx_codec_err_t res <S2SV_ModEnd> ; vpx_codec_err_t is_keyframe_qaunt_set <S2SV_ModStart> } else if ( strcmp ( ""spatial-layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) ==",0
1431,"<S2SV_ModStart> mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_LAST_FAILED ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, &",0
1432,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int h = plane == 1 || plane == 2? FF_CEIL_RSHIFT ( inlink -> h, vsub ) : inlink -> h ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum",0
1433,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row",0
1434,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
1435,,1
1436,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1437,"<S2SV_ModStart> ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
1438,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gchar * mpdu_str = NULL ; <S2SV_ModStart> ampdu_len ) ; mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = kmalloc ( len_remain, GFP_NOFS ) ; if (! mpdu_str ) mpdu_str = km",0
1439,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> a_val ; UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x ++ ) { src = data + ( context -> width - x ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ]",0
1441,"<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo",0
1442,"<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } * ( ++ top ) = invert ; continue ; case ')' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1443,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> int ) cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> > INT_MAX )? cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> : ( int <S2SV_ModStart> > INT_MAX )? INT_MAX : ( int ) cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } return vp9_rc_clamp_iframe_target_size ( cpi, target ) <S2SV_ModEnd> ; } <S2SV_null>",0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
1446,"<S2SV_ModStart> struct hello6 * hellop ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\tOptions <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK ( hellop -> hello_deadint ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Interface-ID <S2SV_blank> %u, <S2SV_blank> Priority <S2SV_blank> %u"", EXTRACT_16BITS ( & hellop -> hello_deadint ), hellop -> hello_priority ) ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hellop -> hello_bdr",0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 || datalen > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) || datalen > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) ) return - EINVAL ; if ( datalen < 1 || datalen > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) || datalen > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) ) return - EINVAL,0
1448,"<S2SV_ModStart> rc ) { spin_lock_irq ( & rc -> uwbd. lock ) ; <S2SV_ModStart> ""uwbd"" ) ; spin_unlock_irq ( & rc -> uwbd. lock ) ; <S2SV_ModStart> ""uwbd"" ) ; spin_lock_irq ( & rc -> uwbd. lock ) ; <S2SV_ModStart> ""uwbd"" ) ; spin_lock_irq ( & rc -> uwbd. lock ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; spin_unlock_irq ( & rc -> uwbd. lock ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" """,0
1449,"<S2SV_ModStart> : # line 96 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1045 ""re_grammar.c"" break ; case 26 : # line 97 ""re_grammar.y""{ yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 ""re_grammar.c"" break ; case 27 : # line 98 ""re_grammar.y""{ yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1057 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 99 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ) ; } # line 1063 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 100 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1069 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 99 ""re_grammar.y"" { yr_",0
1450,<S2SV_ModStart> char ) ( <S2SV_ModEnd> existing & ~ <S2SV_ModStart> bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( existing & ~ mask ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( existing & mask ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGH,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = & cpi -> mb. plane [ plane ] ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; unsigned int * const coef_probs = & cpi -> fc. coef_probs [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCON",0
1452,"<S2SV_ModStart> pSelect -> pSrc ; struct SrcList * pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
1453,<S2SV_ModStart> # ifndef __ARCH_FORCE_SHMLBA if ( ( shmflg & SHM_RND ) &&! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { err = - EPERM ; goto out_unlock ; } } } else { if (! capable ( CAP_SYS_RAWIO ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) goto out_unlock ;,0
1454,"<S2SV_ModStart> users ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
1455,"<S2SV_ModStart> PointZZ_p * point <S2SV_ModEnd>, const CurveZZ_p <S2SV_ModStart> point, curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, tmp. x, tmp. y, NULL ) ; pointZZ_pDouble ( & R0, & R1, curve ) ; if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R0, & R1, curve ) ; } else if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R0, & R",0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVJavaScriptEnabledBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVasdEnabledBool : type = RPC_TYPE_UINT32 ; break ; case NPNVToolskit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVJavaScriptEnabledBool : type = RPC_TYPE_UINT32 ; break ; case NPNVJavaScriptEnabledBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVasdEnabledBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVVisOfflineBool : type = RPC_TYPE_UINT32 ; break ; case NPNVSupportsXEmbedBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVSupportsXEmbedBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1458,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sendmsg ( socket -> file <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1459,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; break ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> { int length <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; in_uint8s ( s, length ) ;",0
1463,"<S2SV_ModStart> ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } <S2SV_ModEnd> hkey. type <S2SV_ModStart> ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1464,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> VPX_IMG_FMT_I420 ; _y4m -> vpx_bps <S2SV_ModEnd> = 12 ; <S2SV_ModStart> = 12 ; if ( _y4m -> chroma_type == NULL ) { fprintf ( stderr, ""Missing <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } <S2SV_ModStart> -> chroma_type ) { fprintf ( stderr, ""Missing <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } if ( strcmp ( _y4m -> chroma_type, ""2"" ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> chroma <S2SV_blank> type; <S2SV_blank> YUV4MPEG2 <S2SV_blank> required.\\n"" ) ; return - 1 ; } ret = y4m_parse_tags ( _y4m, buffer + 6 ) ; if ( ret < 0 ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> YUV4MPEG2 <S2SV_blank> header.\\n"" ) ; return ret ; } ret = y4m_parse_tags ( _y4m, buffer + 7 ) ; if ( ret < 0 ) { fprintf ( stderr, ""Error",0
1465,"<S2SV_ModStart> { struct obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = read_obj_nam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp!= ( struct obj * ) 0 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ( read_uids_guids ( & directory_table_end, & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & directory_table_end, & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end, & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_",0
1467,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; len = sizeof ( keybuf ) - 1 ; if ( len > sizeof ( keybuf ) - 1 ) continue ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_",0
1469,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, 4 ) ) return 0 ; <S2SV_ModStart> 5 ) ; if",0
1470,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1471,<S2SV_ModStart> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; } <S2SV_ModStart> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY <S2SV_ModStart> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context -> pass ++ ; } if ( context -> curY >= p -> height ) { context ->,0
1472,<S2SV_ModStart> ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else if ( m == UV_PRED ) { ++ x -> uv_mode_count [ uvm ] ; },0
1473,"<S2SV_ModStart> ) ; } if ( sr -> tid_tree == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1474,<S2SV_ModStart> ) ) { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ; } else { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ; } } else { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { if ( WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ) { WARN_ON_ONCE ( stb. st_size!= stb. st_size ) ; } },0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart>, * * StartClean <S2SV_ModEnd> ; outpos = <S2SV_ModStart> = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>",0
1476,"<S2SV_ModStart> segs ) { u32 hash, id <S2SV_ModEnd> ; net_get_random_once ( <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words <S2SV_ModEnd> ( ( __force <S2SV_ModStart> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1477,"<S2SV_ModStart> expr_ty step ; int res ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1479,"<S2SV_ModStart> ; if ( ctl -> newf. office && ctl -> newf. office_phone && ctl -> newf. home_phone ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) & radiotap_header ; if ( radiotap_header -> it_version!= IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; if ( max_length < get_unaligned_le32 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = ( struct ieee80211_radiotap_header * ) radiotap_header ; iterator -> _max_length = get_unaligned_le32 ( & radiotap_header -> it_len ) ; iterator -> _arg += sizeof ( uint32_t ) ; if ( iterator -> _arg - ( unsigned long ) iterator -> _rtheader > ( unsigned long ) iterator -> _max_length ) return - EINVAL ;,0
1481,"<S2SV_ModStart> int err ; if (! nfp_abm_u32_check_knode ( alink -> abm, knode, proto, extack ) ) goto err_delete ; mask = knode -> sel -> keys [ 0 ]. mask ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; <S2SV_ModStart> err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && ( iter -> band!= knode -> res -> classid ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( <S2SV_ModEnd> IM, gdImagePtr",0
1483,<S2SV_ModStart>. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart> -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. g_pass = global -> passes == 2? pass? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; } <S2SV_ModStart> ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart>,0
1484,"<S2SV_ModStart> ; g_autoptr ( GOutputStream ) out_stream = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) new_argv = NULL ; g_auto ( GStrv ) old_argc = NULL ; g_auto ( GStrv ) new_argc = NULL ; g_auto ( GStrv ) new_arch = NULL ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
1485,<S2SV_ModStart> data_end ) { const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log,0
1486,"<S2SV_ModStart> vp9_decoder_create ( const VP9D_COMMON * common <S2SV_ModEnd>, const VP9D_CONFIG <S2SV_ModStart> ) ) ; const VP9_COMMON * const cm = common? & common -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_",0
1487,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> -> count ; fpl -> count = 0 ;,0
1489,"<S2SV_ModStart> req ) { struct ip_options_rcu * inet_opt <S2SV_ModEnd> ; req_inet = <S2SV_ModStart> -> opt ; inet_opt = rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( req ) ) ; if ( inet_opt <S2SV_ModEnd> == NULL || <S2SV_ModStart> == NULL || inet_opt <S2SV_ModEnd> -> cipso ==",0
1490,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> ( ctx, pts ) ; pick_quickcompress_mode ( ctx, duration, deadline ) ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_",0
1492,<S2SV_ModStart> -> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY ( <S2SV_ModStart> clockid = TEMP_FAILURE_RETRY (,0
1493,"<S2SV_ModStart> * child, * <S2SV_ModEnd> p ; struct <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; <S2SV_ModStart> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } unlock_mount_hash ( ) ; if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; } if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest",0
1494,"<S2SV_ModStart>, & len, 0",1
1495,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( k__cospi_p01_p31, k__cospi_p05_p27, k__cospi_p27_p05_m13, k__cospi_p23_m09, k__cospi_p13_p19, k__cospi_p17_p15, k__cospi_p17_p15, k__cospi_p15_m17, k__cospi_p21_p11, k__cospi_p11_m21, k__cospi_p11_m21, k__cospi_p11_m21, k__cospi_p11_m21, k__cospi",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> ) { Huff_transmit <S2SV_ModEnd> ( huff, <S2SV_ModStart> NULL, fout ) ; return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart>, int mi_row, int mi_col, BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> select_txfm_size && mi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_skip_recode ; const int mi_width = num_8x8_blocks_wide_lookup [ mi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mi -> sb_type ] ; const int mi_width = num_8x8_blocks_wide_lookup [ mi -> sb_type ] ; const int mi_height = num_8x8_blocks_high_lookup [ mi -> sb_type ] ; const int mi_height =",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> crypto_skcipher * tfm_des = NULL <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"" <S2SV_ModEnd>, 0, <S2SV_ModStart>, 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModEnd> tfm_des = crypto_alloc_skcipher <S2SV_ModStart> tfm_des ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModEnd> req = skcipher_request_alloc <S2SV_ModStart>, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; }",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } zeroes = i = 0 ; while ( get_bits_left ( gbc ) < zeroes + 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return",0
1503,<S2SV_ModStart> delta ; else { if ( i + insn -> off + 1 < pos ) insn -> off -= delta ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; switch ( exit_reason ) { case EXIT_REASON_EXCEPTION_NMI : if (! is_exception ( intr_info ) ) return 0 ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_page_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return 0 ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0",0
1505,"<S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) goto out ;,0
1508,"<S2SV_ModStart> ++ r ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( <S2SV_ModStart> + 1, dim ) <= entries ) ; assert ( <S2SV_ModEnd> pow ( ( float <S2SV_ModStart> + 1, dim ) <= entries ) ; return r ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2",0
1509,<S2SV_ModStart> 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> ) ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> ) ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> ) ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> ) ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> ) ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse,0
1510,<S2SV_ModStart> length ) { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1512,"<S2SV_ModStart> cfg ) { int i ; memset ( cfg, 0, sizeof ( cfg_t ) ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strncmp ( argv [ i ], ""--"", 12 ) == 0 ) sscanf ( argv [ i ], ""--"", & cfg -> app_name ) ; if ( strcmp ( argv [ i ], ""--"", 12 ) == 0 ) cfg -> app_name = argv [ i ] + 12 ; if ( strncmp ( argv [ i ], ""--"", 12 ) == 0 ) cfg -> app_name = argv [ i ] + 12 ; for ( i = 0 ; i < argc - 1 ; i ++ ) { if ( strcmp ( argv [ i ], ""--"", 12 ) == 0 ) cfg -> app_name = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""--"", 12 ) == 0 ) cfg -> app_name = argv [ i ] + 12 ; if ( strcmp ( argv [ i ], ""--"", 12 ) == 0 ) cfg -> app_name = argv [ i ] + 12 ; for ( i = 0 ; i < argc - 1 ; i ++ )",0
1513,"<S2SV_ModStart> = DEF_RECLAIM_PREFREE_SEGMENTS ; if ( sm_info -> reserved_segments > DEF_RECLAIM_PREFREE_SEGMENTS ) sm_info -> reserved_segments = DEF_RECLAIM_PREFREE_SEGMENTS ; if ( sm_info -> ovp_segments > DEF_RECLAIM_PREFREE_SEGMENTS ) sm_info -> ovp_segments = DEF_RECLAIM_PREFREE_SEGMENTS ; if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm",0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
1515,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> b_multi_threaded!= 0 ) && ( mb_row!= 0 ) ) last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row ] ; else last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row ] ; if ( ( cpi -> b_multi_threaded!= 0 ) && ( mb_row!= 0 ) ) last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row ] ; if ( ( cpi -> b_multi_threaded!= 0 ) && ( mb_row!= 0 ) ) last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_last_mb_col [ mb_row -,0
1517,"<S2SV_ModStart> ( pvc ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,"<S2SV_ModStart> * data ; if (! s_check_rem ( s, 4 ) ) { abort ( ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, 4 ) ) { abort ( ) ; } <S2SV_ModStart> == CLIPRDR_ERROR ) { cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_DATA_REQUEST, NULL, 0 ) ; break ; case CLIPRDR_FORMAT_ANNOUNCE : ui_clip_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_DATA_REQUEST, CLIPRDR_RESPONSE, NULL, 0 ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_request_data ( format ) ; break ; case CLIPRDR_DATA_RESPONSE : ui_clip_handle_data ( data, length ) ; break ; case 7 : ui_clip_handle_data ( last_formats, last_formats_length ) ; break",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( l -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) { if ( l -> prev -> type == FORM_TEXTAREA ) {,0
1521,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( bps <S2SV_ModEnd> * stride ) <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt tiferr = new TIFFErrorExt ( ""MemoryAllocationFailed"" ) ; if ( tiferr ) { TIFFErrorExt ( tiferr, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tiferr, ""MemoryAllocationFailed"" ) ; return - 1 ; } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ ( bps - byte - 1 ) * wc + count ] = tmp [ bps * count + byte ] ; # endif } } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp",0
1525,<S2SV_ModStart> STREAM s ) { int i ; <S2SV_ModStart> int i ; if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> ++ ) {,0
1526,"<S2SV_ModStart> } else { if ( smatch ( option, ""timestamp"" ) ) { ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
1528,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return r ; if (! access_ok ( VERIFY_WRITE, fd, name, sizeof ( name ), & r ) ) return",0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> } ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb",0
1530,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps",0
1531,"<S2SV_ModStart> stride, int <S2SV_ModEnd> mv_row, int <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr,",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) > 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ;",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> = cJSON_CreateFloat ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! n ) a -> child = 0 ; else suffix_object ( p, n ) ; n = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a -> child = cJSON_CreateNumber ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> ] ) ; if (! i ) a",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,"<S2SV_ModStart> ; float * w ; w = get_window ( f, n ) ; for ( i = 0 ; i < f -> channels ; ++ i ) { for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] ; } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] * w [ j ] + f -> previous_window [ i ] [ j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j",0
1536,"<S2SV_ModStart> data_end ) { const int num_threads = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> tile_rows ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd> & ~ 1 <S2SV_ModStart> num_workers = MIN ( num_workers <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> tile_cols ) ; const TileBuffer * tile_buffers = vpx_malloc ( num_workers * sizeof ( * tile_buffers ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR",0
1537,<S2SV_ModStart> * 0x101 ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ),0
1538,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> y_dc_delta_q ) ; const int qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + q",0
1539,"<S2SV_ModStart> int bychunk ; if ( bitspersample!= 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; }",0
1540,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t err_code ; vpx_codec_err_t err_detail ; err_detail = ctx -> base. err_detail ; err_detail = error -> has_detail? error -> detail : NULL ; ctx -> base. err_detail = err_detail ; return err_code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,<S2SV_ModStart> : <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1543,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; <S2SV_ModStart> ps_prev_poc, * ps_cur_poc ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_prev_slice = NULL ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_prev_poc = NULL ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_cur_poc = NULL ;",0
1544,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_,0
1545,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; return ; } <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; } <S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_",0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; while ( isdigit ( * * fmt ) ) { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> g -> survival, g -> reallyold, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> survival, g -> reallyold, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> allgc, g -> all",0
1548,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
1549,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; } if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) ) ) ; vp8_create_common ( & cpi -> common ) ; memcpy ( cpi -> base_skip_false_prob, vp",0
1552,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS <S2SV_ModEnd>, 1, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1553,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( bp [ 24 ] ) ; if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if (",0
1554,"<S2SV_ModStart> case EXPR_NOT : if (! * set_rtrn ) * set_rtrn =! * set_rtrn ; <S2SV_ModStart> case EXPR_UNARY_PLUS : if (! * set_rtrn ) * set_rtrn =! * set_rtrn ; switch ( expr -> expr. op ) { case EXPR_ADD : case EXPR_SUBTRACT : if ( istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""no"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""false"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = false ; return true ; } else if ( istreq ( ident, ""false"" ) || istreq ( ident, ""no"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""on"" ) ) { * set_rtrn = false ;",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> - EFAULT ; } if ( copy_from_user ( & karg, uarg, sizeof ( struct mpt_ioctl_command ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
1557,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> height, length, padding, value, version, width ; image = DestroyImageList ( image ) ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1558,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdwidth ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdheight ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdwidth ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdheight ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"", bandno, cp -> refgrdwidth ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number <S2SV_blank> %d\\n"",",0
1559,<S2SV_ModStart> chanmode ) { case '\\0' : str_temp = '\\0' ; break ; case '\\n' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\r' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\0' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\r' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; case '\\t' : str_temp = '\\0' ; break ; },0
1560,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_int <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; error <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; }",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> mode = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ctx ] ) ; if (! cm -> frame_parallel_decoding_mode ) ++ cm -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1564,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; stream -> index ++ ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; # if CONFIG_WEBM_IO stream -> ebml. last_",0
1565,"<S2SV_ModStart> nd_opt_rdnss * oprd ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_mtu ), op -> nd_opt_len ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_mtu ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""advinterval"", op -> nd_opt_len ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", op -> nd_opt_len )",0
1566,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ), yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ), yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror",0
1567,"<S2SV_ModStart> ; ret = var_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return",0
1568,<S2SV_ModStart> ; if ( <S2SV_ModEnd> A > skb <S2SV_ModStart> A ] ; if ( <S2SV_ModEnd> nla -> nla_len <S2SV_ModStart> -> nla_len > A <S2SV_ModEnd> - skb -> <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>""",0
1571,"<S2SV_ModStart> cac_id, priv -> cac_id_len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",0
1572,<S2SV_ModStart> ; tok -> type_comments = 0 ; tok -> type_comments <S2SV_ModStart> ; return tok ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1573,<S2SV_ModStart> } if ( av1 -> emul_esd ) { gf_odf_desc_del ( ( GF_Descriptor * ) av1 -> emul_esd ) ; av1 -> emul_esd = gf_odf_desc_esd_new ( 2 ) ; av1 -> emul_esd -> decoderConfig -> objectTypeIndication = GF_CODECID_ESD ; } if ( av1 -> emul_esd ) { gf_odf_desc_del ( ( GF_Descriptor * ) av1 -> emul_esd ) ; av1 -> emul_esd = gf_odf_desc_esd_new ( 2 ) ; if ( btrt ) { av1 -> emul_esd -> decoderConfig -> bufferSizeDB = btrt -> bufferSizeDB ; av1 -> emul_esd -> decoderConfig -> avgBitrate = btrt -> avgBitrate ; } else { gf_odf_desc_del ( ( GF_Descriptor * ) av1 -> emul_esd ) ; av1 -> emul_esd -> decoderConfig -> maxBitrate = btrt ->,0
1574,"<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ;",0
1575,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> fullness = 1 ; dpb -> numRefFrames = 0 ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; d",0
1576,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart>! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_in, addrlen )!= OE_OK ) { OE_RAISE",0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) ; struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( sk",0
1580,"<S2SV_ModStart>, at ; struct pe_image_optional_hdr64 opt64 <S2SV_ModEnd> ; struct pe_image_optional_hdr32 <S2SV_ModStart> pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 <S2SV_ModEnd> ; struct pe_image_optional_hdr32 <S2SV_ModStart> pe_image_optional_hdr64 opt64 <S2SV_ModEnd> ; struct pe_image_optional_hdr32 <S2SV_ModStart> pe_image_optional_hdr32 ) ; if ( opt64. opt64. opt32. opt64. opt64. opt64. opt32. opt64. opt64. opt32. opt64. opt32. opt64. opt32. opt64. opt32. opt32. opt32. opt64. opt64. opt64. opt32. opt32. opt32. opt64. opt64. opt32. opt32. opt32. opt32. opt32. opt32. opt32. opt32. opt64. opt64. opt32. opt64. opt64. opt64. opt64. opt64. opt64. opt32. opt32. opt32. opt32. opt64. opt64. opt32. opt32. opt32. opt32.",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> | address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9",0
1582,"<S2SV_ModStart> striplength ) ; if ( striplength < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> striplength ) ; if ( striplength < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> striplength ) ; if ( striplength < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred = __task_cred ( child ) ; <S2SV_ModStart> ) ; __ptrace_link <S2SV_ModEnd> ( child, <S2SV_ModStart> new_parent, old_cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { int rc ; <S2SV_ModStart> pcmk_ok ) { rc = cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { <S2SV_ModStart> pcmk_ok ) { rc = cib_tls_signon ( cib, & private -> callback ) ; } if ( rc == pcmk_ok ) { rc = cib_tls_signon ( cib, & private -> command ) ; } if ( rc == pcmk_ok ) { rc = cib_tls_signon ( cib, & private -> callback ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, n, <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX",0
1587,"<S2SV_ModStart> ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( st_size!= h -> size ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( st_size!= h -> size ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" ) ; goto error ; } if ( st_size!= h -> size ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank>",0
1588,<S2SV_ModStart> -> reqbody_no_files_limit ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_access ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_inmemory_limit = ( child -> reqbody_inmemory_limit == NOT_SET? parent -> reqbody_inmemory_limit : child -> reqbody_inmemory_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_,0
1589,"<S2SV_ModStart> ) ) { memcpy ( ctl_buf, msg -> msg_name, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ), msg -> msg_namelen ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ), msg -> msg_control, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ), sizeof ( struct sockaddr_storage ) ) ; memcpy ( ctl_buf, msg -> msg_name, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ), sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ), sizeof ( ctl ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ), sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf + sizeof ( struct cmsghdr ) )",0
1590,"<S2SV_ModStart> one, one2 <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( Cor",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, mac -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,"<S2SV_ModStart> cib_client_t * client <S2SV_ModEnd> = user_data ; <S2SV_ModStart> client ) ; <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> id ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { <S2SV_ModStart> work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else if ( <S2SV_ModStart> uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u.",0
