,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> nonce <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; return ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; return ; } ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; return ; } ND_TCHECK2 ( * tptr, len ) )",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_to_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( yi. cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) { if ( unlikely ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_len ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_len ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_len ) ) { if ( unlikely ( unfrag_ip6hlen,0
5,"<S2SV_ModStart> ) { int64_t <S2SV_ModEnd> time, offset",0
6,"<S2SV_ModStart> * tpg ; u64 tpgt <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; if ( tpgt > UINT_MAX - 5 ) return ERR_PTR ( - EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt < 0 ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) return NULL ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; tpg -> tport_tpgt",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) return ;",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { if ( item < 0 ) { return NULL ; } <S2SV_ModEnd> while ( c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) options ++ ; * data = ( void * ) options ;",0
12,"<S2SV_ModStart> = NEXTHDR_FRAGMENT ; memset ( fptr, 0, sizeof ( * fptr ) ) ;",0
13,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart>, & data, NULL <S2SV_ModEnd> ) ; perf_swevent_put_recursion_context",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } if (! leaf -> entries ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) leaf + 1 ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; } else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start =",0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fdct16 ( const <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 13 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; t0, t1, t2, t3 ; t1 = input [ 0 ] + input [ 7 ] ; t2 = input [ 1 ] + input [",0
16,"<S2SV_ModStart> env ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto err_unlock ; env -> explored_states = kcalloc ( env -> prog -> len, sizeof ( * env -> explored_states ), GFP_USER ) ; if (! env -> explored_states ) goto err_free_env ; }",0
17,"<S2SV_ModStart> -> num_channels ; if ( num_chans < 1 ) { strcpy ( wpc -> error_message, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> channels <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } if ( num_chans > 8 ) { strcpy ( wpc -> error_message, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> channels <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = 0 ; config -> xmode = 0 ; } else { wpc -> float_norm_exp = 0 ; }",0
18,"<S2SV_ModStart> scsi_device * SDev = NULL ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_normalize_sense ( SDev, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; ssleep ( 2 ) ; err = - ENOMEDIUM ; break ; } <S2SV_ModEnd> scsi_free_sense ( SDev",0
19,"<S2SV_ModStart> if ( get4 ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } else { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; }",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid ; int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_err = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mvcomp -> sign ) ; vpx_write ( w, mvcomp -> classes [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ fr ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mv_class == MV_CLASS_0? mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; }",0
23,<S2SV_ModStart> ) ; return rcu_dereference ( ralg -> seedsize ) <S2SV_ModEnd> ; } <S2SV_null>,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; jas_image_t * <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_FAILURE ) ; } break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } if (! ( fmtname = jas_image_fmttostr ( fmt",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ) ) ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, * ( ( const u_char * ) ptr ++ ) ) ) ) ; ptr ++ ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, "" <S2SV_blank> "" ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
29,<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = interface_to_host ( intf ) ; struct usb_host_interface * intf2 = interface_to_usb_interface ( intf ) ; struct usb_host_interface * intf3 = interface_to_usb_interface ( intf ) ; if ( intf2 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf2 -> desc. bNumInterfaces - 1 ; if ( alt < 0 ) return - ENODEV,0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> char * from, int fromlen, unsigned char * to ) { struct pathComponent * pc ; int elen = 0 ; if ( fromlen < 0 ) return 0 ; <S2SV_ModStart> case 2 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 3 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ;",0
31,"<S2SV_ModStart> ; } } if ( server. tcp_keepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; }",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> = NULL ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> endpoints\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> -> sh_name ] ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void construct_get_dest_keyring ( <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else <S2SV_ModEnd> { switch ( <S2SV_ModStart> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; break ; case KEY_REQKEY_DEFL_GROUP_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> group_keyring ) ; break ; case KEY_REQKEY_DEFL_USER_GROUP_KEYRING : dest_keyring = key_,0
36,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ) ) return - EINVAL ; if ( addr -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( sk -> sk_state!= TCP_CLOSE || addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = inet -> inet_saddr = addr -> l2tp_addr. s_addr ; if (,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline unsigned int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned int <S2SV_ModEnd> max = ( <S2SV_ModStart> ) << PAGE_SHIFT ; return max ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
39,"<S2SV_ModStart> ), _ ( ""Launch <S2SV_blank> anyway"" <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" <S2SV_ModEnd> ), RESPONSE_MARK_TRUSTED <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL",0
40,<S2SV_ModStart> = localtime ( <S2SV_ModEnd> t ) ;,0
41,"<S2SV_ModStart> ; memcpy ( hashed + length - 1, password ) ;",0
42,"<S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_properties * props = d -> priv ; struct dvb_usb_device_i2c_adap * adap = & adap -> i2c_adap ; struct dvb_usb_device_properties * fe_adap = adap -> priv ; struct dvb_usb_generic_rw_data * data, sizeof ( struct dvb_usb_device_properties ), obuf, 1, ibuf, 1, 0 ) ; d -> fe_adap [ 0 ]. i2c_adap = & adap -> i2c_adap ; if ( dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_",0
43,<S2SV_ModStart> asoc ; struct sock * sk = transport -> asoc -> base. sk ; <S2SV_ModStart>. sk ) ; sock_hold ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ) ) { sock_put ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;,0
44,"<S2SV_ModStart> ( name, ""group_time"" ) ||! strcmp ( name, ""group_time"" ) ||! strcmp ( name, ""group_time"" ) ||! strcmp ( name, ""group_time"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options"" ) ) group_time_str = value ; else if (! strcmp ( name, ""options",0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> cp0 ; assert ( <S2SV_ModEnd> ( cc % <S2SV_ModStart> stride ) == 0 ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein < 0 || scanlinesizeout < 0 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> many <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; }",0
47,<S2SV_ModStart> ) ; struct <S2SV_ModEnd> address_space * mapping <S2SV_ModStart> hugetlb_lock ) ; lock_page ( page ) ; <S2SV_ModStart> hugetlb_lock ) ; unlock_page ( page ) ;,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> ; if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ;",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { get_page ( buf -> page ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> ep2 ) ; if ( nmap > sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u"", tcount, nmap ) ) ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> nmap=%u"", tcount, sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ) ) ; }",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; }",0
54,<S2SV_ModStart> wp -> config <S2SV_ModEnd> -> pm_max_requests ;,0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { const FIRSTPASS_STATS * position = & twopass -> stats_in ; const FIRSTPASS_STATS tmp_next_frame ; if ( still_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame",0
56,"<S2SV_ModStart> return 0 ; } handle -> h_transaction = NULL ; <S2SV_ModStart> handle ) ; handle -> h_err = jbd2_journal_stop ( handle ) ; if (! handle -> h_transaction ) { err = jbd2_journal_stop ( handle ) ; return handle -> h_err? handle -> h_err : err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : rc ; if (! err ) { __ext4_std_error ( sb, where, line, err ) ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; handle -> h_err = rc ; } <S2SV_ModEnd> err = handle",0
57,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> args -> valuelen, args -> valuelen, & name_loc -> name, & name_rmt -> name, & name_rmt -> valuelen <S2SV_ModEnd> ) ) ;",0
59,"<S2SV_ModStart> alg ) { if (! try_module_get ( name ) ) return ERR_PTR ( - ENOENT ) ; if (! try_module_get ( ""%s-all"", name ) ) return ERR_PTR ( - ENOENT ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> ) ) { if (! try_module_get ( ""%s-all"", name ) ) return ERR_PTR ( - ENOENT ) ; if (! crypto_is_larval ( alg ) ) return crypto_larval_wait ( alg ) ; return crypto_alg_lookup ( name, type, mask ) ; } if (! alg ) return ERR_PTR ( - ENOENT ) ; if (! crypto_is_larval ( alg ) ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : crypto_alg_lookup ( name, type, mask ) ; if (! crypto_is_larval ( alg ) ) return crypto_is_larval ( alg )? crypto_larval_wait ( alg ) : crypto_alg_lookup ( name, type, mask ) ; return ERR_PTR ( - ENOENT ) ; }",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> stlv_len ) ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "", <S2SV_blank> Path <S2SV_blank> Cost: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "", <S2SV_blank> Prio: <S2SV_blank> %d"", EXTRACT_16BITS ( tptr ) ) ) ; tptr = tptr + 2 ; ND_PRINT ( ( ndo, "", <S2SV_blank> V: <S2SV_blank> %d"", ( EXTRACT_16BITS ( tptr ) >> 4 ) & 0x",0
61,"<S2SV_ModStart> ) { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> ) opt ; if ( opt_len < 12 || opt_len > 20 || ( flags & ( TH_SYN | TH_ACK ) ) == TH_SYN ) ) return 0 ; if (,0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; uid_t old_uid ; gid_t old_gid ; <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } } if ( options -> attach_flags & LXC_ATTACH_SET_UID ) { ret = personality ( new_uid ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) )",0
66,<S2SV_ModStart> header -> biSize >= 12U <S2SV_ModEnd> ) { header <S2SV_ModStart> header -> biSize >= 52U <S2SV_ModEnd> ) { header <S2SV_ModStart> header -> biSize >= 56U <S2SV_ModEnd> ) { header <S2SV_ModStart> header -> biSize >= 108U ) { header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; } else { header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; },0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; return scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) return ;,0
73,<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return - EFAULT <S2SV_ModEnd> ; ureq = <S2SV_ModStart> ) ) return - EFAULT <S2SV_ModEnd> ; qinfo.,0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } for ( j = 0 ; j < c ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; avio_r8 ( pb ) ; avio_r8 ( pb ) ; } } for ( j = 0 ; j < num ; j ++ ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } for ( j = 0 ; j < c ; j ++ ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; } for ( j = 0 ; j < num ; j ++ ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks",0
76,"<S2SV_ModStart> = NULL ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
77,<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent,0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len < 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } <S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len < 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } if ( jnx_ext_len < 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, """,0
80,<S2SV_ModStart> ; return NF_STOLEN <S2SV_ModEnd> ; } <S2SV_null>,0
81,"<S2SV_ModStart> * up ; size_t len = nla_len ( rta ) ; <S2SV_ModStart> rta ) ; len = min_t ( size_t, len, xfrm_replay_state_esn_len ( up ) ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } <S2SV_ModStart> - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } <S2SV_ModStart> - ENOMEM ; }",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = ( MagickRealType ) ( ( size_t ) pixel | ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> : { result = ( MagickRealType ) ( ( size,0
84,"<S2SV_ModStart> LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""PinLength"", pin_length, sizeof ( uint8_t ) ) ; ret &= btif_config_flush ( ) ;",0
85,"<S2SV_ModStart> ( buf = jas_calloc <S2SV_ModEnd> ( bufsize,",0
86,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) { return VPX_CODEC_INVALID_PARAM ; } else { res = VPX_CODEC_INVALID_PARAM ; },0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> size <S2SV_blank> %u.\\n"", gso -> u. gso. size ) ; netbk_free_skb_extra ( skb, gso ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCP ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; netbk_free_skb_extra ( skb, gso ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { char * name = path_name ( path, last ) ; free ( name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
89,"<S2SV_ModStart> ; if ( newflow < 0 || newparity < 0 || newbits < 0 ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> flow: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newflow, newparity, newbits ) ; } else { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> flow: <S2SV_blank> %d <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", newflow, newparity, newbits ) ; }",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> data_buffer ) { kfree ( mixer -> data_buffer ) ; mixer -> data_buffer = NULL ; },0
91,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_sock * <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> return - EALREADY <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> fanout ) { mutex_unlock ( & fanout_mutex ) ; return - EBUSY ; } <S2SV_ModEnd> if ( type <S2SV_ModStart> ) ) { mutex_unlock ( & fanout_mutex ) ; return - EBUSY ; } <S2SV_ModEnd> if ( type <S2SV_ModStart> ) ) { mutex_unlock ( & fanout_mutex ) ; return - EBUSY ; } <S2SV_ModEnd> if ( type <S2SV_ModStart> ) ) { mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == sock_net ( sk ) ) { mutex_unlock ( & fanout_mutex ) ; return - EINVAL ; } if ( type == PACKET_FANOUT_LB ) { mutex_unlock ( & fanout_mutex ) ; return - EBUSY ; } if ( type == PACKET_FANOUT_CPU ) { mutex_unlock ( &",0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp,",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> ; if ( imp_sth -> done_desc ) { if (! imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; <S2SV_ModStart> ( interface, ENC28J60_ETXNDL, LSB",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ; if ( page && ( access ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( access ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ( page && ( access ( page, R_OK <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request",0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO || flags == EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_split_unwritten_extents ( handle, inode, path, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ret = ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto map_",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> <= <S2SV_blank> 6)"" ) ) ; return 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; }",0
101,"<S2SV_ModStart>! caller_is_in_ancestor ( <S2SV_ModEnd> fc -> pid <S2SV_ModStart> -> pid, <S2SV_ModEnd> cgroup, NULL",0
102,"<S2SV_ModStart> low_var_thresh, int flag, int mb_rows, int mb_cols, unsigned char * limits ) { double level = 6.0e-05 * q * q * q +.306 * q +.0065 ; double level = 6.0e-05 * q * q * q +.306 * q +.0067 * q +.306 * q +.0065 ; double level = 6.0e-05 * q * q +.0067 * q * q +.0065 ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> void ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row",0
103,"<S2SV_ModStart> ) ) { if (! access_ok ( VERIFY_WRITE, param, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> buffer_length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> buffer_length ) ; if ( ret ) return ret ; }",0
104,<S2SV_ModStart> : if ( ( effective || bprm -> unsafe & LSM_UNSAFE_PTRACE_CAP ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { new -> euid = new -> uid ; } } } },0
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache * cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb2_cache_entry_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! ce ) { error = mb2_cache_entry_insert ( cache <S2SV_ModEnd>, bh -> <S2SV_ModStart> bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; error = mb2_cache_entry_insert ( cache <S2SV_ModEnd>, bh -> <S2SV_ModStart> bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug (",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { r_socket_free ( s ) ; return NULL ; }",0
107,<S2SV_ModStart> ( c == LUA_SIGNATURE <S2SV_ModEnd> [ 0 ],0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( dev_num, size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM",0
111,"<S2SV_ModStart> trunc : ND_PRINT ( <S2SV_ModEnd> ( ndo,",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, u_int length <S2SV_ModStart> pdu_len ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, length ) ) ; return - 1 ; } <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_16BITS ( pdu_header -> u. session_id ), EXTRACT_32BITS ( msg ) ) ) ; break ; case RPKI_RTR_CACHE_RESET_PDU : case RPKI_RTR_CACHE_RESPONSE_PDU : ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned char * data ; <S2SV_ModStart> = NULL ; data = skb -> data ; <S2SV_ModStart> = NULL ; data = kmemdup ( skb -> data, len, GFP_ATOMIC ) ; if ( data == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } len = ( ( ( skb -> data [ 3 ] >> 4 ) & 0x0F ) + 1 ) >> 1 ; if (! rose_parse_facilities ( skb -> data + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) ; } else { if ( ( opt_flags & P_GVAR ) == 0 ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { if ( ( opt_flags & P_GVAR ) == 0 ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> null"" ) ; } else { if ( ( opt_flags & P_GVAR ) == 0 ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else { if ( ( opt_flags & P_GVAR ) == 0 ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> null"" ) ; } } else { if ( ( opt_flags & P_GVAR ) == 0 ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank>",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & acl ) ; if ( ret ) goto out ; } else { ret = - EINVAL ; goto out ; }",0
117,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> int ret, <S2SV_ModStart> ) ; } <S2SV_ModEnd> write_lock ( & <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY <S2SV_ModEnd> ; memcpy (",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : isoclns_print <S2SV_ModEnd> ( ndo,",0
119,<S2SV_ModStart> separator = * src ++ ; for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { break ; } else if ( src [ 0 ] == '/' ) { break ; } else if ( src [ 0 ] == '.' ) { break ; } else if ( src [ 0 ] == '/' ) { break ; } else if ( src [ 0 ] == '.' ) { break ; } else if ( src [ 0 ] == '/' ) { break ; } else if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { break ; } else if ( src [ 0 ] == '/' ) { break ; } else if ( src [ 0 ] == '.' ) { break ; } else if ( src [ 1 ] == '/' ) { break ; } else if ( src [ 2 ] == '/' ) { break ; } else if ( src [ 2 ] == '\\0' ) { break ; } else if ( src [ 2 ] == '\\0' ) { break ; } else if ( src [ 2 ] == '\\0' ) { break ; } else if ( src [ 2 ] ==,0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT32 bitsSwizzled ; * ( UINT32 * ) tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 *",0
121,"<S2SV_ModStart> size_t size ; if ( width > JAS_IMG_MAX_WIDTH || height > JAS_IMG_MAX_HEIGHT ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) {",0
122,<S2SV_ModStart> s ) { if ( s > UINT32_MAX / sizeof ( tdata_t ) ) { return ( malloc ( ( size_t ) ( UINT32_MAX / sizeof ( tdata_t ) ) ) ) ; },0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EFAULT ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy < 0 ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; } if ( copy > ( ssize_t ) count ) { ret = - EINVAL ; goto bail ; },0
124,<S2SV_ModStart> ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; },0
125,"<S2SV_ModStart> peer ) get_net ( net, peer -> name ) ; spin_unlock_bh ( & net -> nsid_lock ) ;",0
126,<S2SV_ModStart> ; if ( content_buf_used > content_buf_len ) content_buf_used = content_buf_len ; <S2SV_ModStart> ; if ( content_buf_used > content_buf_len ) content_buf_len = content_buf_len ; <S2SV_ModStart> ; if ( content_buf_used > content_buf_len ) content_buf_used = content_buf_len ; <S2SV_ModStart> ; if ( content_buf_used > content_buf_len ) content_buf_len = content_buf_used ; if ( content_buf_used > content_buf_len ) content_buf_used = content_buf_len ; if ( content_buf_used > content_buf_len ) content_buf_len = content_buf_used ; if ( content_buf_used > content_buf_len ) content_buf_used = content_buf_used ; if ( content_buf_used > content_buf_len ) content_buf_len = content_buf_used ; if ( content_buf_used > content_buf_len ) content_buf_used = content_buf_used ; if ( content_buf_used > content_buf_,0
127,"<S2SV_ModStart> ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( c_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT16 ( p_id_len ) && POKE_UINT16 ( p_id_len",0
128,<S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ;,0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> peerparams, 0, sizeof ( struct sctp_assocparams ) ) ; memset ( & sp -> assocparams, 0, sizeof ( struct sctp_assocparams ) ) ;",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; } else { s -> avctx -> profile = 0 ; } <S2SV_ModEnd> return 0 ;",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; u16 wTmp ; if ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if (",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> LSM <S2SV_blank> rule <S2SV_blank> %d\\n"", __func__, lsm_rule ) ; return result ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n""",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; size_t attrlen, bitmap [ 3 ] ; __be32 * savep ; size_t hdrlen ; u32 recvd ; <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; <S2SV_ModEnd> } else { <S2SV_ModStart> acl_len = attrlen <S2SV_ModEnd> ; } }",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen >,0
138,<S2SV_ModStart> while ( ( <S2SV_ModStart> i < to_read <S2SV_ModEnd> ) ) {,0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> AVPALETTE_SIZE ) ; if (! in -> data [ plane ] ) { av_frame_free ( & in ) ; return AVERROR ( ENOMEM ) ; },0
141,"<S2SV_ModStart> '/' ) { strncpy <S2SV_ModEnd> ( szFileName, <S2SV_ModStart> pszFileName ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszString ) > ODBC_FILENAME_MAX",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & perms ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } }",0
143,<S2SV_ModStart> = 0 ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties < 0 ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } sh. sh_properties = CDF_TOLE4 ( shp -> sh_properties ) ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } sh. sh_properties = CDF_TOLE4 ( shp -> sh_properties ) ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; },0
144,"<S2SV_ModStart> ; if ( inet -> inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> eigrp_tlv_at_ext ; } if ( eigrp_tlv_type == EIGRP_IP_INT ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> IP <S2SV_blank> int <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( eigrp_tlv_type == EIGRP_IP_EXT ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> IP <S2SV_blank> ext <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( eigrp_tlv_type == EIGRP_AT_INT ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> IP <S2SV_blank> int <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( eigrp_tlv_type == EIGRP_IP_EXT ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> IP <S2SV_blank> ext <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"" ) ) ; return ; } if ( eigrp_tlv_type == EIGRP_AT_INT ) { ND_PRINT ( ( ndo, ""EIG",0
147,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER if ( ( size + align - 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) > ( size + ADDRESS_STORAGE_SIZE ) ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; } <S2SV_ModEnd> number_aau = ( <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( number_aau > ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif",0
148,"<S2SV_ModStart> int res ; long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) * sizeof ( long long ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> * table_start =",0
149,"<S2SV_ModStart> } ptr = strrchr <S2SV_ModEnd> ( ptr + <S2SV_ModStart> 1, '/' ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= <S2SV_ModEnd> EXT4_GET_BLOCKS_PRE_IO ;,0
151,<S2SV_ModStart> } else return apr_psprintf <S2SV_ModEnd> ( cmd ->,0
152,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;,0
153,"<S2SV_ModStart> = 0.0 ; <S2SV_ModEnd> uint16 bps = <S2SV_ModStart> = 0 ; if ( ntiles > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image"" ) ; if ( nstrips > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; if ( ntiles > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image"" ) ; if ( ntiles > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image"" ) ; if ( nstrips > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; if ( ntiles > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image"" ) ; if ( ntiles > TIFFMAX_TILES ) TIFFError ( ""loadImage"", ""Too <S2SV_blank> many <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image"" ) ; if (",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use",0
155,"<S2SV_ModStart> ; if ( ( r = sshbuf_get_string ( NULL ) )!= NULL ) fatal ( ""%s: <S2SV_blank> sshbuf_get_string: <S2SV_blank> %s"", __func__, r ) ;",0
156,<S2SV_ModStart> = & l2tp_eth_netdev_ops ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
157,<S2SV_ModStart> ; if ( quantum_info!= ( QuantumInfo * ) NULL ) { quantum_info = ( QuantumInfo * ) NULL ; quantum_type = ( QuantumType * ) NULL ; },0
158,"<S2SV_ModStart> errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,<S2SV_ModStart> ; if (! ( flags & EXT4_MB_HINT_TRY_GOAL ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; } else { flags |= EXT4_MB_HINT_NOFS ; },0
160,"<S2SV_ModStart> if ( verify_checks <S2SV_ModEnd> ( c, <S2SV_ModStart> preverify_ok, callback_ctx <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 1 ; <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
161,<S2SV_ModStart> ; int ret ; if (! capable ( CAP_SYS_ADMIN ) ||! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
162,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } <S2SV_ModEnd> if ( at91_aes_cbc",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS - s -> reduction_factor ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> >= 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get (",0
165,<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ts_status ) ; if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ;,0
166,"<S2SV_ModStart> ) ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { list_add_tail ( & asoc -> peer. transport_addr_list, & trans -> transports ) ; }",0
167,<S2SV_ModStart> return false ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> lsm_set_label_at ( int <S2SV_ModStart> lsm_label ) { int labelfd = - 1 ; int ret = 0 <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 )",0
169,<S2SV_ModStart> ) ) ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dx ) { if,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } if ( num >= totallen ) { g_error ( ""num <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range <S2SV_blank> (%d)"", num ) ; g_error ( ""num <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range <S2SV_blank> (%d)"", num, totallen ) ; return NULL ; }",0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> h_hash ) ; struct mb2_cache_entry * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; again : mb2_cache_entry_delete_block ( mb2_cache, ce -> e_block ) ; mb2_cache_entry_delete_block ( mb2_cache, ce -> e_block ) ;",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> = offset ; if (! wth -> frame_buffer ) return FALSE ; <S2SV_ModStart> = offset ; if ( pkt_len > COSINE_LINE_LENGTH ) return FALSE ; <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump ( wth -> fh, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, err, err_info ) <S2SV_ModEnd> ; } <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,<S2SV_ModStart> ( left > SSL3_RT_HEADER_LENGTH <S2SV_ModEnd> ) n =,0
177,"<S2SV_ModStart> ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
178,<S2SV_ModStart> - ENOMEM ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( ret ) { ret =,0
179,<S2SV_ModStart> int hstartcol ; jpc_fix_t * buf2 ; jpc_fix_t * buf ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { *,0
180,"<S2SV_ModStart> ) break ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
181,"<S2SV_ModStart> EOFOp 0x07 MemoryInfo * memory_info <S2SV_ModEnd> ; int opcode <S2SV_ModStart> ReadBlob ( image, 2, memory_info <S2SV_ModEnd> ) ; if <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 )",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; },0
183,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this interface\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc",0
184,"<S2SV_ModStart> ( len > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } <S2SV_ModStart> ( len > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; }",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( <S2SV_ModEnd> node -> nd_item <S2SV_ModStart> ci_parent ) ; } return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ; if ( vst -> nb_frames < 1 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> frames\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
188,<S2SV_ModStart> = 0 ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties < 0 ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } sh. sh_properties = CDF_TOLE4 ( shp -> sh_properties ) ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } sh. sh_properties = CDF_TOLE4 ( shp -> sh_properties ) ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; },0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> ifdef AUTOKEY filegen_register <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> ifdef DEBUG_TIMING filegen_register <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ntpd_time_stepped ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( ) ) ) ) ) ) ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) ; }",0
191,"<S2SV_ModStart> prev ) ; if ( mnt -> mnt_flags & MNT_NOATTACH ) { attach_shadowed ( mnt, parent, & n -> mnt_namespace ) ; touch_mnt_namespace ( n ) ; }",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; prev -> usersp = this_cpu_read ( old_rsp ) ; this_cpu_write ( old_rsp, next -> usersp ) ;",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fs",0
197,"<S2SV_ModStart>, int mtu, unsigned int flags, struct frag_hdr * frag_hdr <S2SV_ModStart> = SKB_GSO_UDP ; frag_hdr = * frag_hdr <S2SV_ModEnd> ; skb_shinfo (",0
198,"<S2SV_ModStart> res ) return res <S2SV_ModEnd> ; res = <S2SV_ModStart> ( res ) goto fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; mod_timer ( & hsr -> announce_timer, jiffies + msecs_to_jiffies ( 500 ) ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_MASTER ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; mod_timer ( & hsr -> announce_timer, jiffies + msecs_to_jiffies ( 500 ) ) ; if ( res ) goto fail ; mod_timer ( & h",0
199,"<S2SV_ModStart> ) ) { if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) {",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_CONTEXT * ctx <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> src -> alpha_buffer, src -> uv_stride, src -> x_stride, src -> y_stride, src -> uv_stride, src -> alpha_stride, src -> x_stride, src -> y_stride, src -> uv_stride <S2SV_ModEnd> ) ; int <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( & <S2SV_ModStart> pd -> dst <S2SV_ModEnd>, buffers [ <S2SV_ModStart> i ] ; setup_pred_plane ( & pd -> dst <S2SV_ModEnd>, buffers [",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> offset ) ) return 0 ; <S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & dlen ) ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > max_blocksize ) { args -> count = max_blocksize ; args -> count = max_blocksize ; } else { args -> count = max_blocksize ; }",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) { switch ( ctxt -> eip_len ) { case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining ( tvb, offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; <S2SV_ModEnd> proto_tree_add_string ( tree",0
205,<S2SV_ModStart> == READ ) { iocb -> ki_filp = NULL ; return 0 ; } else if ( iov_iter_rw ( iter ) == WRITE ) { iocb -> ki_filp = NULL ; return 0 ; },0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> if ( fscanf <S2SV_ModEnd> ( f, <S2SV_ModStart>, def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = scantokey [ parm ] ; }",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_pmc ( i,0
209,"<S2SV_ModStart> = len ; if ( len < 0 ) { len = 0 ; } else { len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; }",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; PyCompilerFlags cf <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; mod_ty mod <S2SV_ModStart> ; Py_ssize_t i ; str = PyMem_RawMalloc ( 3 ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; str = string_object_to_c_ast ( str, fstring_name, Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; Py_DECREF ( fstring_name ) ; mod = string_object_to_c_ast ( str, fstring_name, Py_eval_input,",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { if (! cJSON_strcasecmp ( c -> string, string ) ) return NULL",0
213,"<S2SV_ModStart> == 0 ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ;",0
214,"<S2SV_ModStart> len ) ; if ( ( nh. nh_type == NH_PLEN ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; } <S2SV_ModEnd> * len =",0
215,"<S2SV_ModStart> XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen, ( int ) name_loc -> flags ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> flags ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int )",0
216,"<S2SV_ModStart> - EINVAL ; if ( vlen < sizeof ( struct mmsghdr ) ) return - EINVAL ; <S2SV_ModStart> NULL ) ; datagrams = get_compat_timespec ( & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. maptype!= RT_STANDARD ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; netif_stop_queue ( ndev ) ; <S2SV_ModStart> ret = hns_nic_net_xmit_hw <S2SV_ModEnd> ( ndev, <S2SV_ModStart> ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; } else { netif_trans_update ( ndev ) ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart> ; # ifdef EXTSTORE_MURMUR3_HASH uint32_t tocrawl_size = 0 ; uint32_t tocrawl_size = 0 ; uint32_t tocrawl_max = 0 ; <S2SV_ModStart
221,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * user_config <S2SV_ModStart> } user_config = strdup ( mkpath ( ""/etc/perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; <S2SV_ModEnd> if ( found",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx ) { struct <S2SV_ModEnd> arm_pmu * armpmu <S2SV_ModStart> ) return 1 ; if ( event -> pmu <S2SV_ModEnd>!= leader_pmu || <S2SV_ModStart> state < PERF_EVENT_STATE_OFF || event -> attr. enable_on_exec ) return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event, ctx ) >= 0 ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event",0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> new_idmap_permitted ( struct <S2SV_ModStart> return true ; if ( ns_capable ( current_user_ns ( ), cap_setid ) ) return true ; if (",0
226,"<S2SV_ModStart> ++ ) { if ( j >= a -> num_values ) { MAPI_LOG ( MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG ( MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_ERROR, MAPI_LOG_",0
227,"<S2SV_ModStart> * hx ; u8 reset = 0 ; int ret, pos = 0 ; if (! fw ) return - EINVAL ; <S2SV_ModStart>, GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModStart> = 1 ; ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EINVAL ; } } else { ret = - EIO ; kfree ( hx",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( length ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( length ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( length ) ; ptr ++ ; ND_TCHECK_16BITS ( length ) ; ptr ++ ; ND_TCHECK_16BITS ( length ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( length ) ; ptr ++ ; ptr",0
229,"<S2SV_ModStart> princ ) ; if ( c1 == NULL ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), realm -> data, realm -> length ) ; goto fail_princ ; } if ( c2 == NULL ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), realm -> data, realm -> length ) ; goto fail_princ ; } if ( c2 == NULL ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), realm -> length ) ; goto fail_princ ; } if ( strncmp ( c2 -> data, c2 -> length ) == 0 ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), realm -> length ) ; log_badauth ( LOG_ERR, _ ( """,0
230,"<S2SV_ModStart> * bo ; if ( args -> shader_rec_count > UINT_MAX / sizeof ( struct vc4_shader_state ) ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( args -> shader_rec_count > UINT_MAX / sizeof ( struct vc4_shader_state ) ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ;",0
231,<S2SV_ModStart> endif # ifdef HAVE_LIBLZMA_H if ( zip -> zipx_lzma_valid ) { lzma_end ( & zip -> zipx_lzma_stream ) ; } # endif,0
232,<S2SV_ModStart> -> vm_file ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> * arg ) { case '\\t' : case '\\r' : break ; default : * b ++ = * arg ; break ; } arg ++ ; } if ( * arg == '\\n' ) { * b ++ = '\\n' ; break ; } <S2SV_ModEnd> arg ++ ;,0
235,"<S2SV_ModStart> ) ) ; if ( ep2 ) ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ep2 ) ) ) ;",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } gsm_store_add ( server -> priv -> client_store, G_OBJECT ( client ) ) ; g_object_unref ( client ) ; gsm_store_add ( server -> priv -> client_store, G_OBJECT ( client ) ) ; g_object_unref ( client ) ; g_object_unref ( client ) ;",0
237,<S2SV_ModStart> = CHECKSUM_NONE ; skb -> ip_summed = CHECKSUM_UNNECESSARY ;,0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEPORT : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_ACCEPTCONN : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_",0
240,<S2SV_ModStart> ( sk -> sk_shutdown <S2SV_ModEnd> ) { msg <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart> ; char buf [ DN_BUF_LEN <S2SV_ModEnd> ] ; unsigned <S2SV_ModStart> cleanup ; X509_NAME_oneline <S2SV_ModEnd> ( X509_get_subject_name ( <S2SV_ModStart> ), buf, & bufsize <S2SV_ModEnd>, XN_FLAG_SEP_COMMA_PLUS ) <S2SV_ModStart> cleanup ; } if ( bufsize!= sizeof ( buf ) ) { ret = ENOMEM ; goto cleanup ; } if ( bufsize!= sizeof ( buf ) ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto",0
244,<S2SV_ModStart> goto out_free ; if ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) mem -> flags &= ~ KVM_MEM_LOG_DIRTY_PAGES ;,0
245,<S2SV_ModStart> = SIGCHLD ; infop = NULL ;,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ;,0
247,"<S2SV_ModStart> ni ; register u_int <S2SV_ModEnd> amt ; register <S2SV_ModStart> * ni ; ND_TCHECK ( ndo -> ndo_vflag ) ; ND_TCHECK ( ndo -> ndo_vflag ) ; ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) ) * sizeof ( * ni )!= i ) ; for ( ni = rp -> rip6_nets",0
248,"<S2SV_ModStart> ; if ( ret!= - EEXIST ) goto error ; ret = set_process_keyring_to_cred ( new, reqkey_defl ) ; if ( ret!= 0 ) { if ( ret!= - EEXIST ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = set_group_keyring_to_cred ( new, reqkey_defl ) ; if ( ret!= - EEXIST ) goto error ; ret = set_group_keyring_to_cred ( new, reqkey_defl ) ; if ( ret!= - EEXIST ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = set_group_keyring_to_cred ( new, reqkey_defl ) ; if ( ret!= - E",0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,<S2SV_ModStart> bprm -> interp = iname_addr ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ;,0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModStart> iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iRight ] /= dTotalWeight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight <S2SV_ModEnd> ; } if,0
252,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
253,"<S2SV_ModStart> 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } <S2SV_ModEnd> Q_strncpyz ( filename",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> limit = 0,0
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if (! mobj ) return NULL ; <S2SV_ModStart> mobj ) ; if (! mobj_get_va ( mobj, 0 ) ) return NULL ; <S2SV_ModEnd> return mobj ;",0
256,<S2SV_ModStart> += incr ; <S2SV_ModEnd> delta -= incr,0
257,"<S2SV_ModStart> * for_ch ; asdl_seq * ifs ; <S2SV_ModStart> ; if ( NCH ( n ) == 4 ) { if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } else if ( NCH ( CHILD ( n, 0 ) ) == ( 3 + is_async ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET (",0
258,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, MACROBLOCKD * xd, const MODE_INFO * * mi, vpx_writer * w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const seg = & xd -> seg ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize,",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ;",0
262,"<S2SV_ModStart> goto err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; if ( n < 0 || n >= maxn ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return - 1 ; } <S2SV_ModEnd> switch ( actions <S2SV_ModStart> n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : return decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn ) ;",0
264,<S2SV_ModStart> ) ) ; if ( l < 0 ) { AZ ( 0 ) ; } else { AZ ( 0 ) ; },0
265,<S2SV_ModStart> out ; } if ( free >= table -> max ) { err = - ENOSPC ; goto out ; },0
266,<S2SV_ModStart> ) ) { return - 1 ; } <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } n =,0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0 <S2SV_ModEnd>, reg, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0 <S2SV_ModEnd>, reg, <S2SV_ModStart>, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ret < 0 ) return ret ; ret = <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ),0
270,<S2SV_ModStart> } } } if ( s -> str == NULL ) { mowgli_string_free ( s ) ; return ; },0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation <S2SV_blank> states <S2SV_blank> for <S2SV_blank> this <S2SV_blank> profile"" ) ; goto Error ; } }",0
272,"<S2SV_ModStart> { for ( i = 0 ; i < sec -> size ; i += 4 <S2SV_ModEnd> ) { ut32 <S2SV_ModStart> } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { free ( buf ) ; }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } else { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } else { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_MAX",0
274,<S2SV_ModStart> 1 ) { if ( i >= anal_size ) { ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] = 0.0 ; } else { ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] = 0.0 ; },0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) return 0 ;,0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { struct bfq_data <S2SV_ModEnd> * bfqd = <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_expire ( bfqd, bfqq, true, BFQQE_TOO_IDLE ) ) goto schedule_dispatch ;",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ;",0
279,<S2SV_ModStart> cb -> args [ 0 <S2SV_ModEnd> ] ; struct <S2SV_ModStart> walk = ( struct xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args,0
280,<S2SV_ModStart> conn ) ; if ( conn -> _read. data == NULL ) { h2o_socket_read_stop ( conn -> sock ) ; close_connection ( conn ) ; return ; } if ( conn -> _read. data == NULL ) { h2o_socket_read_stop ( conn -> sock ) ; close_connection ( conn ) ; return ; },0
281,"<S2SV_ModStart> -> data ; int nr_tx_info = netbk -> pending_tx_info? netbk -> pending_tx_info -> nr_tx_info : 0 ; <S2SV_ModStart> status ; if ( unlikely ( nr_tx_info == 0 ) ) { netbk -> pending_tx_info = NULL ; return 0 ; } <S2SV_ModStart> ( unlikely ( nr_tx_info == 0 ) ) { netbk -> pending_tx_info = NULL ; return 0 ; } for ( i = 0 ; i < nr_frags ; i ++ ) { int j, newerr ; pending_ring_idx_t index ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( unlikely ( newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; index = pending_index ( netbk -> pending_prod",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
284,"<S2SV_ModStart> = 0 ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memcpy ( incoming_cn_msg, hv_msg, sizeof ( * hv_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memcpy ( incoming_cn_msg, incoming_cn_msg, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free",0
285,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
286,"<S2SV_ModStart> TRUE ) ; if ( update_msg == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if (",0
287,"<S2SV_ModStart> + diffBlockLength || <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ; if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_nlink ) { if (! UDF_I ( dir ) -> i_,0
289,"<S2SV_ModStart> ) ) ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ;",0
290,"<S2SV_ModStart> ; err = ip6_xmit <S2SV_ModEnd> ( sk,",0
291,<S2SV_ModStart> ssize_t result ; if (! capable ( CAP_SYS_ADMIN ) ) return - EPERM,0
292,"<S2SV_ModStart> * fpath = NULL, * cgdir = NULL, * controller = NULL, * path1 = NULL, * path2 = NULL, * path3 = NULL, * path4 = NULL, * path6 = NULL, * path7 = NULL, * path8 = NULL, * path9 <S2SV_ModEnd> = NULL ; <S2SV_ModStart> if (! caller_may_access <S2SV_ModEnd> ( fc -> <S2SV_ModStart>, path1, path2 <S2SV_ModEnd>, O_RDWR ) <S2SV_ModStart> goto out ; if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", controller, cgroup, fc -> uid, fc -> gid ) ;",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; continue ; },0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> = MagickFalseType ; if ( number_pixels < 0 ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } if ( number_pixels > MagickFalseType ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } if ( number_pixels > MagickFalseType ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } <S2SV_ModEnd> max_packets = MagickFalseType <S2SV_ModStart> = MagickFalseType ; if ( number_pixels < 0 ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } if ( number_pixels < MagickFalseType ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } if ( number_pixels < MagickFalseType ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } if ( status == MagickFalseType ) { MagickError ( ""MemoryAllocationFailed"", ""MemoryAllocationFailed"" ) ; return NULL ; } if ( status == MagickFalseType",0
296,"<S2SV_ModStart> pktnum ; int64_t index_pts <S2SV_ModEnd> ; index_pts = <S2SV_ModStart> ) pktnum ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; }",0
297,<S2SV_ModStart> srp ) ; if ( unlikely ( srp -> origin!= srp -> origin ) ) { result = - EFAULT ; return result ; },0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""smtp_alert_vrrp"", & smtp_alert_vrrp_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_",0
299,"<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; priv_enc_mr_cfg = ( priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; <S2SV_ModStart> encoder_common_init ( ctx, priv_enc_mr_cfg <S2SV_ModEnd> ) ; }",0
300,"<S2SV_ModStart> 0 ) { char * tmpptr = key ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } else { * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + 2 ; continue ; } if ( iscsi_check_value ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; if ( IS_PSTATE_PROPOSER ( param ) ) { if ( iscsi_check_proposer_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } SET_PSTATE_RESPONSE_GOT ( param ) ; } else { if ( iscsi_check_acceptor_state ( param, value ) < 0 )",0
301,<S2SV_ModStart> ENOENT ) touch_file <S2SV_ModEnd> ( t ->,0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type",0
303,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( Py_object <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> Py_ssize_t i ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
304,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ( m && <S2SV_ModEnd> m -> msg_control <S2SV_ModStart> m -> msg_control -> flags & MSG_ZEROCOPY ) ) { copylen = vnet_hdr. hdr_len - ETH_HLEN ; if (! copylen ) copylen = GOODCOPY_LEN ; } else { copylen = vnet_hdr. hdr_len ; } <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart>, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart>, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart> ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ;",0
305,<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> packet_len ) { if ( ipv6_optlen ( exthdr ) < offset ) return offset ; offset += ipv6_optlen ( exthdr ) ; <S2SV_ModStart> offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; } return offset ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = 0 ; mvy [ vcnt ] = 0 ; <S2SV_ModStart> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvx [ vcnt ] = 0 ; mvy [ vcnt ] = 0 ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mvy [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ 0 ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_",0
308,<S2SV_ModStart> ; msg -> msg_namelen = 0 ; msg -> msg_namelen = 0 ;,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr ; union sctp_addr_param * addr_param ; sctp_addip_param_t * asconf_param ; __be16 err_code ; __u32 serial ; sctp_addip_chunk_t * asconf_chunk ; sctp_addip_chunk_t * asconf_chunk ; sctp_addip_chunk_t * asconf_chunk = ( sctp_addip_chunk_t * ) asconf -> skb -> data ; serial = ntohl ( hdr -> serial ) ; length = sizeof ( asconf_param -> p. length ) ; err_code = sctp_process_asconf_param ( asoc, asconf, addr_param, asconf_chunk ) ; if (! asconf_ack ) goto done ; asconf_chunk = sctp_make_asconf_ack ( asoc, serial, chunk_len * 4 ) ; if (! asconf_chunk ) goto done ; asconf_chunk = sctp_make_asconf_ack ( asoc, serial, chunk_len * 4 ) ; if (!",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # ifdef CONFIG_KVM_E500V2 if ( defined ( CONFIG_KVM_E500MC ) && defined ( CONFIG_KVM_E500V2 ) && defined ( CONFIG_KVM_E500MC ) && defined ( CONFIG_KVM_E500V2 ) && defined ( CONFIG_KVM_E500MC ),0
316,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> goto response_done ; } memcpy ( kvp_data -> data. key, key_name, sizeof ( kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; memcpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ), sizeof ( kvp_data -> data. value ) ) ;",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ;,0
319,<S2SV_ModStart> ; } } else { img -> color_space = OPJ_CLRSPC_SRGB ; },0
320,"<S2SV_ModStart> = NULL ; size_t ctrls_size = 0 ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) <S2SV_ModStart> case _IOC_NONE : case _IOC_READ : case _IOC_WRITE : case _IOC_READ : case _IOC_READ : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; if ( NULL == mbuf ) goto out ; <S2SV_ModStart> case _IOC_READ : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf",0
321,"<S2SV_ModStart> ; } if ( server. masterhost && server. replstate!= REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; } if ( server. masterhost && server. replstate!= REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand && server. replstate!= REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand ) { addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> MASTER <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-stale-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; } if ( server. masterhost && server. replstate!= REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= slaveofCommand && server. replstate!= REDIS_REPL_CONNECTED && cmd -> proc!= infoCommand && cmd -> proc!= infoCommand && cmd -> proc",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; if ( ret > 0 ) { ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; }",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { GdkScreen * screen ; char * uri ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; }",0
324,"<S2SV_ModStart> -> lsr_event ) { if (! edge_port -> open ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u, <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } else { edge_port -> close_pending = false ; dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func__ ) ; } }",0
325,"<S2SV_ModStart> cifs_find_smb_ses ( struct TCP_Server_Info <S2SV_ModEnd> * server, <S2SV_ModStart> cifs_tcp_ses_lock ) ; <S2SV_ModEnd> ses = list_entry <S2SV_ModStart> smb_ses_list ) ; <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ( ses -> userName, username, MAX_USERNAME_SIZE ) ) { <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP8E_HIGHBITDEPTH if ( ( ( cfg -> g_w * cfg -> g_h * cfg -> g_w ) <S2SV_ModEnd> || ( cfg <S2SV_ModStart> VPX_RC_ONE_PASS ) ) && ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_HIGHBITDEPTH ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # if CONFIG_VP8E_HIGHBITDEPTH if ( ( cfg -> g_w * cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h * cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # endif <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= VPX_RC_ONE_PASS ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; # endif",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = input ; ptr2 = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } free (",0
328,"<S2SV_ModStart> ; if ( ( vm_flags & VM_NORESERVE ) == VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> return ret ;",0
329,<S2SV_ModStart> new ) { struct key * keyring ; new -> thread_keyring = NULL ;,0
330,<S2SV_ModStart> = 0 ; size_t scanned = 0 ; size_t readnbd = 0 ; if ( readnbd > ( size_t ) 0U ) { readnbd = ( size_t ) 0U ; },0
331,"<S2SV_ModStart> orig ) ; if ( orig == NULL ) { mrb_set_args ( mrb, ""o"", & copy ) ; return NULL ; } <S2SV_ModStart> mrb ) ; if ( copy == NULL ) { mrb_set_args ( mrb, ""o"", & orig ) ; return NULL ; } <S2SV_ModStart> mrb ) ; if ( copy == NULL ) { mrb_set_args ( mrb, ""o"", & orig ) ; return NULL ; }",0
332,"<S2SV_ModStart>,. match_data. <S2SV_ModEnd> cmp = user_match",0
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> cpi -> mb ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; }",0
337,"<S2SV_ModStart> "".txt"" ) ; if ( strlen ( filename ) > MAX_QPATH ) { Com_Printf ( ""ERROR: <S2SV_blank> filename <S2SV_blank> too <S2SV_blank> long.\\n"" ) ; return ; }",0
338,<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table =,0
339,<S2SV_ModStart> - EINVAL ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; return - EPERM ; } <S2SV_ModEnd> info -> si_signo,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_dx_min = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> dxy ), ( OPJ_INT32 ) p_",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; p = ( unsigned char * ) malloc ( 2 ) ; if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } p = ( unsigned char * ) malloc ( 4 ) ; if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! fname ) { free ( name ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) { x = ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |=",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; <S2SV_ModEnd> HashTable * class_hash <S2SV_ModStart> } } } if ( var_hash!= NULL ) { php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> } if ( var_hash!= NULL ) { php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; } if ( var_hash ) { php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ; } if ( var_hash!= NULL ) { php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ;",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( ptr -> size > GF_MAX_IMG_SIZE ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ptr -> size > GF_MAX_IMG_SIZE ) return GF_,0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> = NULL ; uschar * cmdline_syslog_name = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length <S2SV_ModStart> = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length <S2SV_ModStart> = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length = NULL ; uschar * cmdline_syslog_line_length,0
347,"<S2SV_ModStart> ; s -> filesize = simple_strtol ( p, NULL, 10 ) <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) s -> seekable = simple_strtol ( slash + 1, NULL, 10 ) ; if ( s -> filesize == - 1 ) s -> seekable = 0 ; if ( s -> seekable == - 1 ) s -> seekable = 1 ; if ( s -> filesize == 2147483647 ) s -> filesize = 2147483647 ; else s -> seekable = 1 ;",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> int offset, upb ; size_t i, j ; size_t maxw, maxh ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; offset = ( size_t ) img -> comps [ 0 ]. prec ; upb = ( size_t ) img -> comps [ 0 ]. prec ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxw ; ++ i ) { sycc",0
349,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t <S2SV_ModEnd> mode ) { <S2SV_ModStart> state == mode || ( state -> state & FMODE_READ <S2SV_ModEnd> )!= ( <S2SV_ModStart> state & FMODE_WRITE <S2SV_ModEnd> ) ) { <S2SV_ModStart> FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ;",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
353,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char lbase [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char strbase [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char ltest [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char strtest [ <S2SV_ModStart> ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest, ""%255[^\\r\\n]"", strtest ) ; assert ( nbase!= 255 && ntest!= 255 ) ; fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( lbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase,",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data ; <S2SV_ModStart> - ENODEV ; data = cdc_ncm_data_select_altsetting ( intf, CDC_NCM_COMM_ALTSETTING_NCM ) ; if (! data ) return - ENODEV ; ret = <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart> intf, CDC_NCM_DATA_ALTSETTING_NCM, data <S2SV_ModEnd> ) ; usbnet_link_change",0
355,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
356,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
357,"<S2SV_ModStart> - EINVAL ; if ( e -> target_offset!= e -> next_offset ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e, e -> target_offset ) ; return - EINVAL ; }",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } ND_TCHECK2 ( ndo, p, caplen - 1 ) ;",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) { <S2SV_ModStart> timer ) ; },0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ) <S2SV_ModEnd> >> PAGE_CACHE_SHIFT ; <S2SV_ModStart> ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } else { i_size_write ( inode, offset + to ) ; } <S2SV_ModEnd> brelse ( dibh",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass <S2SV_ModEnd> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; }",0
363,"<S2SV_ModStart> image_noffset ) { <S2SV_ModEnd> if (! <S2SV_ModStart> name = fit_get_name <S2SV_ModEnd> ( fit,",0
364,"<S2SV_ModStart> ; } } xfs_trans_log_buf ( mp, bp, XFS_LOG_SYNC, ""xfs_attr3_leaf_list_int: <S2SV_blank> leaf <S2SV_blank> block <S2SV_blank> %d\\n"", XFS_FSB_TO_BB ( mp -> m_sb. sb_dblocks, mp -> m_sb. sb_dblocks ), XFS_LOG_DEBUG, ""xfs_attr3_leaf_list_int: <S2SV_blank> leaf <S2SV_blank> block <S2SV_blank> %d\\n"", mp -> m_sb. sb_dblocks, mp -> m_sb. sb_dblocks, mp -> m_sb. sb_dblocks ) ) ; xfs_trans_log_buf ( mp, bp, XFS_FSB_TO_BB ( mp -> m_sb. sb_dblocks, mp -> m_sb. sb_dblocks ), XFS_LOG_DEBUG, ""xfs_attr3_leaf_list_int: <S2SV_blank> leaf <S2SV_blank> block <S2SV_blank> %d\\n"", mp -> m_sb. sb_dblocks, mp -> m_sb. sb_dblocks, mp -> m_sb. sb_",0
365,<S2SV_ModStart> -> rx_kfifo_lock ) ; state -> rx_kfifo. size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo. flags = 0 ; <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = &,0
366,"<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { return - ENOMEM ; } <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv == NULL ) { pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; return - ENOMEM ; } <S2SV_ModStart> rw_tlv_length ) ; if ( service_name_tlv == NULL ) { pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; return - ENOMEM ; } if ( rw_tlv == NULL ) { pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; return - ENOMEM ; }",0
367,"<S2SV_ModStart> ssh * ssh <S2SV_ModEnd> = active_state ; <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; }",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VP",0
369,"<S2SV_ModStart> unsigned int channo ; if (! jas_stream_check ( in, sizeof ( jp2_cdefchan_t ) ) ) { return - 1 ; }",0
370,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
371,<S2SV_ModStart> ; icmp_param. icmp_type = type ; icmp_param. icmp_code = code ; icmp_param.,0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; default : if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ;",0
373,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { if ( private ) crypto_free_skcipher ( private ) ;,0
375,<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; bprm -> cred -> egid = inode -> i_gid ; } else { bprm -> per_clear |= PER_CLEAR_ON_SETID ; },0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( log ) ) * log_num = nlogs ;,0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { * pt ++ = * s ; },0
378,<S2SV_ModStart> 1 ) ) { if ( off + bit >= bt -> bits_per_word ) break ;,0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if ( A < 0 || A >= skb -> len ) return 0 ; if (,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ) ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> flags=0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> flags=0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> flags=0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> flags=0x%x"", EXTRACT_16BITS ( bp ) ) ) ;",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> or <S2SV_blank> tile <S2SV_blank> rowsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", ( tsize_t ) ( tl * tile_rowsize ) ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> }, { ""umask"", required_argument, NULL, 'u' }, { ""umask"", required_argument, NULL, 'g' }, { ""umask"", required_argument, NULL, 'l' }, { ""umask"", required_argument, NULL, 'u' }, { ""umask"", required_argument, NULL, 'g' }, { ""umask"", required_argument, NULL, 'G' }, { ""umask"", required_argument, NULL, 'S' }, { ""umask"", required_argument, NULL, 'G' }, { ""umask"", required_argument, NULL, 'u' }, # ifdef _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-respawn"", no_argument, NULL, 'n' }, { ""dont-fork"", no_argument, NULL, 'I' }, { ""dont-respawn"", no_argument, NULL, 'n' }, { ""dont-fork",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - EINVAL <S2SV_ModEnd> ; } switch <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> cluster -> cl_has_local <S2SV_ModEnd> ) return - <S2SV_ModStart> - EBUSY ; node -> nd_local = tmp ; if ( node -> nd_num == O2NM_INVALID_NODE_NUM ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } else { cluster -> cl_has_local = tmp ; } <S2SV_ModEnd> node -> nd_local <S2SV_ModStart> -> cl_has_local ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } else { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID,0
388,"<S2SV_ModStart> if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * )",0
389,<S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; if ( len < 4 ) return - EINVAL ; <S2SV_ModStart> ; if ( len < 4 ) return - EINVAL ; if ( len < 4 ) return - EIN,0
390,<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> goto out_unlock ; sctp_transport_put ( transport ) ; <S2SV_ModEnd> } <S2SV_null>,0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,<S2SV_ModStart> E_NOTHANDLED ; fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> E_NOTHANDLED ; } TEMP_FAILURE_RETRY (,0
393,<S2SV_ModStart> goto trunc ; ND_TCHECK_32BITS ( lshp -> ls_length ),0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,<S2SV_ModStart> -> ds_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> cf_present <S2SV_ModStart> -> cf_present && <S2SV_ModEnd> pbody -> cf_present,0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } ret += obuf -> len ; obuf -> len -= obuf -> len ; },0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret ; mm_segment_t <S2SV_ModEnd> old_fs ; if <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt )",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC",0
400,"<S2SV_ModStart> stf_status v2N_NO_PROPOSAL_CHOSESE ; } if ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), "" <S2SV_blank> with <S2SV_blank> policy="" : """", ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; return STF_FAIL + v2N_NO_PROPOSAL_CHOSESETTING ; } if ( c -> spd. that. client == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( &",0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_BROADCAST <S2SV_ModEnd> ) return ARRAY_SIZE,0
404,<S2SV_ModStart> 1 ) return <S2SV_ModEnd> ( image ->,0
405,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, dev_path ) ; return ; } <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd == - 1 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, dev_path ) ; return ; }",0
406,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - ENODEV ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! alt ) return - ENODEV ; <S2SV_ModStart> -> cur_altsetting ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (! alt -> desc. bNumEndpoints ) return - ENODEV ; if (,0
407,"<S2SV_ModStart> intf ) ; struct device * dev ; <S2SV_ModStart> -> name ; dev = & d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber, d -> props -> bNumEndpoints ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bNumEndpoints=%d\\n"", __func__, d -> props -> bNumEndpoints, d -> props -> bNumEndpoints ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + pirlvl -> prcheightexpn + picomp -> numrlvls - rlvlno - 1 > JAS_UINTMAX ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> -> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t",0
409,<S2SV_ModStart> target_enc ) { if ( cpat_end == NULL ) cpat = ( UChar * ) NULL ; else cpat_end = ( UChar * ) NULL ;,0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> ) { size_t <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> ; ssize_t x ; register Quantum * q ; register Quantum index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case 1 : { q = QueueAuthenticPixels <S2SV_ModEnd> ( image, <S2SV_ModStart> image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; }",0
411,"<S2SV_ModStart>, register const <S2SV_ModEnd> u_char * tptr <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> IPv4 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> IPv6 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> IPv4 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ), network_addr_type ) ) ; break ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> IPv4 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_",0
412,"<S2SV_ModStart> desc_struct cs, ss ; int usermode ; u16 cs_sel = 0, ss_sel = 0 ; if ( ctxt -> mode == X86EMUL_MODE_REAL || ctxt -> mode == X86EMUL_MODE_VM86 ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } else { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } <S2SV_ModStart> -> _eip = reg_read ( ctxt, VCPU_REGS_RDX ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0",0
413,"<S2SV_ModStart> dev ) ; if ( pdev -> driver_override ) { sprintf ( buf, ""%s\\n"", pdev -> driver_override ) ; return strlen ( buf ) ; } else { return sprintf ( buf, ""%s\\n"", pdev -> name ) ; }",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; if ( in == NULL ) { BIO_set_mem_eof_return ( tmpout, 0 ) ; } else { tmpout = BIO_new ( BIO_s_null ( ) ) ; } if ( tmpout == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; }",0
415,"<S2SV_ModStart> retval, response <S2SV_ModEnd>, NULL )",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart> ) ; } if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IRUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IRUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IRUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IRUSR ) { if ( st. st_mode & S_IWUSR ) { if ( st. st_mode & S_IRUSR ) { if ( st. st_mode & S_IWUSR ) {,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; break ; case AF_UNIX : strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; break ; case AF_UNIX : strncpy ( addr_text, ( ( struct sockaddr_un * ) sock",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> 0xffff ; err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0",0
421,"<S2SV_ModStart> avoid_reserve ) { struct page_cache * page_cache = page_cache ; struct page * page ; struct hstate * h = page_cache_vma ( vma ) ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg = vma_needs_reservation ( h, vma, addr ) ; if (! hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics\\n"" <S2SV_ModEnd>, filegen_file,",0
423,"<S2SV_ModStart> stamp_path ) { if ( t -> last_trigger. realtime == 0 ) { log_unit_warning ( UNIT ( t ), ""Timer <S2SV_blank> startup <S2SV_blank> job <S2SV_blank> failed"" ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; return ; }",0
424,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> [ 15 ] ; tran_high_high ( & s0, & s1, & s2, & s3, & s4, & s5, & s6, & s7, & s8, s9, s10, s11, s12, s13, s14, s15, input [ 10 ], input [ 11 ], input [ 12 ], input [ 8 ], input [ 9 ], input [ 10 ], input [ 9 ], input [ 8 ], input [ 10 ], input [ 11 ], input [ 12 ], input [ 13 ], input [ 7 ], input [ 8 ], input [ 9 ], input [ 10 ], input [",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif return flags & mask ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,<S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> p = ( <S2SV_ModStart> tot_len ) ; if ( newtype == IPV6_DSTOPTS && opt -> dst1opt ) opt2 -> dst1opt = opt -> dst1opt ; else opt2 -> dst1opt = opt -> dst0opt ;,0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
431,<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= MNT_READONLY ; mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ;,0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,<S2SV_ModStart> * rsize >= 104 && rdesc [ 103 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 107 ],0
434,"<S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len - 8 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len - 8 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - 8 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
435,"<S2SV_ModStart> serio ) ; if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; }",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } }",0
437,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
438,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * const cm, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * const tile_info <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ tile_info <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> ] -> mbmi. bw_type ] ; const int hbs = num_8x8_blocks_high_lookup [ tile_info -> mbmi. bh_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, bs, hbs, mi_row, mi_col ) ; } else if ( bw",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; s = <S2SV_ModStart> ; if ( d2i_DSA_SIG <S2SV_ModEnd> ( & s <S2SV_ModStart>, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( s == NULL ) { ret = - 1 ; } else { ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; }",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdDPExtractData <S2SV_ModEnd> ( out,",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart> ai_flags, & <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> -> ai_socktype, <S2SV_ModEnd> & p -> <S2SV_ModStart> ai_protocol, & <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p -> <S2SV_ModEnd> ai_addrlen, & <S2SV_ModStart>, & p -> <S2SV_ModEnd> ai_addrlen, & <S2SV_ModStart>, & p -> <S2SV_ModEnd> ai_addrlen, & <S2SV_ModStart>, & canonnamelen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p -> <S2SV_ModEnd> ai_addrlen, & <S2SV_ModStart>, & canonnamelen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & canonnamelen <S2SV_ModEnd>, NULL ) <S2SV_ModStart>, handle, <S2SV_ModEnd> & p -> <S2SV_ModStart>, & p -> <S2SV_ModEnd> ai_addrlen, &",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> ] ) ; if ( rctx -> image_height > 8 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> maximum <S2SV_blank> image <S2SV_blank> height"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret ; if ( indx + size > PEGASUS_MAX_REGS ) return - EINVAL ; ret = <S2SV_ModEnd> usb_control_msg ( pegasus <S2SV_ModStart>, indx, data <S2SV_ModEnd>, size, <S2SV_ModStart> 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
449,"<S2SV_ModStart> mod_ty ) PyArena_Malloc <S2SV_ModEnd> ( arena, <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
450,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> 4 ; # else int row, col, active_end ; # if USE_PARTIAL_COPY int row, col, active_map ; # endif # if CONFIG_VP9_HIGHBITDEPTH int64_t ts_start, ts_end ; # endif # if CONFIG_VP9_HIGHBITDEPTH int64_t flags ; # endif # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( col = 0 ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } active_map += mb_cols ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col )",0
452,<S2SV_ModStart> cdev ) ; kfree ( cc ) ;,0
453,"<S2SV_ModStart> return code ; if ( request -> nonce == NULL ) { * status = ""INVALID_NONCE"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_NONCE_UNKNOWN ; }",0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
455,<S2SV_ModStart> || s -> <S2SV_ModEnd> cur_pic. field_picture,0
456,"<S2SV_ModStart> off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; <S2SV_ModStart> 0 ) ; hdr = & rm -> m_inc. i_hdr ; if ( hdr_off || sg || off ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return sizeof ( struct rds_header ) + rds_cong_map_bytes ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & hdr -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & rm -> m_inc ) ; } else { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & hdr -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_send_drop_acked ( conn, NULL ) ; rds_inc_put ( & rm -> m_inc ) ; }",0
457,<S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; ext_block =,0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( * mh, hlen + 8 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> dev ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags |= IFF_TX_SKB_SHARING,0
461,"<S2SV_ModStart> hmi_data ; uint16_t hmi_bpm = 0 ; uint32_t hmi_track_cnt = 0 ; uint32_t hmi_track_offset = NULL ; uint8_t * hmi_track_end = NULL ; uint8_t * hmi_running_event = NULL ; uint8_t * note = NULL ; uint32_t length ; uint8_t channel ; uint32_t smallest_delta ; uint32_t subtract_delta ; uint32_t samples_per_delta_f ; <S2SV_ModStart> note ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi",0
462,<S2SV_ModStart> id ; release_sock ( sk ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_data,0
464,"<S2SV_ModStart> ; } if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharpness_level, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) <S2SV_ModEnd> ; } <S2SV_null>",0
467,<S2SV_ModStart> BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; },0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; if ( ( * o_row_idx == NULL ) || ( * o_column_idx == NULL ) || ( * o_values == NULL ) || ( l_row_idx_id == NULL ) ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory!\\n"" ) ; return ; }",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( data, 0, data_sz ) ;",0
474,"<S2SV_ModStart> ; if ( value [ strlen ( value ) - 1 ]!= ',' ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
476,"<S2SV_ModStart> ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
478,"<S2SV_ModStart> ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; }",0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem ) == IS_DOUBLE ) { affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; } else { affine [ i ] = Z_LVAL_PP ( zval_affine_elem ) ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem ) == IS_DOUBLE ) { affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; } else { affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; } break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } }",0
480,<S2SV_ModStart> self ) { if ( self -> dict ) { Py_CLEAR ( self -> dict ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
481,<S2SV_ModStart> SQL_DROP ) ; SQLFree <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; SQLFree <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; SQLFree <S2SV_ModEnd> ( szSepLine ),0
482,"<S2SV_ModStart> EFAULT ; r = copy_to_user ( data, ( void __user * ) addr + offset, len ) ; if ( r ) return r ;",0
483,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> VERSION ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" ) ;",0
484,<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & cpuctx -> ctx. mutex ) ;,0
486,"<S2SV_ModStart>, struct iovec * iov, unsigned long nr_segs <S2SV_ModStart> = 1 ; if ( * nr_segs >= nr_segs ) return - EINVAL ;",0
487,<S2SV_ModStart> ext4_group_t flex_group ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> sbi -> s_log_groups_per_flex ; if ( sbi -> s_es -> s_reserved_gdt_blocks < EXT4_DESC_PER_BLOCK_BITS ( sb ) ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } groups_per_flex = le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + EXT4_DESC_PER_BLOCK_BITS ( sb ) ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } flex_group_count = ( sbi -> s_groups_count + groups_per_flex - 1 ) / groups_per_flex ; size = ( sbi -> s_groups_count + groups_per_flex - 1 ) * sizeof ( struct flex_groups ) ) / groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; },0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length <S2SV_ModEnd> ) ) return,0
489,"<S2SV_ModStart> count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; }",0
490,"<S2SV_ModStart> first ) { if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; }",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src1 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ; } for ( ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ; * ( long * ) ( dst + i ) = ( ( a ^ b ^ pb_80 ) & pb_80 ) ; } for ( ;,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; } if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
493,<S2SV_ModStart>! no_port_forwarding_flag && <S2SV_ModEnd>! options.,0
494,<S2SV_ModStart> (! bitstream_read_bit <S2SV_ModEnd> ( bc ),0
495,<S2SV_ModStart> return err ; } if ( m -> msg_name ) { m -> msg_name = address ; m -> msg_namelen = 0 ; },0
496,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank>",0
497,<S2SV_ModStart> int hstartcol ; register jas_int64_t <S2SV_ModEnd> m ; if <S2SV_ModStart> 2 ) { jas_int64_t <S2SV_ModEnd> hstartcol = ( <S2SV_ModStart> ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a",0
501,"<S2SV_ModStart> ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; <S2SV_ModStart> i ] ) ; if ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } <S2SV_ModEnd> hashbin -> hb_current <S2SV_ModStart> ~ HB_MAGIC ; <S2SV_ModEnd> hashbin -> hb_type <S2SV_ModStart> & HB_LOCK ) { spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModEnd> hashbin_lock_depth -- ;",0
502,<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) { mnt -> mnt. mnt_flags |= MNT_READONLY ; },0
503,<S2SV_ModStart> ; int copied <S2SV_ModEnd> ; sockaddr_ll * <S2SV_ModStart> out_free ; } <S2SV_ModEnd> sll = msg,0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> ; if ( serial -> num_ports < 2 || serial -> port [ 0 ] -> bulk_out_endpointAddress == 0 || serial -> port [ 1 ] -> bulk_out_endpointAddress == 0,0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader ds64hdr, datahdr, fmthdr ; RiffChunkHeader riffhdr ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; int64_t data_bytes, total_riff_bytes ; int64_t num_channels = WavpackGetNumChannels ( wpc ) ; int64_t num_samples = - 1 ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes",0
507,"<S2SV_ModStart> msg ) ; if ( msg_sys -> msg_name ) { memcpy ( & addr, msg_compat -> msg_name, sizeof ( addr ) ) ; msg_sys -> msg_name = NULL ; } else { memcpy ( & addr, msg_compat -> msg_name, sizeof ( addr ) ) ; msg_sys -> msg_name = NULL ; } <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg_nosec ) ( sock, msg_sys, total_len, msg_compat, uaddr, uaddr_len ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT",0
508,<S2SV_ModStart> ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = ip2_meta_inode ( ip ) ; struct gfs2_meta_inode * ip2 = ip2_to_gfs2_inode ( ip ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = ip2_inode ( ip2 ) ; struct gfs2_meta_inode * ip2 = ip2_to_gfs2_inode ( ip ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ; struct gfs2_meta_inode * gfs2_inode = GFS2_I ( inode ) ;,0
509,"<S2SV_ModStart> codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( g_h ) ; SHOW ( g_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_target_bitrate ) ; SHOW ( rc_undershoot_pct ) ; SHOW ( rc_overshoot_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW ( rc_2pass_v",0
510,<S2SV_ModStart> ; PROFILER_ENTER ( <S2SV_ModEnd> context -> priv <S2SV_ModStart> context -> priv -> <S2SV_ModEnd> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> context -> priv -> <S2SV_ModEnd> prof_nsc_decode ) ; <S2SV_ModStart> context -> priv -> <S2SV_ModEnd> prof_nsc_decode ) ;,0
511,"<S2SV_ModStart> ) ; } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; } else { if ( copyNs == origNs ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; } else { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; } else { if ( copyNs == origNs ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", copyNs -> href, attr -> name ) ; } else { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error",0
512,"<S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel",0
513,<S2SV_ModStart> fv -> b. <S2SV_ModEnd> sf -> fv <S2SV_ModStart> fv -> b ) <S2SV_ModEnd> ; } else,0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> timr ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when > timespec_to_ns ( new_setting -> it_value ) ) { err = - EINVAL ; goto out ; } <S2SV_ModStart> n ) ; when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) { err = - EINVAL ; goto out ; },0
516,<S2SV_ModStart> (! js_regexec <S2SV_ModEnd> ( re ->,0
517,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> ( dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_",0
518,"<S2SV_ModStart> * multipart_media ; <S2SV_ModEnd> struct evbuffer * <S2SV_ModStart> = NULL ; size_t content_length = 0, nranges = 0 ; int code = 500, fd = - 1, i, nranges, ret ; char content_range [ 64 ] ; char content_range [ 64 ] ; const char * errstr = NULL ; if ( st -> st_size > UINT_MAX / sizeof ( content_range ) ) { errstr = ""bytes <S2SV_blank> */%lld"" ; goto abort ; } if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort",0
519,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ88",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
521,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) ) ),0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,<S2SV_ModStart> int flags ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
525,"<S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; } else { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; }",0
526,"<S2SV_ModStart> ( kern_path ( dev_name <S2SV_ModEnd>, LOOKUP_FOLLOW, <S2SV_ModStart> path ) ) { error = - ENOENT ; goto out ; } rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; if ( path. dentry -> d_inode!= dir -> dentry -> d_inode ) { error = - ENOENT ; goto out ; }",0
527,<S2SV_ModStart> ; if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > buf_size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_,0
528,"<S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len <S2SV_ModEnd> ) ; }",0
529,<S2SV_ModStart> ; if ( peerkey -> type == EVP_PKEY_TYPE_RSA ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) {,0
530,"<S2SV_ModStart> ) ; strcpy ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
531,"<S2SV_ModStart>, BLOCK_SIZE subsize, int partition_type <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; int bsl = b_width_log2 ( bsize ), hbs = ( 1 << bsl ) / 4 ; <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> cm -> mi_cols ) { *",0
532,"<S2SV_ModStart> name ) ; if (! name ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
533,"<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int block_height = 0 ; int block_x, block_y ; int block_width = s -> avctx -> width ; int block_height = s -> avctx -> height ; int block_height = s -> avctx -> height ; int block_width = s -> avctx -> width ; int block_height = s -> avctx -> height ; int block_height = s -> avctx -> height ; while ( stream_ptr < chunk_size ) { if ( s -> buf [ stream_ptr ]!= 0xe1 ) av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; chunk_size = s -> size ; if ( chunk_size!= s -> size ) av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" )",0
534,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ;",0
535,<S2SV_ModStart> * ptype ; __be16 type ; if ( skb_is_nonlinear ( skb ) ) goto out_unlock ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; } else { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CHECKSUM_simple_validate ( skb ) ) goto out_unlock ; } else { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! N,0
536,<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (,1
537,"<S2SV_ModStart> rval == TSS2_SYS_RC_SUCCESS && <S2SV_ModEnd> session -> bind <S2SV_ModStart> bind == TPM_RH_NULL && <S2SV_ModEnd> session -> bind <S2SV_ModStart> bind == TPM_RH_NULL && <S2SV_ModEnd> session -> bind <S2SV_ModStart> bind == TPM_RH_NULL && <S2SV_ModEnd> session -> bind <S2SV_ModStart> bind == TPM_RH_NULL && <S2SV_ModEnd> session -> bind <S2SV_ModStart> bind == TPM_RH_NULL && <S2SV_ModEnd> session -> bind <S2SV_ModStart> bind == TPM_RH_NULL ) { return TSS2_SYS_RC_BAD_VALUE ; } rval = TSS2_Sys_StartAuthSession ( sapi_context, session -> tpmKey, session -> bind, 0, & ( session -> nonceOlder ), & ( session -> nonceNewer ), 0 ) ; if ( rval == TSS2_SYS_RC_BAD_VALUE ) { return TSS2_SYS_RC_BAD_VALUE ; } <S2SV_ModEnd> return TSS2_SYS_RC_BAD_VALUE ;",0
538,"<S2SV_ModStart> ; ret = key_permission <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ;,0
540,"<S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> ; dst_reg -> var_off = tnum_add ( dst_reg -> var_off, smin_val ) ; dst_reg -> var_off = tnum_add ( dst_reg -> var_off, smax_val ) ; if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case B",0
541,"<S2SV_ModStart> ; if ( newInode == NULL ) { cFYI ( 1, ""new <S2SV_blank> inode <S2SV_blank> is <S2SV_blank> null"" ) ; goto lookup_out ; }",0
542,<S2SV_ModStart> ; if ( info. flags & VFIO_DEVICE_FLAGS_PCI ) info. flags |= VFIO_DEVICE_FLAGS_PCI ; if ( vdev -> num_regions > VFIO_PCI_NUM_REGIONS ) info. flags |= VFIO_DEVICE_FLAGS_PCI ;,0
543,"<S2SV_ModStart> ) ; if (! ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,<S2SV_ModStart> = 1 ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; else s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;,0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; }",0
546,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> += 4 ; if ( base64val ( digit1 ) > 0x7f ) { return - 1 ; } <S2SV_ModStart> '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit4 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit3 ),0
547,<S2SV_ModStart> gc ) ; if ( gpio_dev -> pctrl ) { pinctrl_unregister <S2SV_ModEnd> ( gpio_dev ->,0
548,"<S2SV_ModStart>, len, total_copied <S2SV_ModEnd> ; size_t copied <S2SV_ModStart> ) { copied = min_t ( size_t, total_copied, ( size_t ) nr_pages ) ; if ( copied < 0 ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> total_written += copied",0
549,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx <S2SV_ModEnd> ) ; svc_log_reset <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left < 4 ) { return FALSE ; } <S2SV_ModStart> } else { if ( left < 2 ) { return FALSE ; } <S2SV_ModStart> } else { if ( left < 2 ) { return FALSE ; } <S2SV_ModStart> } else { * out ++ = value ; left -- ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
552,"<S2SV_ModStart> = new_cols ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; screen -> sb_buffer = realloc_buffer ( screen, screen -> sb_buffer, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 0 ] ) screen -> buffers [ 0 ] = realloc_buffer ( screen, screen -> buffers [ 0 ], new_rows, new_cols ) ; screen -> buffers [ 1 ] = realloc_buffer ( screen, screen -> buffers [ 1 ], new_rows, new_cols ) ; if ( screen -> buffers [ 1 ] ) screen",0
553,<S2SV_ModStart> ) { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> * buf ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; return - 1 ; }",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
556,"<S2SV_ModStart> ; if ( strchr <S2SV_ModEnd> ( pred_txt, <S2SV_ModStart>, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( pred_txt && istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; } <S2SV_ModEnd> return ExprResolveModMask (",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_drop_aead ( &,0
558,<S2SV_ModStart> ; if ( ( w1 > ptr -> width ) || ( w1 > ptr -> height ) || ( h1 > ptr -> height ) ) { if ( h1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> height ) { if ( h1 > ptr -> width ) { if ( h1 > ptr -> height ) { if ( w1 > ptr -> width ) { if ( w1 > ptr -> width ) { if ( w1 > ptr -> width ) { if ( h1 > ptr -> height ) { if (,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ) ) ; if ( optlen < NDISC_OPTLEN_MIN ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> option <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; int len = nla_len ( rp ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) || len > xfrm_replay_state_esn_len ( replay_esn ) || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; <S2SV_ModStart> )!= xfrm_replay_state_esn_len ( up ) <S2SV_ModEnd> ) return -,0
563,"<S2SV_ModStart> int ret = security_perf_cpu_time_max_percent_handler ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent > 100 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 0 ) ; } else { update_perf_sample_allowed_ns ( ) ; }",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,"<S2SV_ModStart> l_step_l ; } if ( l_step_p > l_max_prec ) { opj_error ( ""opj_pi_create_decode: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> steps <S2SV_blank> for <S2SV_blank> tile <S2SV_blank> %d"", p_tile_no ) ; return 00 ; } if ( l_step_c > l_max_prec ) { opj_error ( ""opj_pi_create_decode: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> steps <S2SV_blank> for <S2SV_blank> tile <S2SV_blank> %d"", p_tile_no ) ; return 00 ; }",0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { u32 prev_legacy, cur_legacy ; if ( ps -> flags & KVM_PIT_FLAGS_HPET_LEGACY ) prev_legacy = ps -> flags & KVM_PIT_FLAGS_HPET_LEGACY ; else prev_legacy = ps -> flags & KVM_PIT_FLAGS_HPET_LEGACY ; <S2SV_ModEnd> cur_legacy = ps <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> void encode_nonrd_sb_row ( <S2SV_ModEnd> VP9_COMP * cpi <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; int64_t dummy_rate = 0 ; int64_t dummy_dist = 0 ; <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row,",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { obuf = opipe -> bufs + nbuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { obuf = opipe -> bufs + nbuf ; },0
570,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) return false ; state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } <S2SV_ModEnd> ct -> proto",0
571,"<S2SV_ModStart> { Fp = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart>, ""wb"" ) ; if ( Fp == NULL ) return HTTP_UNAUTHORIZED ; } parser -> position = POS_ENTITY ; do { if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } } while ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY )",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg,0
573,"<S2SV_ModStart> ; if ( ncolors > 8 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,<S2SV_ModStart> ; krb5_data rspac ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; if ( rspac == NULL ) { ret = KRB5_E_INVALID_DATA ; goto out ; } if ( rspac == NULL ) { ret = KRB5_E_INVALID_DATA ; goto out ; } <S2SV_ModStart> ; if ( rspac!= NULL ) { ret = KRB5_E_INVALID_DATA ; goto out ; } ret = KRB5_E_INVALID_DATA ; goto out ; } ret = KRB5_E_INVALID_DATA ; if ( ret!= KRB5_E_INVALID_DATA ) { ret = KRB5_E_INVALID_DATA ; goto out ; } if ( ret!= KRB5_E_INVALID_DATA ) goto out ; if ( ret!= KRB5_E_INVALID_DATA ) goto out ; ret = KRB5_E_INVALID_DATA ; goto out ; } ret = KRB5_E_INVALID_DATA ; goto out ; } ret = KRB5_E_INVALID_DATA ; if ( ret!= KRB5_E_INVALID_DATA ) { ret = KRB5_E_INVALID_DATA ;,0
575,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) cookie = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; else cookie = NULL ;",0
576,<S2SV_ModStart> arg ) { struct usbdevfs_connectinfo ci ; if ( ps -> dev -> speed == USB_SPEED_HIGH ) ci. slow = ps -> dev -> speed == USB_SPEED_HIGH ; else ci. slow = ps -> dev -> speed == USB_SPEED_LOW ;,0
577,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart>, int optlen, ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) opt -> opt. <S2SV_ModStart> = IPOPT_END ; if ( opt -> opt.",0
578,<S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen <S2SV_ModStart> args -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen,0
579,"<S2SV_ModStart> ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_FAILURE ; } break ; case TC_IOCTL_GET_VOLUME_DRIVE : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_IOCTL_GET_VOLUME : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DriverUnloadDisabled ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int )",0
580,<S2SV_ModStart> ; if ( connection == NULL || strlen ( connection ) <= 0 ) goto error ; if (,0
581,<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < strlen ( d -> description ) ) { return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < strlen ( d -> name ) ) { return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { return - 1 ; } <S2SV_ModStart> -> addresses ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { return - 1 ; } } } if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { return - 1 ; } <S2SV_ModStart> -> next ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { return - 1 ; } <S2SV_ModStart> -> next ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { return - 1,0
582,"<S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! path ) error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ;",0
583,<S2SV_ModStart> ( x = <S2SV_ModEnd> image -> columns <S2SV_ModStart> image -> columns <S2SV_ModEnd> - 1 ),0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart> sock * sk, int tstype, int flags <S2SV_ModStart> * serr ; struct sock_ee_info * ee_info <S2SV_ModEnd> ; serr = <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; ee_info <S2SV_ModEnd> = tstype ; <S2SV_ModStart> = tstype ; ee_info = flags ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; if ( flags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= skb_shinfo ( skb )",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp2, len ) ;",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/"" ), CONST_STR_LEN ( ""/abc/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc",0
589,<S2SV_ModStart>! dumpable && ptrace_has_cap <S2SV_ModEnd> ( __task_cred (,0
590,<S2SV_ModStart> ( long ) <S2SV_ModEnd> ) { long,0
591,"<S2SV_ModStart> ( flags & GFP_DMA ) { if (! ( flags & GFP_ZERO ) ) memset ( addr, 0, size ) ; else",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining > ps_bitstrm -> u4_max_payload_bits ) { ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_parameters. i4_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_parameters. i4_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol,0
594,<S2SV_ModStart> cypress_private ) ; if (! serial ) return - ENODEV,0
595,<S2SV_ModStart> ) ) ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; return - ENOMEM ; },0
596,<S2SV_ModStart> device_data ; if ( dev -> dev. parent ) put_device ( & dev -> dev. parent ) ;,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ) ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; return - 1 ; }",0
598,"<S2SV_ModStart> q, 10 ) ; if ( size == 0 ) return ( DestroyImageList ( images ) ) ;",0
599,"<S2SV_ModStart> } else { xfs_bmbt_irec_t dblocks ; dblocks = XFS_B_TO_FSB ( mp, valuelen ) ; nblks += dblocks ;",0
600,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, MAX_HSTORE_PAIRS ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; envaddrule ( env, r ) ; }",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( text [ 1 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 2 ] == EOF ) return 0 ; if ( text [ 3 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 3 ] == EOF ) return 0 ; text [ 4 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 4 ] == EOF ) return 0 ; text [ 5 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 5 ] == EOF ) return 0 ; text [ 6 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 6 ] == EOF ) return 0 ; text [ 7 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 7 ] == EOF ) return 0 ; text [ 8 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 8 ] == EOF ) return 0 ; text [ 9 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 9 ] == EOF ) return 0 ; text [ 10 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 10 ] ==,0
603,"<S2SV_ModStart> agoo_con_header_value ( c -> bind, query, & vlen ) ) { return bad_request ( c, 400, __LINE__ ) ; } if ( vlen > sizeof ( query ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
604,"<S2SV_ModStart> void vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart> new_data_len ) ; if ( g_str_has_prefix ( new_data, "".service"" ) ) { g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; } else { g_strcpy ( new_data, "".service"" ) ; }",0
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; fh_drop_n",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> =",0
609,"<S2SV_ModStart> ) ; switch ( pc -> componentIdent ) { case 1 : if ( pc -> lengthComponentIdent < 0 ) return - EINVAL ; break ; case 2 : if ( tolen < 2 ) return - EINVAL ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 3 : if ( tolen < 2 ) return - EINVAL ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - EINVAL ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( comp_len < 0 ) return - EINVAL ; * p ++ = '/' ; tolen -= comp_len ; break ; } elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; } if ( p > to ) { p [ - 1 ]",0
610,<S2SV_ModStart> -> rm_call. cb_vers == NFS_VER3 && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFSPROC_GETATTR && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 && EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 ) { if ( EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 ) { if ( EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS_VER3 ) { if ( EXTRACT_32BITS ( & rp -> rm_call. cb_flags ) == NFS,0
611,"<S2SV_ModStart> case VTP_SUMMARY_VLAN : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_UPDATE_VLAN : ND_TCHECK_32BITS ( tptr ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Config <S2SV_blank> Rev <S2SV_blank> %u, <S2SV_blank> Updater <S2SV_blank> %s"", EXTRACT_32BITS ( tptr ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ;",0
612,"<S2SV_ModStart> userData, target, ctxt -> instate <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, target, ctxt -> instate <S2SV_ModEnd> ) ; ctxt",0
613,<S2SV_ModStart> slow ; if ( msg -> msg_namelen ) * addr_len = sizeof ( * sin ) ;,0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { break ; } if ( tlen < 8 ) { goto trunc ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; tlen -= pdu_len ; tptr += pdu_len ; } <S2SV_ModEnd> } return ;",0
615,"<S2SV_ModStart> int tagval ; if ( s == NULL ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( s -> p [ 0 ]!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE| BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( token ) { if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tag",0
616,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> chars_processed ; int <S2SV_ModStart> ; int data_size ; ND_TCHECK2 ( * cp, 1 ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } cp += l ; l = labellen ( ndo, cp ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<ELT <S2SV_blank> %d>"", elt ) ) ; return ( NULL ) ; }",0
617,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ;,0
618,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
619,"<S2SV_ModStart> 1 ) ; } if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } if ( copy_file ( src, dest ) < 0 ) errExit ( ""copy_file"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
620,<S2SV_ModStart> ( rc!= BFA_STATUS_OK <S2SV_ModEnd> ) return NULL <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> bfad_hcb_comp ) ; kfree ( fcstats ) ;,0
621,"<S2SV_ModStart> value ) { if ( value -> x < 0.0f ) return ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> h = MinF ( 1.0f, MaxF ( 0.0f, value -> h ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> h = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { if (! * head ) { giterr_clear ( ) ; * out = line ; return 0 ; },0
623,<S2SV_ModStart> ; if ( unlikely (! vma -> vm_ops -> page_mkwrite ) ) return VM_FAULT_SIGSEGV ; if (! vma -> vm_ops -> page_mkwrite ) return VM_FAULT_SIGSEGV,0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; env -> insn_aux_data = new_data ;",0
626,"<S2SV_ModStart> bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ) ; }",0
627,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; if ( ( occ0 / rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( ( int ) ( occ0 / rowsize ) ) ) ) ; return 0 ; } <S2SV_ModEnd> occ0 -= rowsize <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( ( int ) ( ( occ0 / rowsize ) ) ) ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 / rowsize ) ) ) ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif, ""Invalid <S2SV_blank> occ0 <S2SV_blank> %d"", ( int ) ( occ0 % rowsize ) ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif, ""Invalid <S2SV_blank>",0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, n -> order ) ; o += 2 ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 6, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order = n -> order ; exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. offset = 6 + n -> offset ;",0
631,<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if (,0
632,<S2SV_ModStart> = NULL ; hugetlbfs_put_sb ( sb ) ;,0
633,"<S2SV_ModStart>, llbuff, sizeof ( llbuff2 )",0
634,"<S2SV_ModStart> ) { int len = <S2SV_ModEnd> strlen ( string <S2SV_ModStart> ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> curl_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart>, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
635,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
636,"<S2SV_ModStart> ; if ( unlikely ( iov_iter_single_seg_count ( i ) == 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_count ( i ) ) ; goto again ; } iov_iter_advance ( i, bytes ) ; pos += copied ; balance_dirty_pages_ratelimited ( mapping ) ;",0
637,<S2SV_ModStart> ; } if ( unlikely ( len == 0 ) ) { dmaaddr = meta -> dmaaddr ; goto drop_recycle_buffer ; },0
638,"<S2SV_ModStart> = usm_secmod_process_in_msg ; def -> pdu_free_state_ref = usm_free_usmStateReference ; def -> session_setup = usm_session_setup ; def -> handle_report = usm_handle_report ; def -> probe_engineid = usm_discover_engineid ; def -> post_probe_engineid = usm_create_user_from_session_hook ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LI",0
639,"<S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> obj, path <S2SV_ModEnd>, data )",0
640,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> nsub = 0 ;,0
641,<S2SV_ModStart> ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; zsize = dlen / 3 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; zsize = dlen / 3 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 3 ) ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; if ( zsize > dlen / 3 ) return A,0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
644,<S2SV_ModStart> pixels ++ ; if ( length > ( ssize_t ) number_pixels ) { return ( - 1 ) ; },0
645,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; spin_unlock ( & timeri -> timer_lock <S2SV_ModEnd> ) ; _snd_timer_stop <S2SV_ModStart> NULL ; } spin_unlock ( & timeri -> timer_lock <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> timeri -> timer = NULL ; spin_unlock ( & timeri -> timer_lock <S2SV_ModEnd> ) ; },0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 7 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 7)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 7 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 7)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; }",0
647,"<S2SV_ModStart> ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch )",0
648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void sas_probe_devices ( <S2SV_ModStart> sas_probe_devices ( struct asd_sas_port * port, struct sas_rphy * rphy ) { struct asd_sas_port * port = to_asd_sas_port ( port ) ; struct asd_sas_rphy * rphy = dev -> rphy ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, dev_list_node ) { list_for_each_entry ( rphy, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & rphy -> dev_list_node, & port -> sas_port_dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; list_for_each_entry_safe ( rphy, & port -> sas_port_list, disco_list_node ) {",0
649,<S2SV_ModStart> -> u1_dpb_commands_read ) { ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; } else { ps_dec -> ps_bitstrm -> u4_ofst = 0 ; },0
650,"<S2SV_ModStart> ; int pkt_len ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ 13 ] ; gboolean cap_dir ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; <S2SV_ModStart> ; if (! netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap!= WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap!= WTAP_ENCAP_PER_PACK",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } else { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; if ( widthOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } else { int_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; int_fast32_,0
653,"<S2SV_ModStart> can_read_key : if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret <S2SV_ModStart> - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EINVAL ; goto error2 ; } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = <S2SV_ModEnd> key -> type <S2SV_ModStart> -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } error2 : key_put ( key ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn -> <S2SV_ModStart> user ) ) { ret = ret_error ; } <S2SV_ModEnd> TRACE ( ENTRIES <S2SV_ModStart> ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", props -> basedn. buf ) ; if ( ret == ret_not_found ) { ldap_msgfree ( message ) ; return ret_not_found ; } <S2SV_ModEnd> TRACE ( ENTRIES <S2SV_ModStart> ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", props -> basedn. buf ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret == ret_not_found ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ret = ret_not_found ; } ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val =,0
657,<S2SV_ModStart> ; if ( unlikely ( args -> m_fadd. add == NULL ) ) { ret = - EINVAL ; goto error ; } if ( unlikely ( args -> m_fadd. add == NULL ) ) { ret = - EINVAL ; goto error ; } if ( unlikely ( args -> m_fadd. add == NULL ) ) { ret = - EINVAL ; goto error ; } if ( unlikely ( args -> m_fadd. add == NULL ) ) { ret = - EINVAL ; goto error ; } if ( unlikely ( ret ) ) { ret = - EINVAL ; goto error ; },0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
659,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"", size, msg_flags, timeo",0
660,"<S2SV_ModStart> ] ; if ( strncmp <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) <S2SV_ModEnd> ) return -",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) <S2SV_ModEnd> ) t ++,0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; <S2SV_ModStart> 0 ) { mutt_bcache_delete ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ; } # endif if ( ret == 0 ) { mutt",0
663,"<S2SV_ModStart> * objp ) ; xdrs -> x_op = XDR_END ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p",0
664,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; }",0
665,<S2SV_ModStart> return 1 ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ;,0
666,<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
667,"<S2SV_ModStart> goto out ; if ( dentry -> d_inode ) { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; }",0
668,<S2SV_ModStart> while ( isspace <S2SV_ModEnd> ( * p,0
669,"<S2SV_ModStart> = 0 ; if (! authctxt ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_verify_signature ( ssh, sig ) )!= 0 ) fatal ( ""%s: <S2SV_blank> packet <S2SV_blank> parsing: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; sshbuf_dump_data ( sig, siglen, stderr ) ; r = sshpkt_verify_signature ( ssh, sig ) ; if ( r ) fatal ( ""%s: <S2SV_blank> packet <S2SV_blank> parsing: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; sshbuf_dump_data ( sig, siglen, stderr ) ; r = sshpkt_verify_signature ( ssh, sig ) ; if ( r ) fatal ( ""%s: <S2SV_blank> packet <S2SV_blank> parsing: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; r = sshpkt_verify_signature ( ssh, sig ) ; if ( r ) fatal ( ""%s: <S2SV_blank> packet <S2SV_blank> parsing: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ;",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
671,"<S2SV_ModStart> ; for ( i = 0 ; i < ctx -> hdrmax ; i ++ ) if ( mutt_str_cmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_",0
672,"<S2SV_ModStart> NULL ) { retval = KRB5KDC_ERR_INVALID_PKID ; goto cleanup ; } if ( is -> issuer == NULL ) { retval = KRB5KDC_ERR_INVALID_ISSUER ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup :",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec <S2SV_ModEnd> * prec = <S2SV_ModStart> prec ) ; },0
674,"<S2SV_ModStart> ; if ( ctxt -> vctxt. error!= NULL ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } }",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ; err = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; rcu_read_unlock ( ) ;",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; if ( frame_type == MV_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> ; if ( magfact < 0.0 ) magfact = 0.0 <S2SV_ModEnd> ; else magfact <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> += magfact ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact = <S2SV_ModStart> += magfact ; if ( magfact > 0.0 <S2SV_ModEnd> ) magfact =,0
679,"<S2SV_ModStart> NULL ; } if ( shdr -> sh_size > sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_version = sdb_new0 ( ) ; if (! sdb_version ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate",0
680,<S2SV_ModStart> b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else { return 1 ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
681,"<S2SV_ModStart> ; if ( sst == NULL ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_read_scn ( & info, & h, & scn, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> scn"" ; goto out3 ; } if ( ( i = cdf_read_scn ( & info, & h, & scn, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> scn"" ; goto out4 ; } if ( ( i = cdf_read_scn ( & info, & h, & scn, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> scn"" ; goto out5 ; } if ( ( i = cdf_read_scn ( & info, & h, & scn, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> scn"" ; goto out4 ; } if ( ( i = cdf_read_scn",0
682,<S2SV_ModStart> = NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2,0
683,"<S2SV_ModStart> } if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,<S2SV_ModStart> -> _eip ; ctxt -> dst. val = 0 ; <S2SV_ModStart> case 4 : ctxt -> dst. val = 0 ;,0
687,"<S2SV_ModStart> url ) ; mutt_str_cpy <S2SV_ModEnd> ( errstr,",0
688,"<S2SV_ModStart> * secret, <S2SV_ModEnd> void * dbuf <S2SV_ModStart> * th ; void * dp, * dend ; int dlen ; char is_enc ; struct ceph_crypto_key old_key ; void * tp, * tpend ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; struct ceph_buffer * new_ticket_blob ; struct ceph_entity_id new_secret_id ; int ret ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) { ret = - EINVAL ; goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 (",0
689,"<S2SV_ModStart> / 2 ; if ( count > MAX_HSTORE_ENTRIES ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, MAX_HSTORE_ENTRIES ) ) ) ;",0
690,"<S2SV_ModStart> -> init_msg ; if ( n2l ( p, s -> session -> tlsext_tick_lifetime_hint ) < 0 ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH ) ; goto f_err ; }",0
691,<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY (,0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
693,<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
694,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
695,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == NAME ) { name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; body = ast_for_expr ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return NULL",0
696,<S2SV_ModStart> ; int err ; if (! sockp ) return - EINVAL,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; l_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int * ) * ( * o_row_count + 1 ) ) ; if ( l_row_idx_id == NULL ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory!\\n"" ) ; return - 1 ; }",0
700,"<S2SV_ModStart> ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
701,"<S2SV_ModStart> ctxt ) { int rc ; if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) rc = - EINVAL ; else rc = - EINVAL ; <S2SV_ModStart> ) ) ) rc = rc <S2SV_ModEnd> ; return X86EMUL_CONTINUE <S2SV_ModStart> ; return rc <S2SV_ModEnd> ; } <S2SV_null>",0
702,,1
703,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; <S2SV_ModEnd> freq_reg += HI3660_STUB_CLOCK_DATA,0
704,"<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ) { <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> psf -> header",0
705,<S2SV_ModStart> out_mutex ; } new_size = i_size_read ( inode ) ; ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ;,0
706,"<S2SV_ModStart> uint32_t track_size ; uint8_t * track_data ; uint8_t * sysex_store ; uint32_t smallest_delta ; uint32_t subtract_delta ; uint8_t * running_event ; uint32_t setup_ret ; <S2SV_ModStart> ) ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( memcmp ( midi_data, ""MThd"", 4 ) ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_MIDI, NULL, 0 ) ; return ( NULL ) ; } midi_data += 4 ; midi_size -= 4 ; } if ( memcmp ( midi_data, ""MThd"", 4 ) ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_MIDI, NULL, 0 )",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, <S2SV_ModEnd> val * 2 <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_SNDBUFFLUSH : sk -> sk_userlocks |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = max_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_SNDBUFFLUSH : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t",0
708,"<S2SV_ModStart> * bh ; struct logicalVolDesc * lvd ; int ret = 0 ; <S2SV_ModStart> TAG_IDENT_LVD ) ; lvd = ( struct logicalVolDesc * ) bh -> b_data ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> mapTableLength ) ) ; if ( ret ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else { struct genericPartitionMap1 * gpm1 = ( struct genericPartitionMap1 * ) gpm ; map -> s_partition_type",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ) ; else pr_notice <S2SV_ModEnd> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",0
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; ps_cabac -> u4_ofst = 0 ;,0
712,"<S2SV_ModStart> ; save_text_from_text_view ( <S2SV_ModEnd> g_tv_comment, FILENAME_COMMENT",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ;",0
714,<S2SV_ModStart> ; } } if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_EMPTY ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if (,0
715,"<S2SV_ModStart>, extent ; size_t width, height ; size_t <S2SV_ModEnd> length ; ssize_t <S2SV_ModStart> sun_pixels ) ; width = sun_info. width ; height = sun_info. height ; <S2SV_ModStart> sun_pixels ) ; if ( sun_info. type == RT_ENCODED ) { <S2SV_ModStart> sun_pixels ) ; if ( sun_info. maptype!= RT_STANDARD ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart> sun_pixels ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. maptype!= RT_STANDARD ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( Corrupt",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype, krb5_principals spp, const krb5_principals enc_pa_data, const char * e_text, <S2SV_ModStart> client_principal, krbtgt <S2SV_ModEnd>, krbtgt_etype krbtgt_etype",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = NULL ;,0
719,<S2SV_ModStart> struct xmlparser parser ; data -> l_tail = NULL ; data -> l_taillen = 0 ;,0
720,"<S2SV_ModStart> ; if ( tlen <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, csum_partial ( skb_transport_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; put_cmsg",0
721,<S2SV_ModStart> pfn ) ; r = - EINVAL ; goto unmap_pages ; } <S2SV_ModEnd> gfn += page_size,0
722,"<S2SV_ModStart> } ; memcpy ( b + 6, cmd -> msg, cmd -> msg_len ) ;",0
723,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock <S2SV_ModEnd> ( event ),0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= (,0
725,<S2SV_ModStart> ) ; struct f2fs_free_nid_entry <S2SV_ModEnd> * i ; <S2SV_ModStart> return false ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> return false ; <S2SV_ModEnd> } i = <S2SV_ModStart> ) ) return false <S2SV_ModEnd> ; if (,0
726,<S2SV_ModStart> ; # if CONFIG_POSTPROC_VISUALIZER ( ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> deblocking_level = ctx -> postproc_cfg. deblocking_level ; flags -> noise_level = ctx -> postproc_cfg. noise_level ; flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # endif } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
727,"<S2SV_ModStart> 0 ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> ++ cons ; netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ;",0
728,"<S2SV_ModStart> ) ) ; memset ( hdr, 0, sizeof ( * hdr ) ) ;",0
729,<S2SV_ModStart> return ; r1. <S2SV_ModEnd> resolution = resolution,0
730,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'y' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'z' : { float z ; memcpy ( & z, data + pos, size ) ; correctbytes ( ( char * ) & z, sizeof ( z ), h. endian ) ; correctbytes ( ( char * ) & z, sizeof ( z ), h. endian ) ; correctbytes ( ( char * ) & z, sizeof",0
731,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; <S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ; <S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_hna4 ) ) ;",0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_ext * body = ( struct oz_multiple_ext * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = ( data_len - sizeof ( struct oz_multiple_ext ) + 1 ) / body -> unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_EXTEND : { struct oz_isoc_ext",0
733,"<S2SV_ModStart> end_time ) { VP8_COMMON * cm = & cpi -> common ; # endif struct vpx_usec_timer timer ; int res = 0 ; # if HAVE_NEON if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer )",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; fs_logger2 ( ""clone"", dest ) ; _exit ( 0 ) ; <S2SV_ModEnd> } pid_t child <S2SV_ModStart> 0 ) ; fs_logger2 ( ""clone"", dest ) ; _exit ( 0 ) ; <S2SV_ModEnd> } waitpid ( <S2SV_ModStart> 0 ) ; fs_logger2 ( ""chown"", dest, getuid ( ), getgid ( ) ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ; return 1 ; } if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ;",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; } mailbox = idata -> buf ; s = mailbox + litlen ; SKIPWS ( s ) ;,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""missing <S2SV_blank> extent <S2SV_blank> header!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_hbe_txposer -> core_frame_length <S2SV_ModStart> -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> k_start > 16 ) ptr_hbe_txposer -> k_start = 16 - ptr_hbe_txposer -> synth_size ; } <S2SV_ModStart> -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer ->,0
739,"<S2SV_ModStart> ] ; image_w = get_ushort ( & tga [ 4 ] ) ; image_h = get_ushort ( & tga [ 6 ] ) ; pixel_depth = get_ushort ( & tga [ 9 ] ) ; image_desc = tga [ 13 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type >",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,<S2SV_ModStart> tp ) { tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> ) ; } else { tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> tp ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; lualua_authz_provider_spec * prov_spec = parsed_require_line <S2SV_ModEnd> ; int result <S2SV_ModStart> r ) ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Insufficient <S2SV_blank> arguments <S2SV_blank> in <S2SV_blank> authz <S2SV_blank> provider"" ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; }",0
744,<S2SV_ModStart> * prev ; unsigned long stack_guard_gap ; int error ; stack_guard_gap = ( vma -> vm_flags & VM_GROWSDOWN )? - ENOMEM : 0,0
745,"<S2SV_ModStart> { umode_t mode = posix_acl_mode ( inode, & acl ) ; error = posix_acl_update_mode ( inode, & mode, acl ) ; if ( error ) return error ; error = xfs_set_mode ( inode, mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> inode -> i_mode <S2SV_ModStart> = posix_acl_update_mode ( inode, & acl ) ; <S2SV_ModEnd> inode -> i_mode <S2SV_ModStart> inode -> i_mode <S2SV_ModEnd> = NULL ;",0
746,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data <S2SV_ModEnd> ) ) {",0
747,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_type = DestroyQuantumInfo ( quantum_type ) ; if ( quantum_info!= ( QuantumInfo * ) NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,<S2SV_ModStart> ; if ( proto_end == url ) return - 1 ;,0
750,"<S2SV_ModStart>, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
751,<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) <S2SV_ModEnd> ) eventfd_signal ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb,0
752,<S2SV_ModStart> ; if ( opt -> srr && rt -> rt_flags & RTCF_DOREDIRECT &&! skb_sec_path ( skb ) ) ip_rt_send_redirect ( skb ) ;,0
753,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) ) ; ikev2_parent_inR1outI2_reset ( pcrc, r ) ;",0
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; size_t datalen = prep -> datalen <S2SV_ModEnd> ; char * <S2SV_ModStart> trusted_payload * new_p = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! new_p ) { pr_info ( ""trusted_key: <S2SV_blank> datablob <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_o ) ;",0
755,<S2SV_ModStart> 1 ; } if ( n <= 0 ) { break ; } <S2SV_ModEnd> if ( --,0
756,<S2SV_ModStart> int lci_o ; mutex_lock ( & rose_loopback_neigh -> lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & rose_loopback_neigh -> lock ) ; <S2SV_ModStart> 4 ) ; mutex_unlock ( & rose_loopback_neigh -> lock ) ;,0
757,<S2SV_ModStart> goto out_free ; if ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) mem -> flags &= ~ KVM_MEM_LOG_DIRTY_PAGES ;,0
758,<S2SV_ModStart> ) ; if ( indev == NULL ) return NF_DROP ;,0
759,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> = nextoffset ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ;",0
760,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize > DFFChunkHeader. ckDataSize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk",0
761,"<S2SV_ModStart> ; if ( evp_md == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; }",0
764,"<S2SV_ModStart> -> priv ; int ret, wo ; if ( wlen < 0 ) return - EINVAL ; if ( rbuf == NULL || rlen < 0 ) return - EINVAL <S2SV_ModStart> EOPNOTSUPP ; } ret = dvb_usb_generic_write ( d, st -> data, 1, wbuf, wlen, rbuf, rlen, 0 ) ; if ( ret ) return ret <S2SV_ModEnd> ; mutex_unlock ( <S2SV_ModStart> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; if ( ret ) return ret ; ret = cxb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; ret = cxb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
765,"<S2SV_ModStart> ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ;",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> path ) ; if ( ret ) { kfree ( new_root_item ) ; kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { kfree ( new_root_item ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { kfree ( new_root_item ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; }",0
769,<S2SV_ModStart> fp ) ; atomic_long_dec ( & s -> inflight ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; unix_tot_inflight <S2SV_ModStart> -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> NULL ) { <S2SV_ModEnd> size_t chanmap_size =,0
771,"<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( sf -> x_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_vert ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_vert ; sf ->",0
772,<S2SV_ModStart> ms ) { if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ; if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> NULL ) ; rcu_assign_pointer ( np -> inet_opt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> inet_opt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
777,"<S2SV_ModStart> ; BIO * cmsbio <S2SV_ModEnd> = NULL, <S2SV_ModStart> tmpin = NULL <S2SV_ModEnd> ; if (",0
778,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( src_info ) ;,0
779,<S2SV_ModStart> sctp_net_ops ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctrl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl_ctl,0
780,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"",",0
781,"<S2SV_ModStart> ptr ) { struct <S2SV_ModStart> netdev_notifier_info info ; dev = rcu_dereference_protected ( dev -> priv, lockdep_is_held ( & masq_netdev_lock ) ) <S2SV_ModEnd> ; return masq_device_event",0
782,<S2SV_ModStart> ( current -> <S2SV_ModEnd> active_mm!= mm <S2SV_ModStart> ( smp_processor_id ( ) <S2SV_ModEnd> ) ; leave_mm <S2SV_ModStart> ( smp_processor_id ( ) <S2SV_ModEnd> ) ; },0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_samples_total > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; }",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> ) { temp [ i ] = getc ( fp ) ; if ( temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 ) break ; temp [ i ] = 0 ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == EOF ) break ; temp [ i ] = 0 ; if ( temp [ i ] == 0 ) break ; if ( temp [ i ] == 0 ) break ; if ( temp [ i ] == 0 ) break ; temp [ i ] = 0 ; if,0
785,<S2SV_ModStart> task -> slow_task <S2SV_ModEnd> ) return ;,0
786,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ), GFP_NOFS <S2SV_ModEnd> ) ; if",0
787,"<S2SV_ModStart> ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; }",0
788,"<S2SV_ModStart> NULL ; } if ( size == BPLIST_FILL ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; if ( size == BPLIST_FILL ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; if ( * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } size = UINT_TO_HOST ( * object, size ) ; if ( size",0
789,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree",0
790,<S2SV_ModStart> all_channels_lock ) ; <S2SV_ModEnd> wake_up_interruptible ( &,0
791,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct btrfs_dir_item * <S2SV_ModStart> = btrfs_lookup_dir_name ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ;",0
792,"<S2SV_ModStart> if ( op -> len < 1 || op -> len > buf_len <S2SV_ModEnd> ) return 1 <S2SV_ModStart> 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> %d\\n"", __func__, op -> op ) ; return 1 ; } <S2SV_ModStart> case WASM_OP_I64EQZ : case WASM_OP_I64LTU : case WASM_OP_I64GTU : case WASM_OP_I64LEU : case WASM_OP_I64GES : case WASM_OP_I64GEU : case WASM_OP_I64LTU : case WASM_OP_I64GTU : case WASM_OP_I64LEU : case WASM_OP_I64GES : case WASM_OP_I64GEU : case WASM_OP_I64LTU : case WASM_OP_I64GTU : case WASM_OP_I64GEU : case WASM_OP_I64EQZ : case",0
793,<S2SV_ModStart> client ) ; g_object_unref ( object ) ;,0
794,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; if (",0
796,"<S2SV_ModStart> ; ip ++ ; if ( unlikely (! HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { NEED_IP ( 1 ) ; } else # endif { <S2SV_ModStart> t ) ; if (! NEED_IP ( t + 3 ) ) { NEED_IP ( t + 3 ) ; } else # endif { if (! NEED_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) { NEED_IP ( t + 3 ) ; } t += 3 ; copy_literal_run : # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } else # endif { if (! NEED_IP ( t + 3 ) && HAVE_OP ( t + 3 ) ) { NEED_IP ( t + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ie ) ; ip = ie ; op = oe ; } else #",0
797,"<S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_FORMAT ) ; <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> } bootstage_mark ( <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT_OK ) ;",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> goto out6 ; r = - ENOMEM ; if ( r ) goto out7 ; r = - ENOMEM ; if ( r ) goto out8 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out9 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out10 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out11 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out12 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out13 ; r = - ENOMEM ; r = kvm_enable_device_io ( ) ; if ( r ) goto out10 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out11 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out12 ; r = kvm_enable_device_io ( ) ; if ( r ) goto out12 ; r = kvm_enable_device_io ( ) ; if ( r ) { kvm_disable_device_,0
800,"<S2SV_ModStart> -> sh_name ] ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; }",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> -> baseline_gf_interval * rc -> avg_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> : ( rc -> avg_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> : ( rc -> avg_gf_interval <S2SV_ModEnd> * af_ratio ) <S2SV_ModStart> : ( rc -> avg_gf_interval <S2SV_ModEnd> * af_ratio ),0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""-u"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" ) ;",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,"<S2SV_ModStart> } offset = getcontentssize <S2SV_ModEnd> ( tbl ) <S2SV_ModStart> -= INDENT_INCR ; if ( tbl -> indent < 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; }",0
806,"<S2SV_ModStart> tail ; if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u <S2SV_blank> >= <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""\\n"", line, b, e, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_",0
807,<S2SV_ModStart> } # else ( void ) lex_env ; <S2SV_ModStart> } # else ( void ) lex_env ; # <S2SV_ModStart> } # else ( void ) lex_env ; # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYPOPSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yystack = ( void ) lex_env ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yystack = ( void ) lex_env ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yystack = ( N ) ; # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yystack = ( N ) ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yystack = ( N ) ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yystack = ( void ) lex_env ; # define YYSTACK ( N ) ( int ) (,0
808,<S2SV_ModStart> ib ] ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) { rdmult = ( rdmult * 9 ) >> 4 ; } else { rdmult = ( rdmult * 9 ) >> 4 ; },0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) zap = dereference_key_locked ( key ) ; else zap = NULL ;",0
811,<S2SV_ModStart> hci_pi ( sk ) -> filter ; uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ;,0
812,"<S2SV_ModStart> ) ( data_end - pbi -> decrypt_state ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart> peer. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; }",0
815,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fib_size ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> copy <S2SV_blank> data <S2SV_blank> size <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; }",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT ""byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> sk ) ) <S2SV_ModStart> goto out_unlock ; <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), <S2SV_ModEnd> ep, transport <S2SV_ModStart> GFP_ATOMIC ) ; <S2SV_ModEnd> out_unlock : sctp_do_sm",0
818,"<S2SV_ModStart> input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart>, RE_MATCH_CALLBACK_FUNC callback, void * callback_args ) { uint8_t * ip ; uint8_t * mask ; uint8_t * value ; uint8_t * mask_data ; uint8_t * mask_data ; uint8_t * mask_data ; uint8_t * mask_data ; uint8_t * value_data ; uint8_t * value_data ; uint8_t * value_data ; uint32_t mask_size ; uint32_t mask_size ; uint32_t value_size ; uint32_t mask_size ; uint32_t mask_size ; uint32_t mask_size ; uint32_t value_size ; <S2SV_ModStart> ) yr_min ( input_size, RE_SCAN_LIMIT ) ; mask_data = ( uint8_t * ) yr_min ( mask_data, mask_size ) ; value_data = ( uint32_t ) yr_min ( value_data, mask_size ) ; value_size = ( uint32_t ) yr_min ( value_",0
819,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, int * returnintra, int * returnintra_tteob, int * returnintra_done <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; vp8_dc_quant ( cpi -> common. base_qindex, cpi -> common. y1dc_delta_q ) ; int intra_rd_penalty = 10 * vp8_dc_quant ( cpi -> common. base_qindex, cpi -> common. y1dc_delta_q ) ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm,",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) { h -> size = 0 ; } else { h -> size = statbuf. st_size ; },0
822,"<S2SV_ModStart> const cdf_stream_t * <S2SV_ModEnd> sst, const <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; } m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m <S2SV_ModEnd> ; } <S2SV_null>",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i4_num_reorder_frames ; WORD32 u4_num_reorder_frames_adjusted ; WORD32 u4_num_reorder_frames_adjusted ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_frames_adjusted = 0 ; WORD32 u4_num_reorder_",0
824,<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ;,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const svc_params <S2SV_ModEnd> = va_arg ( <S2SV_ModStart> ; if ( svc_params <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; svc_params <S2SV_ModEnd> -> svc. <S2SV_ModStart>. spatial_layer_id = svc_params -> spatial_layer ; svc_params -> temporal_layer = svc_params -> temporal_layer ; svc_params -> lst_fb_idx = svc_params -> lst_fb_idx ; svc_params -> gld_fb_idx = svc_params -> gld_fb_idx ; svc_params -> alt_fb_idx = svc_params -> alt_fb_idx ; svc_params -> svc. spatial_layer_id = svc_params -> spatial_layer ; svc_params -> temporal_layer_id = svc_params -> temporal_layer ; svc_params -> lst_fb_idx = svc_params -> lst_fb_idx ; svc_params -> gld_fb_idx = svc_params -> gld_fb_idx ; svc_params -> alt_fb_idx = svc_params -> alt_fb_",0
826,"<S2SV_ModStart> ; if ( ( fhdr -> frag_off & htons ( IPPROTO_ICMPV6 ) ) == IPPROTO_ICMPV6 ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - nhoff ) ) ) ; return - 1 ; }",0
827,"<S2SV_ModStart> out ) { <S2SV_ModEnd> uint16 bitspersample, <S2SV_ModStart>, samplesperpixel ; uint16 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; if ( bitspersample > TIFF_MAX_BITS_PER_PIXEL ) bitspersample = TIFF_MAX_BITS_PER_PIXEL ; if ( samplesperpixel > TIFF_MAX_SAMPLES_PER_PIXEL ) samplesperpixel = TIFF_MAX_SAMPLES_PER_PIXEL ; if ( bitspersample > TIFF_MAX_BITS_PER_PIXEL ) bitspersample = TIFF_MAX_BITS_PER_PIXEL ; if ( samplesperpixel > TIFF_MAX_SAMPLES_PER_PIXEL ) bitspersample = TIFF_MAX_SAMPLES_PER_PIXEL ; if ( bitspersample > TIFF_MAX_SAMPLES_PER_PIXEL ) bitspersample = TIFF_MAX_SAMPLES_PER_PIXEL ; if ( bitspersample > TIFF_MAX_BITS_PER_PIXEL ) bitspersample = TIFF_MAX_BITS_PER_PIXEL ; if ( bitspersample > TIFF_MAX_SAMPLES",0
828,"<S2SV_ModStart> a ) { struct stat st ; int r ; if (! ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ;",0
829,"<S2SV_ModStart> ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; } } umask ( cmask ) ; INFO ( ""Populated <S2SV_blank> container <S2SV_blank> /dev"" ) ;",0
830,"<S2SV_ModStart> -> i_sb ) <S2SV_ModEnd> ; bh = <S2SV_ModStart> ibh ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if ( nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident",0
831,"<S2SV_ModStart> -> tx_size ; const int tx_size_uv = mbmi -> tx_size_uv ; <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask [ block_size ] << shift_y ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask [ block_size ] << shift_y ; * left_uv |= left_prediction_mask_uv [ block_size ] << shift_uv ; * left_uv |= left_prediction_mask_uv [ block",0
832,"<S2SV_ModStart> dst_size ) { const uint8_t * name_end = data ; const uint8_t * name_start = data ; const uint8_t * name_start = data ; const uint8_t * name_end = data + namelen ; const uint8_t * name_end = data + namelen ; <S2SV_ModStart> data_end ) ; if ( data_end - data < 3 ) return - 1 ; <S2SV_ModStart> - 1 ; if ( name_end - data < namelen ) return - 1 ; <S2SV_ModStart> - 1 ; if ( data_end - data < 3 ) return - 1 ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ;",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1,0
835,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return 0 ;,0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_saddr ; inet_opt -> inet_sport = inet_opt -> opt. <S2SV_ModEnd> fport ; sk",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl = NULL <S2SV_ModEnd> ; pid_t pid <S2SV_ModStart> instance ) ; if (! hdl ) { return FM_CONF_INIT_ERR ; } <S2SV_ModStart> instance ) ; if (! hdl ) { return FM_CONF_INIT_ERR ; } <S2SV_ModStart> ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if (! hdl ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_",0
840,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pReplyData ; memset ( p, 0, sizeof ( effect_param_t ) ) ; break ; case EFFECT_CMD_SET_CONFIG : if ( pReplyData == NULL || * replySize < ( int ) sizeof ( effect_config_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_CONFIG <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } session_get_config ( effect -> session, ( effect_config_t * ) pReplyData ) ; break ; case EFFECT_CMD_GET_STATE : if ( pReplyData == NULL || * replySize < sizeof ( effect_state_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_STATE <S2SV_blank> invalid <S2SV_blank> args"" ) ; return",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
843,"<S2SV_ModStart> ; L3 = emitjump ( J, F, OP_JUMP ) ; } label ( J, F, L1 ) ; cstm ( J, F, trystm ) ; emit ( J, F, OP_ENDTRY ) ;",0
844,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; } else { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_values = 0 ; }",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> int length ; <S2SV_ModStart> int length ; RD_BOOL is_fastpath ; uint8 fastpath_hdr ; int data_length <S2SV_ModStart> return False ; data_length = in_uint8 ( s, data_length ) ; if ( data_length!= length ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> data=%u <S2SV_blank> length=%u"", data_length, length ) ; return False ; } result = in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_RESULT, & length ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; in_uint8s ( s, data_length ) ;",0
847,<S2SV_ModStart> ; if ( stkt_server == NULL ) { stkt_server = NULL ; } else { stkt_server = stkt_server ; },0
848,<S2SV_ModStart> ) ) { if ( ( ctxt -> options & XML_PARSE_NEW10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0,0
849,"<S2SV_ModStart> -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list"" ) ; return ret ; } if ( macvlan_cnt > 1 ) { dev_info ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list"" ) ; return - EINVAL ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
852,"<S2SV_ModStart> } } } return send_msg ( g, ""E01"" ) ;",0
853,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ) ; } if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ;",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> mb_row, mb_col, pbi -> mb_rows [ mb_row ], pbi -> mb_cols [ mb_col ] <S2SV_ModStart> mb_row, mb_col, pbi -> mb_rows [ mb_row ], pbi -> mb_cols [ mb_col ], pbi -> mb_cols [ mb_col ], pbi -> mb_rows [ mb_row ], pbi -> mb_cols [ mb_col ] ) ; pbi -> mb_rows [ mb_row ] [ mb_col ] = pbi -> mb_rows [ mb_row ], pbi -> mb_cols [ mb_col ], pbi -> mb_rows [ mb_row ], pbi -> mb_cols [ mb_col ], pbi -> mb_cols [ mb_row ], pbi -> mb_cols [ mb_row ], pbi -> mb_cols [ mb_col ] ) ; pbi -> mb_rows [ mb_row ] [ mb_col ] = pbi -> mb_rows [ mb_row ] ; pbi -> mb_cols [ mb_col ] = pbi -> mb_cols [ mb_",0
856,<S2SV_ModStart> = AF_TIPC ; addr -> addrtype = TIPC_ADDR_ID ; addr ->,0
857,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) mem -> flags &= ~ KVM_MEM_LOG_DIRTY_PAGES ;,0
858,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
859,"<S2SV_ModStart> ; if ( use_ssl && tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> SSL <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> peer <S2SV_blank> name"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank>",0
860,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> * p ; <S2SV_ModEnd> const char * <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; if ( p == buf ) { Py_DECREF ( w ) ; return NULL ; } if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { PyObject * w ; int kind, data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i )",0
861,"<S2SV_ModStart> ) ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( record_data_size > ( ssize_t ) ( sizeof ( evt_record_event_header_t ) + 4 ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( strict_mode == LIBC_STRICT_MODE ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if (",0
862,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if ( bcount!= sizeof ( Wave64ChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if ( bcount!= sizeof ( Wave64ChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if ( bcount!= sizeof ( Wave64ChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if ( dff_chunk_header. ckDataSize > DFFChunkHeader. ckDataSize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk",0
864,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock <S2SV_ModEnd> ( & slave_active_lock,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart> ; setimes = 0 <S2SV_ModEnd> ; SCREWUP (",0
866,"<S2SV_ModStart> } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> changes."" ), channel ) ; return ; } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> changes."" ), channel ) ; return ; } else if ( myentity_find_ext ( target )!= NULL && myentity_find_ext ( target ) == NULL",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,<S2SV_ModStart> goto error ; ret = <S2SV_ModEnd> av_probe_input_format2 ( & <S2SV_ModStart> goto error ; ret = <S2SV_ModEnd> av_probe_input_format2 ( &,0
869,<S2SV_ModStart> null_server ; int need_error_free <S2SV_ModEnd> ; int local_rcache <S2SV_ModStart> ) ; if (! need_error_free ) { need_error_free = 1 ; } else { need_error_free = 0 ; } if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { if,0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
872,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, RO",0
873,<S2SV_ModStart> = new_ns ; if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { q -> mnt. mnt_root = p -> mnt. mnt_root ; } else { q -> mnt. mnt_root = q -> mnt. mnt_root ; },0
874,"<S2SV_ModStart> -> mode_info_stride ; memset ( oci -> mode_info, 0, sizeof ( oci -> mode_info ) ) ;",0
875,<S2SV_ModStart> = php_zip_get_property_ptr_ptr ; zip_object_handlers. get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( ( iova + length ) > mem -> iova + mem -> length ) ) return - EFAULT ; if (,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz < sizeof ( *",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> void * cb_data",0
879,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; }",0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
881,"<S2SV_ModStart> ; if ( cluster < 0 || cluster >= fs -> clusters ) die ( ""Bad <S2SV_blank> cluster <S2SV_blank> index: <S2SV_blank> %u, <S2SV_blank> cluster <S2SV_blank> %u"", cluster, fs -> clusters ) ;",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init <S2SV_ModEnd> ( sk ),0
884,<S2SV_ModStart> ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u1_num_mbsNby2 = u1_num_mbs + u1_num_mbsNby2,0
885,<S2SV_ModStart> ; if ( unlikely ( src >= env_end ) ) { ret = - EINVAL ; goto free ; },0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { if ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) { result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de,",0
887,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct fsnotify_group * inotify_new_group ( struct file * file, <S2SV_ModStart> = 0 ; file -> f_cred -> user = user ; file -> f_cred ->",0
888,<S2SV_ModStart> in -> data [ p ] && in -> linesize [ p ],0
889,"<S2SV_ModStart> [ 1 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
890,"<S2SV_ModStart> ( env, <S2SV_ModEnd> ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno",0
891,"<S2SV_ModStart> = 0 ; if ( nstrips == 0 ) TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ;",0
892,<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> struct search_domain * <S2SV_ModStart> ; struct search_domain <S2SV_ModEnd> * dom ;,0
893,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, number_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, one, number_planes_filled, number_colormaps, number_planes_filled, number_planes_filled, number_pixels, number_planes_filled, number_pixels, number_planes_filled <S2SV_ModEnd>, background_color, <S2SV_ModStart>, background_color, number_pixels, number_planes_filled <S2SV_ModEnd>, number_colormaps_filled, <S2SV_ModStart>, number_pixels, number_planes_filled <S2SV_ModEnd>, pixel_info_length, <S2SV_ModStart>, number_planes_filled, number_planes_filled <S2SV_ModEnd>, number_planes_filled, <S2SV_ModStart>, number_planes_filled, number_pixels <S2SV_ModEnd>, number_planes_filled, <S2SV_ModStart>, number_pixels, number_pixels, number_planes_filled <S2SV_ModEnd>, number_planes_filled <S2SV_ModEnd>, number_planes_filled, <S2SV_ModStart>, number_planes_filled, number_planes_filled <S2SV_ModEnd>, number_planes_filled, <S2SV_ModStart>, number_planes_filled, number_planes_filled <S2SV_ModEnd>, number_planes_filled, <S2SV_ModStart>",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if (! context -> priv -> PlaneBuffers ) return FALSE ; rle = context -> priv -> PlaneBuffers ; if (! rle ) return FALSE ; if ( originalSize > UINT32_MAX ) return FALSE ; if ( planeSize > UINT32_MAX ) return FALSE ; if ( originalSize > UINT32_MAX ) return FALSE ; if ( planeSize > UINT32_MAX ) return FALSE ; if ( planeSize < originalSize ) return FALSE ; if ( context -> priv -> PlaneBuffers [ i ] -> length < originalSize ) return FALSE ; if ( rle + originalSize > context -> priv -> PlaneBuffers [ i ] -> length ) return FALSE ; if ( rle + originalSize > UINT32_MAX ) return FALSE ; if ( planeSize > UINT32_MAX ) return FALSE ; if ( originalSize > UINT32_MAX ) return FALSE ; if ( originalSize > UINT32_MAX ) return FALSE ; if ( planeSize < originalSize ) return FALSE ; <S2SV_ModStart> < originalSize ),0
897,<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; if ( ei -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - ENO,0
898,"<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> value, "" <S2SV_blank> \\t,""",0
899,"<S2SV_ModStart> -> match, <S2SV_ModEnd>. match_data.",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> clean ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; if ( bbversion ) free ( bbversion ) ; if ( nbit ) free ( nbit ) ; if ( ntime ) free ( ntime ) ;,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t alloc_size = ( num + 1 ) / sizeof ( * ptr ) ; if ( alloc_size < 0 ) { return NULL ; } alloc_size = ( num + 1 ) / sizeof ( * ptr ) ; if ( alloc_size > 0 ) { memset ( ptr, '\\0', alloc_size ) ; } else { memset ( ptr, '\\0', alloc_size ) ; }",0
904,<S2SV_ModStart> cfq_exit ( ioc <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; PyObject * dict = NULL ; Py_DECREF ( dict ) ; if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return NULL ;",0
906,"<S2SV_ModStart>, USB_DT_OTG, desc <S2SV_ModEnd> ) ; if <S2SV_ModStart>, USB_DT_OTG, desc <S2SV_ModEnd> ) ; if",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ) ; case PERF_EVENT_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { ret = perf_event_set_output ( event, NULL ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } else { ret = - EFAULT ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_IOC_SET_FILTER :",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - 1 ; } else { sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( skcipher ) { crypto_free_skcipher ( skcipher ) ; return NULL ; } else { crypto_free_skcipher ( skcipher ) ; return NULL ; }",0
911,<S2SV_ModStart> = 0 ; if ( sha -> msg_len < 0 ) return - EINVAL ; if ( <S2SV_ModStart> -> msg_len < 0 ) return - EINVAL ; if ( <S2SV_ModStart> -> msg_len < 0 ) return - EINVAL ; if ( <S2SV_ModStart> -> msg_len < 0 ) return - EINVAL ; if ( sha -> msg_len > 0 ) return - EINVAL ;,0
912,"<S2SV_ModStart> tile_height ) { int tile_stride ; tile_stride = FFALIGN ( c -> tile_width * 3, 16 ) ; aligned_height = FFALIGN ( c -> tile_height, 16 ) ; if (! tile_stride ) return AVERROR ( ENOMEM ) ;",0
913,"<S2SV_ModStart> iv ) ; if ( key == NULL || iv == NULL ) { ossl_raise ( eCipherError, ""key <S2SV_blank> is <S2SV_blank> null"" ) ; return Qnil ; }",0
914,"<S2SV_ModStart> jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) )",0
915,"<S2SV_ModStart> ) ; register_savevm <S2SV_ModEnd> ( dev,",0
916,<S2SV_ModStart> ) { register <S2SV_ModEnd> u_int length = <S2SV_ModStart> ) ; } ND_TCHECK_LEN ( length ) ; <S2SV_ModStart> ) ; } ND_TCHECK_LEN ( length ) ;,0
917,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( referral_walks_count <S2SV_ModStart> referral_walks_count ++ ; <S2SV_ModEnd> } cFYI (,0
918,<S2SV_ModStart> -> len &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ),0
919,<S2SV_ModStart> ) ) ; raptor_sax2_set_uri_filter <S2SV_ModEnd> ( rdf_xml_parser ->,0
920,"<S2SV_ModStart> ; if ( alg_k & SSL_kECDHE ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f",0
921,"<S2SV_ModStart> ) ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAcceptSize, decJoinAccept, versionMinor ) <S2SV_ModEnd> ; } if",0
922,<S2SV_ModStart> = NGHTTP2_SETTINGS ; if ( iframe -> sbuf. len < 4 ) { return NGHTTP2_ERR_INVALID_DATA ; },0
923,<S2SV_ModStart> = ucounts ; if (! new_ns -> user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - EPERM ) ; },0
924,"<S2SV_ModStart> += dif ; memset ( opt2, 0, sizeof ( * opt2 ) ) ;",0
925,"<S2SV_ModStart> ) ; } if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; }",0
926,<S2SV_ModStart> ; int n_read <S2SV_ModEnd> = r -> <S2SV_ModStart> -> dimensions ; if ( n_read < r -> part_size ) n_read = r -> part_size,0
927,<S2SV_ModStart> ) ; u32 last_oow_ack_time = jiffies / HZ <S2SV_ModEnd> ; if ( <S2SV_ModStart> challenge_timestamp ) { last_oow_ack_time = jiffies ; tp -> last_oow_ack_time = now ;,0
928,<S2SV_ModStart> LLC_CMSG_PKTINFO ) { struct llc_pktinfo info ; info. lpi_sap = 0 ; info. lpi_mac = 0,0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> * w, tran_low_t <S2SV_ModEnd> * * tp <S2SV_ModStart> t ] ; tran_low_t <S2SV_ModEnd> * const b <S2SV_ModStart> t ] ; tran_low_t <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ;",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb ; write_uncompressed_header <S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb ; write_uncompressed_header <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> - ENODEV ; } if ( hdesc -> bcdHID ) { hid -> version = le16_to_cpu ( hdesc -> bcdHID ) ; hid -> country = hdesc -> bCountryCode ; } else { hid -> version = 0 ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> -> bNumDescriptors ; n < sizeof ( * hdesc ) ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } if (! rdesc ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
933,"<S2SV_ModStart> ) { struct ikev2_id id ; unsigned int id_len, idtype_len ; unsigned int dumpascii, dumphex ; const unsigned char * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = id_len - sizeof ( struct ikev2_id ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> type=%u"", idtype_len ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), idtype_len ) ) goto trunc ; } ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, sizeof ( id ) )",0
934,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> obj, struct strbuf <S2SV_ModEnd> * path, <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
936,"<S2SV_ModStart> ) ) { if ( id!= MIF_TLX ) { jas_log ( 0, ( ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> TLX <S2SV_blank> ID: <S2SV_blank> %d\\n"", id ) ) ; goto error ; }",0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
938,"<S2SV_ModStart>, h2, fft_jmp ; WORD32 xt0_0, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_l2_1, x_h2_1 ; WORD32 x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_l1_0",0
939,<S2SV_ModStart> ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; if ( unlikely ( len <= 0x7f ) ) goto invalid_eoc ; dp += len ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_,0
940,<S2SV_ModStart> val ; if (! ( flags & __GFP_ZERO ) ) { <S2SV_ModEnd> memset ( ptr,0
941,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return - ENOENT ;,0
942,"<S2SV_ModStart> PHAR_SIG_OPENSSL : { zend_string * pubkey_val = NULL ; zend_string * pubkey_val = NULL ; zend_string_init ( & pubkey_val ) ; if (! ZSTR_LEN ( pubkey_val ) ) { spprintf ( error, 0, ""openssl <S2SV_blank> public <S2SV_blank> key <S2SV_blank> could <S2SV_blank> not <S2SV_blank> be <S2SV_blank> read"" ) ; } else { spprintf ( error, 0, ""openssl <S2SV_blank> public <S2SV_blank> key <S2SV_blank> could <S2SV_blank> not <S2SV_blank> be <S2SV_blank> read"" ) ; } return SUCCESS <S2SV_ModEnd> ; } <S2SV_null>",0
943,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModEnd> search ( value <S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( value, field -> value, count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid && search ( value, field -> value, count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], count ) ) hid_process",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,"<S2SV_ModStart> ; if ( insns_size < 0 ) { return ; } if ( p4_end - p4 < 4 ) { return ; } if ( p4_end - p4 < 4 ) { return ; } if ( p4_end - p4 < 4 ) { return ; } if ( p4_end - p4 < 4 ) { return ; } if ( p4_end - p4 < 4 ) { return ; } if ( p4_end - p4 < 4 ) { return ; } p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p",0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ;",0
947,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ;,0
948,"<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare ) ; if ( imp_sth -> use_server_side_prepare ) { imp_sth -> use_server_side_prepare = TRUE ; } else { imp_sth -> use_server_side_prepare = FALSE ; } # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare ) ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; if ( svp && SvTRUE ( * svp ) ) { imp_sth -> is_async = FALSE ; do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" )",0
949,<S2SV_ModStart> ; if ( key -> type <S2SV_ModEnd> -> destroy ),0
950,"<S2SV_ModStart> ) ) ; if (! state. num ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> need *= 4 <S2SV_ModEnd> ; } ),0
952,<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ;,0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) { strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""-Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( <S2SV_ModEnd> val < 0 <S2SV_ModStart> val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,"<S2SV_ModStart> ; if ( size > 0 && size < 8 ) { char * result ; size_t length ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size = size ; result = my_",0
956,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ( crng_init == 1 <S2SV_ModEnd> ) ) {,0
957,"<S2SV_ModStart> LEX_ID ) { strncat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, jslGetTokenValueAsString ( <S2SV_ModEnd> ), len <S2SV_ModStart> ( str, jslGetTokenValueAsString ( <S2SV_ModEnd> ), len <S2SV_ModStart> ( str, jslGetTokenValueAsString ( <S2SV_ModEnd> ), len <S2SV_ModStart> ( str, jslGetTokenValueAsString ( <S2SV_ModEnd> ), len <S2SV_ModStart> ( str, jslGetTokenValueAsString ( <S2SV_ModEnd> ), len",0
958,"<S2SV_ModStart> ; if ( st. st_mode & ( S_IFREG | S_IFLNK ) ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } <S2SV_ModEnd> if ( (",0
959,,1
960,"<S2SV_ModStart> * output ; <S2SV_ModEnd> register ssize_t i <S2SV_ModStart> MagickFalse ; } if ( argc < 2 ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; <S2SV_ModEnd> return ( MagickTrue <S2SV_ModStart> ) fclose ( output ) ; <S2SV_ModEnd> } <S2SV",0
961,<S2SV_ModStart> ) { SvcInternal_t <S2SV_ModEnd> * const si,0
962,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ) <S2SV_ModEnd>, PTR_ERR (",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> NULL ; char * tmpname_tmp = NULL ; char * tmpname_tmp = NULL ; char * atomic_dir = NULL ; char * tmpname_tmp = NULL ; char * tmpname_tmp = NULL ; char * tmpname_tmp = NULL ; char * tmpname_tmp = NULL ; if ( ( fp = xfmkstemp ( & tmpname, atomic_dir, tmpname_tmp ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t )",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * to = xmpp_stanza_get_to ( message ) ; if (! to ) to = from ; Jid * jid_from = jid_create ( from ) ; Jid * my_jid = jid_create ( to ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_from = jid_create ( to ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_to = jid_create ( to ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_from = jid_create ( to ) ; Jid * my_jid_to = jid_create ( my_jid ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_from = jid_create ( from ) ; Jid * my_jid_to = jid_create ( my_jid ),0
967,"<S2SV_ModStart> ) ; } if ( server. rdb_filename == NULL ) { addReplyError ( c, ""dbfilename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; }",0
968,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; ioerror ( ""fd"" ) ; return 1 ; } name = arg2 ; type = CONF_FD ; } else if ( type == CONF_FD ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,<S2SV_ModStart> ) ) ; if ( st -> st_v1_new_iv. len == 0 ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else { st -> st_v1_new_iv. len = e -> enc_blocksize ; },0
972,<S2SV_ModStart> ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
973,"<S2SV_ModStart> int x, y, i ; if ( x_size < 0 || y_size < 0 ) { return false ; } if ( s_map -> layers [ layer ]. width == 0 || s_map -> layers [ layer ]. height == 0 ) return false ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; for ( x = 0 ; x < old_width && y < old_height ; ++ x ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tile -> tile_index = 0 ; } free ( tilemap ) ; tilemap = malloc",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; <S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; <S2SV_ModStart> 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ len ] ) ) ; ND_PRINT ( ( ndo, "","" ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
976,<S2SV_ModStart> 1 ) res = vpx_encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx ->,0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> om",0
978,<S2SV_ModStart> chunk_num > <S2SV_ModEnd> chm -> num_chunks,0
979,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( sibling, & event -> sibling_list, group_entry ) { if ( sibling -> group_leader!= sibling ) return - EINVAL ; } if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; }",0
980,<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( 0 ) ; } else if ( arg1 == 3 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; } else if (,0
981,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Start"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Layer <S2SV_blank> Start"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Start"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Layer <S2SV_blank> Start"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank>",0
982,<S2SV_ModStart> nsops < 1 || nsops > OABI_MAX_SEM_COUNT || nsops > OABI_MAX_SEM_COUNT,0
983,<S2SV_ModStart> ++ ) s [ i ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for,0
984,"<S2SV_ModStart> ) ; } if ( i < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY =",0
986,<S2SV_ModStart> = 0 ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties < 0 ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } sh. sh_properties = CDF_TOLE4 ( shp -> sh_properties ) ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } sh. sh_properties = CDF_TOLE4 ( shp -> sh_properties ) ; if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } if ( sh. sh_properties > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; },0
987,<S2SV_ModStart> ; } } if ( bytes_matched >= max_bytes_matched ) { if ( matches!= NULL ) * matches = bytes_matched ; return ERROR_SUCCESS ; },0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> jslTokenAsString ( int <S2SV_ModStart> token ) { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STRING : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank> COMMENT"", len ) ; return ; } switch ( token ) { case _LEX_OPERATOR",0
989,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_work, 1 ) ; return ; } init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_work, 1 )",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ; } } if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi )",0
992,"<S2SV_ModStart> ; int err <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> ; uint32_t pos ; struct udf_inode_info * iinfo <S2SV_ModEnd> ; pos = <S2SV_ModStart> pos ) ; if (! bh ) goto out ; symlink = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
993,<S2SV_ModStart>. apic_base & X2APIC_ENABLE <S2SV_ModEnd> ) msr_bitmap =,0
994,<S2SV_ModStart> if ( ent == NULL ) { st = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> ldap_msgfree ( result <S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
995,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
996,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 5 ; break ; case 'n' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_int ( psf, data ) ; } else { header_put_le_int ( psf, data ) ; } ; count += 6 ; break ; } <S2SV_ModEnd> count += 7",0
997,"<S2SV_ModStart> ret ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) { printk ( KERN_INFO ""cx24116: <S2SV_blank> %s("", __func__ ) ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] =",0
998,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
999,"<S2SV_ModStart> ) break ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. maptype!= RT_STANDARD ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1000,"<S2SV_ModStart> 0 ; } if ( is_link ( dest ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( dest ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( dest ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len ; guint pktnum, hr, min, sec, csec, channel [ 10 ], direction [ 10 ] ; <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err",0
1002,<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 ;,0
1003,"<S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & old_data ) ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; }",0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { if (! ibuf -> len ) { ret = - EINVAL ; break ; } <S2SV_ModStart> } else { if (! ibuf -> len ) { ret = - EINVAL ; break ; },0
1006,<S2SV_ModStart> ) ; if (! p -> tokenbuf ) return ; if (,0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> return vp9_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x8 <S2SV_ModEnd> ; } <S2SV_null>,0
1008,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1009,"<S2SV_ModStart> ; if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT",0
1010,<S2SV_ModStart> ) ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dy ) { break ; } } } } } else { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dx ) { if (! comp -> dy ) { break ; } } } } } } } } } } else { if (! comp -> dy ) { if (! comp -> dx ) { if (!,0
1011,<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_DHKEY_INFO ) { if ( dhkey_info. dh_key_len > 32 ) { retval = - 1 ; } else { retval = 0 ; } },0
1012,"<S2SV_ModStart> if ( CheckQuantumMemoryOverflow <S2SV_ModEnd> ( count,",0
1013,"<S2SV_ModStart> -> stratum_port ; else sprintf ( address, ""%s:%s"", url, port ) ;",0
1014,"<S2SV_ModStart> = 0 ; if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; if ( <S2SV_ModStart> ) ; } if ( len < 4 ) return error ( f, VORBIS_invalid_first_page ) ; if ( <S2SV_ModStart> ) ; } if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; if ( <S2SV_ModStart> ) ; if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; <S2SV_ModStart> ) ; } if ( len < 4 ) return error ( f, VORBIS_invalid_first_page ) ; if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; if ( <S2SV_ModStart> ) ; if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; if ( len < 6 ) return error ( f, VORBIS_invalid_first_page ) ; if ( len < 6 ) return error ( f, VORBIS_invalid",0
1015,<S2SV_ModStart> NFSSVC_MAXBLKSIZE_V2 ) return 0 ; if ( head -> iov_len + hdr > rqstp -> rq_arg. page_len ) return 0 ;,0
1016,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; mutex_lock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ;,0
1017,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input ->",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
1019,<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes == NULL ) return 0,0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,<S2SV_ModStart> = bss_desc ; if (! req_ssid ) return - 1 ;,0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EEXIST, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EEXIST, XFS_RANDOM_ATTR_SHORTFORM ), dp, XFS_ERROR ( EEXIST, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EEXIST, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EEXIST, XFS_RANDOM_ATTR_SHORTFORM ), dp, XFS_ERROR ( EEXIST, XFS_RANDOM_ATTR_SHORTFORM ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EEXIST, XFS_R",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify_ex ( X509_CINF, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> ASN1_item_verify ( ASN1_ITEM_rptr",0
1024,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1025,<S2SV_ModStart> l2cap_conf_rfc rfc = { <S2SV_ModEnd>. mode = <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ) ; req -> dcid = cpu_to_le16 ( pi -> dcid,0
1026,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL )",0
1027,<S2SV_ModStart> = 0 ; if (! s -> seekable ) { s -> seekable = - 1 ; s -> line_count = 0 ; },0
1028,<S2SV_ModStart> u4_length ) { if ( ps_dec -> u1_pic_decode_done!= 1 ) { ps_dec -> u1_pic_decode_done = 1 ; },0
1029,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
1030,"<S2SV_ModStart> slen ) ; if ( seed ) err = crypto_rng_set_seed ( tfm, seed ) ; else err = - EINVAL ;",0
1031,"<S2SV_ModStart> = uid ; atomic_set ( & new -> count, 1 ) ; <S2SV_ModStart> } if ( atomic_inc_return ( & ucounts -> count ) > INT_MAX ) { kfree ( new ) ; return NULL ; } <S2SV_ModEnd> spin_unlock_irq ( &",0
1032,<S2SV_ModStart> ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) { err = - EMSGSIZE ; break ; },0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> ( i = 0 ; i < 8 * 32 ; ++ i ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1035,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 && path [ depth ]. p_ext == NULL ) { err = ext4_ext_get_blocks ( handle, inode, path, max_blocks, & newex, bh_result ) ; if ( err ) { err = ext4_ext_get_blocks ( handle, inode, path, max_blocks, & newex, bh_result ) ; if ( err ) err = ext4_ext_get_blocks ( handle, inode, path, max_blocks, & newex, bh_result ) ; if ( err ) { err = ext4_ext_get_blocks ( handle, inode, path, max_blocks, & newex, bh_result ) ; if ( err ) { err = ext4_ext_get_blocks ( handle, inode, path, max_blocks, & newex, bh_result ) ; if ( err ) err = ext4_ext_get_blocks ( handle, inode, path, max_blocks, & newex, bh_result ) ; if ( err ) { err = ext4_ext_get_blocks ( handle, inode",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ; rcu_read_lock ( <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; if ( fmode & ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= open_flags ) goto no_delegation_unlock ;",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1040,"<S2SV_ModStart> * xd, int64_t * out_rate_sum, int64_t * out_dist_sum, int64_t * in_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t square_error ; int64_t quantizer ; int num_pels_log2_lookup = cpi -> num_pels_log2_lookup ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; const BLOCK_SIZE num_pels_log2_lookup = cpi -> num_pels_log2_lookup ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1042,"<S2SV_ModStart> ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> length <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> source <S2SV_blank> address <S2SV_blank> at <S2SV_blank> all!"" ) ) ; return ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT",0
1043,"<S2SV_ModStart>!= '\\0' ) { ptr ++ ; if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; ptr ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; strcpy ( * ret_username, username ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc (",0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,"<S2SV_ModStart> uint32_t backup_handle ; uint32_t backup_size <S2SV_ModStart> ; if ( unlikely ( backup_size > req -> array_size ) ) return - EINVAL ; backup_size = req -> array_size ; if ( unlikely ( backup_size > req -> base_size ) ) return - EINVAL ; <S2SV_ModStart> ; if ( unlikely ( backup_size > req -> base_size ) ) return - EINVAL ; backup_handle = ttm_round_pot ( backup_size ) ; if ( unlikely ( backup_handle > req -> base_size ) ) return - EINVAL ; backup_size = ttm_round_pot ( backup_size ) ; ret = vmw_surface_gb_priv_backup ( dev, backup_size, backup_size, & backup_handle ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = vmw_surface_gb_backup_resource ( dev, backup_handle, backup_size, & backup_handle ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = vmw_surface_gb_backup_resource ( dev, backup_handle, backup_size, & backup_",0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> SEGMENT_LDT ) { <S2SV_ModEnd> struct ldt_struct * <S2SV_ModStart> ldt ; if (! current -> active_mm ) return NULL ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> current -> active_mm -> context. <S2SV_ModEnd> ldt ; if <S2SV_ModStart> ldt -> nr_entries ) desc = & gdt_desc. entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. <S2SV_ModEnd> lock ) ; <S2SV_ModStart> ) ; return desc <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1047,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1 [ 0 ], linesize ) ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } src_ptr1 = src + src_stride * ( height - 1 ) ; src_ptr2 = src + src_stride * ( width - 1 ) ; dst_ptr2 = src + src_stride * ( width - 1 ) ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_",0
1048,"<S2SV_ModStart> * bp ; struct sctp_sockaddr_entry * laddr = NULL ; union sctp_addr * baddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen <S2SV_ModEnd> ; sctp_scope_t scope <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! dst ) { pr_debug ( ""%s: <S2SV_blank> dst=%pI6 <S2SV_blank> - <S2SV_blank> "", __func__, & fl6 -> daddr ) ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2 ; depth -- ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( buf2 == buf ) return ( NULL ) ; if ( p - fmt > sizeof ( s ) ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) p - fmt ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\",0
1051,<S2SV_ModStart> -> protocol_timeout ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; },0
1052,"<S2SV_ModStart> ; while ( ps && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> 1 ) ; if ( ps && ps -> nid < ps -> nid ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; break ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> 1 ) ; if ( ps && io < ie &&! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) io ; }",0
1053,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; osSetEvent <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
1054,"<S2SV_ModStart> NULL ) ; rcu_assign_pointer ( ctx -> key, key ) ;",0
1055,"<S2SV_ModStart> ; if ( level < ASSOC_ARRAY_FAN_OUT || level > ASSOC_ARRAY_FAN_MAX_LEVEL ) { pr_warn ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> levels <S2SV_blank> for <S2SV_blank> assoc_array_insert_into_terminal_node\\n"", __func__ ) ; return false ; } if ( level < ASSOC_ARRAY_FAN_MAX_LEVEL ) { pr_warn ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> levels <S2SV_blank> for <S2SV_blank> assoc_array_insert_into_terminal_node\\n"", __func__ ) ; return false ; } if ( level < ASSOC_ARRAY_FAN_MAX_LEVEL ) { pr_warn ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> levels <S2SV_blank> for <S2SV_blank> assoc_array_insert_into_terminal_node\\n"", __func__ ) ; return false ; } if ( level < ASSOC_ARRAY_FAN_MAX_LEVEL ) { pr_warn ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> levels <S2SV_blank> for <S2SV_blank> assoc_array_insert_into_terminal_node\\n"", __func__ ) ; return false ; }",0
1056,<S2SV_ModStart> ; settings. <S2SV_ModEnd> udpport = 11211 <S2SV_ModStart> = 11211 ; settings. <S2SV_ModEnd> inter = NULL <S2SV_ModStart> = 11211 ; settings. <S2SV_ModEnd> maxconns = 64,0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n11, n21, n31, n01, n12, n22, n32, n03, n13, n23, n33, n00, n01, n10, n11, n21, n31, n01, n10, n11, n12, n12, n22, n32, n03, n13, n23, n33, n00, n01, n10, n11, n21, n31 ; n01 = x_0 + x_2 ; n01 = x_1 + x_3 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n13 = x_5 + x_6 ; n23 = x_5 + x_7 ; n03 = x_4 + x_6 ; n13 = x_5",0
1059,"<S2SV_ModStart> { clips = kmalloc_array ( num_clips, sizeof ( * clips ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; }",0
1060,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge <S2SV_ModEnd> ( * pmd,0
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> ) ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } <S2SV_ModStart> ) ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } <S2SV_ModStart> ) ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; }",0
1063,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( fin, & height, & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank>",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; if ( readw ( chip -> DSPQ + JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; } else wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = 0 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSP",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 1 ) { goto INVALID_OP ; },0
1066,<S2SV_ModStart> acpi_status status ; struct acpi_namespace_node * node ; <S2SV_ModStart> * prev ; struct acpi_namespace_node * next ; node = acpi_gbl_module_code_list ; while ( node ) { prev = next ; next = node -> method. mutex ; next = next -> method. mutex ; } prev = next ; next = next -> method. mutex ; while ( next ) { prev = next ; next = next -> method. mutex ; next = next -> method. mutex ; } <S2SV_ModEnd> # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ns_delete_node ( acpi_gbl_root_node ) ; if ( status ) { status = acpi_ns_delete_node ( acpi_gbl_root_node ) ; if ( status ) { status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { status = ac,0
1067,"<S2SV_ModStart> = GF_FALSE ; if ( the_url == NULL ) { strcpy ( the_url, """" ) ; return - 1 ; }",0
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> ) { priv = vpx_calloc ( <S2SV_ModEnd> 1, sizeof <S2SV_ModStart> ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } } ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; if (! ctx -> config. enc ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = 32768 ;",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED )",0
1071,"<S2SV_ModStart> -> decode ( <S2SV_ModEnd> gb, rc",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk ) return - EINVAL ;",0
1073,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = NULL ; ctx -> fragments. sizes [ 0 ] = data_sz ; } else { ctx -> fragments. ptrs [ 0 ] = NULL ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = NULL ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1074,<S2SV_ModStart> vma ) ; if ( priv -> task ) put_task_struct ( priv -> task ) ;,0
1075,<S2SV_ModStart> buffer ; length = le16_to_cpu ( cap -> bLength ) ; if ( total_len < length ) break ; total_len -= length ;,0
1076,<S2SV_ModStart> ) ) { <S2SV_ModEnd> file_sb_list_del ( file,0
1077,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { enc28j60WriteReg ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * bad_format_imginfo <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++!= '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr == 'l' ) ptr ++ ; else return 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1081,<S2SV_ModStart>! saw_digit ) { result = 0 ; <S2SV_ModStart>! saw_digit ) { <S2SV_ModEnd> break ; } <S2SV_ModStart>! saw_digit ) { result = 0 ; <S2SV_ModEnd> } c -= <S2SV_ModStart> '9' ) ) { result = 0 ; <S2SV_ModEnd> } c -= <S2SV_ModStart> '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result = INT_MAX ; } } <S2SV_ModEnd> } if ( <S2SV_ModStart> trunc ; } return <S2SV_ModEnd> ( too_large?,0
1082,<S2SV_ModStart> ; if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) {,0
1083,"<S2SV_ModStart> ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest <S2SV_ModEnd> ) ; UtRegisterTest",0
1084,"<S2SV_ModStart> = object_length ; if ( add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ add_v1_record ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; }",0
1085,<S2SV_ModStart> ; if ( ( shdr -> sh_flags & SHF_ALWAYS ) && ( shdr -> sh_flags & SHF_ALWAYS ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_ALWAYS ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NONFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF,0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,<S2SV_ModStart> ; if ( j + 4 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + 4 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + 4 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + 4 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + 4 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 2 > length ) return - 1 ; if ( j + 2 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( j + 4 > length ) return - 1 ; if ( cp + 4 > end ) return - 1 ; if ( cp + 4 > end ) return - 1 ; if ( cp + 4 > end ) return - 1 ;,0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory: <S2SV_blank> %d <S2SV_blank> bytes\\n"", cc ) ; return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ; count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; } return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkdirty ( entry ) ; } if ( flags & FAULT_FLAG_EXEC ) { if ( vma -> vm_ops ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, vma, address, pte, pmd, flags, entry ) ; } else { if ( vma -> vm_ops -> fault ) return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; }",0
1090,"<S2SV_ModStart> s ) { char * r ; r = pool_calloc ( <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ), GFP_NOFS ) ; if (! r ) return NULL <S2SV_ModEnd> ; strcpy (",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
1093,<S2SV_ModStart> -> attr_values [ i <S2SV_ModEnd> ] ) ;,0
1094,"<S2SV_ModStart> p_enc ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { msg_Err ( p_enc, ""Not <S2SV_blank> enough <S2SV_blank> samples <S2SV_blank> to <S2SV_blank> encode"" ) ; return NULL ; }",0
1095,"<S2SV_ModStart> ) ) ; if (! mf -> names ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; }",0
1096,"<S2SV_ModStart> ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff )",0
1097,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> j < ( a -> names [ i ]. len >> 1 ) ) return NULL ; <S2SV_ModStart> j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;,0
1098,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1099,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * worker = ctx -> frame_workers ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker",0
1102,"<S2SV_ModStart> ) ; ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } else { cs. d = 0 ; cs. l = 1 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_S",0
1103,"<S2SV_ModStart> ; if ( length == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length == 0 ) { av_log ( ctx -> log_ctx, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\",0
1104,"<S2SV_ModStart> ; if (! NCH ( n ) ) return NULL ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else e = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if (! CHILD ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; if (! newoperator )",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, int mc_avg_y_stride, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int avg_y_stride, <S2SV_ModEnd> int r, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += diff ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( i = 0 ; i < 3 ; ++ i ) { for ( i = 0 ; i < 3 ; ++ i ) { for ( i = 0 ; i < 3 ; ++ i ) { for ( i = 0 ; i < 3 ; ++ i ) { for ( i = 0 ; i < 3 ; ++ i ) { for ( i = 0 ; i",0
1106,"<S2SV_ModStart> ) ) { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } } else { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } }",0
1107,<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_release_all ( ti ) ; # endif,0
1108,<S2SV_ModStart> size ) ; if ( message -> length > message -> size ) { message -> length = message -> size ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> ttl = queueItem -> ancillary. ttl ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } <S2SV_ModEnd> message -> switchPort,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> dst_dev ; if (! xop -> src_dev ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; return ; } pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1111,<S2SV_ModStart> int error ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode = EXT2_I ( inode ) ; if ( ei_info -> i_flags & EXT2_I_NO_XATTR ) { struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode_info = EXT2_I ( inode ) ; if ( ei_info -> i_flags & EXT2_INDEX_BLOCKS ) { struct ext2_inode_info * ei_info = EXT2_I,0
1112,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_set_active_map ( ctx <S2SV_ModEnd>, map ->",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ;",0
1115,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image ->",0
1116,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1117,"<S2SV_ModStart> TSRMLS_DC ) { if ( len > MAX_URL_LEN ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Maximum <S2SV_blank> URL <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len ) ; efree ( state ) ; return NULL ; }",0
1118,<S2SV_ModStart> SUCCESS ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( var ) ;,0
1119,<S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,0
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) return VPX_CODEC_INCAPABLE ; if ( ctx -> frame_parallel_decode ) return VPX_CODEC_INCAPABLE ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; VPxWorker * worker = ctx -> frame_workers ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * frame_worker_data ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * )",0
1122,<S2SV_ModStart>. path ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModEnd> return CURLE_OK ;,0
1123,<S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) return 0 ;,0
1124,"<S2SV_ModStart>, ret ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_BLA ( s ) ) s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_BLA ( s ) ) s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_BLA ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; if ( IS_BLA ( s ) ) s -> max_ra = INT_MAX ; if ( IS",0
1125,<S2SV_ModStart> ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u1_num_mbsNby2 = u1_num_mbs + u1_num_mbsNby2,0
1126,"<S2SV_ModStart>, u4_y_offset ; if ( ps_dec -> e_pic_type == B_PIC ) { ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; } else { ps_dec -> u2_prev_intra_mb = 1 ; } <S2SV_ModStart> B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; } else { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; } if ( ps_dec -> e_pic_type == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; } else { ps_dec -> u2_prev_intra_mb = 0 ; ps_",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = & pbi -> common ; const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; } else { if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } } else { if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const TX_SIZE tx_size <S2SV_ModStart> 1 ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_w ; r += ( 1 << tx_size ) ) { for ( c = 0 ;,0
1130,<S2SV_ModStart> ( random_factor ) ; if ( mm -> mmap_legacy_base == 0 ) { mm -> mmap_legacy_base = TASK_UNINTERRUPTIBLE ; } else { mm -> mmap_legacy_base = TASK_UNINTERRUPTIBLE ; },0
1131,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1132,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt <S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt",0
1133,<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > rowsperstrip ) rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip ;,0
1134,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1136,<S2SV_ModStart> upid == - 1 || upid == 0,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> ( num & ( 1U << ( number <S2SV_ModEnd> - 1 ),0
1139,"<S2SV_ModStart> ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_img_rows ( img, plane ) ; const int rows = vpx_img_cols ( img, plane ) ; const int rows = vpx_img_cols ( img, plane ) ; const int rows = vpx_img_cols ( img, plane ) ; const int rows = vpx",0
1140,"<S2SV_ModStart> ; uint16_t attr_len ; uint16_t bytes_left ; uint16_t blocks_left ; uint16_t last_block_len ; <S2SV_ModStart> avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } bytes_left = avp -> length - sizeof ( struct l2tp_avp_t ) ; blocks_left = avp -> length - sizeof ( struct l2tp_avp_t ) ; last_block_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( bytes_left!= avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", bytes_left, blocks_left, last_block_len ) ; return - 1",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; struct dm_dev * dm_dev = lc -> dev ; return dm_bdev_ioctl ( dm_dev, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
1142,<S2SV_ModStart> ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 7 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag_len = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag_len = CHACHA_,0
1143,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1144,"<S2SV_ModStart> fclose ( fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ;",0
1145,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SIGN <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sign ) flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ;,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; assert ( ( cc % stride ) == 0 ) ;,0
1151,<S2SV_ModStart> <= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1152,"<S2SV_ModStart> line ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ) == 0 && PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ) == 0 && PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
1157,"<S2SV_ModStart> out_unmap ; } if (! bio_flagged ( bio, BIO_UPTODATE ) ) { ret = - EFAULT ; goto out_unmap ; }",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len = <S2SV_ModStart> ""localhost"" ; } if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModEnd> state ( conn <S2SV_ModStart> ; smtpc -> domain = curl_easy_unescape ( <S2SV_ModEnd> conn -> data <S2SV_ModStart>, 0, <S2SV_ModEnd> & len )",0
1160,<S2SV_ModStart> ; i < sizeof ( buf ) <S2SV_ModEnd> && str [,0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> ) + RDS_CONG_MAP_BYTES <S2SV_ModEnd> ; } if <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES <S2SV_ModEnd> ; } if,0
1163,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,<S2SV_ModStart> } return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1166,"<S2SV_ModStart> ; } } if ( printHere ) { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> Vaddr <S2SV_blank> Vaddr <S2SV_blank> Paddr\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> Vaddr <S2SV_blank> Paddr\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""Num <S2SV_blank> Paddr <S2SV_blank> Vaddr <S2SV_blank> Vaddr\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( printHere ) { r",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr, res <S2SV_ModEnd> ) ; if",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { if ( p -> flags & PF_KTHREAD ) { childregs -> ARM_r3 = 0 ; } else { childregs -> ARM_r3 = 0 ; },0
1170,"<S2SV_ModStart> ) { jas_stream_t <S2SV_ModEnd> * stream ; <S2SV_ModStart> ( stream = jas_calloc ( 1, sizeof ( jas_stream_t ), GFP_KERNEL ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_calloc ( 1, sizeof ( jas_cal",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> sshkey * key <S2SV_ModEnd> ; char * <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> ; u_char * userstyle <S2SV_ModEnd>, * ca_s <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * sig, <S2SV_ModStart> ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkalg, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & have_sig, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u",0
1172,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && chunk_header. ckSize && chunk_header. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && chunk_header. ckSize && chunk_header. ckSize + 1 && chunk_header. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", in",0
1173,"<S2SV_ModStart> mech ) ) { ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s,",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
1176,"<S2SV_ModStart> ; if ( db_count < 0 ) { ext2_msg ( sb, KERN_ERR, ""block <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> databases"" ) ; goto failed_sbi ; }",0
1177,<S2SV_ModStart> bd_addr ) { btif_dm_lock ( ) ; btif_dm_unlock ( ) ;,0
1178,"<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", info -> mss ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } else { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; }",0
1179,<S2SV_ModStart> * matrix ; jas_matind_t i ; jas_matind_t numrows_ ; jas_matind_t numcols_ ; jas_matind_t maxrows_ ; jas_matind_t maxcols_ ; jas_matind_t data_ ; jas_matind_t datasize_ ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if ( numrows > maxrows_ || numcols > maxcols_ || numrows > maxrows_ || numcols > maxcols_ ) { jas_matind_ = maxrows_ ; matrix -> maxrows_ = maxrows_ ; matrix -> maxcols_ = maxcols_ ; matrix -> data_ = 0 ; matrix -> datasize_ = maxcols_ ; matrix -> xstart_ = 0 ; matrix -> ystart_ = 0 ; matrix -> yend_ = 0 ; matrix -> xend_ = 0 ; matrix -> ystart_ = 0 ; matrix -> yend_ = 0 ; matrix -> flags_ = 0 ; matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> numcols_ = 0 ; matrix -> data,0
1180,<S2SV_ModStart> ; if (! skb_is_gso ( skb ) ) { err = - EINVAL ; goto slow_path ; },0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_req_ops * req_ops ; struct scsi_disk_req * r ; if (! qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ; req_ops = DO_UPCAST ( struct scsi_disk_req_ops, & s -> qdev, tag, lun, hba_private ) ; req = scsi_req_alloc ( & scsi_disk_reqops, & s -> qdev, tag, lun, hba_private ) ; r = DO_UPCAST ( SCSIDiskReq, <S2SV_ModEnd> req, req <S2SV_ModStart> ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ;",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len - buf -> cursor || nxip > MAX_TXID ) goto bad_format ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur > MAX_TXID ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1185,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; if ( cb -> args [ 0 ] ) { <S2SV_ModStart> = NLM_F_MULTI ; } <S2SV_ModStart> = NLM_F_MULTI ; },0
1186,"<S2SV_ModStart> = - 1 ; struct oe_sock * oe_sock = oe_sock_net ( epoll_ ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; OE_RAISE_ERRNO ( OE_EINVAL ) ; done : return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1187,"<S2SV_ModStart> = upperdir -> d_inode <S2SV_ModEnd> ; int err <S2SV_ModStart> = - ESTALE <S2SV_ModEnd> ; if ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { err = vfs_unlink ( dir, upper, NULL ) ; } inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname ), errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log (",0
1189,<S2SV_ModStart> (! * ptrptr <S2SV_ModEnd> &&! (,0
1190,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; } else if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_,0
1191,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if",0
1193,,1
1194,<S2SV_ModStart> journal_t * journal = EXT4_JOURNAL ( page -> mapping -> host ) <S2SV_ModEnd> ; if (,0
1195,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; writer -> prevent_dispatch = GF_TRUE ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; if (! writer -> chunkDur ) writer -> chunkDur = writer -> stbl -> SampleSize -> sampleSize ; if ( writer -> stbl -> TimeToSample -> nb_entries == 1 ) writer -> chunkDur = writer -> stbl -> TimeToSample -> entries [ 0 ]. sampleDelta ; if ( writer -> stbl -> TimeToSample -> nb_entries == 1 ) writer -> chunkDur = writer -> stbl -> TimeToSample -> entries [ 0 ]. sampleDelta ; if (! writer -> chunkDur ) writer -> chunkDur = writer -> stbl ->",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1197,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy ( md5data, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; outcounter += plen ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1198,<S2SV_ModStart> useSystemLib ) { <S2SV_ModEnd> if ( useSystemLib,0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { SNMP_FREE ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,<S2SV_ModStart> ( sum & 0xfffffe00UL <S2SV_ModEnd> ) == 0xfffffe00UL <S2SV_ModStart> ) == 0xfffffe00UL <S2SV_ModEnd> ) PCDGetBits (,0
1201,"<S2SV_ModStart> ; if ( asdl_typename ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else { arg -> type_comment = NULL ; }",0
1202,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1203,"<S2SV_ModStart> HAVE_IPV6 char * <S2SV_ModEnd> p ; if <S2SV_ModStart> 1 ) { if ( str_len < 2 ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } return estrndup ( str + 1, str_len - 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } <S2SV_ModEnd> return host ;",0
1204,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
1205,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; } else { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c ->",0
1206,"<S2SV_ModStart> ( '%' == <S2SV_ModEnd> ptr [ 1 <S2SV_ModStart> 1 ] ) { ptr += 2 ; } else if ( '{' == ptr [ 1 ] ) { ptr += 2 ; } else { ptr ++ ; } if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } ptr ++ ; if (! end ) {",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE ) { memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index )",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart>, obj_tlen ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( obj_tlen < 4",0
1209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,<S2SV_ModStart> ) ; } if ( skb -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; },0
1212,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. lock ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; <S2SV_ModStart> sta_unblock ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx,0
1213,<S2SV_ModStart> tp_event ) &&! capable ( CAP_SYS_PTRACE <S2SV_ModEnd> ) ) return,0
1214,<S2SV_ModStart> 1 ) ; if (! data_interface ) goto skip_normal_probe ; if (! control_interface ) goto skip_normal_probe ; <S2SV_ModStart> 0 ) ; if (! epread ) goto skip_normal_probe ; if (! epwrite ) goto skip_normal_probe ;,0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> return ; netsnmp_mibindex_init <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } <S2SV_ModEnd> SNMP_FREE ( env_var <S2SV_ModStart> ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var!= NULL ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { add_mibfile ( entry, NULL, NULL ) ; env_var = strdup ( env_",0
1217,"<S2SV_ModStart> * head ; sctp_bind_hashbucket_t <S2SV_ModEnd> * head ; <S2SV_ModStart> -> do_auto_asconf ) { list_add_tail ( & tmplist, & newsp -> asconf_list ) ; sctp_sk ( newsk ) -> bind_hash = NULL ; sctp_sk ( newsk ) -> inet_num = 0 ; sctp_bind_addr_dup ( & newsk -> base. bind_addr, GFP_KERNEL ) ; sctp_skb_for_each ( skb, & oldsk -> sk_receive_queue, tmp ) { sctp_bind_addr_dup ( & newsk -> base. bind_addr, & newsk -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_skb_for_each ( skb, & newsk -> sk_receive_queue, tmp ) { sctp_bind_addr_dup ( & new",0
1218,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ; TEMP_FAILURE_RETRY (",0
1219,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> return INSN_CODE_SEG_PARAMS ( <S2SV_ModStart> ; desc = <S2SV_ModEnd> get_desc ( sel <S2SV_ModStart> ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( screen -> columns == 0 || screen -> rows == 0 ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException",0
1225,<S2SV_ModStart> ; while ( <S2SV_ModEnd> impeg2d_bit_stream_nxt ( ps_stream,0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) { if (! ipc_count ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_COUNT ; } else { if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_COUNT ; }",0
1227,<S2SV_ModStart> NULL ; } if ( method -> is_inflated ) { imethod = ( MonoMethodInflated * ) method ; } else { imethod = ( MonoMethodInflated * ) method ; },0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t tmp ; if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; <S2SV_ModEnd> tmp = simple_strtol",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) < F2FS_MIN_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> is_path ) { const char * repl ; size_t len ; repl = ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; } else { repl = ( ( len == 9 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_platform ) : _",0
1232,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> -> opt_name ) ; opt_space = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ;",0
1234,<S2SV_ModStart> goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ;,0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,"<S2SV_ModStart> ; rt = rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( net ) ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; }",0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1239,"<S2SV_ModStart> -> count ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ;",0
1240,"<S2SV_ModStart> = 0 ; krb5_key_data * key_data = NULL ; if ( key_data_in == NULL ) return NULL ; <S2SV_ModStart> cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB",0
1241,"<S2SV_ModStart> * self, <S2SV_ModEnd> Py_ssize_t idx,",0
1242,"<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_INVAL ; } else { pCsr -> zInput = sqlite3_calloc ( nByte + 1, GFP_NOFS ) ; }",0
1243,<S2SV_ModStart> filp ) { if ( filp ) fput ( filp ) ;,0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mi_sort_index ( <S2SV_ModStart> ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ;",0
1246,"<S2SV_ModStart> } opt = rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1247,<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_,0
1248,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case <S2SV_ModStart> ""Invalid <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ;",0
1249,<S2SV_ModStart> UINT error ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return ERROR_INVALID_DATA ; },0
1250,"<S2SV_ModStart> ; if ( pData -> multicastHops > - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ;",0
1251,"<S2SV_ModStart> 0 ) return <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; ret = - ENOSPC ; } if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ;",0
1252,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt ; struct flowi6 fl6 ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! np -> opt ) { sctp_inc_stats ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; return - EINVAL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,<S2SV_ModStart> ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; },0
1256,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( s == NULL ) return - 1 ; <S2SV_ModStart> = NEGO_STATE_FAIL ; return 0 ;,0
1257,"<S2SV_ModStart>, last_pwd ; osa_princ_ent_rec hist_princ ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; hist_princ = adb. hist_princ ;",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ( t ) ) { result = RLC_ERR ; break ; } <S2SV_ModEnd> case RSA_DEC : <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>!= RSA_PUB ) { result = RLC_ERR ; break ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; break ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= 0 && m_len > 0 ) { result = RLC_",0
1259,<S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS - 1 ) return ERROR_INSUFFICIENT_MEMORY ;,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; <S2SV_ModStart> ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_",0
1262,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) if ( cm -> counts. switchable_interp [ j ] [ i ] < 0 ) { return - 1 ; } <S2SV_ModEnd> count [ i,0
1264,"<S2SV_ModStart> { token ++ ; } if (! token ) { return false ; } if ( token [ 0 ] == '[' ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""lsr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) ) { token += 4 ; } if (! strncmp ( token, ""asr"", 3 ) )",0
1265,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vp9_setup_src_planes ( <S2SV_ModStart> cpi -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd ->",0
1266,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1267,"<S2SV_ModStart> EOFOp 0x07 MemoryInfo * memory_info <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; memory_info = ( MemoryInfo * ) NULL ; <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ReadBlob ( image, memory_info <S2SV_ModEnd>, 2 )",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; mutex_lock ( & snd_cards_mutex ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_cards_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } mutex_lock ( & snd_cards_mutex ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_cards_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } <S2SV_ModEnd> mutex_unlock ( &",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR )",0
1271,<S2SV_ModStart> ; ps_dec -> i4_cur_slice_offset = ps_cur_slice -> i4_cur_slice_offset ; ps_dec -> i4_cur_slice_offset_msb = ps_cur_slice -> i4_cur_slice_offset_msb ; ps_dec -> i4_cur_slice_offset_lsb = ps_cur_slice -> i4_cur_slice_offset_lsb ; ps_dec -> i4_cur_slice_offset_msb = ps_cur_slice -> i4_cur_slice_offset_msb ; ps_dec -> i4_cur_slice_offset_msb = ps_cur_slice -> i4_cur_slice_offset_msb ; ps_dec -> i4_cur_slice_offset_lsb = ps_cur_slice -> i4_cur_slice_offset_lsb ; ps_dec -> i4_cur_slice_offset_msb = ps_cur_slice -> i4_cur_slice_offset_msb ; ps_dec -> i4_cur_slice_offset_msb = ps_cur_,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( item ) ;",0
1273,"<S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } ret = copy_from_user ( exec2_list, ( struct drm_i915_relocation_entry __user * ) ( uintptr_t ) args -> buffers_ptr, sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( ret ) { ret = - EFAULT ; DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> "" ""back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)\\n"", args -> buffer_count, ret ) ; drm_free_large ( exec2_list ) ; return ret ; } ret = i915_gem_do_execbuffer ( dev, args, file,",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> PTR_ERR ( karg ) <S2SV_ModEnd> ; return PTR_ERR <S2SV_ModStart> ) ) ; kfree ( karg ) ;",0
1275,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> const char * <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * buf <S2SV_ModStart> * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ;",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1279,"<S2SV_ModStart> err_info ) { gchar line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; <S2SV_ModStart> FALSE ; } if (! parse_netscreen_hdr ( wth -> random_fh, line, cap_int, & cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( w",0
1280,<S2SV_ModStart> rq ) { u64 <S2SV_ModEnd> irq_time ; u64 <S2SV_ModStart> rq ) ; <S2SV_ModEnd> rq -> clock <S2SV_ModStart> rq ) ; <S2SV_ModEnd> irq_time = irq_time_cpu <S2SV_ModStart> rq ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1281,"<S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
1282,"<S2SV_ModStart> st ) { union blkif_back_rings * blk_rings ; struct blkif_response resp ; unsigned long flags ; int notify ; resp. id = id ; resp. operation = op ; resp. status = st ; spin_lock_irqsave ( & ring -> blk_ring_lock, flags ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default :",0
1283,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return,0
1284,"<S2SV_ModStart> ; if ( exif_test_bit ( datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_BIG ; if ( exif_test_bit ( datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_BIG ) ; if (! exif_test_bit ( o, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } exif_log ( en -> log, EXIF_LOG_CODE_NO_MEMORY, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c",0
1285,"<S2SV_ModStart> safiles ) ; if ( safiles == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1286,<S2SV_ModStart> -> icmp_type == ICMP_ECHO || dp -> icmp_type == ICMP_ECHOREPLY || dp -> icmp_type == ICMP_ECHOREPLY,0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } if ( d_inode ( dir ) -> i_crypt_info ) { ci = d_inode ( dir ) -> i_crypt_info ; } else { ci = NULL ; } <S2SV_ModEnd> dput ( dir,0
1288,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void unbind_ports ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> service_free ( & <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= sizeof ( numbers ) ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if (",0
1290,<S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p8 = context. line_p. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context -> line_p. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p8 = context. line_p. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8,0
1291,"<S2SV_ModStart> n ) ; if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; }",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1293,<S2SV_ModStart> void ) { if ( recovery_mode == RECOVERY_MODE_NONE ) { recovery_mode = RECOVERY_MODE_NONE ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> )",0
1295,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickCoreSignature ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image -> signature == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImage",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; }",0
1297,<S2SV_ModStart> ps_slice_hdr ) { if ( ps_slice_hdr -> st_type == SPEED_2X2 ) { ps_codec -> st_type = SPEED_2X2 ; ps_codec -> st_type = SPEED_2X2 ; ps_codec -> st_type = SPEED_2X2 ; } else { ps_codec -> st_type = SPEED_2X2 ; ps_codec -> st_type = SPEED_2X2 ; } } if ( ps_slice_hdr -> st_type == SPEED_3X4 ) { ps_codec -> st_type = SPEED_3X4 ; ps_codec -> st_type = SPEED_2X4 ; ps_codec -> st_type = SPEED_2X4 ; } else { ps_codec -> st_type = SPEED_2X4 ; ps_codec -> st_type = SPEED_2X4 ; } if ( ps_slice_hdr -> st_type == SPEED_3X4 ) { ps_codec -> st_type = SPEED_3X,0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_TP_VALUE, 0, sizeof ( struct pt_regs ), datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_TP_VALUE, 0, sizeof ( union fp_state ), datap ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; # endif case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ; break ; # endif",0
1299,<S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } temp,0
1300,"<S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; <S2SV_ModStart> child ) { if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc ( 7 ) ; if (! p ) return 0 ; p = ( printbuffer * ) cJSON_malloc (",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,"<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> other )!= sk ) { if ( unix_recvq_full ( sk ) ) writable = 0 ; } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; writable = 0 ; } <S2SV_ModEnd> sock_put ( other",0
1303,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> unsigned char ) c ; } value = ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; value |= buffer [ 4 ] ; value |= buffer [ 5 ] ; value |= buffer [ 6 ] ; value |= buffer [ 7 ] ; value |= buffer [ 8 ] ; value |= buffer [ 9 ] ; value |= buffer [ 10 ] ; value |= buffer [ 11 ] ; value |= buffer [ 12 ] ; value |= buffer [ 13 ] ; value |= buffer [ 14 ] ; value |= buffer [ 15 ] ; value |= buffer [ 16 ] ; value |= buffer [ 15 ] ; value |= buffer [ 16 ] ; value |= buffer [ 13 ] ; value |= buffer [ 14 ] ; value |= buffer [ 15 ] ; value |= buffer [ 15 ] ; value |= buffer [ 16 ] ; value |= buffer [ 15 ] ; value |= buffer [ 13 ] ; value |= buffer [ 12 ] ; value |= buffer [ 13 ] ; value |= buffer [ 14 ] ; value |= buffer [ 15 ] ; value |= buffer [ 15 ] ; value |= buffer [ 15 ],0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ioc ; mutex_lock ( & ioc -> ctx_mutex ) ; <S2SV_ModStart> -> io_context ; mutex_unlock ( & ioc -> ctx_mutex,0
1306,<S2SV_ModStart> 0 ) { if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len + 14 > header -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN,0
1307,<S2SV_ModStart> data ) { unsigned short <S2SV_ModEnd> i ; int <S2SV_ModStart> int ret ; * value = 0 ; if (! pci_is_enabled ( dev ) ) return - ENODEV ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } else if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } else { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags,0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) ; vpx_ref_frame_t * frame = va_arg ( args, vp9_ref_frame_t * ) ; if ( frame == NULL ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vp9_get_reference_enc ( ctx <S2SV_ModEnd>, frame -> <S2SV_ModStart> frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ] ) ; fpl -> count = 0 ;,0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,<S2SV_ModStart> dwc ; if (! req ) return ; <S2SV_ModEnd> list_del ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc,0
1312,"<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa [ YYINITDEPTH ] ; yytype_int16 * yyss ; yytype_int16 * yyvs ; YYSTYPE * yyvsp ; YYSIZE_T yysize_alloc = sizeof ( yysize_alloc ) ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; if ( yylen < 0 ) { yyerrstatus = 0 ; yytype_int16 yyssa [ YYINITDEPTH ] ; yytype_int16 * yyss ; yytype_int16 * yyvs = yyvs ; yytype_int16 * yyvs1 = yyss ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, yysize * sizeof ( * yyssp ), & yyvs1, & yysize_",0
1313,"<S2SV_ModStart> = sas_revalidate_domain, [ DISCE_PROBE ] = sas_probe_devices, [ DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, [ DISCE_DESTRUCT ] = sas_destruct_devices, } <S2SV_ModEnd> ; for (",0
1314,"<S2SV_ModStart>, int rep_quick, myisam_share * share <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) { if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; return - 1 ; }",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ]",0
1316,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
1317,"<S2SV_ModStart> ) ; struct ip_options_data * inet_opt = rcu_dereference_protected ( isk -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> out ; } if ( msg -> msg_name ) { struct sockaddr_in * sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; <S2SV_ModStart> -> cmsg_flags ) ip_cmsg_flags ( msg, & isk -> cmsg_faddr, & sin -> sin_addr, sizeof ( sin -> sin_zero ) ) ; if ( isk -> cmsg_flags ) ip_cmsg_flags ( msg, & isk -> cmsg_faddr, & sin -> sin_addr, sizeof ( sin -> sin_zero ) ) ; <S2SV_ModStart> ( isk -> cmsg_faddr, & sin -> sin_addr, sizeof ( sin -> sin_zero ) )",0
1318,<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_mutex ) ;,0
1319,<S2SV_ModStart> ; } else { size_t size = sizeof ( nw_buf * ) ; if ( size > pool -> max_free_size ) { size = pool -> max_free_size ; pool -> free_arr [ pool -> free ++ ] = buf ; } else { free ( buf ) ; },0
1320,"<S2SV_ModStart> map ; map = bpf_map_inc <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> tp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> 2 ] ) { NESTDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; dp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp ==",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } <S2SV_ModEnd> table_id = ntohs <S2SV_ModStart> ( ipfix_template_record -> TemplateID ) ; count = ntohs ( ipfix_template_record -> FieldCount ) ; dbg_printf ( ""\\n[%u] <S2SV_blank> Template <S2SV_blank> ID: <S2SV_blank> %u\\n"", table_id, count ) ; memset ( ( void * ) cache. common_extensions, 0, sizeof ( uint32_t ) ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map [ i ]. id == ipfix_element_map [ i ]. id ) { uint32_t Type = ipfix_",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < h ; j ++ ) lut [ j ] = - 1 ;",0
1325,"<S2SV_ModStart>, ubits = BN_num_bits ( u ), vbits = BN_num_bits ( v ) ; if ( ubits > BN_num_bits ( c ) ) goto err ; if ( vbits > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_",0
1326,<S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd -> <S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd ->,0
1327,<S2SV_ModStart> ; int strindex <S2SV_ModEnd> ; size_t length,0
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> msg -> oob ) <S2SV_ModEnd> { if ( <S2SV_ModStart> & 7 ; <S2SV_ModEnd> for ( i <S2SV_ModStart> 8 ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; } <S2SV_ModEnd> return value ;",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; unsigned int count ; <S2SV_ModStart> count ; for ( count = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; <S2SV_ModEnd> idx < kcontrol",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> netdev\\n"" ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> netdev\\n"" ) ; goto out ; } status = - EINVAL ; if ( status ) goto out ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> netdev\\n"" ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> netdev\\n"" ) ; goto out ; } if ( status ) goto out ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""Could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> netdev\\n"" ) ;",0
1331,<S2SV_ModStart> * data ; const size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; const size_t <S2SV_ModEnd> size = overhead,0
1332,"<S2SV_ModStart> ) ) ; if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, item -> content, sizeof ( item -> content ) ) ; item -> content = NULL ; } else { strncpy ( item -> content, item_name, sizeof ( item -> content ) ) ; } <S2SV_ModEnd> gtk_widget_set_size_request ( scrolled",0
1333,<S2SV_ModStart> - 2 ; if ( plen < 0 ) return 0 ;,1
1334,"<S2SV_ModStart> { umode_t mode ; mode = posix_acl_mode ( inode, & acl ) <S2SV_ModEnd> ; retval = <S2SV_ModStart> err_out ; } break ; case ACL_TYPE_DEFAULT : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EPERM ; goto err_out ; } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_ACCESS : if (! S_ISDIR ( inode -> i_mode ) { retval = - EPERM ; goto err_out ; } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode",0
1335,"<S2SV_ModStart> ; if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; }",0
1336,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ; default : type = RPC_ERROR_GENERIC ; },0
1337,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FAIL ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } }",0
1339,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { mark_object <S2SV_ModEnd> ( & c,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CH,0
1343,"<S2SV_ModStart>, MB_PREDICTION_MODE mode, <S2SV_ModEnd> TX_SIZE tx_size, <S2SV_ModStart> i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_col, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row, <S2SV_ModStart> 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( above_row,",0
1344,"<S2SV_ModStart> ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> empty <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> :",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1346,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
1347,<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ;,0
1348,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle <S2SV_ModEnd> * ion_handle_get_by_id ( <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = idr_find_entry <S2SV_ModEnd> ( & client <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ;,0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> common ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; if ( cm -> profile > PROFILE_1 ) { vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1350,<S2SV_ModStart> long long_tmp ; # define LONGOPT_UNITS_SI 255 struct option long_options [ LONGOPT_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_MAX_UNITS_SI ] ; # define LONGOPT_MIN_UNITS_SI 255 struct option long_options [ LONGOPT_MAX_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_MAX_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_MAX_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_MAX_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_MAX_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option long_options [ LONGOPT_UNITS_SI ] ; # define LONGOPT_MAX_UNITS_SI 255 struct option,0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
1352,"<S2SV_ModStart> ; if ( asdl_typename ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else { arg -> type_comment = NULL ; } <S2SV_ModEnd> i += 1 <S2SV_ModStart> ; if ( asdl_typename ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i ) ) ; if (",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd -> mode_lf_deltas, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias",0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_",0
1355,<S2SV_ModStart> == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; } else { gemsafe_prkeys [ i ]. ref = 0 ; } },0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE schema ; xmlSchemaParserCtxtPtr ctx ; VALUE errors ; VALUE rb_schema ; VALUE parser_context ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; VALUE parser_context_ptr ; parser_context_ptr = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> au1200fb_device * fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma -> vm_start, fbdev -> fb_len, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> ( LOG_DEBUG, ""Reading <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> %s"" <S2SV_ModEnd>, path, <S2SV_ModStart> ( LOG_DEBUG, ""Reading <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> %s"" <S2SV_ModEnd>, path, <S2SV_ModStart> ( LOG_DEBUG, ""Reading <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> %s"" <S2SV_ModEnd>, path, <S2SV_ModStart> ( LOG_DEBUG, ""Reading <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> from <S2SV_blank> %s <S2SV_blank> %s"" <S2SV_ModEnd>, path,",0
1360,<S2SV_ModStart> 2 ] ; out [ 3 ] = 0 ; out [ 4 ] = 0 ; out [ 5 ] = 0 ; out [ 6 ] = 0 ; out [ 7 ] = 0 ; out [ 8 ] = 0 ; out [ 9 ] = 0 ; out [ 10 ] = 0 ; out [ 11 ] = 0 ; out [ 12 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 12 ] = 0 ; out [ 13 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 14 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] =,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> fanout_mutex ) ; if (! po -> running ) goto out ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_,0
1364,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int utf8s_to_utf16s ( <S2SV_ModStart> len > 0 ) { if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } } else { * op ++ = ( wchar_t ) u ; } op += size ; len -= size ; } } return op - pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null,0
1366,"<S2SV_ModStart>, i ; if ( s -> color_type == PNG_COLOR_TYPE_PALETTE ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1368,"<S2SV_ModStart> = AF_INET6 ; } if ( dt -> vlan_id == NULL ) { dt -> vlan_id = kmalloc ( 2, GFP_NOFS ) ; if (! dt -> vlan_id ) { dt -> vlan_id = kmalloc ( 2, GFP_NOFS ) ; }",0
1369,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( KSZ8851_RXFHSR_RXFV | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXCE ) ) == 0 ) { status &= ( KSZ8851_RXFHSR_RXFV | KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ancillary = NET_DEFAULT",0
1370,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> stmt_ty ast_for_funcdef_impl ( <S2SV_ModStart>, int is_async, asdl_seq * decorator_seq, string type_comment_string <S2SV_ModStart>, returns, type_comment_string <S2SV_ModEnd> ) { identifier <S2SV_ModStart>, returns, type_comment_string <S2SV_ModEnd> ), n <S2SV_ModStart>, returns, type_comment_string <S2SV_ModEnd> ), n <S2SV_ModStart>, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( type_comment_string ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; name_i += 3 ; body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ; if (! body ) return NULL ; type_comment = NULL ; if (! type_comment ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ; if (! type_comment ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i +",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
1372,"<S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; if ( error ) return error ;",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; jas_uint32_t tilewidth ; jas_uint32_t tileheight ; <S2SV_ModStart> numcomps ) ) { return - 1 ; } if (! siz -> width ||! siz -> height ||! siz -> tilewidth ||! siz -> tileheight || siz -> numcomps > 16384 ) { return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return -",0
1374,"<S2SV_ModStart> 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
1375,"<S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely (! iov_ok ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> ; size_t chars = iov_iter_count ( iov, nr_segs ) ; if ( unlikely ( <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; int error, <S2SV_ModEnd> atomic ; if <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> redo : if <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = 0 ; break ; } if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; break ; } if ( buf -> flags & PIPE_BUF_FLAG_",0
1377,"<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if",0
1378,"<S2SV_ModStart> reset_globals ( ) ; if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; }",0
1379,<S2SV_ModStart> ] ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> ) ) ; exit ( 1 ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; exit ( 1 ) <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { exit ( 1 ) <S2SV_ModEnd> ; } fprintf <S2SV_ModStart> ) ) ; exit ( 1 ) <S2SV_ModEnd> ; } <S2SV_null>,0
1380,"<S2SV_ModStart> size_t max_mem ; jas_strncpy ( & max_mem, sizeof ( max_mem ), sizeof ( max_mem ) ) ; <S2SV_ModStart> break ; case OPT_MAXMEM : max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; break ; case OPT_HELP : usage ( ) ; break ; case OPT_INFILE : infile = NULL ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_INFILE : infile = NULL ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = str",0
1381,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else if ( ( RAW ( row, col ) = nonz [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else if ( ( RAW ( row, col ) = nonz [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif",0
1383,"<S2SV_ModStart> needed ) ; if (! nl ) { dm_ioctl_set_error ( filp, - EINVAL ) ; return - EINVAL ; }",0
1384,<S2SV_ModStart> ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1385,"<S2SV_ModStart> vcpu_data vcpu_info ; struct kvm_kernel_irq_routing_entry * e ; struct kvm_kernel_irq_routing_link link ; struct kvm_kernel_irq_routing_link link ; hlist_for_each_entry ( e, & link, link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_unhashed ( & e -> link ) ) continue ; if (! hlist_unhashed ( & e -> link ) ) continue ; hlist_for_each_entry ( e, & link, link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_unhashed ( & e -> link ) ) continue ; if (! hlist_unhashed ( & e -> link ) ) continue ; if (! hlist_unhashed ( &",0
1386,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfqq -> bfqd_lock ) ; spin_unlock_irq ( & bfqq -> bfqd_lock ) ;,0
1387,<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == 0 && rold -> smax_value == 0 && tnum_is_unknown ( rold -> var_off ) ) return false ; if (,0
1388,<S2SV_ModStart> handle ) return NULL <S2SV_ModEnd> ; pointer =,0
1389,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ ( int ) <S2SV_ModStart> orderInfo -> orderType ] <S2SV_ModEnd> ; length +=,0
1390,<S2SV_ModStart> ; if ( new -> d_inode ) { if ( new -> d_inode!= old -> d_inode ) { err = - EBUSY ; goto out ; } },0
1391,<S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; <S2SV_ModStart> ; if ( num_mem > MAX_MATCH_STACK_SIZE ) return - 1 ; if ( num_mem > MAX_MATCH_STACK_SIZE ),0
1392,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
1393,<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0,0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_chain = NULL ;,0
1395,"<S2SV_ModStart> void nonrd_pick_sb_modes ( const VP9_COMP * cpi, TileDataEnc * tile_data, <S2SV_ModStart> x -> e_mbd ; int mi_row = mi_row ; int mi_col = mi_col ; BLOCK_SIZE bsize = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile_data, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
1396,<S2SV_ModStart> ) ) { dev -> hw_features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> hw_features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) dev -> hw_features |= ( NETIF_F_HW_CSUM | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> hw_features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) dev -> hw_features |= ( NETIF_F_HW_CSUM | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if (,0
1397,<S2SV_ModStart> = NULL ; if ( reader. all == NULL ) { * err = EINVAL ; return NULL ; },0
1398,"<S2SV_ModStart> = number_planes_filled ; if ( number_planes_filled > MagickMax ( number_planes, number_colormaps ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> rows ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> number_planes_filled, number_planes ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> -> rows ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = number_planes_filled ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> return __this_address ; if ( be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if (,0
1401,<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_E,0
1402,<S2SV_ModStart> ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( clone_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> res -> outputbuffer, ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'40%%\'>Description</table>"" ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isAddLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isRemoveLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isAddLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isAddLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isRemoveLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isAddLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isAddLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } <S2SV_ModEnd> if ( isAddLiquidityEthCall <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; }",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ; <S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ;",0
1410,<S2SV_ModStart> binary_header. request. key = 0 ; c -> binary_header. request. body = 0 ; c -> binary_header. request.,0
1411,"<S2SV_ModStart> ; if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
1412,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM ; if ( info -> count > SNDRV_CTL_ELEM_MAX_COUNT ) return - EINVAL ; if ( card -> user_ctl_count >= SNDRV_CTL_ELEM_MAX_COUNT ) return - EINVAL ; if ( card -> user_ctl_count >= SNDRV_CTL_ELEM_MAX_COUNT ) return - EINVAL ; if ( card -> user_ctl_count >= SNDRV_CTL_ELEM_MAX_COUNT ) return - EINVAL ;,0
1413,"<S2SV_ModStart> { exit_client ( <S2SV_ModEnd> client_p, client_p <S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"", source_p -> name ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"", source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""SASL"" ) ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"", source_p -> name ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"", source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""SAS",0
1414,<S2SV_ModStart> case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x67 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x26 : case 0x2e : case 0x3e : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x3e : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x3f : if ( mode == X86EMUL_MODE_REAL ) { if ( mode == X86EMUL_MODE_VM86 ) ctxt -> op_bytes = def_op_,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1416,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1417,"<S2SV_ModStart> 16 ) ; if ( xd -> mode_info_context -> mbmi. mode == DC_PRED ) { xd -> mode_info_context -> mbmi. mode = TM_PRED ; } else { distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; }",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 3 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 4 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 5 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 6 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 7 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 8 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 9 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 10 ] = letoh16 ( temp ) ; interface -> mac",0
1419,<S2SV_ModStart> * start ; <S2SV_ModEnd> va_start ( argptr <S2SV_ModStart> ( psf -> header ) ; start = ( <S2SV_ModEnd> ( char * <S2SV_ModStart> ( psf -> header ) + 1 ) ; maxlen = sizeof ( psf -> header ) - 1 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> header <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> header <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> header <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> header,0
1420,"<S2SV_ModStart> ( e -> arp. verdict <S2SV_ModEnd> < 0 && <S2SV_ModStart> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> arp ) ) || visited ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && unconditional ( & e -> arp ) ) || visited ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name",0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; },0
1422,"<S2SV_ModStart> ; case EXIT_REASON_RDPMC : return nested_cpu_has ( vmcs12, CPU_BASED_RDPMC_EXITING ) ; case EXIT_REASON_RDTSC : return nested_cpu_has ( vmcs12, CPU_BASED_RDTSC_EXITING",0
1423,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC",0
1424,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; }",0
1425,<S2SV_ModStart> struct compat_timex ; txc -> modes = tx32. modes ; txc -> freq = tx32. freq ; txc -> maxerror = tx32. maxerror ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> precision = tx32. precision ; txc -> tolerance = tx32. tolerance ;,0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> ) ) ; if ( quote!= Py_CHARMASK ( * s ) ) { s = _PyUnicode_AsString ( raw ) ; } else { s = """" ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } <S2SV_ModEnd> return NULL ;",0
1430,"<S2SV_ModStart> * input_ptr ; int is_keyframe_qaunt_set = 0 ; vpx_codec_err_t res = VPX_CODEC_OK ; svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value )",0
1431,<S2SV_ModStart> return KADM5_BAD_MASK ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_LAST_FAILED ) return KADM5_BAD_MASK ; if ( mask & KADM5_LAST_FAILED ) return KADM5_BAD_MASK ; if ( mask & KADM5_LAST_FAILED ) return,0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int64_t linesize = frame -> linesize [ plane ] ; int64_t h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; data += frame -> linesize [ plane ] ; } checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; }",0
1433,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1437,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION ) && ( ioctl ( slot -> fd, FIONREAD, & size ) == 0 && size ) ) { pthread_mutex_unlock ( & slot_lock ) ; return ; } <S2SV_ModEnd> BTA_JvRfcommWrite ( slot <S2SV_ModStart> id ) ; <S2SV_ModEnd> } else {",0
1438,"<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( len_remain < 4 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> PPI <S2SV_blank> length <S2SV_blank> %u"", __func__, len_remain ) ; return ; } <S2SV_ModStart> phdr ) ; if ( len_remain < 4 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> PPI <S2SV_blank> length <S2SV_blank> %u"", __func__, len_remain ) ; return ; } if ( dlt < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> PPI <S2SV_blank> data <S2SV_blank> length <S2SV_blank> %u"", __func__, dlt ) ; return ; }",0
1439,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> = context -> ChromaSubsamplingLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; if (! context -> priv -> PlaneBuffers ) return FALSE ;,0
1441,"<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; }",0
1442,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; * ( ++ top ) = invert ; break ; case ')' : if ( top - op_stack > nr_preds ) return ERR_PTR ( - EINVAL ) ; * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; break ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1443,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> int target = ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate ) ; } else { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / cpi -> output_framerate ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } return vp9_rc_clamp_iframe_target_",0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> r ) ; vpx_reader_t <S2SV_ModEnd> * r = <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
1446,"<S2SV_ModStart> OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, """,0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 ) return - EINVAL ; if (,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ;",0
1449,"<S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy ( ( <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1063 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
1450,<S2SV_ModStart> ; * ptr = <S2SV_ModEnd> ( existing & <S2SV_ModStart> bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE ) { ptr ++ ; } else { idx += gfx -> data. bpp ; } },0
1451,"<S2SV_ModStart> = args -> cpi <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> 32 ] ; MACROBLOCK * const td = & cpi -> td. plane [ plane ] ; MACROBLOCK_MODE_INFO * const mbmi = & td -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] -> mbmi [ 0 ] ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; const int16_t * scan_order = cpmi -> scan_order ; const int16_t * nb = mbmi -> nb_scan_order ; const int16_t * so = mbmi -> so_scan_order ; const scan_order * so = mbmi -> so_scan_order ; const scan_order * so = mbmi -> so_scan_order ; const int16_",0
1452,<S2SV_ModStart> pSelect -> pSrc ; if ( p -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> shmflg & SHM_RND ) { if ( shmflg & SHM_MAYWRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_MAYWRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_EXEC ) { if ( shmflg & SHM_EXEC ) { if ( shmflg & SHM_EXEC ) { if ( shmflg & SHM_EXEC ) { if ( shmflg & SHM_EXEC ) { if ( shmflg & SHM_EXEC ) { if ( shmflg & SHM_EXEC ) { if ( sh,0
1454,"<S2SV_ModStart> ) ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE <S2SV_ModEnd>, sv_ops )",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ;,0
1458,<S2SV_ModStart> = fd ; msg. msg_namelen = 0 ;,0
1459,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { <S2SV_ModEnd> crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } } <S2SV_ModEnd> } } <S2SV_null>",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> const SvcInternal * <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> { int length ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ;",0
1463,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1464,"<S2SV_ModStart> only_420 ) { const char * _chroma_type = _y4m -> chroma_type ; const char * vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; int ret <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = _y4m -> chroma_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_type, ""4"" ) ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } _y4m -> vpx_bps = _y4m -> vpx_bps <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_type, ""4"" ) ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } _y4m -> vpx_fmt = VPX_IMG_F",0
1465,"<S2SV_ModStart> obj * otmp ; if (! isprint ( buf ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start = SQUASHFS_",0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct env * <S2SV_ModStart> -> root ) ; env -> root. next = NULL ; env -> root. <S2SV_ModStart> } } return env <S2SV_ModEnd> ; } <S2SV_null>,0
1468,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_rows * cm -> mi_cols, sizeof ( cpi -> segmentation_map [ 0 ] ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_cols * sizeof ( cpi -> complexity_map [ 0 ] ) ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; stmt_attributes = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, stmt_attributes, 4 )",0
1470,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1471,<S2SV_ModStart> if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case 0 : context -> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 8 ; } break ; case 1 : context -> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case 2 : context -> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 3 : context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 4 : context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 1 ; } break ; } <S2SV_ModEnd> # ifndef NGIFLIB_,0
1472,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1473,"<S2SV_ModStart> SDRC_ERROR ) ; } if ( sr -> tid_tree == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1474,<S2SV_ModStart> ) ) { if ( cp == buf ) goto screwup ; if ( cp == visbuf ) goto screwup ; if ( cp == visbuf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == visbuf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == visbuf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == visbuf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == visbuf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if ( cp == buf ) goto screwup ; if (,0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * <S2SV_ModEnd> t, * <S2SV_ModStart> * t, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> * argbuf = 0 <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> = outputbuffer ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!= '",0
1476,"<S2SV_ModStart> segs ) { u32 hash <S2SV_ModEnd>, id ; <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1477,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1479,"<S2SV_ModStart> ; if ( getpwnam ( ctl -> pw ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { if ( radiotap_header -> it_version!= IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; if ( get_unaligned_le32 ( & radiotap_header -> it_version ) > IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; iterator -> _rtheader = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _reset_on_ext = 1 ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _arg_index = 0 ; iterator -> current_namespace = & radiotap_ns ; iterator -> is_radiotap_ns = 1 ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & (,0
1481,"<S2SV_ModStart> int err ; struct nfp_abm_u32_filter * filter ; <S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } filter = iter -> filter ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = iter -> mask & mask ; if ( filter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } list_for_each_entry_safe ( iter, & filter -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } else { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( <S2SV_ModEnd> IM, gdImagePtr",0
1483,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } <S2SV_ModEnd> if ( pass <S2SV_ModStart>. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1484,"<S2SV_ModStart> new_data_len ) ; if ( g_str_has_prefix ( new_data, "".service"" ) ) { g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; g_strcpy ( new_data, "".service"" ) ; } else { g_strcpy ( new_data, "".service"" ) ; }",0
1485,<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm ->,0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9Decoder * vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const VP9EncoderConfig <S2SV_ModEnd> * const pbi <S2SV_ModStart> = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; pbi -> lf_worker_init ( & pbi -> lf_worker ) ; return pbi ; }",0
1487,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> count ; } kfree ( new_fpl ) ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ( opt == NULL || opt -> opt. <S2SV_ModEnd> cipso == 0,0
1490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF",0
1492,<S2SV_ModStart> -> wqh ) ; timerfd_ctx_init ( ctx ) ;,0
1493,"<S2SV_ModStart> int err ; struct path * path ; <S2SV_ModStart> dest_mnt ) ) { path = source_mnt -> mnt_mountpoint ; hlist_for_each_entry_safe ( path, n, & path -> mnt_mounts, mnt_hash ) { struct mount * child, * q ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent ->",0
1494,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; }",0
1495,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_13_64, - cospi_19_64 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, - cospi_15_64 ) ; const __m128i k__cospi_p17_m17 = pair_set_epi16 ( cospi_17_64, - cospi_17_64 ) ; const __m128i k__cospi_p11_m21 = pair_set_epi16 ( cospi_11_64, - cospi_11_64 ) ; const __m128i k__cospi_p21_p11 = pair_set_epi16 ( cospi_21_64, - cospi_21_64 ) ; const __m128i k__cospi_p11_m21 = pair_set_epi16 ( cospi_11_64, - cospi_11_64 ) ; const __m128i k__cospi_p",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1499,"<S2SV_ModStart> void encode_superblock ( VP9_COMMON * cm, MACROBLOCK * x, MACROBLOCKD * xd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cpi = & cpi -> common ; <S2SV_ModStart> x = & xd -> <S2SV_ModEnd> e_mbd ; MODE_INFO <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; ctx -> is_coded = 1 ; x -> skip_recode =! ctx -> is_coded ; ctx -> is_coded = 1 ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) ; if ( x -> skip_encode ) return ; if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf. tuning == VP8_T",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> struct crypto_skcipher * <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModEnd> skcipher_setkey ( tfm_des <S2SV_ModStart> 8 ) ; crypto_skcipher_setkey ( tfm_des, key2, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; sg_init_one ( & sgout, out, 8 ) ; skcipher_request_set_",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1502,"<S2SV_ModStart> range_max ) { <S2SV_ModEnd> int position, <S2SV_ModStart>, i, j, bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ;",0
1503,<S2SV_ModStart> delta ; else { if ( i > pos && i + insn -> off + 2 < pos ) insn -> off -= delta ; } else { if ( i > pos && i + insn -> off + 2 < pos ) insn -> off += delta ; else if ( i > pos && i + insn -> off + 2 < pos ) insn -> off -= delta ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 0 ; }",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_",0
1506,"<S2SV_ModStart> = 0, packet -> http_content_length. ptr = NULL, packet -> http_content_length. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, <S2SV_ModEnd> packet -> server_line",0
1507,<S2SV_ModStart> path ) ; if ( error ) { <S2SV_ModStart> nd -> last_type = LAST_LINK ; goto out ; } <S2SV_ModEnd> nd -> last_type,0
1508,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ++ r ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ++ r ;",0
1509,"<S2SV_ModStart> 4 ) { if ( dds_info -> width < x || dds_info -> height < y ) { return MagickFalse ; } <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; <S2SV_ModStart> dds_info, 8 ) ; if ( SyncAuthenticPixels ( image, exception ) == MagickFalse ) return MagickFalse ; q = ( PixelPacket * ) NULL ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = ( PixelPacket * ) NULL ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = ( PixelPacket * ) NULL ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = ( PixelPacket * ) QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return",0
1510,<S2SV_ModStart> length ) { int ret ; <S2SV_ModStart> EINTR ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> action ) ; return ;",0
1512,<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> ; } } <S2SV_ModEnd> } } <S2SV_null>,0
1513,"<S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt (",0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; }",0
1515,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 ] ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 ] ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [,0
1517,"<S2SV_ModStart> ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,"<S2SV_ModStart> * data ; if (! s_check ( s ) ) return ; <S2SV_ModStart> length ) ; if ( status == CLIPRDR_ERROR ) { switch ( type ) { case CLIPRDR_FORMAT_ACK : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_request_data ( format ) ; break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> error <S2SV_blank> (type=%d)"", type ) ; } break ; } switch ( type ) { case CLIPRDR_CONNECT : ui_clip_sync ( ) ; break ; case CLIPRDR_FORMAT_ANNOUNCE : ui_clip_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_request_data ( format ) ; break ; case 7 : break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank>",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if ( l -> type == FORM_TEXTAREA ) { if ( l -> type == FORM_TEXTAREA ) { l = l -> next ; } else if ( l -> type == FORM_TEXTAREA ) { l = l -> prev ; } else if (,0
1521,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> fpDiff"", ""%s"", __FILE__, __LINE__ ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_file, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> fpDiff"", ""%s"", __FILE__, __LINE__ ) ) ; return 0 ; } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte =",0
1525,"<S2SV_ModStart> { uint16 num_updates = 0 ; uint16 left, top, right, bottom, width, height ; uint8 * data ; uint8 * bmpdata ; int size ; logger ( Protocol, Debug, ""%s()"", __func__ ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; Bpp = ( bpp + 7 ) / 8 ; size = ( bpp + 7 ) / 8 ; data = ( uint8 * ) xmalloc ( size ) ; if (! data ) { logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> width=%d, <S2SV_blank> height=%d, <S2SV_blank> Bpp=%d, <S2SV_blank> compression=%d"", left, top, width, height, compress, bufsize ) ; continue ; } if ( compress & 0",0
1526,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> coef_probs = cpi",0
1528,<S2SV_ModStart> } ; assert ( name!= NULL ) ;,0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_settings * settings = d -> priv ; struct dvb_usb_device_ops * ops = d -> priv ; struct dvb_usb_device_state * state = d -> priv ; if ( dvb_usb_generic_rw ( d, state, 3, state, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, state, 3, state, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; state -> data [ 3 ] = 0x83 ; state -> data [ 4 ] = 0 ; state -> data [ 5 ] = 0xe ; state -> data [ 6 ] = 0x83 ; state -> data [ 7 ] = 0",0
1530,"<S2SV_ModStart> iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PART",0
1531,"<S2SV_ModStart> stride, int uv_row, int uv_col, const InterpKernel <S2SV_ModEnd> * const kernel <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> ) ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
1534,"<S2SV_ModStart> goto retry_rebind ; } if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock",0
1535,<S2SV_ModStart> ; float * w ; w = f -> previous_window ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) for ( j = 0 ; j < n ; ++ j ) for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) for ( j = 0 ; j < n ; ++ j ) for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < f -> channels ; ++ j ) for ( j = 0 ; j < f -> channels ; ++ j ) for ( j = 0 ; j < f -> channels ; ++ j ) for ( j = 0 ; j < len ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ right,0
1536,"<S2SV_ModStart> data_end ) { const int num_workers = MIN ( pbi -> oxcf. max_threads, cm -> mi_cols ) ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( pbi -> num_tile_workers == 0 ) { const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; tile_buffers [ 1 << 6 ] = vpx_malloc ( num_workers * sizeof ( * pbi -> tile_buffers ) ) ; if ( pbi -> tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ;",0
1537,<S2SV_ModStart> * 0x101 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ;,0
1538,"<S2SV_ModStart> -> common ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm ->",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFIsTiled ( in ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> samples/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!=",0
1540,<S2SV_ModStart> -> has_detail ) { if ( ctx -> base. err_detail == NULL ) { ctx -> base. err_detail = NULL ; } else { ctx -> base. err_detail = error -> detail ; },0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> bson_validate_with_error ( b, _flags, & error ) ) ;",0
1543,<S2SV_ModStart> ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
1544,<S2SV_ModStart> goto out_unlock ; if (! mmget_still_valid ( mm ) ) { ret = - ENOMEM ; goto out_unlock ; },0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. congest_packet ) ),0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> return df ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
1548,"<S2SV_ModStart> = 0 ; else { ret = - EIO ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1549,"<S2SV_ModStart> { 'S' } ; uint8_t * ssl_request = ( uint8_t * ) & buffer [ 0 ] <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_request, sizeof ssl_request ) ; s_write ( c, c -> local_rfd. fd, ssl_request, sizeof ssl_request ) ; if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ;",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> kf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJOR, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1553,"<S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( (",0
1554,"<S2SV_ModStart>, set_rtrn ) ; if (! ok ) * set_rtrn = false ;",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return mptctl_do_mpt_command ( <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1557,"<S2SV_ModStart> ] ; Image <S2SV_ModEnd> * image ; <S2SV_ModStart> height, length, padding, value, version, columns, rows <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxTextExtent ) && ( <S2SV_ModEnd> length > MaxTextExtent <S2SV_ModStart> ) break ; if ( ( length > MaxText",0
1558,"<S2SV_ModStart> = 0 ; if ( numbands > JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands <S2SV_blank> to <S2SV_blank> encode\\n"" ) ; return - 1 ; }",0
1559,<S2SV_ModStart> = '\\0' ; if ( ( set_flag == '\\0' ) && ( length == 0 ) ) { length = strlen ( argument ) ; if ( length == 0 ) { length = strlen ( argument ) ; if ( length == 0 ) { length = strlen ( argument ) ; } else { length = strlen ( argument ) ; } },0
1560,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> 0 ) return error <S2SV_ModEnd> ; is_valid =,0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx",0
1564,"<S2SV_ModStart> (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( global -> codec -> interface ( ) == NULL ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream -> config. cfg ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( global -> codec -> interface ( ) ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; stream -> next = NULL ; }",0
1565,"<S2SV_ModStart> ( ndo, ""\\n\\t\\n\\t\\n\\t\\n\\t\\n\\t\\n\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ndo, ""\\n\\t\\n\\t\\n\\t\\n\\t\\t\\n\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\",0
1566,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } },0
1567,"<S2SV_ModStart> DICT_PATH_SHARED ) ; if ( iter -> var_expand_table == NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ;",0
1568,<S2SV_ModStart> return 0 ; if ( A < 0 || A >= skb -> len ) return 0 ; <S2SV_ModStart> A ] ; if ( nla -> nla_len > A - skb -> len <S2SV_ModEnd> ) return 0,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>""",0
1571,<S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len > SC_MAX_SERIALNR ) { return SC_ERROR_FILE_NOT_FOUND ; },0
1572,<S2SV_ModStart> = 0 ; tok -> type_comments = 0 ;,0
1573,"<S2SV_ModStart> maxBitrate ; } av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } }",0
1574,<S2SV_ModStart> r ] = '\\0' ; if ( r < 0 ) return r ;,0
1575,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS,0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SS,0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( length!= 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %"" PRIu8 """", length ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions_rcu * opt_rcu <S2SV_ModStart> np ) ; opt_rcu = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_rcu == NULL ) { opt_rcu = & opt_space ; }",0
1580,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart>, fsize ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size ; size_t <S2SV_ModEnd> j ; struct <S2SV_ModStart>, hdr_size, j ; size_t <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, dsize, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, dsize, <S2SV_ModEnd> pe_plus, corrupted_cur <S2SV_ModStart>, dsize, <S2SV_ModEnd> pe_plus ) ;",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS )",0
1582,"<S2SV_ModStart> = 0 ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> tiff_datasize > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> tiff_datasize > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input )",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> new_parent ) ; old_cred = __task_cred ( child ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> ) { rc = <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> ) ) ; } if ( rc == pcmk_ok ) { rc = <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> >> 3 } ; int num00, tmp_err, n, sr = 0, step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err =",0
1587,"<S2SV_ModStart> goto error ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1588,<S2SV_ModStart> ) ) ; if ( merged -> reqbody_limit == NOT_SET ) merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; if ( merged -> reqbody_no_files_limit == NOT_SET ) merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ;,0
1589,"<S2SV_ModStart> -> msg_controllen ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ;",0
1590,"<S2SV_ModStart>, number_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, one, number_planes_filled, number_colormaps, number_planes, number_planes_filled, number_pixels, number_planes_filled <S2SV_ModStart>, number_pixels, number_planes_filled <S2SV_ModEnd>, background_color, <S2SV_ModStart>, background_color, number_planes, number_planes_filled <S2SV_ModEnd> ) ; pixel_info",0
1591,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> iv, comp -> iv_len ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> cipher, sizeof ( comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) ) )!= 0 || ( r = sshbuf_put_string ( b",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,"<S2SV_ModStart> cib_client_t * client = ( cib_client_t * ) gpointer_to_ptr ( user_data ) ; if ( client == NULL ) { return ; } <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; g_object_unref ( & client -> object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_",0
1594,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { thread -> twups = NULL ; continue ; } <S2SV_ModEnd> thread -> twups <S2SV_ModStart> next ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
