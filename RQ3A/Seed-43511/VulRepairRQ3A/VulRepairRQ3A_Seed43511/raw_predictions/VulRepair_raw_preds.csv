,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 && nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 && nonce1 && nonce1 [ n2size - 1 ] == '\\0' ) nonce1 = nonce1 [ n2size - 1 ] ; if ( nonce1 && nonce1 && nonce1 [ n2size - 1,0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 )",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( add_mcs ( ym -> bits, ym -> bitrate, 0 ) ) { kfree ( ym ) ; return - EINVAL ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; break ; case SIOCYAMSCFG : if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( add_mcs ( ym -> bits, ym -> bitrate, 0 ) ) return - EINVAL ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) )",0
4,<S2SV_ModStart> ; if ( ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
5,"<S2SV_ModStart> int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb32 ( f ) ; } index -> items = av_mallocz_array ( index -> item_count, sizeof ( MOVFragmentIndexItem ) ) ; if (! index -> items ) { index -> item_count = 0 ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else { time = avio_rb64 ( f ) ; offset = avio_rb32 ( f ) ; } index -> items = av_mallocz_array ( index -> item_count, sizeof ( MOVFragmentIndexItem ) ) ; if (! index -> items ) { index -> item_count =",0
6,"<S2SV_ModStart> * tpg ; u64 tpgt <S2SV_ModEnd> ; int ret <S2SV_ModStart> ""tpgt_"" )!= name ) return ERR_PTR ( - EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } ret = core_tpg_register ( & tpg -> se_tpg, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { kfree ( tpg ) ; return NULL ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; return",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> ; vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) return ; if ( test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) apic_sync_pv_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ) return ; if ( test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) apic_sync_pv_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ) return ; if ( test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_",0
9,<S2SV_ModStart> src ) ; flush_spe_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data )",0
12,"<S2SV_ModStart> = NEXTHDR_FRAGMENT ; memset ( fptr, 0, sizeof ( * fptr ) ) ;",0
13,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart>, & data, NULL <S2SV_ModEnd> ) ; perf_swevent_put_recursion_context",0
14,"<S2SV_ModStart> ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) )",0
15,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fdct16 ( const <S2SV_ModStart> 16 ] ) { int32_t step1 [ 8 ] ; int32_t step2 [ 8 ] ; int32_t step3 [ 8 ] ; int32_t step4 [ 8 ] ; int32_t step5 [ 8 ] ; int32_t step6 [ 8 ] ; int32_t step7 [ 8 ] ; int temp0, temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 13 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; t0, t1, t2, t3 ; t0 = input [ 0 ] + input [ 7 ] ; t",0
16,"<S2SV_ModStart> env ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env, env -> prog -> aux -> offload, env ) ; if ( ret < 0 ) goto err_unlock ; } else if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env, env -> prog -> aux -> offload, env ) ; if ( ret < 0 ) goto err_unlock ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env, env -> prog -> aux -> offload, env ) ; if ( ret < 0 ) goto err_unlock ; } else if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env, env -> prog -> aux -> offload, env ) ; if ( ret < 0 ) goto err_unlock ; env -> strict_alignment = false ; } else { ret = replace_map_fd_with_map_ptr ( env, env -> prog -> aux -> offload, env ) ; if ( ret",0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) { config -> sample_rate /= sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; } } if ( config -> flags & CONFIG_HYBRID_FLAG ) { strcpy ( wpc -> error_message, ""hybrid <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> available <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = config -> xmode = 0 ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = 0 ; config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_PAIR_UNDEF_CHANS ) ;",0
18,"<S2SV_ModStart> scsi_device * SDev ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_normalize_sense ( cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; goto retry ; } if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank>",0
19,"<S2SV_ModStart> ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # <S2SV_ModStart> ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else if ( get4 ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."" <S2SV_ModEnd>, offset, <S2SV_ModStart> offset ) ; luaL_checkstack ( L, 2, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."" <S2SV_ModEnd>, offset,",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mvcomp -> sign ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { vpx_write ( w, mvcomp -> sign ) ; vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0_fp [ d ], & mv_class0_encodings [ fr ] ) ; } else { vpx_write ( w, hp, mvcomp ->",0
23,<S2SV_ModStart> base ) ; if (! rcu_dereference ( ralg -> cra_rng ) ) return 0 ; return rcu_dereference ( ralg -> seedsize ) <S2SV_ModEnd> ; } <S2SV_null>,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) || sockaddr_len > sizeof ( struct sockaddr_pppox ) - sizeof ( struct sockaddr_pppox ) - sizeof ( struct sockaddr_pppox ) - sizeof ( struct sockaddr_pppox ) - sizeof ( struct sockaddr_pppox ) - sizeof ( struct sockaddr_pppox ) - sizeof ( struct sockaddr_pppox ) goto end ; sp -> sa_protocol = PX_PROTO_PPTP ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family = AF_INET ; sp -> sa_family,0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; jas_image_t * <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_FAILURE ) ; } break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> decode <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ; } if (! ( fmtname = jas_image_fmttostr ( fmt",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char",0
29,<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = interface_to_host ( intf ) ; struct usb_host_interface * intf2 = interface_to_usb_interface ( intf ) ; struct usb_host_interface * intf3 = interface_to_usb_interface ( intf ) ; if ( intf2 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf2 -> desc. bNumInterfaces - 1 ; if ( alt < 0 ) return - ENODEV,0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> from, int len <S2SV_ModEnd>, unsigned char <S2SV_ModStart>, unsigned char * from, int len <S2SV_ModEnd> ) { struct <S2SV_ModStart> case 2 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 3 : memcpy ( p, ""./"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""../"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"",",0
31,"<S2SV_ModStart> ; } else if ( server. tcpkeepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. tcpkeepalive < 0 ) { err = ""Invalid <S2SV_blank> tcp-keepalive <S2SV_blank> value"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( server. protected_mode == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ;",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> ; if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 2 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 2 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> endpoints\\n"" ) ; goto error ; } if ( endpoint -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; goto",0
34,"<S2SV_ModStart> -> sh_name ] ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else <S2SV_ModEnd> { switch ( <S2SV_ModStart> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; dest_keyring = key_get ( cred -> user -> uid_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred -> group_keyring ) ; if ( dest_keyring ) break ;,0
36,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) || <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ) ) return - EINVAL ; if ( addr -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( sk -> sk_state!= TCP_CLOSE || addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = inet -> inet_saddr = addr -> l2tp_addr. s_addr ; if (,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> ) ) { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } else { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } <S2SV_ModEnd> return max ;,0
39,"<S2SV_ModStart> ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" ), RESPONSE_MARK_TRUSTED ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; }",0
40,"<S2SV_ModStart> ; tm = g_time_to_tm ( t ) ; if ( tm == NULL ) { g_throw ( G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_LOG_ERROR, G_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_TO_TICKS_",0
41,"<S2SV_ModStart> length ) ; if ( type == PW_PASSWORD ) { vector = ( unsigned char * ) password ; } else { vector = ( unsigned char * ) secret ; } MD5Init ( & md5_secret ) ; MD5Update ( & md5_secret, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed,",0
42,"<S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_settings * settings = { d -> dev, & s421_m88rs2000_config, } ; struct dvb_usb_i2c_adapter * i2c_adap = adap -> i2c_adap ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> dev",0
43,"<S2SV_ModStart> = sock_net ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; return ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart>, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, <S2SV_ModEnd> ep, asoc <S2SV_ModStart>, GFP_ATOMIC ) ; <S2SV_ModEnd> if ( error <S2SV_ModStart> error ) { sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT )",0
44,"<S2SV_ModStart>! strcmp ( name, ""group_time"" ) ) group_time_str = value ; else if (! strcmp ( name, ""group_time"" ) ) group_time_str = value ; else if (! strcmp ( name, ""group_time"" ) ) group_time_str = value ; else if (! strcmp ( name, ""group_time"" ) ) group_time_str = value ; else if (! strcmp ( name, ""group_time"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_time_str = value ; else if (! strcmp ( name, ""groups"" ) ) group_",0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8_impl (,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein < 0 || scanlinesizeout < 0 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; } inbuf = _TIFFmalloc ( scanlinesizein ) ; if (! inbuf ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; } outbuf = _TIFFmalloc ( scanlinesizeout ) ; if (! inbuf ||! outbuf ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; } if ( TIFFReadScanline ( in, inbuf, row, 0 ) < 0 &&! ignore ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can <S2SV_blank> read <S2SV_blank> scanline <S2SV_blank> %lu"", ( unsigned long ) row ) ; goto bad",0
47,<S2SV_ModStart> ) ; struct <S2SV_ModEnd> address_space * mapping <S2SV_ModStart> hugetlb_lock ) ; lock_page ( page ) ; <S2SV_ModStart> hugetlb_lock ) ; unlock_page ( page ) ;,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid",0
49,"<S2SV_ModStart> goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_message_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { if ( sd_bus_error_has_name ( & error, B",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { get_page ( buf -> page ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, encr_p_map ) ; map = encr_t_map ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; break ; case IV2_T_PRF : idstr = STR_OR_ID ( t_id, prf_p_map ) ; map = encr_t_map ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; map = encr_t_map ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; map = encr_t_map ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; map = encr_t_map ;",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; }",0
54,"<S2SV_ModStart> wp ) { if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { int trans_to_still = 0 ; const FIRSTPASS_STATS * position = & twopass -> stats_in ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame.",0
56,<S2SV_ModStart> ; } if ( IS_ERR ( handle -> h_transaction ) ) { if ( IS_ERR ( handle -> h_transaction ) ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; } else { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; } } if ( handle -> h_err ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle ->,0
57,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) )",0
59,<S2SV_ModStart> alg ) { if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ) ) return ERR_PTR ( - EPERM ) ; if (! capable ( CAP_SYS_ADMIN ),0
60,"<S2SV_ModStart> 2 ) { switch ( stlv_type ) { case ISIS_SUBTLV_SPB_INSTANCE : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "", <S2SV_blank> Path <S2SV_blank> Cost: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "", <S2SV_blank> Prio: <S2SV_blank> %d"", EXTRACT_16BITS ( tptr ) ) ) ; tptr = tptr + 2 ; ND_PRINT ( ( ndo, "", <S2SV_blank> V: <S2SV_blank> %d"", ( EXTRACT_16BITS ( tptr ) >> 4 ) &",0
61,"<S2SV_ModStart> ) { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,"<S2SV_ModStart> ) opt ; ND_TCHECK_64BITS ( mpc -> sender_key ) ; ND_TCHECK_64BITS ( mpc -> receiver_key ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; uid_t old_uid ; gid_t old_gid ; <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SH",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\",0
66,<S2SV_ModStart> = ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biBitsPerSample = ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitsPerSample = ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 24 ) ) ; header -> biBitsPerSample |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { int ret = scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, cmd ) ; if ( ret ) return ret ; ret = scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, cmd, arg ) ; if ( ret ) return ret <S2SV_ModEnd> ; } <S2SV_null>",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; unsigned int <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return - EFAULT ; ureq = memdup_user ( udata, sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; if (! qeth_adp_supported ( card, IPA_SETADP_SET_SNMP_CONTROL ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return - ENOMEM ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ;",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num_video ) ; av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\",0
76,"<S2SV_ModStart> ; if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> material <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; continue ; } if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; continue ; } if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; continue ; } if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; continue ; } if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; continue ; } if (! st ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ;",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; if ( psf -> fileoffset >= psf -> size ) { psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"", psf -> size ) ; return 0 ; } <S2SV_ModEnd> psf_binheader_readf ( psf <S2SV_ModStart> psf -> fileoffset ) ; return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null",0
79,"<S2SV_ModStart> ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info",0
80,<S2SV_ModStart> ; return NF_STOLEN <S2SV_ModEnd> ; } <S2SV_null>,0
81,"<S2SV_ModStart> * up ; size_t len = nla_len ( rta ) ; <S2SV_ModStart> rta ) ; len = min_t ( size_t, len, xfrm_replay_state_esn_len ( up ) ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } <S2SV_ModStart> - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ;,0
84,"<S2SV_ModStart> LINK_KEY ) ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyLength"", ( int ) pin_length ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_int ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= bt",0
85,"<S2SV_ModStart> ( buf = jas_calloc <S2SV_ModEnd> ( bufsize, <S2SV_ModStart> ) ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix_t ), stride ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix_t ), stride ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix_t ), stride ) ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix_t ), stride ) ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } if (! jas_safe_size_mul2 ( bufsize, sizeof ( jpc_fix",0
86,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> cfg -> g_usage == ( int ) usage ) { * cfg = map -> cfg ; res = VPX_CODEC_OK ; break ; } } } if ( res!= VPX_CODEC_INVALID_PARAM ) { res = VPX_CODEC_INVALID_PARAM ; } else { res = VPX_CODEC_INVALID_PARAM ; for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> cfg -> g_usage == ( int ) usage ) { * cfg = map -> cfg ; res = VPX_CODEC_OK ; break ; } } },0
87,"<S2SV_ModStart> gso. size ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> size <S2SV_blank> %u.\\n"", gso -> u. gso. size ) ; <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ;",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { char * name = path_name ( path, last ) ; free ( name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
89,"<S2SV_ModStart> ; if ( c == KEY_PULSE ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> pulse <S2SV_blank> DTR <S2SV_blank> ***\\r\\n"" ) ; r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_lower_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_",0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> lock ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> lock ) ;,0
91,"<S2SV_ModStart> type_flags ) { struct net * net = sock_net ( sk ) ; struct <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; if ( po -> fanout ) { mutex_unlock ( & fanout_mutex ) ; return - EALREADY ; } if ( type == PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : case PACKET_FANOUT_CBPF : case PACKET_FANOUT_EBPF : mutex_lock ( & fanout_mutex ) ; po -> fanout = kzalloc ( sizeof ( * po -> fanout ), GFP_KERNEL ) ; if (! po -> fanout ) return - ENOMEM ; atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } else { mutex_unlock ( & fanout_mutex ) ; match = NULL ;",0
92,"<S2SV_ModStart> ( newsk ) ; if ( np ) { memcpy ( newnp, np, sizeof ( struct ipv6_pinfo ) ) ; rcu_read_lock ( ) ; opt = rcu_dereference ( newnp -> opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; rcu_read_unlock ( ) ; sctp_v6_to_sk_daddr ( & asoc -> peer. primary_addr, newsk ) ; sctp_v6_to_sk_daddr ( & asoc -> peer. secondary_addr, newsk ) ; opt = ipv6_dup_options ( newsk, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; rcu_read_unlock ( ) ; sctp_v6_to_sk_daddr ( & asoc -> peer. secondary_addr, newsk ) ;",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; }",0
95,"<S2SV_ModStart> ; if ( imp_sth -> use_server_side_prepare ) { if ( imp_sth -> fetch_done ) { do_error ( sth, JW_ERR_SEQUENCE, ""fetch() <S2SV_blank> but <S2SV_blank> fetch <S2SV_blank> already <S2SV_blank> done"", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } if ( imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } } if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } if (! imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; <S2SV_ModStart> ( interface, ENC28J60_ETXNDL, LSB",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,<S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; <S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; <S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; <S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query,0
99,"<S2SV_ModStart> ; if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) == 0 ) { ret = ext4_split_unwritten_extents ( handle, inode, path, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ret = ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_",0
100,"<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ), compproto ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ), compproto ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ), compproto ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, """,0
101,"<S2SV_ModStart> ) ) { if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) )",0
102,"<S2SV_ModStart> flag ) { ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> ; int mbr, mbc ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> u_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer, source -> v_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> u_stride, source -> uv_stride",0
103,"<S2SV_ModStart> ) ) { if (! access_ok ( VERIFY_WRITE, param, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = - EFAULT ; } param += ptr -> length ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr ->",0
104,"<S2SV_ModStart> : if ( ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } } else { if (! capable ( CAP_FULL_SET ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT ) ) { if (! issecure ( SECURE_NOROOT )",0
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache * cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank>",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" ""R2_VERSION\\r\\n"" ""Accept: <S2SV_blank> */*\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"", path, host, ( int ) strlen ( data ) ) ; free ( uri ) ; return NULL ; } if (! r_socket_http_answer ( s, code, rlen ) ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" "" R2_VERSION\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", path, host, ( int ) strlen ( data ) ) ;",0
107,"<S2SV_ModStart> L ) ; if ( c == LUA_SIGNATURE [ 0 ] ) tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; else if ( c == LUA_SIGNATURE [ 0 ] ) tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; else tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; cl = luaF_newLclosure ( L, tf -> nups, hvalue ( gt ( L ) ) ) ; cl -> l. p = tf ; for ( i = 0 ; i < tf -> nups ; i ++ ) cl -> l. upvals [ i ] = luaF_newupval ( L ) ; for ( i = 0 ; i < tf -> nups ; i ++ ) cl -> l. upvals [ i ]",0
108,"<S2SV_ModStart> = 0 ; struct ip_options_data opt ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt ) goto out ; inet_opt = rcu_dereference_protected ( net -> ipv4. inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) inet_opt -> inet_opt = inet_opt ; spin_lock_bh ( & inet_opt -> inet_opt_lock ) ; spin_unlock_bh ( & inet -> inet_opt_lock ) ; spin_unlock_bh ( & inet -> inet_opt_lock ) ; spin_lock_bh ( & inet -> inet_opt. inet_opt_lock ) ; spin_unlock_bh ( & inet -> inet_opt -> inet_opt_lock ) ;",0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( opt && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( opt && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( dev_num, size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM",0
111,"<S2SV_ModStart> ; trunc : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; } if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { case RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) : case RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) : if ( dio -> rpl_mopprf == RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) ) { case RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) : case RPL_DIO_GROUNDED ( dio -> rpl_mopprf ) : case RPL_DIO_GROUNDED ( dio -> rpl_moppr",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_type, pdu_len ) ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_",0
113,"<S2SV_ModStart> ; int n, len ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart> facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities.",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( set_termcap ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank>",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & acl ) ; if ( ret ) goto out ; } else { ret = - EINVAL ; goto out ; }",0
117,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> write_lock ( & <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, &",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : isoclns_print <S2SV_ModEnd> ( ndo,",0
119,"<S2SV_ModStart> '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } for ( ; ; ) { if ( src [ 0 ] == '/' ) { src ++ ; continue ; } else if ( src [ 0 ] == '.' ) { if ( src [ 1 ] == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } } for ( ; ; ) { if ( src [ 0 ] == '/' ) { src ++ ; continue ; } else if ( src [ 1 ] == '.' ) { if ( src [ 2 ] == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT32 bitsSwizzled ; * ( UINT32 * ) tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 *",0
121,"<S2SV_ModStart> size_t size ; if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, vstep, 0 ) ||! jas_safe_intfast32_add ( tlx, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, vstep, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_",0
122,<S2SV_ModStart> ) { return ( tdata_t ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> s ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
123,"<S2SV_ModStart> ; if ( copy > count ) { ret = - EINVAL ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } copy = sizeof ( cmd. cmd. recv_ctrl ) ; dest = & cmd. cmd. recv_ctrl ; src = & ucmd -> cmd. recv_ctrl ; break ; case QIB_CMD_RECV_CTRL : copy = sizeof ( cmd. cmd. recv_ctrl ) ; dest = & cmd. cmd. recv_ctrl ; src = & ucmd -> cmd. recv_ctrl ; break ; case QIB_CMD_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_TID_UPDATE : case QIB_CMD_TID_FREE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid",0
124,<S2SV_ModStart> goto END_OF_READING ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo (,0
125,<S2SV_ModStart> peer ) { spin_unlock_bh ( & net -> nsid_lock ) ; return peer ; } <S2SV_ModEnd> spin_unlock_bh ( &,0
126,<S2SV_ModStart> i ] == '\\r' && i < ( int ) header_buf_used && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\r' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\r' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [ i ] == '\\n' && i < ( int ) header_buf_used && header_buf [,0
127,"<S2SV_ModStart> (! ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( c_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_END_LLDP_TLV ) ) goto toobig ; if (! ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( c_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_END_LLDP_TLV ) ) goto toobig ; if (! ( POKE_START_LLDP_TLV ( LLDP_TLV_ORG_DOT1 ) && POKE_BYTES ( dot1, sizeof ( dot1 ) ) && POKE_BYTES",0
128,<S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen - 1 && flags & FLAG_LAST_MATCHED ) || ( pc + asn1_op_lengths [ op ] > datalen - 1 && flags & FLAG_INDEFINITE_LENGTH ) || ( pc + asn1_op_lengths [ op ] > datalen - 1 ) || ( pc + asn1_op_lengths [ op ] > datalen - 1 && flags & FLAG_INDEFINITE_LENGTH ) || ( pc + asn1_op_lengths [ op ] > datalen - 1 && flags & FLAG_LAST_MATCHED ) || ( pc + asn1_op_lengths [ op ] > datalen - 1 && flags & FLAG_INDEFINITE_LENGTH ) || ( dp + asn1_op_lengths [ op ] > datalen - 1 && flags & FLAG_LAST_MATCHED ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; },0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> peerparams, 0, sizeof ( struct sctp_event_peerparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ; memset ( & sp -> remoteparams, 0, sizeof ( struct sctp_event_remoteparams ) ) ) ; memset ( & sp -> remoteparams",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; } else { s -> avctx -> profile = 0 ; } <S2SV_ModEnd> return 0 ;",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> LSM <S2SV_blank> rule <S2SV_blank> %d\\n"", __func__, lsm_rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> LSM <S2SV_blank> rule <S2SV_blank> %d\\n"", __func__, result ) ; return result ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <script <S2SV_blank> type=\\""text/javascript\\"">\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <script <S2SV_blank> type=\\""text/javascript\\"">\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <script <S2SV_blank> type=\\""text/javascript\\"">\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <script <S2SV_blank> type=\\""text/javascript\\"">\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <script <S2SV_blank> type=\\""text/javascript\\"">\\n""",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; size_t attrlen, bitmap [ 3 ] ; __be32 * savep ; size_t hdrlen ; u32 recvd ; <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) goto out ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; }",0
137,<S2SV_ModStart> ; if ( ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
138,"<S2SV_ModStart> while ( ( ( <S2SV_ModStart> i < to_read ) && (! gf_is_zero ( tmpName [ i ] ) ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG",0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ) ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; } break ; case 0 : { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < height ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; } break ; case 4 :",0
141,"<S2SV_ModStart> '/' ) { strncpy <S2SV_ModEnd> ( szFileName, <S2SV_ModStart> pszFileName ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszString ) > ODBC_FILENAME_MAX",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } }",0
143,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements =,0
144,"<S2SV_ModStart> ; if ( inet -> inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> eigrp_tlv_at_ext ; } if ( eigrp_tlv_len > eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len > eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len > eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len > eigrp_tlv_len ) ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank>",0
147,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER int number_aau ; if ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) ; ) return NULL ; } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # else number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif",0
148,"<S2SV_ModStart> ; int res <S2SV_ModEnd> ; int indexes <S2SV_ModStart> inodes ) ; long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [",0
149,"<S2SV_ModStart> ) ; } if ( strcmp ( ptr, '/' ) == 0 ) { rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= <S2SV_ModEnd> EXT4_GET_BLOCKS_PRE_IO ;,0
151,<S2SV_ModStart> } else return apr_psprintf <S2SV_ModEnd> ( cmd ->,0
152,"<S2SV_ModStart> ) ) ; dst = rcu_dereference_protected ( <S2SV_ModStart> np -> opt, sock_owned_by_user ( sk ) ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; return PTR_ERR ( dst ) ; } dst = ip6_dst_lookup_flow ( sk, & fl6, dst ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; return PTR_ERR ( dst ) ; } dst = ip6_dst_lookup_flow ( sk, & fl6, dst ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; }",0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0 ; uint16 planar = 0 ; uint16 bps = 0, spp = 0 ; uint16 subsampling_horiz = 0, subsampling_vert = 0 ; uint16 orientation = 0 ; uint16 input_photometric = 0 ; uint16 input_compression = 0 ; uint16 input_photometric = 0 ; uint16 input_photometric = 0 ; TIFFGetFieldDefaulted ( in, TIFFTAG_PLANARCONFIG, & planar ) ; if (! TIFFGetField ( in, TIFFTAG_COMPRESSION, & input_compression ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> Photometric <S2SV_blank> interpreation <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & scanlinesize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanline <S2SV_blank> size",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_host ) ; debug ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_host ) ; debug ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> listen <S2SV_blank> %d <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_host ) ; debug ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_host ) ; debug ( ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_host, fwd. listen_port ) ; debug ( ""server_input_global_request: <S2SV_blank> tcpip-",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> = 0 ; unsigned long data_size ; <S2SV_ModStart> goto out ; data_size = EXT4_I ( inode ) -> i_data_size ; if ( data_size > EXT4_I ( inode ) -> i_data_size ) data_size = EXT4_I ( inode ) -> i_data_size ; <S2SV_ModStart> goto out ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( EXT4_EXT_SPACE_BLOCK ( inode, 0 ) ) ; neh -> eh_magic = cpu_to_le16 ( EXT4_EXT_MAGIC ; neh -> eh_magic = EXT4_EXT_MAGIC ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ) ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ;",0
160,"<S2SV_ModStart> if ( verify_checks <S2SV_ModEnd> ( c, <S2SV_ModStart> ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, cmac, key_size, cipher_key, iv ) ) goto exit ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; }",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } c -> log2_cblk_width = 0 ; c -> log2_cblk_height = 0 ; c -> log2_cblk_width = 0 ; c -> log2_cblk_height = 0 ; if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHW",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get",0
165,<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ts_status ) ; if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> pkt_type == PACKET_OUTGOING && ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> pkt_type == PACKET_OUTGOING && ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS,0
166,"<S2SV_ModStart> state >= SCTP_STATE_ESTABLISHED ) { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } } else { list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } } else { list_for_each_entry ( trans, & trans -> ipaddr. transport_addr_list, transports ) { sctp_ssnmap_clear ( & trans -> ssnmap ) ; list_for_each_entry ( trans, & asoc -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_add_peer (",0
167,<S2SV_ModStart> return false ; if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> lsm_set_label_at ( int <S2SV_ModStart> lsm_label ) { int labelfd = - 1 ; <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> ap",0
169,<S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT64 ) ( ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ),0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; cpi -> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; } else { cpi -> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; }",0
172,<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; if ( curqlevel == NULL ) { g_error ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_strerror ( pg_,0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry <S2SV_ModEnd> * * pce <S2SV_ModStart> h_hash ) ; struct mb2_cache_entry * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; again : mb2_cache_entry_delete_block ( ext4_mb_cache, ce -> e_block ) ; * pce = NULL ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> = offset ; if (! parse_cosine_hex_dump ( wth -> fh, & wth -> phdr, line, err, err_info ) ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump ( wth -> fh, & wth -> phdr, pkt_len, wth -> frame_buffer, err, err_info ) <S2SV_ModEnd> ; } <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left <S2SV_ModStart> >= left ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( SSL_IS_DTLS <S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if (! SSL_IS_DTLS ( s ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( SSL_IS_DTLS <S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( SSL_IS_DTLS <S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if (!",0
177,"<S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
178,"<S2SV_ModStart> - ENOMEM ; if ( hdr. size_in > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, size, hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_in > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu\\n"", __func__, size, hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_in, size ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_in < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, hdr. size_in ) ; ret = - EFAULT ; goto",0
179,<S2SV_ModStart> int hstartcol ; jpc_fix_t * buf2 ; jpc_fix_t * buf ; jpc_fix_t * srcptr ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { *,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, sun_info. width, sun_info. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> status = SetImageExtent <S2SV_ModStart> ) break ; status = SetImageExtent ( image, sun_info -> depth, sun_info. depth, sun_info. depth ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image",0
181,"<S2SV_ModStart> EOFOp 0x07 unsigned <S2SV_ModEnd> char magick [ <S2SV_ModStart> ReadBlob ( image, 2, magick ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows =",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; },0
183,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface",0
184,"<S2SV_ModStart> ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } <S2SV_ModStart> ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; } if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""set"" ) == 0 ) bandwidth_set ( pid, dev, down, up ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0 ) bandwidth_remove ( pid, dev ) ; else if ( strcmp ( command, ""clear"" ) == 0",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( <S2SV_ModEnd> node -> nd_item <S2SV_ModStart> ci_parent ) ; } return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ; switch ( v ) { case 1 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; case 2 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_MVC1 ; break ; case 3 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; default : avpriv_request_sample ( avctx, ""Video <S2SV_blank> compression <S2SV_blank> %i"", v ) ; break ; } vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID",0
188,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements =,0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> ifdef AUTOKEY filegen_register <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> ifdef DEBUG_TIMING filegen_register <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ntpd_time_stepped ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( ) ) ) ) ) ) ) == NULL ) { TEMP_FAILURE_RETRY ( ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) ; } if ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( ) ) ) ) ) ) ) == NULL ) { TEMP_FAILURE_RETRY ( ) ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & n -> mnt_mounts ) ) { attach_shadowed ( mnt, parent, & n -> mnt_mounts ) ; touch_mnt_namespace ( n ) ; }",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; if ( fsindex ) prev -> fs = 0 ; if ( gsindex ) prev -> gs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,"<S2SV_ModStart> ps_bitstrm ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; if ( ps_codec -> i4_seq_parameter_set_id ) ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_seq_parameter_set_id ) ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; if ( ps_codec -> i4_seq_parameter_set_id ) ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT",0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; } if ( fsid. Fsid_dev. Major == 257 ) ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Minor ) ) ; if ( fsid. Fsid_dev. Minor == 257 ) ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( fsid. Fsid_dev. Minor == 257 ) ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d",0
197,"<S2SV_ModStart> int transhdrlen, unsigned int flags, struct ipv6_txoptions * opt <S2SV_ModStart> = SKB_GSO_UDP ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_type = fhdr. type ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; err = ip6_append_datato_frags ( sk, skb, getfrag, from, ( length - transhdrlen ) ) ; if (! err ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> gso_size = 0 ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb",0
198,"<S2SV_ModStart> return res ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; mod_timer ( & hsr -> announce_timer, jiff",0
199,"<S2SV_ModStart> ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ;",0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> count ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > max_blocksize ) { args -> count = max_blocksize ; args -> count = max_blocksize ; } if ( dlen > max_blocksize ) { args -> count = max_blocksize ; dlen = max_blocksize ; } if ( dlen > XDR_QUADLEN ( len ) * 4 ) { args -> count = max_blocksize ; dlen = XDR_QUADLEN ( dlen ) * 4 ; } if ( dlen > max_blocksize ) { args -> count = max_blocksize ; args -> count = max_blocksize ; } if ( dlen > max_blocksize ) { args -> count = max_blocksize ; dlen = max_blocksize ; } if ( dlen > XDR_QUADLEN ( len ) * 4 )",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) { switch ( ctxt -> op_bytes ) { case 1 : ctxt -> _eip = ( u16 ) dst ; break ; case 3 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining ( tvb, offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; if ( data ) * data = g_strdup ( """" ) ; return offset ; } <S2SV_ModEnd> <S2",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; ret = __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; ret = __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> if ( fscanf <S2SV_ModEnd> ( f, <S2SV_ModStart> def, strparm ) == 2 && strparm [ 0 ] == \'""\' ) { if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%i"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; else sscanf ( str",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_pmc ( i,0
209,"<S2SV_ModStart> = len ; if ( len < 0 ) { len = 0 ; } else { len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; }",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; PyCompilerFlags cf ; <S2SV_ModEnd> char * str <S2SV_ModStart> ; PyObject * o, * fstring_name <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DE",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { int i ; for ( i = 0 ; i < object -> depth ; ++ i ) if ( cJSON_strcasecmp ( c -> string, string ) ) { c = c -> next ; break ; } for ( i = 0 ; i < object -> depth ; ++ i ) if ( cJSON_strcasecmp ( c -> string, string ) ) { if ( cJSON_strcasecmp ( c -> string, string ) ) { if ( cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; break ; } } for ( i = 0 ; i < object -> depth ; ++ i ) if ( cJSON_strcasecmp ( c -> string, string ) ) { c = c -> next ; break ; } for ( i = 0 ; i < object -> depth ; ++ i ) if ( cJSON_strcasecmp ( c -> string, string ) ) { if ( cJSON_strcasecmp ( c -> string, string ) ) { if ( cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; } for ( i = 0 ; i < object -> depth ; ++ i ) if ( cJSON_strcasecmp ( c -> string",0
213,"<S2SV_ModStart> == 0 ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ;",0
214,"<S2SV_ModStart> len ) ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; }",0
215,"<S2SV_ModStart> XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen, ( int ) name_loc -> flags ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> flags ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int )",0
216,"<S2SV_ModStart> ; if (! access_ok ( VERIFY_WRITE, mmsg, vlen ) ) return - EINVAL ; <S2SV_ModStart> NULL ) ; if ( get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, sun_info. width, sun_info. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, sun_info. width, sun_info. height, sun_info. depth, sun_info. type ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; return ret ; } ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ;",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModStart
221,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * user_config <S2SV_ModStart> } user_config = strdup ( mkpath ( ""/etc/perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; <S2SV_ModEnd> if ( found",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event, struct perf_event_context * ctx ) { struct <S2SV_ModEnd> arm_pmu * armpmu <S2SV_ModStart> = to_arm_pmu ( ctx <S2SV_ModEnd> ) ; struct <S2SV_ModStart>!= leader_pmu || event -> state > PERF_EVENT_STATE_OFF && event -> attr. enable_on_exec ) return 1 ; if ( armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 && armpmu -> get_event_idx ( hw_events, & fake_",0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline bool new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { struct user_namespace * ns = user_ns ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_set",0
226,"<S2SV_ModStart> j ++ ) <S2SV_ModEnd> { body [ <S2SV_ModStart> j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 )",0
227,"<S2SV_ModStart> * hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> ; hx = kmalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModStart> = 1 ; if ( ( ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller."" ) ; if ( ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
229,"<S2SV_ModStart> princ ) ; if ( strncmp ( handle -> params. realm, c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), handle -> params. realm, realm -> length ) ; log_badauth ( maj_stat, min_stat, rqstp -> rq_xprt, NULL ) ; goto fail_princ ; } if ( strncmp ( handle -> params. realm, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), realm -> length ) ; log_badauth ( maj_stat, min_stat, rqstp -> rq_xprt, NULL ) ; goto fail_princ ; } <S2SV_ModEnd>",0
230,"<S2SV_ModStart> * bo ; if ( args -> shader_rec_count > UINT_MAX / sizeof ( struct vc4_shader_state ) ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( args -> shader_rec_count > UINT_MAX / sizeof ( struct vc4_shader_state ) ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ;",0
231,<S2SV_ModStart> endif # ifdef HAVE_LIBLZMA_H if ( zip -> zipx_lzma_valid ) { lzma_end ( & zip -> zipx_lzma_stream ) ; } # endif,0
232,<S2SV_ModStart> -> vm_file ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> * arg ) { case '\\t' : if ( * arg == '\\n' ) { * b ++ = '\\t' ; break ; } arg ++ ; } else { * b ++ = * arg ; } <S2SV_ModStart> case '\\t' : if ( * arg == '\\n' ) { * b ++ = '\\n' ; break ; } else { * b ++ = * arg ; } arg ++ ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
235,"<S2SV_ModStart> ) ) ; if ( nmap!= sizeof ( oakley_t_map ) || nmap!= sizeof ( ipsec_t_map ) ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; if ( nmap!= sizeof ( oakley_t_map ) || nmap!= sizeof ( ipsec_t_map ) || nmap!= sizeof ( ipsec_t_map ) ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; } if ( nmap!= sizeof ( oakley_t_map ) || nmap!= sizeof ( oakley_t_map ) || nmap!= sizeof ( ipsec_t_map ) ) { ND_PRINT ( ( ndo, ""%s:"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; }",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; }",0
237,<S2SV_ModStart> = CHECKSUM_NONE ; skb -> ip_summed = CHECKSUM_UNNECESSARY ;,0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_LINGER0 : v. ling. l_onoff =!! sock_flag ( sk, SOCK_LINGER0 ) ; v. ling. l_linger = sk -> sk_linger0 ; break ; case SO_LINGER1 : v. ling. l_onoff =!! sock_flag ( sk, SOCK_LINGER1 ) ; break ; case SO_LINGER2 : v. ling. l_linger2 =!! sock_flag ( sk, SOCK_LINGER2 ) ; break ; case SO_LINGER3 : v. ling. l_linger =!! sock_flag ( sk, SOCK_LINGER3 ) ; break ; case SO_LINGER4 : v. ling. l_onoff =!! sock_flag ( sk, SOCK_LINGER4 ) ; break ; case SO_LINGER4 : v. ling. l_linger =!! sock_flag ( sk, SOCK_LINGER4 ) ; break ; case SO_LINGER4 : v. ling. l_linger =!! sock_flag ( sk, SOCK_",0
240,<S2SV_ModStart> ) { if ( msg -> msg_name ) { msg -> msg_name = NULL ; msg -> msg_namelen = 0 ; } else { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg_namelen ) ; },0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> char buf [ <S2SV_ModStart> bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = NULL ; md -> issuer_dn = NULL ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } <S2SV_ModStart> cleanup ; } if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, pl",0
244,<S2SV_ModStart> goto out_free ; if ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) ) { r = - EINVAL ; goto out_free ; } else if ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) ),0
245,<S2SV_ModStart> = SIGCHLD ; infop = NULL ;,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ;,0
247,"<S2SV_ModStart> ; register u_int <S2SV_ModEnd> amt ; register <S2SV_ModStart> ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> ; if ( <S2SV_ModEnd> j == 1 <S2SV_ModStart> 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %u[%u]:"", j, length ) ) ; break ; } if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) ) * sizeof ( * ni )!= i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT (",0
248,<S2SV_ModStart> goto error ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) { if ( ret!= - EEXIST ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_THREAD_KEYRING : ret = install_thread_keyring_to_cred ( new ) ; if ( ret < 0 ) { if ( ret!= - EEXIST ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : ret = install_process_keyring_to_cred ( new ) ; if ( ret < 0 ) goto error ; ret = 0 ; goto set ; case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = install_requestor_keyring_to_cred (,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; copy_strings_kernel ( 1, & iname_addr, bprm ) ; <S2SV_ModStart> ++ ; copy_strings_kernel ( 1, & iname_addr, bprm ) ; copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0",0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModEnd> int iSrc ; <S2SV_ModStart> = iLeft ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iRight - iLeft + 1 > windows_size ) { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight > 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight > 0.0 ) { _gdContributionsFree ( res ) ;,0
252,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
253,"<S2SV_ModStart> 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( ) ) ) ) ) ) ) ) ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool ( Com_GetBool (",0
254,"<S2SV_ModStart> ; int sl = 0 ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } cursor -> seen = 0 ; mm = mongo_message_create ( 16, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, & cursor -> reply -> fields. cursorID ) ; data = mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. num ) ; mongo_data_append32 ( data, & ZERO ) ; mongo_data_append32 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ; cursor -> reply = NULL ; res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_",0
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( mobj ) { memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart> 0 ), 0, size ) ; return mobj ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
256,<S2SV_ModStart> += incr ; <S2SV_ModEnd> delta -= incr,0
257,"<S2SV_ModStart> * for_ch ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6"" ) ; return NULL ; } if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6"" ) ; return NULL ; } for_ch = CHILD ( n, 2 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; if (! comp )",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) dst = kzalloc",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, MACROBLOCKD * xd, const MODE_INFO * * mi_8x8, vpx_writer * w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const seg = & xd -> seg ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; if ( r -> iov. iov_len < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; } else { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
262,"<S2SV_ModStart> goto err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n",0
264,"<S2SV_ModStart> -> beresp, ""Content-Type: text/plain; <S2SV_blank> charset=utf-8"" <S2SV_ModEnd> ) ; AZ <S2SV_ModStart> -> beresp, ""Content-Length: <S2SV_blank> "" <S2SV_ModEnd> ) ; AZ <S2SV_ModStart> -> beresp, ""Content-Length: <S2SV_blank> "" <S2SV_ModEnd> ) ; AZ <S2SV_ModStart> ; AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ (",0
265,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
266,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; } <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> 1 ) ; ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> page. p_sid ), ps -> page. p_uid ) ) ; ps = ( const struct id_off * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; ie < ie ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ;",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0 <S2SV_ModEnd>, reg, <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0 <S2SV_ModEnd>, reg, <S2SV_ModStart>, 1000 ) ; ret = <S2SV_ModEnd> ret >= 0 <S2SV_ModStart> ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ),0
270,<S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates [ i ] < 0 ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""Conversion <S2SV_blank> state <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; } else { if ( AdaptationStates [ i ] > 0 ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""Conversion <S2SV_blank> state <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; } else { if ( AdaptationStates [ i ] > 0 && AdaptationStates [ i ] < 0 ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""Conversion <S2SV_blank> state <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; } else { if ( AdaptationStates [ i ] > 0 ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""Conversion <S2SV_blank> state <S2SV_blank> is <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; } } else { if ( AdaptationStates [ i ] > 0 && AdaptationStates [ i ] > 0 && AdaptationStates [ i ] < 0 ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""Conversion <S2SV_blank> is <S2SV_blank>",0
272,"<S2SV_ModStart> { for ( <S2SV_ModEnd> i = 0 <S2SV_ModStart> } else { ut32 addr32 = r_read_le32 ( buf + i ) ; if ( addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } else { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } else { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_MAX",0
274,<S2SV_ModStart> 1 ] ; if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] > 1.0 || ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] > 1.0 || ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] > 1.0 || ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] > 1.0 || ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_,0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } <S2SV_ModStart> ; while (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } } } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { return - 1 ; } } } } else { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC,0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { struct bfq_data <S2SV_ModEnd> * bfqd = <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else reason = BFQQE_TOO_IDLE ; if ( bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; if ( bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } spin_unlock_irqrestore ( & bfqd -> lock,",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ; if ( unlikely ( txreq. flags & XEN_NETTXF_extra_info ) ) { work_to_do = xen_netbk_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx. req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } vif -> remaining_credit -= txreq. size ; work_to_do -- ; vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netbk_get_extras (",0
279,<S2SV_ModStart> cb -> args [ 0 <S2SV_ModEnd> ] ; struct <S2SV_ModStart> walk = ( struct xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; } },0
281,"<S2SV_ModStart> ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp = netbk -> pending_ring [ netbk -> pending_prod ++ ] ; int nr_frags = shinfo -> nr_frags ; <S2SV_ModStart> status ; if ( unlikely ( err ) ) { pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; for ( i = 0 ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( unlikely ( newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info",0
282,,1
283,<S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart>!= MagickFalse ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError,0
284,"<S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; <S2SV_ModStart> -> data ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; memset ( incoming_cn_msg, 0, sizeof ( * incoming_cn_msg ) ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn",0
285,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> goto simple ; } ret = - EFAULT ; switch ( instruction & 0x000F ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle_delayslot ( regs, instruction, ma ) ; if ( ret == 0 ) { ret = handle",0
286,"<S2SV_ModStart> TRUE ) ; if ( client -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } else if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> confirmations && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do",0
287,"<S2SV_ModStart> + diffBlockLength || <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
289,"<S2SV_ModStart>. mcast_ifn, sizeof ( d [ 0 ]. mcast_ifn ) ) ; memcpy ( d [ 1 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memcpy ( d [ 2 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 2 ]. mcast_ifn ) ) ; memcpy ( d [ 3 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memcpy ( d [ 3 ]. mcast_ifn, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memcpy ( d [ 2 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 2 ]. mcast_ifn ) ) ; memcpy ( d [ 3 ]. mcast_ifn, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memcpy ( d [ 3",0
290,"<S2SV_ModStart> ; err = ip6_xmit <S2SV_ModEnd> ( sk,",0
291,<S2SV_ModStart> ssize_t result ; if (! capable ( CAP_SYS_ADMIN ) ) return - EPERM,0
292,"<S2SV_ModStart>, * cgdir <S2SV_ModEnd> = NULL, <S2SV_ModStart> if (! caller_may_access ( fc -> pid, controller, path1, NULL, O_RDWR ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; continue ; },0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> break ; case VFF_TYP_BIT : image -> type = VFF_TYP_BIT ; break ; case VFF_TYP_BIT_16 : image -> type = VFF_TYP_BIT_16 ; break ; case VFF_TYP_BIT_32 : image -> type = VFF_TYP_BIT_32 ; break ; case VFF_TYP_BIT_32 : image -> type = VFF_TYP_BIT_32 ; break ; case VFF_TYP_BIT : image -> type = VFF_TYP_BIT ; break ; case VFF_TYP_BIT_16 : image -> type = VFF_TYP_BIT_16 ; break ; case VFF_TYP_BIT_32 : image -> type = VFF_TYP_BIT_32 ; break ; case VFF_TYP_BIT_32 : image -> type = VFF_TYP_BIT_32 ; break ; case VFF_TYP_BIT_32 : image -> type = VFF_TYP_BIT ; break ; case VFF_TYP_BIT_16 : image -> type = VFF_,0
296,"<S2SV_ModStart> pktnum ; int64_t index_pts ; av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; index_pts = FFMAX ( av_rescale ( itime, i, 10000 ), ict ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; } index_pts = ff_rescale ( itime, i, 10000 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; }",0
297,"<S2SV_ModStart> ; if ( copy_to_user ( ip, srp, sizeof ( * srp ), sizeof ( * srp ) ) ) { if ( copy_to_user ( ip, srp, sizeof ( * srp ), sizeof ( * srp ) ) ) { if ( copy_to_user ( ip, srp, sizeof ( * srp ), sizeof ( * srp ), sizeof ( * srp ) ) ) { if ( copy_to_user ( ip, srp, sizeof ( * srp ), sizeof ( * srp ), sizeof ( * srp ) ) ) { if ( copy_to_user ( ip, srp, sizeof ( * srp ), sizeof ( * srp ) ) ) { if ( copy_to_user ( p, srp, sizeof ( * srp ), sizeof ( * srp ), sizeof ( * srp ) ) ) ) { if ( copy_to_user ( p, srp, sizeof ( * srp ), sizeof ( * srp ), sizeof ( * srp ) ) ) ) { if ( copy_to_user ( p, sizeof ( * srp ), sizeof (",0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""smtp_alert_vrrp"", & smtp_alert_vrrp_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_",0
299,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ) priv ; vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ) priv ; vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ) priv ; vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ) priv ; vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ) priv ; vpx_codec_priv_enc_mr_cfg_t * priv = ( vpx_codec_priv_enc_mr_cfg_t * ),0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } tmpptr = key + strlen ( key ) ; * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_value ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } kfree ( tmpbuf ) ;",0
301,"<S2SV_ModStart> ENOENT ) { touch ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; } else if ( errno == EEXIST ) { touch ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; }",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type",0
303,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( Py_object <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> Py_ssize_t i ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
304,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ( m && <S2SV_ModEnd> m -> msg_control <S2SV_ModStart> m -> msg_control -> flags & MSG_ZEROCOPY ) ) { copylen = vnet_hdr. hdr_len - ETH_HLEN ; if (! copylen ) copylen = GOODCOPY_LEN ; } else { copylen = vnet_hdr. hdr_len ; } <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart> ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) { err = - ENOMEM ; goto err ; } <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart>, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ;",0
305,"<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> offset + 1 <= packet_len <S2SV_ModEnd> ) { switch <S2SV_ModStart> case NEXTHDR_HOP : if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif <S2SV_ModStart> break ; } offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif return offset ; } offset += ipv6_optlen (",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = above -> mbmi. ref_frame ; } <S2SV_ModStart> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; }",0
308,<S2SV_ModStart> ; sll -> ss_family = AF_INET ; sll -> ss_protocol = htons ( IPPROTO_UDP ) ; sll -> ss_version = htons ( ETH_P_IP ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_family = htons ( ETH_P_IPX ) ; sll -> ss_,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN || dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr = ( sctp_addiphdr_t * ) asconf -> skb -> data ; union sctp_addr_param * addr_param = ( union sctp_addr_param * ) ( asconf -> skb -> data + sizeof ( sctp_addiphdr_t ) ) ; __u32 serial ; sctp_addip_param_t * asconf_param = ( void * ) ( asconf -> skb -> data + sizeof ( sctp_addiphdr_t ) ) ; chunk_len -= sizeof ( sctp_addiphdr_t ) ; serial = ntohl ( hdr -> serial ) ; length = sizeof ( addr_param -> p. length ) ; err_code = ntohs ( addr_param -> p. length ) ; asconf_param = ( void * ) addr_param + length ; chunk_len -= length ; asconf_ack = sctp_make_asconf_ack ( asoc, serial, chunk_len * 4 ) ; if (! asconf_ack ) goto done ; asconf_ack = sctp_make_asconf_",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500MC ) ),0
316,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> goto response_done ; } strncpy ( kvp_data -> data. key, key_name, sizeof ( kvp_data -> data. key ) ) ; strncpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; strncpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ), sizeof ( kvp_data -> data. value ) ) ; <S2SV_ModStart> ; } strncpy ( kvp_data -> data. key, key_name, sizeof ( kvp_data -> data. key ) ) ; strncpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ) ) ; strncpy ( kvp_data -> data. value_type, value, sizeof ( kvp_data -> data. value ) ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; kvp_data -> data. key_type = REG_SZ ; kvp_data -> data. value_size = 2 * ( valuelen",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; } if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; } if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; break ; } mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; break ; } if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; r = - EBUSY ; break ; } if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; break ; } mutex_unlock ( & d -> mutex ) ; if (! mutex_trylock ( & d -> mutex ) ) { mutex_unlock ( & d -> mutex ) ; break ; } if (! mutex_trylock ( & d ->,0
319,"<S2SV_ModStart> return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= OPJ_IMG_FMT_HIGHBITDEPTH ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= OPJ_IMG_FMT_HIGHBITDEPTH ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= OPJ_IMG_FMT_HIGHBITDEPTH ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; }",0
320,"<S2SV_ModStart> * mbuf = NULL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) <S2SV_ModEnd> ; size_t ctrls_size <S2SV_ModStart> case _IOC_NONE : case _IOC_READ : case _IOC_WRITE : case _IOC_READ : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; <S2SV_ModStart> case _IOC_READ : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_",0
321,"<S2SV_ModStart> } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= psubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= punsubscribeCommand && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= infoCommand && cmd -> proc!=",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; if ( ret > 0 ) { ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; }",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { GdkScreen * screen = gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; } break ; default : { } } <S2SV_ModEnd> break ; }",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } else { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- data ; } if ( urb -> actual_length ) { usb_serial_debug_data ( dev, __func__, urb -> actual_length, data ) ; edge_tty_recv ( edge_port -> port, data, urb -> actual_length ) ; }",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct cifsSesInfo <S2SV_ModEnd> * cifs_find_smb_ses ( <S2SV_ModStart> server -> smb_ses_list ) { struct cifsSesInfo_s * smb_ses ; smb_ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; list_for_each ( ses, & smb_ses -> smb_ses_list ) { smb_ses = list_entry ( ses, struct cifsSesInfo, smb_ses_list ) ; list_for_each ( tmp, & server -> smb_ses_list ) { smb_ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; <S2SV_ModEnd> ++ ses -> <S2SV_ModStart> MAX_USERNAME_SIZE ) ) { list_for_each ( tmp, & smb_ses -> smb_ses_list ) { smb_ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; list_for_each ( tmp, & server -> smb_ses_",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; if ( ( cfg -> g_w > 1 || cfg -> g_h > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > 1 || cfg -> g_h > 1 || cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = input ; ptr2 = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount (",0
328,"<S2SV_ModStart> = hstate_inode ( inode <S2SV_ModEnd> ) ; if <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { region_add ( & inode -> i_mapping -> private_list, from, to ) ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to",0
329,<S2SV_ModStart> new ) { struct key * keyring ; if ( new -> thread_keyring ) { key_put ( new -> thread_keyring ) ; return 0 ; },0
330,<S2SV_ModStart> = 0 ; size_t oldscanned = ( size_t ) 0U ; size_t oldreadnbd = ( size_t ) 0U ; if ( oldscanned > ( size_t ) 0U ) { oldscanned = ( size_t ) 0U ; oldreadnbd = ( size_t ) 0U ; } if ( oldscanned > ( size_t ) 0U ) { oldscanned = ( size_t ) 0U ; } if ( oldscanned > ( size_t ) 0U ) { oldscanned = ( size_t ) 0U ; oldreadnbd = ( size_t ) 0U ; } if ( oldscanned > ( size_t ) 0U ) { oldscanned = ( size_t ) 0U ; oldreadnbd = ( size_t ) 0U ; } if ( oldscanned > ( size_t ) 0U ) { oldscanned = ( size_t ) 0U ; } if ( oldscanned > ( size_t ) 0U ) { oldscanned = ( size_t ) 0U ; oldreadnbd = ( size_t ) 0U ;,0
331,"<S2SV_ModStart> orig ) ; mrb_get_args ( mrb, ""o"", & buf ) ; <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; DATA_TYPE ( copy ) = & mrb_io_type ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = fptr_copy ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = buf ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; fptr_copy -> fd2 = mrb_dup ( mrb, fptr_orig -> fd2, & failed ) ; if ( failed ) { close ( fptr_copy -> fd ) ; mrb_sys_fail ( mrb, 0 ) ; } mrb_fd_cloexec ( mrb, fptr_copy",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> cpi -> mb ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct ute",0
335,"<S2SV_ModStart> ; old_cs = get_segment_selector <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> VCPU_SREG_CS ) ; memcpy ( & sel, ctxt -> src. valptr, ctxt -> op_bytes ) ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; <S2SV_ModEnd> ctxt -> _eip <S2SV_ModStart> VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr, ctxt -> op_bytes ) ; memcpy ( & ctxt -> _eip, ctxt -> src. val, ctxt -> op_bytes ) ; ctxt -> src. val = 0 ; rc = emulate_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = emulate_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return",0
336,"<S2SV_ModStart> ; if ( log2_band_prec_width < 0 || log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_height < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_height <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", log2_band_prec_height ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_width > log2_band_prec_width ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band_prec_width <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", log2_band_prec_width ) ; return AVERROR_INVALIDDATA ; } if ( log2_band_prec_height > log2_band_prec_height ) { av_log ( avctx, AV_LOG_ERROR, ""log2_band",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } if (! COM_CheckExtension ( filename, "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } <S2SV_ModStart> ), "".txt"" ) ; if (! COM_CheckExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } if (! COM_CheckExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } if (! COM_CheckExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; }",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> ) ) ; if (! got_table ) { goto out_error ; } obj -> n_got = n_got ; obj -> got_table = got_table ; } if ( obj -> hdr -> data_start + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } <S2SV_ModEnd> reloc_table [ i <S2SV_ModStart> i ]. addr_to_",0
339,"<S2SV_ModStart> - EINVAL ; if ( info -> si_code < 0 ) return - EPERM ; if ( info -> si_signo!= sig ) { info -> si_signo = sig ; info -> si_code = - EPERM ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_code = - EPERM ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } else { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; }",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_dx_min = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> dxy ), ( OPJ_INT32 ) p_",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; p = ( unsigned char * ) malloc ( 2 ) ; if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else { if ( ( c >= 0xC0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( *",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; <S2SV_ModEnd> HashTable * class_hash <S2SV_ModStart> } } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; }",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG",0
345,<S2SV_ModStart> = ctx -> iface -> enc <S2SV_ModEnd>. get_glob_hdrs (,0
346,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
347,"<S2SV_ModStart> ; s -> filesize = simple_strtol ( p, NULL, 10 ) <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { s -> seekable = simple_strtol ( slash + 1, NULL, 10 ) ; s -> filesize = simple_strtol ( slash + 1, NULL, 10 ) ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; else h -> is_streamed = 0 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { s -> seekable = simple_strtol ( p, NULL, 10 ) ; if (! s -> is_akamai || s -> filesize!= 2147483647 ) s -> filesize = 2147483647 ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> i, j <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> max ) ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxw ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ; ++ cb ; ++ cr ; } for ( j = 0U ; j < maxh ; ++ j ) { sycc_to",0
349,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t <S2SV_ModEnd> mode ) { <S2SV_ModStart> state == mode ) return ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; if",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> <S2SV_blank> <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( Corrupt",0
353,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> char lbase [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char strbase [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char ltest [ <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> char strtest [ <S2SV_ModStart> ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest, ""%255[^\\r\\n]"", strtest ) ; if ( nbase!= 255 && ntest!= 255 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( lbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase,",0
354,"<S2SV_ModStart> intf ) { int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> - ENODEV ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> usbnet_link_change ( dev <S2SV_ModStart>, 0, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; ret = <S2SV_ModEnd> cdc_ncm_bind_common ( dev <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return",0
355,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
356,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETEXPPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETM",0
357,"<S2SV_ModStart> - EINVAL ; if ( e -> target_offset!= e -> next_offset ) { duprintf ( ""Bad <S2SV_blank> offset <S2SV_blank> %p\\n"", e, e -> target_offset ) ; return - EINVAL ; }",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( encoding && c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( encoding && c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_INVALIDDATA ; } else if ( encoding && c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_INVALIDDATA ; } if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_",0
359,"<S2SV_ModStart> 1 ) ; } ND_PRINT ( ( ndo, ""(NOV-ETHII) <S2SV_blank> "" ) ) ; decnet_print ( ndo, p, length, caplen ) ; return ( 1 ) ; case ETHERTYPE_PPPOED : case ETHERTYPE_PPPOES : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOED2 : pppoe_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOED2 : case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_PPPOES2 : pppoe_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_EAPOL : eapol_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_EAPOL2 : eapol_print ( ndo, p, length ) ; return ( 1 ) ; case ETHERTYPE_",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) { <S2SV_ModStart> timer ) ; },0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ) <S2SV_ModEnd> >> PAGE_CACHE_SHIFT ; <S2SV_ModStart> ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } else { i_size_write ( inode, offset + to ) ; } <S2SV_ModEnd> brelse ( dibh",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass <S2SV_ModEnd> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } else { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; }",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } else { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; } } }",0
364,"<S2SV_ModStart> & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = ( xfs_attr_leaf_name_local_t * ) xfs_attr3_leaf_name_local ( leaf, i ) ; } else { name_loc = ( xfs_attr_leaf_name_local_t * ) xfs_attr3_leaf_name_local ( leaf, i ) ; } if (! ( name_loc -> flags & XFS_ATTR_INCOMPLETE ) ) { xfs_attr_leaf_name_local_t * name_loc = ( xfs_attr_leaf_name_local_t * ) xfs_attr3_leaf_name_local ( leaf, i ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } if (! ( name_loc -> flags & XFS_ATTR_LOCAL ) ) { xfs_attr_leaf_name_local_t * name_loc = ( xfs_attr_leaf_",0
365,"<S2SV_ModStart> ; if ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } service_name_tlv = nfc_llcp_build_tlv ( LLCP_TLV_SN, sock -> service_name, sock -> service_name_len, & service_name_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } service_name_tlv = nfc_llcp_build_tlv ( LLCP_TLV_SN, sock -> service_name_len, & service_name_tlv_length",0
367,"<S2SV_ModStart> ssh = active_state <S2SV_ModEnd> ; struct monitor <S2SV_ModStart>. compression ) mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS )",0
369,"<S2SV_ModStart> * chan ; jas_uint16 type ; jas_uint16 assoc ; jas_uint16 numchans ; if (! jas_getuint16 ( in, & type ) ||! jp2_getuint16 ( in, & assoc ) ) { return - 1 ; } numchans = jp2_getuint16 ( in, & type ) ; assoc = jp2_getuint16 ( in, & assoc ) ; if (! numchans ) { return - 1 ; } for ( channo = 0 ; channo < numchans ; ++ channo ) { chan = & cdef -> ents [ channo ] ; if (! jp2_getuint16 ( in, & type ) ||! jp2_getuint16 ( in, & assoc ) ) { return - 1 ; } numchans = jp2_getuint16 ( in, & assoc ) ; if ( jp2_getuint16 ( in, & assoc ) ) { return - 1 ; } for ( channo = 0 ; channo < numchans ; ++ channo ) { chan = & cdef -> ents [ channo ] ; if (! jp2_getuint",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP <S2SV_ModEnd> ; tja1100WritePhyReg (",0
371,"<S2SV_ModStart> ; ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ; if (! ipc ) { ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ; if (! net -> ipv4. sysctl_icmp_errors_use_user ) ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ; } if (! ipc ) { ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ; if (! net -> ipv4. sysctl_icmp_errors_use_user ) ipc = rcu_dereference_protected ( net -> ipv4. icmp_cookie, sock_owned_by_user ( rt -> dst. dev ) ) ; } }",0
372,"<S2SV_ModStart> len ; } if ( EXTRACT_32BITS ( p + 2 )!= 4 ) { ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; break ; } if ( ndo -> ndo_vflag < 2 ) { print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ;",0
373,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { if ( private ) { crypto_free_skcipher ( private ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> ) { struct <S2SV_ModEnd> inode * inode <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( log ) ) * log_num = nlogs ;,0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { * pt ++ = * s ; },0
378,"<S2SV_ModStart> 1 ) ) { if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; <S2SV_ModStart> ) ) { if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; rq = blk_mq_tag_to_rq ( tags, off + bit ) ; fn ( rq, data, reserved ) ; } else { if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( tags, off + bit ) ) continue ; rq = blk_mq_tag_to_rq ( tags, off + bit ) ; fn ( rq, data, reserved ) ; } }",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> ; if ( A < 0 || A >= skb -> len ) return 0 ; if (,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> trunc ; } if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; } if ( flags & GRE_KP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) { ND_TCHECK2 ( * bp, 4 ) ; if (",0
384,"<S2SV_ModStart> tsample_t ) ( tl * tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> %lu <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } if ( shift_width > ( tsize_t ) ( tl * tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> rowsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } if ( shift_width > ( tsize_t ) ( tl * tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> %lu <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } if ( shift_width > ( tsize_t ) ( tl * tile_rowsize ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank>",0
385,"<S2SV_ModStart> }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL, 'U' }, { ""uid"", optional_argument, NULL,",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - EINVAL ; } <S2SV_ModEnd> switch ( dev <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
387,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EBUSY ; if ( node -> nd_num == O2NM_INVALID_NODE_NUM ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ADDRESS, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_PORT, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ADDRESS, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_NUM, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ADDRESS, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ADDRESS, & node -> nd_set_attributes ) ) return -",0
388,"<S2SV_ModStart> if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""float"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (! strcmp ( typestr, ""uint"" ) ) return ( PTA * )",0
389,"<S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [ <S2SV_ModStart> = snes_op_get_size ( 1, <S2SV_ModEnd> & snes_op [",0
390,"<S2SV_ModStart> = sock_net ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } error = sctp_do_sm ( net, SCTP_EVENT_T3_RTX, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, <S2SV_ModEnd> asoc -> ep <S2SV_ModStart> asoc -> ep, <S2SV_ModEnd> asoc, transport <S2SV_ModStart> GFP_ATOMIC )",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; if ( fd == - 1 ) { fprintf ( stdout, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; } ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; if ( fd == - 1 ) { fprintf ( stdout, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TR",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ) ; }",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> = '\\0' ; if (! ND_TTEST2 ( * ( p + offset + 1 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p +",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } ret += obuf -> len ; obuf -> len -= obuf -> len ; },0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret ; mm_segment_t <S2SV_ModEnd> old_fs ; if <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt )",0
399,"<S2SV_ModStart> }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_MOVE, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_",0
400,"<S2SV_ModStart> ) ; } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( md -> iface -> ip_addr ) ), ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( md -> iface -> ip_addr ) ), (",0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> stringset == ETH_SS_STATS ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
404,<S2SV_ModStart> == 1 ) { <S2SV_ModStart> ) / 8 ; } else { return ( ( image -> columns + 7 ) / 8 ) * GetPSDPacketSize ( image ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
405,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( p_dev -> fd = TEMP_FAILURE_RETRY ( p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( p_dev -> fd = TEMP_FAILURE_RETRY ( p_dev -> fd = TEMP_FAILURE_RETRY ( p_dev = TEMP_FAILURE_RETRY ( p_dev = TEMP_FAILURE_RETRY ( p_dev = TEMP_,0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> ctrl <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> ctrl <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; }",0
407,"<S2SV_ModStart> intf ) ; struct device * dev ; <S2SV_ModStart> -> name ; dev = & d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dvb_usbv2_exit ( d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> { xstep = ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl ->",0
409,"<S2SV_ModStart> target_enc ) { cpat = ( UChar * ) conv_encoding ( ci -> pattern_enc, ci -> target_enc, pattern, pattern_end ) ; cpat_end = ( UChar * ) conv_encoding ( ci -> pattern_enc, ci -> target_enc, cpat, & cpat_end ) ; if ( cpat_end == ( UChar * ) NULL ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= 0 ) { r = ONIGERR_MEMORY ; goto err2 ; } r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= ONIGERR_MEMORY ) { r = ONIGERR_MEMORY ; goto",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> ) { size_t <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> ; ssize_t x ; register Quantum * q ; register Quantum index <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case 1 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++",0
411,"<S2SV_ModStart>, register const <S2SV_ModEnd> u_char * tptr <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> IPv4 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> IPv6 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> IPv4 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> IPv6 <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u)"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t",0
412,"<S2SV_ModStart> desc_struct ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; } else { ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; } switch ( ctxt -> mode ) { case X86EMUL_MODE_REAL : ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & ss, 0, VCPU_SREG_SS",0
413,"<S2SV_ModStart> ; return sprintf ( buf <S2SV_ModEnd>, ""%s\\n"", <S2SV_ModStart> -> driver_override ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( i <= 0 ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS && response!= otp_response_success ) retval = KRB5_PREAUTH_SUCCESS ; if ( retval!= KRB5_PREAUTH_FAILED && response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS && response!= otp_response_success && response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS && response!= otp_response_success ) retval = KRB5_PREAUTH_SUCCESS ; if ( retval!= KRB5_PREAUTH_FAILED && response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS && response!= otp_response_success && response!= otp_response_success ) retval = KRB5_PREAUTH_SUCCESS ; if ( retval!= KRB5_PREAUTH_FAILED && response!= otp_response_success && response!= otp_response_success ) retval = KRB5_,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart>. st_mode & ( S_IRUSR | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; break ; case AF_UNIX : strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; break ; case AF_UNIX : strncpy ( addr_text, ( ( struct sockaddr_un * ) sock",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> 0xffff ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; err = copy_from_user ( & event_rec [ 4 ], buf, p + 4, c, 0 ) ; if ( err < 0 ) return",0
421,"<S2SV_ModStart> avoid_reserve ) { if (! vma -> vm_file ) return ERR_PTR ( - VM_FAULT_OOM ) ; spin_lock ( & hugetlb_lock ) ; if (! hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_",0
422,"<S2SV_ModStart> ) ; DPRINTF ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; filegen -> flag |= FGEN_FLAG_ENABLED ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node!= NULL ; my_node = HEAD_PFIFO ( my_node -> link ) { filegen_file = keyword ( my_node -> filegen_token ) ; filegen = filegen_get ( filegen_file ) ; filegen_flag = filegen -> flag ; filegen_type = filegen -> type ; filegen_flag |= FGEN_FLAG_ENABLED ; } my_opts = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_node -> options ) ; my_opts = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_node -> options ) ;",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_set_state ( t, TIMER_RUNNING ) ; } else { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> output ) { int s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; int x0, x1, x2, x3, x4, x5, x6 ; int x7 = input [ 7 ] ; int x8 = input [ 8 ] ; int x9 = input [ 9 ] ; int x10 = input [ 10 ] ; int x11 = input [ 11 ] ; int x12 = input [ 3 ] ; int x13 = input [ 4 ] ; int x14 = input [ 5 ] ; int x15 = input [ 6 ] ; int x7 = input [ 7 ] ; int x8 = input [ 8 ] ; int x9 = input [ 9 ] ; int x10 = input [ 10 ] ; int x12 = input [ 3 ] ; int x13 = input [ 12 ] ; int x14 = input [ 1 ] ; int x15 = input [ 14 ] ; s0",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif return flags & mask ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> p = ( <S2SV_ModStart> ( opt? opt -> hopopt : NULL, newopt, newoptlen, newtype!= IPV6_HOPOPTS, & opt2 -> hopopt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> dst1opt : NULL, newopt, newoptlen, newtype!= IPV6_DSTOPTS, & opt2 -> dst1opt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> srcrt : NULL, newopt, newoptlen, newtype!= IPV6_RTHDR, & opt2 -> srcrt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> dst1opt : NULL, newopt, newoptlen, newtype!= IPV6_DSTOPTS, & opt2 -> dst1opt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> dst1opt : NULL, newoptlen, newtype!= IPV6",0
429,"<S2SV_ModStart> ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl16 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl16 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl16 ( pb ) ; length = avio_rl16 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine_read_header"" ) ; return AVER",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"", fc -> pid, controller, cgdir, path ) ; if (! fc_may_access ( fc, controller, cgdir, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 ;",0
431,"<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= MNT_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCKED ; mnt -> mnt. mnt_parent = mnt ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & sb -> s_mount",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 110 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } <S2SV_ModEnd> return rdesc ;",0
434,"<S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len - 8 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> 2 ) ; if ( bodyLength > tot_len - 8 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - 8 ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
435,"<S2SV_ModStart> serio ) ; if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } case 0xfe : dfl = SERIO_PARITY ; data = 0xfe ; break ; case 0xff : dfl = ( ( str & I8042_STR_TIMEOUT &&! i8042_notimeout )? SERIO_TIMEOUT : 0 ) ; if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_MUXERR ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank>",0
436,"<S2SV_ModStart> case NFSPROC_GETSTATUS : if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> status:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } }",0
437,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> newIndex ; } } if ( newIndex < 256 ) { uint8_t curr ; uint8_t ext [ EXT_SIZE ] ; int maxFilenameLen ; for ( index = 0 ; index < udfLen ; index ++ ) { curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK && ( udfLen - index - 1 ) <= EXT_SIZE ) { if ( udfName [ index + 1 ] == '/' ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK && ( udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK && ( udfLen - index - 1 ) <=,0
438,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * const cm, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int mi_row <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ] -> mbmi. sb_type ] ; const int hbs = bs / 2 ; int bw, bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predict",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> * s ; if ( siglen > DSA_SIG_MAX ) { return - 1 ; } if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; return ( ret ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
442,"<S2SV_ModStart> NULL ) ; if ( out ) { rv = gdDPExtractData ( out, size ) ; out -> gd_free ( out ) ; return rv ; } <S2SV_ModEnd> rv = gdDPExtractData",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_flags == 0 ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ) ; goto done ; } if ( p -> ai_family == 0 ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_socktype == 0 ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } if ( p -> ai_addrlen == 0 ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_E",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> ] ) ; if ( rctx -> image_height > 8 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> maximum <S2SV_blank> image <S2SV_blank> height"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( pegasus <S2SV_ModStart>, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret > 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
449,"<S2SV_ModStart> mod_ty ) PyArena_Malloc <S2SV_ModEnd> ( arena, <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
450,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> 4 ; # else int row, col, active_end ; # <S2SV_ModStart> -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; for ( active_end = col ; active_end < mb_cols ; ++ active_end ) { if ( active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } else { vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } } # else vp9_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
452,<S2SV_ModStart> cdev ) ; kfree ( cc ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } if ( krb5_princ_size ( context, ( * s4u_x509_user ) -> user_id. subject ) == 0 || ( * s4u_x509_user ) -> user_id. subject_cert. length!= 0 ) { * status = ""INVALID_S4U2SELF_REQUEST"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINC",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIRequest <S2SV_ModStart> outbuf ) ; return 0 ; illegal_request : if ( scsi_disk_emulate_mode_sense ( r, outbuf ) < 0 ) goto illegal_request ; break ; case READ_TOC : buflen = scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RESERVE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case RELEASE_10 : if ( req -> cmd. buf [ 1 ] & 3 ) goto illegal_request ; break ; case START_STOP : if ( scsi_disk_emulate_start_stop ( r ) < 0 ) { return -",0
455,<S2SV_ModStart> || s -> <S2SV_ModEnd> cur_pic. field_picture,0
456,"<S2SV_ModStart> off ) { unsigned int len ; <S2SV_ModStart> 0 ) ; len = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; if ( len > RDS_CONG_MAP_BYTES ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return 0 ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_send_drop_acked ( conn, be64_to_cpu ( rm -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc ) ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_",0
457,"<S2SV_ModStart> buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; break ; } if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; break ; } if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; break ; } if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; break ; } if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; break ; }",0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( * mh, hlen + 8 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> dev ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags |= IFF_TX_SKB_SHARING,0
461,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_INVALID_DATA, 0 ) ; return NULL ; } <S2SV_ModStart> channel ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG06",0
462,<S2SV_ModStart> -> id ; if ( * addr_len > sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; if ( * addr_len > sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; haddr -> hci_family = AF_BLUETOOTH ; } else { * addr_len = sizeof ( * haddr ) ; } if ( * addr_len > sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; if ( * addr_len > sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; haddr -> hci_dev = hdev -> id ; } },0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_data,0
464,"<S2SV_ModStart> ; } if ( server. pw_expiration && server. pw_expiration < kdc_time && isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case",0
466,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( lf -> sharpness_level, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; lf -> sharpness_level = clamp ( filt_guess, min_filter_level, max_filter_level ) <S2SV_ModEnd> ; } <S2SV_null>",0
467,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ) { BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } # endif,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image_info -> interlace!= PartitionInterlace ) { status = OpenBlob ( image_info, image, ReadBinaryBlobMode, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; if ( ( * o_row_idx == NULL ) || ( * o_column_idx == NULL ) || ( * o_values == NULL ) || ( l_row_idx_id == NULL ) ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory!\\n"" ) ; return ; }",0
472,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, &",0
473,"<S2SV_ModStart> vpx_codec_err_t res ; if (! data ||! data_sz ||! ctx -> priv ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else if (! ctx -> priv -> alg_priv ) res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else res = VPX_CODEC_ERROR ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> priv -> alg_priv ) res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else res = ctx -> iface -> dec. decode <S2SV_ModEnd> ( ctx ->",0
474,"<S2SV_ModStart> ; if ( value [ strlen ( value ) - 1 ]!= ',' ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_freep ( & par -> extradata ) ; av_log ( s, AV_LOG_DEBUG, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %p <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata, par -> extradata",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
476,"<S2SV_ModStart> -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; if ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
478,"<S2SV_ModStart> ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; }",0
479,"<S2SV_ModStart> case IS_STRING : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } } else { if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
480,<S2SV_ModStart> self ) { if ( self -> dict ) { Py_CLEAR ( self -> dict ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
481,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free <S2SV_ModEnd> ( szSepLine ),0
482,"<S2SV_ModStart> EFAULT ; r = copy_to_user ( data, ( void __user * ) addr + offset, len ) ; if ( r ) return r ;",0
483,"<S2SV_ModStart> p, * q <S2SV_ModEnd>, * r <S2SV_ModStart> VERSION ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank>",0
484,<S2SV_ModStart> ; if ( serial -> interface -> desc. bNumInterfaces < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc. bNumInterfaces >= USB_CONSOLE_MAX_INTERFACES ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc. bNumInterfaces >= USB_CONSOLE_MAX_INTERFACES ) { retval = - ENODEV ; goto error_get_interface ; } if ( doflow ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc. bNumInterfaces >= USB_CONSOLE_MAX_INTERFACES ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> desc. bNumInterfaces >= USB_CONSOLE_MAX_INTERFACES ) { retval = - ENODEV ; goto error_get_interface ; } if (! serial -> interface -> desc. bNumInterfaces >= USB_CONSOLE_MAX_INTERFACES ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> cpuctx_lock ) ; <S2SV_ModEnd> cpuctx -> ctx <S2SV_ModStart> = cpu_context ; <S2SV_ModEnd> __perf_cpu_hrtimer_init ( cpuctx,0
486,"<S2SV_ModStart> len, struct iov_iter * iter <S2SV_ModStart> = 1 ; iter -> iov_iter_base = iov_iter ; iter -> iov_iter_len = len ;",0
487,<S2SV_ModStart> ext4_group_t flex_group ; ext4_group_t <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE - required_length <S2SV_ModEnd> ) ) return,0
489,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { if (! i ) a -> child = n ; else suffix_object ( p, n ) ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
490,"<S2SV_ModStart> first ) { if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", parv [ 1 ], parv [ 2 ] ) ; }",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; dst [ i + 3 ] = src1 [ i + 3 ] - src2 [ i + 3 ] ; dst [ i + 4 ] = src1 [ i + 4 ] - src2 [ i + 4 ] ; dst [ i + 5 ] = src1 [ i + 5 ] - src2 [ i + 5 ] ; dst [ i + 6 ] = src1 [ i + 6 ] - src2 [ i + 6 ] ; dst [ i + 7 ] = src1 [ i + 7 ] - src2 [ i + 7 ] ; } # endif,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; } if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
493,"<S2SV_ModStart>! no_port_forwarding_flag ) { if ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port, target ) ; } else if ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port, target ) ; } else { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port, target ) ; }",0
494,"<S2SV_ModStart> if (! <S2SV_ModEnd> bitstream_read_bit ( bc <S2SV_ModStart> ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
495,<S2SV_ModStart> return err ; } if ( m -> msg_name ) { m -> msg_name = address ; m -> msg_namelen = 0 ; },0
496,"<S2SV_ModStart> ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res ; int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res ; int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
497,<S2SV_ModStart> ; register int <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> ) >> 1 ; n = numrows - hstartcol ; srcptr = & a [ hstartcol * stride ] ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } dstptr = & a [ hstartcol,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> instance ) ; if ( log_file ) { int n = fopen ( log_file, ""a"" ) ; fcntl ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; fcntl ( n, F_SETFL, O_NONBLOCK | fcntl ( n, F_GETFL ) ) ; } fcntl ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; if ( log_file ) { int n = fileno ( log_file ) ; fcntl ( n, F_SETFD, FD_CLOEXEC | fcntl ( n, F_GETFD ) ) ; fcntl ( n, F_SETFL, O_NONBLOCK | fcntl ( n, F_GETFL ) ) ; }",0
500,"<S2SV_ModStart> ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule ( ""match"" ) ; assert_true_rule (",0
501,"<S2SV_ModStart> ) ; if ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave_nested ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } <S2SV_ModEnd> hashbin -> hb_current <S2SV_ModStart> ~ HB_MAGIC ; <S2SV_ModEnd> return 0 ;",0
502,<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) { mnt -> mnt. mnt_flags |= MNT_READONLY ; },0
503,<S2SV_ModStart> ; int copied = 0 <S2SV_ModEnd> ; struct sockaddr_ll <S2SV_ModStart> sll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ll ) ; msg -> msg_namelen =,0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,"<S2SV_ModStart> ; if ( serial -> num_ports < 2 ) return - 1 ; port = serial -> port [ 0 ] ; port -> bulk_out_endpointAddress = serial -> port [ 1 ] -> bulk_out_endpointAddress ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_urbs ) ; ++ j ) port -> write_urbs [ j ] -> pipe = usb_sndbulkpipe ( serial -> dev, port -> write_urbs [ j ] -> pipe ) ; port -> bulk_out_endpointAddress = port -> bulk_out_endpointAddress ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_urbs ) ; ++ j ) port -> write_urbs [ j ] -> pipe = usb_sndbulkpipe ( serial -> dev, port -> bulk_out_endpointAddress ) ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_urbs ) ; ++ j ) port -> write_urbs [ j ] -> pipe = usb_sndbulkpipe ( serial -> dev, port -> bulk_out_endpointAddress ) ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_ur",0
506,"<S2SV_ModStart> qmode ) { int do_rf64 = 0, write_junk = 1 ; ChunkHeader ds64hdr, datahdr, fmthdr ; RiffChunkHeader riffhdr ; JunkChunk junkchunk ; WaveHeader wavhdr ; int64_t total_data_bytes, total_riff_bytes ; int64_t num_channels = WavpackGetNumChannels ( wpc ) ; int32_t bytes_per_sample = WavpackGetBytesPerSample ( wpc ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 /",0
507,"<S2SV_ModStart> msg ) ; err = - EINVAL ; if ( msg_sys -> msg_name ) { memcpy ( & addr, msg_compat -> msg_name, sizeof ( addr ) ) ; msg_sys -> msg_name = NULL ; } else { memcpy ( & addr, msg_compat -> msg_name, sizeof ( addr ) ) ; } <S2SV_ModEnd> err = verify_iovec <S2SV_ModStart> VERIFY_WRITE ) ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, 0, 0 ) ; if ( err ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT",0
508,<S2SV_ModStart> ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = ip2_to_gfs2_inode ( ip ) ; struct gfs2_meta_inode * ip2 = ip2_to_gfs2_meta_inode ( ip ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = ip2_to_gfs2_inode ( ip ) ; struct gfs2_meta_inode * ip2 = ip2_to_gfs2_meta_inode ( ip ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip2 = GFS2_I ( inode ) ; struct gfs,0
509,"<S2SV_ModStart> ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_target_bitrate ) ; SHOW ( rc_undershoot_pct ) ; SHOW ( rc_overshoot_pct ) ; SHOW ( rc_2pass_vbr_bias_pct ) ; SHOW ( rc_2pass_vbr_minsection_pct ) ; SHOW ( rc_2pass_vbr_maxsection_pct ) ; SHOW ( rc_2pass_v",0
510,<S2SV_ModStart> ; PROFILER_ENTER ( <S2SV_ModEnd> context -> priv <S2SV_ModStart> context -> priv -> <S2SV_ModEnd> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> context -> priv -> <S2SV_ModEnd> prof_nsc_decode ) ; <S2SV_ModStart> context -> priv -> <S2SV_ModEnd> prof_nsc_decode ) ;,0
511,"<S2SV_ModStart> ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a",0
512,"<S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel",0
513,<S2SV_ModStart> ) { } else if ( fv -> b. sf -> fv!= & fv -> b ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf ->,0
514,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
515,<S2SV_ModStart> timr ) ; if ( new_setting ) { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; } else { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; },0
516,"<S2SV_ModStart> 1 ) ; if (! js_regexec ( re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if",0
517,"<S2SV_ModStart> : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } <S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) { caml_set_oo_id ( ( value ) dest ) ;",0
518,"<S2SV_ModStart> * multipart_media ; <S2SV_ModEnd> struct range * <S2SV_ModStart> = NULL ; int code = 500, fd = - 1, nranges, ret <S2SV_ModStart> ; size_t content_length <S2SV_ModEnd> ; int code <S2SV_ModStart> = 500, fd <S2SV_ModEnd> = - 1 <S2SV_ModStart> ; if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr =",0
519,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ88",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * const <S2SV_ModEnd> cm, struct <S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_null> <S2SV_null>",0
521,"<S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank,0
524,<S2SV_ModStart> flags ) { if (! ctx ) return ; if ( ( flags & TFD_TIMER_ABSTIME ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } else if ( ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( flags & TFD_TIMER_ABSTIME_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } } else if (! ( flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ;,0
525,"<S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] = _cmsMalloc ( ContextID, nElements, sizeof ( cmsUInt16Number ) ) ; } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } }",0
526,"<S2SV_ModStart> path ) ) { requested_dev_name = tomoyo_realpath_from_path ( path. dentry ) ; if (! requested_dev_name ) requested_dev_name = tomoyo_realpath_from_path ( path. <S2SV_ModEnd> dentry -> d_inode <S2SV_ModStart> -> d_inode -> i_sb -> s_dev, dir -> d_inode -> i_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_id ) ; if (! requested_dev_name ) requested_dev_name = tomoyo_realpath_from_path ( path. dentry -> d_inode -> i_sb -> s_inode -> i_sb -> s_dev, dir -> d_inode -> i_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_id ) ; if (! requested_dev_name ) requested_dev_name = tomoyo",0
527,"<S2SV_ModStart> ; if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > buf_size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> many <S2SV_blank> messages\\n"", __func__ ) ; ret = SAA_ERR_",0
528,"<S2SV_ModStart> TSRMLS_CC ) ; if ( new_len > INT_MAX ) { retval_t new_len = INT_MAX ; retval_t old_len = ( int ) new_len ; retval_t old_len = ( int ) new_len ; retval_t old_len = ( int ) old_len ; retval_t old_len = ( int ) old_len ; } if ( retval_stringl ( replaced, ( int ) old_len, 0 ) ; if ( retval_stringl ( replaced, ( int ) old_len, 0 ) > INT_MAX ) { retval_t old_len = ( int ) new_len ; retval_t old_len = ( int ) old_len ; retval_t old_len = ( int ) old_len ; retval_t old_len = ( int ) old_len ; } if ( retval_stringl ( replaced, old_len, old_len ) > INT_MAX ) { retval_stringl ( replaced, old_len, old_len ) ; retval_stringl ( replaced, old_len, old_",0
529,<S2SV_ModStart> ; if ( peerkey -> type!= EVP_PKEY_TYPE_RSA ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC ) {,0
530,"<S2SV_ModStart> ) ; strcpy ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
531,"<S2SV_ModStart>, BLOCK_SIZE subsize, int partition <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, sub",0
532,"<S2SV_ModStart> name ) ; if (! name ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s""",0
533,"<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int block_height = 0 ; int block_x, block_y ; int block_width = s -> avctx -> width ; int block_height = s -> avctx -> height ; int block_height = s -> avctx -> height ; int block_width = s -> avctx -> width ; int block_height = s -> avctx -> height ; int block_height = s -> avctx -> height ; if ( s -> buf [ stream_ptr ]!= 0xe1 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; chunk_size = s -> size ; if ( chunk_size!= s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; chunk_size = s -> size ;",0
534,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ;",0
535,<S2SV_ModStart> * ptype ; if (! skb_is_nonlinear ( skb ) ) goto out ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_,0
536,"<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 || numrows > jas_matind_max ( numrows, numcols ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> rows_ [ 0 ] = NULL ; matrix -> rows_ [ 1 ] = NULL ; matrix -> rows_ [ 2 ] = NULL ; matrix -> rows_ [ 3 ] = NULL ; matrix -> rows_ [ 4 ] = NULL ; matrix -> rows_ [ 5 ] = 0 ; matrix -> rows_ [ 6 ] = NULL ; matrix -> rows_ [ 7 ] = NULL ; matrix -> rows_ [ 7 ] = NULL ; matrix -> rows_ [ 8 ] = NULL ; matrix -> rows_ [ 9 ] = NULL ; matrix -> rows_ [ 10 ] = NULL ; matrix -> rows_ [ 11 ] = NULL ; matrix -> rows_ [ 12 ] = NULL ; matrix -> rows_ [ 12 ] = NULL ; matrix -> data_ [ 12 ] = NULL ; matrix -> data_ [ 12 ] = NULL ; matrix -> datasize_ = 0 ; matrix -> flags_ = 0 ; matrix -> flags_ = 0 ; matrix -> flags_ = 0 ; matrix -> datasize_ = 0 ;",0
537,"<S2SV_ModStart> { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceOlder. b ) )",0
538,"<S2SV_ModStart> ; ret = key_permission <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> u4_first_slice_in_pic ; } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else { ps_dec -> u1_first_slice_in_pic = 0 ; } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 1 ; } else { ps_dec -> u1_first_slice_in_pic = 1 ; } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 1,0
540,"<S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> case BPF_ADD : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_UNSUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ;",0
541,<S2SV_ModStart> filp ) ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) posix_open = ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) == CIFS_MOUNT_POSIX_PATHS ; else posix_open = ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS )!= 0 ; posix_open = ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) == ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) ; if ( posix_open ) posix_open = ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) == CIFS_MOUNT_POSIX_PATHS )? ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) : ( pTcon -> mnt_cifs_flags & CIFS_,0
542,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO,0
543,"<S2SV_ModStart> ) ; if (! ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,<S2SV_ModStart> = 1 ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; else s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;,0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> inet_opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { ireq -> loc_port = th -> dest ; ireq -> rmt_port = th -> source ; ireq -> rmt_addr = ip_hdr ( skb ) -> daddr ; ireq -> rmt_addr = ip_hdr ( skb ) -> saddr ; } else { ireq -> loc_port = th -> dest ; ireq -> rmt_port = th -> source ; ireq -> loc_addr = ip_hdr ( skb ) -> saddr ; ireq -> rmt_addr = ip_hdr ( skb ) -> daddr ; ireq -> rmt_addr = ip_hdr ( skb ) -> saddr ; ireq -> rmt_addr = ip_hdr ( skb ) -> saddr ; }",0
546,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 4 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit4 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; if ( digit4!= '=' ) { * out ++,0
547,<S2SV_ModStart> gc ) ; if ( gpio_dev -> pctrl ) { pinctrl_unregister <S2SV_ModEnd> ( gpio_dev ->,0
548,"<S2SV_ModStart>, len, cur_len, copied <S2SV_ModStart> i ++ ) { copied = min_t ( size_t, cur_len, sizeof ( struct cifs_writedata ) ) ; if ( copied < 0 ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart>, cur_len, sizeof ( struct cifs_writedata ) ) ; if ( rc ) { kfree ( wdata ) ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart>, cur_len, sizeof ( struct cifs_writedata ) ) ; if (! list_empty ( & wdata_list ) ) { list_add ( & wdata_list, & cifs_writedata_list ) ; break ; } <S2SV_ModEnd> tmp = cifs_writedata_alloc <S2SV_ModStart> ( tmp, sizeof ( struct cifs_writedata ) ) ; if ( rc ) { kfree ( tmp ) ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart>, cur_len, sizeof ( struct cifs_writedata ) ) ; if (! list_empty ( & wdata_list ) ) { list_add ( & wdata_list, & w",0
549,<S2SV_ModStart> int i ; if (! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x19 ; rdesc [ i + 2 ] = 0x29 ; } else if ( rdesc [ i ] == 0x19 ) { rdesc [ i ] = 0x19 ; rdesc [ i + 2 ] = 0x29 ; } for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x19 ; rdesc [ i ] = 0x29 ; } else if ( rdesc [ i ] == 0x19 ) { rdesc [ i ] = 0x29 ; rdesc [ i + 2 ] = 0x19 ; } for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i,0
550,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx <S2SV_ModEnd> ) ; svc_log_reset <S2SV_ModStart> ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [",0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> = value ; left -- ; } else if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len += 2 ; } else { in ++ ; len = ( UINT32 ) * in ++ ; len += 4 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { fillMemory ( out, len, value ) ; out += len ; left -= len ; } <S2SV_ModEnd> } <S2SV_null>",0
552,"<S2SV_ModStart> = new_cols ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 0 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> buffers [ 1 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> buffers [ 1 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if",0
553,<S2SV_ModStart> ) { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> * buf ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ;",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
556,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { struct <S2SV_ModEnd> pcrypt_instance_ctx * ctx <S2SV_ModStart> ( inst ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
558,<S2SV_ModStart> ) ) ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
560,"<S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # ifdef CONFIG_IPV6_NDISC_NODETYPE if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } else { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # ifdef CONFIG_IPV6_NDISC_NODETYPE if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # endif",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; size_t replay_esn_len = xfrm_replay_state_esn_len ( up ) ; if ( replay_esn_len!= replay_esn_len ) return - EINVAL ; replay_esn = nla_data ( rp ) ; replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; up_len = xfrm_replay_state_esn_len ( up ) ; if ( up_len!= replay_esn_len ) return - EINVAL ; if ( up_len!= replay_esn_len ) return - EINVAL ; replay_esn_len = xfrm_replay_state_esn_len ; up_len = xfrm_replay_state_esn_len ( up ) ; up_len = xfrm_replay_state_esn_len ( up ) ; if ( up_len!= up_len,0
563,"<S2SV_ModStart> int ret = security_perf_cpu_time_max_percent_handler ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 0 ) ; } else if ( sysctl_perf_cpu_time_max_percent > 100 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 100 ) ; } else { update_perf_cpu_limits ( ) ; }",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> ; if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return 00 ; } if ( compno >= p_image -> numcomps ) { return,0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { u32 prev_legacy, cur_legacy ; mutex_lock ( & kvm -> arch. vpit -> pit_state. lock ) ; prev_legacy = kvm -> arch. vpit -> pit_state. flags & KVM_PIT_FLAGS_HPET_LEGACY ; cur_legacy = ps -> flags & KVM_PIT_FLAGS_HPET_LEGACY ; if ( prev_legacy && cur_legacy ) start = 1 ; mutex_unlock ( & kvm -> arch. vpit -> pit_state. lock ) ;",0
568,"<S2SV_ModStart> void encode_nonrd_sb_row ( <S2SV_ModEnd> VP9_COMP * cpi <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; int64_t dummy_rate = 0 ; int64_t dummy_dist = 0 ; <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row,",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { obuf = opipe -> bufs + nbuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { obuf = opipe -> bufs + nbuf ; },0
570,"<S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_log_packet ( net, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
571,"<S2SV_ModStart> { Fp = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart>, ""wb"" ) ; if ( Fp == NULL ) return HTTP_UNAUTHORIZED ; } parser -> position = POS_ENTITY ; do { if ( entity_offset + Data_Buf_Size > filesize ( filename ) ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } } while ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } } while ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg,0
573,"<S2SV_ModStart> ; if ( ncolors > AV_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > AV_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > AV_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ncolors > AV_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ncolors > AV_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA",0
574,"<S2SV_ModStart> ; krb5_data rspac ; const char * <S2SV_ModEnd> our_realm = krb5_principal_get_comp_string <S2SV_ModStart>, 1 ) ; if (! s4u2self_impersonated_clientdb ) { clientdb = NULL ; s4u2self_impersonated_clientdb = NULL ; } else if (! s4u2self_impersonated_clientdb ) { clientdb = NULL ; s4u2self_impersonated_clientdb = NULL ; } if (! s4u2self_impersonated_clientdb ) { clientdb = NULL ; } if (! s4u2self_impersonated_clientdb ) { clientdb = NULL ; s4u2self_impersonated_clientdb = NULL ; } else if (! s4u2self_impersonated_clientdb ) { clientdb = NULL ; s4u2self_impersonated_clientdb = NULL ; } if (! s4u2self_impersonated_clientdb ) { clientdb = NULL ; } if (! s4u2self_impersonated_clientdb ) { clientdb =",0
575,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { cookie = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; if ( IS_ERR ( cookie ) ) { error = PTR_ERR ( cookie ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; } else if ( nd -> last_type == LAST_BIND ) { error =",0
576,"<S2SV_ModStart> arg ) { struct usbdevfs_connectinfo ci ; int ret ; ret = copy_to_user ( arg, & ci, sizeof ( ci ) ) ; if ( ret ) return ret ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_finish ( <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> opt.",0
578,<S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen <S2SV_ModStart> args -> rmtvaluelen2 ; args -> rmtvaluelen2 = args -> rmtvaluelen,0
579,"<S2SV_ModStart> : if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && device",0
580,"<S2SV_ModStart> ; if ( connection == NULL ) { log_debug ( ""Connection: <S2SV_blank> %s, <S2SV_blank> Upgrade: <S2SV_blank> %s"", ( char * ) upgrade, ( char * ) connection ) ; goto error ; } else { bool found_upgrade = false ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) { log_debug ( ""Connection: <S2SV_blank> %s, <S2SV_blank> Upgrade: <S2SV_blank> %s"", ( char * ) token ) ; goto error ; } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) { log_debug ( ""Connection: <S2SV_blank> %s, <S2SV_blank> Upgrade: <S2SV_blank> %s, <S2SV_blank> Sec-WebSocket-Version: <S2SV_blank> %s, <S2SV_blank> Sec-WebSocket-Key: <S2SV_blank> %s"", ( char * ) ws_key, ws_version ) ; goto error ; } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) { log_debug ( ""Connection: <S2SV_blank> %s, <S2SV_blank> Sec-WebSocket-Version: <S2SV_blank> %s"", ( char * ) ws_key, ws_version ) ; goto error ; }",0
581,"<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( nif > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( nif > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } for ( address = d -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : # ifdef AF_INET6 case AF_INET6 : # endif break ; default : break ; } } } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_sockaddr ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKCAST ) ) { if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header )",0
582,"<S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup",0
583,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart> sock * sk, int tstype, int flags <S2SV_ModStart> serr ; int <S2SV_ModEnd> err ; serr <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; serr -> ee. ee_flags = flags ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } if ( flags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > sk -> sk_tskey ) serr -> ee. ee_data -= sk -> sk_tskey ; } if ( flags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = sk",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status == MagickFalse )",0
587,"<S2SV_ModStart> len ; if (! in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } <S2SV_ModEnd> ND_TCHECK ( bp <S2SV_ModStart> len ; if (! in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } <S2SV_ModEnd> ND_TCHECK ( bp <S2SV_ModStart> len ; } if ( in_cksum ( vec, 1 ) ) { if (! in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> len ; } if ( in_cksum ( vec, 1 ) ) { if (! in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; }",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""&amp;"" ) ) ; run_burl_normalize ( psrc, ptmp, flags",0
589,<S2SV_ModStart> (! dumpable &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ),0
590,<S2SV_ModStart> long ) ) { if ( i >= ( int ) ( w - sizeof ( long ) ) ) break ; if ( i >= ( int ) ( w - sizeof ( long ) ) ) break ; long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a & pb_7f ) + ( b & pb_7f ) ) ^ ( ( a ^ b ) & pb_80 ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( ( a ^ b ) & pb_80 ) ; } for ( ; i < w ; i ++ ) { * ( long * ) ( dst + i ) = ( ( a ^ b ) & pb_80 ) ; } for ( ; i < w ; i ++ ) { * ( long * ) ( src1 + i,0
591,"<S2SV_ModStart> ( flags & GFP_ZERO ) { memset ( addr, 0, size ) ; return NULL ; } <S2SV_ModEnd> return swiotlb_alloc_coherent (",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> ps_codec ) ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_flags = 1 ; ps_parse -> s_sei_params. i4_,0
594,"<S2SV_ModStart> cypress_private ) ; if (! serial ) return - ENODEV ; if ( port -> interrupt_out_size > 9 ) priv -> pkt_fmt = packet_format_1 ; else priv -> pkt_fmt = packet_format_2 ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> intervals: <S2SV_blank> read=%d <S2SV_blank> write=%d\\n"", __func__, priv -> read_urb_interval, priv -> write_urb_interval ) ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> intervals: <S2SV_blank> read=%d <S2SV_blank> write=%d\\n"", __func__, priv -> read_urb_interval",0
595,<S2SV_ModStart> ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENGINES ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENGINES ; if ( num_engines <= SDMA_MIN_ENGINES ) num_engines = SDMA_MIN_ENGINES ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_MAX_ENTRIES ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENTRIES ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENTRIES ; if ( num_engines > SDMA_MAX_ENGINES ) num_engines = SDMA_MAX_ENTRIES ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines = SDMA_MAX_ENTRIES ; if ( num_engines > SDMA_MAX_ENTRIES ) num_engines =,0
596,<S2SV_ModStart> device_data ; if ( dev -> dev. group == SNDRV_SEQ_DEVICE_GROUP_KERNEL || dev -> dev. group == SNDRV_SEQ_DEVICE_GROUP_KERNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_MKNEL_,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ) ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } <S2SV_ModStart> ) ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; } if (! ( param -> testflag & T_SILENT ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> My",0
598,<S2SV_ModStart> == q || ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ) ) ) ) ) == 0 ) || ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ),0
599,"<S2SV_ModStart> { uint dblocks = XFS_B_TO_FSB ( mp, namelen ) ; nblks += dblocks ; nblks += XFS_DAENTER_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; nblks += XFS_NEXTENTADD_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; nblks += XFS_NEXTENTADD_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, nblks, XFS_ATTR_FORK ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, nblks, XFS_ATTR_FORK ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, nblks, XFS_ATTR_FORK ) ;",0
600,"<S2SV_ModStart> ) ; } if ( pcount > MAX_HSTORE_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, MAX_HSTORE_PAIRS ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; envaddrule ( env, r ) ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( text [ 1 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 2 ] == EOF ) return 0 ; if ( text [ 3 ] == EOF ) return 0 ; text [ 4 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 4 ] == EOF ) return 0 ; text [ 5 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 5 ] == EOF ) return 0 ; text [ 6 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 6 ] == EOF ) return 0 ; text [ 7 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 7 ] == EOF ) return 0 ; text [ 8 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 8 ] == EOF ) return 0 ; text [ 9 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 9 ] == EOF ) return 0 ; text [ 10 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 10 ] == EOF ) return 0 ; text [ 9 ] = RE_YY_INPUT ( yyscanner ) ;,0
603,"<S2SV_ModStart> case 'R' : if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 0 == strncmp ( ""DELETE"", c -> buf, 4 ) ) { method = AGOO_DELETE ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 0 == strncmp ( ""DELETE"", c -> buf, 4 ) ) { method = AGOO_DELETE ;",0
604,"<S2SV_ModStart> void vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart> G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_nolock ; fh_drop_n",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> =",0
609,"<S2SV_ModStart> ) ; switch ( pc -> lengthComponentIdent ) { case 0 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 2 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 3 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( comp_len < 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= comp_len ; break ; } elen += sizeof (",0
610,"<S2SV_ModStart> ) ) ; if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""attr-%u"", dp [ 0 ] ) ) ) ; if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsv3_sattr_str, ""attr-%u"", dp [ 0 ] ) ) ) ; if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo,",0
611,"<S2SV_ModStart> case VTP_SUMMARY_VLAN : ND_TCHECK2 ( * tptr, 4 ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Config <S2SV_blank> Rev <S2SV_blank> %u, <S2SV_blank> Updater <S2SV_blank> %s"", EXTRACT_32BITS ( tptr ) ) ) ; tptr += 4 ; ND_TCHECK2 ( * tptr, 4 ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, t",0
612,"<S2SV_ModStart> userData, ctxt -> curPos, ctxt -> curPos <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, ctxt -> curPos <S2SV_ModEnd> ) ; if",0
613,<S2SV_ModStart> ) ; bool checksum_valid = false <S2SV_ModStart> slow ) ; checksum_valid =! ( msg -> msg_flags & MSG_TRUNC ) ; if ( checksum_valid &&! ( msg -> msg_flags & MSG_TRUNC ) ) { if (! ( msg -> msg_flags & MSG_TRUNC ) ) { if (! ( msg -> msg_flags & MSG_TRUNC ) ) { msg -> msg_flags |= MSG_TRUNC ; } } } else { if (! ( msg -> msg_flags & MSG_TRUNC ) ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB ( skb ) -> partial_cov ) { if ( UDP_SKB_CB,0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { break ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; break ; } tptr += sizeof ( rpki_rtr_pdu ) ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; tptr += sizeof ( rpki_rtr_pdu ) ) ; tptr += sizeof ( rpki_rtr_p",0
615,"<S2SV_ModStart> int tagval ; if ( s == NULL ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( s -> p [ 0 ]!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE| BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if ( token ) { if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tag",0
616,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> chars_processed ; int <S2SV_ModStart> ; int data_size ; ND_TCHECK2 ( * cp, 1 ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } cp += l ; l = labellen ( ndo, cp ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<ELT <S2SV_blank> %d>"", elt ) ) ; return ( NULL ) ; }",0
617,"<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = valuelen ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_LOG_CALC, args -> rmtvaluelen ) ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; xfs_trans_log_inode ( args -> trans, dp, dp, XFS_ILOG_CORE, dp, XFS_LOG_CALC, args -> rmtvaluelen, args -> rmtvaluelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, args -> rmtvaluelen ) ; args -> rmtvaluelen = args -> valuelen ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_LOG_CALC, args",0
618,"<S2SV_ModStart> ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" <S2SV_ModStart> request, _auth? _auth : """", StringBuffer_toString ( data ) ) ; if ( rv < 0 ) THROW ( IOException, ""Monit: <S2SV_blank> cannot <S2SV_blank> send <S2SV_blank> command <S2SV_blank> to <S2SV_blank> the <S2SV_blank> monit <S2SV_blank> daemon <S2SV_blank> -- <S2SV_blank> %s"", STRERROR ) ;",0
619,"<S2SV_ModStart> 1 ) ; } if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } if ( copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""copy_file_as_user"" ) ; if ( copy_file_as_user ( src, dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
620,"<S2SV_ModStart> flags ) ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> return NULL ; spin_unlock_irqrestore ( & bfad -> bfad_lock, flags ) ; <S2SV_ModStart> return NULL ; spin_lock_irqsave ( & bfad -> bfad_lock, flags ) ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK ) return NULL ; hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> rx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fc",0
621,"<S2SV_ModStart> value ) { value -> r = MinF ( 1.0f, MaxF ( 0.0f, value -> r ) ) ; value -> g = MinF ( 1.0f, MaxF ( 0.0f, value -> g ) ) ; value -> b = MinF ( 1.0f, MaxF ( 0.0f, value -> b ) ) ; value -> c = MinF ( 1.0f, MaxF ( 0.0f, value -> c ) ) ; value -> d = MinF ( 1.0f, MaxF ( 0.0f, value -> d ) ) ; value -> e = MinF ( 1.0f, MaxF ( 0.0f, value -> e ) ) ; value -> a = MinF ( 1.0f, MaxF ( 0.0f, value -> a ) ) ; value -> b = MinF ( 1.0f, MaxF ( 0.0f, value -> b ) ) ; value -> d = MinF ( 1.0f, MaxF ( 0.0f, value -> d ) ) ; value -> e = MinF ( 1.0f, MaxF ( 0",0
622,"<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( len == - PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if ( * line == '#' ) ret = comment_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""OK <S2SV_blank> "" ) ) ret = ok_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""NG"" ) ) ret = ng_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""OK <S2SV_blank> "" ) ) ret = ok_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""OK <S2SV_blank> "" ) ) ret = ok_pkt ( head",0
623,"<S2SV_ModStart> ; if ( unlikely (! vma -> vm_ops -> page_mkwrite ) ) return VM_FAULT_SIGSEGV ; if ( vma -> vm_ops -> page_mkwrite ) entry = pte_mkwrite ( entry ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! page_table ) goto unlock ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( entry ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkwrite ( entry ) ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkwrite ( entry ) ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkdirty ( entry ) ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkwrite ( pte_mkwrite ( entry ) ) ; page_table = pte_offset_map_",0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; env -> insn_aux_data = new_data ;",0
626,"<S2SV_ModStart> bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ) ; }",0
627,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,<S2SV_ModStart> 0 ) ; if ( ( occ0 / rowsize )!= 0 ) { TIFFError * tifp = & tif -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * t,0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, n -> order ) ; o += 2 ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 6, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", """,0
631,"<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM ) ; } else if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM ) ; } else { code = kg_unseal_iov_token ( minor_status, ctx, conf_state, qop_state, iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM ) ; }",0
632,<S2SV_ModStart> = NULL ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; if (! atomic_dec_and_test ( & sbi -> s_active ) ) { atomic_dec ( & sbi -> s_active ) ; } } } } },0
633,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_OLD_FILE : mi_check_print_error ( param, ""\",0
634,"<S2SV_ModStart> ) { int len = <S2SV_ModEnd> strlen ( string <S2SV_ModStart> curlx_ultouc ( hex ) ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> curl_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart>, 1 ) ; if (! res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return NULL ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PF",0
636,"<S2SV_ModStart> again ; } if ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } iov_iter_advance ( i, copied ) ; pos += copied ; balance_dirty_pages_ratelimited ( mapping ) ;",0
637,"<S2SV_ModStart> ; } if ( unlikely ( len > ring -> rx_buffersize ) ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; } else { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; } if ( unlikely ( desc == NULL ) ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; } else { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; } if ( unlikely ( desc == NULL ) ) { desc = ops -> idx2desc ( ring, * slot, &",0
638,"<S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN,",0
639,"<S2SV_ModStart> |= SEEN ; if (! show_object ( obj, NULL, name, data ) ) continue ; <S2SV_ModStart> |= SEEN ; if (! <S2SV_ModStart> -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_",0
640,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags ; else if ( sub -> flags & prog -> flags & prog -> flags & prog -> flags & prog -> flags & prog -> flags & eflags ) sub -> flags |= prog -> flags | eflags ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags &= ~ prog -> flags ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags &= ~ prog -> flags ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags | eflags ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) sub -> flags |= prog -> flags ;",0
641,<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_height * c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_height ) return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_height ) return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height ) return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_height ) return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height * c -> tile_height * c -> tile_width * c -> tile_height * c -> tile_height ) return AVERROR_INVALID,0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_GENERR ; } if (! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } if (! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
644,<S2SV_ModStart> pixels ++ ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( (,0
645,"<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> timer_list_head, open_list ) { spin_unlock_irq ( & timeri -> timer_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> timer_list ) ; } mutex_unlock ( & timeri -> timer_lock ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> timer_list_head, open_list ) { spin_lock_irq ( & timeri -> timer_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> timer_list ) ; timeri -> timer = NULL ; } list_for_each_entry_safe ( slave, tmp, & timeri -> timer_list_head, open_list ) {",0
646,"<S2SV_ModStart> len ; } if ( len < 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 3)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 3)"" ) ) ; return len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ;",0
647,"<S2SV_ModStart> -> has_va ; ut32 arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return",0
648,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void sas_probe_devices ( <S2SV_ModStart>, * n ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_for_each_entry ( dev, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node",0
649,<S2SV_ModStart> -> u1_dpb_commands_read ) { ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; } else { ps_dec -> ps_bitstrm -> u4_ofst = 0 ; },0
650,"<S2SV_ModStart> ; int pkt_len ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ 13 ] ; gboolean cap_dir ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; <S2SV_ModStart> ; if (! netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap!= WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap!= WTAP_ENCAP_PER_PACKET",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> SWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> Image. Width ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - gifFilePtr -> SHeight ; uint_fast32,0
653,"<S2SV_ModStart> can_read_key : if ( key -> type -> validate ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; } if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; } }",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) return ret_not_found ; dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret_error ; ret = validate_dn",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageData",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val =,0
657,<S2SV_ModStart> case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
659,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"", size, msg_flags, timeo",0
660,"<S2SV_ModStart> ] ; if ( strncmp <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) ) return - 1 ; if (! access ( spath, F_OK ) ) return - 1 ; if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; return - 1 ; }",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; if (! font_name ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; } if (! font_name ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; } if (! font_name ) { free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ;,0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; <S2SV_ModStart> 0 ) { mutt_bcache_delete ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif }",0
663,"<S2SV_ModStart> objp ) ; xdrs -> x_op = 0 ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE",0
664,<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> UIPC_CH_NUM ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) { if ( ch_id!= UIPC_CH_ID ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ),0
665,"<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp",0
666,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; <S2SV_ModStart> ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PBA_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size",0
667,"<S2SV_ModStart> goto out ; if ( dentry -> d_inode ) { mutex_lock ( & dentry -> d_inode -> i_mutex ) ; err = notify_change ( dentry, attr, NULL ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; }",0
668,"<S2SV_ModStart> ; while ( ( p = strchr <S2SV_ModEnd> ( p, <S2SV_ModStart> p ) ) && ( ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) ) || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 0 ] == 'u' && p [ 1 ] == 'p' && p [ 2 ] == 'p' ) ) ) ; return ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) || ( p [ 0 ] == 'd' && p [ 1 ] == 'u' && p [ 2 ] == 'p' ) ) ; } <S2SV_ModEnd> <S2SV_null> <",0
669,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, & slen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring (",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
671,<S2SV_ModStart> ++ ) { if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx,0
672,"<S2SV_ModStart> NULL ) goto cleanup <S2SV_ModEnd> ; status = <S2SV_ModStart> 0 ; } if ( status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } if ( status ) { status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; } if ( status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } if ( status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; cleanup :",0
673,<S2SV_ModStart> precno ++ ) { Jpeg2000Prec * prec = comp -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
674,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ; err = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; rcu_read_unlock ( ) ;",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> ) { return <S2SV_ModEnd> ONLY_4X4 ; } <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] ; } else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( cpi -> sf. <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; },0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> vf == GF_VDEF <S2SV_ModEnd> && im -> <S2SV_ModStart> vf == GF_MHWPREDICT <S2SV_ModEnd> && im -> <S2SV_ModStart> vf == GF_DEVPREDICT <S2SV_ModEnd> && im -> <S2SV_ModStart> vf == GF_MHWPREDICT <S2SV_ModEnd> && im -> <S2SV_ModStart> vf == GF_MHWPREDICT <S2SV_ModEnd> && im -> <S2SV_ModStart> vf == GF_DEVSEASONAL && im -> gdes [ vidx ]. data && im -> gdes [ vidx ]. data && im -> gdes [ vidx ]. data && im -> gdes [ vidx ]. ds && im -> gdes [ vidx ]. step && im -> gdes [ vidx ]. ds_cnt && im -> gdes [ vidx ]. <S2SV_ModStart> vf == GF_MHWPREDICT <S2SV_ModEnd> && im -> <S2SV_ModStart> vf == GF_DEVSEASONAL && im -> gdes [ vidx ]. data && im -> gdes [ vidx ]. data && im -> gdes [ vidx ]. data && im -> gdes [ vidx ]. ds_cnt && im -> gdes [ vidx ],0
679,<S2SV_ModStart> NULL ; } if ( shdr -> sh_size > sz ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_ver,0
680,<S2SV_ModStart> b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else { return 1 ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
681,"<S2SV_ModStart> if ( ( i = cdf_read_scn ( & info, & h, & scn ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SCN"" ; goto out0 ; } if ( ( i = cdf_read_scn ( & info, & h, & scn, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SCN"" ; goto out1 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir, & root_storage ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SHORT <S2SV_blank> STREAM"" ; goto out3 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & scn, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SHORT <S2SV_blank> STREAM"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir, & root_storage ) ) == - 1 ) { expn = ""Can",0
682,"<S2SV_ModStart> = NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) info = vmalloc ( sz ) ; if (! info ) return NULL ; if (! info",0
683,"<S2SV_ModStart> } if ( vars -> cnt == 0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,"<S2SV_ModStart> (! net_eq ( net, & init_net ) ) return - EAFNOSUPPORT ; switch ( protocol ) { case 0 : case PF_AX25 : if ( ax25_protocol_is_registered ( AX25_P_AX25 ) ) return - ESOCKTNOSUPPORT ; break ; # ifdef CONFIG_INET case AX25_P_ARP : case AX25_P_IP : break ; # endif # ifdef CONFIG_ROSE_MODULE case AX25_P_ROSE : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_ROSE_MODULE case AX25_P_ROSE : if ( ax25_protocol_is_registered ( AX25_P_ROSE ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCKTNOSUPPORT ; break ; # endif #",0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,<S2SV_ModStart> -> _eip ; ctxt -> old_eip = ctxt -> src. val ; <S2SV_ModStart> case 4 : ctxt -> old_eip = ctxt -> src. val ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; break ; } case 3 : ctxt -> old_eip = ctxt -> src. val ; rc = em_jmp_far ( ctxt ) ; break ; case 4 : ctxt -> old_eip = ctxt -> _eip ; rc = em_push ( ctxt ) ; break ; case 6 : rc = em_jmp_far ( ctxt ) ; break ; case 7 : rc = em_push ( ctxt ) ; break ; case 8 : rc = em_push ( ctxt ) ; break ; case 9 : rc = em_push ( ctxt ) ; break ; case 10 : rc = em_push ( ctxt ) ; break ; case 12 : rc = em_push ( ctxt ) ; break ; case 13 : rc = em_push ( ctxt ) ; break ; case 14 : rc = em_push ( ctxt ) ; break ; case 15 : rc = em_push ( ctxt ) ; break ; case 16 : rc = em_push ( ctxt ),0
687,"<S2SV_ModStart> url ) ; mutt_str_cat ( errstr, sizeof ( errstr ), list. name ) ; mutt_str_cat ( url. path, sizeof ( url. path ), '\\0' ) ; url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; mutt_str_cat ( errstr, sizeof ( errstr ), ""\\"""" ) ; mutt_buffer_init ( & token ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; FREE ( & token. data ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; F",0
688,"<S2SV_ModStart> * secret, <S2SV_ModEnd> void * dbuf <S2SV_ModStart> th ; void * dp, * dend <S2SV_ModEnd> ; int dlen <S2SV_ModStart> dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; } dout ( """,0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
690,"<S2SV_ModStart> -> init_msg ; if ( n2l ( p, s -> session -> tlsext_tick_lifetime_hint ) < 0 ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH ) ; goto f_err ; }",0
691,"<S2SV_ModStart> b ) ; sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( & b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
693,"<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = NULL ; return ( * index_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = expr -> array_ref. entry ; return ( * field_rtrn!= NULL ) ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; case EXPR_FIELD_REF :",0
694,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
695,"<S2SV_ModStart>, end_col_offset ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO",0
696,<S2SV_ModStart> = 0 ; struct sockaddr_storage addr = sctp_sk ( sk ) -> peer. primary_addr ; struct ip_sockaddr_storage addr = sctp_sk ( sk ) -> peer. primary_addr ; if ( addr -> sa_family!= AF_INET ) return - EINVAL ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,"<S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= SS_UNCONNECTED ) { if ( sock_flag ( sk, SOCK_DONE ) ) err = - ENOTCONN ; goto out ; } if (! msg -> msg_iov ) msg -> msg_iov -> iov_base = kmalloc ( len, GFP_KERNEL ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_iov -> iov_base = kmalloc ( len, GFP_KERNEL ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct sockaddr_storage ) ; msg -> msg_namelen = sizeof ( struct",0
699,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; if ( ( * o_row_idx == NULL ) || ( * o_values == NULL ) || ( l_row_idx_id == NULL ) ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory!\\n"" ) ; return - 1 ; }",0
700,"<S2SV_ModStart>, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
701,"<S2SV_ModStart> ctxt ) { register_address_increment ( ctxt, VCPU_REGS_RCX ), - 1 ) ; if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) )",0
702,,1
703,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; <S2SV_ModEnd> freq_reg += HI3660_STUB_CLOCK_DATA,0
704,"<S2SV_ModStart> : if ( position < 0 || position >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
705,<S2SV_ModStart> out_mutex ; } if ( ext4_should_order_data ( inode ) ) { ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; } else { ext4_inode_block_unlocked_dio ( inode ) ; },0
706,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( memcmp ( midi_data, ""RIFF"", 4 ) ) { if ( midi_size < 34 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } midi_data += 4 ; midi_size -= 4 ; } if ( memcmp ( midi_data, ""MThd"", 4 ) ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_MIDI, NULL, 0 ) ; return ( NULL )",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_SNDBUFFLUSH : sk -> sk_userlocks |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = max_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_SNDBUFFLUSH : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val",0
708,"<S2SV_ModStart> * bh ; struct logicalVolDesc * lvd <S2SV_ModEnd> ; int ret <S2SV_ModStart> TAG_IDENT_LVD ) ; lvd = ( struct logicalVolDesc * ) bh -> b_data ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> mapTableLength ) ) ; if ( ret ) goto out_bh ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else { u16 suf = le16_to_cpu ( ( ( __le16 * ) upm2 -> partIdent.",0
709,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } JAS_DBGLOG <S2SV_ModStart> ) ; return NULL",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,"<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_nxt_word ) { ps_cabac -> u4_ofst = ps_bitstrm -> u4_nxt_word ; ps_cabac -> u4_ofst = ps_bitstrm -> u4_nxt_word ; ps_cabac -> u4_range = ( UWORD32 ) 510 << RANGE_SHIFT ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word, 9 ) ; ps_cabac -> u4_range = ( UWORD32 ) 510 << RANGE_SHIFT ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_n",0
712,"<S2SV_ModStart> ; save_text_from_text_view ( <S2SV_ModEnd> g_tv_comment, FILENAME_COMMENT",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ;",0
714,<S2SV_ModStart> ; if ( <S2SV_ModEnd> prev_line_has_list_loosening_effect ) { <S2SV_ModStart> prev_line_has_list_loosening_effect ) { if ( <S2SV_ModEnd> prev_line_has_list_loosening_effect ) { <S2SV_ModStart> prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev_line_has_list_loosening_effect ) { if (! prev,0
715,"<S2SV_ModStart>, extent, <S2SV_ModEnd> length ; ssize_t <S2SV_ModStart> ) break ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_info. type == RT_STANDARD ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. maptype == RT_STANDARD ) <S2SV_ModStart> sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. maptype == RT",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype, krb5_principals spp, const krb5_principals enc_pa_data <S2SV_ModEnd>, const char <S2SV_ModStart> client_principal, krbtgt <S2SV_ModEnd>, krbtgt_etype krbtgt_etype",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> -> loc_addr ; ireq -> opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_id = jiffies ;,0
719,<S2SV_ModStart> struct xmlparser parser ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser,0
720,"<S2SV_ModStart> ; if ( tlen <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, csum_partial ( skb_transport_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; put_cmsg",0
721,"<S2SV_ModStart> pfn ) ; r = - EINVAL ; goto unmap_pages ; } r = kvm_iommu_get_pages ( kvm, gfn, page_size, flags ) ; if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages ; } if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = kvm_iommu_put_pages ( kvm, gfn, page_size, flags ) ; goto unmap_pages ; } gfn += page_size >> PAGE_SHIFT ; r = kvm_iommu_put_pages ( kvm, gfn, page_size, flags ) ; if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank>",0
722,"<S2SV_ModStart> ; memcpy ( & b [ 6 ], cmd -> msg, cmd -> msg_len ) ; state -> config -> send_command ( fe, 0x72, sizeof ( b ) - ( 6 - cmd -> msg_len ), b, NULL, NULL ) ;",0
723,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock <S2SV_ModEnd> ( event ),0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [,0
725,"<S2SV_ModStart> ) ; struct f2fs_free_nid_entry <S2SV_ModEnd> * i ; <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! i ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid",0
726,<S2SV_ModStart> ; # if CONFIG_POSTPROC_VISUALIZER ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; # endif <S2SV_ModStart> noise_level ; # if CONFIG_POSTPROC_VISUALIZER ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv,0
727,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely ( extra. type > XEN_NETIF_EXTRA_TYPE_MAX ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> flags: <S2SV_blank> %d\\n"", extra. flags ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ; } while ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) { if ( unlikely ( extra. flags & XEN_NETIF_EXTRA_FLAG_MORE ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> flags: <S2SV_blank> %d\\n"", extra. flags ) ; return - EINVAL ; } <S2SV_ModEnd> return",0
728,<S2SV_ModStart> ) ) ; hdr -> sadb_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_errno = ( uint8_t ),0
729,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
730,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'f' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & f, sizeof ( f ), h. endian ) ; lua_pushnumber ( L, f ) ; break ; } case 'd' : { double d ; memcpy ( & d, data + pos, size ) ; correctbytes ( ( char * ) & d, sizeof ( d ), h. endian ) ; lua_pushnumber ( L, d ) ; break ; } case 'e' : { lua_Number e ; memcpy ( & e, data + pos, size ) ; correctbytes ( ( char * ) & e,",0
731,<S2SV_ModStart> = 0 ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg6 = ( const struct olsr_msg6 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. msg4 = ( const struct olsr_msg4 * ) tptr ; ptr. hello_link = ( const struct olsr_hello_link * ) tptr ; ptr. hello_link = ( const struct olsr_hello_link * ) tptr,0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_ext * body = ( struct oz_multiple_ext * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; count = data_len / body -> unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_EXTEND : { struct oz_isoc_ext * body = ( struct oz_isoc_ext * ) data_hdr ; u8 * data = body",0
733,"<S2SV_ModStart> end_time ) { VP8_COMMON * cm = & cpi -> common ; # endif struct vpx_usec_timer timer ; int res = 0 ; # if HAVE_NEON if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer )",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ; int rv <S2SV_ModEnd> = copy_file ( <S2SV_ModStart> dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; <S2SV_ModEnd> } pid_t child <S2SV_ModStart> 0 ) ; rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""chown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" )",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONT,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext || path [ depth ]. p_idx > EXT_MAX_INDEX ( path [ depth ]. p_hdr ) ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_idx!= fidx ) { EXT4_ERROR_INODE ( inode, ""p_idx <S2SV_blank>!= EXT_MAX_INDEX ( path [ depth ]. p_hdr ) ) ; EXT4_ERROR_INODE ( inode, ""p_idx <S2SV_blank>!= EXT_MAX_INDEX ( path [ depth ]. p_hdr ) ) ; EXT4_ERROR_INODE ( inode, ""p_idx <S2SV_blank>!= EXT_MAX_INDEX ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_idx <S2SV_blank>!= EXT_MAX_INDEX ( path [ depth ]. p_hdr ) ) ; return - EFSCORRUPTED ; }",0
738,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_hbe_txposer -> freq_band_tab <S2SV_ModStart> -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band ] ] == 0 || ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band ] ] == 0 || ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band ] == 0 || ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band_tab [ ptr_hbe_txposer -> freq_band ] ],0
739,"<S2SV_ModStart> ] ; image_w = get_ushort ( & tga [ 4 ] ) ; image_h = get_ushort ( & tga [ 6 ] ) ; pixel_depth = get_ushort ( & tga [ 9 ] ) ; image_desc = tga [ 13 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type >",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { int rem ; rem = div_u64_rem ( <S2SV_ModEnd> cpu. sched <S2SV_ModStart> tp ) ; rem = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) { rem = div_u64_rem ( rem, NSEC_PER_SEC ) ; tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; } else { tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; } <S2SV_ModEnd> cputime_to_timespec ( cpu <S2SV_ModStart> tp ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; luaLuaModuleConfig * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; luaLuaDirCfg * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; lua_authz_provider_spec * prov_spec = parsed_require_line ; luaLuaModuleConfig * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; luaLuaModuleConfig * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; luaLuaModuleConfig * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in",0
744,<S2SV_ModStart> * prev ; <S2SV_ModEnd> address &= PAGE_MASK <S2SV_ModStart> address ) ; if ( ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE ) ) { if ( address - vma -> vm_start < stack_guard_gap ) return - ENOMEM ; } else { if ( ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_READ ) ) { if ( address - vma -> vm_end < stack_guard_gap ) return - ENOMEM ; } else { if ( ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE ) ) { if ( address - vma -> vm_start < stack_guard_gap ) return - ENOMEM ; } else { if ( ( vma -> vm_flags & VM_WRITE ) && ( vma -> vm_flags & VM_READ ) ) { if (! ( vma -> vm_flags & VM_EXEC ) ) return - ENOMEM ; } } },0
745,"<S2SV_ModStart> { umode_t mode = posix_acl_mode ( inode, & acl ) ; error = posix_acl_update_mode ( inode, & mode, acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode <S2SV_ModStart> 0 ) return error <S2SV_ModEnd> ; } set_acl",0
746,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> int optional ) <S2SV_ModStart> mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { if ( optional ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } else { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\'"", fsname, target ) ; return - 1 ; } } # ifdef HAVE_STATVFS if ( statvfs ( fsname, & sb ) == 0 ) { DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } # endif if ( mountflags & MS_BIND ) { DEBUG ( ""remounting <S2SV_blank> %s <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> respect <S2SV_blank> bind <S2SV_blank> or <S2SV_blank> remount <S2SV_blank> options"", fsname? fsname : ""(none)"", target? target : ""(none)""",0
747,<S2SV_ModStart> 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; quantum_type = DestroyQuantumInfo ( quantum_type ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_type ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_type == MagickFalse ) quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) quantum_,0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,"<S2SV_ModStart> ; if ( proto_end == url ) return 0 ; cp = url ; at = strchr ( cp, '@' ) ; colon = strchrnul ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else { c -> username = NULL ; c -> password = NULL ; }",0
750,"<S2SV_ModStart>, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
751,"<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD <S2SV_ModEnd> ) ) eventfd_signal <S2SV_ModStart> 1 ) ; if ( io_data -> req ) { usb_ep_free_request ( io_data -> ep, io_data -> req ) ; io_data -> kiocb -> private = NULL ; } else { <S2SV_ModEnd> usb_ep_free_request ( io_data <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
752,"<S2SV_ModStart> ; if ( opt -> srr && rt -> rt_flags & RTCF_DOREDIRECT <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> ) ) ip_rt_send_redirect ( skb ) ; skb -> priority = iph -> tos ; return NF_HOOK ( NFPROTO_IPV4, NF_INET_FORWARD, skb ) <S2SV_ModEnd> ; too_many_hops :",0
753,"<S2SV_ModStart> ( ) ; if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"",",0
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; char * datablob ; size_t datalen = prep -> datalen <S2SV_ModStart> trusted_payload * new_p = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! new_p ) { pr_info ( ""trusted_key: <S2SV_blank> datablob <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) { ret = - ENOMEM ; goto out ; } datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_",0
755,<S2SV_ModStart> 1 ; } if ( n <= 0 ) { break ; } <S2SV_ModEnd> if ( --,0
756,"<S2SV_ModStart> int lci_o ; struct rose_sock * rose_sock ; <S2SV_ModStart> 2 ] ; rose_sock = rose_find_socket ( lci_i, rose_loopback_neigh ) ; if ( rose_sock ) { sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } } else { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } } else { kfree_skb ( skb ) ;",0
757,<S2SV_ModStart> goto out_free ; if ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) ) { r = - EPERM ; goto out_free ; } r = 0 ; out_free : if ( ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) && ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) ) { r = - EPERM ; goto out_free ; },0
758,<S2SV_ModStart> indev!= NULL && <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
759,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if (",0
760,"<S2SV_ModStart> ; if (! dff_chunk_header. ckDataSize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ;",0
761,"<S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE <S2SV_ModEnd> ) ; goto <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE <S2SV_ModEnd> ) ; goto <S2SV_ModStart> : if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err (",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), zmalloc_used_memory ( ) ) ; } if ( ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ) ) ; redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server.",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; }",0
764,"<S2SV_ModStart> -> priv ; int ret, wo ; if ( wlen < 0 || wlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } ret = dvb_usb_generic_write ( d, st -> data, 1, wbuf, wlen, rbuf, rlen, 0 ) ; if ( ret ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } wo = ( rbuf == NULL || rlen == 0 ) ; ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen,",0
765,"<S2SV_ModStart> ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ;",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; if ( new_root_item -> index!= index ) { ret = btrfs_insert_empty_dir_item ( fs_info, path, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( fs_info, path, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( fs_info, path, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( fs_info, path, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( fs_info, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_empty_dir_item ( fs_info, path, root, new_root_item ) ; if ( ret )",0
769,<S2SV_ModStart> fp ) ; atomic_long_dec ( & s -> inflight ) ; <S2SV_ModStart> unix_sk ( s <S2SV_ModEnd> ) ; unix_tot_inflight <S2SV_ModStart> -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> unix_tot_inflight <S2SV_ModStart> -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
770,"<S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } <S2SV_ModEnd> return 0 ;",0
771,"<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vp9_",0
772,<S2SV_ModStart> ms ) { if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ; if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> NULL ) ; rcu_assign_pointer ( np -> inet_opt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> inet_opt, NULL ) ;",0
777,<S2SV_ModStart> ; BIO * <S2SV_ModEnd> tmpin = NULL <S2SV_ModStart> tmpin = NULL <S2SV_ModEnd> ; if (,0
778,"<S2SV_ModStart> - EINVAL ; if ( copy_to_user ( optval, & np -> mcast_filter. gf_group, sizeof ( np -> mcast_filter. gf_group. ss_family, sizeof ( np -> mcast_filter. gf_group. ss_family ), sizeof ( np -> mcast_filter. gf_group. ss_family ), sizeof ( gsf. gf_group. ss_family ) ) ) return - EINVAL ; if ( copy_to_user ( optval, & gsf. gf_group. ss_family, sizeof ( gsf. gf_group. ss_family ), sizeof ( gsf. gf_group. ss_family ), sizeof ( gsf. gf_group. ss_family ), sizeof ( gsf. gf_group. ss_family ), sizeof ( gsf. gf_group. ss_family ) ) ) return - EFAULT ; if ( copy_to_user ( optval, & np -> mcast_filter. gf_group. ss_family, sizeof ( gsf. gf_group. ss_family ), sizeof ( gsf. gf_group. ss_",0
779,<S2SV_ModStart> ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ; free_pernet_subsys ( & sctp_ipv6_ops ) ; free_pernet_subsys ( & sctp_ipv6_ops ) ; free_pernet_subsys ( & sctp_ipv6_ops ) ; free_pernet_subsys ( & sctp_ipv4_ops ) ; free_pernet_subsys ( & sctp_ipv6_ops ) ; free_pernet_subsys ( & sctp_ipv4_ops ) ; free_pernet_subsys ( & sctp_ipv6_ops ) ; free_pernet_subsys ( & sctp_ipv4_ops ),0
780,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV",0
781,"<S2SV_ModStart> ptr ) { struct <S2SV_ModStart> netdev_notifier_info info ; dev = rcu_dereference_protected ( dev -> priv, lockdep_is_held ( & masq_netdev_lock ) ) <S2SV_ModEnd> ; return masq_device_event",0
782,"<S2SV_ModStart> ( current -> <S2SV_ModEnd> active_mm!= mm <S2SV_ModStart> ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ( smp_processor_id ( ) ) ; flush_tlb_others ( current -> active_mm, mm, start, end ) ; trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush ) ; if (! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) base_pages_to_flush = tlb_single_page_flush_ceiling ; trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush ) ; if (! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = TLB_FLUSH_ALL ; for ( addr = start ; addr < end ; addr += PAGE_SIZE ) { count_vm_tlb_event ( NR_TLB_LOCAL_ONE ) ; __flush_tl",0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_samples_total > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" )",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> ) { temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 ) break ; temp [ i ] = 0 ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 ) break ; temp [ i ] = 0 ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == 0 ) break ; if ( temp [ i ] == 0 ) break ; temp [ i ] = 0 ;,0
785,<S2SV_ModStart> task -> slow_task <S2SV_ModEnd> ) return ;,0
786,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( name, ""r"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
787,"<S2SV_ModStart> ; if ( addr_str_length > sizeof ( addr_str_buffer ) - 1 ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } if ( addr_str_length > sizeof ( addr_str_buffer ) - 1 ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } if ( addr_str_length > sizeof ( addr_str_buffer ) - 1 ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } if ( addr_str_length > sizeof ( addr_str_buffer ) - 1 ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> receive <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_if",0
788,"<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_ZERO : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_ZERO ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_ZERO : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_ZERO ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_ZERO : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_ZERO ; data",0
789,"<S2SV_ModStart> ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { mem",0
790,<S2SV_ModStart> all_channels_lock ) ; <S2SV_ModEnd> wake_up_interruptible ( &,0
791,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct btrfs_dir_item * <S2SV_ModStart> = btrfs_lookup_dir_name ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di )",0
792,"<S2SV_ModStart> if ( op -> len < 1 || op -> len > buf_len ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> %d\\n"", __func__, op -> op ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> %d\\n"", __func__, op -> len ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> %d\\n"", __func__, op -> len ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> %d\\n"", __func__, op -> len ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank> invalid <S2SV_blank> length <S2SV_blank> for <S2SV_blank> wasm_dis: <S2SV_blank>",0
793,<S2SV_ModStart> client ) ; g_object_unref ( object ) ;,0
794,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; if (",0
796,"<S2SV_ModStart> ++ ; } # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } else # endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 3 ) && HAVE_OP ( t + 3 ) && HAVE_OP ( t + 3 ) ) ) { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < ie ) ; ip = ie ; op = oe ; } while ( ip < ie ) ; ip = ie ;",0
797,"<S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> (! vmx_msr_bitmap_nested ) goto out6 ; vmx_msr_bitmap_nested_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested_x2apic ) goto out7 ; vmx_msr_bitmap_nested_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_bitmap_nested_x2apic ) goto out7 ; vmx_msr_bitmap_nested_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested_x2apic ) goto out7 ; vmx_msr_bitmap_nested_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested_x2apic ) goto,0
800,"<S2SV_ModStart> -> sh_name ] ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,"<S2SV_ModStart> ; } else { mode -> indent_level ++ ; if ( mode -> indent_level < 0 ) { mode -> indent_level -- ; if ( mode -> indent_level < 0 ) { mode -> indent_level -- ; if ( mode -> indent_level < 0 ) { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else { mode -> indent_level -- ; } } } if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } } else { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } }",0
806,"<S2SV_ModStart> + tail ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
807,<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # endif # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # endif # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yysize = 0 ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> : # endif # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssp -= ( N ) ) int yylen = 0 ;,0
808,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = d -> coeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ; rc = vp8_default_zig_zag1d [ i ] ;,0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) zap = dereference_key_locked ( key ) ; else zap = NULL ;",0
811,<S2SV_ModStart> hci_pi ( sk ) -> filter ; uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ;,0
812,"<S2SV_ModStart> ) ( data_end - pbi -> decrypt_state ) ; if ( n > 10 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { if ( pbi -> decrypt_state ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } pbi -> decrypt_state = pbi -> decrypt_state ; } if ( pbi -> decrypt_cb ) { int n = ( int ) ( data_end - data ) ; if ( n > 10 ) n = 10 ; pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; } if ( pbi -> decrypt_state ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT",0
813,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
814,"<S2SV_ModStart> peer. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; }",0
815,"<S2SV_ModStart> cleanup ; } status = aac_fib_write ( dev, srbfib, sizeof ( struct aac_srb ), sizeof ( struct aac_srb ) ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> - EFAULT <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> - EINVAL <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> - EINVAL <S2SV_blank> from <S2SV_blank> user\\n"" ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> - EINVAL <S2SV_blank> from <S2SV_blank> user\\n"" ) ; rcode = - EINVAL ;",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT ""byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> = sock_net ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart>. sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_association_put ( asoc ) ; return ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> dead\\n"", __func__ ) ; sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, <S2SV_ModEnd> transport, GFP_",0
818,"<S2SV_ModStart> input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } # define fail_if_error ( e ) switch ( e ) { case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & storage -> fiber_pool, & fiber ) ; fail_if_error ( error ) ;",0
819,"<S2SV_ModStart> * returnrate, int * returndistortion, int * returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; BLOCKD * xd = & x -> e_mbd. block [ 0 ] ; <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm,",0
821,"<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; h -> hdr -> magic [ 0 ] = 0 ; h -> hdr -> magic [ 1 ] = 0 ; h -> hdr -> magic [ 2 ] = 0 ; h -> hdr -> magic [ 3 ] = 0 ; h -> hdr -> magic [ 4 ] = 0 ; h -> hdr -> magic [ 5 ] = 0 ; h -> hdr -> magic [ 6 ] = 0 ; h -> hdr -> magic [ 7 ] = 0 ; h -> hdr -> magic [ 8 ] = 0 ; h -> hdr -> magic [ 9 ] = 0 ; h -> hdr -> magic [ 10 ] = 0 ; h -> hdr -> magic [ 11 ] = 0 ; h -> hdr -> magic [ 12 ] = 0 ; if (! h -> writable ) { h -> addr = mmap ( NULL, h -> size, PROT_READ, MAP_SHARED, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; if ( full_read ( h -> fd, h -> addr, h -> size ) < 0 )",0
822,"<S2SV_ModStart> const cdf_stream_t * <S2SV_ModEnd> sst, const <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; } m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m <S2SV_ModEnd> ; } <S2SV_null>",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 pic_height_in_map_units_minus1, u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv ; WORD32 ret ; WORD32 i4_num_reorder_frames ; WORD32 i4_i ; u1_profile_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; u1_seq_parameter_set_id = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; u1_seq_parameter_set_",0
824,<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ;,0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const svc_params = <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> ) ; if ( svc_params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = svc_params -> spatial_layer ; cpi -> svc. temporal_layer_id = svc_params -> temporal_layer ; cpi -> svc. lst_fb_idx = svc_params -> lst_fb_idx ; cpi -> svc. gld_fb_idx = svc_params -> gld_fb_idx ; cpi -> alt_fb_idx = svc_params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = svc_params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = svc_params -> min_quantizer ; ctx -> extra_cfg. rc_max_quantizer = svc_params -> max_",0
826,"<S2SV_ModStart> ; if ( fhdr -> frag_off & htons ( IP6_MF ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - nhoff ) ) ; } else { if ( fhdr -> frag_off & htons ( IP6_MF ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - nhoff, 0 ) ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INH",0
827,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart>, input_photometric ; TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample, & samplesperpixel ) ; if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; } if ( samplesperpixel!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else if ( samplesperpixel == ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_S",0
828,"<S2SV_ModStart> a ) { int r <S2SV_ModEnd> ; char * <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED",0
829,"<S2SV_ModStart> ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; } } umask ( cmask ) ; INFO ( ""Populated <S2SV_blank> container <S2SV_blank> /dev"" ) ;",0
830,"<S2SV_ModStart> int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { struct buffer_head * nbh = NULL ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ie -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc",0
831,"<S2SV_ModStart> -> tx_size ; const int tx_size_uv = mbmi -> tx_size_uv ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int index = shift_y ; for ( i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv",0
832,"<S2SV_ModStart> dst_size ) { const uint8_t * const name_end = data ; const uint8_t * const name = ( const uint8_t * ) name ; const uint8_t * const name_start = ( const uint8_t * ) strlen ( name ) ; const uint8_t * const name_end = ( const uint8_t * ) <S2SV_ModStart> data_end ) ; if ( data_end - data < 3 ) return - 1 ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break",0
833,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; }",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1,0
835,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return 0 ;,0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt ; struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_saddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user (",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> * mgr_hdl ; pid_t <S2SV_ModEnd> pid ; memset <S2SV_ModStart> ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; default : return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c",0
840,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> == NULL || <S2SV_ModEnd> replySize < ( <S2SV_ModStart> ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pReplyData ; memset ( p, 0, sizeof ( effect_param_t ) ) ; break ; case EFFECT_CMD_SET_STATE : { if ( pCmdData == NULL || pReplyData == NULL || * replySize < ( int ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_STATE <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } session_get_state ( effect -> session, ( effect_state_t * ) pReplyData ) ; } break ; case EFFECT_CMD_GET_STATE : { if ( pReplyData == NULL || * replySize < sizeof ( effect_state_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_STATE <S2SV_blank> invalid <S2SV_blank> args"" ) ;",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; <S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; <S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info",0
842,<S2SV_ModStart> ; if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ],0
843,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error (",0
844,"<S2SV_ModStart> 0 ) { if ( o_row_count == NULL || o_column_count == NULL || o_element_count == NULL ) { LIBXSMM_LOG ( LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR,",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> return False ; result = in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, MCS_CONNECT_RESPONSE, & length ) ; ber_parse_header ( s, BER_TAG_RESULT, & length ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ; ber_parse_header ( s, BER_TAG_OCTET_STRING, & length ) ; sec_process_mcs_data ( s ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
847,<S2SV_ModStart> ; if ( stkt_server ) { stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server -> stkt_offset = 0 ; stkt_server,0
848,<S2SV_ModStart> ':' ) || ( ( c >= 0xC0 ) && ( c <= 0x7F ) ) || ( ( c >= 0x370 ) && ( c <= 0x37D ) ) || ( ( c >= 0x37F ) && ( c <= 0x1FFF ) ) || ( ( c >= 0x200C ) && ( c <= 0x218F ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFDD0 ) && ( c <= 0xFDDF ) ) || ( ( c >= 0xFDD0 ) && ( c <= 0xFDDF ) ) || ( ( c >= 0xFDD0 ) && ( c <= 0xFDDF ) ) || ( ( c >= 0xFDD0 ) && ( c <= 0xFDDF ) ) || ( ( c >= 0xFDD0 ) && ( c <= 0xFDDF ) ) || ( ( c >= 0xFDD0 ) && ( c <= 0xFDDF ) ) || ( ( c >= 0xF,0
849,"<S2SV_ModStart> ret ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> ID: <S2SV_blank> %d\\n"", vsi -> id ) ; return ret ; } if ( macvlan_cnt > 1 ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> ID: <S2SV_blank> %d\\n"", macvlan_cnt ) ; return - EINVAL ; } if ( macvlan_cnt > 2 ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> ID: <S2SV_blank> %d\\n"", macvlan_cnt ) ; return - EINVAL ; } if ( macvlan_cnt > 1 ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> ID: <S2SV_blank> %d\\n"", macvlan_cnt ) ; return - EINVAL ; } if ( macvlan_cnt > 2 ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> ID: <S2SV_blank> %d\\n"", macvlan_cnt ) ; return - EINVAL ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> ; if ( extent. first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. lower_first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count < map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. lower_first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count < map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; goto out,0
852,"<S2SV_ModStart> } } } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! action ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" )",0
853,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> -> mode_info_context ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mb_rows [ mb_row ], lf_mic -> mb_cols [ mb_col ], sizeof ( lf_mic -> mb_rows [ mb_row ] ) ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mb_rows [ mb_row ], lf_mic -> mb_cols [ mb_col ], sizeof ( lf_mic -> mb_rows [ mb_row ] ) ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mb_rows [ mb_row ], lf_mic -> mb_cols [ mb_col ] ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mb_rows [ mb_row ], lf_mic -> mb_cols [ mb_col ] ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mb_rows [ mb_row ], sizeof ( lf_mic -> mb_rows [ mb_row ] ) ) ; memcpy ( lf_mic -> mb_rows [ mb_row ], lf_mic -> mb_cols [ mb",0
856,<S2SV_ModStart> = AF_TIPC ; addr -> addrtype = TIPC_ADDR_ID ; addr ->,0
857,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( mem -> flags & KVM_MEM_LOG_DIRTY_PAGES ) mem -> flags &= ~ KVM_MEM_LOG_DIRTY_PAGES ;,0
858,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
859,"<S2SV_ModStart> ) ) { if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> proxy <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream",0
860,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> * p ; <S2SV_ModEnd> char * end <S2SV_ModStart> char * end ; int kind ; PyObject * w ; int kind ; Py_ssize_t i ; if ( * s & 0x80 ) { kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; i = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; }",0
861,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> values."", function ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data."", function ) ; return ( - 1 ) ; } if ( strict_mode == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( record_data_size == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ;",0
862,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), &",0
863,"<S2SV_ModStart> ; if (! dff_chunk_header. ckDataSize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ;",0
864,<S2SV_ModStart> ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock <S2SV_ModEnd> ( & slave_active_lock,0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> target <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> target <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> target <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> target <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> target <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> target <S2SV_blank> file"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could",0
866,"<S2SV_ModStart> } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_LIST ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_CLEAR ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,"<S2SV_ModStart> goto error ; avio_rl16 ( pb ) ; if ( desc_len > pb -> buf_end - pb -> buf_ptr ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_",0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; problem = 0 ; response = 0 ; if ( flags & KRB5_RECVAUTH_BADAUTHVERS ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( appl_version && strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
872,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, RO",0
873,<S2SV_ModStart> new_fs ) { if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt,0
874,<S2SV_ModStart> = 0 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0,0
875,"<S2SV_ModStart> ; zip_object_handlers. get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ; php_zip_register_prop_handler ( & zip_prop_handlers, ""numFiles"", php_zip_get_num_files, NULL, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""filename"", NULL, NULL, php_zipobj_get_filename, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""comment"", NULL, NULL, php_zipobj_get_zip_comment, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""comment"", NULL, NULL, php_zipobj_get_zip_comment, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip",0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; } <S2SV_ModEnd> return 0 ;,0
877,"<S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK_16BITS ( & ni6 -> ni_flags ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK_16BITS ( & ni6 -> ni_flags ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK_16BITS ( & ni6 -> ni_flags ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; ND_TCHECK_16BITS ( & ni6 -> ni_flags ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK_16BITS ( & ni",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> void * cb_data",0
879,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc == - EAGAIN ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc == - EAGAIN ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc == - EAGAIN ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ;",0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
881,"<S2SV_ModStart> FAT_ENTRY subseqEntry ; get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( subseqEntry. cluster!= fs -> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ; } break ; case 24 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster + 1, fs ) ; data = fs -> fat + cluster * 4 ; size = 4 ; } break ; case 36 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster + 1, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size = 4 ; } break ; case 48 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; size",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; sk_nulls_node_init <S2SV_ModEnd> ( sk ),0
884,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs >= ps_dec -> u2_total_mbs_coded ) { ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec,0
885,<S2SV_ModStart> ; if ( src >= env_end ) { ret = - EINVAL ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) { page = ( char * ) __get_free_page ( GFP_TEMPORARY ),0
886,"<S2SV_ModStart> int parse_rock_ridge_inode ( struct iso_inode_info * de <S2SV_ModEnd>, struct inode <S2SV_ModStart> ) ) { int result ; if ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) { result = parse_rock_ridge_inode_internal ( de, inode, 0 ) ; } else { result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de,",0
887,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct fsnotify_group * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart>. user = NULL ; group -> inotify_data. <S2SV_ModEnd> fa = NULL,0
888,"<S2SV_ModStart> } for ( p = 0 ; p < 4 && in -> data [ p ] ; p ++ ) { int w = inlink -> w ; int h = inlink -> h ; int r = s -> radius ; if ( p ) { w = s -> chroma_w ; h = s -> chroma_h ; } if ( FFMIN ( w, h ) > 2 * r ) filter ( s, out -> data [ p ], in -> data [ p ], w, h, out -> linesize [ p ], r ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ],",0
889,"<S2SV_ModStart> 1 ] ) { vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
890,"<S2SV_ModStart> ( env, <S2SV_ModEnd> ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno <S2SV_ModStart> ( env, <S2SV_ModEnd> ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno <S2SV_ModStart> ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno",0
891,"<S2SV_ModStart> = 0 ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } if ( TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> rows <S2SV_blank> per <S2SV_blank> strip <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } if ( TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> rows <S2SV_blank> per <S2SV_blank> strip <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } if ( TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> rows <S2SV_blank> per <S2SV_blank> strip <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } if ( TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> rows <S2SV_blank> per <S2SV_blank> strip <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
892,"<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> const char need_to_append_dot <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ) + sizeof ( struct search_domain ) ; if (! postfix ) continue ; } const int postfix_len = dom -> len ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; if ( need_to_append_dot ) newname [ base_len ] = 0 ;",0
893,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY ) ; TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, one_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; size_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImage",0
896,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if ( context -> priv -> PlaneBuffers == NULL ) return FALSE ; if ( context -> OrgByteCount == 0 ) return FALSE ; if ( context -> PlaneByteCount == 0 ) return FALSE ; if ( originalSize > UINT32_MAX ) return FALSE ; if ( originalSize > UINT32_MAX ) return FALSE ; <S2SV_ModStart> < originalSize ) { if (! nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ) return FALSE ; CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += originalSize ; } else { if ( planeSize < originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += planeSize ; } } return TRUE ;",0
897,"<S2SV_ModStart> policy ) { struct fscrypt_inode_info * info = FSCRYPT_I ( inode ) ; struct fscrypt_inode_info * ei = FSCRYPT_I ( inode ) ; struct fscrypt_inode_info * ei = FSCRYPT_I ( inode ) ; if (! ei -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! ei -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! inode_has_encryption_context ( inode ) ) { if (! is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; printk ( KERN_WARNING ""%s: <S2SV_blank> Policy <S2SV_blank> inconsistent <S2SV_blank> with <S2SV_blank> encryption <S2SV_blank> context\\n"", __func__ ) ; return - EINVAL ; } if ( is_encryption_context_consistent_with_policy ( inode, policy ) ) return 0 ; printk ( KERN_WARNING ""%s: <S2SV_blank> Policy <S2SV_blank> inconsistent <S2SV_blank> with <S2SV_blank> encryption <S2SV_blank> context\\n"", __func__ ) ; return - EINVAL ; }",0
898,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } }",0
899,"<S2SV_ModStart> = current_cred ( ) <S2SV_ModEnd>,. match_data <S2SV_ModStart> -> match, ctx. match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT, } ; ret = request_key ( key_ref_to_ptr ( key_ref ), description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key_ref_to_ptr ( key_ref ), description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key_ref_to_ptr ( key_ref ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error ; } ret = request_key ( key_ref_to_ptr ( key_ref ), description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { free ( job_id ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; if ( pool -> swork. job_id ) free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; pool -> swork. prev_hash = prev_hash ; pool -> swork. prev_hash = prev_hash ; pool -> swork. coinbase1 = coinbase1 ; pool -> swork. coinbase2 = coinbase2 ; pool -> swork. coinbase2 = coinbase2 ; cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; pool -> swork. job_id = job_id ; pool -> swork. prev_hash = prev_hash ; pool -> swork. bbversion = bbversion ; pool -> swork. nbit = nbit ; pool -> swork. ntime = ntime ; pool -> swork.,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t alloc_size = ( num + 1 ) / sizeof ( * ptr ) ; if ( alloc_size < 0 ) { return NULL ; } alloc_size = ( num + 1 ) / sizeof ( * ptr ) ; if ( alloc_size > 0 ) { memset ( ptr, '\\0', alloc_size ) ; } else { memset ( ptr, '\\0', alloc_size ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; } return ptr ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
904,<S2SV_ModStart> ) ; } spin_lock_irq ( & ioc -> ioc_lock ) ; <S2SV_ModStart> ) ; } spin_unlock_irq ( & ioc -> ioc_lock ) ;,0
905,"<S2SV_ModStart> unused ) { PyObject * dict ; PyObject * res <S2SV_ModEnd> ; _Py_IDENTIFIER ( <S2SV_ModStart> __dict__ ) ; dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { return NULL ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; } else { res = Py_BuildValue ( ""O()"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
906,"<S2SV_ModStart>, USB_DT_OTG, desc <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) & desc ) ; if (! ( desc -> bmAttributes & USB_OTG_HNP ) ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } else { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; return 0 ; } else { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n""",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; case PERF_EVENT_SET_OUTPUT : return perf_event_set_output ( event, NULL ) ; } case PERF_EVENT_SET_FILTER : return perf_event_set_filter ( event, NULL ) ; case PERF_EVENT_IOC_GET_PERIOD : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; id = primary_event",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - 1 ; } else { sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,"<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( <S2SV_ModEnd> type, mask <S2SV_ModStart> mask ) ; if ( skcipher ) { crypto_free_skcipher ( skcipher ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
911,"<S2SV_ModStart> ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) ) return - EINVAL ; if ( <S2SV_ModStart> ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 7, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 7, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION",0
912,<S2SV_ModStart> tile_height ) { if ( c -> old_tile_w < c -> tile_width || c -> old_tile_h < c -> tile_height ) { av_free ( c -> synth_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; } else { av_free ( c -> synth_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; },0
913,"<S2SV_ModStart> iv ) ; if ( EVP_CipherInit_ex ( ctx, NULL, NULL, NULL, key, sizeof key, iv, - 1 )!= 1 ) ossl_raise ( eCipherError, NULL ) ;",0
914,<S2SV_ModStart> JPC_QMFB_COLGRPSIZE ; } for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2,0
915,"<S2SV_ModStart> ) ; register_savevm <S2SV_ModEnd> ( dev,",0
916,"<S2SV_ModStart> p ) { <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; if ( length < CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; if ( length > CHDLC_HDRLEN - length ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; if ( length < CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; }",0
917,"<S2SV_ModStart> { cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; rc = - EINVAL ; goto out ;",0
918,"<S2SV_ModStart> && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS || sk -> sk_tsflags & SOF_TIMESTAMPING_SOFTWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( skb -> tstamp, tss. ts + 1 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 3 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 4 ) ) empty = 0 ; if ( skb_is_err_queue ( skb ) && skb -> len && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts",0
919,<S2SV_ModStart> ) ) ; raptor_sax2_set_uri_filter <S2SV_ModEnd> ( rdf_xml_parser ->,0
920,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al =",0
921,"<S2SV_ModStart> ) ) { return SecureElementProcessJoinAccept ( joinReqType, joinEui, devNonce, encJoinAcceptSize, decJoinAccept, versionMinor ) <S2SV_ModEnd> ; } if <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, encJoinAcceptSize, mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, encJoinAcceptSize, mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS",0
922,"<S2SV_ModStart> ""recv: <S2SV_blank> [IB_READ_CLIENT_MAGIC]\\n"" ) ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( iframe -> sbuf. pos [ 3 ]!= NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> sbuf. pos [ 3 ] = NGHTTP2_CLIENT_MAGIC_LEN ; iframe -> sbuf. pos [ 3 ] = NGHTTP2_CLIENT_MAGIC_LEN ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( iframe -> sbuf. pos [ 3 ]!= NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> sbuf. pos [ 3 ] = NGHTTP2_CLIENT_MAGIC_LEN ; iframe -> sbuf. pos [ 3 ] = NGHTTP2_CLIENT_MAGIC_LEN ; iframe -> sbuf. pos [ 3 ] =",0
923,<S2SV_ModStart> = ucounts ; if (! new_ns -> user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - EPERM ) ; },0
924,<S2SV_ModStart> += dif ; if ( opt2 -> hopmsg ) * ( ( char * * ) & opt2 -> hopmsg ) += dif ; if ( opt2 -> dst0opt ) * ( ( char * * ) & opt2 -> dst0opt ) += dif ; if ( opt2 -> dst1opt ) * ( ( char * * ) & opt2 -> dst1opt ) += dif ; if ( opt2 -> srcrt ) * ( ( char * * ) & opt2 -> srcrt ) += dif ;,0
925,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; }",0
926,"<S2SV_ModStart> -> dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE int * * part_classdata = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif",0
927,"<S2SV_ModStart> ) ; u32 last_oow_ack_time = jiffies / HZ <S2SV_ModEnd> ; if ( <S2SV_ModStart> challenge_timestamp ) { last_oow_ack_time = jiffies <S2SV_ModEnd> ; NET_INC_STATS ( <S2SV_ModStart> LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_",0
928,<S2SV_ModStart> LLC_CMSG_PKTINFO ) { struct llc_pktinfo info ; info. lpi_sap = 0 ; info. lpi_mac = 0,0
929,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vpx_writer <S2SV_ModStart> t ] ; const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO,0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; unsigned int version ; unsigned int <S2SV_ModEnd> n ; quirks <S2SV_ModStart> - ENODEV ; } version = le16_to_cpu ( hdesc -> bcdHID ) ; hid -> country = le16_to_cpu ( hdesc -> bCountryCode ) ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType!= HID_DT_REPORT ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", n ) ; return - EINVAL ; } for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; }",0
933,"<S2SV_ModStart> ) { struct ikev2_id id ; int id_len, idtype_len, dumpascii, dumphex ; const unsigned char * typedata ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = idtype_len - sizeof ( struct ikev2_id ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ),",0
934,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ; if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> obj, struct strbuf <S2SV_ModEnd> * path, <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; add_object_entry ( obj -> oid. hash, obj -> type, name,",0
936,<S2SV_ModStart> ) ) { if ( id == MIF_TLX ) { cmpt -> tlx = 0 ; cmpt -> tly = 0 ; } else { cmpt -> tlx = atoi ( jas_tvparser_getval ( tvp ) ) ; } if ( id == MIF_TLY ) { cmpt -> tly = atoi ( jas_tvparser_getval ( tvp ) ) ; } if ( id == MIF_HSAMP ) { cmpt -> sampperx = atoi ( jas_tvparser_getval ( tvp ) ) ; } if ( id == MIF_VSAMP ) { cmpt -> samppery = atoi ( jas_tvparser_getval ( tvp ) ) ; } if ( id == MIF_TLY ) { cmpt -> tly = atoi ( jas_tvparser_getval ( tvp ) ) ; } if ( id == MIF_TLX ) { cmpt -> tlx = atoi ( jas_tvparser_getval ( tvp ) ) ; } if ( id == MIF_TLY ) { cmpt -> tly = atoi,0
937,"<S2SV_ModStart> urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret == - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank>",0
938,"<S2SV_ModStart>, h2, fft_jmp ; WORD32 xt0_0, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_1, x_l2_0, x_l2_0, x_l2_1, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1, x_l2_1, x_h2_1 ; WORD32 x_l1_0, x_l1",0
939,<S2SV_ModStart> ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; if ( unlikely ( len <= 0x7f ) ) goto invalid_eoc ; dp += len ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_,0
940,"<S2SV_ModStart> val ; if ( ( flags & __GFP_ZERO ) && ( size > PAGE_SIZE ) ) { ptr = ( void * ) val ; memset ( ptr, 0, size ) ; } else if ( ( flags & __GFP_ZERO ) && ( size > PAGE_SIZE ) ) { ptr = ( void * ) val ; if ( ( flags & __GFP_ZERO ) && ( size > PAGE_SIZE ) ) { memset ( ptr, 0, size ) ; } else { memset ( ptr, 0, size ) ; }",0
941,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> PHAR_SIG_OPENSSL : { if (! php_stream_open_wrapper ( fp, ""rb"", 0, NULL ) ) { php_stream_close ( pfp ) ; } return FAILURE ; } if ( <S2SV_ModStart> PHAR_SIG_OPENSSL : { if (! php_stream_open_wrapper ( fp, ""rb"", 0, NULL ) ) { php_stream_close ( pfp ) ; } if (! php_stream_close_wrapper ( fp, ""rb"", 0, NULL ) ) { php_stream_close ( pfp ) ; } if ( error ) { spprintf ( error, 0, ""openssl <S2SV_blank> public <S2SV_blank> key <S2SV_blank> could <S2SV_blank> not <S2SV_blank> be <S2SV_blank> read"" ) ; return FAILURE ; } if (! php_stream_open_wrapper ( fp, ""rb"", 0, NULL ) ) { php_stream_close ( pfp ) ; } if (! php_stream_close_wrapper ( pfp, ""rb"", 0, NULL ) ) { php_stream_close ( pfp ) ; } if ( error ) { spprintf ( error, 0, ""openssl <S2SV_blank> signature <S2SV_blank> could <S2SV_blank> not <S2SV_blank> be <S2SV_blank> read",0
943,"<S2SV_ModStart> n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 ) goto exit ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 ) goto exit ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 ) goto exit ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 ) goto exit ; if ( search ( value, field -> value, count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ] - min ], 0, interrupt ) ; if ( search ( value, field -> value, count ) ) hid_process_event ( hid, field, & field -> usage [ value [ n ]",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,"<S2SV_ModStart> if ( argReg < 0 || argReg + insns_size > regsz ) { return ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & line_start ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4,",0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_version_val, rack_version_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, req_rack_logger ( req ) ) ; rb_hash_aset ( env, rack_upgrade_val, self ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ; rb_hash_aset ( env, rack_hijack_val, self ) ; rb_hash_aset",0
947,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ;,0
948,"<S2SV_ModStart> endif # endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; imp_sth_phb_t * fbind ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID,",0
949,"<S2SV_ModStart> ; if ( key -> type -> destroy ) key -> type -> destroy ( key ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_TRUSTED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_TRUSTED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_TRUSTED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_TRUSTED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys )",0
950,"<S2SV_ModStart> ) ) ; if (! state. num ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 ; char * line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( line == 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } if ( line == 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( line ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need,0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle,",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) { strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""-Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '0' ; }",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,"<S2SV_ModStart> 5 ) ; ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length = size ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; <S2SV_ModEnd> if ( size <S2SV_ModStart> size < 6 ) ASSERT ( result!= buf ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length = size ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; <S2SV_ModEnd> if ( size <S2SV_ModStart> size < 6 ) ASSERT ( result!= buf ) ; if ( result!= buf ) free ( result",0
956,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ( crng_init == 1 <S2SV_ModEnd> ) ) {,0
957,"<S2SV_ModStart> LEX_ID ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STRING ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk ==",0
958,"<S2SV_ModStart> ; } } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or",0
959,,1
960,"<S2SV_ModStart> * output ; register <S2SV_ModEnd> ssize_t i ; <S2SV_ModStart> MagickFalse ) ; } input = fopen_utf8 ( argv [ argc - 1 ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input )",0
961,<S2SV_ModStart> ) { SvcInternal_t <S2SV_ModEnd> * const si,0
962,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ) <S2SV_ModEnd>, PTR_ERR (",0
963,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY (,0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned <S2SV_ModStart> int right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 2 ] <= 0 ) left = num_events [ - tree [ i + 2 ] ] ; else left = convert_distribution ( tree [ i + 2 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else right = convert_distribution ( tree [ i + 3 ], tree, branch_ct, num_events ) ; if ( tree [ i + 3 ] <= 0 ) left = num_events [ - tree [ i + 3 ] ] ; else left = num_events [ - tree [ i + 3 ]",0
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * raw_to = xmpp_stanza_get_raw_to ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = xmpp_stanza_get_raw_from ( message ) ; gchar * raw_from = x,0
967,"<S2SV_ModStart> { addReplyErrorFormat ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ; addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ; addReplyErrorFormat ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ; addReplyErrorFormat ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ; addReplyErrorFormat ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"", server. maxclients ) ;",0
968,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } name = arg2 ; type = CONF_FD ; } else { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( )",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,<S2SV_ModStart> ) ) { if ( st -> st_v1_new_iv. len == 0 ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else { if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else { st -> st_v1_new_iv. len = e -> enc_blocksize ; } } if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) { st -> st_v1_new_iv. len = st -> st_v1_new_iv. len ; } if ( st -> st_v1_new_iv. len > st -> st_v1_new_iv. len ) {,0
972,<S2SV_ModStart> ps_dec ) ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode,0
973,"<S2SV_ModStart> int x, y, old_width, old_height ; if ( x_size < 0 || y_size < 0 ) { return false ; } old_width = s_map -> layers [ layer ]. width ; old_height = s_map -> layers [ layer ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * y_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; return FALSE <S2SV_ModEnd> ; } if <S2SV_ModStart> 3 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "","" ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; ptr = cp [ 3 ] - 1 ; if ( ptr < 3 || ( ptr + 1 ) & 3 ) || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "","" ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]""",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char <S2SV_ModEnd> * print_string ( <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
976,<S2SV_ModStart> 1 ) res = vpx_encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> enc. encode <S2SV_ModEnd> ( ctx ->,0
977,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, spacestr <S2SV_ModEnd>, buf ) <S2SV_ModStart> 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if (",0
978,"<S2SV_ModStart> * buf ; size_t size ; if ( chunk_num < 0 || chunk_num >= chm -> num_chunks ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } size = sizeof ( unsigned char * ) * chm -> chunk_size ; if (! size ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! sys -> seek ( fh, ( off_t ) ( chunk_num * chunk_size ), MSPACK_SYS_SEEK_START ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if (! sys -> seek ( fh, ( off_t ) ( chunk_num * chunk_size ), MSPACK_SYS_SEEK_START ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ;",0
979,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( sibling, & event -> sibling_list, group_entry ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) {",0
980,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else { win_maximise (",0
981,"<S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Start"" ) ; av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> Layer <S2SV_blank> Start"" ) ; } else if ( startcode <= 0x14F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x15F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x16F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Video <S2SV_blank> Object <S2SV_blank> Layer <S2SV_blank> Start"" ) ; } else if ( startcode <= 0x16F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x15F ) av_log ( s -> avctx, AV_LOG_DEBUG, ""Reserved"" ) ; else if ( startcode <= 0x16F ) av_log ( s -> avctx, AV_LOG_DEBUG, """,0
982,<S2SV_ModStart> ; if ( nsops > OABI_MAX_SEM_COUNT ) return - EINVAL ; if ( tsops -> sem_num > OABI_MAX_SEM_COUNT - 1 || tsops -> sem_op > OABI_MAX_SEM_OPS || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_OPS || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > OABI_MAX_SEM_FLG || tsops -> sem_flg > O,0
983,<S2SV_ModStart> ++ ) s [ i ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( i = - 8 ; i,0
984,"<S2SV_ModStart> ; if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } if ( log2_blksz > EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } if ( log2_blksz > EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; } if ( log2_blksz < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""log2 <S2SV_blank> blksz <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif if ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif return - 1 ; } if ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif if ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif",0
986,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements =,0
987,"<S2SV_ModStart> ; if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; } <S2SV_ModStart> ; if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; } <S2SV_ModStart> ; if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; } else { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; } if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; } if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; } else { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> input <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; } if ( matches!= NULL ) * matches =",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STRING : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str,",0
989,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_work, 1 ) ; return ; } init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } if ( llist_add ( & mnt -> mnt_llist, & delayed_mntput_list ) ) schedule_delayed_work ( & delayed_mntput_work, 1 )",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ; } if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> prg=%02d <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi )",0
992,<S2SV_ModStart> int err = - EIO ; struct udf_inode_info * iinfo = UDF_I ( inode ) ; struct udf_inode_info * udf_i = <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
993,<S2SV_ModStart>. apic_base & ( 1UL << vcpu -> kvm -> msr. bit_depth ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & ( 1UL << vcpu -> kvm -> msr. bit_depth ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & ( 1UL << vcpu -> kvm -> msr. bit_depth ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & ( 1UL << vcpu -> kvm -> msr. bit_depth ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & ( 1UL << vcpu -> kvm -> msr. bit_depth ) ) msr_bitmap = vmx_msr_bitmap_nested_,0
994,"<S2SV_ModStart>!= NULL ) { if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } ldap_msgfree ( result ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } } if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; } cleanup : ldap_msgfree ( result ) ; krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } <S2SV_ModEnd> <S2SV_null> <S2SV_",0
995,"<S2SV_ModStart> ps_bitstrm ) ; if ( ps_codec -> i4_pic_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; if ( ps_codec -> i4_seq_parameter_set_id ) ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_seq_parameter_set_id ) ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 3 ) ; if ( ps_codec -> i4_seq_parameter_set_id ) ps_pps -> i1_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT",0
996,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if (",0
997,"<S2SV_ModStart> ret ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) { printk ( KERN_INFO ""cx24116: <S2SV_blank> %s("", __func__ ) ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] =",0
998,"<S2SV_ModStart> break ; } memcpy ( cinfo. handle, sco_pi ( sk ) -> conn -> hcon -> handle, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; if ( copy_to_user ( optval, ( char * ) & cinfo, len ) ) err = - EFAULT ; break ; case SCO_CONNINFO_DEV_CLASS : if ( sk -> sk_state!= BT_CONNECTED ) { err = - ENOTCONN ; break ; } memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; if ( copy_to_user ( optval, ( char * ) & cinfo, len ) ) err = - EFAULT ; break ; }",0
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, sun_info. width, sun_info. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> ThrowReaderException ( CorruptImageError <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, sun_info. width, sun_info. height, sun_info. depth, sun_info. type ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } else { fs_logger2 (",0
1001,"<S2SV_ModStart> int num_items_scanned ; <S2SV_ModEnd> int pktnum, <S2SV_ModStart> 0 ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line",0
1002,<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 ;,0
1003,"<S2SV_ModStart> case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), & data, sizeof ( data ), NULL ) ; break ; case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_",0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; } },0
1006,"<S2SV_ModStart> -> tokenlen ) { assert (! p -> tokenbuf ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! p -> tokenbuf ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! p -> tokenbuf ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! p -> tokenbuf ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! p -> tokenbuf ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! p -> tokenbuf ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! p -> tokenbuf ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; }",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> return vp9_mse8x8 ; case BLOCK_16X8 : return vpx_mse16x8 ; case BLOCK_8X16 : return vpx_mse8x16 ; case BLOCK_16X16 : return vpx_mse16x16 ; default : return vpx_mse8x8 <S2SV_ModEnd> ; } <S2SV_null>,0
1008,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1009,"<S2SV_ModStart> 0 ) { if ( frame_count > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 2 || frame_count > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip ( pb, 4 ) ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; avio_skip (",0
1010,<S2SV_ModStart> ; if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp -> dy ) { if (! comp -> dx ) { if (! comp -> dy ) { if (! comp,0
1011,<S2SV_ModStart> send_pa ) ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_ZX ; } else { padata -> pa_type = KRB5_PADATA_PKINIT_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_ZX ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_ZX ) { padata -> pa_type = KRB5_PADATA_PKINIT_ZX ; } else,0
1012,"<S2SV_ModStart> if ( CheckQuantumMemoryOverflow <S2SV_ModEnd> ( count,",0
1013,"<S2SV_ModStart> -> stratum_port ; if (! strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> url <S2SV_blank> without <S2SV_blank> domain <S2SV_blank> \'%s\'"", url ) ; return false ; } strchr ( url, ':' ) ; if (! strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR,",0
1014,"<S2SV_ModStart> ; if ( j < 0 || j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( j >= STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_",0
1015,<S2SV_ModStart> ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = XDR_QUADLEN ( len ) * 4 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_len =,0
1016,"<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) && test_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) && test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) && test_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) && test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) return - EINVAL ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) && test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) && test_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_",0
1017,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input ->",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
1019,<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes == NULL ) return 0,0
1020,<S2SV_ModStart> && rxent -> service_id == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; break ; } if ( ++ i >= RX_CACHE_SIZE && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; break ; } if ( ++ i >= RX_CACHE_SIZE && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; break ; } if ( ++ i >= RX_CACHE_SIZE && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; break ; } if ( ++ i >= RX_CACHE_SIZE && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent ->,0
1021,"<S2SV_ModStart> -> attempted_bss_desc = NULL ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ;",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS",0
1023,"<S2SV_ModStart> r ) { int rc ; rc = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> signature, a -> cert_info, r ) ; if ( rc < 0 ) return rc ; if ( rc < 0 ) return rc ; rc = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( rc < 0 ) return - 1 ; rc = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( rc < 0 ) return rc ; rc = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( rc < 0 ) return - 1 ; rc = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature,",0
1024,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1025,<S2SV_ModStart> = data ; struct l2cap_conf_txwin_size <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc -> flags = cpu_to_le16 ( 0 ) ; req -> dcid = cpu_to_le16 ( pi -> dcid ) ; req -> flags = cpu_to_le16 ( 0 ),0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = 0 ; if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> seekable\\n"", line ) ; s -> line_count = 0 ; } else if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> seekable\\n"", line ) ; s -> seekable = 1 ; } if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> seekable\\n"", line ) ; s -> line_count = 0 ; } else if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> seekable\\n"", line ) ; s -> seekable = 1 ; } if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> seekable\\n"", line )",0
1028,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_pic_decode_done!= 1 ) && ( u1_nal_unit_type > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_NAL ) && ( u1_nal_ref_idc > IDR_SLICE_,0
1029,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
1030,"<S2SV_ModStart> slen ) ; if ( seed ) err = crypto_rng_set_seed ( tfm, seed ) ; if ( err < 0 ) { err = - EINVAL ; goto error ; } err = crypto_rng_set_seed ( tfm, seed ) ; if ( err < 0 ) { err = - EINVAL ; goto error ; } err = crypto_rng_set_seed ( tfm, NULL, slen ) ; error : crypto_rng_set_seed ( tfm, NULL, slen ) ; kfree ( buf ) ; return err ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1031,"<S2SV_ModStart> = uid ; atomic_set ( & new -> count, 1 ) ; <S2SV_ModStart> } if ( atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1032,<S2SV_ModStart> ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = 0 ; <S2SV_ModStart> ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_flags |= MSG_TRUNC ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_flags &= ~ MSG_TRUNC ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_sys. msg_namelen ; if ( msg_sys. msg_flags & MSG_TRUNC ) msg_sys. msg_flags |= MSG_TRUNC ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_flags |= MSG_TRUNC ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_sys. msg_namelen ;,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> { size_t i ; if ( len < 8 * 32 ) { return - 1 ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 2 * 32 ] ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 3 * 32 ] ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 3 * 32 ] ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 4 * 32 ] ; } for ( i = 0,0
1035,"<S2SV_ModStart> ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> p_ext -> p_ext -> p_ext -> p_ext -> p_depth, path [ depth ]. p_ext -> p_ext -> p_depth, path [ depth ]. p_ext -> p_inode -> i_ino, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_inode -> i_ino, path [ depth ]. p_inode -> i_ino, path [ depth ].",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ; rcu_read_lock ( <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) ) goto no_delegation_unlock ; if ( fmode & ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= open_flags ) goto no_delegation_unlock ; nfs_mark_delegation_referenced ( deleg_cur ) ; if (! ret && open_stateid!= NULL ) { __update_open_stateid ( state, open_stateid, NULL, fmode ) ; ret = 1 ; } else { __update_open_stateid ( state, open_stateid, NULL, fmode ) ; ret = 1 ; } rcu_read_unlock ( ) ; if (! ret && open_stateid!= NULL ) { __update_open_stateid ( state, open",0
1037,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, &",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers (,1
1040,"<S2SV_ModStart> * xd, int64_t * out_rate_sum, int64_t * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t sse ; struct macroblock_plane * const p = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; unsigned int sse ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; else x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; else rate = 0 ; dist = ( square_",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1042,"<S2SV_ModStart> -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; if ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo",0
1043,"<S2SV_ModStart>!= '\\0' ) { ptr ++ ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; strcpy ( * ret_username, username ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR )",0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; backup_handle = ttm_round_pot ( sizeof ( * srf ) ) + 128 ; if ( unlikely ( backup_handle > tfile -> f_dentry -> d_inode -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> d_inode -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i_dentry -> i,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> * desc = <S2SV_ModStart> ldt ) { <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> current -> active_mm -> context. lock ) ; desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # ifdef CONFIG_MODIFY_LDT_SYSCALL <S2SV_ModStart> ( ldt && <S2SV_ModEnd> sel < ldt <S2SV_ModStart> -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> = sel & SEGMENT_RPL_MASK ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; return ( struct desc_struct * ) ( gdt_desc. address + desc_base ) ; <S2SV_ModEnd> return (,0
1047,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1 [ 0 ], linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_left ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i",0
1048,"<S2SV_ModStart> sctp_bind_addr * bp ; struct sctp_sockaddr_entry * laddr = NULL ; union sctp_addr * baddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2 ; depth -- ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = strchr ( fmt, ']' ) ; if ( p - fmt + 1 > sizeof ( s ) ) { return ( NULL ) ; } strncpy ( s, fmt, p - fmt + 1 ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf ==",0
1051,<S2SV_ModStart> = conn ; if ( client -> priv -> protocol_timeout > 0 ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } * mask_ret |= SmsRegisterClientProcMask ; callbacks_ret -> register_client. manager_data = client ; * mask_ret |= SmsInteractRequestProcMask ; callbacks_ret -> interact_request. callback = interact_request_callback ; callbacks_ret -> interact_request. manager_data = client ; * mask_ret |= SmsInteractDoneProcMask ; callbacks_ret -> interact_done. callback = interact_done_callback ; callbacks_ret -> interact_done. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret,0
1052,"<S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> slot ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> nid ) ; <S2SV_ModStart> ; for ( ie = io + ps -> nid ; ie < ie &&! ND_TTEST ( * io ) ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ), EXTRACT_32BITS ( & ie -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io < ie &&! ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ), EXTRACT_32BITS ( & ie -> off ) ) ) ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; <S2SV_ModEnd> ND_PRINT ( (",0
1053,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
1054,"<S2SV_ModStart> NULL ) ; if ( EVP_CipherInit_ex ( ctx, NULL, NULL, - 1 )!= 1 ) ossl_raise ( eCipherError, NULL ) ;",0
1055,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; } else if ( ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; } else if ( ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ;",0
1056,<S2SV_ModStart> ; settings. <S2SV_ModEnd> udpport = 11211 <S2SV_ModStart> = 11211 ; settings. <S2SV_ModEnd> inter = NULL <S2SV_ModStart> ; settings. <S2SV_ModEnd> logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE <S2SV_ModStart> = LOGGER_WATCHER_BUF_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE <S2SV_ModStart> = LOGGER_WATCHER_BUF_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher_buffer_size = LOGGER_WATCHER_BUFFER_SIZE ; settings. logger_watcher,0
1057,<S2SV_ModStart> ( ) ; # ifdef MONO_HAS_SEMAPHORES MonO_SEM_WAIT ( & finalizer_sem ) ;,0
1058,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n11, n21, n31, n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n01 = x_2 + x_3 ; n10 = x_0 - x_2 ; n11 = x_1 - x_3 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7 ; n03 = x_3 + x_6 ; n13 = x_5 + x_7 ; n13 = x_6 + x_7 ; n03 = x_4 + x_6 ; n13 = x_5 + x_7 ; n13 = x_5 + x_7 ; n13 = x_",0
1059,"<S2SV_ModStart> { clips = kmalloc_array ( num_clips, sizeof ( * clips ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; }",0
1060,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> ) ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new ( core -> anal, addr ) ; } if (! hint ) { hint = r_anal_hint_new (",0
1063,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n""",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTmp = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wSize ) )",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 1 ) { return NULL ; } <S2SV_ModStart> R_ANAL_OP_FAMILY_UNKNOWN ; op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; op -> ptr = UT64_MAX ; op -> val = UT64_MAX ; op -> jump = UT64_MAX ; op -> fail = UT64_MAX ; op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> family == R_ANAL_OP_FAMILY_UNKNOWN ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op,0
1066,<S2SV_ModStart> acpi_status status ; struct acpi_namespace_node * node ; <S2SV_ModStart> prev ; union acpi_operand_object * next ; node = acpi_gbl_module_code_list ; while ( node ) { prev = next ; next = node -> method. mutex ; while ( next ) { prev = next ; next = next -> method. mutex ; next = next -> method. mutex ; } } # ifdef ACPI_EXEC_APP { union acpi_operand_object * prev ; union acpi_operand_object * next ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; } # endif acpi_ns_delete_namespace_subtree ( node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if,0
1067,"<S2SV_ModStart> (! strcmp ( arg, ""-m"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ) { the_cfg = argv [ i + 1 ] ; i ++ ; } else if (! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ) { the_cfg = argv [ i + 1 ] ; i ++ ; } else if (! strcmp ( arg, ""-mosaic"" ) ) { the_cfg = argv [ i + 1 ] ; i ++ ; } else if (! strcmp ( arg, ""-mosaic"" ) ) { the_cfg = argv [ i + 1 ] ; i ++ ; } else if (! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ) { the_cfg = argv [ i + 1 ] ; i ++ ; } else if (! strcmp ( arg, ""-mosaic"" ) ) { the_cfg = argv [ i + 1 ] ; i ++ ; } else if (! strcmp ( arg, ""-mosaic"" ) ) { the_cfg = argv [ i + 1 ] ;",0
1068,"<S2SV_ModStart> num_fields ) { Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; int result ; if ( num_fields < 0 ) { return 0 ; } _Py_IDENTIFIER ( _attributes ) ; l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; Py_DECREF ( l ) ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; result = _PyObject_SetAttrId (",0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> priv = calloc ( <S2SV_ModEnd> 1, sizeof <S2SV_ModStart> vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } } ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = 0 ; if ( mr_cfg ) ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; ctx -> priv -> enc. mr_total_resolutions = mr_cfg -> mr_total_resolutions ; ctx -> priv",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode (",0
1071,<S2SV_ModStart> ; } if ( cnt_c > BOT ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_c + step ; },0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk ) return - EINVAL ;",0
1073,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = NULL ; ctx -> fragments. sizes [ 0 ] = data_sz ; } else { ctx -> fragments. ptrs [ 0 ] = NULL ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = NULL ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1074,<S2SV_ModStart> vma ) ; if ( priv -> task ) put_task_struct ( priv -> task ) ;,0
1075,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> wTotalLength ) ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * )",0
1076,"<S2SV_ModStart> task = current ; if ( likely (! ( task -> flags & PF_KTHREAD ) ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; } init_task_work ( & file -> f_u. fu_rcuhead, true ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; } init_task_work ( & file -> f_u. fu_rcuhead, true ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if ( llist_add ( & file -> f_u_llist, & delayed_fput_list",0
1077,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { enc28j60WriteReg ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int bad_format_imginfo ( <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++!= '%' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr == 'l' ) ptr ++ ; else return 1 ; ptr ++ ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1081,<S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if (! <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModEnd> if ( * <S2SV_ModStart>!,0
1082,<S2SV_ModStart> ; if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) {,0
1083,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLinuxTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakSolarisTest"", IPV6DefragSturgesNovakSolarisTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest",0
1084,"<S2SV_ModStart> = object_length ; if ( add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ add_v1_record ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } else { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ add_v1_record ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; } r = coolkey_add_object_to_list ( &",0
1085,"<S2SV_ModStart> ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank>",0
1086,"<S2SV_ModStart> ( token, '=' ) ; if ( separator == NULL ) { return ERROR_INVALID_SYNTAX ; } name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ 0 ] =",0
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( cp + label_len > end ) return - 1 ; if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( cp + label_len > end ) return - 1 ; if ( cp + label_len > end ) return - 1 ; if ( cp + label_len > end ) return - 1 ; if ( cp + label_len > end ) return - 1 ; if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; } if (",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ) ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return 0 <S2SV_ModStart>! tmp ) return 0 <S2SV_ModEnd> ; while ( <S2SV_ModStart> stride ) ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ; count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return 0 ; while ( count > 0 ) { REPEAT4 ( stride, cp [ 0 ] ) ; cp ++ ; count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; } return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkdirty ( entry ) ; } entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_spurious_fault ( vma, vma, address, pte ) ; }",0
1090,"<S2SV_ModStart> s ) { return safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> + 1 ), GFP_NOFS ) <S2SV_ModEnd> ; } <S2SV_null>",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if ( next_line ) { next_line ++ ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> upper_count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; }",0
1093,"<S2SV_ModStart> ) ; } if ( i >= cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ] ) ) ; if ( i >= cu -> dies [ cu -> length ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ] ) ) ; if ( i >= cu -> dies [ cu -> length ]. capacity || i >= da -> decls [ abbr_code - 1 ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank>",0
1094,"<S2SV_ModStart> NULL ; } if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { p_enc -> fmt_in. i_codec = p_enc -> fmt_in. i_codec ; vlc_fourcc_to_char ( p_enc -> fmt_out. i_codec, p_enc -> fmt_in. i_chroma, chroma_in ) ; chroma_in [ 4 ] = '\\0' ; vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_out ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { vlc_fourcc_to_char ( p_enc -> fmt_out. i_codec, chroma_in ) ; chroma_in [ 4 ] = '\\0' ; vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_out ) ; chroma_in [ 4 ] = '\\0' ; vlc_fourcc_",0
1095,"<S2SV_ModStart> ) ) { char * entry ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; } entry = bstrto0 ( mf, entry ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; } else { MP_TARRAY_APPEND ( mf, mf -> names, mf -> nr_of_files, entry ) ; } } free_stream ( s ) ; mf = talloc_zero ( talloc_ctx, mf_t ) ; if (! mp_path_exists ( entry ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", entry ) ; break ; } mp_tarray_append ( mf, mf -> names, mf -> nr_of_files, entry ) ; }",0
1096,"<S2SV_ModStart> ) ) ; if ( flow & 0x000000ff ) ND_PRINT ( ( ndo, ""class <S2SV_blank> 0x%02x, <S2SV_blank> "", ( flow & 0x00ff00000 ) >> 20 ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000ffff",0
1097,"<S2SV_ModStart> 4 ) ; size_t num_properties ; CHECKINT16 ( idx, len ) ; num_properties = GETINT16 ( buf + idx ) ; idx += 2 ; CHECKINT16 ( idx, len ) ; a -> name = CHECKINT16 ( buf + idx ) ; idx += 2 ; CHECKINT32 ( idx, len ) ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; CHECKINT32 ( idx, len ) ; a -> num_names = GETINT32 ( buf + idx ) ; idx += 4 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ;",0
1098,"<S2SV_ModStart> ; vma = find_vma ( mm, start, & prev ) ; if (! vma ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if",0
1099,<S2SV_ModStart> sse ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; t1_getline ( ) ; strcpy ( t1_buf_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; strcpy ( t1_line_array, "" <S2SV_blank> "" ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; YV12_BUFFER_CONFIG * fb ; vp9_get_reference_dec ( worker -> pbi, frame_worker_data -> idx, & fb ) ; yuvconfig2image ( & frame_worker -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; Frame",0
1102,"<S2SV_ModStart> ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } else { cs. d = 0 ; cs. l = 1 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> set_",0
1103,"<S2SV_ModStart> ; if ( next_marker!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } if ( next_marker!= JPEG_MARKER_SOS ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } if ( next_marker!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } if ( next_marker!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, ""Invalid <S2SV_blank>",0
1104,"<S2SV_ModStart> ) == 1 && TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if (! CHILD ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; ch = CHILD ( n, 2 ) ; if (!",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> MACROBLOCK * signal <S2SV_ModStart> 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 0 ] ; else adjustment = adj_val",0
1106,"<S2SV_ModStart> ) ) { if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } } else if ( ( reqPtr -> request. line == NULL ) ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; } }",0
1107,<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_release_all ( ti ) ; # endif,0
1108,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( SOCKET_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1109,"<S2SV_ModStart> xop ) { struct se_subsystem_dev <S2SV_ModEnd> * remote_dev ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""remote_dev: <S2SV_blank> %p <S2SV_blank> dst_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""remote_dev: <S2SV_blank> %p <S2SV_blank> src_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> } <S2SV_null>",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_TTL, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_TTL."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVPKTINFO, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVPKTINFO."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_TTL, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank>",0
1111,<S2SV_ModStart> int error ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode = EXT2_I ( inode ) ; if ( ei_info -> i_flags & EXT2_INDEX_BLOCKS ) { struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_info = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode_info = EXT2_I ( inode ) ; if ( ei_info -> i_flags & EXT2_INDEX_BLOCKS ) { struct ext2_inode_info * ei_info = EXT2_I ( inode,0
1112,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { VPxWorker * const worker = ctx -> worker ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ;",0
1115,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } InheritException ( exception, & image -> exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image )",0
1116,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1117,"<S2SV_ModStart> TSRMLS_DC ) { const char * ptr = str ; <S2SV_ModStart> len ) ; if (! state -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> path: <S2SV_blank> \'\'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'\'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> fragment: <S2SV_blank> \'\'%s\'""",0
1118,<S2SV_ModStart> SUCCESS ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( var ) ;,0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * worker = ctx -> frame_workers ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * frame_worker_data ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * frame_worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * frame_",0
1122,"<S2SV_ModStart>. path ; int err ; err = curl_easy_unescape <S2SV_ModEnd> ( data, <S2SV_ModStart> NULL ) ; if ( err ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart>! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; err = curl_easy_unescape ( data, path, 0, err <S2SV_ModEnd> ) ; if <S2SV_ModStart>! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if ( err ) return CURLE_OUT_OF_MEMORY ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; if ( err ) return CURLE_OUT_OF_MEMORY ; if ( <S2SV_ModStart>! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; err = curl_easy_unescape ( data, path, 0, NULL ) ; if (! err ) return CURLE_OUT_OF_MEMORY ; if (! err ) return CURLE_OUT_OF_MEMORY ; if ( <S2SV_ModStart>! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; return CURLE_OK <S2SV_ModEnd> ; } <S2SV_null>",0
1123,"<S2SV_ModStart> 1 ) ; if ( len > facilities_len ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> unknown <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break ; } <S2SV_ModStart> 1 ) ; if ( len > facilities_len ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> unknown <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break ; } if ( len > facilities_len ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> unknown <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len + 1 ; break ; } if ( len > facilities_len ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> unknown <S2SV_blank> facilities <S2SV_blank> family <S2SV_blank> %02X\\n"", * p ) ; facilities_len -= len",0
1124,"<S2SV_ModStart>, ret ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_BLA ( s ) ) s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_BLA ( s ) ) s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_BLA ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; if ( IS_BLA ( s ) ) s -> max_ra = INT_MAX ; if ( IS",0
1125,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs >= ps_dec -> u2_total_mbs_coded ) { ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec -> ps_cur_slice = NULL ; ps_dec,0
1126,<S2SV_ModStart> ; UWORD32 u4_x_offset ; <S2SV_ModEnd> UWORD32 u4_y_offset ; <S2SV_ModStart> B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps,0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_INFO * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ pd -> subsampling_x ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ pd -> subsampling_y ] ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if (,0
1130,<S2SV_ModStart> -> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1131,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1132,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt <S2SV_ModStart> ) ) ; if ( getnum ( L, fmt, sizeof ( int ) ) > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ), MAXINTSIZE ) ; if ( getnum ( L, fmt, sizeof ( int ) ) > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; if ( getnum ( L, fmt, sizeof ( int ) ) > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ), MAXINTSIZE ) ; if ( getnum ( L, fmt, sizeof ( int ) ) > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ;",0
1133,<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > rowsperstrip ) { rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip ; } else { rowstoread = row + img -> row_offset ; },0
1134,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) )!= TYPE_COMMENT ) { Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ), NCH ( n ) ) ; Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", CHILD ( n, 0 ) ) ; Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( CHILD ( n, 0 ) ), NCH ( n ) ) ; Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ) ; Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", CHILD ( n, 1 ) ) ; Py_FatalError ( ""Non-comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ) ;",0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1136,"<S2SV_ModStart> - EINVAL ; if ( upid == - 1 ) type = PIDTYPE_MAX ; else if ( upid < 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( upid == 0 ) { type = PIDTYPE_MAX ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; }",0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; if ( num & ( 1 << ( number - 1 ) ) ) return num - ( 1 << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1139,"<S2SV_ModStart> ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, 1, rows, file )!= rows ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1140,"<S2SV_ModStart> ; uint16_t attr_len ; uint16_t bytes_left ; uint16_t blocks_left ; uint16_t last_block_len ; <S2SV_ModStart> avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Final",0
1141,"<S2SV_ModStart> -> private ; if ( cmd == DM_IOCTL_GET_MODE ) { return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, cmd, arg ) ; } else { return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, cmd, arg ) ; }",0
1142,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_TAG : actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 7 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32,0
1143,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1144,"<S2SV_ModStart> fclose ( fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; unlink ( RUN_LIB_FILE ) ; create_empty_file_as_root ( RUN_LIB_FILE, 0644 ) ; if ( chown ( RUN_LIB_FILE, getuid ( ), getgid ( ), RUN_LIB_FILE ) ) errExit ( ""chown"" ) ; if ( sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE ) ; if (! sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE ) ) errExit ( ""sbox_run"" ) ; if (! sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN",0
1145,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1146,"<S2SV_ModStart> { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF,",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | NTLMSSP_NEGOTIATE_SIGN <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sign ) flags |= NTLMSSP_NEGOTIATE_SIGN ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ;,0
1148,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IM",0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if ( ( cc % stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%",0
1151,<S2SV_ModStart> g -> sect > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1152,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, 0 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; }",0
1156,"<S2SV_ModStart> ) ) ; if ( name -> name == ""__debug__"" ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 0 ; }",0
1157,"<S2SV_ModStart> ; if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - EFAULT ; goto out_unmap ; } } if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - EFAULT ; goto out_unmap ; }",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result!= CURL_OK ) return result ; } Curl_pp_init ( pp ) ; pp -> response_time = RESP_TIMEOUT ; pp -> conn = conn ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result!= CURL_if_multi ) { result = Curl_ssl_connect ( conn,",0
1160,"<S2SV_ModStart> } ; for ( i = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } <S2SV_ModStart> j ++ ) { if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( j >= sizeof ( buf ) - 1 ) { i -- ; continue ; } for ( j = 0 ; j < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( j >= sizeof ( buf ) - 1 ) { i -- ; continue ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return -",0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,"<S2SV_ModStart> return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; } if ( off < 0 ) { ret = - EINVAL ; goto out ; } if ( off > sizeof ( struct rds_header ) + RDS_FRAG_SIZE ) { ret = - EINVAL ; goto out ; } if ( conn -> c_fcong ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; ret = rds_ib_ring_alloc ( & ic -> i_send_ring, i, & pos ) ; if ( ret ) goto out ; i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; } if ( ret ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; ret = - ENO",0
1163,"<S2SV_ModStart> ; priv -> regs = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> regs ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> regs = devm_kzalloc ( & pdev -> dev, sizeof ( * priv ), GFP_KERNEL ) ; if (! priv -> regs ) return - ENOMEM ; priv -> regs = devm_kzalloc ( & pdev -> dev, sizeof ( * priv ), GFP_KERNEL ) ; if (! priv -> regs ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } <S2SV_ModEnd> priv -> mii_bus",0
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,"<S2SV_ModStart> = 0 ; if ( pi -> picomp -> pirlvls [ pi -> rlvlno ]. level >= JAS_CAST ( int, pchg -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> pirlvl -> pirlvls [ pi -> pirlvl -> pirlvls [ pi -> pirlvl -> pirlvls [ pi -> pirlvl -> pirlvls [ pi -> pirlvl -> pirlvls [ pi -> pirlvl",0
1166,"<S2SV_ModStart> ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) )",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr, res ) ; if ( status ) goto out ;",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_",0
1169,"<S2SV_ModStart> & CLONE_SETTLS ) { thread -> tp_value = childregs -> ARM_r3 ; thread_notify ( THREAD_NOTIFY_COPY, thread ) ; return 0 ; } if ( clone_flags & CLONE_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1170,"<S2SV_ModStart> { jas_stream_t * stream ; jas_stream_memobj_t * obj ; jas_dbGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; obj = ( jas_stream_memobj_t * ) jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; if (! obj ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> obj_ = ( void * ) jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ; obj -> myalloc_ = 1 ; } if ( buf ) { obj -> buf_ = ( unsigned char * ) buf ; } else { obj -> buf_ = jas_malloc (",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> sshkey * key = NULL ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart>, * userstyle <S2SV_ModEnd> ; u_char * <S2SV_ModStart> NULL ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen, NULL ) )!= 0 ) fatal ( ""%s: <S2SV_blank> parse <S2SV_blank> request <S2SV_blank> failed: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; goto done ; } pktype = sshkey_type_plain ( key -> type ) ; if ( pktype == KEY_UNSPEC ) { verbose ( ""%s: <S2SV_blank> unsupported <S2SV_blank> public <S2SV_blank> key <S2SV_blank> algorithm: <S2SV_blank> %s"", __func__, pkalg )",0
1172,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( chunk_header ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( chunk_header ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1173,"<S2SV_ModStart> mech ) ) { ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s,",0
1174,"<S2SV_ModStart> tn_buf ) ; verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%s\\n"", regno, tn_buf ) ; verbose ( env, ""invalid <S2SV_blank> stack <S2SV_blank> type <S2SV_blank> R%d <S2SV_blank> off=%d <S2SV_blank> access_size=%d\\n"", regno, off, access_size ) ; verbose ( env, ""invalid <S2SV_blank> stack <S2SV_blank> type <S2SV_blank> R%d <S2SV_blank> off=%d <S2SV_blank> access_size=%d\\n"", regno, off, access_size ) ; verbose ( env, ""invalid <S2SV_blank> stack <S2SV_blank> type <S2SV_blank> R%d <S2SV_blank> off=%d <S2SV_blank> access_size=%d\\n"", regno, off, access_size ) ; verbose ( env, ""invalid <S2SV_blank> stack <S2SV_blank> type <S2SV_blank> R%d <S2SV_blank> off=%d <S2SV_blank> access_size=%d\\n"", regno, off, access_size ) ; verbose ( env, ""invalid <S2SV_blank> stack <S2SV_blank> type <S2SV_blank> R%d <S2SV_blank> off=%d <S2SV_blank> access_size=%d\\n"", regno, off, access_size ) ; verbose ( env, ""invalid <S2SV_blank> stack <S2SV_blank> type <S2SV_blank> R%d <S2SV_blank> off=%d <S2SV_blank> access_size=%d",0
1175,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; }",0
1176,"<S2SV_ModStart> ; db_count = le32_to_cpu ( es -> s_db_count ) ; if ( db_count > EXT2_MAX_DBS_PER_BLOCK ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", db_count, ( unsigned long ) sbi -> s_db_count ) ; goto failed_sbi ; } if ( db_count > EXT2_MAX_DBS_PER_BLOCK ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", db_count, ( unsigned long ) sbi -> s_db_count ) ) ; goto failed_sbi ; } if ( db_count > EXT2_MAX_DBS_PER_BLOCK ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> DB <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", db_count, ( unsigned long ) sbi -> s_db_count ) ) ;",0
1177,<S2SV_ModStart> bd_addr ) { int rc ; rc = btif_dm_remove_bond ( bd_addr ) ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; rc = btif_dm_remove_bond ( bd_addr ) ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; rc = btif_dm_remove_bond ( bd_addr ) ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; rc = btif_dm_remove_bond ( bd_addr ) ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; rc = btif_dm_remove_bond ( bd_addr ) ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; rc = btif_dm_remove_bond ( bd_addr ) ; if ( rc < 0 ) return BT_STATUS_NOT_READY ; rc = btif_,0
1178,"<S2SV_ModStart> < tcp_hdrlen ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } else { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; }",0
1179,"<S2SV_ModStart> numrows < 0 || numcols > jas_matind_maxcols ( numrows, numcols ) ) { return NULL ; } if ( numrows > jas_matind_maxrows ( numrows, numcols ) ) { return NULL ; } if ( numcols > jas_matind_maxcols ( numcols ) ) { return NULL ; } matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; matrix -> xstart_ = 0 ; matrix -> ystart_ = 0 ; matrix -> ystart_ = 0 ; matrix -> yend_ = 0 ; matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> maxcols_ = 0 ; matrix -> datasize_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return",0
1180,<S2SV_ModStart> ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1181,"<S2SV_ModStart> * req ; SCSIDiskReq * r ; if (! qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ; <S2SV_ModStart> scsi_disk_reqops, & s -> qdev -> dev, tag, lun, hba_private ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BU",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; txid <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; avail = buf -> len - buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax || cur > MAX_TXID ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1185,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; info. in_skb = cb -> skb ; info. out_skb = skb ; info. nlmsg_seq = cb -> nlh -> nlmsg_seq ; info. nlmsg_flags = cb -> nlh -> nlmsg_flags ; info. out_nlmsg_seq = cb -> nlh -> nlmsg_seq ; info. nlmsg_flags = NLM_F_MULTI ; <S2SV_ModStart> = NLM_F_MULTI ; if ( <S2SV_ModEnd> cb -> args <S2SV_ModStart> 0 ] ) { xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } else { xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len ;",0
1186,"<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; goto done ; } ret = oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1187,"<S2SV_ModStart> = upperdir -> d_inode <S2SV_ModEnd> ; int err <S2SV_ModStart> = - ESTALE <S2SV_ModEnd> ; if ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } else { err = vfs_unlink ( dir, upper, NULL ) ; } inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname ), errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log (",0
1189,<S2SV_ModStart> size ) ) { av_free ( * ptrptr ) ; return AVERROR ( ENOMEM ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1190,<S2SV_ModStart> name == MAPI_BODY_HTML || a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RAW ) { body. html_bodies = get_html_data ( a ) ; rtf_size = a -> num_values ; } else { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto",0
1193,,1
1194,<S2SV_ModStart> journal_t * journal = EXT4_JOURNAL ( page -> mapping -> host ) <S2SV_ModEnd> ; if (,0
1195,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer ->",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1197,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy ( md5data, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; width = htole16 ( height ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * topDir = Cvar_VariableString ( ""fs_topdir"" ) ; if (! topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; Com_sprintf ( libPath, sizeof ( libPath ), ""%s%c%s"", topDir, PATH_SEP, name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading",0
1199,<S2SV_ModStart> NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> ( sum << <S2SV_ModEnd> n ) { <S2SV_ModStart> n ) { if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, """,0
1201,<S2SV_ModStart> ; if ( asdl_typ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1202,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1203,"<S2SV_ModStart> HAVE_IPV6 char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) ; if (! p ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } return estrndup ( str + 1, str_len - 1 ) ; } <S2SV_ModEnd> if ( str_len <S2SV_ModStart> colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } <S2SV_ModEnd> return host ;",0
1204,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
1205,<S2SV_ModStart> ; } if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97_INT ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && (,0
1206,"<S2SV_ModStart> { if ( 0 == <S2SV_ModEnd> curl_easy_getinfo ( curl <S2SV_ModStart> curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL <S2SV_ModEnd>, & stringp <S2SV_ModStart> case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_REQUEST_SIZE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_REQUEST_SIZE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_e",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col + MI_BLOCK_SIZE, sizeof ( xd -> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index <",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int hexdump_len ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; tlen = EXTRACT_32BITS ( lmp_com_header -> length ) ; hexdump_len = EXTRACT_32BITS ( lmp_com_header -> hexdump_len ) ; hexdump_len = EXTRACT_32BITS ( lmp_com_header -> hexdump_len ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%u], <S2SV_blank> length: <S2SV_blank> %u"", lmp_com_header -> length, hexdump_len ) ) ; hexdump_len = EXTRACT_32BITS ( lmp_com_header -> hexdump_len ) ; hexdump_len = EXTRACT_32BITS ( lmp_com_header -> hexdump_len ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%u",0
1209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1211,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } <S2SV_ModEnd> skb_pull_rcsum ( skb_out",0
1212,<S2SV_ModStart> ) ; sta -> ampdu_mlme. sta_id = atomic_inc_return ( & sta -> ampdu_mlme. sta_id ) ; spin_lock_init ( & sta -> ampdu_mlme. lock ) ; <S2SV_ModStart> sta_unblock ) ; sta -> ampdu_mlme. sta_id = atomic_inc_return ( & sta -> ampdu_mlme. sta_id ) ; sta -> ampdu_mlme. sta_id = atomic_inc_return ( & sta -> ampdu_mlme. sta_id ) ; sta -> ampdu_mlme. sta_id = atomic_inc_return ( & sta -> ampdu_mlme. sta_id ) ; sta -> ampdu_mlme. sta_id = atomic_inc_return ( & sta -> ampdu_mlme. sta_id ) ; sta -> ampdu_mlme. sta_id = atomic_inc_return ( & sta -> ampdu_mlme. sta_id ) ; sta -> ampdu_mlme,0
1213,<S2SV_ModStart> tp_event ) && p_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } else { if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } else { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL,0
1214,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> 0 ) ; if (! epctrl ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epctrl <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } if (! epwrite ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epwrite <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } if (! epread ) { dev_err ( & intf -> dev, ""No <S2SV_blank> epread <S2SV_blank> descriptor\\n"" ) ; return - EINVAL ; } if",0
1215,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1216,"<S2SV_ModStart> return ; netsnmp_mibindex_init <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } <S2SV_ModEnd> SNMP_FREE ( env_var <S2SV_ModStart> ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var!= NULL ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ;",0
1217,"<S2SV_ModStart> ; struct list_head <S2SV_ModEnd> tmplist ; newsk <S2SV_ModStart> -> do_auto_asconf ) { sctp_skb_copy_descendant ( skb, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk ( newsk, oldsk ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_bind_addr_dup ( & newsp -> ep -> base. bind_addr, GFP_KERNEL ) ; sctp_skb_for_each ( skb, & newsk -> sk_receive_queue, tmp ) { sctp_bind_addr_dup ( & newsk -> base. bind_addr, & newsk -> base. bind_addr, GFP_KERNEL ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( new",0
1218,"<S2SV_ModStart> open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } if ( read ( fd, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable",0
1219,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> short sel ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; if (! desc -> d ) return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> static krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( screen -> columns == 0 || screen -> rows == 0 ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException",0
1225,<S2SV_ModStart> ; while ( <S2SV_ModEnd> impeg2d_bit_stream_nxt ( ps_stream <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( <S2SV_ModEnd> ps_stream_nxt ( ps_stream <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( <S2SV_ModEnd> ps_stream_nxt ( ps_stream <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( <S2SV_ModEnd> ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_nxt ( ps_stream_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) { if (! ipc_count ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_COUNT ; } if ( flood_duration_test ) { if (! ipc_count ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_",0
1227,"<S2SV_ModStart> = g_new0 ( MonoType *, count ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = mono_reflection_type_get_handle ( g_new0 ( MonoType *, count ) ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = g_new0 ( MonoType *, count ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = g_new0 ( MonoType *, count ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = mono_reflection_type_get_handle ( g_new0 ( MonoType *, count ) ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = g_new0 ( MonoType *, count ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = g_new0 ( MonoType *, count ) ; if ( type_argv [ 0 ] == NULL ) type_argv [ 0 ] = g_new0 ( MonoType *, count",0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long tmp ; if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; <S2SV_ModEnd> tmp = simple_strtol",0
1229,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1230,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) < F2FS_MIN_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ;",0
1231,"<S2SV_ModStart> is_path ) { const char * repl ; size_t len ; repl = ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; } else { repl = ( ( len == 9 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_platform ) : _",0
1232,"<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space ; struct ipv6_txoptions_rcu * rcu <S2SV_ModStart> ; rcu = rcu_dereference_protected ( rp -> rcu, sock_owned_by_user ( sk ) ) ; if ( rcu!= NULL ) { rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; if ( rcu!= NULL ) { rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; if ( rcu!= NULL ) { rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; if ( rcu!= NULL ) { rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; if ( rcu!= NULL ) { rcu = rcu_dereference_protected ( rcu, sock",0
1234,"<S2SV_ModStart> goto drop ; } if ( iph -> ihl == 6 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,"<S2SV_ModStart> ; rt = rcu_dereference_protected ( net -> ipv4. rt_table [ table_id ], sock_owned_by_user ( in_skb -> sk ) ) ; if ( rt == NULL ) { err = - EINVAL ; goto errout ; } rt = rcu_dereference_protected ( rt -> dst, sock_owned_by_user ( in_skb -> sk ) ) ; if ( rt == NULL ) { err = rcu_dereference_protected ( net -> ipv4. rt_table [ table_id ], sock_owned_by_user ( in_skb -> sk ) ) ; if ( err ) goto errout ; } rt = rcu_dereference_protected ( net -> ipv4. rt_table [ table_id ], sock_owned_by_user ( in_skb -> sk ) ) ; if ( rt ) { err = rcu_dereference_protected ( net -> ipv4. rt_table [ table_id ], sock_owned_by_user ( in_skb -> sk ) ) ; if ( err ) goto errout",0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,"<S2SV_ModStart> goto errout ; info -> stagemasks = _ogg_malloc ( info -> partitions * sizeof ( * info -> stagemasks ) ) ; if (! info -> stagemasks ) { int cascade = oggpack_read ( opb, 3 ) ; if ( cascade >= ci -> books ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) goto errout ; info -> stagemasks = _ogg_malloc ( info -> partitions * sizeof ( * info -> stagemasks ) ) ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) goto errout ; info -> stagemasks = _ogg_malloc ( info -> partitions * sizeof ( * info -> stagemasks ) ) ; } for ( j = 0 ; j < info ->",0
1239,"<S2SV_ModStart> -> count ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } <S2SV_ModEnd> tp -> copied_seq",0
1240,"<S2SV_ModStart> = 0 ; krb5_key_data * key_data ; if ( n_key_data > KRB5_MAX_KEY_DATA ) { err = ENOMEM ; goto cleanup ; } key_data = k5realloc ( key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_",0
1241,"<S2SV_ModStart> * self, <S2SV_ModEnd> Py_ssize_t idx,",0
1242,"<S2SV_ModStart> ] ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { rc = sqlite3_realloc ( pCsr -> zInput, nByte + 1, GFP_KERNEL ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { rc = sqlite3_realloc ( pCsr -> zInput, nByte + 1, GFP_KERNEL ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { rc = sqlite3_realloc ( pCsr -> zInput, nByte + 1, GFP_KERNEL ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { rc = sqlite3_realloc ( pCsr -> zInput, nByte + 1, GFP_KERNEL ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { rc = sqlite3_realloc ( pCsr -> zInput, nByte + 1, GFP_KERNEL )",0
1243,<S2SV_ModStart> filp ) { if ( filp ) fput ( filp ) ;,0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
1245,"<S2SV_ModStart> MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart> name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'",0
1246,"<S2SV_ModStart> } opt = rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1247,<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ),0
1248,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1249,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1250,"<S2SV_ModStart> - 1 ) zsocket_set_multicast_hops ( pData -> socket, pData -> multicastHops ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( pData -> socket, pData -> sndTimeout ) ; if ( pData -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( pData -> socket, pData -> rcvTimeout ) ; if ( pData -> maxMsgSize > - 1 ) zsocket_set_maxmsgsize ( pData -> socket, pData -> maxMsgSize ) ; if ( pData -> rate > - 1 ) zsocket_set_rate ( pData -> socket, pData -> rate ) ; if ( pData -> recoveryIVL > - 1 ) zsocket_set_recovery_ivl ( pData -> socket, pData -> recoveryIV",0
1251,"<S2SV_ModStart> 0 ) return <S2SV_ModEnd> - ENOSPC ; <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; ret = - ENOSPC ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret",0
1252,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt <S2SV_ModStart> ( sock_net ( sk ) <S2SV_ModEnd>, SCTP_MIB_OUTSCTPPACKS ) <S2SV_ModStart> = 1 ; opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! opt ) { sctp_inc_stats ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; } <S2SV_ModStart> = 1 ; }",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,<S2SV_ModStart> ) goto MATLAB_KO ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; } if ( quantum_info == NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == NULL ) { quantum_info = DestroyQuantum,0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( <S2SV_ModEnd> TAG, ""RDP_NEG_FAILURE"" <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
1257,"<S2SV_ModStart>, last_pwd ; osa_princ_ent_rec hist_princ ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; hist_princ = ( osa_princ_ent_rec ) adb. princ ; last_pwd = ( osa_princ_ent_rec ) pol ; if ( last_pwd!= ( osa_princ_ent_rec ) pol ) last_pwd = ( osa_princ_ent_rec ) pol ; if ( last_pwd!= ( osa_princ_ent_rec ) adb. policy ) last_pwd = ( osa_princ_ent_rec ) adb. princ ; if ( last_pwd!= ( osa_princ_ent_rec ) pol ) last_pwd = ( osa_princ_ent_rec ) adb. princ ; if ( last_pwd!= ( osa_princ_ent_rec ) pol ) last_pwd = ( osa_princ_ent_rec ) adb. policy ) last_pwd = ( osa_princ_ent_rec ) pol ;",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> (! bn_is_zero <S2SV_ModEnd> ( t ) <S2SV_ModStart> (! bn_is_zero <S2SV_ModEnd> ( t ) <S2SV_ModStart> ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= RSA_DEC ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m",0
1259,<S2SV_ModStart> + 1 ) ; if ( ip + sizeof ( uint64_t ) > stack_size ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> + 1 ) ; if ( ip + sizeof ( uint64_t ) > stack_size - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> + 1 ) ; if ( ip + sizeof ( uint64_t ) > stack_size - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> + 1 ) ; if ( ip + sizeof ( uint64_t ) > stack_size - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( ip + sizeof ( uint64_t ) > stack_size - 1 ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> += sizeof ( uint64_t ) ; if ( ip + sizeof ( uint64_t ) > stack_size - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( ip + sizeof ( uint64_t ) > stack_size - 1 ) return ERROR_INSUFFICIENT_MEMORY ; if ( ip + sizeof ( uint64_t ) > stack_size,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; <S2SV_ModStart> ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) continue ; if (! blk_mq_tag_to_",0
1262,"<S2SV_ModStart> ( psf = psf_allocate <S2SV_ModEnd> ( 1,",0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) if ( cm -> counts. switchable_interp [ j ]!= NULL ) count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; else count [ i ] = 0 ;,0
1264,"<S2SV_ModStart>'<S2SV_blank>') { token ++ ; } while ( token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } op -> operands [ operand ]. type = ARM_UNDEFINED ; op -> operands [ operand ]. reg_type = ARM_UNDEFINED ; op -> operands [ operand ]. shift = ARM_NO_SHIFT ; while ( token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ].",0
1265,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> -> act_zbin_adj = 0 ; vp9_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd ->",0
1266,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1267,"<S2SV_ModStart> EOFOp 0x07 MemoryInfo * memory_info <S2SV_ModEnd> ; Image * <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory_info <S2SV_ModEnd>, 2, <S2SV_ModStart> ( image, memory",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } <S2SV_ModEnd> mutex_unlock ( &",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR )",0
1271,<S2SV_ModStart> ; ps_dec -> u4_cur_slice_offset = ps_cur_slice -> u4_cur_slice_offset ; ps_dec -> u4_cur_slice_offset_msb = ps_cur_slice -> u4_cur_slice_offset_msb ; ps_dec -> u4_cur_slice_offset_lsb = ps_cur_slice -> u4_cur_slice_offset_lsb ; ps_dec -> u4_cur_slice_offset_msb = ps_cur_slice -> u4_cur_slice_offset_msb ; ps_dec -> u4_cur_slice_offset_msb = ps_cur_slice -> u4_cur_slice_offset_msb ; ps_dec -> u4_cur_slice_offset_lsb = ps_cur_slice -> u4_cur_slice_offset_lsb ; ps_dec -> u4_cur_slice_offset_msb = ps_cur_slice -> u4_cur_slice_offset_msb ; ps_dec -> u4_cur_slice_offset_msb = ps_cur_,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( item == NULL ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( item ) ; return ( 0 ) ; } <S2SV_ModStart> item ) ; OPENSSL_free ( item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; if ( item == NULL ) { OPENSSL_free ( rdata ) ; return ( 0 ) ; } if ( SSL_get_rbio ( s ) ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( item ) ; return ( 0 ) ; } SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( rdata ) ; OPENSSL_free ( item ) ; return ( 0 ) ; } if ( ssl3_setup_buffers ( s ) ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( rdata ) ;",0
1273,"<S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } ret = copy_from_user ( exec2_list, ( struct drm_i915_relocation_entry __user * ) ( uintptr_t ) args -> buffers_ptr, sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( ret ) { ret = - EFAULT ; DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> "" ""back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)\\n"", args -> buffer_count, ret ) ; ret = - EFAULT ; DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> "" ""back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> PTR_ERR ( karg ) <S2SV_ModEnd> ; return PTR_ERR <S2SV_ModStart> ) ) ; kfree ( karg ) ;",0
1275,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mount_entry_on_generic ( <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> const char __user <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> char * buf <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ;",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1279,"<S2SV_ModStart> err_info ) { int pkt_len ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ 13 ] ; <S2SV_ModStart> FALSE ; } if (! parse_netscreen_hdr ( wth -> random_fh, line, cap_int, & cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh",0
1280,<S2SV_ModStart> rq ) { struct cpu_time cpu_time ; <S2SV_ModStart> rq ) ; cpu_time = sched_clock_cpu ( cpu ) ; irq_time = irq_time_cpu ( cpu ) <S2SV_ModEnd> ; rq -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * argv ) ; } break ; # ifdef NEWS case 'n' : iflags. news = FALSE ; break ; # endif case 'u' : if ( argv [ 0 ] [ 2 ] ) { ( void ) strncpy ( plname, argv [ 0 ] + 2, sizeof plname - 1 ) ; } else if ( argc > 1 ) { argc -- ; argv ++ ; ( void ) strncpy ( plname, argv [ 0 ], sizeof plname - 1 ) ; } else { raw_printf ( ""Player <S2SV_blank> name <S2SV_blank> expected <S2SV_blank> after <S2SV_blank> -u"" ) ; } break ; # endif case 'p' : if ( argv [ 0 ] [ 2 ] ) { ( void ) strncpy ( plname, argv [ 0 ] + 2, sizeof plname - 1 ) ; } else if ( argc > 1 ) { argc -- ; argv ++ ; ( void ) strncpy ( plname, argv [ 0 ], sizeof plname - 1 ) ; } else { raw_printf ( ""Player <S2SV_blank> name <S2SV_blank> expected <S2SV_blank> after <S2SV_blank> -p"" ) ; } break",0
1282,"<S2SV_ModStart> st ) { unsigned long flags ; union blkif_back_rings * blk_rings ; int notify ; resp. id = id ; resp. operation = op ; resp. status = st ; spin_lock_irqsave ( & ring -> blk_ring_lock, flags ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; } <S2SV_ModEnd>",0
1283,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5,0
1284,"<S2SV_ModStart> ; if ( exif_test_bit ( datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_BIG ; if ( exif_test_bit ( datao, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_test_bit ( o, buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof",0
1285,"<S2SV_ModStart> ; if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", dirout ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( shtml == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; }",0
1286,"<S2SV_ModStart> case ICMP_ECHO_PROTOCOL : ND_TCHECK ( dp -> icmp_ip. ip_dst ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, EXTRACT_16BITS ( & dp -> icmp_seq ), EXTRACT_16BITS ( & dp -> icmp_ip. ip_dst ) ) ; break ; case ICMP_ECHO_REPLY : ND_TCHECK ( dp -> icmp_ip. ip_p ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_type, EXTRACT_16BITS ( & dp -> icmp_id ), EXTRACT_16BITS ( & dp -> icmp_seq ) ) ; break ; case ICMP_ECHOREPLY : ND_TCHECK ( dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> ; } ci = d_inode ( dir ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key ) ci = ci -> ci_keyring_key ; spin_lock ( & dentry -> d_lock ) ; cached_with_key = dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ; spin_unlock ( & dentry -> d_lock ) ; dir_has_key = ( ci!= NULL ) ; dput ( dir ) ; <S2SV_ModEnd> return 1 ;,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1",0
1289,"<S2SV_ModStart> ; } numbers [ argc ] = ( unsigned long ) mtree_atol ( & p ) ; if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_",0
1290,<S2SV_ModStart> parent ) ; if ( i -> width > <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1291,"<S2SV_ModStart> n ) ; if ( l + m > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l + m > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( type == MINISSDPD_SEARCH_ALL && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; } if ( l + m > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ) ; goto error ; } if ( type == MINISSDPD_GET_VERSION && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING,",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart>. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ) stream",0
1293,<S2SV_ModStart> void ) { if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; return ; } if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; return ; } if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; return ; } if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; recovery_mode = RECOVERY_MODE_SIMPLE ; } if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; return ; } if ( recovery_mode == RECOVERY_MODE_SIMPLE ) { recovery_mode = RECOVERY_MODE_SIMPLE ; recovery_mode = RECOVERY_MODE_SIMPLE ; recovery_mode = RECOVERY_MODE_SIMPLE ; recovery_mode = RECOVERY_MODE_SIMPLE ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> )",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) NULL ) ; }",0
1296,"<S2SV_ModStart> ; if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" ) ; goto error ; } if ( l == 0 ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length",0
1297,"<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; UWORD32 u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_TP, 0, sizeof ( union tp_value ), datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_TP, 0, sizeof ( union tp_value ), datap ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; # endif",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, args -> uniforms_u, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, args -> shader_state, args -> shader_state_size ) ) { ret = -",0
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( child <S2SV_ModStart> ) { entries [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (!",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,"<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> other )!= sk ) { if ( unix_recvq_full ( sk ) ) writable = 0 ; } else { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; writable = 0 ; } else if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } <S2SV_ModEnd> mask |= POLLOUT",0
1303,<S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> unsigned char ) c ; } value = ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; value |= buffer [ 4 ] ; value |= buffer [ 5 ] ; value |= buffer [ 6 ] ; value |= buffer [ 7 ] ; value |= buffer [ 8 ] ; value |= buffer [ 9 ] ; value |= buffer [ 10 ] ; value |= buffer [ 11 ] ; value |= buffer [ 12 ] ; value |= buffer [ 13 ] ; value |= buffer [ 14 ] ; value |= buffer [ 15 ] ; value |= buffer [ 16 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart> unsigned_value = ( value & 0xffffffff <S2SV_ModEnd> ) ; return,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void exit_io_context ( <S2SV_ModStart> * ioc ; spin_lock_irq ( & ioc -> ioc_lock ) ; <S2SV_ModStart> -> io_context ; spin_unlock_irq ( & ioc -> ioc_lock ) ; <S2SV_ModStart> = NULL ; spin_unlock_irq ( & ioc -> ioc_lock ) ; if ( atomic_dec_and_test ( & ioc -> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; } <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1306,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> * minor_status = <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEF,0
1307,"<S2SV_ModStart> data ) { unsigned<extra_id_1>i ; * <S2SV_ModStart> ret = xen_pcibk_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart>, value, data ) ; if ( ret ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { vp9_ref_frame_t * frame = va_arg ( args, vp9_ref_frame_t * <S2SV_ModEnd> ) ; if <S2SV_ModStart> NULL ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const worker_data = ( FrameWorkerData * ) worker -> frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker",0
1309,"<S2SV_ModStart> ] ) ; memset ( fpl, 0, sizeof ( * fpl ) ) ;",0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,<S2SV_ModStart> dwc ; spin_lock ( & dwc -> lock ) ; <S2SV_ModEnd> list_del ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,<S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyvsa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModEnd> ] ; yytype_int16 <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ YYINITDEPTH <S2SV_ModEnd> ] ; yytype_int16 <S2SV_ModEnd> yyssa [ <S2SV_ModStart> ] ; yytype_int16 <S2SV_ModEnd> yyss,0
1313,"<S2SV_ModStart>, [ DISCE_PROBE ] = sas_probe_devices, [ DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, [ DISCE_DESTRUCT ] = sas_destruct_devices, } ; for ( i = 0 ; i < DISC_NUM_EVENTS ; i ++ ) { INIT_SAS_WORK ( & disc -> disc_work [ i ]. work, sas_destruct_devices ) ; } for ( i = 0 ; i < DISC_NUM_EVENTS ; i ++ ) { INIT_SAS_WORK ( & disc -> disc_work [ i ]. work, sas_event_fns [ i ] ) ; } for ( i = 0 ; i < DISC_NUM_EVENTS ; i ++ ) { INIT_SAS_WORK ( & disc -> disc_work [ i ]. work, sas_event_fns [ i ] ) ; } for ( i = 0 ; i < DISC_NUM_EVENTS ; i ++ ) { INIT_SAS_WORK ( & disc -> disc_work [ i ]. work, sas_event_fns",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart>, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile,",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModEnd> uECC_word_t carry = <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ; tmp [ 0 ] = 1 ; } else",0
1316,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
1317,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; int copied <S2SV_ModStart> out ; if ( msg -> msg_name ) { struct sockaddr_in * sin = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_zero. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; sin -> sin_family = AF_INET ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_family = AF_INET ; sin -> sin_family = AF_INET ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ;",0
1318,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_EXTENTS ;",0
1319,"<S2SV_ModStart> ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( new_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( new_arr, new_free_total * sizeof ( nw_buf * ) ) ; } else { free ( buf ) ; } }",0
1320,"<S2SV_ModStart> map ; map = bpf_map_inc <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> tp ) { const <S2SV_ModEnd> char hex [ <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModEnd> char * dp <S2SV_ModStart> 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = (",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc",0
1325,<S2SV_ModStart> ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if (,0
1326,<S2SV_ModStart> 256 ; vpx_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> vf = vp8_mse16x16 ; vpx_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vpx_variance_fn_ptr_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> = vp8_mse16x16 ; vpx_variance_fn_ptr_t vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col = recon_buffer -> col ; recon_buffer -> row = recon_buffer -> row ; recon_buffer -> col = recon_buffer -> col ; recon_buffer -> row = recon_buffer -> row ; recon_buffer -> col = recon_yoffset ; vpx_variance_fn_ptr_t vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ;,0
1327,"<S2SV_ModStart> = alloc ; size_t strindex = 0 ; size_t length ; CURLcode res ; ns = realloc ( ns, alloc ) ; if (! ns ) return NULL ; if ( newlen > alloc ) { alloc *= 2 ; testing_ptr = realloc ( ns, alloc ) ; if (! testing_ptr ) return NULL ; ns = testing_ptr ; } } res = Curl_convert_to_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; if ( newlen > alloc ) { alloc *= 2 ; testing_ptr = realloc ( ns, alloc ) ; if (! testing_ptr ) return NULL ; ns = testing_ptr ; } res = Curl_convert_to_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; } <S2SV_ModEnd> string ++ ;",0
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> { nbits = <S2SV_ModEnd> bits & 7 <S2SV_ModStart> & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } <S2SV_ModEnd> msg -> readcount",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; unsigned int index ; <S2SV_ModStart> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> register <S2SV_blank> netdev\\n"", name ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> register <S2SV_blank> netdev\\n"", name ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> register <S2SV_blank> netdev\\n"", name ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> register <S2SV_blank> netdev\\n"", name ) ; goto out ; } status = register_netdev ( net, dev ) ; if ( status < 0 ) { dev_err ( & udev -> dev, ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> register <S2SV_blank> netdev\\n""",0
1331,"<S2SV_ModStart> * data ; const size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> ; int size ; size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) return MONGO_BSON_TOO_LARGE ; if ( ( size - overhead ) > conn -> max_bson_size ) return MONGO_BSON_TOO_LARGE ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } mm = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR )",0
1332,"<S2SV_ModStart> item_name ) ; if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } else { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } else { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } else { strnc",0
1333,"<S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) return 1 ; * cmd ++ = htons ( S_CMD_INET_CHECK ) ; memcpy ( cmd + 1, addr, 4 ) ; memcpy ( cmd + 1 + 2, id, 2 ) ; printf ( ""Inet <S2SV_blank> check <S2SV_blank> by <S2SV_blank> %s <S2SV_blank> %d\\n"", inet_ntoa ( * addr ), ntohs ( * id ) ) ; if ( plen > S_HELLO_LEN && memcmp ( data, ""sorbo"", 5 ) == 0 ) return 1 ; * cmd ++ = htons ( S_CMD_INET_CHECK ) ; memcpy ( cmd + 1, addr, 4 ) ; memcpy ( cmd + 1 + 2, id, 2 ) ; printf ( ""Inet <S2SV_blank> check <S2SV_blank> by <S2SV_blank> %s <S2SV_blank> %d\\n"", inet_ntoa ( * addr ), ntohs ( * id ) ) ; if ( is_dup ( last_id ) ) { printf ( "" <S2SV_blank> (DUP)\\n"" ) ; return 0 ; }",0
1334,<S2SV_ModStart> { umode_t mode = posix_acl_mode ( inode <S2SV_ModEnd> ) ; retval <S2SV_ModStart> err_out ; } break ; case ACL_TYPE_DEFAULT : if ( S_ISDIR ( inode -> i_mode ) ) { struct iattr iattr ; if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } else { struct iattr iattr ; if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EPERM ; goto err_out ; } } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { struct iattr iattr ; if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } else { struct iattr iattr ; if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EPERM ; goto err_out ; } } break ; case ACL_TYPE_UNPRIVILEGED : if (! S_ISDIR ( inode -> i_mode ) ) { struct,0
1335,<S2SV_ModStart> ; if ( bin -> imports_list ) { r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> header. class_size > bin -> header. class_size ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> header. class_size > bin -> header. class_size ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_,0
1336,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ; default : type = RPC_ERROR_GENERIC ; },0
1337,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> NEGO_STATE_FAIL ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FAIL ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;",0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } } while ( ++ i <= active_worst_quality",0
1339,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { mark_object <S2SV_ModEnd> ( & c <S2SV_ModStart> data ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart
1343,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> ; DECLARE_ALIGNED_ARRAY ( 64, uint8_t, left_col, 128 ) ; DECLARE_ALIGNED_ARRAY ( 64, uint8_t, above_data, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 64, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; uint8_t * const_above_row = above_data + 16 ; uint8_t * const_above_row = above_row + 16 ; uint8_t * const_above_row = above_data + 128 ; uint8_t * const_above_row = above_row + 16 ; uint8_t * const_above_row = above_data + 128 ; uint8_t * const_above_row",0
1344,"<S2SV_ModStart> ] == \'""\' ) { if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else if ( end >= pattern [ length - 1 ] ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } else { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1346,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
1347,"<S2SV_ModStart> BUG ( ) ; if (! thresholds -> primary ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } mutex_lock ( & memcg -> thresholds_lock ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; }",0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle <S2SV_ModEnd> * ion_handle_get_by_id ( <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = idr_find_next ( & client -> idr, id ) ; if (! handle ) { mutex_unlock ( & client -> lock ) ; return ERR_PTR ( - EINVAL ) ; } mutex_unlock ( & client -> lock ) ; handle = idr_find_next ( & client -> idr, id ) ; if (! handle ) { mutex_unlock ( & client -> lock ) ; return ERR_PTR ( - EINVAL ) ; } mutex_unlock ( & client -> lock ) ; handle = idr_find_next ( & client -> idr, id ) ; if ( handle ) { mutex_unlock ( & client -> lock ) ; handle = idr_find_next ( & client -> idr, id ) ; handle = idr_find_next ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; handle =",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; assert ( cm -> bit_depth > BITS_10 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; vpx_wb_write_bit ( wb, cm -> profile >= PROFILE_1 ) ; vpx_wb_write_bit ( wb, cm -> profile >= PROFILE_1 ) { assert ( cm -> profile > PROFILE_1 ) ; vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vp9_wb_write_bit ( wb, cm -> subsampling_y ) ; vpx_wb_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, cm -> profile >= PROFILE_1 ) { assert ( cm -> profile >= PROFILE_1 ) ; vp9_wb_",0
1350,"<S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-min"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-max"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-min"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-max"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-max"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, ""alt-autoscale-max"" ) ; strncpy ( col_nam, ""alt-autoscale-min"" ) ; strncpy ( col_nam, ""alt-",0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
1352,<S2SV_ModStart> ; if ( asdl_typ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd -> mb_segement_abs_delta = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd -> mode_lf_deltas, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign",0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_",0
1355,"<S2SV_ModStart> while ( ibuf [ ind ] == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; ind += 9 ; } else { gemsafe_prkeys [ i ]. ref = 0 ; } } <S2SV_ModEnd> for ( ; <S2SV_ModStart> 0x01 ) { if ( ibuf [ ind ] == 0xFE ) { if ( ibuf [ ind + 4 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; ind += 9 ; } else { gemsafe_prkeys [ i ]. ref = 0 ; } } for ( ; i < gemsafe_cert_max ; i ++ ) { if ( ibuf [ ind ] == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i",0
1356,"<S2SV_ModStart> = false ; trace_kvm_msr_write_ex ( ecx, data ) ; kvm_inject_gp ( vcpu, 0",0
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; VALUE rb_schema <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx <S2SV_ModEnd> ; schema = <S2SV_ModStart> errors ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } xmlSetStructuredErrorFunc ( NULL, NULL ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, Nokogiri_error_array_pusher, ( void * ) errors ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } xmlSetStructuredErrorFunc ( NULL,",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> au1200fb_device * fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= _CACHE_MASK ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma -> vm_start, fbdev -> fb_len, vma -> vm_page_prot ) <S2SV_ModEnd> ; } <S2SV_null>",0
1359,"<S2SV_ModStart> { if ( strlen ( config_arg ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> 2 ] ; out [ 3 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 4 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 6 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 8 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 7 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 8 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 6 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 7 * state -> xsize ) / 2,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> fanout_mutex ) ; if (! po -> running ) goto out ; err = - EBUSY ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type ==,0
1364,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> - EINVAL ; if ( len < 2 ) return - EINVAL ; if ( <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ),0
1366,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> v, i <S2SV_ModStart> 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else { for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) AV_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } }",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } rc = cib -> cmds -> set_connection_dnotify ( cib, mon_cib_connection_destroy ) ; if ( rc == - EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } rc = cib -> cmds -> set_connection_dnotify ( cib, mon_cib_connection_destroy ) ; if ( rc == - EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } rc = cib -> cmds -> set_connection_dnotify ( cib, mon_cib_connection_destroy ) ; if ( rc == - EPROTONOSUPPORT ) { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; } if ( rc == - EPROTONOSUPPORT ) { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; if ( as_console",0
1368,<S2SV_ModStart> ; } } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET ; } else { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; },0
1369,"<S2SV_ModStart> -> nicContext ; if ( ( status & KSZ8851_RXFHSR_RXFV ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) ; if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { status = ksz8851ReadReg ( interface, KSZ8851_RXFDPR ) ; ksz8851SetBit ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RX",0
1370,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> stmt_ty ast_for_funcdef_impl ( <S2SV_ModStart>, int is_async <S2SV_ModEnd> ) { identifier <S2SV_ModStart> returns, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; type_comment = NULL ; if (! type_comment ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
1372,"<S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; if ( error ) return error <S2SV_ModEnd> ; args = <S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } } else if ( strcmp ( name, ""current"" ) == 0 ) { error = aa_setprocattr_current ( args, arg_size,! AA_ONEXEC ) ; error = aa_setprocattr_current ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""current"" ) == 0 ) { error = aa_setprocattr_current ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""permhat"" ) == 0 ) { error = aa_setprocattr_changehat ( args, arg_size,! AA_ONEXEC ) ; error = aa_setprocattr_changehat ( args, arg_size,! AA_DO",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( jas_getuint16 ( in, & siz -> numcomps ) ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank>",0
1374,"<S2SV_ModStart> - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } dst_coap_msg_ptr -> token_ptr = NULL ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } dst_coap_msg_ptr -> token_ptr = sn_coap_protocol_malloc_copy ( handle, * packet_data_pptr, dst_coap_msg_ptr -> token_len ) ; if ( dst_coap_msg_ptr -> token_",0
1375,"<S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely (! iov_ok ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> ; size_t chars = PAGE_SIZE - buf -> offset ; int error, atomic ; if ( unlikely ( chars > total_len ) ) { if (! ret ) ret = - EFAULT ; break ; } error = ops -> confirm ( pipe, buf ) ; if ( error ) { if (! ret ) ret = error ; break ; } error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; <S2SV_ModEnd> redo : if <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = 0 ; }",0
1377,"<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if ( length >= 254 ) { ( void ) WriteBlobByte ( image, ( unsigned char ) length ) ; length = 0 ; } if",0
1378,"<S2SV_ModStart> ) ) ; if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; return ; } if ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"",",0
1379,"<S2SV_ModStart> ] ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> res ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } } <S2SV_ModEnd> } for ( <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res",0
1380,"<S2SV_ModStart> ; if (! jas_valid_name ( argv [ 0 ] ) ) { abort ( ) ; } cmdname = argv [ 0 ] ; infile = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break",0
1381,"<S2SV_ModStart> ) ) { if ( config_has_key ( config, name, ""LinkKey"" ) && bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } else if ( config_has_key ( config, name, ""LinkKey"" ) && bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } else { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv",0
1382,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; } # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) {",0
1383,"<S2SV_ModStart> needed ) ; if (! nl ) { dm_ioctl_set_error ( filp, - EINVAL ) ; return - EINVAL ; }",0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> vcpu_data vcpu_info ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) continue ; ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode,",0
1386,<S2SV_ModStart> bfqq ) return bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
1387,"<S2SV_ModStart> } else { return rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == 0 && rold -> smax_value == 0 && tnum_is_unknown ( rold -> var_off ) ; } case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( rold -> type!= rold -> type ) return false ; if ( rcur -> type!= rold -> type ) ) return false ; if ( rcur -> type!= rold -> type ) return false ;",0
1388,<S2SV_ModStart> handle ) { if (! handle ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if (! pointer ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if (! pointer ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if (! pointer ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if (! pointer ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if (! pointer ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; if (! pointer ) return NULL ; pointer = ( void * ) ~ ( ( size_t ) handle -> dwUpper ) ; return pointer ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1389,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ ( int ) <S2SV_ModStart> orderInfo -> orderType ] <S2SV_ModEnd> ; length +=,0
1390,<S2SV_ModStart> out ; } if ( OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) ) { if,0
1391,"<S2SV_ModStart> ; # ifdef USE_MATCH_RANGE_MUST_BE_INSIDE_SPECIFIED_RANGE const UChar * left_range = ( UChar * ) sstart ; const UChar * right_range = ( UChar * ) sprev ; # endif <S2SV_ModStart> ; # ifdef USE_MATCH_RANGE_MUST_BE_INSIDE_SPECIFIED_RANGE const UChar * right_range2 = ( UChar * ) sprev ; # endif <S2SV_ModStart> ; # ifdef USE_MATCH_RANGE_MUST_BE_INSIDE_SPECIFIED_RANGE fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d, <S2SV_blank> size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sprev, ( int ) right_range2 ) ; # endif <S2SV_ModStart> ; # ifdef USE_MATCH_RANGE_MUST_BE_INSIDE_SPECIFIED_RANGE fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s, <S2SV_blank> sprev:",0
1392,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_16X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_16X16 : # endif vp9_foreach_transformed_block_in_16x16 ( xd, bsize, visit, arg ) ; break ; case BLOCK_SIZE_8X8 : # endif vp9_foreach_transformed_block_in_16x16 ( xd, bsize, visit, arg ) ; # endif",0
1393,"<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0 ; if ( size < 0 ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\",0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_chain = NULL ;,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd <S2SV_ModEnd> ; set_offsets ( <S2SV_ModStart> mi_row, mi_col, rate, dist, bsize ) ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1396,<S2SV_ModStart> { dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) dev -> features |= ( NETIF_F_GSO | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if (,0
1397,"<S2SV_ModStart> = NULL ; if (! ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ) ) { log ( ""superblock <S2SV_blank> read <S2SV_blank> failed\\n"" ) ; return NULL ; } if ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ) * err = superblockRead ( & reader, & reader. gcol ) ; if (! ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ) ) * err = superblockRead ( & reader, & reader. superblock ) ; if (! ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ) ) { log ( ""superblock <S2SV_blank> read <S2SV_blank> failed\\n"" ) ; return NULL ; } if ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ( & reader, & reader. superblock ) ; if (! ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ) ) * err = superblockRead ( & reader, & reader. superblock ) ; if (! ( reader. superblock. flags & MYSOFA_SUPERBLOCK_READ ) ) { log (",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"",",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodes,0
1401,<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_E,0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</table>"" ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ( constr1, sizeof ( constr1 ) <S2SV_ModEnd>, ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", <S2SV_ModStart> ( constr2, sizeof ( constr2 ) <S2SV_ModEnd>, ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", <S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"", ""uniswap <S2SV_blank> remove <S2SV_blank>",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1409,"<S2SV_ModStart>, & len, NULL <S2SV_ModEnd> ) ; else <S2SV_ModStart>, & len, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> iter_op ) { struct iov_iter iter ; iter = file -> f_op -> write_iter ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs [ nr_segs ] ; if (! iter ) iter = & inline_vecs",0
1410,"<S2SV_ModStart> = ntohs ( req -> request. keylen ) ; c -> binary_header. request. bodylen = ntohl ( req -> request. bodylen ) ; c -> binary_header. request. cas = ntohll ( req -> request. cas ) ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign",0
1411,"<S2SV_ModStart> ; if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, USB_MAXINTERFACES, USB_MAXINTERFACES ) ; nintf = nintf_orig ; } if ( config -> desc. bNumInterfaces > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
1412,"<S2SV_ModStart>, err ; mutex_lock ( & card -> controls_mutex ) ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) { mutex_unlock ( & card -> controls_mutex ) ; return - ENOMEM ; } if ( info -> count > UINT_MAX / sizeof ( * ue ) ) return - EINVAL ; access = info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & SNDRV_CTL_ELEM_ACCESS_INACTIVE ) access |= SNDRV_CTL_ELEM_ACCESS_INACTIVE ; access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; if ( access & SNDRV_CTL_ELEM_ACCESS_",0
1413,"<S2SV_ModStart> { exit_client ( <S2SV_ModEnd> client_p, client_p <S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""*"" ) ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""*"" ) ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; return 0 ; } if (! strcmp ( parv [ 1 ], ""*"" ) ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; return 0",0
1414,<S2SV_ModStart> ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ^ 12 ; break ; case 0x67 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break ; # ifdef CONFIG_X86_64 if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ^ 12 ; else ctxt -> ad_bytes = def_ad_bytes ; break,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1416,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1417,"<S2SV_ModStart> 16 ) ; sse = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; }",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 3 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 4 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 5 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 6 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 7 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 8 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 9 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 10 ] = letoh16 ( temp ) ; interface -> mac",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; start [ maxlen - 1 ] = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headerindex <S2SV_ModStart> psf -> headerindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header ) <S2SV_ModEnd> ; return ;",0
1420,"<S2SV_ModStart> ) ) ; if ( ( e -> target_offset == 0 ) || ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_",0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; },0
1422,"<S2SV_ModStart> ; case EXIT_REASON_RDPMC_EXITING : return nested_cpu_has ( vmcs12, CPU_BASED_RDPMC_EXITING ) ; case EXIT_REASON_RDTSC_EXITING : return nested_cpu_has ( vmcs12, CPU_BASED_RDTSC_EXITING ) ; case EXIT_REASON_SDPMC : return nested_cpu_has ( vmcs12, CPU_BASED_SDPMC_EXITING ) ; case EXIT_REASON_SDPMC_EXITING : return nested_cpu_has ( vmcs12, CPU_BASED_SDPMC_EXITING ) ; case EXIT_REASON_SDPMC_EXITING : return nested_cpu_has ( vmcs12, CPU_BASED_SDPMC_EXITING ) ; case EXIT_REASON_SDPMC : return nested_cpu_has ( vmcs12, CPU_BASED_SDPMC_EXITING ) ; case EXIT_REASON_SDPMC : return nested_cpu_has ( vmcs12, CPU_BASED_SDPMC_EXITING ) ; case EXIT",0
1423,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode",0
1424,<S2SV_ModStart> ct_dccp_roles role ; if ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1425,<S2SV_ModStart> struct compat_timex ; txc -> modes = tx32. modes ; txc -> freq = tx32. freq ; txc -> maxerror = tx32. maxerror ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> tick = tx32. tick ; txc -> ppsfreq = tx32. ppsfreq ; txc -> jitter = tx32. jitter ; txc -> shift = tx32. shift ; txc -> stabil = tx32. stabil ; txc ->,0
1426,"<S2SV_ModStart> int ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
1427,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ;",0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * buf [ 128 ] ; char buf [ 128 ] ; char buf [ 128 ] ; s = _PyUnicode_AsString ( s ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { type = PyObject_Str ( value ) ; if ( type ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } # endif",0
1430,"<S2SV_ModStart> * input_ptr ; int is_keyframe_qaunt_set = 0 ; vpx_codec_err_t res = VPX_CODEC_OK ; svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value )",0
1431,<S2SV_ModStart> return KADM5_BAD_MASK ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry,0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; data += frame -> linesize [ plane ] ; } } else { int64_t linesize = frame -> linesize [ plane ] ; int h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; } checksum = av_adler32_update ( checksum, data, linesize ) ; }",0
1433,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql",0
1437,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( flags & SOCK_THREAD_FD_EXCEPTION ) && ( ioctl ( slot -> fd, FIONREAD, & size ) == 0 && size ) ) { pthread_mutex_unlock ( & slot_lock ) ; return ; } <S2SV_ModEnd> BTA_JvRfcommWrite ( slot <S2SV_ModStart> id ) ; } if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_RD ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> sc",0
1438,"<S2SV_ModStart> ieee_802_11_phdr phdr ; proto_tree_add_subtree ( ppi_tree, hf_ppi_header, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_tree_add_subtree ( ppi_tree, hf_ppi_header_segment, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; agg_tree = proto_tree_add_subtree ( agg_tree, hf_ppi_header_segment, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; if ( agg_tree ) { proto_tree_add_subtree ( agg_tree, hf_ppi_header_segment, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_tree_add_subtree ( seg_tree, hf_ppi_header_segment, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_tree_add_subtree ( seg_tree, hf_ppi_header_segment,",0
1439,"<S2SV_ModStart> ; sh = kcalloc ( hdrlen, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( hdrlen + initlen + 1, GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ), GFP_KERNEL ) ; if (! sh ) sh = kcalloc ( sh, sizeof ( * sh ) )",0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> a_val ; UINT32 <S2SV_ModEnd> tempWidth ; TEMP_FAILURE_RETRY <S2SV_ModStart> -> ChromaSubsamplingLevel? TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY : TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY,0
1441,"<S2SV_ModStart> + 1 ; if ( end_offset < offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni (",0
1442,"<S2SV_ModStart> nr_parens ) return ERR_PTR ( - EINVAL ) ; * ( ++ top ) = invert ; continue ; case ')' : if ( top - op_stack > nr_preds ) return ERR_PTR ( - EINVAL ) ; * ( ++ top ) = invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; case '!' : if (! is_not ( next ) ) break ; invert =! invert ; continue ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_",0
1443,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> int target = ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate ) ; } else if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / cpi -> output_framerate ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >>",0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
1446,"<S2SV_ModStart> OSPF6HDR_LEN ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK ( hellop -> hello_deadint ) ; if ( EXTRACT_32BITS ( & hellop -> hello_deadint )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Interface-ID <S2SV_blank> %s, <S2SV_blank> Priority <S2SV_blank> %u"", hellop -> hello_ifid, hellop -> hello_priority ) ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) )",0
1447,<S2SV_ModStart> ( * ( unsigned <S2SV_ModEnd> char * ) <S2SV_ModStart> return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart>. task == NULL <S2SV_ModEnd> ) printk ( <S2SV_ModStart> KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ;",0
1449,"<S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy ( ( ( ( * yyvaluep ). re_node ) ) ; } # line 1063 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
1450,<S2SV_ModStart> : idx ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const td = & cpi -> td. <S2SV_ModEnd> plane [ plane <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & td -> mb. plane [ plane ] ; MACROBLOCKD_PLANE * const pd = & td -> mb. plane [ plane ] ; MB_MODE_INFO * const mbmi = & td -> mi [ 0 ] -> mbmi ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_",0
1452,"<S2SV_ModStart> pSelect -> pSrc ; SelectTab * pTab = pSelect -> pTab ; if ( pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pTab -> nTab ; i ++ ) { struct SrcList_item * pItem = & pTab -> a [ i ] ; if ( pItem -> pTab == pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } for ( i = 0 ; i < pTab -> nTab ; i ++ ) { struct SrcList_item * pItem = & pTab -> a [ i ] ; if ( pItem -> pTab == pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } for ( i = 0 ; i < pTab -> nTab ; i ++ ) { struct SrcList_item * pItem = & pTab -> a [ i ] ; if ( pItem -> pTab == pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ;",0
1453,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &= <S2SV_ModStart> ; if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; } if ( shp -> shm_file == NULL ),0
1454,"<S2SV_ModStart> users ) ; switch ( minorversion ) { case 0 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; break ; case 1 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1459,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( ret ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d""",0
1460,"<S2SV_ModStart> = NULL ; const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> const SvcInternal * <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> { int length <S2SV_ModEnd> ; ber_parse_header ( <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; in_uint8s ( s, length ) ;",0
1463,"<S2SV_ModStart> ; } else if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_exists ( params, hkey. num, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1464,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; _y4m -> chroma_type = '4' ; _y4m -> interlace = '?' ; _y4m -> interlace = 'p' ; _y4m -> interlace = '?' ; _y4m -> interlace = 'p' ; if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } else if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank>",0
1465,"<S2SV_ModStart> obj * otmp ; if ( buf == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp == & zeroobj ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp == NULL ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } else { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( otmp == & zeroobj ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start = SQUASHFS_",0
1467,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> createenv ( const <S2SV_ModStart> -> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { char * keybuf ; size_t len ; len = strlen ( e ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * keybuf ; size_t len ; if ( len > sizeof ( keybuf ) - 1 ) continue ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { node = createnode ( keybuf, eq + 1 ) ; } }",0
1468,"<S2SV_ModStart> -> seg ; int segment ; memset ( cpi -> segmentation_map, 0, cm -> segmentation_rows * cm -> segmentation_cols ) ; memset ( cpi -> complexity_map, 0, cm -> complexity_rows * cm -> complexity_cols ) ; vp9_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; } seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; stmt_attributes = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, stmt_attributes, 4 )",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1471,<S2SV_ModStart> if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 8 ; } break ; case 0 : context -> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case 1 : context -> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case 2 : context -> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 3 : context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 4 : context -> curY += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context ->,0
1472,<S2SV_ModStart> ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
1473,"<S2SV_ModStart> ) ; } if ( sr -> tid_tree == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1474,"<S2SV_ModStart> ; if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { if ( memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) == 0 ) { memcmp ( visbuf, sizeof ( visbuf ) - 1 ) ) == 0 ) { memcmp ( visbuf, buf, sizeof ( visbuf ) - 1 ) ) == 0",0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * <S2SV_ModEnd> t, * <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> ; double * <S2SV_ModEnd> argbuf = 0 <S2SV_ModStart> = 0 ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( *",0
1476,"<S2SV_ModStart> segs ) { u32 hash, id <S2SV_ModEnd> ; net_get_random_once ( <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) <S2SV_ModEnd> ; iph ->",0
1477,"<S2SV_ModStart> expr_ty step ; <S2SV_ModEnd> if ( exists_not_none <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res ; res = obj2ast_expr ( tmp,",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1479,"<S2SV_ModStart> ; if ( getpwnam ( ctl -> pw ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { if ( radiotap_header -> it_version!= IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; if ( get_unaligned_le32 ( & radiotap_header -> it_version ) > IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; iterator -> _rtheader = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _reset_on_ext = 1 ; iterator -> current_namespace = & radiotap_ns ; iterator -> is_radiotap_ns = 1 ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof (,0
1481,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } if (! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } else { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; }",0
1482,"<S2SV_ModStart> FAILURE ; } if ( ZEND_TEST_RESOURCE ( im, gdImagePtr, & IM, - 1, ""Image"", le_gd ) == FAILURE ) { zend_raise
1483,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; } if ( stream -> config. cfg. rc_twopass_stats_in ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. g_pass = global -> passes == 2? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; } if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get (",0
1484,"<S2SV_ModStart> G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
1485,<S2SV_ModStart> data_end ) { const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm ->,0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; } cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_",0
1487,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_EINVAL ; } <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; if (! s -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_EINVAL ; } <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; if (! s -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_EINVAL ; }",0
1488,<S2SV_ModStart> count ; } kfree ( new_fpl ) ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ( opt == NULL || opt -> opt. <S2SV_ModEnd> cipso == 0,0
1490,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ;",0
1492,<S2SV_ModStart> -> wqh ) ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) { if (! capable ( CAP_SYS_RAWIO ) { if ( ctx -> clockid == CLOCK_BOOTTIME ) { ctx -> clockid = CLOCK_BO,0
1493,"<S2SV_ModStart> * child, <S2SV_ModEnd> * p ; <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; } hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; commit_tree ( child, q ) ; } unlock_mount_hash",0
1494,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; }",0
1495,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_19_64, - cospi_13_64 ) ; const __m128i k__cospi_p17_p15 = pair_set_epi16 ( cospi_17_64, - cospi_17_64 ) ; const __m128i k__cospi_p15_m17 = pair_set_epi16 ( cospi_15_64, - cospi_17_64 ) ; const __m128i k__cospi_p19_m13 = pair_set_epi16 ( cospi_19_64, - cospi_19_64 ) ; const __m128i k__cospi_p17_p15_m17 = pair_set_epi16 ( cospi_15_64, - cospi_17_64 ) ; const __m128i k__cospi_p21_p11 = pair_set_epi16 ( cospi_21_64, - cospi_11_64 ) ; const __m128i k__cos",0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart>, int output_enabled <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td. <S2SV_ModEnd> e_mbd ; MODE_INFO <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ &&",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> crypto_skcipher * tfm_des <S2SV_ModStart> tfm_des ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } crypto_skcipher_setkey ( tfm_des, key2, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; sg_init_one ( & sgout, out, 8 ) ; skcipher_request_set_callback ( req, 0, NULL, NULL ) ; rc = crypto_skcipher_encrypt ( req ) ; if ( rc ) cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> encrypt <S2SV_blank>",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> while ( 1 <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc",0
1503,<S2SV_ModStart> delta ; else { if ( i < pos && i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ; if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 0 ; } if ( vmx -> idt_vectoring_info ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info ) ; return 0 ; }",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( <S2SV_ModStart> ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_",0
1506,"<S2SV_ModStart> = 0, packet -> connection_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1507,<S2SV_ModStart> path ) ; if ( error ) { <S2SV_ModEnd> nd -> last_type,0
1508,"<S2SV_ModStart> ++ r ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim ) <= entries ) ; assert ( floor ( pow ( ( float ) r, dim )",0
1509,"<S2SV_ModStart> 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) { return MagickFalse ; } <S2SV_ModStart> dds_info, 8 ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> width - x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; q = QueueAuthenticPixels ( image, x, y, Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( i",0
1510,<S2SV_ModStart> length ) { int ret ; <S2SV_ModStart> EINTR ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f\\n"", <S2SV_ModStart> action ) ; return ;",0
1512,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> -> debug_file = fopen ( cfg -> debug_file, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( cfg -> debug_file, ""w"" ) ; if (! cfg -> manual ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""manual"" ) == 0 ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""manual"" ) == 0 ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""alwaysok"" ) == 0 ) cfg -> alwaysok = 1 ; if ( strcmp ( argv [ i ], ""cue"" ) == 0 ) cfg -> cue = 1 ; if ( strcmp ( argv [ i ], ""nodetect"" ) == 0 ) cfg -> nodetect = 1 ; if ( strncmp ( argv [ i ], ""authfile="", 9 ) == 0 ) cfg -> authfile = argv [ i ] + 9 ; if ( strncmp ( argv [ i ], ""authpending_file="", 17 ) == 0 ) cfg -> authpending_file = argv [ i ] +",0
1513,"<S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt (",0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; } else { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; }",0
1515,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 + ( mb_row % num_part ) ] ; else w = & cpi -> bc [ 1 ] ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 ] ; else w = & cpi -> bc [ 1 ] ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 ] ; else w = & cpi -> bc [ 1 ] ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ) w = & cpi -> bc [ 1 ] ; else w = & cpi -> bc [ 1 ] ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( num_part > 1 ),0
1517,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type ==",0
1518,"<S2SV_ModStart> * data ; logger ( Clipboard, Debug, ""cliprdr_process(), <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; if ( status == CLIPRDR_ERROR ) { switch ( type ) { case CLIPRDR_FORMAT_ACK : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_handle_data ( format ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, length ) ; ui_clip_request_data ( length ) ; break ; case 7 : break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> packet <S2SV_blank> type <S2SV_blank> %d"", type ) ; } }",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) break ; } } } } else { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) break ; } } } } } } } else { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type!= FORM_TEXTAREA ) { if ( l -> type,0
1521,<S2SV_ModStart> ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( tif -> tif_dir. td_bitspersample / 8 ) <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return - 1 ; _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32",0
1525,"<S2SV_ModStart> { uint16 num_updates = 0 ; uint16 left, top, right, bottom, width, height <S2SV_ModStart> ) { logger ( Protocol, Debug, ""%s()"", __func__ ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { in_uint8a ( s, & bmpdata [ ( height - y - 1 ) * ( width * Bpp ) ], width * Bpp ) ; ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; } ui_paint_bitmap ( left, top,",0
1526,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ], eob_branch_ct [ i ] [ j ] [ k ] [ l ] ) ; for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] = get_binary_prob ( coef_probs [ i ] [ j ] [ k ], coef_probs [ i ] [ j ] [ k ] [ m ] ) ; for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ]",0
1528,"<S2SV_ModStart> } ; assert ( name ) ; if ( tcgetattr ( fd, & tc ) < 0 ) return r ; SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return r ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return r ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop",0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> } ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> msleep ( 300 <S2SV_ModStart> 300 ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf [ 0 ] = 0xe ; obuf [ 1 ] = 0x83 ; obuf [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err",0
1530,"<S2SV_ModStart> iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface ->",0
1531,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, which_mv, kernel",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
1534,"<S2SV_ModStart> -> tk_status ) ; status = - task -> tk_status ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,<S2SV_ModStart> ; float * w ; w = f -> previous_window [ i ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] + f -> previous_window [ i ] [ j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; f -> previous_window [ i ] [ j ] = f -> previous_window [ i ] [ j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j <,0
1536,"<S2SV_ModStart> data_end ) { const VP9Encoder * const pbi = & pbi -> oxcf ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; if ( num_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; } else { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; } for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ;",0
1537,<S2SV_ModStart> * 0x101 ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'R' ) return ; if ( fgetc ( ifp ) < 'M' ) return ; if ( fgetc ( ifp ) < 'M' || fgetc ( ifp ) < 'M' || fgetc ( ifp,0
1538,"<S2SV_ModStart> common ; struct segment_info * seg = & cpi -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) <S2SV_ModEnd> ; RDMULT_RATIO ( <S2SV_ModStart> i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFGetField ( in, TIFFTAG_PLANARCONFIG, & shortv ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w",0
1540,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t err_detail ; err_detail = ( error -> has_detail && ctx -> base. err_detail )? ctx -> base. err_detail : NULL ; if ( err_detail ) { err_detail = ( error -> has_detail && ctx -> base. err_detail )? error -> detail : NULL ; } else { err_detail = ( error -> has_detail && ctx -> base. err_detail )? ctx -> base. err_detail : NULL ; } return err_detail ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> ( ""dotquery.bson"", BSON_VALIDATE_DOLLAR_KEYS | BSON_VALIDATE_DOT_KEYS, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart> ""dotquery.bson"", BSON_VALIDATE_DOLLAR_KEYS | BSON_VALIDATE_DOT_KEYS, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart> ""dotquery.bson"", BSON_VALIDATE_DOLLAR_KEYS | BSON_VALIDATE_DOT_KEYS, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ;",0
1543,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t <S2SV_ModEnd> * ps_prev_poc, <S2SV_ModStart> ps_cur_poc ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_sei -> u1_is_valid = 0 ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_spb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_sei -> u1_is_valid = 0 ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps",0
1544,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) {,0
1545,"<S2SV_ModStart> ssize_t ret ; if (! btpan_cb. congest_packet ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; break ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; break ; } if ( ret > ( ssize_t ) sizeof ( btpan_cb. congest_packet ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; break ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; BTIF_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0",0
1546,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> return df ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
1548,"<S2SV_ModStart> = 0 ; else { ret = - EIO ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1549,"<S2SV_ModStart> { 'S' } <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> variant_opaque ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; }",0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; } else { cpi -> common. error. setjmp = 1 ; } cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 128 ; cpi -> prob_intra_coded = 63 ; cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJOR, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1553,"<S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( (",0
1554,"<S2SV_ModStart> : ok =! <S2SV_ModStart>, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn ; break ; case EXPR_UNARY_PLUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; return false ; case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; break ; case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; return false ; case EXPR_UNARY_MINUS : log_err ( ctx, ""%s <S2SV_blank> of <S2SV_blank> boolean <S2SV_blank> values <S2SV_blank> not <S2SV_blank> permitted\\n"", expr_op_type_to_string ( expr -> expr. op ) ) ; break ; case EXPR_",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> if ( copy_from_user <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return mptctl_do_mpt_command ( <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1557,<S2SV_ModStart> Image <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1558,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return - 1 ; }",0
1559,<S2SV_ModStart> = '\\0' ; switch ( chanmode ) { case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; } break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break ; case'<S2SV_blank>': str_temp = '\\0' ; break,0
1560,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> return error ; if (! t -> owner -> certificate_check_cb ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx",0
1564,"<S2SV_ModStart> ) ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; prev -> next = NULL ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last",0
1565,"<S2SV_ModStart> ( ndo, ""\\n\\t\\n\\t\\rdnss <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t\\rdnssl <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t\\rdnss <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t\\n\\t\\rdnss <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t\\rdnssl <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t\\rdnss <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t\\n\\t\\rdnss <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\",0
1566,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; } if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; },0
1567,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table == NULL ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0",0
1568,<S2SV_ModStart> return 0 ; if ( A < 0 || A >= skb -> len ) return 0 ; <S2SV_ModStart> A ] ; if ( nla -> nla_len < A ) return 0 ; <S2SV_ModEnd> nla = nla_find_nested,0
1569,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception )",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>""",0
1571,<S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len > SC_MAX_SERIALNR ) { <S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> len > SC_MAX_SERIALNR - priv -> cac_id_len ) { if ( serial -> value > SC_MAX_SERIALNR - priv,0
1572,<S2SV_ModStart> ; tok -> type_comments = 0 ; tok -> type_comments [ 0 ] = NULL ; tok -> type_comments [ 1 ] = NULL ; tok -> type_comments [ 2 ] = NULL ; tok -> type_comments [ 3 ] = NULL ; tok -> type_comments [ 4 ] = NULL ; tok -> type_comments [ 5 ] = NULL ; tok -> type_comments [ 6 ] = NULL ; tok -> type_comments [ 7 ] = NULL ; tok -> type_comments [ 8 ] = NULL ; tok -> type_comments [ 9 ] = NULL ; tok -> type_comments [ 10 ] = NULL ; tok -> type_comments [ 11 ] = NULL ; tok -> type_comments [ 12 ] = NULL ; tok -> type_comments [ 13 ] = NULL ; tok -> type_comments [ 13 ] = NULL ; tok -> type_comments [ 13 ] = NULL ; tok -> type_comments [ 12 ] = NULL ; tok -> type_comments [ 13 ] = NULL ; tok -> type_comments [ 12 ] = NULL ; tok -> type_comments [ 13 ] = NULL ; tok -> type_comments [ 13 ] = NULL ; tok -> type_comments [ 12 ] = NULL ; tok ->,0
1573,"<S2SV_ModStart> ; } } av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config ) ; if ( av1_cfg ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; av1 -> av1_config = AV1_DuplicateConfig ( av1_cfg ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } }",0
1574,"<S2SV_ModStart> r ] = '\\0' ; if ( r < 0 ) return r ; <S2SV_ModStart> ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; if ( r < 0 ) return r ;",0
1575,"<S2SV_ModStart> maxFrameNum ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; else dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize ; i ++ ) { ALLOCATE ( dpb -> buffer [ i ]. pAllocatedData, ( picSizeInMbs * 384 + 32 + 15 ), u8 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ].",0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > OE_SS,0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( length!= 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> %"" PRIu8 """", length ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> final_p ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk )",0
1580,<S2SV_ModStart> pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; } union pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_section_hdr * pe_section_,0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_",0
1582,"<S2SV_ModStart> 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G4 ) { buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( buffer == NULL ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s""",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> new_parent ) ; old_cred = __task_cred ( child ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> command <S2SV_ModStart> private -> command ) ; } if ( rc == pcmk_ok ) { <S2SV_ModEnd> private -> callback <S2SV_ModStart> private -> callback ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CR",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> >> 3 } ; int num00 <S2SV_ModEnd>, sr = <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_",0
1587,"<S2SV_ModStart> ; if ( STREQ ( debug, ""1"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""2"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""3"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""4"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""5"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ ( debug, ""6"" ) ) h -> msglvl = 2 ; if ( STREQ (",0
1588,<S2SV_ModStart> child -> reqbody_no_files_limit ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody_access : child -> resbody_access ) ; merged -> if_limit_action = ( child -> if_limit_action == NOT_SET? parent -> if_limit_action : child -> if_limit_action ) ; merged ->,0
1589,"<S2SV_ModStart> 0 ) { memcpy ( ctl_buf, msg_compat -> msg_name, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf, msg_compat -> msg_name, sizeof ( struct cmsghdr ) ) ; <S2SV_ModStart> 0 ) { memcpy ( ctl_buf, msg_compat -> msg_name, sizeof ( struct cmsghdr ) ) ; memset ( ctl_buf, 0, sizeof ( struct cmsghdr ) ) ; } else { memcpy ( ctl_buf, msg_compat -> msg_name, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf, sizeof ( struct cmsghdr ) ) ; }",0
1590,"<S2SV_ModStart>, one_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; size_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError,",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,"<S2SV_ModStart> cib_client_t * client = ( cib_client_t * ) gpointer_to_ptr ( user_data ) ; if ( client == NULL ) { return ; } <S2SV_ModEnd> crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"" <S2SV_ModStart> num_clients ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; free ( client ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; g_object_unref ( & client -> g_object ) ; free ( client ) ;",0
1594,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { thread -> twups = NULL ; } else { UpVal * uv ; if ( uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
