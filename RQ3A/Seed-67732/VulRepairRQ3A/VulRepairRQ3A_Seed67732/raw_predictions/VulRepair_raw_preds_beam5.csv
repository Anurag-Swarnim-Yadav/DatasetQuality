,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } <S2SV_ModEnd> nonce1 = json_object_get <S2SV_ModStart> ""nonce1"" ) ; nonce1 = json_object_get ( val, ""nonce2"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; if (! nonce1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK ( * tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values",0
2,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out <S2SV_ModEnd> ; } mutex_unlock,0
3,"<S2SV_ModStart> ; if ( copy_to_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> unfrag_ip6hlen ) ; if ( unlikely ( unfrag_ip6hlen > frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( i >= index -> item_count ) { av_log ( mov -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ++ ) { if ( i >= index -> item_count ) { av_log ( mov -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpg = kzalloc ( sizeof ( * tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> ) { u32 <S2SV_ModEnd> data ; void <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_PAGE_READ, & vcpu -> arch. apic -> vapic_flags ) ) return ; <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! vapic ) return ;",0
9,<S2SV_ModStart> src ) ; if ( src -> state == TASK_UNINTERRUPTIBLE ) { clear_task_ebb ( dst ) ; return 0 ; },0
10,<S2SV_ModStart> item ) { if ( item < 0 ) { return NULL ; } <S2SV_ModStart> -> child ; <S2SV_ModEnd> while ( c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s",0
12,<S2SV_ModStart> segs = ERR_PTR <S2SV_ModEnd> ( - EINVAL,0
13,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart> ) ; do_perf_sw_event <S2SV_ModEnd> ( PERF_TYPE_SOFTWARE, <S2SV_ModStart>, & data, NULL <S2SV_ModEnd> ) ; perf_swevent_put_recursion_context",0
14,"<S2SV_ModStart> ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> struct grub_ext4_extent * <S2SV_ModStart> i ]. start ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> i ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> ext = ( <S2SV_ModStart>. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ].",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t step1 [ 8 ] ; tran_high_t step2 [ 8 ] ; tran_high_t step3 [ 8 ] ; tran_high_t input [ 8 ] ; tran_high_t input [ 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 10 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 0 ] + in [ 8 ] ; step1 [ 0 ] = in [ 7 ] + in [ 8 ] ; step1 [ 1 ] = in [ 0 ] + in [ 13 ] ; step1 [ 2 ]",0
16,<S2SV_ModStart> env ) ; kfree ( env -> insn_aux_data ) ; <S2SV_ModStart> env ) ; err_free_env : mutex_unlock ( & bpf_verifier_lock ) ;,0
17,"<S2SV_ModStart> -> num_channels ; uint32_t <S2SV_ModEnd> i ; wpc <S2SV_ModStart> num_chans ; } # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) if ( config -> sample_rate % sample_rates [ i ] == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { wpc -> dsd_multiplier = divisor ; break ; } } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> available <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = config -> xmode ; wpc -> dsd_multiplier =",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_device_online ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if ( retries ++ < 10 ) goto retry ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive",0
19,<S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int <S2SV_ModEnd> max_filter_level = get_max_filter_level <S2SV_ModStart> ( cpi ) ; VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_err",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> rng_alg -> cra_rng <S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> rng_alg -> cra_rng,0
24,<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (,1
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_FAILURE ) ; } } if ( ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid,",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ptr, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 4 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
29,<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; <S2SV_ModStart> intf ) ; if ( intf2 -> desc. bNumInterfaces < 1 ) return - ENODEV ; if ( intf2 -> desc. bNumInterfaces > 1 ) return - ENODEV ; if ( intf -> desc. bNumInterfaces < 1 || intf2 -> desc. bNumInterfaces > 1 ) return - ENODEV ; if ( intf2 -> desc. bNumInterfaces > 1 ) return - ENODEV ; if ( intf2 -> desc. bNumInterfaces > 1 ) return - ENODEV ; if ( intf2 -> desc. bNumInterfaces < 1 ) return - ENODEV ; <S2SV_ModStart> -> desc. bNumInterfaces = intf2 -> desc. bNumInterfaces ; if ( intf2 -> desc. bNumInterfaces > 1 ) return - ENODEV ; if ( intf2 -> desc. bNumInterfaces > 1 ) return - ENODEV ; if ( intf2 -> desc. bNumInterfaces,0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart>, int fromlen, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> to ) { struct pathComponent * pc ; int elen = 0 ; unsigned char * p = NULL ; <S2SV_ModStart> case 2 : pc = ( struct pathComponent * ) ( from + fromlen ) ; switch ( pc -> componentType ) { case 3 : pc = ( struct pathComponent * ) ( from + elen ) ; p += 3 ; break ; case 4 : pc = ( struct pathComponent * ) ( from + elen ) ; break ; case 5 : p = to ; * p ++ = '/' ; break ; case 6 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 7 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent",0
31,"<S2SV_ModStart> = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> port"" ; goto loaderr ; } <S2SV_ModStart> = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> port"" ; goto loaderr ; }",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> ; if (! dev -> interface ) { dev_err ( idev, ""tower <S2SV_blank> interface <S2SV_blank> not <S2SV_blank> found\\n"" ) ; retval = - ENODEV ; goto error ; } if ( dev -> interface -> desc. bNumEndpoints < 1 ||! dev -> interface -> cur_altsetting -> desc. bNumEndpoints ) { dev_err ( idev, ""tower <S2SV_blank> interface <S2SV_blank> has <S2SV_blank> no <S2SV_blank> endpoints\\n"" ) ; goto error ; } dev -> interface -> desc. bNumEndpoints = 1 ; if ( usb_endpoint_dir_in ( endpoint ) ) dev -> interrupt_in_endpoint = NULL ; dev -> interrupt_in_done = 0 ; dev -> interrupt_out_urb = NULL ; dev -> interrupt_out_busy = 0 ; dev -> interface -> cur_altsetting = interface -> cur_altsetting ; for ( i = 0 ; i < iface_desc -> desc. bNumEndpoints ; ++ i ) { if ( usb_endpoint_dir_in ( endpoint ) ) dev -> interrupt_in_endpoint = endpoint ; dev -> interrupt_in_endpoint = NULL ; dev -> interrupt_out_endpoint = NULL ; dev -> interrupt_out_urb",0
34,"<S2SV_ModStart> ( sdb, ""version_info"", ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ] ) ; if (! sdb ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { link_section_name = & bin -> shstrtab [ link_shdr -> sh_name ] ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; goto out ; } <S2SV_ModStart> dest_keyring ) ; out :,0
36,<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) { ret = GSS_S_FAILURE ; goto cleanup ; },0
37,<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) return - EINVAL ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart>!= AF_INET ) return <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( inet -> inet_state!= TCP_CLOSE || sk -> sk_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && addr -> l2tp_addr. s_addr && addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST && chk_addr_ret!= RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
39,"<S2SV_ModStart> ( dialog ), gtk_button ( GTK_DIALOG ( dialog ), gtk_button ( <S2SV_ModStart> ( dialog ), gtk_button ( GTK_DIALOG ( dialog ), gtk_button ( GTK_DIALOG ( dialog ), <S2SV_ModStart> ( dialog ), gtk_button ( GTK_DIALOG ( dialog ), gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button ( gtk_button",0
40,<S2SV_ModStart> = localtime ( <S2SV_ModEnd> t ) ;,0
41,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_internal_state * state = d -> priv ; struct dvb_usb_device * dev = adap -> priv ; struct dvb_usb_device_info * info = & adap -> info ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d",0
43,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; }",0
44,<S2SV_ModStart> ; if ( last_timestamp_in_data < 0 || last_timestamp_in_data > UINT32_MAX - google_timestamp ) { ret = 500 ; break ; },0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein < 0 || scanlinesizeout < 0 ) { TIFFError ( TIFFFileName ( in ), ""MemoryAllocationFailed"" ) ; goto bad ; }",0
47,"<S2SV_ModStart> ) ; struct <S2SV_ModEnd> address_space * mapping <S2SV_ModStart> hugetlb_lock ) ; if ( PageSwapCache ( page ) ) hugetlb_put_quota ( mapping, 1 ) ;",0
48,"<S2SV_ModStart> pts_flag ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> pts_flag ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,<S2SV_ModStart> if (! e ) { * errnop = ENOMEM ; return NSS_STATUS_NOMEM ; },0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return get_page ( buf ->,0
51,"<S2SV_ModStart> ep2 ) ; if ( ep2 ) ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> ep2=%u <S2SV_blank> "", tcount, ep2 ) ) ;",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if ( select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) < 0 ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; }",0
54,<S2SV_ModStart> wp -> config <S2SV_ModEnd> -> pm_max_requests ;,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int detect_transition_to_still ( TWO_PASS * twopass, const FIRSTPASS_STATS * stats, int frame_interval, int still_interval, double loop_decay_rate, double last_decay_rate ) { int trans_to_still = 0 ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { return 0 ; } if ( frame_interval < MIN_GF_INTERVAL && still_interval >= MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int trans_to_still = 1 ; if ( stats -> <S2SV_ModEnd> pcnt_inter - tmp_next_frame <S2SV_ModStart> pcnt_inter - tmp_next_frame. pcnt_motion <S2SV_ModEnd> < 0.999 ) <S2SV_ModStart> break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags ) ; handle -> h_transaction = NULL ; } else { err = <S2SV_ModStart> handle ) ; handle -> h_err = err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err? handle -> h_err : 0 ; handle -> h_err = 0 <S2SV_ModEnd> ; rc = <S2SV_ModStart> handle ) ; if (! err ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags & JBD2_JOURNAL_ERR ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags & JBD2_JOURNAL_ERR ) ; handle -> h_err = err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) __ext4_std_error,0
57,"<S2SV_ModStart> ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) )",0
59,"<S2SV_ModStart> ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
60,"<S2SV_ModStart> stlv_len ) { ND_TCHECK2 ( * tptr, 2 ) ; <S2SV_ModStart> stlv_len ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_TCHECK2 ( <S2SV_ModStart> ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; trunc : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
61,"<S2SV_ModStart> ) { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 || ( flags & ( TH_SYN | TH_ACK ) ) == TH_ACK ) ) return 0 ; if (,0
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd ; lxc_attach_options_t * options = payload -> options ; struct lxc_proc_context_info * init_ctx = payload -> init_ctx ; long new_uid ; gid_t new_gid ; long flags ; long new_uid ; long new_gid ; long old_gid ; long old_gid ; long old_uid ; long old_gid ; long old_gid ; old_gid = 0 ; new_uid = 0 ; new_gid = 0 ; old_uid = 0 ; old_gid = 0 ; old_gid = 0 ; old_uid = 0 ; old_gid = 0 ; old_gid = 0 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( options -> attach_flags & LXC_AT",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( len > strlen ( line ) - 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( len > strlen ( line ) - 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( len > strlen ( line ) - 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( len > strlen ( line ) - 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( len < 1 ) { giterr_set ( GITERR",0
66,"<S2SV_ModStart> ; if ( header -> biSize < 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } if (",0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } memset ( & line, 0, sizeof ( line ) ) ;",0
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd <S2SV_ModEnd>, cmd,",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ; <S2SV_ModStart> - EFAULT ; ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ;",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> ; den = avio_tell ( pb ) ; den += avio_read_varlen ( pb ) ; if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; }",0
76,"<S2SV_ModStart> = NULL ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = NULL ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = NULL ; if (! mxf_tc ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""no <S2SV_blank> timecode <S2SV_blank> component <S2SV_blank> found\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR (",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf -> fileoffset = 0 ;",0
79,"<S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len == 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } <S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len == 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; }",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,<S2SV_ModStart> ; if (! rta ||! xfrm_replay_state_esn_len ( up ) ||! xfrm_replay_state_esn_len ( up ) <S2SV_ModStart> - ENOMEM ; if (! xfrm_replay_state_esn_ok ( up ) ) { kfree ( p ) ; return - EINVAL ; } <S2SV_ModStart> - ENOMEM ; },0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) (,0
84,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,"<S2SV_ModStart> ( buf = jas_calloc <S2SV_ModEnd> ( bufsize,",0
86,<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * <S2SV_ModEnd> map ; if <S2SV_ModStart> = iface -> <S2SV_ModEnd> cfg_maps ; map,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; int ext_index_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else if ( ext_index_add_object ( object, name ) ) { free ( name ) ; } <S2SV_ModEnd> } bitmap_set (",0
89,<S2SV_ModStart> : if ( c == KEY_PULSE ) { if ( dtr_up ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr ( tty_fd ) ; if ( r >= 0 ) r = term_lower_dtr ( tty_fd ) ; else r = term_raise_dtr (,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> lock ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> lock ) ;,0
91,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_fanout * <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> return - EALREADY <S2SV_ModEnd> ; switch ( <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if ( po <S2SV_ModStart> - EALREADY ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> -> num, 0 <S2SV_ModEnd> ) ; atomic_long_set <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> po -> rollover <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> } mutex_lock (",0
92,"<S2SV_ModStart> newsk ) ; if ( np ) { memcpy ( newnp, np, sizeof ( struct ipv6_pinfo ) ) ; rcu_read_lock ( ) ; opt = ipv6_dup_options ( np -> opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; }",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> ; if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } <S2SV_ModStart> fields ) ; if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } <S2SV_ModStart> fields ) ; if ( imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if (",0
99,"<S2SV_ModStart> path ) ; ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN <S2SV_ModEnd> ) ; goto <S2SV_ModStart> } if ( ( flags & EXT4_GET_BLOCKS_PRE_IO ) == 0 ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( ret < 0 ) { err = ret ; goto out2 ; } } if ( ( flags & EXT4_GET_BLOCKS_CONVERT ) == 0 ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret < 0 ) { err = ret ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) ==",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } <S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; }",0
101,"<S2SV_ModStart>! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFREG | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( fc_may_access ( fc, controller, cgroup, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (",0
102,"<S2SV_ModStart> flag ) { const int mb_rows = source -> y_width >> 4 ; const int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) low_var_thresh ; ( void ) flag ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vpx_post_proc_down_and_across_mb",0
103,<S2SV_ModStart> ) ) { if (! ptr -> next ) return - EINVAL ;,0
104,"<S2SV_ModStart>!= old -> uid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { new -> euid = new -> uid ; } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> fsgid ; } new -> securebits &= ~ issecure_mask ( bprm ) ; if (! issecure ( SECURE_NOROOT ) ) { if (! capable ( CAP_FULL_SET ) ) { if (! capable ( CAP_FULL_SET ) ) { if (! capable ( CAP_FULL_SET ) ) { if (! capable ( CAP_FULL_SET ) ) { if (! capable ( CAP_SETGID ) ) { if (! capable ( CAP_SETGID ) ) { if (! capable ( CAP_SETGID ) ) { if (! capable ( CAP_SETGID",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> bh -> b_blocknr, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""already <S2SV_blank> in <S2SV_blank> cache"" <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> return ; } <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ; return r_socket_http_answer <S2SV_ModEnd> ( s,",0
107,<S2SV_ModStart> c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ;,0
108,<S2SV_ModStart> ; int err ; sock -> state = SS_UNCONNECTED,0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
110,"<S2SV_ModStart> ; dl = kmalloc <S2SV_ModEnd> ( size,",0
111,"<S2SV_ModStart> ; trunc : if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_type, pdu_len ) ) ; break ; case RPKI_RTR_END_OF_DATA_PDU : msg = ( const u_char * ) ( pdu_header + 1 ) ; ND_PRINT ( (",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned char * data ; <S2SV_ModStart> = NULL ; data = skb -> data ; len = skb -> len <S2SV_ModEnd> ; len += <S2SV_ModStart> 1 ; if ( len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } data [ len ] = 0x00 ; data [ len + 4 ] = 0x00 ; data [ len + 4 ] = 0x00 ; data [ len + 4 ] = 0x00 ; len += ( ( ( skb -> data [ 3 ] >> 4 ) & 0x0F ) + 1 ) >> 1 ; if ( len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) ; } else { if ( ( * varp == NULL ) || ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = e_invarg ; } else { if ( ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp == NULL ) || ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = e_invarg ; } else { if ( ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; } else if ( ( * varp == NULL ) || ( * varp == ( char_u * ) ""/\\\\*?[|<>"" ) == NULL ) { errmsg = e_invarg",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = to_o2nm_cluster ( node -> nd_parent ) <S2SV_ModEnd> ; int ret <S2SV_ModStart> ) ; } if (! node -> nd_ipv4_address ) return - ENOMEM <S2SV_ModEnd> ; write_lock ( <S2SV_ModStart> cl_nodes_lock ) ; if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, parent, p ) ; rb_insert_color ( & node -> nd_ip_node, & cluster -> cl_node_ip_tree ) ; }",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if ( strlen ( p ) + length > caplen ) { ND_PRINT ( ( ndo, ""[|isoclns]"" ) ) ; return ( NULL_HDRLEN ) ; }",0
119,"<S2SV_ModStart> separator = * src ++ ; if ( dest == a -> name ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return ( ARCHIVE_FAILED ) ; }",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context, TPM_ALG_HASH hashAlg, UINT8 * key, char * label, char * contextU, UINT16 bits, TPM2B_MAX_BUFFER * resultKey ) { UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * )",0
121,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & cps ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! jas_",0
122,<S2SV_ModStart> s ) { assert ( s > 0 ) ;,0
123,"<S2SV_ModStart> ; if ( unlikely (! access_ok ( VERIFY_WRITE, data, count ) ) ) { ret = - EFAULT ; goto bail ; } if (",0
124,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
125,<S2SV_ModStart> peer ) get_net ( peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;,0
126,"<S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_len ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content",0
127,"<S2SV_ModStart> ; if (! POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype )",0
128,<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] > datalen ) || ( pc + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) || ( dp + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error ;,0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> assocparams, 0, sizeof ( struct sctp_assocparams ) ) ;",0
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb, GetBitContext * gb ) { if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; } } <S2SV_ModEnd> return 0 ;",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; unsigned short wTail ; <S2SV_ModStart> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) writew ( 0,",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.source <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> return;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n""",0
136,"<S2SV_ModStart> * acl_len, u32 * <S2SV_ModStart> int status ; <S2SV_ModEnd> struct kvec * <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( xdr, acl_len, & savep ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( savep [ 0 ] & FATTR4_WORD0_ACL - 1U ) ) ) return - EIO ; xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; }",0
137,<S2SV_ModStart> segs = ERR_PTR <S2SV_ModEnd> ( - EINVAL,0
138,<S2SV_ModStart> while ( ( ( <S2SV_ModStart> ]!= 0 ) && ( i < to_read ),0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> AVPALETTE_SIZE ) ; if ( in -> data [ plane ] < AVPALETTE_SIZE ) { av_frame_free ( & in ) ; return AVERROR ( EINVAL ) ; },0
141,"<S2SV_ModStart> '/' ) { strncpy <S2SV_ModEnd> ( szFileName, <S2SV_ModStart> pszFileName ) ; } else { snprintf ( szFileName, sizeof ( szFileName ) - 5 <S2SV_ModEnd>, ""%s/%s"",",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = userToID ( owner ) ; } } if ( perms && snumber ( perms ) ) { if ( snumber ( perms ) ) { if ( snumber ( perms ) ) { gid = ( int ) stoiradix ( perms, - 1, NULL ) ; } } else { mode = 0 ; } }",0
143,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; goto out ; } q = CAST ( cdf_property_info_t *, malloc ( q ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; return - 1 ; } q = CAST ( cdf_property_info_t *, malloc ( q ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; goto out ; } q =",0
144,"<S2SV_ModStart> ; if ( inet -> inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> eigrp_tlv_len ) ; if ( tlen < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( tlen < eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too",0
147,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr == NULL ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; } <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr == NULL ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) }",0
148,<S2SV_ModStart> int res ; <S2SV_ModEnd> int indexes = <S2SV_ModStart> inodes ) ; long long * export_index_table = malloc ( <S2SV_ModEnd> SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
149,"<S2SV_ModStart> } ptr = strrchr <S2SV_ModEnd> ( ptr + <S2SV_ModStart> 1, '/' ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
152,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;,0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0, planar = 0 ; uint16 bps = 0, spp = 0 ; uint16 orientation = 0 ; uint16 input_photometric = 0 ; uint16 subsampling_horiz = 0, subsampling_vert = 0 ; uint16 orientation = 0 ; uint16 input_compression = 0 ; uint16 input_photometric = 0 ; uint16 input_photometric = 0 ; TIFFGetFieldDefaulted ( in, TIFFTAG_PLANARCONFIG, & planar ) ; if (! TIFFGetField ( in, TIFFTAG_COMPRESSION, & input_compression ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> compression <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP9_ENCODER if ( global -> codec -> codec_type == VPX_CODEC_TYPE_2 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vpx"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vpx"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vpx"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vpx"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if (",0
155,"<S2SV_ModStart> ; if ( ( r = sshbuf_get_string ( resp ) ) == NULL ) fatal ( ""%s: <S2SV_blank> sshbuf_get_string: <S2SV_blank> %s"", __func__, r ) ;",0
156,<S2SV_ModStart> = & l2tp_eth_netdev_ops ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( gr -> gr_ctx. value, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> err = 0 ; struct ext4_extent_header * neh2 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_super_block * es1 = EXT4_SB ( inode -> i_sb ) -> s_es ; if ( ei -> i_flags & EXT4_INDEX_BLOCKS_VALIDATED ) { flags |= EXT4_MB_HINT_TRY_GOAL ; goal = ext4_idx_pblock ( EXT_FIRST_INDEX ( EXT_I ( inode ) ) ) ; } else { goal = EXT4_I ( inode ) -> i_first_data_block ; } neh2 = ext_block_hdr ( bh ) ; neh = ext4_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh2 -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh2",0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;",0
161,<S2SV_ModStart> ; int ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
162,"<S2SV_ModStart> ( memcmp ( cmac <S2SV_ModEnd>, computed_cmac,",0
163,"<S2SV_ModStart> ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get (",0
165,<S2SV_ModStart> ts_status ; bool <S2SV_ModEnd> is_drop_n_account = false <S2SV_ModStart> is_drop_n_account = true ; if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUM_VALID ;,0
166,"<S2SV_ModStart> sctp_ssnmap_clear ( & trans -> ssnmap ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; continue ; }",0
167,<S2SV_ModStart> return false ; if ( len > NDP_MSG_MAX_PACKET_SIZE ) return false ;,0
168,"<S2SV_ModStart> int on_exec, const char * lsm_label, size_t lsm_label_size <S2SV_ModStart> ( name, lsm_label_size <S2SV_ModEnd> ) { int <S2SV_ModStart> ( name, <S2SV_ModEnd> ""nop"" ) == <S2SV_ModStart> ( name, <S2SV_ModEnd> ""none"" ) == <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } } else { if ( write ( labelfd, lsm_label, strlen (",0
169,<S2SV_ModStart> ) ) { if ( ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,<S2SV_ModStart> ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; } <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> flag |= LQL_NOT ; hasnot = true ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem )",0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry * * pce <S2SV_ModEnd> ) { __u32 <S2SV_ModStart> hash ) ; struct mb2_cache_entry * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode -> i_sb ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) hash ) ; if (! mb2_cache_entry_exists ( ext4_mb_cache, hash ) ) { return NULL ; } <S2SV_ModEnd> while ( ce <S2SV_ModStart> bh ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> ( wth -> frame_buffer <S2SV_ModEnd>, err, <S2SV_ModStart> FALSE ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer <S2SV_ModEnd>, err,",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,<S2SV_ModStart> left > 0 && <S2SV_ModEnd> n > left,0
177,"<S2SV_ModStart> Rec. RecordLength ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
178,"<S2SV_ModStart> - ENOMEM ; ret = - EINVAL ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; }",0
179,"<S2SV_ModStart> int hstartcol ; register jpc_fix_t * buf2 ; jpc_fix_t * srcptr ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } if ( numrows >= 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ]",0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ReadBlobLSBShort ( image, <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> ReadBlobLSBShort ( image, <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> ReadBlobLSBShort ( image, <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> ReadBlobLSBShort ( image, <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> ReadBlobLSBShort ( image, <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> ReadBlobLSBShort ( image, <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = ( MagickStatusType ) ReadBlobByte ( image ) ; image",0
182,<S2SV_ModStart> ) ; ext2_xattr_put_super <S2SV_ModEnd> ( sb ),0
183,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> more <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> us <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_devs ; }",0
184,"<S2SV_ModStart> ( len > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; }",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( <S2SV_ModEnd> node -> nd_item <S2SV_ModStart> nd_item. ci_parent ) ; } return NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> ) ; nfs_set_open_stateid_locked <S2SV_ModEnd> ( state, <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, open_flags )",0
187,"<S2SV_ModStart> ; avpriv_set_pts_info ( vst, 64, 1, 15 ) ; ast -> codecpar -> format = AV_PIX_FMT_ARGB ; ast -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_AR",0
188,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; goto out ; } q = CAST ( cdf_property_info_t *, malloc ( q ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; return - 1 ; } q = CAST ( cdf_property_info_t *, malloc ( q ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; goto out ; } q =",0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, ""loopstats"", & loopstats ) ; filegen_register ( statsdir, ""rawstats"", & rawstats ) ; filegen_register ( statsdir, ""sysstats"", & sysstats ) ; <S2SV_ModStart> ( statsdir, ""cryptostats"", & cryptostats ) ; filegen_register ( statsdir, ""timingstats"", & timingstats ) ; <S2SV_ModEnd> step_callback = &",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> fd = xfmkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
191,"<S2SV_ModStart> prev ) ; attach_shadowed <S2SV_ModEnd> ( mnt,",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( <S2SV_ModStart> ) ) loadsegment <S2SV_ModEnd> ( es, <S2SV_ModStart> ) ) loadsegment <S2SV_ModEnd> ( ds, <S2SV_ModStart> ( es, next -> es ) ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next, cpu ) ; arch_start_context_switch ( next_p ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; switch_fpu_finish ( prev_p,",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> ) | ( 1u <S2SV_ModEnd> << BP_VECTOR ),0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; if ( strlen ( sfsname ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> name: <S2SV_blank> %s\\n"", sfsname ) ) ; return ; } <S2SV_ModStart> NFSX_V3FHMAX ) ; if ( strlen ( temp ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> name: <S2SV_blank> %s\\n"", temp ) ) ; return ; } if ( strlen ( temp ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> name: <S2SV_blank> %s\\n"", temp ) ) ; return ; } if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; }",0
197,"<S2SV_ModStart>, int transhdrlen, unsigned int flags, struct frag_hdr fhdr <S2SV_ModStart> = SKB_GSO_UDP ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ;",0
198,<S2SV_ModStart> res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> return res ; hsr_dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; netif_carrier_on ( hsr_dev ) ; hsr_dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
199,"<S2SV_ModStart> = 0 ; if ( narg == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; continue ; }",0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> uint8_t * const buffers <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> v_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> stable ) ) return 0 ; <S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> len ) ) return 0 ;",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ctxt, ulong eip <S2SV_ModEnd> ) { switch <S2SV_ModStart> ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining ( tvb, offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; else g_free ( text ) ;",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) { ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_get_block, NULL, 0 ) ; } else { get_block = ocfs2_dio_get_block ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
208,"<S2SV_ModStart> + 1 ) ; if ( ( int ) val < 0 ) { write_mmcr0 ( cpuhw, cpuhw -> mmcr [ 0 ] ) ; nmi_exit ( ) ; return ; } <S2SV_ModEnd> write_mmcr0 ( cpuhw",0
209,<S2SV_ModStart> = len ; * nl = 0 ;,0
210,"<S2SV_ModStart> n ) { PyObject * o <S2SV_ModEnd> ; int kind <S2SV_ModStart> ; int all_whitespace <S2SV_ModEnd> = 1 ; <S2SV_ModStart> expr_end == ':' ) { Py_ssize_t len ; Py_ssize_t i ; assert ( expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - 1 ) == '}' || * expr_end == '!' || * expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_KIND ( o ), data, i ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len )",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { if (! cJSON_strcasecmp ( c -> string, string ) ) return NULL",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> len ) ; if ( ( plen <= * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; }",0
215,"<S2SV_ModStart> ) ) ; if ( retval ) { xfs_trans_log_buf ( context -> trans, bp, XFS_ERROR ( EFSCORRUPTED, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_",0
216,"<S2SV_ModStart> - EINVAL ; if ( vlen < sizeof ( struct mmsghdr ) ) return - EINVAL ; <S2SV_ModStart> NULL ) ; if ( get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; netif_stop_queue ( ndev ) ; <S2SV_ModStart> ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; return ( netdev_tx_t ) ret ; } <S2SV_ModEnd> return ( netdev_tx_t",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL",0
221,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { int found = 0 ; char * user_config = NULL ; char * repo_config = NULL ; char * home = NULL ; if ( perf_config_system ( ) &&! access ( perf_etc_perfconfig ( ), R_OK ) ) { ret += perf_config_from_file ( fn, perf_etc_perfconfig ( ), data ) ; found += 1 ; } home = getenv ( ""HOME"" ) ; if ( home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; } <S2SV_ModEnd> free ( repo_config",0
224,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> validate_event ( struct <S2SV_ModStart> event ) { <S2SV_ModEnd> struct hw_perf_event fake_event <S2SV_ModStart> return 1 ; <S2SV_ModEnd> return armpmu -> <S2SV_ModStart> ( hw_events, <S2SV_ModEnd> & fake_event ) <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { if ( new_map -> nr_extents == 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; } else if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) ) return true ; if ( ns_capable ( user_ns -> user_ns, cap_setid ) )",0
226,"<S2SV_ModStart> ++ ) { if ( j >= 0 && j < a -> num_values - 1 ) { if ( j >= 0 && j < a -> num_values - 1 ) { XMFREE ( VarLenData, 1 ) ; body [ j ] = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; } else { body [ j ] = CHECKED_XCALLOC ( unsigned char, 1 ) ; } body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; } else { body [ j ] = CHECKED_XCALLOC ( unsigned char, 1 ) ; } body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j",0
227,"<S2SV_ModStart> * hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> pos = 0 <S2SV_ModEnd> ; hx = <S2SV_ModStart> ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart>, GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; ret = - EIO ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EINVAL ; } } else { ret = - EIO ; kfree ( hx ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ptr ++ ; length -= 2 ; length -= 2 ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; length -= 2 ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return",0
229,"<S2SV_ModStart> princ ) ; if ( handle -> params. realm && strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 ) { krb5_klog_syslog ( LOG_ERR, _ ( ""check_rpcsec_auth: <S2SV_blank> realm=%s, <S2SV_blank> length=%u"" ), handle -> params. realm, realm -> length ) ; log_badauth ( maj_stat, min_stat, rqstp -> rq_xprt, NULL ) ; goto fail_princ ; }",0
230,"<S2SV_ModStart> * bo ; uint32_t uniforms_size = 0 ; uint32_t bin_size = args -> bin_cl_size ; uint32_t bin_offset = args -> bin_cl_offset ; uint32_t shader_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t uniforms_offset = roundup ( uniforms_offset + args -> uniforms_size, 16 ) ; if ( temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } bin = exec + bin_offset ; exec -> shader_rec_u = temp + bin_size ; exec -> uniforms_u = temp + uniforms_offset ; exec -> shader_state = temp + exec_size ; exec -> shader_state_size = temp_size ; exec -> shader_state_size = temp_size ; exec -> shader_state_size = temp_size ; exec -> shader_state_size = temp_size ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H && HAVE_LIBLZMA <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
232,<S2SV_ModStart> -> i_sb ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block_write ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> * arg ) { if ( * arg == '\\n' ) { * b ++ = '\\n' ; break ; } <S2SV_ModStart> case '\\n' : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> default : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> break ; default : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> break ; default : <S2SV_ModEnd> * b ++,0
235,"<S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_pl_t ) <S2SV_ModEnd> ) ) ;",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection(GIOChannel*source, GIOCondition, GsmIceConnectionData*)"" ) ; if (! ice_conn ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> ice_connection(GIOChannel*source, GIOCondition, GsmIceConnectionData*)"" ) ; return FALSE ; } <S2SV_ModEnd> client = gsm_xsmp_client_new <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> server -> priv",0
237,<S2SV_ModStart> ; if ( unlikely ( skb_cloned ( skb ) ) ) goto out ;,0
238,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ;",0
239,"<S2SV_ModStart> ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_ACCEPTCONN : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEP",0
240,<S2SV_ModStart> { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> ) ; } <S2SV_ModEnd> return err ;,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> src -> y_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for",0
243,"<S2SV_ModStart> ; char buf [ DN_BUF_LEN <S2SV_ModEnd> ] ; unsigned <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx,",0
244,"<S2SV_ModStart> out_free ; } kvm_put_memory_region ( kvm, mem ) ; kvm_put_memory_region ( kvm, mem ) ;",0
245,"<S2SV_ModStart> 0 ; } if ( info. status == 0 ) { if ( ru ) copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ; return - EFAULT ; }",0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0,0
247,"<S2SV_ModStart> ni ; register <S2SV_ModEnd> u_int amt ; <S2SV_ModStart> case RIP6_REQUEST : <S2SV_ModEnd> if ( j <S2SV_ModStart> == 1 && <S2SV_ModEnd> rp -> rip6_nets <S2SV_ModStart> -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> && IN6_IS_ADDR_UNSPECIFIED <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_RESPONSE : <S2SV_ModEnd> j = length <S2SV_ModStart> ni ) ; if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-resp <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_VFLAG : if",0
248,<S2SV_ModStart> ( ret < 0 ) { abort_creds ( new ) ; return ret ; } <S2SV_ModEnd> goto set ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,<S2SV_ModStart> bprm -> interp = iname ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ;,0
251,<S2SV_ModStart> = 0.0 ; register int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; if ( iLeft + 1 > windows_size ) { iLeft ++ ; } else { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] <S2SV_ModEnd> = scale_f_d * <S2SV_ModStart> pFilter ) ( <S2SV_ModEnd> dCenter - (,0
252,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
253,"<S2SV_ModStart>!= 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; }",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if (! mobj ) return NULL ; <S2SV_ModStart> mobj ) ; if (! mobj_get_va ( mobj, 0 ) ) return NULL ;",0
256,<S2SV_ModStart> += incr ; timer -> it_overrun += 1 << i ; delta -= incr ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (!",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * const cm, const MACROBLOCKD * const xd, const MODE_INFO * const mi, vpx_writer * w, const MODE_INFO * * above_mi, const MODE_INFO * const above_mi, const MODE_INFO * const above_mi, const MODE_INFO * const left_mi, const MODE_INFO * const left_mi ) { const MODE_INFO * const mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; if ( r -> iov. iov_len < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. tag ) ; return ; } n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; }",0
262,"<S2SV_ModStart> err ; } if ( cs < 0 || cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } if ( <S2SV_ModEnd> cs > CQSPI_MAX_CHIPSELECT <S2SV_ModStart> > CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) { if ( n < 0 || n >= maxn ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } if ( actions [ n ]. SWF_ACTIONRECORD. ActionCode > SWF_ACTIONRECORD_MAX_CODE ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } if ( actions [ n ]. SWF_ACTIONRECORD. ActionCode > SWF_ACTIONRECORD_MAX_CODE ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } if ( actions [ n ]. SWF_ACTIONRECORD. ActionCode > SWF_ACTIONRECORD_MAX_CODE ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } if ( actions [ n ]. SWF_ACTIONRECORD. ActionCode > SWF_ACTIONRECORD_MAX_CODE ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; } if ( actions [ n ]. SWF_ACTIONRECORD. ActionCode > SWF_ACTIONRECORD_MAX_CODE ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; }",0
264,<S2SV_ModStart> -> stobj -> stevedore == NULL ) bo -> director_state = DIR_S_NULL ;,0
265,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
266,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> - 1 ) ; if (! ND_TTEST ( * prep ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; }",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, <S2SV_ModStart>, & value, 1, 1000 ) ; if ( ret < 0 ) return ret <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ; } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg ; sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return - 1 ; }",0
270,<S2SV_ModStart> } } } mowgli_string_free ( s ) ;,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation states <S2SV_blank> available"" ) ; goto Error ; } <S2SV_ModStart> } } } if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation states <S2SV_blank> available"" ) ; goto Error ; }",0
272,"<S2SV_ModStart> 32 ) { if ( i + 4 > sec -> size ) { r_list_append ( ret, NULL ) ; return ; } <S2SV_ModStart> } else { if ( i + 8 > sec -> size ) { r_list_append ( ret, NULL ) ; return ; } <S2SV_ModStart> } else { if ( i + 8 > sec -> size ) { r_list_append ( ret, NULL ) ; return ; }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_MAX_LINK_B",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer,0
275,<S2SV_ModStart> < q ) { if ( ONIGENC_IS_UNDEFINED ( reg -> enc ) ) { return - 1 ; } <S2SV_ModStart> p < q ) { if ( ONIGENC_IS_UNDEFINED ( reg -> enc ) ) { return - 1 ; },0
276,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data * bfqd, <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> struct bfq_queue * <S2SV_ModStart> bfqd = bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_too_idle ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ;",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( vif <S2SV_ModEnd>, work_to_do )",0
279,<S2SV_ModStart> ( struct xfrm_policy_walk_args <S2SV_ModEnd> * walk =,0
280,<S2SV_ModStart> conn ) ; <S2SV_ModEnd> if ( h2o_timeout_is_linked,0
281,"<S2SV_ModStart> -> data ) ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp ; struct skb_shared_info * shinfo = skb_shinfo ( skb ) ; int nr_frags = shinfo -> nr_frags ; int err, start ; err = gop -> status ; if ( unlikely ( err ) ) { pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; new",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( chroma_image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
284,"<S2SV_ModStart> ; incoming_cn_msg = nlmsg_new ( 0, <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct hv_kvp_ipaddr_value ) ; if ( incoming_cn_msg!= NULL ) { free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> type = crm_element_value <S2SV_ModStart> F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if (",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + <S2SV_ModEnd> y > extraBlock <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > extraBlock + extraBlockLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ; if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT && UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG && UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG && UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT && UDF_I ( dir ) -> i_flags & UDF_I ( dir ) -> i_flags & UDF_I ( dir ) -> i_flags & UDF_I ( dir ) -> i_flags & UDF_I ( dir ) -> i_flags & UDF_I ( dir ) -> i_flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_I ( dir ) -> flags & UDF_,0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL <S2SV_ModEnd> ) { struct <S2SV_ModStart> = IP_VS_STATE_MASTER ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; memcpy ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ; <S2SV_ModStart> = IP_VS_STATE_BACKUP ; memcpy ( & d [ 2 ], 0, sizeof ( d [ 2 ] ) ) ; memcpy ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memcpy ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memcpy ( & d [ 4 ], sizeof ( d [ 4 ] ) ) ; memcpy ( & d [ 5 ], sizeof ( d [ 5 ] ) ) ; memcpy ( & d [ 6 ], 0, sizeof ( d [ 6 ] ) ) ; memcpy ( & d [ 7 ], 0, sizeof ( d [ 7 ] ) ) ; memcpy ( & d [ 8 ], sizeof ( d [ 8 ] ) ) ) ; memcpy ( & d [ 7 ], sizeof ( d",0
290,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( rcu )",0
291,<S2SV_ModStart> ssize_t result ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
292,"<S2SV_ModStart>, * cgdir = NULL, * controller = NULL, * caller_is_in_ancestor = NULL <S2SV_ModStart> O_RDWR ) ) { caller_is_in_ancestor = caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ; ret = - EACCES ; goto out ; } if ( caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; disk = NULL ; continue ; } <S2SV_ModEnd> INIT_LIST_HEAD ( &,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> = MagickFalse ; status = MagickTrue ; if ( status!= MagickTrue ) { MagickError ( ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"" ) ; return NULL ; } if ( status!= MagickFalse ) { MagickError ( ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"" ) ; return NULL ; } <S2SV_ModStart> = MagickFalse ; status = MagickFalse ; if ( status!= MagickFalse ) { MagickError ( ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"" ) ; return NULL ; } if ( status!= MagickFalse ) { MagickError ( ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"", ""Magick_ReadVIFFImage"" ) ; return NULL ; }",0
296,<S2SV_ModStart> pktnum ; int64_t <S2SV_ModEnd> index_pts = FFMAX <S2SV_ModStart> ; index_pts = FFMIN <S2SV_ModEnd> ( av_rescale (,0
297,<S2SV_ModStart> srp ) ; if ( unlikely ( srp -> cmd!= SG_CMD_READ ) ) { result = - EFAULT ; srp -> cmd = SG_CMD_WRITE ; srp ->,0
298,<S2SV_ModStart> ; # endif <S2SV_ModEnd> # if HAVE_DECL_CLONE_NEWNET <S2SV_ModStart> ; # endif <S2SV_ModEnd> # ifdef _WITH_VRRP_ <S2SV_ModStart> ; # endif <S2SV_ModEnd> # ifdef _WITH_LVS_ <S2SV_ModStart> ; # endif <S2SV_ModEnd> # ifdef _WITH_VRRP_ <S2SV_ModStart> ; # endif <S2SV_ModEnd> # ifdef _WITH_LVS_ <S2SV_ModStart> ; # endif <S2SV_ModEnd> # ifdef _WITH_VRRP_ <S2SV_ModStart> ; # endif <S2SV_ModEnd> # ifdef _WITH_LVS_ install_keyword (,0
299,"<S2SV_ModStart> data ) { int rc ; rc = encoder_common_init ( ctx, data ) ; if ( rc!= 0 ) { vpx_codec_err_t err = VPX_CODEC_INTERNAL_ERROR ( err ) ; return VPX_CODEC_INTERNAL_ERROR ( err ) ; } <S2SV_ModStart> encoder_common_init ( ctx, rc <S2SV_ModEnd> ) ; }",0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; if ( tmpbuf ) { kfree ( tmpbuf ) ; return 1 ; } tmpptr = ( char * ) tmpbuf ; * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_value ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart>, UID_INVALID, GID_INVALID <S2SV_ModEnd>, 0 )",0
302,"<S2SV_ModStart> ( box = jas_malloc ( sizeof ( jp2_box_t ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> name, \'""\', box -> type, box -> len ) ) ; box -> ops = & jp2_boxinfo_unk. ops ; if ( box -> len == 1 ) { if ( jas_getuint64 ( in, & extlen ) ) { goto error ; } box -> datalen = extlen - JP2_BOX_HDRLEN ( true ) ; } else { jas_eprintf ( ""warning: <S2SV_blank> cannot <S2SV_blank> handle <S2SV_blank> large <S2SV_blank> 64-bit <S2SV_blank> box <S2SV_blank> length\\n"" ) ; extlen = 0xffffffffUL ; } if ( extlen > 0xffffffffUL ) { jas_eprintf ( ""warning: <S2SV_blank> cannot <S2SV_blank> handle <S2SV_blank> large <S2SV_blank> 64-bit <S2SV_blank> box <S2SV_blank> length\\n"" ) ; extlen = 0xffffffffUL ; } box -> datalen = extlen - JP2_BOX_HDR",0
303,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModStart> new_size ) { Py_ssize_t <S2SV_ModEnd> i ; assert,0
304,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> m -> msg_control ) { <S2SV_ModStart> m -> msg_control -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; if ( unlikely ( q -> flags & IFF_VNET_HDR ) ) { err = - EINVAL ; goto err ; } <S2SV_ModStart> m -> msg_control -> msg_namelen = sizeof ( struct virtio_net_hdr ) - vnet_hdr. hdr_len ; } else { err = - EINVAL ; goto err ; } if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( vnet_hdr. hdr_len > len ) goto err ; vnet_hdr. hdr_len = len ; },0
305,<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> offset + 1 <= <S2SV_ModEnd> packet_len ) { <S2SV_ModStart> offset ; } offset += ipv6_optlen ( exthdr ) ; * nexthdr = & exthdr -> nexthdr ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; } return,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; memcpy ( mvx, mvp, sizeof ( mvx ) ) ; memcpy ( mvy, mvp, sizeof ( mvy ) ) ;",0
308,<S2SV_ModStart> msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
309,"<S2SV_ModStart> return ; } <S2SV_ModEnd> if ( dj_report <S2SV_ModStart> dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; }",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { struct sctp_chunkhdr_ext * hdr ; union sctp_addr_param * addr_param ; sctp_addip_param_t * param_hdr ; sctp_addip_chunk_t * asconf_chunk ; sctp_addip_chunk_t * asconf_chunk ; sctp_addip_chunk_t * asconf_hdr_ext <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> ; int all_param_pass = 1 ; if ( asconf -> chunk_hdr -> type == SCTP_CID_ASCONF ) { err_code = sctp_process_asconf_param ( asoc, asconf, & param_hdr, & asconf_chunk ) ; if ( err_code!= SCTP_ERROR_NO_ERROR ) { sctp_add_asconf_response ( asconf_ack, param_hdr_ext, err_code, asconf_chunk ) ; goto done ; } length = ntohs ( param_hdr -> length ) ; asconf_param = ( void * ) param_hdr + length ; chunk_len -= length ; asconf_ack = sctp_make_",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %x,%zu\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # ifdef CONFIG_KVM_XICS case KVM_XICS_VERSION_1_0 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_2_1 : case KVM_XICS_VERSION_3_0 : case KVM_XICS_VERSION_2_0 : case KVM_XICS_VERSION_2_0 : r = 1 ; break ; # ifdef CONFIG_KVM_E500V2 || defined ( CONFIG_KVM_E500MC ) || defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_E500MC : r =! hv_enabled ; break ; # endif,0
316,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
317,"<S2SV_ModStart> } keylen = utf8s_to_utf16s <S2SV_ModEnd> ( key_name, <S2SV_ModStart> ( key_name ), & kvp_data -> data. key, sizeof ( kvp_data -> data. key ) <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> 1 ) ; valuelen = utf8s_to_utf16s <S2SV_ModEnd> ( value, <S2SV_ModStart> ( value ), & kvp_data -> data. value, sizeof ( kvp_data -> data. value ) <S2SV_ModEnd> ; icmsghdrp ->",0
318,<S2SV_ModStart> -> log_ctx ; if (! capable ( CAP_SYS_RAWIO ) ) { r = - EPERM ; break ; } <S2SV_ModStart> -> log_ctx ; if (! capable ( CAP_SYS_RAWIO ) ) { r = - EPERM ; break ; } <S2SV_ModEnd> d -> log_ctx,0
319,"<S2SV_ModStart> ; } } else { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; }",0
320,"<S2SV_ModStart> * parg = NULL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; int err = - EINVAL ; size_t ctrls_size = 0 ; void __user * user_ptr = NULL ; <S2SV_ModStart> case _IOC_NONE : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; if ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) { parg = NULL ; break ; case _IOC_READ : case _IOC_WRITE : case ( _IOC_READ | _IOC_READ ) : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf )",0
321,"<S2SV_ModStart> } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if (",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart>, void * data, size_t size, int timeout ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, ret <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; if ( ret < 0 ) return ret ; ret = ret ;",0
323,<S2SV_ModStart> { case RESPONSE_RUN <S2SV_ModEnd> : { screen <S2SV_ModStart> uri ) ; g_object_unref ( screen ) ; <S2SV_ModStart> uri ) ; g_object_unref ( screen ) ;,0
324,"<S2SV_ModStart> -> lsr_event ) { if (! edge_port -> open ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; edge_port -> close_pending = 0 ; } else { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; }",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct cifsSesInfo * <S2SV_ModEnd> cifs_find_smb_ses ( struct <S2SV_ModStart> server -> smb_ses_list ) { struct cifsSesInfo * ses ; <S2SV_ModStart> smb_ses_list ) ; ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) goto out ; <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> cfg, 0, sizeof ( ctx -> cfg ) ) ; if ( ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) ) && ( ( cfg -> g_w!= 0 ) && ( ( cfg -> g_h!= 0 ) ) ) && ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > 0 && ( cfg -> g_h > 0 ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w && ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > 0 && ( cfg -> g_h > 0",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; if ( ptr ) { * ptr = 0 ; off = r_num_math ( core -> num, ptr + 1 ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ;",0
329,<S2SV_ModStart> { struct key * <S2SV_ModEnd> keyring ; keyring,0
330,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> scanned ; static <S2SV_ModStart> scanned ; scanned += readnb ; readnbd += readnb ; if ( readnbd > cmdsize ) { return - 2 ; },0
331,"<S2SV_ModStart> orig ) ; if ( copy == NULL ) { mrb_free ( mrb ) ; return NULL ; } <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy,",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vp9_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> -> zbin_mode_boost = 1 <S2SV_ModEnd> ; vp9_init_plane_quantizers ( <S2SV_ModStart> cpi, & cpi <S2SV_ModEnd> -> mb )",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; if ( ctxt -> op_bytes < 2 ) return X86EMUL_CONTINUE ; rc = <S2SV_ModStart>, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart> VCPU_SREG_EIP ) ) return rc <S2SV_ModEnd> ; ctxt -> <S2SV_ModStart> = 0 ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr, ctxt -> op_bytes ) ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONT",0
336,"<S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", codsty -> nreslevels2decode ) ; return AVERROR_INVALIDDATA ; } if (",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""Usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; }",0
338,<S2SV_ModStart> out_error ; } obj -> n_got = n_got ; obj -> got_table = NULL,0
339,<S2SV_ModStart> info -> si_code < 0 || info -> si_signo < 0,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ),",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> dir ) ; if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } x *= 3 <S2SV_ModEnd> ; if ( <S2SV_ModStart> sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if (! p ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) { x = ( c & 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xF0 ) && ( c < 0xF0 ) ) { x = (",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } else { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; }",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,<S2SV_ModStart> size - 8 ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> size - tmp_strsize ) return GF_ISOM_INVALID_FILE ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if ( tmp_strsize > ( u32 ) ptr -> size ) return GF_ISOM_INVALID_FILE ;,0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> = US ; uschar * cmdline_syslog_name = NULL ; uschar * start_cmdline = NULL ; uschar * stop_cmdline = NULL ; uschar * <S2SV_ModEnd> stop_queue_run_id = NULL <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> cmdline_syslog_name = NULL <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> start_cmdline = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> stop_cmdline = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> cmdline_syslog_name = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> cmdline_syslog_name = US <S2SV_ModStart> = US ; uschar * start_cmdline = US ; uschar * <S2SV_ModEnd> stop_cmdline = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> cmdline_syslog_name = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> start_cmdline = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> stop_cmdline = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> cmdline_syslog_name = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> cmdline_syslog_name = US <S2SV_ModStart> = US ; uschar * <S2SV_ModEnd> start_cmdline_syslog_name = US <S2SV_ModStart> = US,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) { s -> seekable = strtoull ( p, 10 ) ; s -> filesize = strtoull ( p, NULL, 10 ) ; } else { s -> seekable = - 1 ; } } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } else { h -> is_akamai = 0 ; }",0
348,"<S2SV_ModStart> * cr ; size_t maxw, maxh, max ; size_t offset, upb ; size_t offset, upb ; size_t i, j ; size_t <S2SV_ModEnd> maxw = ( <S2SV_ModStart> maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxw = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxh ; ++ i ) { for ( j = 0",0
349,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nfs4_state_set_mode_locked ( <S2SV_ModStart> mode ) { struct nfs4_state * state = nfs4_state_lock ( state ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> state == mode ) { state -> state = mode ; return ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> & FMODE_WRITE )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_READ ) list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state <S2SV_ModEnd> = mode ;",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ;",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> = 0 ; char * lbase = NULL, * ltest = NULL ; char * strbase = NULL, * strtest = NULL ; char * ltest = NULL ; char * lbase_copy = NULL, * ltest = NULL ; char * strbase = NULL, * strtest = NULL ; char * ltest_copy = NULL ; char * ltest_copy = NULL ; char * ltest_copy = NULL ; char * lbase_copy = NULL ; char * lbase_copy = NULL ; char * strbase = NULL ; char * strbase = NULL ; char * strtest = NULL ; char * ltest_copy = NULL ; char * ltest_copy = NULL ; char * ltest_copy = NULL ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data ; int ret ; data = cdc_ncm_select_altsetting ( intf ) ; if (! data ) return - ENODEV ; <S2SV_ModStart> ret = cdc_ncm_bind_common <S2SV_ModEnd> ( dev, <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM, data <S2SV_ModEnd> ) ; usbnet_link_change <S2SV_ModStart>, 0, data <S2SV_ModEnd> ) ; return",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModStart> len ) ; if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->",0
357,"<S2SV_ModStart> ; err = xt_check_entry_offsets <S2SV_ModEnd> ( e,",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Invalid <S2SV_blank> chunk <S2SV_blank> format"" ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; <S2SV_ModEnd> snd_use_lock_sync ( & <S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ) ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int from, to ; if (! start_offset ) start_offset = PAGE_CACHE_SIZE ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } else { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr = start ; offset = start << PAGE_CACHE_SHIFT ; from = start_offset ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ;",0
362,<S2SV_ModStart> b ) ; VipsForeignLoadClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( class == NULL ) return ( NULL ) ; if ( <S2SV_ModStart> ( load ) || <S2SV_ModEnd> vips_image_pio_input ( load <S2SV_ModStart> out ) ) return ( NULL ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> out ) ) return ( NULL ) ; <S2SV_ModEnd> return ( vips_region_new,0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } }",0
364,"<S2SV_ModStart> ) ) { xfs_trans_log_buf ( mp -> m_rbm, bp, XFS_ERROR ( EFSCORRUPTED, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR,",0
365,"<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL <S2SV_ModEnd> ) ) return <S2SV_ModStart> - ENOMEM ; state -> sd = & dev -> v4l2_dev ; state -> tx_params = default_tx_params ; state -> tx_kfifo = NULL ;",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv ) { <S2SV_ModStart> service_name_tlv_length ) ; if ( miux_tlv ) { <S2SV_ModStart> miux_tlv_length ) ; } <S2SV_ModStart> rw_tlv_length ) ; if ( rw_tlv ) { <S2SV_ModStart> rw_tlv_length ) ; },0
367,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> monitor_init ( void <S2SV_ModStart> ssh = active_state <S2SV_ModEnd> ; if ( <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ;",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_",0
369,"<S2SV_ModStart> unsigned int channo ; if (! jas_stream_check ( in, sizeof ( cdef -> ents ) ) ) { return - 1 ; }",0
370,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg ( <S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
371,<S2SV_ModStart> ; ipc. icmp_type = type ; ipc. icmp_code = code ; ipc.,0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ;",0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) )",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( log ) ) * log_num = nlogs ;,0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; },0
378,"<S2SV_ModStart> 1 ) ) { if ( off + bit >= tags -> nr_tags ) { fn ( rq, data, reserved ) ; return ; }",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> ; if (! skb_cloned ( skb ) ) return 0 ; if (,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( bp ) ; len -= 2 ; bp += 2 ; len -= 2 ; <S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( bp ) ; len -= 2 ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; bp += 2",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, required_argument, <S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, optional_argument, <S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, optional_argument, <S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, optional_argument, <S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, optional_argument, <S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, optional_argument, <S2SV_ModStart> }, { ""umask"" <S2SV_ModEnd>, optional_argument,",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ( error == 0 <S2SV_ModEnd> ) ; },0
387,<S2SV_ModStart> item ) ; struct o2nm_cluster * cluster = to_o2nm_cluster ( node -> nd_parent ) <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; if ( node -> nd_flags & O2NM_NO_LOCAL ) return - ENODEV <S2SV_ModEnd> ; tmp = <S2SV_ModStart> tmp == cluster -> cl_has_local && <S2SV_ModEnd> node -> nd_num <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; node -> <S2SV_ModStart> node -> nd_num ; node -> nd_local = tmp ; node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM,0
388,"<S2SV_ModStart> if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (",0
389,<S2SV_ModStart> : case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x2a : case 0x2b : case 0x2c : case 0x2f :,0
390,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; }",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> - E_NOTHANDLED ; if ( ninst >= EF_GBL_OPTIONS -> n_filters ) { fprintf ( stderr, ""No <S2SV_blank> matching <S2SV_blank> filters\\n"" ) ; ON_ERROR ( - 1, ""No <S2SV_blank> matching <S2SV_blank> filters\\n"" ) ; ON_ERROR ( - 1, ""No <S2SV_blank> matching <S2SV_blank> filters\\n"" ) ; ON_ERROR ( - 1, ""No <S2SV_blank> matching <S2SV_blank> filters\\n"" ) ; ON_ERROR ( - 1, ""No <S2SV_blank> matching <S2SV_blank> filters\\n"" ) ; return - E_NOTHANDLED ; }",0
393,<S2SV_ModStart> trunc ; ND_TCHECK_32BITS ( lshp -> ls_type ) ; ND_TCHECK_16BITS ( lshp -> ls_age ) ;,0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST2 ( * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST2 ( * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST2 ( * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST2 ( * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST2 ( * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_TTEST2 ( *,0
396,<S2SV_ModStart> } else { if ( ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) ) { ret = - EAGAIN ; break ; } <S2SV_ModStart> } else { if ( ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONNONBLOCK ) &&! ( flags & SPLICE_F_NONNONBLOCK ) &&! ( flags & SPLICE_F_NONNONBLOCK ) &&! ( flags & SPLICE_F_NONNONBLOCK ) ) { ret = - EAGAIN ; break ; } if (! ( flags & SPLICE_F_NONBLOCK ) &&! ( flags & SPLICE_F_NONNONBLOCK ) &&! ( flags & SPLICE_F_NONNONBLOCK ) ) { ret = -,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; mm_segment_t <S2SV_ModStart> KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; <S2SV_ModStart> = 0 ; if ( r. ru_utime. tv_sec!= ur -> ru_utime. tv_sec ) { err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; err |= __put_user ( r. ru_nswap, & ur -> ru_nswap",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_",0
400,<S2SV_ModStart> stf_status v2N_NO_PROPOSAL_CHOSES + v2N_NO_PROPOSAL_CHOSES <S2SV_ModEnd> + v2N_NO_PROPOSAL_CHOSES ;,0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> { nsc_encode_subsampling ( <S2SV_ModEnd> context ) ; <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
403,<S2SV_ModStart> stringset == ETH_SS_STATS || stringset == ETH_SS_BROADCAST <S2SV_ModEnd> ) return ARRAY_SIZE,0
404,<S2SV_ModStart> 1 ) return ( <S2SV_ModEnd> image -> columns <S2SV_ModStart> / 8 ) <S2SV_ModEnd> ; else return,0
405,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%s"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; }",0
406,<S2SV_ModStart> bMasterInterface0 ) ; if (! pcu -> ctrl_intf ) return - ENODEV ; <S2SV_ModStart> bSlaveInterface0 ) ; if (! pcu -> data_intf ) return - ENODEV ;,0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> struct device * dev <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart> dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl ->",0
409,"<S2SV_ModStart> pattern_enc, ci -> syntax, & cpat, & cpat_end ) ; if ( r!= 0 ) return r ; r = conv_encoding ( ci -> pattern_enc, ci -> syntax, pattern, pattern_end, & cpat, & cpat_end ) ; if ( r!= 0 ) return r ;",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int InsertRow ( Image * image, ssize_t depth, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> * p, <S2SV_ModEnd> ExceptionInfo * exception <S2SV_ModStart> ) { size_t <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> ; ssize_t x ; register Quantum * <S2SV_ModEnd> q ; Quantum <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S",0
411,"<S2SV_ModStart> u_char * tptr, u_int length <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6",0
412,"<S2SV_ModStart>, ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ctxt -> mode == X86EMUL_MODE_VM86 ) usermode = X86EMUL_MODE_REAL ; else usermode = X86EMUL_MODE_VM86 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss. dpl = 3 ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> _eip = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC ) = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RSP ) = reg_read ( ctxt, VCPU_S_",0
413,"<S2SV_ModStart> ) ; return sprintf_safe <S2SV_ModEnd> ( buf, <S2SV_ModStart> pdev -> driver_override, sizeof ( pdev -> driver_override ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } tmpout = BIO_new ( BIO_s_mem ( ) ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; }",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index <S2SV_ModEnd> ii = tree <S2SV_ModStart> i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart> config_file ) ; if ( ( st. st_mode & ( S_IRUSR | S_IWUSR | S_IWOTH ) )!= 0 && ( st. st_mode & ( S_IRUSR | S_IWOTH ) )!= 0 && ( st. st_mode & ( S_IRUSR | S_IWOTH ) )!= 0 && ( st. st_mode & ( S_IRUSR | S_IWOTH ) )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( st. st_mode & ( S_IRUSR | S_IWOTH )!= 0 && ( st. st_mode & ( S_IRUSR | S_IWOTH ) )!= 0 && ( st. st_mode & ( S_IRUSR | S_IWOTH ) )!= 0 && ( st. st_mode & ( S_IRUSR | S_IWOTH )!= NULL ) { interpret_rc ( f ) ; fclose ( f ) ; } if ( st. st_mode & ( S_IRUSR | S_IWOTH )!= 0 && ( st. st_mode,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; protoname = ""udp6"" ; break ; case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text + 1, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ) err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0",0
421,"<S2SV_ModStart> avoid_reserve ) { struct hstate_info * h = vma -> vm_private_data <S2SV_ModEnd> ; struct page <S2SV_ModStart> page ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_put_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } <S2SV_ModEnd> set_page_private ( page",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_file,",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; if ( manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ; if ( r < 0 ) goto fail ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_high_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 12 ] ;",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif return flags & mask <S2SV_ModEnd> ; } <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFFHorAcc16_ex ( tif <S2SV_ModEnd>, cp0,",0
428,<S2SV_ModStart> tot_len ) ; if ( opt2 -> tot_len < tot_len ) { err = - EINVAL ; goto out ; } <S2SV_ModStart> tot_len ) ; if ( opt2 -> tot_len > tot_len ) { err = - EINVAL ; goto out ; },0
429,"<S2SV_ModStart> length ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> length ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart>, * controller = NULL, * cgroup = NULL, * fpath = NULL, * cgdir = NULL, * caller_is_in_ancestor = NULL <S2SV_ModStart> out ; } caller_is_in_ancestor = caller_is_in_controller ( fc -> pid, controller, cgroup, NULL ) ; if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> ret = 0",0
431,<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= ( flag & ( CL_UNPRIVILEGED | CL_READONLY ) || ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) <S2SV_ModStart> |= MNT_LOCK_READONLY ; mnt -> mnt. mnt_flags |= MNT_LOCKED ;,0
432,<S2SV_ModStart> trans = & rds_loop_transport ; } else { trans = NULL ; },0
433,"<S2SV_ModStart> { if ( ( unsigned int ) rsize >= 110 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 111 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 107 ] = rdesc [ 104 ] = 0x26 ; rdesc [ 105 ] = rdesc [ 110 ] = 0x80 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 111 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ;",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> serio ) ; if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { dbg ( ""Interrupt <S2SV_blank> %d, <S2SV_blank> without <S2SV_blank> any <S2SV_blank> data\\n"", irq ) ; ret = 0 ; goto out ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_TIMEOUT &&! i8042_notimeout ) { dbg ( ""Interrupt <S2SV_blank> %d, <S2SV_blank> without <S2SV_blank> any <S2SV_blank> data\\n"", irq ) ; ret = 0 ; goto out ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_MUXERR ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_translate_to_linux ( uint8_t * newName, int udfLen, <S2SV_ModEnd> uint8_t * fidName <S2SV_ModStart> fidName, int fidNameLen <S2SV_ModEnd> ) { int <S2SV_ModStart> newIndex ; } } if ( newIndex < 256 ) { uint8_t curr ; uint8_t ext [ EXT_SIZE ] ; int localExtIndex = 0 ; for ( index = 0 ; index < EXT_SIZE && extIndex + index + 1 < udfLen ; index ++ ) { curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ extIndex + index + 1 ] == '/' || udfName [ extIndex + index + 1 ] == 0 ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( ( udfName [ extIndex + index + 2 ] == '/' || udfName [ extIndex + index + 2 ] == 0 ) ) index ++ ; } ext [ localExtIndex ++ ] = curr ; } if ( curr == EXT_MARK && ( udfLen - index + 1 ) <= EXT_SIZE ) { if ( udfName",0
438,"<S2SV_ModStart> * cpi, ThreadData * td, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ] ; int bw, bh ; if ( mi_row < cm -> mi_rows || mi_col < cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, td, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, td, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg",0
439,"<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ) ) { serverPanic ( ""Client <S2SV_blank> is <S2SV_blank> paused"" ) ; }",0
440,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> * s ; DSA_SIG_DATA * d2i_DSA_SIG = NULL ; <S2SV_ModStart> ; if ( d2i_DSA_SIG ( & d2i_DSA_SIG, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; <S2SV_ModStart> err : if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) return rv ; rv = gdDPExtractData <S2SV_ModEnd> ( out,",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & p -> ai_addrlen <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; has_local_ct = ( int ) ( ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x07 ) ; } if ( has_local_ct ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,"<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( port, dev ) ;",0
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> ; # endif # if USE_PARTIAL_COPY int row, col, active_end ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; # endif <S2SV_ModStart> # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vpx_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; } } else { vpx_copy_and_extend_frame (",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> code ) { * status = ""INVALID_S4U2SELF_USER"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum",0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int scsi_disk_emulate_command (,0
455,<S2SV_ModStart> || s -> <S2SV_ModEnd> cur_pic. field_picture,0
456,"<S2SV_ModStart> off ) { struct rds_loop_incoming * inc = & rm -> m_inc ; <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; if ( inc -> i_conn -> c_fcong!= NULL ) { rds_cong_map_updated ( inc -> i_conn -> c_fcong, ~ ( u64 ) 0 ) ; return - EINVAL ; } if ( hdr_off || sg || off ) ; rds_inc_init ( & inc -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & inc -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & inc ) ;",0
457,"<S2SV_ModStart> ) return 0 ; if ( grub_disk_read ( data -> disk, buf, EXT2_BLOCK_SIZE ( data ), 0, buf ) ) return 0",0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> Cookie=%08x:%08x"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, ""Home <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; }",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING,0
461,"<S2SV_ModStart> = hmi_data ; uint16_t hmi_bpm = 0 ; uint16_t hmi_division = 0 ; uint32_t hmi_track_cnt = 0 ; uint32_t hmi_track_offset = NULL ; uint8_t * hmi_track_end = NULL ; uint8_t * hmi_track_header_length = NULL ; uint8_t * hmi_running_event = NULL ; <S2SV_ModStart> channel ; } hmi_bpm = hmi_data [ 211 ] ; hmi_bpm = hmi_data [ 228 ] ; hmi_track_offset = hmi_data [ 229 ] ; hmi_track_end = hmi_data [ 229 ] ; hmi_track_offset = hmi_data [ 229 ] ; hmi_track_end = hmi_data [ 229 ] ; hmi_running_event = _WM_InitMDI ( ) ; if ( hmi_mdi == NULL ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0",0
462,<S2SV_ModStart> = hdev -> id ; if ( * addr_len < sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; return - EINVAL ; },0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] <S2SV_ModEnd> = inode ->,0
464,"<S2SV_ModStart> ; } if ( request -> kdc_options & AS_REQUIRES_PWCHANGE ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_K",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) || signed_sub_overflows ( dst_reg -> umin_value, umin_val ) || signed_sub_overflows ( dst_reg -> umax_value, umax_val ) || signed_sub_overflows ( dst_reg -> umin_value, umax_val ) || signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin",0
466,"<S2SV_ModStart> method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) { const <S2SV_ModStart> int q = vp9_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> qindex, 0 ) <S2SV_ModEnd> ; int filt_guess <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO <S2SV_ModEnd> ( q * <S2SV_ModStart> 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; }",0
467,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BTA_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; # endif,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> int a = getnum <S2SV_ModEnd> ( fmt,",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u"",",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( data, 0, data_sz ) ; <S2SV_ModStart> else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz <S2SV_ModEnd>, user_priv,",0
474,"<S2SV_ModStart> int ret ; if ( strlen ( value ) < 2 ||! value [ strlen ( value ) - 1 ] ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if (",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
476,"<S2SV_ModStart> source_address_length ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } <S2SV_ModStart> source_address_number ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } <S2SV_ModStart> source_address_length ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } <S2SV_ModStart> } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; }",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } else { sendClean ( outputbuffer ) ; }",0
478,<S2SV_ModStart> } else { <S2SV_ModEnd> BUG ( ) <S2SV_ModStart> } else { <S2SV_ModEnd> BUG ( ) <S2SV_ModStart> } else { <S2SV_ModEnd> BUG ( ) <S2SV_ModStart> } else { <S2SV_ModEnd> BUG ( ),0
479,"<S2SV_ModStart> case IS_STRING : <S2SV_ModEnd> affine [ i <S2SV_ModStart> i ] = Z_LVAL_PP ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; break ; case IS_LONG : affine [ i ] = Z_LVAL_PP ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; break ; case IS_LONG : affine [ i ] = Z_LVAL_PP ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; break ; case IS_LONG : affine [ i ] = Z_LVAL_PP ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type",0
480,<S2SV_ModStart> self ) { if ( self -> dict ) { Py_CLEAR ( self -> dict ) ; },0
481,"<S2SV_ModStart> SQL_DROP ) ; SQLFreeStmt ( hStmt, SQL_DROP ) ;",0
482,"<S2SV_ModStart> ; r = copy_to_user <S2SV_ModEnd> ( data,",0
483,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> VERSION ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler",0
484,<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> cpuctx_lock ) ; if ( cpuctx -> ctx. type!= cpu_context ) { ret = - EINVAL ; goto free_pdc ; },0
486,"<S2SV_ModStart>, struct iovec <S2SV_ModEnd> * iovec ) <S2SV_ModStart> = 1 ; iovec -> iov_base = NULL ; iovec -> iov_len = 0 ;",0
487,<S2SV_ModStart> ; int groups_per_flex <S2SV_ModEnd> ; size_t size <S2SV_ModStart> sbi -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = EXT4_SB ( sb ) -> s_log_groups_per_flex <S2SV_ModEnd> ; groups_per_flex = <S2SV_ModStart> sbi -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = EXT4_SB ( sb ) -> s_log_groups_per_flex ; sbi -> s_log_groups_per_flex = EXT4_SB ( sb ) -> s_log_groups_per_flex <S2SV_ModEnd> ; flex_group_count =,0
488,<S2SV_ModStart> if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE ) ) return 0 ; if (,0
489,"<S2SV_ModStart> < count ; ++ i, ++ a <S2SV_ModEnd> ) { n <S2SV_ModStart> ] ) ; if (! n ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModEnd> n = cJSON_CreateString <S2SV_ModStart> ] ) ; if (! n ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModEnd> p = n",0
490,<S2SV_ModStart> (! EmptyString <S2SV_ModEnd> ( cli_sslclifp (,0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; } for ( ; i < w ; i ++ ) dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; dst [ i + 3 ] = src1 [ i + 3 ] -,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length < callback_args -> forward_matches ) { return ERROR_INVALID_ARGS ; } <S2SV_ModStart> forward_matches ; } if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_ARGS ; },0
493,<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & ~ FORWARD_LOCAL )!= 0 &&! options. disable_forwarding,0
494,<S2SV_ModStart> ( bc ) ) return AVERROR_INVALIDDATA ; if (,0
495,<S2SV_ModStart> return err ; <S2SV_ModEnd> } else {,0
496,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
497,<S2SV_ModStart> ; register int <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> 2 ) { if ( numrows < 2 ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ;,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /ssi(s|p)/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""ssi(s|p)/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /ssi(s|p)/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""ssi(s|p)/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""ssi(s|p)/ <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $",0
501,"<S2SV_ModStart> ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( queue ) { if ( free_func ) ( queue ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } <S2SV_ModEnd> hashbin -> hb_current <S2SV_ModStart> ~ HB_MAGIC ; <S2SV_ModEnd> return 0 ;",0
502,"<S2SV_ModStart>, data ) ; if ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) { err = - EPERM ; } else { err = security_sb_remount ( sb, data ) ; if ( err ) return err ; }",0
503,<S2SV_ModStart> ; int copied <S2SV_ModEnd> ; struct sockaddr_ll <S2SV_ModStart> sll ; msg -> msg_namelen = 0 ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) <S2SV_ModEnd> ; copied =,0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> num_ports < 2 || serial -> num_ports > 1 ||! serial -> port [ 1 ],0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader ds64hdr, datahdr, fmthdr ; RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; int64_t total_riff_bytes ; int64_t num_samples = WavpackGetNumChannels ( wpc ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_",0
507,"<S2SV_ModStart> ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModStart>, & addr, msg_sys -> msg_namelen ) ; if ( err ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, total_len, cmsg_ptr, len, flags ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_namelen = 0 ; msg_sys -> msg_iov",0
508,<S2SV_ModStart> inode ) ; struct metapath * mp2 = & mp -> mp_metapath [ height - 1 ] ; struct buffer_head * dibh = mp2 -> mp_dibh [ 0 ] <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ;,0
509,"<S2SV_ModStart>, vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next || stream -> index ) { fprintf ( stderr, ""\\n\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index )",0
510,<S2SV_ModStart> ; PROFILER_ENTER ( context <S2SV_ModEnd> -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) { <S2SV_ModStart> context ) ; } <S2SV_ModStart> -> priv -> prof_nsc_decode ) { <S2SV_ModStart> context ) ; },0
511,"<S2SV_ModStart> ; } } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'{%s}%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the expected <S2SV_blank> form.\\n"", copyNs -> href, copyNs -> href ) ; goto error ; }",0
512,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/",0
513,<S2SV_ModStart> fv -> b ) { if ( <S2SV_ModStart> fv -> b. <S2SV_ModEnd> sf -> fv <S2SV_ModStart> fv -> b ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 1 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } _FVCloseWindows ( fv ) ; if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ),0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> ) ; when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) return 0 ;,0
516,"<S2SV_ModStart>! js_regexec ( J <S2SV_ModEnd>, text,",0
517,"<S2SV_ModStart> OFreshOID : if ( ( <S2SV_ModStart> dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } if (",0
518,"<S2SV_ModStart> * multipart_media ; size_t content_length ; int code = 500, fd = - 1, i, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; const char * errstr = NULL ; if ( st -> st_size < 0 ) { errstr = ""file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", st -> st_size ) ; goto abort ; } <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort ; content_length = st -> st_size ; if ( buffer_add_range ( fd, evb, range ) == 0 ) goto abort ; } else { content_length = st -> st_size ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_",0
519,"<S2SV_ModStart> ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
521,"<S2SV_ModStart> if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,<S2SV_ModStart> flags ) { if ( flags & TFD_TIMER_ABSTIME ) { if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else { spin_lock ( & cancel_lock ) ; } <S2SV_ModStart> } else if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ; } else if (! ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ; } else if (! ctx -> might_cancel ) { spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (,0
525,"<S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; return NULL ; }",0
526,"<S2SV_ModStart> { if ( tomoyo_pathcmp ( & path, dev_name, sizeof ( path ) - 1 ) ) { error = - EINVAL ; goto out ; }",0
527,"<S2SV_ModStart> msg_tmp ) ; memcpy ( msg, msg_tmp, sizeof ( * msg_tmp ) ) ; if ( msg_tmp. size > buf_size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; }",0
528,"<S2SV_ModStart> TSRMLS_CC ) ; if ( replaced == NULL ) { zend_log_error ( TSRMLS_CC, ""php_html_entities() <S2SV_blank> returned <S2SV_blank> null"" ) ; return ; } <S2SV_ModEnd> RETVAL_STRINGL ( replaced",0
529,<S2SV_ModStart> peerec ) ) { BIO_free ( rawcert ) ; BIO_free ( rawcert ) ;,0
530,"<S2SV_ModStart> ( ) ; strcpy ( t1_line_array <S2SV_ModEnd>, t1_buf_array )",0
531,"<S2SV_ModStart>, BLOCK_SIZE subsize, int partition <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> bsl = b_width_log2_lookup [ partition <S2SV_ModEnd> ], hbs <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi",0
532,<S2SV_ModStart> name ) ; free ( subsection ) ;,0
533,<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_x = 0 ; int pixel_y = 0 ; int total_blocks ; int row_rows = s -> avctx -> width ; int row_cols = s -> avctx -> height ; int row_rows = s -> avctx -> width ; int row_cols = s -> avctx -> height ; int row_rows = s -> avctx -> height ; int row_cols = s -> avctx -> rows ; int row_rows = s -> avctx -> rows ; int row_rows = s -> avctx -> rows ; int row_rows = s -> avctx -> rows ; int row_cols = s -> avctx -> columns ; int row_cols = s -> avctx -> rows ; int row_rows = s -> avctx -> rows ; int row_cols = s -> avctx -> rows ; int row_rows = s -> avctx -> rows ; int row_cols = s -> avctx -> rows ; int row_rows = s -> avctx -> rows ; int row_cols = s -> avctx -> rows ; int row_cols = s -> avctx -> rows ; int row_cols = s -> av,0
534,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
535,<S2SV_ModStart> ; __be16 type ; if ( skb_is_gso ( skb ) ) goto out_unlock ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> same_flow ) goto out_unlock ;,0
536,"<S2SV_ModStart> ; if ( ( matrix = jas_malloc2 ( numrows * numcols, sizeof ( jas_matind_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> rows_ == 0 ) { matrix -> rows_ = jas_alloc2 ( numrows * numcols, sizeof ( jas_matind_t ) ) ) ) ; matrix -> maxrows_ = 0 ; matrix -> data_ = jas_alloc2 ( numrows * numcols, sizeof ( jas_matind_t ) ) ) ; matrix -> datasize_ = 0 ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = jas_alloc2 ( num",0
537,"<S2SV_ModStart> { rval = TSS2_SYS_StartAuthSession_fail ( sapi_context, session ) ; if ( rval!= TSS2_SYS_RC_SUCCESS ) { TSS2_LOG ( sapi_context, TSS2_LOG_ERROR, ""StartAuthSession <S2SV_blank> failed"" ) ; return rval ; }",0
538,"<S2SV_ModStart> ; ret = key_permission_check <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec -> <S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
540,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; },0
541,<S2SV_ModStart> ; posix_open = ( pTcon -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS )? true : false,0
542,"<S2SV_ModStart> -> cfg_size ; memset ( & caps, 0, sizeof ( caps ) ) ;",0
543,"<S2SV_ModStart> ) ; if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,"<S2SV_ModStart> -> filesize = - 1 ; if ( s -> location ) { av_dict_free ( & s -> chained_options ) ; return AVERROR ( ENOMEM ) ; } s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; if ( options ) av_dict_copy ( & s -> chained_options, * options, 0 ) ; return AVERROR ( ENOMEM ) ;",0
545,"<S2SV_ModStart> ; rcu_assign_pointer ( ireq -> inet_opt, tp ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ; rcu_read_unlock ( ) ;",0
546,"<S2SV_ModStart> char * in, size_t num, size_t <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * out, size_t num <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * in, size_t num <S2SV_ModStart> char * in, size_t num ) { * out ++ = ( ( base64val ( digit1 ) << num ) & 0x3f ) | ( ( base64val ( digit2 ) >> 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) & 0xc0 ) ; * out ++ = ( ( base64val ( digit4 ) >> 6 ) & 0xc0 ) | ( base64val ( digit1 ) >> 4 ) & 0x3f ) ; * out ++ = ( ( base64val ( digit2 ) >> 4 ) & 0x3f ) <S2SV_ModEnd> ; len ++ <S2SV_ModStart>!= '=' ) { * out ++ = ( ( base64val ( digit",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, cur_len ; <S2SV_ModEnd> ssize_t total_written =",0
549,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> svc_ctx ) { int <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> ; svc_log_reset ( svc_ctx ) ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ; svc_log_reset ( svc_ctx <S2SV_ModEnd> ) ; encode_frame_count <S2SV_ModStart> ; if ( <S2SV_ModEnd> encode_frame_count <= 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> vpx_svc_get_message ( svc_ctx <S2SV_ModStart> return vpx_svc_get_message ( svc_ctx <S2SV_ModStart> return vpx_svc_get_message ( svc_ctx <S2SV_ModStart> ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) { <S2SV_ModEnd> number_of_frames = encode_frame_count <S2SV_ModStart> ; if ( <S2SV_ModEnd> svc_ctx -> encoding_mode <S2SV_ModStart> = encode_frame_count / <S2SV_ModEnd> si -> kf_dist <S2SV_ModStart> + 1 ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left <= 0 ) { return FALSE ; } <S2SV_ModStart> } else { if ( left <= 0 ) { return FALSE ; },0
552,"<S2SV_ModStart> ; if ( is_altscreen && screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, <S2SV_ModEnd> sizeof ( VTermScreenCell <S2SV_ModStart> VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, <S2SV_ModEnd> sizeof ( VTermScreenCell <S2SV_ModStart> VTermScreenCell ) * new_cols ) ; } else { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, <S2SV_ModEnd> sizeof ( VTermScreenCell <S2SV_ModStart> VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt,",0
553,"<S2SV_ModStart> ) { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 1 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return",0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_stream_memobj_t * <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> int bufsize ) { assert ( m -> buf_ ) ; assert ( m -> bufsize_ >= 0 ) ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( m -> buf_ ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
556,"<S2SV_ModStart>! LookupString ( symInterpretMatchMaskNames <S2SV_ModEnd>, pred_txt,",0
557,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { struct pcrypt_ctx * ctx ; ctx = container_of ( inst, struct pcrypt_ctx, inst ) ; if ( ctx ) kfree ( ctx ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
558,<S2SV_ModStart> ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ; if ( neigh == NULL ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> neighbour <S2SV_blank> for <S2SV_blank> %s\\n"", skb -> dev -> name ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( replay_esn_len!= up_len ) return - EINVAL ; <S2SV_ModStart> )!= up_len <S2SV_ModEnd> ) return -,0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table, <S2SV_ModStart>, ppos ) ; if ( ret ||! write ) return ret ; ret = security_perf_cpu_time_max_percent ( sysctl_perf_cpu_time_max_percent ) ; if ( ret ||! write ) return ret",0
564,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> (! l_tmp_data ) { opj_free ( l_tmp_data ) ; opj_free ( l_tmp_ptr ) ; return 00 ; },0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str = cm -> mi_stride <S2SV_ModEnd> * mi_row + <S2SV_ModStart> mi_col ; MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; MODE_INFO * * prev_mi = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize = cpi -> sf <S2SV_ModStart> cpi, tile, mi <S2SV_ModEnd>, mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ; vp9_zero ( xd -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ;",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) ibuf -> flags |= PIPE_BUF_FLAG_GIFT ; else ibuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ;,0
570,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
571,"<S2SV_ModStart> } else { if ( Instr && Instr -> IsVirtualFile ) { Fp = ( virtualDirCallback. open ) ( filename, UPNP_READ ) ; if ( Fp == NULL ) return HTTP_INTERNAL_SERVER_ERROR ; } <S2SV_ModStart> return HTTP_UNAUTHORIZED ; } if ( <S2SV_ModEnd> parser -> position <S2SV_ModStart> POS_COMPLETE ) { parser -> http_error_code = HTTP_BAD_REQUEST ; ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; }",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; <S2SV_ModStart> PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg,0
573,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank>",0
574,"<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char <S2SV_ModStart> ; if ( rspac!= NULL ) { memcpy ( & rspac, rspac, sizeof ( krb5_data ) ) ; krb5_data_free ( rspac ) ; }",0
575,"<S2SV_ModStart> -> i_op -> follow_link <S2SV_ModEnd> ( dentry,",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> ci = { <S2SV_ModEnd>. devnum = <S2SV_ModStart> -> devnum, <S2SV_ModEnd>. slow = <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> opt, int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt = & ip_options_rcu <S2SV_ModEnd> [ opt -> <S2SV_ModStart> IPOPT_END ; opt -> optlen = opt -> optlen <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) opt = & ip_options_rcu <S2SV_ModEnd> [ opt -> <S2SV_ModStart> & 3 ) opt = & ip_options_rcu [ opt -> optlen ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) opt = & ip_options_rcu [ opt -> optlen ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } kfree ( * optp ) ; * optp = opt ; return 0 ; }",0
578,<S2SV_ModStart> rmtblkcnt ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtvaluelen2 = args -> rmtvaluelen ;,0
579,<S2SV_ModStart> PTRP_AssociatedIrp ) ; if ( ntStatus!= NT_STATUS_SUCCESS ) { Irp -> IoStatus. Information = 0 ; return ntStatus ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> PTRP_AssociatedIrp ) ; <S2SV_ModEnd> if ( IoEnumerateDeviceObjectList <S2SV_ModStart> PTRP_AssociatedIrp ) ; <S2SV_ModEnd> if ( IoEnumerateDeviceObjectList <S2SV_ModStart> PTRP_AssociatedIrp ) ; <S2SV_ModEnd> if ( IoEnumerateDeviceObjectList <S2SV_ModStart> PTRP_AssociatedIrp ) ; <S2SV_ModEnd> if ( IoEnumerateDeviceObjectList <S2SV_ModStart> PTRP_AssociatedIrp ) ; if ( ntStatus!= NT_STATUS_SUCCESS ) { Irp -> IoStatus. Information = 0 ; return ntStatus ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> PTRP_AssociatedIrp ) ; <S2SV_ModEnd> if ( IoEnumerateDeviceObjectList <S2SV_ModStart> PTRP_AssociatedIrp ) ; <S2SV_ModEnd> if ( IoEnumerateDeviceObjectList <S2SV_ModStart> PTRP_AssociatedIrp,0
580,<S2SV_ModStart> ( connection == NULL || strlen ( connection ),0
581,"<S2SV_ModStart> uint16 nif = 0 ; pcap_if_t * next ; pcap_if_t * next_if = NULL ; pcap_if_t * next_if = NULL ; pcap_if_t * next_if = NULL ; if ( pcap_findalldevs ( & next_if, errmsgbuf ) == - 1 ) { goto error ; } for ( d = next_if ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) { if ( strlen ( d -> description )!= strlen ( d -> description ) ) { if ( strlen ( d -> name )!= strlen ( d -> name ) ) { if ( strlen ( d -> name )!= strlen ( d -> name ) ) { if ( pcap_findalldevs ( & next_if, errmsgbuf ) == - 1 ) { goto error ; } for ( address = next_if -> addresses ; address!= NULL ; address = address -> next ) { switch ( address -> addr -> sa_family ) { case AF_INET : # ifdef AF_INET6 case AF_INET6 : # endif <S2SV_ModStart> struct rpcap_sockaddr ) * 4 ;",0
582,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
583,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { for ( index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 2 ) ; bit ++ ) { for ( index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart>, int tstype <S2SV_ModEnd> ) { struct <S2SV_ModStart> sock_exterr_skb * serr <S2SV_ModEnd> ; int err <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; serr -> <S2SV_ModEnd> ee. ee_info <S2SV_ModStart> = tstype ; serr -> ee. ee_flags = sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ; serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > skb_shinfo ( skb ) -> tskey ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; } else { serr -> ee. ee_info = tstype ; }",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> = len ; if ( in_cksum <S2SV_ModEnd> ( vec,",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN (",0
589,<S2SV_ModStart> (! dumpable && task_is_prepared ( task ) &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (,0
590,<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { abort ( ) ; },0
591,"<S2SV_ModStart> flags & __GFP_ZERO ) memset ( addr, 0, size ) ;",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> i4_payload_size ) ; if ( 0 == ps_bitstrm -> u4_offset ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ;,0
594,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
595,<S2SV_ModStart> -> per_sdma ) { kfree ( dd -> per_sdma ) ; <S2SV_ModStart> -> per_sdma ) ; kfree ( tmp_sdma_rht ) ;,0
596,<S2SV_ModStart> -> device_data ; device -> device_data = NULL ;,0
597,"<S2SV_ModStart>, int rep_quick, myisam_share * share <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; return - 1 ; }",0
598,"<S2SV_ModStart> q, 10 ) ; if ( q == ( char * ) NULL ) return ( DestroyImageList ( images ) ) ; if (",0
599,"<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } } else { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) { nblks",0
600,<S2SV_ModStart> } pairs = pcalloc <S2SV_ModEnd> ( pcount *,0
601,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( text [ 1 ] <S2SV_ModStart> ( yyscanner ) ; if ( text [ 2 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 3 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 4 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 5 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 6 ] == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) ; if ( text [ 7 ] == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) ; if ( text [ 8 ] == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) ; if ( text [ 9 ] == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) ; if ( text [ 10 ] == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ;,0
603,"<S2SV_ModStart> qend ) ; if ( mlen > sizeof ( query ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, query ) ; return HEAD_AGAIN ; }",0
604,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16x16_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; int16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i )",0
605,"<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_error ( error
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) <S2SV_ModEnd> goto out_drop_lock ; <S2SV_ModStart> goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) <S2SV_ModEnd> goto out_drop_lock ; <S2SV_ModStart> goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_unlock ; fh_unlock ( fh ) ;",0
607,<S2SV_ModStart> ue ; BUG_ON ( unfold_blk ( & tree_root ),0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ( strlen ( filename <S2SV_ModEnd> ) + 5 <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_node ( enode ) ; fput",0
609,<S2SV_ModStart> elen ) ; if ( pc -> lengthComponentIdent < 0 ) return - EINVAL ; <S2SV_ModStart> case 1 : if ( pc -> componentIdent [ 0 ]!= '\\0' ) return - EINVAL ; <S2SV_ModStart> case 2 : if ( pc -> componentIdent [ 0 ]!= '\\0' ) return - EINVAL ; <S2SV_ModStart> break ; case 3 : if ( pc -> componentIdent [ 0 ]!= '\\0' ) return - EINVAL ; <S2SV_ModStart> break ; case 4 : if ( pc -> componentIdent [ 0 ]!= '\\0' ) return - EINVAL ; <S2SV_ModStart> case 5 : if ( pc -> componentIdent [ 0 ]!= '\\0' ) return - EINVAL ; <S2SV_ModStart> break ; } if ( pc -> componentIdent [ 0 ]!= '\\0' ) return - EINVAL ;,0
610,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) return ;",0
611,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; }",0
612,"<S2SV_ModStart> userData, ctxt ->",0
613,<S2SV_ModStart> bool slow ; msg -> msg_namelen = 0,0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> trunc ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( (",0
615,"<S2SV_ModStart> int tagval ; if ( length > 4 ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> 4, <S2SV_blank> got <S2SV_blank> 4"" ) ; return False ; } <S2SV_ModStart> length ) ; if (! in_uint8s <S2SV_ModEnd> ( s, <S2SV_ModStart> return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_",0
616,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> data_size = ndo <S2SV_ModStart> int elt ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp += l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<ELT <S2SV_blank> %d>"", elt ) ) ; return (",0
617,<S2SV_ModStart> valuelen ) ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = valuelen ;,0
618,"<S2SV_ModStart> ) ; int rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; exit ( 1 ) ; } child = copy_file ( src, dest ) ; if ( child < 0 ) errExit ( ""copy_file"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( chown <S2SV_ModStart> ( dest, getuid ( ), getgid ( ) <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
620,<S2SV_ModStart> flags ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> comp ) ; kfree ( fcstats ) ;,0
621,"<S2SV_ModStart> value ) { <S2SV_ModEnd> value -> x <S2SV_ModStart> -> y = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MinF <S2SV_ModEnd> ( 0.0f,",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if (,0
623,<S2SV_ModStart> pte_unmap ( page_table ) ; lockdep_assert_held ( & mm -> mmap_sem ) ; <S2SV_ModStart> unlock ; } <S2SV_ModEnd> return VM_FAULT_SIGSEGV ;,0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
625,"<S2SV_ModStart> cnt ) { struct bpf_insn_aux_data * new_data, * old_data ; new_data = env -> insn_aux_data ; old_data = env -> insn_aux_data + off ; env -> insn_aux_data += off + cnt <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; env -> insn_aux_data = new_data ;",0
626,"<S2SV_ModStart> bp2 ; ND_TCHECK_16BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_hdr ) + EXTRACT_16BITS ( & ip6 -> ip6_plen ) - ( long ) ( bp - bp2 ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> trunc)"" ) ) ; goto trunc ; }",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; if ( ( <S2SV_ModStart> occ0 % rowsize )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile",0
630,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_",0
631,<S2SV_ModStart> ; if ( ctx == NULL ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; },0
632,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
633,"<S2SV_ModStart>, llbuff, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; }",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; unsigned char in ; int strindex = 0 ; unsigned long hex ; CURLcode res ; if (! ns ) return NULL ; while ( alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ( ISXDIGIT ( string [ 2 ] ) ) && CURLx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } if ( olen ) * olen = strindex ; return ns ; } <S2SV_null> <S2SV_null>",0
635,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
636,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } <S2SV_ModStart> again ; } if ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { status = - EINVAL ; break ; }",0
637,"<S2SV_ModStart> } if ( unlikely ( len < ring -> rx_buffersize ) ) { b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", len, ring -> rx_buffersize ) ; goto drop_recycle_buffer ; }",0
638,<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; def -> pdu_encode_forward = usm_secmod_rgenerate_out_msg ; def -> pdu_decode_forward = usm_secmod_process_in_msg ; def -> pdu_encode_reverse = usm_secmod_rgenerate_out_msg ; def -> pdu_decode_forward = usm_secmod_rgenerate_out_msg ; def -> pdu_encode_forward = usm_secmod_process_in_msg ; def -> pdu_encode_forward = usm_secmod_rgenerate_out_msg ; def -> pdu_decode_forward = usm_secmod_process_in_msg ;,0
639,"<S2SV_ModStart> |= SEEN ; strbuf_append ( & base, name <S2SV_ModEnd> ) ; continue <S2SV_ModStart> |= SEEN ; strbuf_append ( & base, path <S2SV_ModEnd> ) ; continue",0
640,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else",0
641,"<S2SV_ModStart> 0 ) { memcpy ( transp, src, 3 ) ; src += 3 ; } <S2SV_ModStart> 0 ) { memcpy ( transp, src, 3 ) ; src += 3 ; } <S2SV_ModStart> 0 ) { memcpy ( transp, src, 3 ) ; src += 3 ; }",0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ] ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_GENERR ; }",0
644,<S2SV_ModStart> bytes ) ; if ( bytes > ( ssize_t ) number_pixels ) return ( - 1 ) ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ; bytes -= ( ssize_t ) bytes ;,0
645,"<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; list_for_each_entry ( slave, tmp, & timeri -> timer_list_head, open_list ) { spin_lock_irq ( & timeri -> timer_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & timeri -> timer_slave_list ) ; <S2SV_ModEnd> slave -> timer <S2SV_ModStart> NULL ; } mutex_unlock ( & timeri -> timer_lock ) ;",0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank>",0
647,"<S2SV_ModStart> ; const char * <S2SV_ModEnd> arch = info <S2SV_ModStart> arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", * info -> cpu ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> return false ;",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> domain_device * dev <S2SV_ModEnd>, * n",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len ; <S2SV_ModEnd> char line [ <S2SV_ModStart> NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ 13 ] ; gboolean cap_dir ; char line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if (! netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), & ( s -> s3 -> rrec ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ;",0
652,<S2SV_ModStart> decode ) { const uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; const uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > ( uint_fast32_t ) gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) { gifFilePtr -> Image. Width = originalWidth ; } else { const uint_fast32_t originalWidth = gifFilePtr -> Image. Width ; const uint_fast32_t originalHeight = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > ( uint_fast32_t ) gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ) ; if ( newRasterSize > ( uint_fast32_t ) gifFilePtr -> Image. Width * gifFilePtr -> Image. Height * info -> originalHeight ) { uint_fast32_t newRasterSize = gifFile,0
653,"<S2SV_ModStart> can_read_key : if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error2 ; } ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = <S2SV_ModEnd> - EOPNOTSUPP ; <S2SV_ModStart> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } <S2SV_ModEnd> error2 : key_put",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError",0
656,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; if ( tmp > JAS_CAST ( ulonglong, tmp ) ) return - 1 ; * val = ( tmp & 0x7fffffff )? ( JAS_CAST ( longlong, tmp ) : JAS_CAST ( longlong <S2SV_ModEnd>, ( ( <S2SV_ModStart> & 0x7fffffff ) + 1 ) ) ) : JAS_CAST ( longlong <S2SV_ModEnd>, tmp )",0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = ~ 0 ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = ~ 0 ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. add = args -> m_cswp. add ; rm -> atomic. op_m_cswp. nocarry_mask = ~ 0 ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
659,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) ) return - 1 ; if (",0
661,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) NULL, 0 ) ; return ; } <S2SV_ModStart> s ++ ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) NULL, 0 ) ; return ; } <S2SV_ModStart> s ++ ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) NULL, 0 ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> * t &&! isspace ( * t ) ) t ++ ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) NULL, 0 ) ; return ; } <S2SV_ModEnd> if ( *",0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del (",0
663,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
664,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL )",0
665,"<S2SV_ModStart> return 1 ; if ( sk -> sk_state == DCCP_LISTEN ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; <S2SV_ModStart> goto discard ; } if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_RESPOND ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_REQUESTING && dh -> dccph_type == DCCP_PKT_RESPONSE ) { if ( dp -> dccps_role == DCCP_ROLE_CLIENT && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ;",0
666,<S2SV_ModStart> msixcap ; assert ( msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
667,"<S2SV_ModStart> ; upperdentry = d_find_alias <S2SV_ModEnd> ( dentry ) <S2SV_ModStart> dentry ) ; if ( upperdentry ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
668,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
669,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_verify ( ssh, pkblob, blen ) )!= 0 || ( r = sshpkt_verify ( ssh, pkblob, blen ) )!= 0 ) fatal ( ""%s: <S2SV_blank> packet <S2SV_blank> parsing: <S2SV_blank> %s"", __func__, ssh_err ( r ) ) ; return 0 ;",0
670,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int max ) { vpx_read_bit_buffer_t * const ptr = rb -> read_buf ; vpx_read_bit_buffer_t * const ptr = rb -> read_buf ; vpx_read_bit_buffer_t * const ptr = rb -> read_buf ; vpx_read_bit_buffer_t * const ptr = get_unsigned_bits ( ptr ) ; vpx_rb_read_literal <S2SV_ModEnd> ( rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb, <S2SV_ModStart> ( rb, ptr <S2SV_ModEnd> ) ; return",0
671,"<S2SV_ModStart> 1 ) ; if (! mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; return - 1 ; }",0
672,"<S2SV_ModStart> NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; free ( is ) ; return retval ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) *",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec * prec = comp -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } <S2SV_ModStart> ++ ) { Jpeg2000Prec * prec = comp -> band + bandno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } av_freep ( & comp -> band ) ; } ff_dwt_destroy ( & comp -> dwt ) ; av_freep ( & comp -> i_data ) ; av_freep ( & comp -> f_data ) ;,0
674,"<S2SV_ModStart> name ) ; if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else {",0
675,"<S2SV_ModStart> ) ) ; err = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( err ) goto done ;",0
676,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMP * cpi, const MV_REFERENCE_FRAME * sf ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart>. lossless ) { return ONLY_4X4 ; } else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD",0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> ; if ( <S2SV_ModEnd> magfact < 0 <S2SV_ModStart> magfact < 0 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact < 0 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100 || magfact > 100,0
679,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > sz,0
680,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else { return - 1 ; } },0
681,"<S2SV_ModStart> ) ) { if ( ( i = cdf_write_short_stream ( ms, & h, & sst, & scn ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> write <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_write_dir ( ms, & h, & dir, & sst, & dir ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> write <S2SV_blank> directory"" ; goto out3 ; } if ( ( i = cdf_write_short_stream ( ms, & h, & sst, & scn, CDF_SHORT_SEC_SIZE ( & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> write <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_write_short_stream ( ms, & h, & sst, & scn, CDF_SHORT_SEC_SIZE ( & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> write <S2SV_blank> short <S2SV_blank> stream"" ; goto out5 ; } if ( ( i = cdf_write_short_stream ( ms, & h, & sat, & dir, & s",0
682,<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof,0
683,"<S2SV_ModStart> } } if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,<S2SV_ModStart> -> _eip ; if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; break ; } <S2SV_ModStart> -> _eip ; if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; break ; },0
687,"<S2SV_ModStart> imap_quote_string ( errstr <S2SV_ModEnd>, sizeof (",0
688,"<S2SV_ModStart> * p, void * end, struct ceph_crypto_key * <S2SV_ModStart> th ; void * dp, * dend ; int dlen ; char is_enc ; struct ceph_crypto_key old_key ; void * tp, * tpend <S2SV_ModEnd> ; struct ceph_timespec <S2SV_ModStart> ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( ""decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", TEMP_TICKET_BUF_LEN ) ; dp = dbuf ; dend = dp + TEMP_TICKET_BUF_LEN ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto out ; ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, UINT32_MAX ) ) ) ;",0
690,"<S2SV_ModStart> -> init_msg ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_INVALID_PARAMETER ) ; goto err ; }",0
691,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = sd_event_add_io ( & b -> io_event_source, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { r = log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank>",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
693,<S2SV_ModStart> = NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_IDENT <S2SV_ModStart> ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF <S2SV_ModStart>. entry ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF,0
694,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
695,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq,",0
696,<S2SV_ModStart> int err = 0 ; struct sockaddr_storage addr ; <S2SV_ModStart> = 0 ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; <S2SV_ModStart> addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family =,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u"",",0
700,"<S2SV_ModStart> Rec. RecordLength ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
701,<S2SV_ModStart> ctxt ) { int rc ; <S2SV_ModStart> ctxt ) { rc = <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; } } <S2SV_ModStart> ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc <S2SV_ModEnd> ; } <S2SV_null>,0
702,,1
703,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
704,"<S2SV_ModStart> : if ( psf -> header. indx + position > <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> } ; if ( psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf -> header. end <S2SV_ModEnd>, 1, <S2SV_ModStart> } ; if ( psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf -> header. end <S2SV_ModEnd>, 1, <S2SV_ModStart> } ; if ( psf -> header. indx + position > <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf -> header. end <S2SV_ModEnd>, 1, <S2SV_ModStart> psf ) ; psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf ) ; psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf ) ; psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf ) ; psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf ) ; psf -> header. end <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> psf -> header. end <S2SV_ModEnd>, 1, <S2SV_ModStart> psf )",0
705,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_",0
706,"<S2SV_ModStart> ; uint32_t track_size ; uint8_t * sysex_store <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } sysex_store = ( uint8_t * ) midi_data ; if ( sysex_store == NULL ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_MIDI, NULL, 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( memcmp ( midi_data, ""MThd"", 4 ) ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } midi_",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ;",0
708,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = udf_read_tagged <S2SV_ModStart> TAG_IDENT_LVD ) ; if (! bh ) goto out_bh ; <S2SV_ModStart> bh -> b_data ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else if (",0
709,"<S2SV_ModStart> long n ; jas_uint_fast16_t numplanes ; jas_uint_fast16_t numplanes ; jas_uint_fast16_t numplanes ; jas_uint_t numplanes ; jas_uint_t numplanes ; jas_uint_t depth ; jas_uint_fast16_t xres ; jas_uint_fast16_t yres ; jas_uint_t numplanes ; numcmpts = ( jas_uint_fast16_t ) sizeof ( cmptparms ) ; if ( numplanes > 3 ) { jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; return 0 ; } numplanes = bmp_numplanes ( info ) ; numplanes = bmp_numplanes ( info ) ; if ( numplanes > 3 ) { jas_eprintf ( ""warning: <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst > ps_bitstrm -> u4_nxt_word ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
712,"<S2SV_ModStart> save_text_from_text_view ( g_tv_comment <S2SV_ModEnd>, FILENAME_COMMENT )",0
713,"<S2SV_ModStart> media_pad_desc pad ; <S2SV_ModEnd> media_device_kpad_to_upad ( & <S2SV_ModStart> continue ; media_device_kpad_to_upad <S2SV_ModEnd> ( entity -> <S2SV_ModStart> source, & link ) ; link. flags = entity -> links [ l ]. flags ; if ( copy_to_user ( & link, & links -> links [ l ], sizeof ( link ) ) ) return - EFAULT ;",0
714,<S2SV_ModStart> -> type == MD_LINE_FENCEDCODE && CH ( off ) == _T ( '>' ) && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( CH ( off ) == _T ( '>' ) && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( CH ( off ) == _T ( '>' ) && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( CH ( off ) == _T ( '>' ) && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( CH ( off ) == _T ( '>' ) && line -> indent > 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_,0
715,"<S2SV_ModStart>, extent ; size_t <S2SV_ModEnd> width, height <S2SV_ModStart> height, length ; if ( sun_info. type == RT_ENCODED ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( sun_info. magic == 0x59a66a95 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; sun_info. magic = 0x59a66a95 ; sun_info. depth = sun_info. depth ; sun_info. length = sun_info. length ; sun_info. type = sun_info. maptype ; sun_info. maplength = sun_info. maplength ; } if ( sun_info. magic == 0x59a66a95 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; sun_info. bytes_per_line = sun_info. width * sun_info. height * sun_info. depth * sun_info. length ; sun_info. extent = sun_info. depth * sun_info. length ; sun_info. type = sun_info. type ; sun_",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, hdb_entry_ex * krbtgt <S2SV_ModEnd>, krb5_principals spp",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = ireq ->,1
719,<S2SV_ModStart> struct xmlparser parser ; data -> l_tail = NULL ; data -> l_taillen = 0 ;,0
720,"<S2SV_ModStart> ( offset!= 0 && skb_transport_offset ( skb ) + tlen + offset <S2SV_ModStart>, csum_partial ( skb_transport_header ( skb ) + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> 0 ) ) ; msg -> msg_namelen = 0 ;",0
721,"<S2SV_ModStart> pfn ) ; kvm_iommu_put_pages ( kvm, slot -> base_gfn, slot -> npages",0
722,"<S2SV_ModStart> ], cmd -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len > sizeof ( b ) - ( 6 - cmd -> msg_len ) ) return - EINVAL ;",0
723,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] << 24 ) ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 0 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 2 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
725,"<S2SV_ModStart> free_nid * i <S2SV_ModEnd> ; struct nat_entry <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return false ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS )",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; <S2SV_ModEnd> flags -> deblocking_level <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> color_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> color_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # endif,0
727,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely (! RING_GET_REQUEST ( & vif -> tx, cons ) ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ;",0
728,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ;,1
729,<S2SV_ModStart> r1. event = event ; r1. tstamp = * tstamp ; r1. val = resolution,0
730,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; if ( pos + size > ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } pos += gettoalign ( pos, & h, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> many <S2SV_blank> results"" ) ; return 0 ; } if ( pos + size > ld ) { luaL_error ( L, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; return 0 ; } if ( size == 0 ) { if (! lua_isnumber ( L, - 1 ) ) luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; size = lua_tonumber ( L, - 1 ) ; lua_pop ( L, 1 ) ; size = lua_tonumber ( L, - 1 ) ; luaL_argcheck ( L, pos + size <= ld,",0
731,"<S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( * tptr, sizeof ( struct olsr_msg4 ) ) ; <S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( * tptr, sizeof ( struct olsr_msg6 ) ) ; <S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( * tptr, sizeof ( struct olsr_hna4 ) ) ; if (! msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msgptr. v4 -> msg_seq ), msgptr. v4 -> msg_len ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", msgptr. v4 -> msg_seq ), msgptr. v4 -> msg_len ) ; goto trunc ; }",0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; return ; } <S2SV_ModStart> (! body -> data ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; return ; } n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; int data_len = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_",0
733,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
734,"<S2SV_ModStart> src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> rv = copy_file <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; return 1 ; }",0
735,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; },0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely ( path [ depth ]. p_ext < EXT_FIRST_EXTENT ( path [ depth ]. p_hdr ) ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> ; if ( p_num_sfb [ LOW ] == 0 ) { ptr_hbe_txposer -> stop_patch = 1 ; } else { if ( p_num_sfb [ LOW ] == 0 ) { ptr_hbe_txposer -> stop_patch = 1 ; } else { <S2SV_ModStart> } else { if ( p_num_sfb [ LOW ] == 0 ) { ptr_hbe_txposer -> stop_patch = 1 ; } else { ptr_hbe_txposer -> stop_patch = 0 ; } },0
739,"<S2SV_ModStart> [ 2 ] ; unsigned short x_origin, y_origin ; unsigned short image_w, image_h ; unsigned short cmap_entry_size ; # if 0 x_origin = get_ushort ( & tga [ 6 ] ) ; y_origin = get_ushort ( & tga [ 8 ] ) ; image_w = get_ushort ( & tga [ 9 ] ) ; image_h = get_ushort ( & tga [ 10 ] ) ; # endif <S2SV_ModStart> # if 0 x_origin = get_ushort ( & tga [ 9 ] ) ; # endif <S2SV_ModStart> 10 ] ) ; image_w = get_ushort ( & tga [ 11 ] ) ; image_h = get_ushort ( & tga [ 13 ] ) ; pixel_depth = tga [ 15 ] ; image_desc = tga [ 16 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * flip_image = ( unsigned int ) image_desc ; * bits_per_pixel = ( unsigned int ) image_w ; * height = ( unsigned int ) image",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { u64 rem ; <S2SV_ModStart> CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { rem = div_u64_rem ( cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) rem = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; if ( rem > 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem > 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; else tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; if ( rem > 0 ) tp -> tv_sec = div_u64_rem ( rem, N",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> lua_authz_provider_spec * prov_spec <S2SV_ModStart> r ) ; luaL_checkstack ( L, prov_spec -> args -> nelts ) ; int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; if ( spec == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; }",0
744,<S2SV_ModStart> * prev ; <S2SV_ModEnd> error = security_mmap_addr <S2SV_ModStart> address ) ; if ( error ) return error <S2SV_ModEnd> ; prev = <S2SV_ModStart> VM_GROWSDOWN ) && ( <S2SV_ModEnd> vma -> vm_flags <S2SV_ModStart> VM_WRITE | VM_READ | VM_EXEC ) ) ) { if ( address - prev -> vm_start < stack_guard_gap ) return - ENOMEM ; } <S2SV_ModEnd> vma -> vm_pgoff,0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( inode, & mode, & acl ) ; error = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( error ) return error ; error = xfs_set_mode ( inode, mode, & acl ) ; if ( error ) return error ; error = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( error <= 0 ) { <S2SV_ModEnd> acl = NULL <S2SV_ModStart> return error ; } <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> ( fsname, target <S2SV_ModEnd>, fstype, <S2SV_ModStart>, mountflags & MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart> ) ) { if ( mountflags & MS_BIND ) { INFO ( ""mounting <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } else { INFO ( ""mounting <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } } # endif if ( mountflags & MS_BIND ) { if ( mountflags & MS_RDONLY ) rqd_flags |= MS_RDONLY ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NO",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> info -> si_overrun <S2SV_ModStart> -> si_overrun += <S2SV_ModEnd> timr -> it_overrun_last,0
749,<S2SV_ModStart> ; if (! proto_end ) return 0 ; if (,0
750,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
751,<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> read && <S2SV_ModEnd> ret > 0 <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
752,<S2SV_ModStart> ; if ( opt -> srr &&! skb_is_gso ( skb ) ) { IPCB ( skb ) -> flags |= IPSKB_FORWARDED ; return NET_RX_SUCCESS ; },0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; if (! new_o ) { pr_info ( ""trusted_key: <S2SV_blank> datablob <S2SV_blank> failed <S2SV_blank> (%d)\\n"", datalen ) ; kfree ( new_o ) ; goto out ; } new_p = trusted_payload_alloc ( key ) ; if (! new_p ) { ret = - ENOMEM ; goto out ; } datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p",0
755,<S2SV_ModStart> } v |= ( ( jas_uint_fast32_t ) <S2SV_ModEnd> c << 24,0
756,"<S2SV_ModStart> ; while ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { if ( skb -> len < 4 ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( skb -> len < 4 ) { kfree_skb ( skb ) ; continue ; } dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } }",0
757,"<S2SV_ModStart> out_free ; } kvm_put_memory_region ( kvm, mem ) ; kvm_put_memory_region ( kvm, mem ) ;",0
758,<S2SV_ModStart>!= NULL ) { rcu_read_unlock ( ) ; <S2SV_ModStart> indev!= NULL ) { rcu_read_unlock ( ) ; return NF_DROP ; },0
759,"<S2SV_ModStart> fdt ) ; if ( base < 0 ) return - FDT_ERR_BADF ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_",0
760,"<S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
761,"<S2SV_ModStart> case NID_pkcs7_encrypted : if ( p7 -> d. encrypted!= NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_ENCRYPTED_KEY_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ;",0
763,"<S2SV_ModStart> if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_DETACHED )",0
764,"<S2SV_ModStart> priv ; int ret, wo ; if ( wlen < 0 || wlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> data_mutex ) ; ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret ; } <S2SV_ModEnd> ret = dvb_usb_generic_rw",0
765,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ;",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; btrfs_dir_item_init ( dir_item ) ; if ( btrfs_dir_item_init ( dir_item ) ) { ret = btrfs_add_dir_item ( dir_item, root ) ; if ( ret ) { ret = btrfs_add_dir_item ( dir_item, root ) ; if ( ret ) { ret = btrfs_add_dir_item ( dir_item, root ) ; if ( ret ) { ret = btrfs_dir_item_init ( dir_item ) ; if ( ret ) { ret = btrfs_dir_item_init ( dir_item, root ) ; if ( ret ) { ret = - EEXIST ; goto no_free_dir_item ; } } else { ret = btrfs_add_dir_item ( dir_item, root ) ; if ( ret ) { ret = btrfs_dir_item_add ( dir_item, root ) ; if ( ret ) { ret = btrfs_dir_item_init ( dir_item, root ) ; if ( ret ) { ret = btr",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> s ) ; unix_tot_inflight -- ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> unix_tot_inflight -- ; unix_tot_sockets -- ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> map_info -> channel_map ) { size_t chanmap_size ; if ( psf -> channel_map == NULL ) return SFE_MALLOC_FAILED ; <S2SV_ModStart> chanmap_size = psf -> <S2SV_ModEnd> sf. channels,0
771,"<S2SV_ModStart> { if ( sf -> x_scale_fp!= REF_INVALID_SCALE ) { sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp!= REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vp9_convolve_avg ;",0
772,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ; if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart> ; if ( unlikely ( count > OE_SSIZE_MAX ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { sock_kfree_s ( sk, opt, opt -> tot_len ) ; return ; } <S2SV_ModEnd> sock_kfree_s ( sk <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
777,"<S2SV_ModStart> ; BIO * cmsbio <S2SV_ModEnd> = NULL, <S2SV_ModStart> tmpin = NULL <S2SV_ModEnd> ; if (",0
778,"<S2SV_ModStart> ; if (! sock_flag ( sk, SOCK_DEAD ) ) return - ENOTSOCK ;",0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_pf_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
780,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>",0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = <S2SV_ModStart> struct netdev_notifier_info info <S2SV_ModEnd> ; netdev_notifier_info_init ( <S2SV_ModStart> & info ; <S2SV_ModEnd> return masq_device_event (,0
782,<S2SV_ModStart> ( current -> mm <S2SV_ModEnd> ) { leave_mm <S2SV_ModStart> ( smp_processor_id ( ) <S2SV_ModEnd> ) ; goto,0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; }",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ; ) { if ( i >= sizeof ( temp ) ) { fclose ( fp ) ; return NULL ; } <S2SV_ModEnd> temp [ i,0
785,<S2SV_ModStart> task -> slow_task <S2SV_ModEnd> ) ) return,0
786,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return ; }",0
787,"<S2SV_ModStart> = 0 ; if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; }",0
788,"<S2SV_ModStart> plist_data_t ) ; if (! plist_data_ok ( bplist ) ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x: <S2SV_blank> found <S2SV_blank> 0x%02x, <S2SV_blank> expected <S2SV_blank> 0x%02x, <S2SV_blank> found <S2SV_blank> 0x%02x, <S2SV_blank> expected <S2SV_blank> 0x%02x\\n"", __func__, type, * * object, BPLIST_UINT ) ; return NULL ; }",0
789,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1IHR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ; } ksz8851WriteReg ( interface, KSZ8851_MARH, htons ( interface -> macAddr. w [ 0 ] ) ) ; ksz8851WriteReg ( interface, KSZ8851_MARM, htons ( interface -> macAddr. w [ 1 ] ) ) ; ksz8851WriteReg ( interface, KSZ8851_M",0
790,<S2SV_ModStart> all_channels_lock ) ; if ( pch -> file. dead ) { atomic_inc ( & pch -> file. refcnt ) ; ppp_hangup_channel ( pch ) ; return ; },0
791,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> XATTR_REPLACE ) { struct btrfs_dir_item * dir_item = NULL ; <S2SV_ModStart> out ; } dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } else if (! di ) { ret = - ENODATA ; goto out ; } <S2SV_ModEnd> di = btrfs_lookup_xattr <S2SV_ModStart> trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } <S2SV_ModEnd> di = btrfs_lookup_xattr <S2SV_ModStart>, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } <S2SV_ModEnd> di = btrfs_lookup_xattr <S2SV_ModStart>",0
792,"<S2SV_ModStart> 0xbf ) return 1 ; if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; }",0
793,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart>, plane, vpx_foreach_transformed_block_in_plane <S2SV_ModEnd>, & arg",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; if (",0
796,<S2SV_ModStart> NEED_IP ( 1 <S2SV_ModEnd> ) && HAVE_OP <S2SV_ModStart> } else # endif { if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_ModStart> t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; } state = 4 ; continue ; } if ( state!= 4 ) { next = t & 3 ; op [ 0 ] = m_pos [ 0 ] ; op [ 1 ] = m_pos [ 1 ] ; op [ 2 ] = m_pos [ 2 ] ; op [ 3 ] = m_pos [ 3 ] ; op [ 4 ] = m_pos [ 4 ] ; op [ 5 ] = m_pos [ 5 ] ; op [ 6 ] = m_pos [ 6 ] ; op [ 7 ] = m_pos [ 7 ] ; op [ 8 ] = m_pos [ 8 ] ; op [ 9 ] = m_pos [ 9 ] ; op [ 10 ] = m_pos [ 10 ] ; op [ 12 ] = m_pos [ 12 ] ; op [ 13 ] = m_pos [ 13 ] ; op [ 14 ] = m,0
797,"<S2SV_ModStart> if ( fit_check_format <S2SV_ModEnd> ( fit, <S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ;",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> (! vmx_msr_bitmap_nested ) goto out6 <S2SV_ModEnd> ; vmx_msr_bitmap_legacy_x2apic = <S2SV_ModStart> (! vmx_msr_bitmap_legacy_x2apic ) goto out7 <S2SV_ModEnd> ; vmx_msr_bitmap_longmode_x2apic = <S2SV_ModStart> (! vmx_msr_bitmap_longmode_x2apic ) goto out7 <S2SV_ModEnd> ; vmx_msr_bitmap_nested =,0
800,"<S2SV_ModStart> ( sdb, ""version_info"", ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ], ( ut8 * ) & dfs [ cnt ] ) ; if (! sdb ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { link_section_name = & bin -> shstrtab [ link_shdr -> sh_name ] ; } if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return NULL ; } if ( link_shdr && link_",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ;",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,<S2SV_ModStart> -= INDENT_INCR ; } else { mode -> indent_level = 0 ; } <S2SV_ModStart> == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; },0
806,"<S2SV_ModStart> tail ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> < <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> %"" SIZE_T_FORMAT ""u]"" <S2SV_ModEnd> ) ) ;",0
807,<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyssa += ( N ) ) int yyssp = ( N ) ) ; yytype_int16 * yyss = yyssa ; yytype_int16 * yyvs = yyvsa ; yytype_int16 * yyssp = yyvs ; yytype_int16 * yyvs1 = yyvs ; yytype_int16 * yyss = yyss ; yytype_int16 * yyss = yyss ; # define YYSTACK ( N ) ( yyssa += ( N ) ) int yyssp = ( N ) ) ; yytype_int16 * yyss = yyss ; yytype_int16 * yyvs = yyvsa ; yytype_int16 * yyssp = yyvs ; yytype_int16 * yyvs = yyvs ; yytype_int16 * yyss1 = yyss ; yytype_,0
808,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,"<S2SV_ModStart> ; if ( test_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
811,<S2SV_ModStart> : { struct hci_filter_desc * f = <S2SV_ModEnd> hci_pi ( sk <S2SV_ModStart> hci_pi ( sk ) -> filter ; uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask = f -> event_mask,0
812,"<S2SV_ModStart> int n = <S2SV_ModEnd> ( int ) <S2SV_ModStart> - data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
813,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
814,"<S2SV_ModStart> peer. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
815,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fib_size ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> too <S2SV_blank> big <S2SV_blank> to <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if (",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> value <S2SV_blank> (%d)"", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : bh_unlock_sock ( sk <S2SV_ModEnd> ) ; sctp_association_put",0
818,"<S2SV_ModStart> input_data, size_t <S2SV_ModEnd> flags, RE_MATCH_CALLBACK_FUNC <S2SV_ModStart> { action = ACTION_NONE <S2SV_ModEnd> ; break ; <S2SV_ModStart> } # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else character_size = 1 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & storage -> fiber_pool, & fiber ) ; fail_if_error ( error ) ;",0
819,"<S2SV_ModStart>, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart>, int * <S2SV_ModEnd> returnintra ) { <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING unsigned int <S2SV_ModEnd> zero_mv_sse = INT_MAX <S2SV_ModStart> = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # endif <S2SV_ModStart> best_rd_sse = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = best_ref_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_CPUID ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm,",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
822,"<S2SV_ModStart> const cdf_stream_t * sst, const cdf_property_info_header_t * info <S2SV_ModEnd>, size_t count <S2SV_ModStart> break ; } m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m == - 1? - 2 : m <S2SV_ModEnd> ; } <S2SV_null>",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc <S2SV_ModEnd>, u1_seq_parameter_set_id ; <S2SV_ModStart> ps_seq ) ; ps_seq -> u1_level_idc = u1_level_idc ; ps_seq -> u1_seq_parameter_set_id = 0",0
824,"<S2SV_ModStart> ) ; err |= put_user ( length, & up -> length ) ; if ( err ) return - EFAULT ;",0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ) { VP9_COMP <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( params <S2SV_ModStart> NULL ) return VPX_CODEC_INVALID_PARAM <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> spatial_layer_id = params -> spatial_layer ; cpi -> svc. <S2SV_ModEnd> temporal_layer_id = params <S2SV_ModStart> temporal_layer ; cpi <S2SV_ModEnd> -> lst_fb_idx = <S2SV_ModStart> lst_fb_idx ; cpi <S2SV_ModEnd> -> gld_fb_idx = <S2SV_ModStart> -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx",0
826,"<S2SV_ModStart> ) ) ; if ( prev ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_REASMFAILS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & prev -> frag_off - skb_network_header ( skb ) ) ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_REASMFAILS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) - nhoff ) ) ; }",0
827,"<S2SV_ModStart> { uint16 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; copyFunc cf ; uint32 width, length ; TIFFGetFieldDefaulted ( in, TIFFTAG_WIDTH, & width ) ; TIFFGetField ( in, TIFFTAG_LENGTH, & length ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( length!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, jpegcolormode ) ; else TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, jpegcolormode ) ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_SAMPLESPERPIXEL, samplesper",0
828,"<S2SV_ModStart> a ) { struct stat st ; int r ; if ( a -> flags & ARCHIVE_EXTRACT_NOFOLLOW ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } r = lstat ( a -> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModEnd> a -> pst <S2SV_ModStart> NULL ; if (! S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive,",0
829,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
830,"<S2SV_ModStart> int link_count ; struct buffer_head * nbh = NULL ; <S2SV_ModStart> ibh ) { struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; make_bad_inode ( inode ) ; return ; } if ( udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) {",0
831,"<S2SV_ModStart> ; const TX_SIZE tx_size_uv = mbmi -> tx_size_uv ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int index = shift_y ; * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask_uv",0
832,"<S2SV_ModStart> dst_size ) { const uint16_t namelen = ff_amf_tag_size ( data, data_end ) ; int <S2SV_ModEnd> len ; while <S2SV_ModStart> data < data_end ) { if ( len >= data_end - data ) return - 1 ; if ( len >= data_end - data ) return - 1 ; data += len ; } if ( data_end - data < 3 ) return - 1 ; data ++ ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if (! size ) break ; if ( size < 0 || size >= data_end - data ) return - 1 ; data += size ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) return - 1 ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) return - 1 ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) break ; if ( size < 0 || size >= data_end - data ) return - 1 ; data += size ; if",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
834,"<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> get_config ( vdev <S2SV_ModEnd>, vdev ->",0
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; TIFFSwabArrayOfShort <S2SV_ModEnd> ( wp, <S2SV_ModStart> wc ) ; return 0 ;",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option: <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_saddr ; inet_opt -> opt ->",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl <S2SV_ModEnd> ; pid_t <S2SV_ModStart> instance ) ; sprintf ( s_path, ""%s%s%d"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( *",0
840,<S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> < ( int ) <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> < ( int ) <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> < ( int ) <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> < ( int ) <S2SV_ModEnd> sizeof ( effect_param_t <S2SV_ModStart> < ( int ) <S2SV_ModEnd> sizeof ( effect_param_t,0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
843,"<S2SV_ModStart> OP_ENDCATCH ) ; if ( F -> strict ) jsC_error ( J, F, ""redefining <S2SV_blank> \'strict\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; <S2SV_ModStart> OP_JUMP ) ; if ( F -> strict ) jsC_error ( J, F, ""redefining <S2SV_blank> \'strict\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ;",0
844,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { LIBXSMM_ERROR ( io_generated_code, LIBXSMM_ERR_CSC_PARSE_ERROR ) ; return ; } if (",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> ; int length ; RD_BOOL is_fastpath ; uint8 fastpath_hdr ; struct stream packet = NULL ; <S2SV_ModStart> return False ; packet = in_stream ( s ) ; if ( packet == NULL ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> packet=%d"", packet ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_end ( s ) ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> packet=%d"", packet ) ; return False ; } <S2SV_ModEnd> ber_parse_header ( s <S2SV_ModStart> length ) ; mcs_parse_domain_params ( s ) ; sec_process_mcs_data ( s ) ; return False ; }",0
847,<S2SV_ModStart> ; if ( stkt_server!= NULL ) { stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; } stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_,0
848,<S2SV_ModStart> ) ) { if ( ( ctxt -> options & XML_PARSE_NEW10 ) == 0 ) { if ( ( ctxt -> instate == XML_PARSER_EOF ) ) { return ( NULL ) ; },0
849,"<S2SV_ModStart> ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> setup <S2SV_blank> macvlans\\n"" ) ; return ret ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> ; if ( unlikely ( extent. count > map -> nr_extents ) ) { ret = - EINVAL ; goto out ; },0
852,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
853,"<S2SV_ModStart> sr ) { smb2fid_t smb2fid ; <S2SV_ModStart> ) ; } if ( smb2fid. persistent == 0 ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; } <S2SV_ModStart> ) ; } if ( smb2fid. temporal == 0 ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; }",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> -> mode_info_context ; memset <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, 0, sizeof ( lf_mic -> mode_info_context ) ) ;",0
856,<S2SV_ModStart> = AF_TIPC ; <S2SV_ModEnd> addr -> addrtype,0
857,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( <S2SV_ModStart> user_alloc && ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) ) goto out ; if (,0
858,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
859,"<S2SV_ModStart> = 0 ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream",0
860,"<S2SV_ModStart> len ) { PyObject * u ; PyObject * buf ; PyObject * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t i ; PyObject * w ; int kind ; int data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } if ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } len = p - buf ; s = buf ;",0
861,"<S2SV_ModStart> ) ) { if ( strict_mode ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> strict <S2SV_blank> mode <S2SV_blank> argument."", function ) ; return ( - 1 ) ; } <S2SV_ModStart> ) ) { if ( strict_mode ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> strict <S2SV_blank> mode <S2SV_blank> argument."", function ) ; return ( - 1 ) ; } <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> argument."", function ) ; return ( - 1 ) ; }",0
862,"<S2SV_ModStart> uint32_t bcount ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if ( bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
864,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; if ( timeri -> flags & SNDRV_TIMER_IFLG_SLAVE ) { spin_lock_irqsave ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_SLAVE ; }",0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, targisdir, <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart>, omode, mask <S2SV_ModEnd> ; if (",0
866,"<S2SV_ModStart> } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> } else if ( myentity_find_ext ( target ) == NULL ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> changes."" ), channel ) ; return ; } if ( chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> changes."" ), channel ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> changes."" ), channel ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,<S2SV_ModStart> goto error ; ast -> sub_ctx = avformat_new_context ( ) ; if (! ast -> sub_ctx ) { avformat_free_context ( ast ) ; goto error ; } <S2SV_ModEnd> if ( ff_copy_whiteblacklists,0
869,"<S2SV_ModStart> null_server ; int <S2SV_ModEnd> need_error_free = 0 <S2SV_ModStart> retval ) ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else if ( strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { if ( version && strcmp ( inbuf. data, version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } else { if (! problem ) { problem",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
872,"<S2SV_ModStart> = 0xAA ; memset ( dptr, 0, ROSE_ADDR_LEN ) ; memcpy ( dptr, & rose -> dest_addr, 0, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN",0
873,<S2SV_ModStart> = new_ns ; if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { mntget ( & p -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } else if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { mntget ( & q -> mnt ) ; pwdmnt = & q -> mnt ; },0
874,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_INFO <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES,0
875,<S2SV_ModStart> = php_zip_get_property_ptr ; zip_object_handlers. get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; if (,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; }",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,<S2SV_ModStart> sent = 0 ; if ( n_vec == 0 ) return - EINVAL,0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return 0 ;,0
881,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs <S2SV_ModStart> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; else subseqEntry. value = 0 ;",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; <S2SV_ModEnd> isk -> inet_num,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
885,<S2SV_ModStart> ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM,0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode",0
887,"<S2SV_ModStart> * inotify_new_group ( struct fsnotify_group * group, unsigned int <S2SV_ModEnd> max_events ) { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> -> inotify_data.",0
888,<S2SV_ModStart> p < 4 && in -> data [ p ] && in -> linesize [ p ],0
889,"<S2SV_ModStart> [ 1 ] && screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ; if ( screen -> buffers [ 0 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] -> flags ) ; if ( screen -> buffers [ 1 ] -> flags & VTERM_SCREEN_FLAG_HIGHBITDEPTH ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] -> flags ) ;",0
890,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
891,"<S2SV_ModStart> = 0 ; TIFFLen32 <S2SV_ModEnd> nstrips = TIFFNumberOfStrips <S2SV_ModStart> in ) ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strip <S2SV_blank> points <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nstrips ) ; return 0 ; }",0
892,<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> const char need_to_append_dot <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { return NULL ; },0
893,<S2SV_ModStart> err = nanosleep_safe <S2SV_ModEnd> ( & delay,0
894,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
895,"<S2SV_ModStart>, number_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = number_planes_filled ; number_planes_filled = number_planes_filled ; pixel_info = ( MemoryInfo * ) malloc ( number_pixels ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_pixels = number_planes_filled ; pixel_info = ( MemoryInfo * ) malloc ( number_pixels ) ; if ( pixel_info == ( MemoryInfo * ) NULL ) pixel_info = ( MemoryInfo * ) malloc (",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if ( context -> PlaneByteCount [ 0 ] == 0 ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount [ 0 ] ) return FALSE ; if ( planeSize > UINT32_MAX / context -> PlaneByteCount [ 0 ] ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount [ 0 ] ) return FALSE <S2SV_ModStart> 0xFF ) ; else if ( planeSize > UINT32_MAX / context -> PlaneByteCount [ i ] ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount [ i ] ) return FALSE <S2SV_ModStart> < originalSize ) return FALSE ; if ( planeSize > UINT32_MAX / context -> PlaneByteCount [ i ] ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount [ i ] ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount [ i ] ) return FALSE ;,0
897,<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCAN_I ( inode ) ; if (! ei -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! ei -> i_sb -> s_cop -> empty_dir ( inode ) ) return -,0
898,"<S2SV_ModStart> { httpSetHostName ( state <S2SV_ModEnd>, stok (",0
899,"<S2SV_ModStart> -> match,. match_data. type_data = type -> match_data. type_data <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data. cmp,. match_data.",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,<S2SV_ModStart> size ) { size_t alloc_size = ( size + 1 ) / sizeof ( * ptr ) ; if ( alloc_size < 0 ) { return NULL ; } <S2SV_ModStart> ( ptr ) { free ( ptr ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
904,<S2SV_ModStart> cfq_exit ( ioc <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } kfree ( ioc ) ;,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; <S2SV_ModEnd> PyObject * dict <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { PyErr_Clear ( ) ; return NULL ; } Py_DECREF ( dict ) ; res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res <S2SV_ModEnd> ; } <S2SV_null>",0
906,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ( event, <S2SV_ModEnd> ( u64 __user <S2SV_ModStart> return ret ; } if ( cmd == PERF_EVENT_IOC_PERIOD ) return perf_event_period ( event, ( u64 __user * ) arg ) ; if ( cmd == PERF_EVENT_IOC_ID ) return perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & event -> id, sizeof ( event -> id ) ) ) return - EFAULT ;",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else { sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> counts -> uv_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> counts. uv_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> counts. uv_mode",0
910,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) { crypto_free_skcipher ( name ) ; return NULL ; } <S2SV_ModStart> mask ) ; crypto_free_skcipher ( tfm ) ; return NULL ;,0
911,"<S2SV_ModStart> src_len ) { memset ( & ctx, 0, sizeof ( ctx ) ) ; ccp_dm_workarea_init ( & ctx ) ; }",0
912,"<S2SV_ModStart> tile_height ) { if ( c -> old_tile_w < c -> tile_width || c -> old_tile_h < c -> tile_height ) { c -> tile_stride = FFALIGN ( c -> tile_width * 3, 16 ) ; c -> tile_width = c -> old_tile_w ; c -> tile_height = c -> old_tile_h ; } else { c -> tile_stride = FFALIGN ( c -> tile_width * 3, 16 ) ; }",0
913,<S2SV_ModStart> ) ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
914,"<S2SV_ModStart> = buf ; if (! jas_safe_size_mul3 ( buf, JPC_QMFB_COLGRPSIZE, sizeof ( joinbuf ) ) ) { abort ( ) ; }",0
915,"<S2SV_ModStart> ) ; register_savevm <S2SV_ModEnd> ( dev,",0
916,"<S2SV_ModStart> ) { register <S2SV_ModEnd> u_int length = <S2SV_ModStart> ) ; } ND_TCHECK2 ( ( ndo, ""[|chdlc]"" ) ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
917,<S2SV_ModStart> cifs_sb -> mnt_cifs_flags &= ~ CIFS_MOUNT_NOATIME ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOATIME ) { rc = - EPERM ; goto out ; },0
918,<S2SV_ModStart> -> len &&! ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ),0
919,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> raptor_sax2_set_uri_filter ( rdf_xml_parser,0
920,"<S2SV_ModStart> ; if ( s -> session -> sess_cert ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
921,<S2SV_ModStart> ) ) { return SECURE_ELEMENT_ERROR_NPE <S2SV_ModEnd> ; } KeyIdentifier_t,0
922,<S2SV_ModStart> sbuf ) ; if (! nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_INVALID_DATA ; },0
923,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ;,0
924,<S2SV_ModStart> += dif ; kfree ( opt2 ) ;,0
925,<S2SV_ModStart> ; if ( x86_pmu. num_counters > ARCH_PERFMON_EVENTS_COUNT ) return - ENODEV ; if ( x86_pmu. max_pebs_events > 1 ) x86_pmu. max_pebs_events = ( int ) edx. split. num_counters_fixed ;,0
926,<S2SV_ModStart> ; int n_read <S2SV_ModEnd> = r -> <S2SV_ModStart> end - r -> begin ; int part_read = n_read <S2SV_ModEnd> / r ->,0
927,<S2SV_ModStart> ) ; u32 <S2SV_ModEnd> now ; if <S2SV_ModStart> challenge_timestamp ) { unsigned int <S2SV_ModEnd> challenge_count = 0 <S2SV_ModStart> ; challenge_count = 0 <S2SV_ModEnd> ; } if,0
928,<S2SV_ModStart> struct llc_pktinfo info ; msg -> msg_namelen = sizeof ( info ),0
929,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int pack_mb_tokens ( vpx_writer * w, const TOKENEXTRA * * tp, const TOKENEXTRA * stop, vpx_writer * w <S2SV_ModStart> TOKENEXTRA * * tp <S2SV_ModEnd> ) { TOKENEXTRA <S2SV_ModStart> TOKENEXTRA * * tp, const TOKENEXTRA * * stop ) { const struct vpx_token * const a = & vp9_coef_encodings [ t ] ; const struct vpx_extra_bit * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; v = a -> value ; int n = a -> len ; if (",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart>, 0 } ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> vp9_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; }",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; __u16 version ; __u8 * country ; <S2SV_ModStart> - ENODEV ; } version = le16_to_cpu ( hdesc -> bcdHID ) ; country = le16_to_cpu ( hdesc -> bCountryCode ) ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } <S2SV_ModStart> -> version = le16_to_cpu ( hdesc -> bcdHID ) ; hid -> country = hdesc -> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ;",0
933,"<S2SV_ModStart> { struct ikev2_id id ; u_int id_len, idtype_len <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_TCHECK ( * ext ) ;",0
934,"<S2SV_ModStart> group_dead ) ; if ( unlikely ( tsk -> flags & PF_EXITING ) ) { printk ( KERN_ALERT ""Fixing <S2SV_blank> recursive <S2SV_blank> fault <S2SV_blank> but <S2SV_blank> reboot <S2SV_blank> is <S2SV_blank> needed!\\n"" ) ; tsk -> flags &= ~ PF_EXITING ; set_current_state ( TASK_UNINTERRUPTIBLE ) ; schedule ( ) ; }",0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> char * name <S2SV_ModEnd> = path_name ( <S2SV_ModStart> ( path, obj -> oid. hash <S2SV_ModEnd> ) ; add_preferred_base_object <S2SV_ModStart> obj -> flags |= OBJECT_ADDED <S2SV_ModEnd> ; } <S2SV_null>",0
936,<S2SV_ModStart> ) ) { jas_tvparser_free ( tvp ) ; jas_free ( tvp ) ; goto error ; },0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
938,"<S2SV_ModStart>, h2, fft_jmp ; WORD32 xt0_0, yt0_0, yt1_0, yt2_0, xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_0, x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x",0
939,<S2SV_ModStart> ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } if ( unlikely ( len <= 0x7f ) ) { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; dp += len ; goto next_tag ; } if ( unlikely ( len <= 0x7f ) ) { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; dp += len ; goto next_tag ; } len = data [ dp ++ ] ; if ( len <= 0x7f ) { if ( unlikely ( len <= 0x80 ) ) goto data_overrun_error ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) {,0
940,"<S2SV_ModStart> & __GFP_ZERO ) memset <S2SV_ModEnd> ( ptr,",0
941,<S2SV_ModStart> mntent ) { if ( mntent -> mnt_flags & MNT_READONLY ) return 0 ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; }",0
943,<S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModEnd> search ( value <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> n ] <= <S2SV_ModEnd> max && field <S2SV_ModStart> field -> usage [ value [ n,0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
945,"<S2SV_ModStart> ; if ( ins_size < 0 || insns_size < 0 ) { RBinDexError ( rbin, ""ins_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; } <S2SV_ModStart> ) ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; } if ( <S2SV_ModStart> ) ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; } if ( ins_size < 0 || insns_size < 0 ) { RBinDexError ( rbin, ""ins_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; } <S2SV_ModStart> ) ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; } if (! keep ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; } if ( <S2SV_ModStart> ) ) { RBinDexError ( rbin, ""insns_size <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return ; }",0
946,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_name_val, rb_strdup ( req_server_name ( req ) ) ) ; rb_hash_aset ( env, server_port_val, rb_strdup ( req_server_port ( req ) ) ) ; rb_hash_aset ( env, server_ip_val, rb_strdup ( req_server_ip ( req ) ) ) ; rb_hash_aset ( env, server_name_val, rb_strdup ( req_server_name ( req ) ) ) ; rb_hash_aset ( env, server_ip_val, rb_strdup ( req_server_ip ( req ) ) ) ; rb_hash_aset ( env, server_name_val, rb_strdup ( req_server_name ( req ) ) ) ; rb_hash_aset ( env, server_ip_val, rb_strdup ( req_server_ip ( req ) ) ) ; rb_hash_aset ( env, server_port_val, rb_strdup ( req_server_port ( req ) ) ) ; rb_hash_aset ( env,",0
947,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = cpu_to_be16 ( name_rmt -> valuelen ) ; args -> rmtvaluelen = cpu_to_be16 ( name_rmt -> valuelen ) ;,0
948,"<S2SV_ModStart>, prepare_retval ; # endif <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare ) : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_sth -> use_server_side_prepare? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare? imp_dbh -> use_server_side_prepare : ( imp_sth -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_sth -> use_server",0
949,<S2SV_ModStart> -> type -> destroy ) { <S2SV_ModEnd> key -> type,0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
951,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart>, { need *= 4 <S2SV_ModEnd> ; } )",0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> sbi -> s_journal &&! handle ) goto out ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_b",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { if ( len <= 0 ) { * str = 0 ; return 0 ; } else { if ( val < 0 ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if (! isfinite ( val ) ) { if ( len <= 0 ) { * str = 0 ; return ; } } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; return 0 ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if (! isfinite ( val ) ) { if ( len <= 0 ) { * str = 0 ; return ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy (",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,<S2SV_ModStart> ( size < <S2SV_ModEnd> 6 ) ASSERT <S2SV_ModStart> ( size < <S2SV_ModEnd> 8 ) ASSERT <S2SV_ModStart> ( size < <S2SV_ModEnd> 8 ) ASSERT <S2SV_ModStart> ) ; } free ( buf ) ;,0
956,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> return ; },0
957,"<S2SV_ModStart> { strncat ( str <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
958,"<S2SV_ModStart> ; } } if ( st. st_mode & S_IFMT ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
959,,1
960,"<S2SV_ModStart> * output ; char c ; register ssize_t <S2SV_ModEnd> i ; if <S2SV_ModStart> MagickFalse ) ; } input = fopen_utf8 ( argv [ argc - 1 ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void )",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> : ext3_msg ( sb, ""failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s"", __bdevname ( dev, b ) ) ; blkdev_put ( bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL <S2SV_ModEnd> ) ; return",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> NULL ; char * <S2SV_ModEnd> atomic_dir = ""/tmp"" <S2SV_ModStart> ( fp = tempnam <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! pwf ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; linebuf = malloc ( buflen ) ; if (! linebuf ) break ; contlen = strlen ( linebuf ) ; while ( fgets ( linebuf, buflen, pwf ) == NULL ) break ; contlen = strlen ( linebuf ) ; if (! feof ( pwf ) ) break ; contlen = strlen",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ; gchar * to = xmpp_stanza_get_to ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; if (! from ) from = from ;,0
967,<S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field (,0
968,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_service_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> ; st -> st_v1_new_iv. len = e -> enc_blocksize ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; }",0
972,<S2SV_ModStart> u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
973,"<S2SV_ModStart> int x, <S2SV_ModEnd> y, i <S2SV_ModStart> tilemap = malloc ( <S2SV_ModEnd> x_size * y_size <S2SV_ModStart> ( tilemap = malloc <S2SV_ModEnd> ( x_size *",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; goto trunc <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; trunc : ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return 0 ;",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null>,0
976,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
977,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L",0
978,<S2SV_ModStart> ; if ( chunk_num < 0 || chunk_num >= <S2SV_ModEnd> chm -> num_chunks,0
979,"<S2SV_ModStart> group_entry ) { struct perf_event_context * ctx = sibling -> ctx ; struct perf_event_context * ctx = sibling -> ctx ; struct perf_event_context * ctx = sibling -> ctx ; struct perf_event_context * ctx = sibling -> ctx ; struct perf_event_context * ctx = sibling -> ctx ; struct perf_event_context * ctx = sibling -> ctx ; perf_event_init ( event, ctx ) ; if (! ctx ) return - EINVAL ; ctx -> ctx = ctx ; } list_for_each_entry ( ctx, & ctx -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, ctx ) ) return - EINVAL ; } list_for_each_entry ( ctx, & ctx -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, ctx ) ) return - EINVAL ; } if (! validate_event ( & fake_pmu, ctx ) ) return - EINVAL ; } list_for_each_entry ( sibling, & ctx -> sibling_list, group_entry ) { if (! validate_event",0
980,"<S2SV_ModStart> } } when 10 : if ( term. csi_argc!= 2 ) return ; win_maximise ( - 2 ) ; else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) win_maximise ( - 2 ) ; else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( term. csi_argc!= 2 ) return ; if ( term. csi_argc!= 2 ) return ; if ( arg1 == 3 ) win_set_geom ( 0, 0, 0, - 1 ) ; term. rows0 = rows0 ; term. cols",0
981,"<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( get_bits_count ( gb ) < 4 ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Invalid <S2SV_blank> data\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
982,<S2SV_ModStart> ; if ( nsops > UINT_MAX / sizeof ( * sops ) ) return - EINVAL,0
983,<S2SV_ModStart> ] ; for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = 0 ; i < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c -,0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } <S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock >= grub_le_to_cpu ( ext [ i ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> = 0 ; if ( ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) || ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) || ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas",0
986,"<S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", sh. sh_properties ) ) ; return - 1 ; } <S2SV_ModEnd> DPRINTF ( ( <S2SV_ModStart> ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; goto out ; } q = CAST ( cdf_property_info_t *, malloc ( q ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; return - 1 ; } q = CAST ( cdf_property_info_t *, malloc ( q ) ) ; if ( q == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", q ) ) ; goto out ; } q =",0
987,"<S2SV_ModStart> RE_OPCODE_LITERAL ) { if ( i + 1 >= MAX_FAST_RE_STACK ) { FAIL_ON_ERROR ( callback ( NULL, ERROR_INVALID_ARGS, ""repeat_any_args"" ) ) ; break ; }",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int jslTokenAsString ( int token, char * str, size_t len <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_COMMENT : strncpy ( str, ""COMMENT"", len ) ; return ; } if ( token >= _LEX_",0
989,<S2SV_ModStart> mnt_instance ) ; mnt -> mnt_ns = NULL ;,0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ) ) { if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%",0
992,"<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> iinfo ; uint32_t <S2SV_ModEnd> pos = udf_block_map <S2SV_ModStart> pos ) ; if (! bh ) goto out ; symlink = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err ; out : up_read ( & iinfo -> i_data_sem ) ; <S2SV_ModEnd> SetPageUptodate ( page <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
993,<S2SV_ModStart> else if ( vcpu -> arch. apic_base & X2APIC_MASK ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else msr_bitmap = vmx_msr_bitmap_legacy_x2apic ;,0
994,"<S2SV_ModStart>, result ) ; if ( ent == NULL ) { st = ENOMEM ; goto cleanup ; } if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) goto cleanup ; } <S2SV_ModEnd> ldap_msgfree ( result",0
995,<S2SV_ModStart> i1_sps_valid ) { ps_codec -> i4_sps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
996,"<S2SV_ModStart> ) ) { if ( psf -> header. indx + count + 4 > psf -> header. len && psf -> header. indx + count + 8 > psf -> header. len && psf -> header. indx + count + 8 > psf -> header. len - 1 ) { header_put_marker ( psf, data ) ; count += 4 ; break ; } if ( psf -> header. indx + count + 8 > psf -> header. len ) { header_put_marker ( psf, data ) ; count += 4 ; break ; } if ( psf -> header. indx + count + 4 > psf -> header. len ) { header_put_marker ( psf, data ) ; count += 4 ; break ; } if ( psf -> header. indx + count + 8 > psf -> header. len - 1 ) { header_put_marker ( psf, data ) ; count += 2 ; break ; } if ( psf -> header. indx + count + 4 > psf -> header. len ) { header_put_marker ( psf, data ) ; count += 1 ; break ; } if ( trunc_8to4 ) { header_put_marker ( psf, data ) ; break ; } if ( psf ->",0
997,<S2SV_ModStart> ; if ( d -> msg_len < CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) return - EINVAL ; if ( d -> msg_len <S2SV_ModStart> ) ; } state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + d -> msg_len ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. flags = CX24116_DISEQC_MESGCACHE ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_,0
998,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> _exit ( 0",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint pkt_len <S2SV_ModEnd> ; int pktnum <S2SV_ModStart> 0 ) ; if ( num_items_scanned < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_",0
1002,<S2SV_ModStart> err = 0 ; msg -> msg_namelen = 0,0
1003,"<S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key )!= IS_STRING ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key )!= IS_LONG ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key )!= IS_STRING ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key ) == IS_LONG ) { if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) ;",0
1004,"<S2SV_ModStart> ( link_info. str, nla_data ( link [ TIPC_NLA_LINK_NAME ] ) ) ;",0
1005,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModStart>, obuf ) ; if ( ret < 0 ) { ret = - EFAULT ; break ; } <S2SV_ModStart>, obuf ) ; if ( ret < 0 ) { ret = - EFAULT ; break ; }",0
1006,<S2SV_ModStart> p -> tokenlen &&! jv_mem_is_empty ( p -> tokenbuf ),0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> bsize ) { switch ( bsize ) { case BLOCK_8X8 : return vp9_mse8x8 ; case BLOCK_16X8 : return vp9_mse16x8 ; case BLOCK_8X16 : return vp9_mse8x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; case BLOCK_8X16 : return vp9_mse8x16 ; case BLOCK_16X16 : return vp9_mse8x16 ; case BLOCK_16X8 : return vp9_mse8x16 ; case BLOCK_8X16 : return vp9_mse8x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; default : return vp9_mse8x16 ; } },0
1008,<S2SV_ModStart> | IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> ) return AVERROR_INVALIDDATA ; if ( avio_read_num ( pb ) < 1 || avio_read_num ( pb ) < 1 || avio_read_num ( pb ) < 1 || avio_read_num ( pb ) > 1 || avio_read_num ( pb ) > 1 || avio_read_num ( pb ) < 1 || avio_read_num ( pb ) < 1 || back_size < 0 || back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA,0
1010,<S2SV_ModStart> ) ) { if (! ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_HIGHBITDEPTH ) { if ( comp -> flags & OPJ_PI_COMMON_FLAGS_,0
1011,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply,",0
1012,"<S2SV_ModStart> if ( CheckQuantumMemory ( count, quantum ) == MagickFalse ) return ( ( void * ) NULL ) ;",0
1013,"<S2SV_ModStart> ; sprintf ( address <S2SV_ModEnd>, ""%s:%s"",",0
1014,"<S2SV_ModStart> ; if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_first_page ) ; <S2SV_ModStart> ; if ( f -> page_flag & PAGEFLAG_first_page ) return error ( f, VORBIS_invalid_first_page ) ;",0
1015,<S2SV_ModStart> NFSSVC_MAXBLKSIZE_V2 ) return 0 ; if ( head -> iov_base + head -> iov_len < XDR_QUADLEN ( hdr ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
1016,<S2SV_ModStart> ) ; struct o2nm_cl_state * cl = to_o2nm_cluster_from_node ( node ) <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> - EINVAL ; spin_lock_irq ( & cluster -> cl_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; spin_unlock_irq ( & cluster -> cl_lock ) ;,0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""buffer <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
1019,"<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes == NULL ) psf_log_syserr ( psf, EPERM ) ;",0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; } else { memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SS",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) )",0
1023,<S2SV_ModStart> r ) { if ( a == NULL ) { return ( 0 ) ; },0
1024,"<S2SV_ModStart> ) ; hrtimer_set_expires ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_REL ) ;",0
1025,<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_BASIC ; u16 <S2SV_ModEnd> txwin_size = L2CAP_DEFAULT_RX_WINDOW <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; u16 <S2SV_ModEnd> retrans_timeout = cpu_to_le16 <S2SV_ModStart> retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; u16 <S2SV_ModEnd> monitor_timeout = cpu_to_le16 <S2SV_ModStart> monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; u16 <S2SV_ModEnd> max_pdu_size = cpu_to_le16 <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RX_APDU ; u16 <S2SV_ModEnd> max_pdu_size = cpu_to_le16 <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ; u16 <S2SV_ModEnd> max_pdu_size = cpu_to_le16 <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ; u16 <S2SV_ModEnd> max_pdu_size = cpu_to,0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = - 1 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return err ; }",0
1028,"<S2SV_ModStart> u4_length ) { if ( ps_dec_op -> u4_first_byte_in_pic == 1 ) { H264_DEC_DEBUG_PRINT ( ""\\nFirst <S2SV_blank> byte <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; } else { H264_DEC_DEBUG_PRINT ( ""\\nLast <S2SV_blank> byte <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; } }",0
1029,"<S2SV_ModStart> tok ) ; if ( pair == 0 ) { mprAddItem ( app -> formData, NULL ) ; return ; }",0
1030,"<S2SV_ModStart> } err = crypto_rng_setseed <S2SV_ModEnd> ( tfm,",0
1031,<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new ; } <S2SV_ModEnd> return ucounts ;,0
1032,<S2SV_ModStart> ; msg_sys. msg_namelen = 0 ;,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { if ( len < 8 * 32 ) { return - 1 ; } <S2SV_ModStart> ] ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1035,"<S2SV_ModStart> bh_result ) ; err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err ) { err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err ) { err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; goto out2 ; } }",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode = fmode & ( FMODE_READ | FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart> int64_t * out_dist_sum, vpx_bit_depth_t * bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t * bit_depth <S2SV_ModStart> ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse, & bit_depth <S2SV_ModStart> ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist, & dist ) ; x -> pred_sse [ ref ] = sse ; * out_dist_sum = ( int ) dist_sum ; } else { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist, & dist ) ; * out_rate_sum = (",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1042,"<S2SV_ModStart> source_address_length ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } <S2SV_ModStart> source_address_number ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } <S2SV_ModStart> source_address_length ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; } <S2SV_ModStart> } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short!"" ) ) ; return ; }",0
1043,<S2SV_ModStart>!= '\\0' ) { ptr ++ ; } if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; ptr ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( P,0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { if ( seg -> tree_probs == NULL ) return - 1 ; <S2SV_ModStart> return vpx_read_tree ( r <S2SV_ModEnd>, vp9_segment_tree,",0
1045,<S2SV_ModStart> uint32_t backup_handle ; struct drm_vmw_surface_create_req * req = & arg -> req ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; req -> mip_levels = DRM_VMW_MAX_MIP_LEVELS ;,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> desc_struct * get_desc <S2SV_ModStart> ) { struct desc_ptr <S2SV_ModEnd> desc = NULL <S2SV_ModStart> ldt = current -> active_mm -> context. ldt ; <S2SV_ModStart> ( ldt && sel < ldt -> nr_entries ) { desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return NULL ; } <S2SV_ModEnd> } # endif <S2SV_ModStart> ( desc_base > gdt_desc. <S2SV_ModEnd> size ) return <S2SV_ModStart> size ) return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1047,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1048,<S2SV_ModStart> struct sctp_sockaddr_entry * laddr = NULL ; union sctp_addr * daddr = & t -> ipaddr ; union sctp_addr * baddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; struct sctp_scope_t scope ; <S2SV_ModStart> ) ; } laddr = & t -> ipaddr ; baddr = & t -> ipaddr ; laddr = & t -> ipaddr ; if ( ipv6_addr_type ( & laddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & laddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & laddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv,0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print_data ( ndo, buf, len ) ; return ( buf ) ; } ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print_data ( ndo, buf, len )",0
1051,"<S2SV_ModStart> protocol_timeout ) { gsm_source_add ( client -> priv -> protocol_timeout, conn ) ; client -> priv -> protocol_timeout = 0 ; }",0
1052,"<S2SV_ModStart> -- n >= 0 && ps < ep <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 && ps < ep <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) { if ( io < ie &&! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) io ; if ( io < ie &&! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; return - 1 ; }",0
1053,"<S2SV_ModStart> ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; osSetEvent ( & interface -> nicTxEvent ) ; return NO_ERROR ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_RXQ",0
1054,"<S2SV_ModStart> NULL ) ; rb_ary_push ( self, rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_",0
1055,"<S2SV_ModStart> = node ; if ( edit -> dead_leaf ) { node -> slots [ ASSOC_ARRAY_FAN_OUT ] = node -> slots [ ASSOC_ARRAY_FAN_OUT ] ; edit -> dead_leaf = node -> slots [ ASSOC_ARRAY_FAN_OUT ] ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; node -> slots [ free_slot ] = node -> slots [ ASSOC_ARRAY_FAN_OUT ] ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; node -> slots [ free_slot ] = node -> slots [ free_slot ] ; edit -> adjust",0
1056,<S2SV_ModStart> udpport = 11211 ; settings. inter = NULL ; settings. maxconns = 64 * 1024 * 1024 ; settings. maxbytes = 64 * 1024 * 1024 ; settings. maxconns,0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15, x_16, x_19, x_20, x_21, x_31 ; WORD32 n00, n10, n20, n30, n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n11, n21, n31 ; WORD32 n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n10, n11, n21, n31 ; WORD32 n01, n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; for ( j = 0 ; j < 8 ; j ++ ) { WORD32 x0, * y1, * y2, * y3 = ptr_y + (",0
1059,"<S2SV_ModStart> { clips = kmalloc <S2SV_ModEnd> ( num_clips * <S2SV_ModStart> ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; }",0
1060,<S2SV_ModStart> ; if ( pmd_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> case 'a' : if ( nops && i < nops ) { r_asm_set_pc ( core -> assembler, addr ) ; break ; } <S2SV_ModStart> case 'b' : if ( nops && i < nops ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_asm_set_pc ( core -> assembler, addr ) ; break ; }",0
1063,"<S2SV_ModStart>, frames ; int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( fin, & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc >= 6 ) frames = atoi ( argv [ 5 ] ) ; else frames = INT_MAX ; if ( frames == INT_MAX ) printf ( ""All\\n"" ) ; else printf ( ""%d\\n"", frames ) ; return 1 ; } if ( argc >=",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTail ; <S2SV_ModStart> + JQS_wHead ) ) { wTail = readw ( chip -> DSPQ + JQS_wTail ) ; if ( wTail > readw ( chip -> DSPQ + JQS_wHead ) ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * wTail ) ) ; wTail = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; wTmp = wTail <S2SV_ModEnd> + 1 ; <S2SV_ModStart> + JQS_wSize ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> + JQS_wHead ) ; }",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc = NULL,0
1066,<S2SV_ModStart> ACPI_STATUS status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1067,"<S2SV_ModStart> if (! strcmp <S2SV_ModEnd> ( arg, <S2SV_ModStart> ""-rti"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-backtrace"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-backtrace"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic"" ) ||! strcmp ( arg, ""-mosaic-stack"" ) ||! strcmp ( arg, ""-mosaic-stack""",0
1068,"<S2SV_ModStart> num_fields ) { PyObject * s, * l ; int result ; Py_IDENTIFIER ( _attributes ) ; _Py_IDENTIFIER ( _attributes ) ; PyUnicode_FromString ( attrs [ num_fields ] ) ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0",0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> priv = calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> struct vpx_codec_alg_priv ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = ( vpx_codec_alg_priv_t * ) <S2SV_ModStart> -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { priv -> cfg = * ctx -> config. enc ; } else { priv -> cfg = * ctx -> config. enc ; }",0
1070,"<S2SV_ModStart> ) { xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FORK ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log ( dp, - size, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, - XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, - XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, - XFS_ILOG_CORE ) ; xfs_trans_log_inode ( dp, - XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, - XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args ->",0
1071,"<S2SV_ModStart> c ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ;",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & sock [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, & sock [ TIPC_NLA_SOCK_REF ], <S2SV_ModEnd> tipc_nl_sock_policy ) ; <S2SV_ModStart> - EINVAL ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk = tipc_sk_lookup ( net, tsk_portid ) ; if (! tsk ) return - EINVAL ;",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void,0
1074,<S2SV_ModStart> ; vma_stop ( <S2SV_ModEnd> vma ) ;,0
1075,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> wTotalLength ) ; if ( length > total_len ) { dev_err ( ddev, ""too <S2SV_blank> many <S2SV_blank> device capabilities <S2SV_blank> in <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; ret = - ENOMSG ; goto err ; }",0
1076,<S2SV_ModStart> ) ) { <S2SV_ModEnd> file_sb_list_del ( file,0
1077,"<S2SV_ModStart> EIO ; } if ( udf_check_indirect_entry ( fe, efe ) < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!efe\\n"", inode -> i_ino ) ; goto out ; }",0
1078,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { const char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) { if ( * ptr == '\\0' ) return 1 ; if ( * ptr ++ =='s' || * ptr == 'S' ) return 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; else return 1 ; n ++ ; } <S2SV_ModEnd> return ( n,0
1080,<S2SV_ModStart> ) ; kfree_rcu <S2SV_ModEnd> ( inet ->,0
1081,<S2SV_ModStart> ) { if ( len == 0 ) goto trunc ; ND_TCHECK ( * bp ) ; if ( * bp!= '\\t' ) goto invalid ; bp ++ ; len -- ; if ( len == 0 ) goto trunc ; ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) goto invalid ; bp ++ ; len -- ; * endp = bp ; if ( neg ) { if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result = INT_MAX ; } break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX / 10 ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX / 10 ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } } else { result *= 10 ; if ( result == INT_MAX ) {,0
1082,"<S2SV_ModStart> ( args -> flist, XFS_LBSIZE ( args -> dp -> i_mount ) / 8, & ichdr. hdr ) ; xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_LOG_MAYBE, ( XFS_DA_LOG_LEVEL_LOW, ( XFS_DA_LOG_LEVEL_HIGH, ( XFS_DA_LOG_LEVEL_HIGH, ( XFS_DA_LOG_LEVEL_HIGH, XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) ), XFS_LOG_MAYBE, ( XFS_DA_LOG_LEVEL_HIGH, ( XFS_DA_LOG_MAYBE, ( XFS_DA_LOG_LEVEL_LOW, ( XFS_DA_LOG_LEVEL_LOW, ( XFS_DA_LOG_LEVEL_HIGH, ( XFS_DA_LOG_LEVEL_LOW, ( XFS_DA_LOG_LEVEL_HIGH, XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) ) ), XFS_LOG_MAYBE, ( XFS_DA",0
1083,"<S2SV_ModStart> DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6",0
1084,<S2SV_ModStart> = object_length ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; },0
1085,"<S2SV_ModStart> ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ;",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % ( bps * stride <S2SV_ModEnd> ) ) == <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> while ( count <S2SV_ModStart> ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # endif } } _TIFFfree ( tmp ) ; return 1 ;",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; else return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } <S2SV_ModEnd> return do_swap_page (",0
1090,"<S2SV_ModStart> s ) { size_t alloc_size = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; if (! alloc_size ) return NULL ; <S2SV_ModStart> + 1 ) ; memcpy ( r, s, alloc_size ) ;",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> -> upper_first ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ;",0
1093,<S2SV_ModStart> -> attr_values [ <S2SV_ModEnd> i ]. <S2SV_ModStart> -> attr_values [ <S2SV_ModEnd> i ].,0
1094,<S2SV_ModStart> b_go ) { <S2SV_ModEnd> return NULL ;,0
1095,"<S2SV_ModStart> bfname ) ; if (! bfname. len ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; break ; }",0
1096,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> ip6_nh ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & ip6 -> ip6_nh ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len )",0
1097,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len >> 1 ) { if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len >> 1 ) { <S2SV_ModStart> ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; },0
1098,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1099,<S2SV_ModStart> act = vp8_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_ref_frame_t * const data = va_arg ( args, vpx_ref_frame_t * ) ; vpx_pbi_t * const pbi = ctx -> frame_pbi ; YV12_BUFFER_CONFIG * const fb ; vpx_get_reference_dec ( pbi <S2SV_ModEnd>, data -> <S2SV_ModStart> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1102,"<S2SV_ModStart> ctxt ) ; if ( ops -> get_msr ( ctxt, MSR_EFER, & efer ) < 0 ) return - EINVAL ; if ( ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> regs [ VCPU_REGS_RCX ] = ctxt -> _eip ; if ( ops -> get_msr ( ctxt, MSR_SYSCALL_",0
1103,"<S2SV_ModStart> ; if ( length < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } for ( j = 0 ; j < length ; j ++ ) { if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOS <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } for ( j = 0 ; j < length ; j ++ ) { if ( j + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return",0
1104,"<S2SV_ModStart> ) ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else e = ast_for_expr ( c, ch ) ; if (! e ) return NULL ; set_context ( c, e, Store, ch ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_annassign ( c, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; return AugAssign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n ->",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int mc_avg_y_stride = <S2SV_ModStart> unsigned char * running_avg_y, <S2SV_ModEnd> int avg_y_stride = <S2SV_ModStart> int sig_stride = 16 ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * mc_running_avg_y = mc_running_avg_y <S2SV_ModEnd> ; int mc_avg_y_stride <S2SV_ModStart> unsigned char * mc_avg_y <S2SV_ModEnd> = mc_running_avg -> <S2SV_ModStart> char * running_avg_y = running_avg_y <S2SV_ModEnd> ; int avg_y_stride <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] ; if ( diff >",0
1106,"<S2SV_ModStart> ) ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; }",0
1107,"<S2SV_ModStart> ; int ret ; ret = security_task_setxregs ( child, xtregs ) ; if ( ret ) return ret <S2SV_ModEnd> ; # if",0
1108,<S2SV_ModStart> size ) ; <S2SV_ModEnd> message -> srcIpAddr <S2SV_ModStart> -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. port ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device * dst_dev = xop -> dst_dev ; struct se_device * src_dev = xop -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> dst_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & src_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p\\n"", remote_dev, & src_dev -> dev_group. cg_item ) ; target_undepend_item ( & src_dev -> dev_group. cg_item ) ; } } <S2SV_ModEnd> pr_debug ( ""Calling",0
1110,"<S2SV_ModStart> 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = <S2SV_ModEnd> - errno ;",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; ext2_xattr_cache_insert ( ext2_mb_cache, new_bh ) ; inode -> i_ctime = CURRENT_TIME_SEC ; <S2SV_ModStart> new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, new_bh ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, sizeof ( rcomp. type ) <S2SV_ModEnd>, ""compression"" )",0
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; <S2SV_ModEnd> } break ;",0
1115,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1116,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1117,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> * len ; if ( len > MAX_URL_LEN ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""URL <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len, MAX_URL_LEN ) ; efree ( state ) ; return NULL ; }",0
1118,"<S2SV_ModStart> SUCCESS ) { if ( var == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Variable <S2SV_blank> is <S2SV_blank> null"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; <S2SV_ModEnd> points [ i <S2SV_ModStart> i ]. y = Z_LVAL_PP ( <S2SV_ModEnd> var ) ; <S2SV_ModStart> var ) ; <S2SV_ModEnd> } if (",0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> == SIGEV_NONE ; <S2SV_ModEnd> timr -> it_interval,0
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; }",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; memset ( & frame -> img, 0, sizeof ( frame -> img ) ) ; vp9_copy_reference_dec ( ctx -> pbi <S2SV_ModEnd>, ( VP9_REFFRAME <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, 0 ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1122,<S2SV_ModStart>. path ; if (! path ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ;,0
1123,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1124,<S2SV_ModStart> ; sh -> <S2SV_ModEnd> first_slice_in_pic_flag = get_bits <S2SV_ModStart> gb ) ; if ( sh -> first_slice_in_pic_flag ) { s -> seq_decode = ( s -> seq_decode + 1 ) & 0xff ; s -> max_ra = INT_MAX ; if ( IS_IRAP ( s ) ) sh -> no_output_of_prior_pics_flag = 1 ; },0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
1126,"<S2SV_ModStart>, u4_y_offset ; ps_dec -> u2_prev_intra_mb = 0 ; <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; } else { ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = & pbi -> common ; YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ] ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> reference <S2SV_blank> frame <S2SV_blank> config"" ) ; } else { vp8_yv12_copy_frame ( cfg, sd ) ; } } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_y",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( mbmi, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; const int num_4x4_w = num_4x4_w ; const int num_4x4_h = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd",0
1130,<S2SV_ModStart> random_factor ) ; if ( mmap_is_legacy ( ) ) { mm -> mmap_base = mmap_legacy_base ( random_factor ) ; mm -> get_unmapped_area = arch_get_unmapped_area_topdown ; } else { mm -> mmap_base = mmap_base ( random_factor ) ; mm -> get_unmapped_area = arch_get_unmapped_area_topdown ; },0
1131,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
1132,"<S2SV_ModStart> return getnum ( L <S2SV_ModEnd>, fmt, <S2SV_ModStart> return getnum ( L <S2SV_ModEnd>, fmt,",0
1133,"<S2SV_ModStart> nrow ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize ) < 0 ) { TIFFLogError ( tif, ""TIFF_IO_ERROR"", ""TIFF_IO_ERROR"", ""TIFF_ReadEncodedStripAndAllocBuffer"" ) ; return ( 0 ) ; }",0
1134,<S2SV_ModStart> } } assert ( NCH ( n ) <= 3 ) ;,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
1136,<S2SV_ModStart> upid == - 1 || upid == 0,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> ( num & ( 1 << <S2SV_ModEnd> number - 1,0
1139,"<S2SV_ModStart>, plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? 2 : 1 ) ; const int w = vpx_img_plane_width ( img, plane ) * ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ; const int h = vpx_img_plane_height ( img, plane ) * ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ; if ( <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, 1, ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) && ( img -> fmt & VPX_IMG_FMT",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Update ( & md5_ctx, RV -> val. octets, RV -> length ) ; MD5_Final ( p1, & md5_ctx ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memxor ( p1, avp -> val, MD5_DIGEST_LENGTH ) ; return 0 ; } memcpy ( p1, avp -> val,",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; int ret ; ret = dm_bdev_ioctl ( dev <S2SV_ModEnd>, cmd,",0
1142,"<S2SV_ModStart> ; if ( actx -> tag_len > CHACHA_CTR_SIZE - 3 ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_TAG_LENGTH ) ; return 0 ; }",0
1143,<S2SV_ModStart> comm_event -> event_id. <S2SV_ModEnd> header. size,0
1144,"<S2SV_ModStart> fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ;",0
1145,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart> sk ) ; memset ( sa, 0, sizeof ( sa ) ) ;",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1151,<S2SV_ModStart> g -> head <= 0 || g -> sect > UINT_MAX || g -> head <S2SV_ModStart> g -> head > UINT_MAX <S2SV_ModEnd> || ( g <S2SV_ModStart> g -> head > UINT_MAX <S2SV_ModEnd> ) || (,0
1152,"<S2SV_ModStart> line ) ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( & slavename ) ; if ( slavename == NULL ) { abort_connection ( curconn, pkthdr, _ ( ""Invalid <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Invalid <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> 0 ] = 0 <S2SV_ModEnd> ; strncpy ( <S2SV_ModStart> 82 ) ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; send_udp ( curconn, & pdata ) ; if ( curconn -> state == STATE",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) >= sizeof ( path ) ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ++ ) { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> == 0 ) { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
1157,"<S2SV_ModStart> ; if (! bio_flagged ( bio, BIO_UPTODATE ) ) { ret = - EINVAL ; goto out_unmap ; }",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr,1
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; state ( conn, SMTP_SERVERGREET ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn",0
1160,<S2SV_ModStart> i < sizeof ( buf ) <S2SV_ModEnd> && str [ <S2SV_ModStart> i ] && str [ i ],0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; goto out <S2SV_ModEnd> ; } if,0
1163,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } for (,0
1166,"<S2SV_ModStart> ) ) { if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( printHere ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) {",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr, & res -> acl, & res -> fmode ) ; if ( status ) goto out ;",0
1168,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & KDC_OPT_ENC_TKT_NOMATCH ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { if ( p -> flags & PF_KTHREAD ) p -> flags &= ~ PF_KTHREAD ; else p -> flags &= ~ PF_KTHREAD ; },0
1170,"<S2SV_ModStart> ) { jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; if (! stream ) { return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> obj_ = ( void * ) obj ; obj -> myalloc_ = 1 ; obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ = 1 ; obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; obj -> myalloc_ =",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> * key = NULL <S2SV_ModEnd> ; char * <S2SV_ModStart> * userstyle = NULL <S2SV_ModEnd> ; u_char * <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype ; int authenticated = 0 ; struct sshauthopt * authopts = NULL ; int r, pktype ; int authenticated = 0 ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh",0
1172,"<S2SV_ModStart> ; uint32_t bcount ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> = 0 ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1173,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sasl_failure ( s,",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
1176,"<S2SV_ModStart> ; if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> es"" ) ; goto failed_sbi ; }",0
1177,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1178,<S2SV_ModStart> ; if ( tcp_hdrlen + 4 > skb -> len ) return - 1 ; if (,0
1179,"<S2SV_ModStart> ; if ( numrows > JAS_MAXMATRIX_ROWS || numcols > JAS_MAXMATRIX_COLS ) { return 0 ; } if ( numrows > JAS_MAXMATRIX_ROWS ) { return 0 ; } if ( numcols > JAS_MAXMATRIX_COLUMNS ) { return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = numrows ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> data_ = jas_alloc2 ( matrix -> data_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix",0
1180,<S2SV_ModStart> ) ) { if (! skb_is_gso ( skb ) ) { kfree_skb ( skb ) ; return - EINVAL ; },0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_request * r ; if (! qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> buf -> cursor ; size_t expect ; txid xmin, xmax ; if ( nxip < 0 ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModStart> buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect > buf -> len - buf -> cursor ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur >= xmax || cur >= MAX_TXID ) goto bad_format ; snap -> xip [ i ] = cur",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ;",0
1185,"<S2SV_ModStart> ) ; struct xfrm_dump_info info ; struct xfrm_policy_walk_args * args = <S2SV_ModEnd> cb -> args <S2SV_ModStart> cb -> args <S2SV_ModEnd> ; xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( & walk, XFRM_POLICY_TYPE_ANY ) ; } <S2SV_ModStart> = NLM_F_MULTI ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len ;",0
1186,<S2SV_ModStart> = - 1 ; struct oe_epoll * epoll = ( struct oe_epoll * ) epoll_ ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> count ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> = upperdir -> d_inode <S2SV_ModEnd> ; int err <S2SV_ModStart> = - ESTALE <S2SV_ModEnd> ; inode_lock_nested ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; } else { dput ( upper ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing",0
1189,<S2SV_ModStart> (! * ptrptr <S2SV_ModEnd> &&! (,0
1190,<S2SV_ModStart> name == MAPI_BODY_HTML || a -> name == MAPI_BODY_RTF_COMPRESSED ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_TYPE_MAX : * ( size_t * ) val = ms -> elf_type_max ; return 0 ; case MAGIC_PARAM_ELF_TYPE_MAX : * ( size_t * ) val = ms -> elf_type_max ; return 0 ; case MAGIC_PARAM_ELF_TYPE_MAX : * ( size_t * ) val = ms -> elf_type_max ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"", box -> info -> name ) ; goto error ; }",0
1193,,1
1194,"<S2SV_ModStart> ) { journal_t * journal = NULL ; if ( page -> mapping -> host!= ext4_current_host ( ) ) journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else",0
1195,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( <S2SV_ModStart>, TrackWriter ) ; if (! writer ) return GF_OUT_OF_MEM ; <S2SV_ModStart> ; GF_SAFEALLOC ( writer <S2SV_ModEnd>, TrackWriter )",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1197,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( password ) - 1 <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( password ) - 1 <S2SV_ModEnd> ) ; md5_append <S2SV_ModStart> ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } else { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( height ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width",0
1198,"<S2SV_ModStart> qboolean useSystemLib ) { const char * libPath [ MAX_OSPATH ] ; char * basePath ; char * dllhandle ; if (! useSystemLib ||! ( libPath = Cvar_VariableString ( ""fs_basepath"" ) ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; Com_sprintf ( libPath, sizeof ( libPath ), ""%s%c"", basePath, PATH_SEP, name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; return NULL ;",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> 0xfffffe00UL ) # define PCDGetBits ( n ) ( sum << n ) & 0xffffffff ; bits -= n ; while ( bits <= 24 ) { if ( p >= buffer + 0x800 ) break ; count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } sum |= ( ( unsigned int ) ( * p ) << ( 24 - bits ) ) ; bits += 8 ; }",0
1201,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; break ; } if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
1202,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1203,"<S2SV_ModStart> # ifdef HAVE_IPV6 char * p ; if ( str_len > 1 ) { p = memchr ( str + 1, '[', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; host = estrndup ( str, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } # endif if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, """,0
1204,"<S2SV_ModStart> y_height ; for ( row = 0 ; row < src_ybc -> y_height && row < src_ybc -> y_width ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1205,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( c -> cblk_style!= 0 ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; }",0
1206,"<S2SV_ModStart> ( '%' == ( char ) <S2SV_ModStart> ) ) { ptr += 2 ; } else if ( '{' == ( char ) ptr [ 1 ] ) { ptr += 2 ; } else if ( '}' == ( char ) ptr [ 1 ] ) { fputc ( '{', stream ) ; ptr += 2 ; } else { if (! end ) { fputs ( ""%{"", stream ) ; continue ; } if (! end ) { fputs ( ""%{"", stream ) ; continue ; } if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & longinfo ) ) fprintf ( stream, ""%03ld"", longinfo ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE, & longinfo ) ) fprintf ( stream, ""%03ld"", longinfo ) ; break ; case VAR_",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col_end ; mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { for <S2SV_ModStart> { for ( <S2SV_ModEnd> i = BLOCK_4X4 <S2SV_ModStart> ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) for (",0
1208,"<S2SV_ModStart> ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; obj_tptr = pptr ; <S2SV_ModStart> obj_tlen ; hexdump = EXTRACT_32BITS ( lmp_obj_header -> length ) ; offset = EXTRACT_32BITS ( lmp_obj_header -> offset ) ; link_type = EXTRACT_32BITS ( lmp_obj_header -> link_type ) ; bw. f = EXTRACT_32BITS ( lmp_obj_header -> link_type ) ; ND_PRINT ( ( ndo, ""%s"", hexdump ) ) ; obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; obj_tlen = EXTRACT_32BITS ( obj_tptr ) ; if ( lmp_obj_len < lmp_obj_len ) { ND_PRINT ( ( ndo, ""%s"", obj_tptr ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%s",0
1209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> int_mv mvs [ 2 <S2SV_ModEnd> ], nmv_context_counts",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; }",0
1212,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ;,0
1213,<S2SV_ModStart> &&! capable <S2SV_ModEnd> ( CAP_SYS_ADMIN ),0
1214,"<S2SV_ModStart> 1 ) ; if ( data_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if ( control_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; }",0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> return ; netsnmp_mibindex_load ( ) ; <S2SV_ModEnd> entry = strtok_r <S2SV_ModStart> entry ) { <S2SV_ModEnd> add_mibfile ( entry <S2SV_ModStart> NULL, NULL ) ; } <S2SV_ModEnd> } netsnmp_init_mib_internals ( <S2SV_ModStart> env_var ) ; <S2SV_ModEnd> env_var = netsnmp_getenv <S2SV_ModStart> env_var ) ; <S2SV_ModEnd> env_var = netsnmp_getenv <S2SV_ModStart> env_var ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( confmibs ) ; } else { add_mibfile ( entry, NULL, NULL ) ; } <S2SV_ModEnd> netsnmp_init_mib_internals ( ) <S2SV_ModStart> ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( confmibs ) ; } else { add_mibfile ( entry,",0
1217,"<S2SV_ModStart> list_head tmplist ; struct sctp_sock * oldsk = sctp_sk ( oldsk ) ; newsk -> sk_retransmits = 0 ; newsk -> sk_state = SCTP_SS_ESTABLISHED ; <S2SV_ModStart> -> do_auto_asconf ) { sctp_skb_for_each ( skb, & oldsk -> sk_receive_queue, tmp ) sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb, & assoc -> asconf_queue, tmp ) sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb,",0
1218,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL )",0
1219,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> return INSN_CODE_SEG_PARAMS ( <S2SV_ModStart> return sel ; <S2SV_ModEnd> if ( v8086_mode <S2SV_ModStart> return sel ; if (! get_desc ( sel, & desc ) ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! ( desc -> type & BIT ( 2 ) ) ) return - EINVAL ; <S2SV_ModStart> if (! ( desc -> l << 1 ) | desc -> d ) ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 16 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,0
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( screen -> columns == 0 || screen -> rows == 0 ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( screen, screen -> columns, screen -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
1225,"<S2SV_ModStart> while ( impeg2d_bit_stream_nxt <S2SV_ModEnd> ( ps_stream,",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ;",0
1227,<S2SV_ModStart> imethod ) ; if ( imethod == NULL ) { g_return_null ( ) ; },0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t tmp ; if ( count > sizeof ( buf ) ) return - EINVAL ; <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer,",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> bh ) ; if ( buffer_uptodate ( bh ) ) { f2fs_msg ( sb, KERN_ERR, ""Unexpected <S2SV_blank> buffer <S2SV_blank> pointer\\n"" ) ; return 1 ; }",0
1231,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> char * last_elem <S2SV_ModStart> ( ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) || ( strncmp ( & name [ 2 ], ""O"" ) == 0 && ( __libc_enable_secure? NULL : l -> l_origin )",0
1232,<S2SV_ModStart> } pDecCont = ( decContainer_t * ),0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space ; struct ipv6_txoptions_rcu * rcu <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> final_p ) ; rcu = rcu_dereference_protected ( rp -> rcu, sock_owned_by_user ( sk ) ) ; if ( rcu ) return rcu_dereference_protected ( rp -> rcu, sock_owned_by_user ( sk ) ) ; if ( rcu ) return rcu_dereference_protected ( rp -> rcu, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( inet -> rcu, sock_owned_by_user ( sk ) ) ; rcu_assign_pointer ( rp -> rcu, final_p ) ; if ( rcu ) return rcu_dereference_protected ( rp -> rcu, sock_owned_by_user ( sk ) ) ; if ( rcu ) return rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ; rcu = rcu_",0
1234,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; <S2SV_ModStart> return 0 ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iph",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,"<S2SV_ModStart> rtm ) ; rcu_read_lock ( ) ; <S2SV_ModStart> rtm ) ; rcu_assign_pointer ( res, rt ) ;",0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1239,<S2SV_ModStart> -> count ) break ; tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ;,0
1240,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> krb5_key_data * key_data <S2SV_ModStart> key_data ), & err ) ; if ( key_data == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> key_data ), & err ) ; if ( ret == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> memcpy ( key_data",0
1241,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> _Unpickler_MemoPut ( UnpicklerObject,0
1242,<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = ( <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else {,0
1243,<S2SV_ModStart> filp ) { return fput ( filp ) ; },0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1246,"<S2SV_ModStart> } } return opt? xchg ( & inet6_sk ( sk ) -> opt, opt ) :",0
1247,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> vcpu -> exit_intr_info <S2SV_ModStart> intr_info ) ; if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; return 0 ; } if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; return 0 ; } if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info )",0
1248,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION",0
1249,"<S2SV_ModStart> UINT error ; if (! Stream_SafeSeek <S2SV_ModEnd> ( s,",0
1250,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pData <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pData <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pData <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pData <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pData,0
1251,"<S2SV_ModStart> < 0 ) { resv_map_put ( resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to )",0
1252,"<S2SV_ModStart> ) ; struct ipv6_txoptions * opt = np -> opt ; struct ip_options_rcu * inet_opt = rcu_dereference_protected ( np -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; rcu_assign_pointer ( transport -> opt, opt ) ; <S2SV_ModStart> = 1 ; rcu_dereference ( inet_opt ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> = 1 ; rcu_assign_pointer ( transport -> rcu, rcu_dereference ( inet_opt ) ) ; if ( rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ) return rcu_dereference ( rcu_dereference ( np -> opt ) ) ; rcu_assign_pointer ( transport -> opt, rcu_dereference ( inet_opt ) ) ; if ( rcu_dereference ( rcu_dereference ( transport -> rcu ) ) ) return rcu_dereference ( transport ->",0
1253,"<S2SV_ModStart> out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""unknown <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,<S2SV_ModStart> ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> rdpNego * <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> length <S2SV_blank> of <S2SV_blank> negotiation <S2SV_blank> packet: <S2SV_blank> %u"", Stream_GetRemainingLength ( s ) ) ; return NULL ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> length <S2SV_blank> of <S2SV_blank> negotiation <S2SV_blank> packet: <S2SV_blank> %u"", Stream_GetRemainingLength ( s ) ) ; return NULL ; }",0
1257,"<S2SV_ModStart> int ret, last_pwd ; krb5_boolean have_pol = FALSE ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; last_pwd = adb. last_pwd ; have_pol = TRUE ; handle = server_handle ; if ( handle == NULL ) return EINVAL",0
1258,"<S2SV_ModStart>, result = RLC_ERR <S2SV_ModEnd> ; bn_t t <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>! bn_is_zero ( <S2SV_ModEnd> t ) ) <S2SV_ModStart>!= RSA_PUB ) { result = RLC_ERR ; } * p_len = m_len ; bn_rsh ( m, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; result = RLC_OK <S2SV_ModEnd> ; break ; <S2SV_ModStart>",0
1259,<S2SV_ModStart> ) ) { yr_free ( stack ) ; stack = ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR_VALUE ) ) return ERROR_INSUFFICIENT_MEMORY ; if ( stack == ( YR_VALUE * ) yr_malloc ( stack_size * sizeof ( YR,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( hctx ->,0
1262,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ) count [ i ] <S2SV_ModEnd> += cm ->,0
1264,<S2SV_ModStart> token ++ ; } if (! token ) { return false ; },0
1265,"<S2SV_ModStart> ) { MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; VP9_COMMON <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> x -> act_zbin_adj <S2SV_ModStart> = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * aligned_mi_cols * MAX_MB_PLANE ) ; }",0
1266,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> WSP ( sp <S2SV_ModStart> SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; <S2SV_ModEnd> } <S2SV_null>",0
1267,"<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ReadBlob ( image, sizeof ( magick ) <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ReadBlobLSBShort ( image ) <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ReadBlobLSBShort ( image ) <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ReadBlobLSBShort ( image ) <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ReadBlobLSBShort ( image ) <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ReadBlobLSBShort ( image ) <S2SV_ModEnd>, ( unsigned <S2SV_ModStart> ReadBlobLSBShort ( image ) <S2SV_ModEnd> ; image -> <S2SV_ModStart> -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ;",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; mutex_lock ( & snd_card_mutex ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; }",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ) ),0
1271,<S2SV_ModStart> ; ps_dec -> u2_first_slice_in_pic = 1 ; ps_dec -> u2_last_slice_in_pic = 0 ;,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; item = pitem_new ( priority, rdata ) ; if ( item == NULL ) { OPENSSL_free ( rdata ) ; pitem_free ( item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; }",0
1273,<S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 || args -> buffer_count > I915_NUM_BUFFERS - 1,0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> struct pci_dev * pdev <S2SV_ModEnd> ; int port <S2SV_ModStart> return PTR_ERR ( karg ) <S2SV_ModEnd> ; } if <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } if",0
1275,"<S2SV_ModStart>, const char <S2SV_ModEnd> * path ) <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModStart> mntflags, mntdata <S2SV_ModEnd>, optional )",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> * ab ) { size_t i, len <S2SV_ModEnd> ; size_t len_sent <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * buf <S2SV_ModStart> * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! len ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd>, mode >",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; int pkt_len ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } else { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1280,"<S2SV_ModStart> rq ) { struct kvm_vcpu * vcpu = & __get_cpu_var ( kvm_vcpu, 0 ) <S2SV_ModEnd> ; rq -> <S2SV_ModStart> rq ) ; vcpu = cpumask_first ( & vcpu -> cpumask ) <S2SV_ModEnd> ; rq -> <S2SV_ModStart> rq ) ; vcpu -> cpumask = vcpu -> cpumask ; <S2SV_ModStart> ) ; } vmb ( ) ;",0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> { struct blkif_response resp <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> int notify ; struct blkif_common_rings * blk_rings <S2SV_ModEnd> ; int notify <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; }",0
1283,<S2SV_ModStart> if (! ( mask & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX <S2SV_ModEnd> ) ) return,0
1284,"<S2SV_ModStart> ; if ( ( exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( ( exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en",0
1285,"<S2SV_ModStart> ( outname = strndup <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname ) ; if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> not <S2SV_blank> made\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
1286,"<S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; ND_TCHECK <S2SV_ModStart> ( cp, plen <S2SV_ModEnd> ) ; }",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } dir_has_key = ( dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ) <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dput ( dir,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> ( fds, 1 ) ; int ret <S2SV_ModStart> 1 ) ; ret = service_unbind ( & service_options ) ; if ( ret < 0 ) { s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; return ret ; } <S2SV_ModStart> servname ) ; ret = service_unbind ( & service_options ) ; if ( ret < 0 ) { s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s] <S2SV_blank> failed"", opt -> servname ) ; return ret ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; ret = service_unbind ( & service_options ) ; if ( ret < 0 ) { s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s] <S2SV_blank> failed"", opt -> servname",0
1289,"<S2SV_ModStart> ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( dev_t ) mtree_atol ( & p ) ; if ( result >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_",0
1290,<S2SV_ModStart> parent ) ; if (! i -> width ) return - 1 ; <S2SV_ModStart> width ; } if (! i -> height ) return - 1 ; context. curX = i -> posX ; context. curY = i -> posY ;,0
1291,"<S2SV_ModStart> n ) ; if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if (",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1293,<S2SV_ModStart> void ) { if ( recovery_started ) { recovery_started = 0 ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ;",0
1297,"<S2SV_ModStart> { WORD32 i ; WORD32 st_rps_idx ; WORD32 num_neg_pics, num_pos_pics ; WORD16 * pi2_used ; WORD16 * pi3_delta_poc ; WORD16 * pi4_delta_poc ; WORD16 * pi4_delta_poc ; WORD16 * pi3_delta_poc ; WORD16 * pi4_delta_poc ; WORD16 * pi4_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_after [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_after [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_after [ MAX_DPB_SIZE ], ai4_st_curr_before [ MAX_DPB_SIZE ], ai4_st_curr_after [ MAX_DPB_SIZE ], ai4_st",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = get_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_GET_SYSCALL : ret = ptrace_getsyscall ( child ) ; break ; case PTRACE_SET_SYSCALL : ret = ptrace_setsyscall ( child, datap ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; # endif <S2SV_ModStart> case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ; break ; # endif",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1300,"<S2SV_ModStart> * item, printbuffer * p <S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if ( p ) { out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc ( 7 ) ; if (! out ) return 0 ; if ( p ) out = ( char * ) cJSON_malloc (",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,<S2SV_ModStart> = unix_peer_get ( sk ) ; if (! writable ) { if ( unix_peer ( sk ) == sk ) { if ( unix_peer ( sk ) == sk ) { if ( unix_recvq_full ( sk ) ) writable = 0 ; } else { if ( unix_peer ( sk )!= sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if ( unix_peer ( other ) == sk ) { if (,0
1303,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; quantum. unsigned_value = ( value & 0xffffffff <S2SV_ModEnd> ) ; return,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> void exit_io_context ( struct work_struct * work ) { struct io_context * ioc ; <S2SV_ModStart> current ) ; ioc = work -> io_context <S2SV_ModEnd> ; task_lock ( <S2SV_ModStart> current ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> nr_tasks ) ) { ioc -> exit_func ( ioc ) ; } else { ioc -> exit_func = NULL ; },0
1306,<S2SV_ModStart> ) { * minor_status = 0 <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ) KRB5_BAD_MSIZE ; <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor,0
1307,"<S2SV_ModStart> data ) { unsigned long flags ; unsigned int i ; * value = 0 <S2SV_ModStart> ret = xen_pcibk_read_config_dword <S2SV_ModEnd> ( dev, <S2SV_ModStart>, value, & flags <S2SV_ModEnd> ) ; if <S2SV_ModStart> |= PCI_COMMAND_IO ; if ( flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( flags & IORESOURCE_PREFETCH ) * value",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { vpx_ref_frame_t * frame = va_arg ( args, vp9_ref_frame_t * ) ; vp9_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx <S2SV_ModEnd> -> cpi, <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ) ; yuvconfig2image",0
1309,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } } <S2SV_null>,0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,<S2SV_ModStart> dwc ; req -> <S2SV_ModEnd> started = false <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> usb_gadget_giveback_request ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,<S2SV_ModStart> } # else ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ) <S2SV_ModStart> } # endif ( void ),0
1313,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices <S2SV_ModEnd>, [ DISCE_RESUME <S2SV_ModStart> DISCE_DESTRUCT ] = sas_destruct_devices <S2SV_ModEnd>, } ;",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ) ) { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( """,0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( length, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto tooshort ;",0
1317,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; int family <S2SV_ModStart> out ; if (! msg -> msg_name ) { msg -> msg_name = ( struct sockaddr_in * ) msg -> msg_name ; goto out ; } if ( addr_len ) { if ( isk -> inet_num ) { pr_debug ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"", isk, isk -> inet_num ) ; return - EINVAL ; } else { pr_debug ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"", sk, isk -> inet_num ) ; return - EINVAL ; }",0
1318,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ;",0
1319,<S2SV_ModStart> ; } else <S2SV_ModEnd> { uint32_t new_free_total <S2SV_ModStart> free ( buf ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; bpf_map_inc_nolock <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> tp ; { <S2SV_ModEnd> int cval = <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else for ( ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ]",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> ; if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if (",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1",0
1325,"<S2SV_ModStart>, ubits = BN_num_bits ( u ), vbits = BN_num_bits ( v ) ; if ( ubits > BN_num_bits ( c ) ) goto err ; if ( vbits > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_",0
1326,<S2SV_ModStart> = 256 ; vp8_mse16x16_t vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col = recon_buffer -> col + recon_yoffset ; xd -> pre. row = recon_buffer -> row + recon_yoffset ; xd -> pre. row = recon_buffer -> row + recon_yoffset ; xd -> pre. col = recon_buffer -> col + recon_yoffset ; xd -> pre. row = recon_buffer -> row + recon_yoffset ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col = recon_buffer -> col + recon_yoffset ; xd -> pre. row = recon_buffer -> row + recon_yoffset ; xd -> pre. row = recon_buffer -> row + recon_yoffset ; xd -> pre. col = recon_buffer -> col + recon_yoffset ; xd -> pre. row = recon_buffer -> row + recon_yoffset ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon,0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; } if ( sgn && bits > 0 && bits < 32 ) { value = msg -> data [ msg -> readcount ] ; msg -> bit += 4 ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } msg -> readcount",0
1329,"<S2SV_ModStart> int err = - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> count ; if ( kcontrol -> count > UINT_MAX / kcontrol -> count ) goto error ; <S2SV_ModStart> count ; idx < UINT_MAX / kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, dev ) ; if ( status < 0 ) { status = - ENODEV ; goto out ; }",0
1331,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size ; int <S2SV_ModStart> = overhead ; if ( count < 0 ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } <S2SV_ModStart> = overhead ; if ( size > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
1332,<S2SV_ModStart> ( textview ) ; gtk_text_view_set_text_view_properties ( textview ) ;,0
1333,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval < 0 ) goto err_out ; <S2SV_ModEnd> retval = v9fs_vfs_setattr_dotl <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case",0
1335,<S2SV_ModStart> ) ; } if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; },0
1336,<S2SV_ModStart> case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVkeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( correction_factor > 0.0 ) { const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per",0
1339,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg ( <S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1342,"<S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, i ) == STAR ) { i ++ ; if ( TYPE ( CHILD ( n, i ) == DOUBLESTAR ) break ; if ( TYPE ( CHILD ( n, i ) == DOUBLESTAR ) break ; if ( TYPE ( CHILD ( n, i ) == EQUAL ) nposdefaults ++ ; if ( TYPE ( CHILD ( n, i ) == tfpdef || TYPE ( CHILD ( n, i ) == vfpdef ) ) { i ++ ; if ( TYPE ( CHILD ( n, i ) == DOUBLESTAR ) break ; if ( TYPE ( CH ( n, i ) == DOUBLESTAR ) break ; if ( TYPE ( CH ( n, i ) ==",0
1343,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, uint8_t * left_col, uint8_t * above_data, uint8_t * above_row, const int bs, int x, int y, int plane ) { int i ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; const uint8_t * const_above_row = above_data + 128 ; uint8_t * const_above_row = above_row + 16 ; const int frame_width, frame_height ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_",0
1344,"<S2SV_ModStart> ; } else if ( end < start ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1346,<S2SV_ModStart> i_completed_io_list ) ; ei -> cur_aio_dio = NULL ; ei -> i_datasync_tid = 0 ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; },0
1347,<S2SV_ModStart> BUG ( ) ; if (! thresholds ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> usage = mem_cgroup_usage <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle * <S2SV_ModEnd> ion_handle_get_by_id ( struct <S2SV_ModStart> lock ) ; if (! client ) return ERR_PTR ( - ENODEV ) ; handle = idr_find_and_get ( & client -> idr, id ) ; if (! handle ) handle = ERR_PTR ( - ENOENT ) ; mutex_unlock ( & client -> lock ) ; handle = handle? handle : ERR_PTR ( - EINVAL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart>, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit ( wb, <S2SV_ModEnd> cm -> show_frame <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1",0
1350,<S2SV_ModStart> } ) ; if ( stroff < 0 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } ) ; if ( stroff < 0 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } ) ; if ( stroff < 0 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } ) ; if ( stroff < 0 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> } ) ; if ( stroff < 0 ) { <S2SV_ModEnd> return ; },0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
1352,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; break ; } if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> segment_feature_data, 0, sizeof ( xd -> segment_feature_data ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; memset_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME",0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & context -> nextPacket, sizeof ( uint16_t ) ) ; context -> nextPacket = letoh16 ( context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { enc624j600",0
1355,<S2SV_ModStart> ind ] == 0x01 && ind + 3 < GEMSAFE_MAX_OBJLEN,0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VALUE read_memory ( int argc, VALUE klass, VALUE content, int arglen <S2SV_ModStart> xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, arglen <S2SV_ModEnd> ) ; xmlSchemaParserCtxtPtr <S2SV_ModStart> ( content ), arglen <S2SV_ModEnd> ) ; VALUE <S2SV_ModStart> errors ) ; if ( errors ) rb_iv_set ( rb_schema, ""@errors"", errors ) ; return rb_schema ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> par ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1359,"<S2SV_ModStart> ; if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> / 2 ] ; out [ 3 ] = 0 ; out [ 4 ] = 0 ; out [ 5 ] = 0 ; out [ 6 ] = 0 ; out [ 7 ] = 0 ; out [ 8 ] = 0 ; out [ 9 ] = 0 ; out [ 10 ] = 0 ; out [ 11 ] = 0 ; out [ 12 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 12 ] = 0 ; out [ 13 ] = 0 ; out [ 13 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 14 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ] = 0 ; out [ 15 ],0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> ; err = sock_owned_by_user ( sk ) ; if ( err ) goto out ; err = - EBUSY,0
1364,<S2SV_ModStart> ( handle -> <S2SV_ModEnd> event -> pending_wakeup <S2SV_ModStart> pending ) ; perf_event_wakeup ( handle -> event ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int utf8s_to_utf16s ( <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; if ( <S2SV_ModEnd> u >= PLANE_SIZE <S2SV_ModStart> { u -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10",0
1366,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> i ; if <S2SV_ModStart> ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 4 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 5 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 7 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 8 ) || ( s -> state & PNG_PLTE ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; }",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ;",0
1368,<S2SV_ModStart> = AF_INET6 ; } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET ; } else { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; },0
1369,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) ==",0
1370,"<S2SV_ModStart> * n, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; int name_i = 1 ; node * body ; expr_ty returns = NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name = NEW_IDENTIFIER ( CHILD ( n, name_i + 1 ) ) ; if (! type_comment ) type_comment = NULL ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) { tc = CHILD ( n, name_i + 3 ), 1 ) ; if ( TYPE ( tc ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( tc ) ; } if (! type_comment ) type_comment = NULL ; if (! body ) return",0
1371,<S2SV_ModStart> int i ; flush_tlb_mm ( mm <S2SV_ModEnd> ) ; } <S2SV_ModStart> out : flush_tlb_mm <S2SV_ModEnd> ( ) ;,0
1372,"<S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; if ( error ) return error ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args =",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; jas_uint32_t tilewidth ; jas_uint32_t tileheight ; <S2SV_ModStart> numcomps ) ) { if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" )",0
1374,"<S2SV_ModStart> 0 ) { <S2SV_ModEnd> tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" <S2SV_ModStart> 0 ) { <S2SV_ModEnd> tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" <S2SV_ModStart> 1 ) { <S2SV_ModEnd> tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" <S2SV_ModStart> 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
1375,"<S2SV_ModStart> xmi_catlen ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> xmi_subformlen ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> xmi_catlen ) ; _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } xmi_tmpdata |= * xmi_data ++ ; xmi_tmpdata |= * xmi_data ++ ; xmi_tmpdata |= * xmi_data ++ ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; if ( memcmp ( xmi_data, ""XDIRINFO"", 4 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } xmi_data += 4 ; xmi_size -= 4 ;",0
1376,"<S2SV_ModStart> ; size_t total_len = iov_len ( iov, nr_segs ) ; if ( unlikely ( total_len > PAGE_SIZE ) ) { ret = - EINVAL ; do_wakeup = 1 ; goto out ; } <S2SV_ModStart> -> ops ; size_t <S2SV_ModEnd> addr ; size_t <S2SV_ModStart> ; size_t chars = PAGE_SIZE - buf -> offset ; int error, atomic ; if ( unlikely (! ops -> confirm ( pipe, buf ) ) ) { if (! ret ) ret = - EFAULT ; break ; } <S2SV_ModEnd> error = pipe_iov_copy_to_user <S2SV_ModStart> buf ) ; if ( unlikely (! ops -> fault_in_pages_write ( pipe, buf, chars ) ) { if (! ret ) ret = - EFAULT ; break ; } <S2SV_ModEnd> error = pipe_iov_copy_to_user <S2SV_ModStart>, addr + buf -> offset, chars, atomic ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_",0
1377,"<S2SV_ModStart> GIFOutputCode ( code ) { if ( bits + number_bits > data_size ) { MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( ""MagickError(MagickError(MagickError ( ""MagickError"" ) ), ""MagickImage_EncodeImage_BadImageData"", ""EncodeImage"" ) ) ) ) ) ; return MagickBooleanType. MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( ""MagickError(MagickError(MagickError ( ""MagickError(MagickError ( ""MagickError(MagickError(MagickError(MagickError(MagickError(MagickError( ""MagickError"" ) ""EncodeImageData"", ""BadImageData"" ) ) ) ) ; return MagickBooleanType. MagickError ( MagickError ( ""MagickError(MagickError ( ""Mag",0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> ] ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> res ) ; res = - 1 ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> %d\\n"", res ) ; res = - 1 ; goto die_clean ; } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; res = - 1 ; goto die_clean ; } <S2SV_ModStart> res ) ; res = - 1 ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; res = - 1 ; goto die_clean ; } if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; res = - 1 ; goto die_clean ; } <S2SV_ModStart>",0
1380,"<S2SV_ModStart> ; if (! jas_valid_cmdname ( argv [ 0 ] ) ) { abort ( ) ; } cmdname = argv [ 0 ] ; infile = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : default : usage ( ) ; break ; } jas_setdbglevel ( verbose ) ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 )",0
1381,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,<S2SV_ModStart> ; for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel (,0
1383,"<S2SV_ModStart> needed ) ; if (! nl ) { dm_ioctl ( filp, DM_IOC_GET_SIZE, & len ) ; return - EINVAL ; }",0
1384,<S2SV_ModStart> ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) NULL ;,0
1385,"<S2SV_ModStart> vcpu_info ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> nr_rt_entries ) ; if ( guest_irq >= irq_rt -> nr_rt_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> ) ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if ( ret < 0 ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; goto out ; } } <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, e, & irq ) ) { ret = irq_set_vcpu_affinity ( host",0
1386,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfqd -> queue_lock ) ; <S2SV_ModStart> bfqq ) ; spin_unlock_irq ( & bfqd -> queue_lock,0
1387,<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == 0 && rold -> smax_value == 0 && tnum_is_unknown ( rold -> var_off ) ) return false ; if (,0
1388,<S2SV_ModStart> handle ) return NULL <S2SV_ModEnd> ; pointer =,0
1389,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ ( UINT8 ) <S2SV_ModEnd> orderInfo -> orderType,0
1390,<S2SV_ModStart> -> d_inode ) { if (! d_inode ( new ) ) { err = - EINVAL ; goto out ; } },0
1391,"<S2SV_ModStart> ; if ( n < 0 ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) sstart, ( int ) sprev ) ; return - 1 ; } <S2SV_ModStart> ; if ( n < 0 ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> option: <S2SV_blank> %s, <S2SV_blank> encoding: <S2SV_blank> %s, <S2SV_blank> case_fold_flag: <S2SV_blank> %d, <S2SV_blank> num_mem: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) n, sprev, ( int ) sstart, ( int ) sprev ) ; return - 1 ; } if ( n < 0 ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> option: <S2SV_blank> %s, <S2SV_blank> encoding: <S2SV_blank> %s, <S2SV_blank> case_fold: <S2SV_blank> %d, <S2SV_blank> num_mem: <S2SV_blank> %d, <S2SV_blank> num_mem: <S2SV_blank> %d",0
1392,<S2SV_ModStart> int plane ; for ( plane = 0 ; plane < MAX_MB_PLANE,0
1393,"<S2SV_ModStart>, error = <S2SV_ModEnd> - EINVAL ;",0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_readers = 0 ; sr -> vhost_fdt_chain = NULL ;,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; }",0
1396,<S2SV_ModStart> ) ) { u32 <S2SV_ModEnd> csum = virtio_cread_feature <S2SV_ModStart> ( csum ) { dev -> hw_features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) ; <S2SV_ModStart> ( csum ) { dev -> hw_features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) ; } else { dev -> hw_features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) ; } <S2SV_ModStart> ( csum ) { dev -> hw_features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) ; },0
1397,<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) { * err = EINVAL ; return NULL ; },0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1399,<S2SV_ModStart> ranges = malloc ( <S2SV_ModEnd> sizeof ( MappedRange,0
1400,<S2SV_ModStart> fa ) ) { xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; } else { xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; },0
1401,"<S2SV_ModStart> ; if ( ( ( <S2SV_ModStart> VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx ->",0
1402,<S2SV_ModStart> ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1403,<S2SV_ModStart> event ) ; spin_lock_irq ( & swhash -> lock ) ; <S2SV_ModStart> - EINVAL ; } spin_unlock_irq ( & swhash -> lock ) ;,0
1404,"<S2SV_ModStart>, const u_char * pptr, u_int len, u_int flags <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( flags & IFF_NOARP ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> ipv4 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( flags & IFF_NOARP ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( flags & IFF_IPV6_ADDRESS ) { if ( flags & IFF_IPV6_ADDRESS ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( flags & IFF_NOARP ) { ND_PRINT ( ( ndo, ""no <S2SV_blank> ipv6 <S2SV_blank> address"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( flags & IFF_IPV6ADDRESS ) { if ( flags & IFF_IPV6ADDRESS ) { if ( flags & IFF_IPV6ADDRESS ) {",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'60%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'40%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ""</table>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ( constr1, sizeof ( constr1 ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ( constr2, sizeof ( constr2 ) <S2SV_ModEnd>, ""%s"",",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; },0
1409,"<S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart>, & len <S2SV_ModEnd>, iovec )",0
1410,<S2SV_ModStart> binary_header. request. key = 0 ; c -> binary_header. request. body = 0 ;,0
1411,"<S2SV_ModStart> bNumInterfaces ; } if ( header -> bLength < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; retval = - EINVAL ; goto error ; } if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, plural ( size2, sizeof ( struct usb_descriptor_header ) ) ) ; retval = - EINVAL ; goto error ; } if ( header -> bLength < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> byte%s, <S2SV_blank> ignoring\\n"", cfgno, size2, plural ( size2, sizeof ( struct usb_descriptor_header ) )",0
1412,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> - ENOMEM ; ue -> card = card ; ue -> count = info -> count ;,0
1413,"<S2SV_ModStart> client_p, client_p <S2SV_ModEnd>, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" )",0
1414,<S2SV_ModStart> case 0x66 : if ( mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EM,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1417,"<S2SV_ModStart> 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } } xd -> mode_info_context -> mbmi. ref_frame = INTRA_FRAME ; for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { vp8_build_intra_predictors_mby_s ( xd, mode, 16, sse ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; distortion = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; distortion = x -> mbmode_cost [ mode ] [ distortion ] ; sse = x -> mbmode_cost [ mode",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; start [ maxlen - 1 ] = 0 ; start [ maxlen - 1 ] = 0 ; psf -> headindex = strlen ( ( char * ) psf -> header ) ; start [ maxlen - 1 ] = 0 ; psf -> headindex = strlen ( ( char * ) psf -> header ) + maxlen ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; start [ maxlen - 1 ] = 0 ; psf -> headindex = strlen ( ( char * ) psf -> header ) <S2SV_ModEnd> ; return ;",0
1420,<S2SV_ModStart> ; if ( unconditional ( e <S2SV_ModEnd> ) ) ||,0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_priv_t * priv = ctx -> priv -> alg_priv ; if ( priv ) priv -> destroy ( priv ) ; else priv = NULL ; } <S2SV_ModStart> iface -> destroy ( priv <S2SV_ModEnd> ) ; ctx,0
1422,"<S2SV_ModStart> ) ; } if ( exit_reason == EXIT_REASON_RDPMC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; }",0
1423,<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> tx_size_search_method <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> subpel_iters_per_step <S2SV_ModStart> = 2 ; <S2SV_ModEnd> sf -> mode_skip_start <S2SV_ModStart> = 10 ; <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> -> use_rd_breakout = 1 <S2SV_ModEnd> ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> adaptive_motion_search <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> auto_mv_step_size <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> intra_y_mode_mask <S2SV_ModStart> = INTRA_DC_H_V ; <S2SV_ModEnd> sf -> intra_uv_mode_mask <S2SV_ModStart> = INTRA_DC_H_V ; <S2SV_ModEnd> sf -> intra_y_mode_mask <S2SV_ModStart> TX_16X16 ] = INTRA_DC_H_V ; <S2SV_ModEnd> sf -> intra_y_mode_mask <S2SV_ModStart> = INTRA_DC_H,0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < sizeof ( _dh ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; }",0
1425,<S2SV_ModStart> struct compat_timex tx32 ; txc -> modes = tx32. modes ; txc -> offset = tx32. offset ; txc -> freq = tx32. freq ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ;,0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote < 0 ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> invalid <S2SV_blank> quote <S2SV_blank> character"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> invalid <S2SV_blank> quote <S2SV_blank> character"" ) ; } Py_DECREF ( s ) ; PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, Load, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; ast_error ( n, buf ) ; Py_DECREF",0
1430,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> int is_keyframe_qaunt_set = <S2SV_ModStart> ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-",0
1431,"<S2SV_ModStart> mask & KADM5_PRINCIPAL <S2SV_ModEnd> ) || ( <S2SV_ModStart> mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return ret ; if ( mask & KADM5_POLICY",0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; if ( linesize < 0 ) return linesize ; int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( plane = 0 ; plane < 4 && frame -> linesize [ plane ] ; plane ++ ) { int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; int h = ff_ceil_rSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize )",0
1433,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mb",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> ) ) { do_error <S2SV_ModEnd> ( dbh, <S2SV_ModStart> ) ) { do_error <S2SV_ModEnd> ( dbh,",0
1437,<S2SV_ModStart> (! ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> size ) == 0 <S2SV_ModEnd> ) ) pthread_mutex_unlock <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_WRITE <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) ) || <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) ) || <S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_WRITE <S2SV_ModEnd> ) )!=,0
1438,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_len < 0 ) { mpdu_len = 0 ; } <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_len > MAX_AMPDU_LEN ) { mpdu_len = MAX_AMPDU_LEN ; } <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_len > MAX_AMPDU_LEN ) { mpdu_len = MAX_AMPDU_LEN ; if ( mpdu_len < 0 ) { mpdu_len = 0 ; } <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_len > MAX_AMPDU_LEN ) { mpdu_len = MAX_AMPDU_LEN ; } <S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( mpdu_len > MAX_AMPDU_LEN ) { mpdu_len = MAX_AMPDU_LEN ; if ( mpdu_len > MAX_AMPDU_LEN ) { mpdu_len = 0 ; } <S2SV_ModStart> struct ieee_802_11_,0
1439,<S2SV_ModStart> = s_malloc ( <S2SV_ModEnd> hdrlen + initlen,0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; if ( context -> priv -> PlaneBuffers [ 0 ] + ( context -> height - 1 - y ) * scanline > context -> priv -> PlaneBuffers [ 1 ] + ( context -> height - 1 - y ) * context -> width ) return FALSE ; src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + ( context -> height - 1 - y ) * scanline ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + ( context -> height - 1 - y ),0
1441,"<S2SV_ModStart> + 1 ; } if ( offset < end_offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; } else { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; }",0
1442,<S2SV_ModStart> - EINVAL ) { kfree ( op_stack ) ; <S2SV_ModStart> - EINVAL ) ; kfree ( inverts ) ; return ERR_PTR ( - ENOMEM ) ; },0
1443,<S2SV_ModStart> cpi ) { RATE_CONTROL * const rc = & cpi -> td. rc ; int target ; if ( cpi -> common. current_video_frame == 0 ) { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? <S2SV_ModEnd> INT_MAX : ( <S2SV_ModStart> int ) ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> / ( cpi <S2SV_ModStart> / 2 ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> rc -> av_per_frame_bandwidth <S2SV_ModEnd> ) >> 4,0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,"<S2SV_ModStart> OSPF_TYPE_HELLO : { ND_TCHECK_32BITS ( & hellop -> hello_options ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK ( hellop -> hello_deadint ) ; if ( EXTRACT_16BITS ( & hellop -> hello_deadint )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Priority <S2SV_blank> %u"", EXTRACT_16BITS ( & hellop -> hello_priority ) ) ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( n",0
1447,<S2SV_ModStart> datalen ) { <S2SV_ModEnd> return - ENOTSUPP,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; }",0
1449,"<S2SV_ModStart> 6 : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } <S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } <S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 102 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1058 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1048 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 ""re_grammar.",0
1450,<S2SV_ModStart> ; * ptr = ( char ) <S2SV_ModEnd> ( ( existing <S2SV_ModStart> bitIdx ) ) <S2SV_ModEnd> ; if (,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = & cpi -> td. macroblock_data <S2SV_ModEnd> ; TOKENEXTRA * <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> * 32 ] <S2SV_ModStart> uint8_t token_cache [ 64 <S2SV_ModEnd> ] ; MB_MODE_INFO <S2SV_ModStart> int16_t * qcoeff = BLOCK_OFFSET ( p -> <S2SV_ModEnd> qcoeff, block <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd>, block ) <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd>, block ) <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd>, block ) <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET",0
1452,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> & SHM_RND ) { if ( shmflg & SHM_WRITE ) { if ( shmflg & SHM_WRITE ) addr &= ~ ( shmlba - 1 ) ; else # ifndef __ARCH_FORCE_SHMLBA if ( ( addr & ~ PAGE_MASK ) == 0 ) { err = - EINVAL ; goto out ; } } else { if ( ( shmflg & SHM_PUT ) ) { if ( shmflg & SHM_PUT ) { err = - EFAULT ; goto out_unlock ; } } else { if ( shmflg & SHM_EXEC ) { err = - EPERM ; goto out_unlock ; } },0
1454,"<S2SV_ModStart> serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1459,"<S2SV_ModStart> s ) { if ( errno == EAGAIN ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( strcmp ( xIter -> name, ""id"" ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } <S2SV_ModEnd> while ( cIter",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> ) { int <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; in_uint8s ( s, length ) ;",0
1463,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
1464,<S2SV_ModStart> only_420 ) { if ( only_420 ) { <S2SV_ModStart> VPX_IMG_FMT_I420 ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_U420 ; },0
1465,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ( read_uids_guids ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> ( table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( fd, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( fd, sBlk. s",0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> rule ) { RB_INIT ( & env -> tree ) ; <S2SV_ModStart> } } return env <S2SV_ModEnd> ; } <S2SV_null>,0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ], cm -> mi_rows * cm -> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> segment ], cm -> in_frame_q_adj_ratio [ segment ], cm -> mi_rows * cm -> mi_cols ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ], cm -> in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg, segment, SEG_LVL_ALT_Q",0
1469,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; stmt_attributes = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! add_attributes ( stmt_type, stmt_attributes, 4",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModEnd> ) ; if <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1471,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 4 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY <S2SV_ModStart> += 2 ; <S2SV_ModEnd> context -> curY,0
1472,<S2SV_ModStart> ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
1473,"<S2SV_ModStart> SDRC_ERROR ) ; } if ( sr -> fid_ofile!= sr -> fid ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1474,<S2SV_ModStart> ) ) { if ( WARN_ONCE ( cp == buf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == visbuf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == visbuf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == buf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == buf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == visbuf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == visbuf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == buf ) ) { wrerrno = EPERM ; goto screwup ; } if ( WARN_ONCE ( cp == buf ) ) { wrerrno = EPERM ; goto screwup ; },0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean ; double * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> outpos = outputbuffer <S2SV_ModStart> = outputbuffer ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = outputbuffer ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""\\\\axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> = outputbuffer ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> = 1 ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' && * t!= '\\t' && * t!= '\\n' && * t ) t ++ ; * t ++ = 0 ; * t ++",0
1476,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> static u32 ip_idents_hashrnd <S2SV_ModStart> ip_idents_hashrnd __read_mostly ; u32 hash <S2SV_ModEnd>, id ; <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1477,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = lookup_attr_id ( obj, & PyId_step ) ) { int res ; res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> * probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
1479,"<S2SV_ModStart> ; if ( ctl -> pw -> pw_uid!= ctl -> pw -> pw_uid ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; return - 1 ; }",0
1480,<S2SV_ModStart> { if ( get_unaligned_le16 ( & radiotap_header -> it_version )!= IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> this_arg = iterator -> _arg ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1481,"<S2SV_ModStart> int err ; struct tc_cls_u32_key * key ; <S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } key = be32_to_cpu ( knode -> sel -> keys [ 0 ]. key ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = knode -> sel -> keys [ 0 ]. mask <S2SV_ModEnd> & 0xff ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr,",0
1483,<S2SV_ModStart> cfg. g_pass <S2SV_ModEnd> = global -> <S2SV_ModStart> : VPX_RC_ONE_PASS ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; },0
1484,"<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_error ( error
1485,"<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row",0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9Decoder * vpx_decoder_create ( VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) { VP9Decoder * const pbi = vpx_allocate ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp",0
1487,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ;",0
1488,<S2SV_ModStart> count ; new_fpl -> old_count = fpl -> count ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == NULL || opt -> opt.,0
1490,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_token * tree2tok ( vpx_token * tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } }",0
1491,"<S2SV_ModStart> res = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags",0
1492,<S2SV_ModStart> wqh ) ; mutex_lock ( & ctx -> lock ) ; <S2SV_ModStart> clockid = clockid ; mutex_unlock ( & ctx -> lock,0
1493,"<S2SV_ModStart> ; struct mount * child, * p ; int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & q -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } unlock_mount_hash ( ) ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( source_mnt -> mnt_",0
1494,"<S2SV_ModStart>, & len, 0",1
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1496,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> ) { Huff_transmit <S2SV_ModEnd> ( huff, <S2SV_ModStart> } else { Huff_transmit <S2SV_ModEnd> ( huff -> <S2SV_ModStart> ], NULL <S2SV_ModEnd>, fout )",0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> common ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> e_mbd ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mi ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mbmi ; <S2SV_ModStart> x -> skip_recode <S2SV_ModEnd> = ctx -> <S2SV_ModStart> -> skip_optimize = ( cpi -> oxcf. <S2SV_ModEnd> allow_skip_recode ; x <S2SV_ModStart> -> skip_optimize = ( cpi -> oxcf. <S2SV_ModEnd> allow_skip_optimize ) ; <S2SV_ModStart> } else { <S2SV_ModEnd> set_ref_ptrs ( cm <S2SV_ModStart> } else { <S2SV_ModEnd> set_ref_ptrs ( cm <S2SV_ModStart> } else { <S2SV_ModEnd> set_ref_ptrs ( cm <S2SV_ModStart> } else { <S2SV_ModEnd> set_ref_ptrs ( cm <S2SV_ModStart> xd, xd, mbmi -> ref_frame [ 0 ], mbmi -> ref_frame [ 1 ], mbmi -> ref_frame [ 2 ], mbmi -> ref_frame [ 3 ], mbmi -> ref_",0
1500,"<S2SV_ModStart> key ) { struct crypto_skcipher * tfm_des = NULL ; struct scatterlist sgin, sgout ; <S2SV_ModEnd> struct skcipher_request * <S2SV_ModStart> tfm_des = crypto_alloc_skcipher ( <S2SV_ModEnd> ""ecb(des)"", 0 <S2SV_ModStart>, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_free_skcipher ; } crypto_skcipher_setkey ( tfm_des, key <S2SV_ModEnd>, 8 ) <S2SV_ModStart> 8 ) ; sg_init_one ( & sgin, in, 8 ) ; sg_init_one ( & sgout, out, 8 ) ;",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header. <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ;",0
1503,<S2SV_ModStart> delta ; else { if ( i + insn -> off + 1 < pos ) insn -> off -= delta ; } else { <S2SV_ModEnd> if ( i <S2SV_ModStart> pos && i + <S2SV_ModEnd> insn -> off,0
1504,"<S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry\\n"", __func__ ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason",0
1505,"<S2SV_ModStart> { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; path_put ( & nd -> path ) ;,0
1508,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) { assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; return r ; } <S2SV_ModEnd> return r ;",0
1509,"<S2SV_ModStart> x += 4 ) { if ( dds_info -> width < x || dds_info -> height < y ) return MagickFalse ; <S2SV_ModStart> y ), dds_info -> width < y || dds_info -> height < y || <S2SV_ModStart> ) return MagickFalse ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; <S2SV_ModStart> } } } return ( <S2SV_ModStart> dds_info, 8 ) <S2SV_ModEnd> ; } <S2SV_null>",0
1510,"<S2SV_ModStart> length ) { int ret ; struct sockaddr * buf ; buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; if (! buf ) return - ENOMEM ; buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; ret = TEMP_FAILURE_RETRY ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; if (! buf ) return - ENOMEM ; buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ; ret = TEMP_FAILURE_RETRY ( length, GFP_KERNEL ) ; if (! buf ) return - ENOMEM ;",0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1512,"<S2SV_ModStart> cfg ) { int i ; memset ( cfg, 0, sizeof ( cfg_t ) ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = argv [ i ] + 1 ; if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = argv [ i ] + 2 ; if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = argv [ i ] + 3 ; if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = argv [ i ] + 4 ; if ( strcmp ( argv [ i ], ""help"" ) == 0 ) cfg -> help = argv [ i ] + 5 ; if ( strncmp ( argv [ i ], ""help="", 9 ) == 0 ) cfg -> help = argv [ i ] + 9 ; if ( strncmp ( argv [ i ], ""help="", 17 ) == 0 ) cfg -> help = argv [ i ] + 17 ; if ( strncmp ( argv [ i ], ""help="", 9 ) == 0 )",0
1513,"<S2SV_ModStart> = DEF_IPU_UTIL ; if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy |= 1 << F2FS_IPU_FSYNC ;",0
1514,"<S2SV_ModStart> ) ) { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; }",0
1515,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf. noise_sensitivity > 0 && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) && ( cpi -> oxcf. noise_sensitivity > 0 ) &&,0
1517,"<S2SV_ModStart> ; if ( used ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_add_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - EBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused",0
1518,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check ( s, length ) ) { ui_clip_protocol_error ( ) ; return ; } <S2SV_ModStart> if ( status == CLIPRDR_ERROR ) { logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_RESPONSE, NULL, 0 ) ; return ; } if ( status == CLIPRDR_ERROR ) { logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_FORMAT_ANNOUNCE : ui_clip_sync ( ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint",0
1519,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1520,<S2SV_ModStart> next ) { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { break ; } } else { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { break ; } } else { if ( l -> lineBuf [ c_rows ]!='<S2SV_blank>') { break ; } } else { if ( l -> lineBuf [ c_rows ],0
1521,<S2SV_ModStart> { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> -,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( bps * stride <S2SV_ModEnd> ) ) == <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> _TIFFmemcpy ( tmp <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1525,"<S2SV_ModStart> { uint16 num_updates ; uint16 left, top, right, bottom, width, height ; uint8 * data ; uint8 * bmpdata ; int size ; int x, y ; logger ( Protocol, Debug, ""%s()"", __func__ ) ; num_updates = in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; Bpp = ( bpp + 7 ) / 8 ; xfree ( bmpdata ) ; continue ; } if (! ( compress & 0x100 ) ) { logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; data = ( uint8 * ) xmalloc ( width * height * Bpp ) ; xfree ( bmpdata ) ;",0
1526,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
1528,<S2SV_ModStart> name ) ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ) ) r = TEMP_FAILURE_RETRY (,0
1529,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_state * state = d -> priv ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x83 ; state -> data [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( d, state -> data, 3, state -> data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; state -> data",0
1530,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAP",0
1531,"<S2SV_ModStart>, int uv_block_size, vpx_bit_depth_t bit_depth <S2SV_ModStart> ; const InterpKernel * const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_q4 ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) > sizeof ( buf ) - 1 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > sizeof ( buf ) - 1 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( strlen ( origbuf ) > sizeof ( buf ) - 1 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> < count ; ++ i ) { if ( numbers [ i ] < 0 ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModEnd> n = cJSON_CreateFloat <S2SV_ModStart> ] ) ; if (! n ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModEnd> n = cJSON_CreateFloat <S2SV_ModStart> ] ) ; if (! p ) { suffix_object ( p, n ) ; p = n ; } else { suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,<S2SV_ModStart> float * w = f -> previous_window [ i ] <S2SV_ModEnd> ; for (,0
1536,"<S2SV_ModStart> data_end ) { VP9_COMMON * const cm = & pbi -> common ; const uint8_t * bit_reader_start = NULL ; const uint8_t * bit_reader_end = NULL ; const int aligned_mi_cols = cm -> mi_cols ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const int tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( tile_cols <= ( 1 << 6 ) ) { assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; ( void ) tile_rows ; if ( pbi -> tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP",0
1537,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; <S2SV_ModStart> ( ) ; <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> ( ) ; <S2SV_ModEnd> break ; # <S2SV_ModStart> break ; # ifdef LIBRAW_LIBRARY_BUILD case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { if (! strncasecmp ( model, """,0
1538,"<S2SV_ModStart> seg = & cpi <S2SV_ModEnd> -> seg ; <S2SV_ModStart> -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; if ( cpi -> rc. is_src_frame_alt_ref ) { seg -> abs_delta = SEGMENT_DELTADATA ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LV",0
1539,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; }",0
1540,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> -> has_detail? <S2SV_ModEnd> error -> detail,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> bson_validate_with_error ( b, _flags, & error ) ) ; ASSERT_ERROR_CONTAINS ( error, BSON_ERROR_INVALID, _flag, _msg ) ;",0
1543,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
1544,<S2SV_ModStart> ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) {,0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb.,0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) { if (! isdigit ( ( * fmt ) ++ ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; <S2SV_ModEnd> return a ;,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ;",0
1548,"<S2SV_ModStart> = 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1549,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> char * server <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = cib_remote_dispatch, <S2SV_ModEnd>. destroy = <S2SV_ModStart> = cib_remote_connection_destroy, <S2SV_ModEnd> } ; connection <S2SV_ModStart> -> socket = 0 <S2SV_ModEnd> ; sock = <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> session <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = NULL ; connection -> session = NULL ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1551,"<S2SV_ModStart> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> cpi, 0, sizeof ( VP8_COMMON ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; cpi -> common. current_video_frame = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> kf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> temporal_pattern_counter = 0 ; cpi -> temporal_pattern_counter = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi ->",0
1552,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJOR, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJOR, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1553,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( icp -> icmp6_data16 [ 0 ] ) ; if ( icp -> icmp6_data16 [ 0 ] & 0x80 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; }",0
1554,"<S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) { * set_rtrn = false ; return false ; } <S2SV_ModStart>, set_rtrn ) ; if (! ok ) { * set_rtrn = false ; return false ; }",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
1557,"<S2SV_ModStart> Image * image ; ImageInfo * image_info = ( ImageInfo * ) NULL ; ImageInfo * image_info = ( ImageInfo * ) NULL ; ImageInfo * image_info = ( ImageInfo * ) NULL ; Assert ( image_info!= ( const ImageInfo * ) NULL ) ; if ( image_info!= ( const ImageInfo * ) NULL ) { image_info = DestroyImageList ( image_info ) ; return ( DestroyImageList ( image ) ) ; } image_info = ( ImageInfo * ) NULL ; if ( image_info!= ( ImageInfo * ) NULL ) { status = SetImageExtent ( image_info, image_info, image_info ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image_info, image_info ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image_info -> debug!= MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image )",0
1558,<S2SV_ModStart> = 0 ; i < <S2SV_ModEnd> JPC_MAXBANDS ; ++ <S2SV_ModStart> = 0 ; i < JPC_MAXBANDS ; ++ i ) { bandinfos [ i ]. bandno = bandno ; bandinfos [ i ]. analgain = 0 ; bandinfos [ i ]. rlvlno = bandno ; bandinfo [ i ]. rlvlno = bandno ; bandinfo [ i ]. rlvlno = bandno ; bandinfo [ i ]. width = cp -> imgareatlx ; bandinfo [ i ]. yoff = cp -> imgareatly ; siz -> width = cp -> imgareatwidth ; siz -> height = cp -> imgareatly ; siz -> tilewidth = cp -> tilewidth ; siz -> tileheight = cp -> tileheight ; siz -> tilexoff = cp -> tilegrdoffx ; siz -> tileyoff = cp -> tilegrdoffy ; siz -> tileyoff = cp -> tilegrdoffy ; siz -> tileyoff = cp -> tilegrdoffy ; siz -> tilewidth = cp -> tilewidth ; siz -> tileheight = cp ->,0
1559,"<S2SV_ModStart> chanmode_found ) { if ( irc_server_get_state ( server )!= IRC_SERVER_CONNECTED ) { irc_server_set_state ( server, IRC_SERVER_DISCONNECTED ) ; return ; }",0
1560,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> return error ; error = http_verify_certificate ( t, & cert ) ; if ( error!= GIT_OK ) { giterr_set ( GITERR_NET, ""certificate <S2SV_blank> check <S2SV_blank> failed"" ) ; return error ; } <S2SV_ModEnd> giterr_clear ( )",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ] ) ; ++ xd -> counts -> <S2SV_ModEnd> comp_inter [ ctx",0
1564,"<S2SV_ModStart>! stream ) fatal <S2SV_ModEnd> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; prev -> next = NULL ; return NULL ; } res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == V",0
1565,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str (",0
1566,<S2SV_ModStart> = 0 ; ( ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror,0
1567,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank>",0
1568,<S2SV_ModStart> ; if ( A >= skb -> len ) return 0 ; if ( <S2SV_ModStart> A ] ; if ( nla -> nla_len < A - skb -> len ) return 0 ; <S2SV_ModStart> nla -> nla_len <S2SV_ModEnd> > A - <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""</message>""",0
1571,<S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len < priv -> cac_id_len ) { return SC_ERROR_INVALID_DATA ; },0
1572,<S2SV_ModStart> = 0 ; tok -> type_comments = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alttabsize <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1573,<S2SV_ModStart> maxBitrate ; } av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config,0
1574,<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) return r ;,0
1575,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS ) ; <S2SV_ModStart> dpbSize ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ;,0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = sizeof ( struct oe_sockaddr_storage ) ; addrlen_in = addrlen_out ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe,0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> final ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions_rcu <S2SV_ModEnd> * np = <S2SV_ModStart> np ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference ( opt_space ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt = rcu_dereference ( opt_space ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) { opt =",0
1580,"<S2SV_ModStart>, at ; <S2SV_ModEnd> struct pe_image_optional_hdr64 opt64 <S2SV_ModStart> pe_image_optional_hdr32 opt32 ; <S2SV_ModEnd> struct pe_image_section_hdr * <S2SV_ModStart> pe_image_optional_hdr64 opt64 ; <S2SV_ModEnd> struct pe_image_section_hdr * <S2SV_ModStart> uint32_t valign, hdr_size <S2SV_ModEnd>, j ; <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, j, & opt64, & opt32, & pe_plus, & corrupted_cur, sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ) <S2SV_ModStart>, & pe_plus, sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), & pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_plus ), sizeof ( pe_",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1582,"<S2SV_ModStart> ) ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1583,"<S2SV_ModStart> new_parent ) { if (! test_and_set_tsk_thread_flag ( child, TIF_SYSCALL_NR ) ) { WARN_ON ( 1 ) ; return ; } <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart> new_parent, __task_cred ( child ) <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> command <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> callback <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> command <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> command <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> command <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> private -> callback <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> crm_xml_add ( hello,0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> } ; int num00 <S2SV_ModEnd>, sr = <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm <S2SV_ModEnd> = MIN ( <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, <S2SV_ModEnd> step_param, & <S2SV_ModStart>, & num00 <S2SV_ModEnd>, & v_fn_ptr <S2SV_ModStart>, & v_fn_ptr, <S2SV_ModEnd> x -> nmvjointcost <S2SV_ModStart> ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err",0
1587,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error <S2SV_ModEnd> ; } if",0
1588,"<S2SV_ModStart> resbody_no_files_limit ) ; if ( merged -> reqbody_no_files_limit > parent -> reqbody_no_files_limit ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""merge_directory_configs(parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp)"", _parent, _child, NULL ) ; return NULL ; }",0
1589,"<S2SV_ModStart> ( ctl_buf, ctl_len, sizeof ( * ctl_buf ) ) ; if ( err ) goto out_freeiov ;",0
1590,"<S2SV_ModStart>, one_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = number_planes_filled ; number_planes = number_planes_filled ; pixel_info = ( MemoryInfo * ) p ; if ( number_pixels > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""Improper",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,"<S2SV_ModStart> cib_client_t * client <S2SV_ModEnd> = user_data ; <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) { markvalue ( g, uv -> v ) ; } else { markvalue ( g, uv -> v ) ; } } <S2SV_ModEnd> } return work",0
