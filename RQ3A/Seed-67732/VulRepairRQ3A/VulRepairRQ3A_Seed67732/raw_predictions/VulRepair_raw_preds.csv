,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } nonce1 = json_object_get ( val, ""nonce1"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; nonce1 = json_object_get ( val, ""nonce2"" ) ; nonce1 = json_object_get ( val, ""nonce1"" ) ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", n2size, err. text ) ; goto out ; } <S2SV_ModStart> ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", n2size, nonce1 ) ; nonce1 = json_object_get ( val, ""nonce1"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", n2size, err.",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK ( * tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> type <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type",0
2,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out <S2SV_ModEnd> ; } mutex_unlock,0
3,"<S2SV_ModStart> yamdrv_ioctl_cfg ) ) { if ( copy_to_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; <S2SV_ModStart> return - EINVAL ; } if ( copy_to_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( copy_to_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & yi. cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen + frag_hdr_sz > skb -> len ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ( unfrag_ip6hlen + frag_hdr_sz > skb -> len ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen + frag_hdr_sz + frag_hdr_sz > skb -> len ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> ( unfrag_ip6hlen + frag_hdr_sz > skb -> len ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( i >= index -> item_count ) { av_log ( mov -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ++ ) { if ( i >= index -> item_count ) { av_log ( mov -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ++ ) { if ( i >= index -> item_count ) { av_log ( mov -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ++ ) { if ( i >= index -> item_count ) { av_log ( mov -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> items <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & ret ) ; if ( ret ) return ERR_PTR ( ret ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tport_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return NULL",0
7,"<S2SV_ModStart> ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 1 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 2 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> ) { u32 <S2SV_ModEnd> data ; void <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic",0
9,<S2SV_ModStart> src ) ; flush_altivec_to_thread ( src ) ; flush_vsx_to_thread ( src ) ;,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> item > 0 && <S2SV_ModEnd> c -> next <S2SV_ModStart> -> next ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; * data = ( void * ) options ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s",0
12,<S2SV_ModStart> ) ) { if ( unlikely ( fptr == ERR_PTR ( - EINVAL ) ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } <S2SV_ModStart> ( fptr == ERR_PTR ( - EINVAL ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
13,"<S2SV_ModStart> perf_sw_event ( u32 <S2SV_ModEnd> event_id, u64 <S2SV_ModStart> ) ; do_perf_sw_event <S2SV_ModEnd> ( PERF_TYPE_SOFTWARE, <S2SV_ModStart>, & data, NULL <S2SV_ModEnd> ) ; perf_swevent_put_recursion_context",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header * leaf ; char * buf ; int i ; buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = ( struct grub_ext4_extent_header * ) leaf + 1 ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t step1 [ 8 ] ; tran_high_t step2 [ 8 ] ; tran_high_t step3 [ 8 ] ; tran_high_t input [ 8 ] ; tran_high_t input [ 8 ] ; tran_high_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 10 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 0 ] - in [ 15 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [ 4",0
16,<S2SV_ModStart> env ) ; kfree ( env -> insn_aux_data ) ; <S2SV_ModStart> env ) ; err_free_env : mutex_unlock ( & bpf_verifier_lock ) ;,0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) if ( config -> sample_rate % sample_rates [ i ] == 0 ) { config -> sample_rate /= sample_rates [ i ] ; } else { config -> sample_rate /= sample_rates [ i ] ; } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""hybrid <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> available <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> xmode = 0 ; } else if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""hybrid <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_device_online ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModEnd> retry : if <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CD",0
19,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int <S2SV_ModEnd> max_filter_level = get_max_filter_level <S2SV_ModStart> ( cpi ) ; VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filter_step = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_err",0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; <S2SV_ModStart> left == 0 ) { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", limit, offset ) ; } else { luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ; luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; return luaL_error ( L, ""Invalid <S2SV_blank> request <S2SV_blank> to <S2SV_blank> unpack <S2SV_blank> with <S2SV_blank> offset <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> and <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d."", offset, len ) ; }",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> ) ; return <S2SV_ModEnd> rng_alg -> cra_rng <S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> rng_alg -> cra_rng,0
24,"<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) || sockaddr_len > sizeof ( struct sockaddr_pppox_proto ) ) return - EINVAL ; if ( <S2SV_ModStart> sa_protocol!= PX_PROTO_PPTP || sockaddr_len < sizeof ( struct sockaddr_pppox_proto ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. p",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_FAILURE ) ; } } if ( ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid,",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ) ) ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; <S2SV_ModStart> intf ) ; if ( intf1 -> desc. bNumInterfaces < 1 || intf1 -> desc. bNumInterfaces > 1 ) return - ENODEV <S2SV_ModEnd> ; alt = <S2SV_ModStart> intf ) ; if ( alt < 0 ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> udev, intf1 -> desc. bInterfaceNumber, alt ) ; } if ( intf1 -> desc. bNumInterfaces > 1 ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart>, intf -> desc. bInterfaceNumber, intf1 -> desc. bNumInterfaces <S2SV_ModEnd> ) ; }",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart>, int fromlen, <S2SV_ModEnd> char * to <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct pathComponent * <S2SV_ModStart> case 2 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 3 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( sb, <S2SV_ModStart> += udf_get_filename ( sb, <S2SV_ModStart> += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 3 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ =",0
31,"<S2SV_ModStart> = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> port"" ; goto loaderr ; } <S2SV_ModStart> = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> port"" ; goto loaderr ; } <S2SV_ModStart> = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> port"" ; goto loaderr ; } <S2SV_ModStart> = atoi ( argv [ 1 ] ) ; server. slaveof_port = atoi ( argv [ 1 ] ) ; if ( server. slaveof_port < 0 || server. slaveof_port > 65535 ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> port"" ; goto loaderr ; }",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> get_version_reply ) ; if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto error ; } if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto error ; } dev -> get_version_reply. desc. bNumEndpoints = 1 ; if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto error ; } dev -> get_version_reply. desc. bNumEndpoints = 1 ; if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ;",0
34,<S2SV_ModStart> ; if ( ( shdr -> sh_flags & SHF_ALWAYS ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_RELATIVE ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_RELATIVE ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags &,0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break",0
36,<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) { ret = GSS_S_FAILURE ; goto cleanup ; },0
37,"<S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) return - EINVAL ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart>!= AF_INET ) return <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && addr -> l2tp_addr. s_addr && inet_addr_type ( net, addr -> l2tp_addr. s_addr )!= inet_addr_type ( net, addr -> l2tp_addr. s_addr ) goto out ; ret = - EADDRINUSE ; read_unlock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; ret = - EADDRINUSE ; if ( addr -> l2tp_addr. s_addr && inet_addr_type ( net, addr -> l2tp_addr. s",0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
39,"<S2SV_ModStart> ( dialog ), gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk_button_get_text ( gtk",0
40,"<S2SV_ModStart> ; tm = g_time_to_tm <S2SV_ModEnd> ( & t <S2SV_ModStart> t ) ; if ( tm == NULL ) { g_throw ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ( G_LOG_ERROR, ""G_TIME_TO_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_TICK_T",0
41,"<S2SV_ModStart> length ) ; md5_update ( & my_md5, password, strlen ( password ) ) ; md5Final ( & my_md5, & hashed [ ( AUTH_PASS_LEN - 1 ) * AUTH_VECTOR_LEN ], & my_md5 ) ; xor ( hashed [ ( AUTH_PASS_LEN - 1 ) * AUTH_VECTOR_LEN ], misc, AUTH_VECTOR_LEN ) ; xor ( hashed [ ( AUTH_PASS_LEN - 1 ) * AUTH_VECTOR_LEN ], password, strlen ( password ) ) ; md5Final ( & my_md5, & hashed [ ( AUTH_PASS_LEN - 1 ) * AUTH_VECTOR_LEN ], & my_md5 ) ; xor ( hashed [ ( AUTH_PASS_LEN - 1 ) * AUTH_VECTOR_LEN ], misc, AUTH_VECTOR_LEN ) ; xor ( hashed [ ( AUTH_PASS_LEN - 1 ) * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ;",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_internal_state * state = d -> priv ; struct dvb_usb_device * dev = adap -> priv ; struct dvb_usb_device_info * info = & adap -> info ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> owned_by_user\\n"", __func__ ) ; if (! sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } error = sctp_do_sm ( net, SCTP_EVENT_T_HEARTBEAT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, ep, asoc, transport, GFP_ATOMIC ) ; if ( error )",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> param <S2SV_blank> \'%llu\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'",0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
46,<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
47,<S2SV_ModStart> ) ; struct address_space * mapping = page_mapping ( page ) <S2SV_ModEnd> ; set_page_private ( <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> pts_flag ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> pts_flag ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & reply, ""su"", machine, ( uint32_t ) uid ) ; if ( sd_bus_message_has_name ( reply, ""u"" ) ) goto not_",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return get_page ( buf ->,0
51,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount,",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; if ( select ( reader -> bytes_available_fd + 1, & read_fds, NULL, NULL, & timeout ) == - 1 ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_ZERO ( & read_fds ) ; FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_",0
54,"<S2SV_ModStart> wp -> config -> max_requests ; if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int detect_transition_to_still ( TWO_PASS * twopass, int frame_interval, int still_interval, double loop_decay_rate, double last_decay_rate, const FIRSTPASS_STATS * stats <S2SV_ModEnd> ) { int <S2SV_ModStart> int trans_to_still = 0 ; const FIRSTPASS_STATS * position = stats <S2SV_ModEnd> ; for ( <S2SV_ModStart> j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion <S2SV_ModEnd> < 0.999 ) <S2SV_ModStart> break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_transaction = NULL ; } else if ( handle -> h_transaction ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if ( err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; if (! err ) err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_state ) ; handle -> h_err = PTR_ERR ( handle -> h_transaction ->,0
57,"<S2SV_ModStart> ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } else { ret = ext4_convert_written_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } }",0
58,"<S2SV_ModStart> valuelen ) ; memset ( & name_loc, 0, sizeof ( * name_loc ) ) ; memset ( & name_rmt, 0, sizeof ( * name_rmt ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) )",0
59,"<S2SV_ModStart> ) request_module ( ""crypto/larval/%s"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto/larval/%s-all"" <S2SV_ModEnd>, name ) <S2SV_ModStart> ) request_module ( ""crypto/larval/%s-all"" <S2SV_ModEnd>, name )",0
60,"<S2SV_ModStart> 2 ) { switch ( stlv_type ) { case ISIS_SUBTLV_SPB_INSTANCE : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo,",0
61,"<S2SV_ModStart> ) { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ; <S2SV_ModStart> - ENODEV ; memset ( & ddi. dinfo_version, 0, sizeof ( ddi. dinfo_version ) ) ; <S2SV_ModStart> - ENODEV ; memset ( & di. info_ioport, 0, sizeof ( di. info_ioport ) ) ; memset ( & di. info_physaddr, 0, sizeof ( di. info_physaddr ) ) ; memset ( & di. info_physsize, sizeof ( di. info_physsize ) ) ; memset ( & di. info_ioport, 0, sizeof ( di. info_ioport ) ) ; <S2SV_ModStart> - ENODEV ; memset ( & di. info_ioport, 0, sizeof ( di. info_ioport ) ) ; memset ( & di. info_physaddr, 0, sizeof ( di. info_physaddr ) ) ; memset ( & di. info_physaddr, 0, sizeof ( di. info_physaddr ) ) ; memset ( & di. info_",0
63,"<S2SV_ModStart> if (! ( opt_len == 12 && ( flags & ( TH_SYN | TH_ACK ) ) == TH_SYN ) ) return 0 ; if ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS",0
64,"<S2SV_ModStart> -> ipc_socket ; int procfd = payload -> procfd <S2SV_ModEnd> ; lxc_attach_options_t * <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; }",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 3 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( strlen ( line ) > len ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank>",0
66,"<S2SV_ModStart> ; if ( header -> biSize < 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biPlanes = ( OPJ_UINT16 ) getc ( IN ) ; header -> biPlanes |= ( OPJ_UINT16 ) ( ( OPJ_UINT16 ) ( ( OPJ_UINT",0
67,<S2SV_ModStart> port_dev = NULL ; break ; case SAS_END_DEVICE : error = sas_discover_end_dev ( dev ) ; break ; case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_FANOUT_EXPANDER_DEVICE : case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_SATA_PM : error = - ENXIO ; sas_rphy_free ( dev -> rphy ) ; spin_lock_irq ( & port -> dev_list_lock ) ; list_del_init ( & port -> dev_list_node ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_put_device ( dev ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if (! capable ( CAP_NET_ADMIN ) ) return - EPERM ; if ( dev -> flags & IFF_UP ) return - EBUSY ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { int ret ; ret = scsi_verify_blk_ioctl ( bd <S2SV_ModEnd>, cmd,",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ; <S2SV_ModStart> - EFAULT ; ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } <S2SV_ModStart> - EFAULT ; ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. u",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> ; den = avio_tell ( pb ) ; den += avio_read_varlen ( pb ) ; avio_seek ( pb, off, SEEK_SET ) ; if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVER",0
76,"<S2SV_ModStart> ; if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> to <S2SV_blank> parse\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""too <S2SV_blank>",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < 0 ) { ERROR (",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset: <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } else { psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"", psf -> fileoffset ) ; psf -> fileoffset = psf -> fileoffset ; return 0 ; } else { psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"", psf -> fileoffset ) ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n"", psf -> fileoffset ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null>",0
79,"<S2SV_ModStart> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; <S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"",",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,<S2SV_ModStart> * up ; unsigned int len ; <S2SV_ModStart> rta ) ; len = nla_len ( rta ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; } <S2SV_ModStart> - ENOMEM ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - EINVAL ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; },0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) (,0
84,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,"<S2SV_ModStart> (! ( buf = jas_calloc2 ( bufsize, sizeof ( jpc_fix_t ), GFP_KERNEL ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ), GFP_KERNEL ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ), GFP_KERNEL ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, GFP_KERNEL ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ), GFP_KERNEL ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ), GFP_KERNEL ) ) { abort ( ) ; } if (! ( buf = jas_alloc2 ( bufsize, GFP_KERNEL ) ) { abort (",0
86,<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * <S2SV_ModEnd> map ; if <S2SV_ModStart> = iface -> <S2SV_ModEnd> cfg_maps ; map,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type > XEN_NETIF_GSO_TYPE_MAX ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } if ( skb_shinfo ( skb ) -> gso_type!= SKB_GSO_TCPV4 ) { netdev_err ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, <S2SV_ModEnd> void * data <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; int ext_index_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { char * name = path_name ( path, last ) ; int ext_index_pos = ext_index_add_object ( object, name ) ; if ( ext_index_pos < 0 ) { char * name = path_name ( path, last ) ; free ( name ) ; } if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; int ext_index_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else { int ext_index_pos = ext_index_add_object ( object, name ) ; if ( ext_index_pos < 0 ) { char * name = path_name ( path, last ) ; free ( name )",0
89,"<S2SV_ModStart> ( tty_q. buf, & xfr_cmd, sizeof ( xfr_cmd ), & xfr_cmd, sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof ( xfr_cmd ), sizeof (",0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,"<S2SV_ModStart> type_flags ) { <S2SV_ModEnd> struct packet_fanout * <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> po -> running ) { mutex_unlock ( & fanout_mutex ) ; return - EALREADY ; } <S2SV_ModEnd> if ( type <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if ( po <S2SV_ModStart> po -> fanout ) { mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == sock_net ( sk ) ) { list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f -> net ) == sock_net ( sk ) ) { err = - EINVAL ; goto out ; } <S2SV_ModEnd> err = - <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> -> num, 0 ) ; atomic_long_set ( & f -> rollover -> num_huge, 0 ) ; atomic_long_set ( & f -> rollover -> num_failed",0
92,"<S2SV_ModStart> newsk ) ; if ( np ) { memcpy ( newnp, np, sizeof ( struct ipv6_pinfo ) ) ; rcu_read_lock ( ) ; opt = ipv6_dup_options ( np -> opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; RCU_INIT_POINTER ( newnp -> opt, opt ) ; }",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,"<S2SV_ModStart> 0 ) { if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } <S2SV_ModStart> 0 ) { if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } <S2SV_ModStart> 0 ) { if ( imp_sth -> done_desc ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } } <S2SV_ModStart> 0 ) { if ( imp_sth -> done_desc ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."", NULL ) ; return Nullav ; } <S2SV_ModStart> 0 ) { if (! dbd_describe ( sth, imp_sth ) ) { do_error ( sth, JW_ERR_SEQUENCE, ""Error <S2SV_blank> while <S2SV_blank> describe <S2SV_blank> result <S2SV_blank> set."",",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } if (",0
99,"<S2SV_ModStart> if ( flags & EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } <S2SV_ModStart> len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } ND_TCHECK2 ( * ( p + 6 ), 4 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank>",0
101,"<S2SV_ModStart>! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFREG | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( fc_may_access ( fc, controller, cgroup, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ;",0
102,"<S2SV_ModStart> flag ) { ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; ( void ) low_var_thresh ; ( void ) flag ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_stride, source -> uv",0
103,"<S2SV_ModStart> { ret = copy_from_user <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } else { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } else { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } }",0
104,"<S2SV_ModStart>!= old -> uid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else { new -> euid = new -> uid ; } } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> fsgid ; if ( effective ) new -> cap_effective = effective ; else bprm -> cap_effective = effective ; if (! issecure ( SECURE_NOROOT ) ) { ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return ret ; ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return ret ; ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 )",0
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache * ext4_mb_cache, <S2SV_ModStart> int error ; <S2SV_ModEnd> struct mb2_cache_entry * <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> GFP_NOFS ) ; if (! ce ) { error = mb2_cache_entry_create ( ext4_mb_cache, GFP_NOFS, bh -> b_blocknr, hash ) ; if ( error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModEnd> error = mb2_cache_entry_insert <S2SV_ModStart> ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if ( r_socket_http_answer ( s, code, rlen ) < 0 ) { r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; return NULL ; } <S2SV_ModStart> ) ) ; if ( r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) < 0 ) { r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; return NULL ; } if ( r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) < 0 ) { r_socket_protocol_error ( s, ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ) ; r_socket_protocol_error",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
108,<S2SV_ModStart> ; int err ; sock -> state = SS_UNCONNECTED,0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( opt -> opt.,0
110,"<S2SV_ModStart> ; dl = kmalloc ( size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; if (! bacpy ( & ( di + n ) -> src, & dev -> src ) ) break ; } bacpy ( & ( di + n ) -> dst, & dev -> dst ) ; bacpy ( & ( di + n ) -> state, & dev -> dlc -> state ) ; bacpy ( & ( di + n ) -> channel, & dev -> dlc -> channel ) ; bacpy ( & ( di + n ) -> src, & dev -> src ) ; bacpy ( & ( di + n ) -> dst, & dev -> dst ) ; bacpy ( & ( di + n ) -> src, & dev -> src ) ; bacpy ( & ( di + n ) -> dst, & dev ->",0
111,"<S2SV_ModStart> ; trunc : if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_type, pdu_len ) ) ; break ; case RPKI_RTR_END_OF_DATA_PDU : msg = ( const u_char * ) ( pdu_header + 1 ) ; ND_PRINT ( (",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned int len ; <S2SV_ModStart> = NULL ; len = skb -> len <S2SV_ModEnd> ; if ( <S2SV_ModStart>! rose_parse_facilities ( skb -> data, & facilities, & len ) ) { rose_transmit_clear_request ( neigh, lci, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> new_value_alloced ) { gvarp = ( char_u * * ) get_varp_scope ( & ( options [ opt_idx ] ), OPT_GLOBAL ) ; if ( gvarp == ( char_u * * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" )!= NULL ) { gvarp = ( char_u * * ) vim_strpbrk ( ( char_u * ) ""/\\\\*?[|<>"" ) ; } else { gvarp = ( char_u * * ) get_varp_scope ( & ( options [ opt_idx ] ), OPT_GLOBAL ) ; if ( gvarp == ( char_u * * ) vim_strpbrk ( * varp, ( char_u * ) ""/\\\\*?[|<>"" )!= NULL ) { gvarp = ( char_u * * ) vim_strpbrk ( ( char_u * ) ""/\\\\*?[|<>"" ) ; } else { gvarp = ( char_u * * ) get_varp_scope ( & ( options [",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ( item ) <S2SV_ModEnd> ; int ret <S2SV_ModStart> ( node ) <S2SV_ModEnd> ; write_lock ( <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if ( strlen ( p ) > length ) { ND_PRINT ( ( ndo, ""[|null]"" ) ) ; return ( NULL_HDRLEN ) ; } <S2SV_ModStart> case BSD_AFNUM_APPLETALK : atalk_print ( ndo, p, length ) ; if (! ndo -> ndo_suppress_default_print ) ND_DEFAULTPRINT ( p, caplen ) ; break ; case BSD_AFNUM_IPX : ipx_print ( ndo, p, length ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length ) ; if (! ndo -> ndo_suppress_default_print ) ND_DEFAULTPRINT ( p, caplen ) ; break ; case BSD_AFNUM_IPX : ipx_print ( ndo, p, length ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length ) ;",0
119,"<S2SV_ModStart> separator = * src ++ ; for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } else if ( src [ 0 ] == '/' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } else if ( src [ 0 ] == '/' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } else if ( src [ 0 ] == '.' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context, TPM_ALG_HASH hashAlg <S2SV_ModEnd>, char * <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2",0
121,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, vstep, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0",0
122,<S2SV_ModStart> s ) { assert ( s > 0 ) ;,0
123,<S2SV_ModStart> ; if ( unlikely ( safe_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
124,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
125,<S2SV_ModStart> peer ) get_net ( peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;,0
126,"<S2SV_ModStart> 0 ) { if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> 0 ) { if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_len ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf",0
127,"<S2SV_ModStart> ; if (! POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len )",0
128,"<S2SV_ModStart> == datalen && ( pc + asn1_op_lengths [ op ] <= 65535 ) || ( pc + asn1_op_lengths [ op ] <= 65535 ) || ( dp + asn1_op_lengths [ op ] <= 65535 ) || ( dp + asn1_op_lengths [ op ] <= 65535 ) || ( dp + asn1_op_lengths [ op ] <= 65535 ) || ( dp + asn1_op_lengths [ op ] <= 65535 ) ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, csp, jsp ) ; if ( pc + asn1_op_lengths [ op ] <= 65535 ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"",",0
129,<S2SV_ModStart> = 0 ; INIT_LIST_HEAD ( & sp -> sctp_assoc_wq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_wq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq ) ; INIT_LIST_HEAD ( & sp -> sctp_assoc_txq,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> gb, GetBitContext * gb ) { s -> avctx -> profile = get_bits ( gb, 4 ) ; s -> avctx -> level = get_bits ( gb, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; } return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; unsigned short wTail ; <S2SV_ModStart> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; wTmp = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( pwMIDQData",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,<S2SV_ModStart> ) ; file -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> message= <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> message= <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\'",0
136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> decode_getacl ( struct <S2SV_ModStart> acl_len ) { struct kvec * iov = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( status = - EIO ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; } else { size_t hdrlen ; u32 recvd ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> get",0
137,"<S2SV_ModStart> ; if ( unlikely ( skb_is_gso ( skb, features | NETIF_F_GSO_ROBUST ) ) { skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ) { skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } if ( unlikely ( skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ) { skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ) { skb_gso_ok ( skb, features | NETIF_F_GSO_ROBUST ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; }",0
138,<S2SV_ModStart> while ( ( tmpName [ i ]!= 0 ) && ( i < to_read ) ) { i ++ ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read - 1 ) { ptr -> nameURN = NULL ; ptr -> location = NULL ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> location = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < height ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ;",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = userToID ( owner ) ; } }",0
143,"<S2SV_ModStart> ; if ( q == NULL ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> section <S2SV_blank> header <S2SV_blank> is <S2SV_blank> null\\n"" ) ) ; goto out ; } q = CAST ( const uint8_t * ) q ; q = CAST ( const uint8_t * ) q ; q = CAST ( const uint8_t * ) q ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset )",0
144,"<S2SV_ModStart> ; if ( inet -> inet_opt ) { struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> eigrp_tlv_len ) ; if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
147,"<S2SV_ModStart> = NULL ; # if CONFIG_MEM_MANAGER if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModEnd> if ( addr",0
148,<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
149,"<S2SV_ModStart> } ptr = strrchr <S2SV_ModEnd> ( ptr + <S2SV_ModStart> 1, '/' ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
152,"<S2SV_ModStart> opt, & final ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; return PTR_ERR ( dst ) ; } dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR ( dst ) ; dst = ip6_dst_lookup_flow ( sk, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_err_soft = - PTR_ERR",0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0, planar = 0 ; uint16 bps = 0, spp = 0 ; uint16 orientation = 0 ; uint16 input_photometric = 0 ; uint16 subsampling_horiz = 0, subsampling_vert = 0 ; uint16 orientation = 0 ; uint16 input_compression = 0 ; uint16 input_photometric = 0 ; uint16 input_photometric = 0 ; TIFFGetFieldDefaulted ( in, TIFFTAG_PLANARCONFIG, & planar ) ; if (! TIFFGetField ( in, TIFFTAG_COMPRESSION, & input_compression ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> compression <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & scanlinesize ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanning <S2SV_blank> line <S2SV_blank>",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP9_ENCODER else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif # if CONFIG_VP8_ENCODER else if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_port ) <S2SV_ModEnd> ; debug ( <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_host ) <S2SV_ModEnd> ; debug ( <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_port ) <S2SV_ModEnd> ; debug ( <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_host ) <S2SV_ModEnd> ; debug ( <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, fwd. listen_port, ( u_short ) fwd. listen_port ) <S2SV_ModEnd> ; debug (",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( gr -> gr_ctx. value, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> = 0 ; unsigned long data_size ; <S2SV_ModStart> out ; } data_size = le32_to_cpu ( EXT4_I ( inode ) -> i_data ) ; if ( data_size > EXT4_I ( inode ) -> i_data_size ) data_size = EXT4_I ( inode ) -> i_data_size ; if ( data_size > EXT4_I ( inode ) -> i_data_size ) data_size = EXT4_I ( inode ) -> i_data ; memcpy ( neh, bh -> b_data, data_size ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 )",0
160,"<S2SV_ModStart> } if (! c -> opt -> option. verify_chain &&! c -> opt -> option. verify_peer ) { s_log ( LOG_INFO, ""Certificate <S2SV_blank> verification <S2SV_blank> disabled"" ) ; return 0 ; } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart>, preverify_ok, <S2SV_ModEnd> callback_ctx ) ) <S2SV_ModStart> 1 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( SSL_get1_session ( c -> ssl )!= NULL ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; return 0 ; }",0
161,"<S2SV_ModStart> ; int ret ; kuid_t old_euid = new -> euid ; kgid_t old_group = new -> egid ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM ; ret = security_create_user_ns ( owner, group, & old_euid, & old_group, new -> security ) ; if ( ret ) { kmem_cache_free ( user_ns_cachep, ns ) ; return ret ; } ret = security_create_user_ns ( owner, group, new -> security ) ; if ( ret ) { kmem_cache_free ( user_ns_cachep, ns ) ; return ret ; } ret = security_create_user_ns ( owner, group, & old_euid, & old_group, new -> security ) ; if ( ret ) { kmem_cache_free ( user_ns_cachep, ns ) ; return ret ; } ret = security_create_user_ns ( owner, group, new -> security ) ; if ( ret ) { kmem_cache_",0
162,"<S2SV_ModStart> ; if (! memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cmac ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ;",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS * s -> reduction_factor ) { avpriv_request_sample ( s -> avctx, ""nreslevels <S2SV_blank> too <S2SV_blank> small\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; if (! s_alOutputDevice ) {",0
165,"<S2SV_ModStart> ts_status ; bool <S2SV_ModEnd> is_drop_n_account = false <S2SV_ModStart> ; is_drop_n_account = ( skb -> pkt_type == PACKET_LOOPBACK ) ; if ( skb -> pkt_type == PACKET_OUTGOING ) { skb_push ( skb, skb -> data - skb_mac_header ( skb ) ) ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { skb_pull ( skb, skb_network_offset ( skb ) ) ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { skb_pull ( skb, skb_network_offset ( skb ) ) ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { if (",0
166,"<S2SV_ModStart> ) ; } list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; sctp_ssnmap_clear ( & trans -> ssnmap ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; } <S2SV_ModStart> peer. transport_addr_list, transports ) { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; sctp_ssnmap_clear ( & trans -> ssnmap ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; } else { list_for_each_entry ( trans, & trans -> transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) )",0
167,<S2SV_ModStart> return false ; # ifdef CONFIG_HIGHBITDEPTH if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_FLAG_HIGHBITDEPTH ) { if ( msg -> flags & NDP_MSG_HIGH,0
168,"<S2SV_ModStart> int on_exec, int labelfd <S2SV_ModEnd> ) { int <S2SV_ModStart> ( name, <S2SV_ModEnd> ""nop"" ) == <S2SV_ModStart> ( name, <S2SV_ModEnd> ""none"" ) == <S2SV_ModStart> ( name, <S2SV_ModEnd> ""AppArmor"" ) == <S2SV_ModStart> ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { if ( write ( labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } } else { if ( write ( labelfd, lsm_label, strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret",0
169,<S2SV_ModStart> ) ) { if ( ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_FLAGS_HIGHBITDEPTH ) && ( comp -> flags & COMMON_,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> flag |= LQL_NOT ; hasnot = true ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem )",0
173,"<S2SV_ModStart> * header, <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> * pce ) { struct mb2_cache_entry * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode -> i_sb ) ; if (! ext4_mb_cache ) return NULL <S2SV_ModEnd> ; __u32 hash <S2SV_ModStart> hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_ide",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> = offset ; <S2SV_ModEnd> return parse_cosine_hex_dump ( <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> err_info ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,<S2SV_ModStart> left > 0 && <S2SV_ModEnd> n > left,0
177,<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_,0
178,"<S2SV_ModStart> - ENOMEM ; ret = - EINVAL ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; }",0
179,"<S2SV_ModStart> int hstartcol ; int m ; jpc_fix_t * buf2 ; jpc_fix_t * srcptr ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf ) { abort ( ) ; } if ( numrows >= 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol *",0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception )",0
182,<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sb -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; sbi -> s_mount_state = cpu_to_le16 ( sbi -> s_mount_state ) ; sbi -> s_gdb_count = 0 ; } else if ( sb -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; sbi -> s_mount_state = cpu_to_le16 ( sbi -> s_mount_state ) ; sbi -> s_gdb_count = 0 ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ],0
183,"<S2SV_ModStart> err_free_buf ; } hid_desc. bNumEndpoints = usbinterface -> num_altsetting ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_alt",0
184,"<S2SV_ModStart> ; if ( strlen ( devname ) > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", devname ) ; exit ( 1 ) ; } if ( strlen ( devname ) > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", devname ) ; exit ( 1 ) ; } if ( strlen ( devname ) > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", devname ) ; exit ( 1 ) ; } if ( strlen ( devname ) > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", devname ) ; exit ( 1 ) ; } if ( strlen ( devname ) > sizeof ( buf ) - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", devname ) ; exit ( 1",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( <S2SV_ModEnd> node -> nd_item <S2SV_ModStart> nd_item. ci_parent ) ; } return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", ast -> codecpar -> sample_rate ) ; avpriv_set_pts_info ( vst, 64, 1, 15 ) ; ast -> codecpar -> format = AV_PIX_FMT_ARGB ; ast -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_AR",0
188,"<S2SV_ModStart> ; if ( q == NULL ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> section <S2SV_blank> header <S2SV_blank> is <S2SV_blank> null\\n"" ) ) ; goto out ; } q = CAST ( const uint8_t * ) q ; q = CAST ( const uint8_t * ) q ; q = CAST ( const uint8_t * ) q ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset )",0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, <S2SV_ModEnd> ""cryptostats"", & <S2SV_ModStart> ( statsdir, <S2SV_ModEnd> ""timingstats"", & <S2SV_ModStart> ( statsdir, <S2SV_ModEnd> ""rawstats"", & <S2SV_ModStart> ( statsdir, <S2SV_ModEnd> ""sysstats"", & <S2SV_ModStart> ( statsdir, <S2SV_ModEnd> ""protostats"", & <S2SV_ModStart> ( statsdir, <S2SV_ModEnd> ""cryptostats"", & <S2SV_ModStart> ( statsdir, <S2SV_ModEnd> ""timingstats"", &",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> char * dir <S2SV_ModStart> = ""/tmp"" ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) ; return NULL ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) ; return NULL ; } <S2SV_ModEnd> copyfile ( lockfd",0
191,"<S2SV_ModStart> prev ) ; attach_shadowed <S2SV_ModEnd> ( mnt,",0
192,"<S2SV_ModStart> next ) ; load_sp1 <S2SV_ModEnd> ( tss, <S2SV_ModStart> ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; savesegment ( ds, prev -> ds ) ; if ( unlikely ( next -> ds | next -> ds ) ) loadsegment ( ds, next -> ds ) ; savesegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; load_TLS ( next_p ) ; if ( unlikely ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> fs ) wrmsrl ( MSR_KERNEL_FS_BASE, next -> fs ) ; prev -> fs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs = 0 ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev ->",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,"<S2SV_ModStart> i1_sps_valid ) { ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP",0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u << <S2SV_ModStart> DB_VECTOR ) ; if ( enable_ept ) eb |= ( 1u << PF_VECTOR ) ; if ( vcpu -> rmode. vm86_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( is_guest_mode ( vcpu ) ) eb |= ( 1u << MC_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( is_guest_mode ( vcpu ) ) eb |= ( 1u << DB_VECTOR ) ; if ( is_guest_mode ( vcpu ) ) eb |= ( 1u <<,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) )",0
197,"<S2SV_ModStart>, int transhdrlen, unsigned int flags <S2SV_ModStart> = SKB_GSO_UDP ; struct frag_hdr fhdr ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_type = fhdr. frag_type ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
198,"<S2SV_ModStart> res ) goto fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ;",0
199,"<S2SV_ModStart> size_t ) 0U ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> uint8_t * const buffers <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> v_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> stable ) ) return 0 ; <S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> len ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( dlen ) * 4 ) return 0 ; v = 0 ; while ( v < rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; }",0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ctxt, ulong eip <S2SV_ModEnd> ) { switch <S2SV_ModStart> case 4 : ctxt -> _eip = eip ; break ; case 8 : ctxt -> _eip = eip ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } <S2SV_ModStart> { switch ( ctxt -> op_bytes ) { case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 2 : ctxt -> _eip = ( u32 ) dst ; break ; case 4 : ctxt -> _eip = ( u16 ) dst ; break ; case 8 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> remaining = tvb_captured_length_remaining ( tvb, offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; else g_free ( text ) ;",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) { ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_get_block, NULL, 0 ) ; } else { get_block = ocfs2_dio_get_block ; ret = __blockdev_direct_IO ( iocb, inode -> i_sb -> s_bdev, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_get_block, NULL, 0 ) ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[0-9A-Fa-f <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
208,"<S2SV_ModStart> + 1 ) ; if ( ( int ) val < 0 ) { write_mmcr0 ( cpuhw, cpuhw -> mmcr [ 0 ] ) ; nmi_exit ( ) ; return ; } <S2SV_ModEnd> write_mmcr0 ( cpuhw",0
209,"<S2SV_ModStart> = len ; if ( len == 0 ) len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ;",0
210,<S2SV_ModStart> n ) { PyString <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { int i ; for ( i = 0 ; i < object -> depth ; i ++ ) { if ( cJSON_strcasecmp ( c -> string, string ) ) { c = c -> next ; break ; } } c = object -> child ; while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> len ) ; if (! ( <S2SV_ModStart> plen <= * len ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; } * len = nh. nh_len ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; } * len = plen ; if ( ( * len ) && ( net_read_exact ( s, arg, * len ) == - 1 ) ) { return - 1 ; }",0
215,"<S2SV_ModStart> ( retval ) { xfs_trans_log_buf ( context -> trans, bp, XFS_ERROR ( EFSCORRUPTED, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS",0
216,"<S2SV_ModStart> - EINVAL ; if ( vlen < 0 ) return - EINVAL ; if ( <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; netif_stop_queue ( ndev ) ; <S2SV_ModStart> ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL",0
221,<S2SV_ModStart> 4 ) ; RAnalOp <S2SV_ModEnd> next_op ; avr_op_analyze,0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { int found = 0 ; char * user_config = NULL ; char * repo_config = NULL ; if ( perf_config_system ( ) &&! access ( perf_etc_perfconfig ( ), R_OK ) ) { ret += perf_config_from_file ( fn, perf_etc_perfconfig ( ), data ) ; found += 1 ; } home = getenv ( ""HOME"" ) ; if ( home ) { char * user_config = mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; } repo_config = perf_pathdup ( ""config"" ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ; if ( found == 0 ) return - 1 ; return ret ; }",0
224,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> validate_event ( struct <S2SV_ModStart> event ) { <S2SV_ModEnd> struct hw_perf_event fake_event <S2SV_ModStart> return 1 ; <S2SV_ModEnd> return armpmu -> <S2SV_ModStart> ( hw_events, <S2SV_ModEnd> & fake_event ) <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { if ( new_map -> nr_extents == 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( uid_eq ( current_fsuid ( ), user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns, user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_",0
226,"<S2SV_ModStart> ++ ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED",0
227,"<S2SV_ModStart> * hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> pos = 0 <S2SV_ModEnd> ; hx = <S2SV_ModStart> ; if ( <S2SV_ModEnd> usb_cypress_writemem ( udev <S2SV_ModStart>, GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EINVAL ; } } else { ret = - EIO ; kfree ( hx ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
229,"<S2SV_ModStart> princ ) ; if ( strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""k",0
230,"<S2SV_ModStart> * bo ; <S2SV_ModEnd> bo = NULL <S2SV_ModStart> bo = NULL ; if ( args -> shader_rec_count > UINT_MAX / sizeof ( struct vc4_shader_state ) ) { ret = - EINVAL ; goto fail ; } if ( copy_from_user ( exec -> bin_cl, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, ( void __user * ) ( uintptr_t ) args -> uniforms_size, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H && HAVE_LIBLZMA <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
232,<S2SV_ModStart> -> i_sb ) ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> inode ) ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> handle ) ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> handle ) ; out_ret : mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> out_ret ; } mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; mutex_unlock ( & EXT4_I ( ) -> i_mmap_sem ) ; mutex_unlock ( & EXT4_I ( ) -> i_mmap_sem ) ; mutex_unlock ( & EXT4_I ( ) -> i_mmap_sem ) ; mutex_unlock ( & EXT4_I ( ) -> i_mmap_,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg ) { r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\r' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModEnd> break ; default <S2SV_ModStart> * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; break ; case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; break ; case '\\r' : r_return_val_if_fail ( * arg, NULL ) ; break ; default : * b ++ <S2SV_ModEnd> = * arg <S2SV_ModStart> case '\\t' : r_return_val_if_fail ( * arg, NULL ) ; break ; default : * b ++ <S2SV_ModEnd> = * arg",0
235,"<S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> ( ndo, ""%s:"" <S2SV_ModEnd>, NPSTR (",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; ice_conn = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } <S2SV_ModEnd> client = gsm_xsmp_client_new <S2SV_ModStart> ice_conn ) ; <S2SV_ModEnd> server -> priv",0
237,<S2SV_ModStart> ; if ( unlikely ( skb_cloned ( skb ) ) ) goto out ;,0
238,"<S2SV_ModStart> void ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""refs/heads/git_tilde1"", "".git/foobar"" ) ; TEMP_FAILURE_RETRY ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ;",0
239,"<S2SV_ModStart> break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; if ( v. val == 0 ) v. val = sock_flag ( sk",0
240,<S2SV_ModStart> { if ( msg -> msg_name ) { msg -> msg_name = NULL ; msg -> msg_namelen = 0 ; return 0 ; } <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const int strides [ i ] = { src -> y_stride, src -> uv_stride, src -> v_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, sf -> sf",0
243,"<S2SV_ModStart> ; char buf [ DN_BUF_LEN <S2SV_ModEnd> ] ; unsigned <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx,",0
244,"<S2SV_ModStart> out_free ; } kvm_get_memslots ( kvm ) ; old_memslots = & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ] ; if ( old_memslots == & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ] ) kvm_put_memslots ( & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ) ; if ( old_memslots == & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ] ) kvm_put_memslots ( & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ], old_memslots ) ; kvm_put_memslots ( & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ] ) ; kvm_put_memslots ( & kvm -> memslots -> memslots [ KVM_MEMORY_SLOTS_NUM - 1 ] ) ; kvm_put_memslots ( &",0
245,"<S2SV_ModStart> 0 ; } if (! err ) { if ( ru ) copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ; return - EFAULT ; }",0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0,0
247,"<S2SV_ModStart> ni ; register <S2SV_ModEnd> u_int amt ; <S2SV_ModStart> case RIP6_REQUEST : <S2SV_ModEnd> if ( j <S2SV_ModStart> 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; break ; } if ( i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } else { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; rip6_entry_print ( ndo, ni, 0 )",0
248,<S2SV_ModStart> ( ret < 0 &&! capable ( CAP_SYS_ADMIN ) ) { ret = - EPERM ; goto error ; } ret = install_security_keyring_to_cred ( new ) ; if ( ret < 0 &&! capable ( CAP_SYS_ADMIN ) ) { ret = - EPERM ; goto error ; } ret = install_security_keyring_to_cred ( new ) ; if ( ret < 0 &&! capable ( CAP_SYS_ADMIN ) ) { if (! capable ( CAP_SYS_ADMIN ) ) { ret = - EPERM ; goto error ; } ret = set_security_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EPERM ; goto error ; } ret = set_security_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EPERM ; goto error ; } ret = set_security_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EPERM ; goto error ; } ret = set_security_keyring_to_cred ( new ) ; if ( ret < 0 ) {,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; <S2SV_ModStart> ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; bprm -> file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; bprm -> file = open_exec ( iname ) ; if ( retval < 0 ) goto _error ; <S2SV_ModStart> ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ;",0
251,<S2SV_ModStart> = 0.0 ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iLeft + 1 > windows_size ) { iLeft ++ ; } else { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) {,0
252,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
253,"<S2SV_ModStart>!= 2 ) { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; }",0
254,<S2SV_ModStart> * data ; if ( cursor -> ns == NULL ) { cursor -> err = MONGO_CURSOR_INVALID ; return MONGO_ERROR ; } <S2SV_ModStart> + 1 ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( mobj ) memset <S2SV_ModEnd> ( mobj_get_va ( <S2SV_ModStart>, 0 ), 0, size ) ; return mobj ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
256,<S2SV_ModStart> += incr ; timer -> it_overrun += 1 << i ; delta -= incr ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> comp_for ) ; if (! TYPE ( CHILD ( n, 0 ) ) ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! expression ) return",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (",0
259,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> write_mb_modes_kf ( const <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; int idx, idy ; for ( idx = 0 ; idx <",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; if ( r -> req. flags & REQ_WRITE ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> req. tag ) ; r -> req. flags &= ~ REQ_WRITE ; } else { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; } else { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len",0
262,"<S2SV_ModStart> err ; } if ( cs < 0 || cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } if ( <S2SV_ModEnd> cs > CQSPI_MAX_CHIPSELECT <S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } f_pdata = & cqspi -> f_pdata [ cs ] ; f_pdata -> cqspi = cqspi ; f_pdata -> cs = cs ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret ) goto err ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret ) goto err ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret ) goto err ;",0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETURL : decompileGETURL ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_STACKSWAP : decompileSTACKSWAP ( & actions [ n ] ) ; return 0 ; case SWFACTION_SETPROPERTY : decompileSETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n,",0
264,<S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) bo -> <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) bo -> <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) bo -> <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) bo -> <S2SV_ModStart> -> handling == VCL_RET_ABANDONING <S2SV_ModEnd> ) bo -> <S2SV_ModStart> -> handling == VCL_RET_ABANDONING ) bo -> director_state = DIR_S_NULL ; if ( bo -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
265,"<S2SV_ModStart> out ; } if ( free < 0 ) { err = - ENOMEM ; goto out ; } table -> refs [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; goto out ; } table -> refs [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = 0 ; goto out ; }",0
266,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) ie ; } ND_PRINT ( ( ndo, "">"" ) )",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( atusb, usb_dev, ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret <S2SV_ModEnd> ; ret = <S2SV_ModStart>, 1, 1000 ) ; if ( ret < 0 ) return ret <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ; } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ) <S2SV_ModEnd> * ( 2 <S2SV_ModStart> -> nModuleArg ) ; sqlite3_int64 * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { sqlite3_int64 nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; nBytes = sizeof ( char * ) * ( sqlite3_int64 ) * ( sqlite3_int64 ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0",0
270,<S2SV_ModStart> } } } mowgli_string_free ( s ) ;,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation states <S2SV_blank> available"" ) ; goto Error ; } <S2SV_ModStart> } } } if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE, ""No <S2SV_blank> adaptation states <S2SV_blank> available"" ) ; goto Error ; }",0
272,"<S2SV_ModStart> { for ( i = 0 ; i + 4 < sec -> size ; i += 4 <S2SV_ModStart> { for ( i = 0 ; i + 8 < sec -> size ; i += 8 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { for ( i = 0 ; i < sec -> size ; i += 8 ) { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } } else { for ( i = 0 ; i < sec -> size ; i += 8 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } <S2SV_ModEnd> free ( buf",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo,",0
274,"<S2SV_ModStart> ], u_in [ j <S2SV_ModEnd> ], u_out <S2SV_ModStart> ], u_out [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_in [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_in [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_out [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_in [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_out [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_out [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_in [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_in [ j <S2SV_ModEnd> ], analy_cos_sin_tab <S2SV_ModStart> ], u_out [ j <S2SV_ModEnd> ], analy_cos_sin_tab",0
275,<S2SV_ModStart> < q ) { if ( ONIGENC_IS_UNDEFINED ( reg -> enc ) || ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED ( reg -> enc ) ||! ONIGENC_IS_UNDEFINED,0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { struct bfq_data * bfqd = bfqq -> bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> reason ; unsigned long flags ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ;",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( vif <S2SV_ModEnd>, work_to_do ) <S2SV_ModStart> ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq, ERR_PTR ( XEN_NETIF_INVALID_IDX ) ) ; continue ; } <S2SV_ModStart> ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq, ERR_PTR ( XEN_NETIF_INVALID_IDX ) ) ; continue ; } <S2SV_ModStart> ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq, ERR_PTR ( XEN_NETIF_INVALID_IDX ) ) { netbk_tx_err ( vif, & txreq, ERR_PTR ( XEN_NETIF_INVALID_IDX ) ) ; continue ; }",0
279,"<S2SV_ModStart> cb -> args [ 0 ] ; struct net * net = cb -> skb -> sk ; struct xfrm_sec_ctx * ctx = rcu_dereference_protected ( net -> xfrm. sec_ctx, lockdep_is_held ( & net -> xfrm. sec_ctx ) ) ; spin_lock_irqsave ( & ctx -> lock, lockdep_is_held ( & net -> xfrm. sec_ctx ) ) ; spin_unlock_irqrestore ( & net -> xfrm. sec_ctx, lockdep_is_held ( & net -> xfrm. sec_ctx, lockdep_is_held ( & net -> xfrm. sec_ctx ) ) ) ; spin_unlock_irqrestore ( & net -> xfrm. sec_ctx, lockdep_is_held ( & net -> xfrm. sec_ctx ) ) ; spin_unlock_irqrestore ( & net -> xfrm. sec_ctx, lockdep_is_held ( & net -> xfrm. sec_ctx, lockdep_is_held ( & net ->",0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; } else if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> data ) ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp ; struct skb_shared_info * shinfo = skb_shinfo ( skb ) ; int nr_frags = shinfo -> nr_frags ; int err = gop -> status ; if ( unlikely ( err ) ) { pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( chroma_image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
284,<S2SV_ModStart> ; incoming_cn_msg = nlmsg_new ( GFP_KERNEL ) ; if ( incoming_cn_msg!= NULL ) { free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> 0 ) { free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; free ( incoming_cn_msg ) ; exit ( EXIT_FAILURE ) ; },0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> client -> ipc <S2SV_ModStart> NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> diff && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> confirmations && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> session ) { crm_debug",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; for ( j = 0 ; j < numTuples ; j ++ ) { if (! PyTuple_Check ( tuple ) ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_TypeError, ""expecting <S2SV_blank> tuple <S2SV_blank> of <S2SV_blank> size <S2SV_blank> 2"" ) ; return NULL ; } if ( PyTuple_GET_SIZE ( tuple )!= 3 ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_TypeError, ""expecting <S2SV_blank> tuple <S2SV_blank> of <S2SV_blank> size <S2SV_blank> 3"" ) ; return NULL ; } if ( PyTuple_GET_SIZE ( tuple )!= 4 ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_TypeError, ""expecting <S2SV_blank> tuple <S2SV_blank> of <S2SV_blank> size <S2SV_blank> 4"" ) ; return NULL ; } if ( PyLong_AsLong ( PyTuple_GET_ITEM ( tuple",0
288,<S2SV_ModStart> ; if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ;,0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL <S2SV_ModEnd> ) { struct <S2SV_ModStart> = IP_VS_STATE_MASTER ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; <S2SV_ModStart> = IP_VS_STATE_BACKUP ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ; <S2SV_ModStart> = IP_VS_STATE_MASTER ; memcpy ( & d [ 0 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 0 ]. mcast_ifn ) ) ; memcpy ( & d [ 1 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; memcpy ( & d [ 2 ], sizeof ( d [ 2 ] ) ) ; memcpy ( & d [ 3 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 3 ]. mcast_ifn ) ) ; memcpy ( & d [ 3 ]. mcast_ifn, ipvs -> backup_m",0
290,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt, & rcu_dereference ( <S2SV_ModStart> np -> tclass, & rcu_dereference ( <S2SV_ModStart> np -> tclass, & rcu_dereference ( <S2SV_ModStart> np -> tclass, & rcu_dereference ( <S2SV_ModStart> np -> tclass, & rcu_dereference ( <S2SV_ModStart> np -> tclass, & rcu_dereference ( rcu )",0
291,<S2SV_ModStart> ssize_t result ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
292,"<S2SV_ModStart>, * cgdir = NULL, * controller = NULL, * caller_is_in_ancestor = NULL <S2SV_ModStart> O_RDWR ) ) { caller_is_in_ancestor = caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ; ret = - EACCES ; goto out ; } if ( caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; disk = NULL ; continue ; } <S2SV_ModEnd> INIT_LIST_HEAD ( &,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> = MagickFalse ; status = SetImageExtent ( image, image_info -> columns, image_info -> subrows ) ; if ( status!= MagickTrue ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickTrue ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickTrue ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickFalse ) ThrowReaderException ( CorruptImageError, CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickTrue ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickTrue ) ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; if ( status!= MagickTrue ) ThrowReaderException ( CorruptImageError, ""ImproperImage",0
296,"<S2SV_ModStart> ; int64_t index_pts = FFMAX ( av_rescale ( itime, i, 10000 ), 0 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; } <S2SV_ModStart> pktnum ; } if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; goto end ; }",0
297,"<S2SV_ModStart> ; if ( copy_to_user ( & srp -> srp, p, SZ_SG_IO_HDR, sizeof ( srp -> srp ) ) ) { if ( copy_to_user ( & srp -> srp, p, SZ_SG_IO_HDR, sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp )!= sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) ) { if ( copy_to_user ( & srp -> srp, p, SZ_SG_IO_HDR, sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) - sizeof ( srp -> srp ) )!= sizeof ( srp -> srp ) ) return - EFAULT ;",0
298,"<S2SV_ModStart> # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context_file"", & security_context_file_handler, global_active ) ; # endif <S2SV_ModStart> # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context_file"", & security_context_file_handler, global_active ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""dynamic_interfaces"", & dynamic_interfaces_handler ) ; install_keyword ( ""no_email_faults"", & no_email_faults_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""default_interface"", &",0
299,<S2SV_ModStart> data ) { vpx_codec_ctx_t * pctx = ( vpx_codec_ctx_t * ) ctx ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_ctx_t * pctx = ( vpx_codec_ctx_t * ) pctx ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_ctx_t * pctx = ( vpx_codec_ctx_t * ) pctx ; vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr ; vpx_codec_,0
300,"<S2SV_ModStart> 0 ) { char * tmpptr ; tmpptr = ( char * ) key ; if (! tmpptr ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_value ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart> ( errno == EPERM ) { touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; } else if ( errno == ENOENT ) { touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; } else if ( errno == ENOENT ) { touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; t -> last_trigger. realtime",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, box",0
303,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModStart> new_size ) { PyObject * * memo_new ; Py_ssize_t i ; assert ( new_size > self -> memo_size ) ; memo_new = self -> memo ; for ( i = 0 ; i < new_size ; i ++ ) { PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = 0 ; i < new_size ; i ++ ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = 0 ; i < new_size ; i ++ ) { PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } self -> memo = memo_new ; for ( i = 0 ; i < new_size ; i",0
304,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; err = - EINVAL ; if ( vnet_hdr. hdr_len > len ) goto err ; <S2SV_ModStart> m -> msg_control && sock_flag ( & q -> sk, SOCK_ZEROCOPY ) ) copylen = GOODCOPY_LEN ; } else if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len ) goto err ; len -= vnet_hdr. hdr_len ; err = - EINVAL ; if ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) vnet_hdr. hdr_len = vnet_hdr. csum_offset + 2 ; err = - EIN",0
305,<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; while ( offset < ipv6_optlen ( exthdr ) <S2SV_ModEnd> ) { switch <S2SV_ModStart> ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> ; offset += ipv6_optlen ( exthdr ) <S2SV_ModEnd> ; * nexthdr <S2SV_ModStart> nexthdr ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; } return offset ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = above -> mbmi. ref_frame ; } vcnt ++ ; if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( aboveleft -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ vcnt ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ],",0
308,"<S2SV_ModStart> ( msg -> msg_name ) { msg -> msg_namelen = 0 ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; } else { msg -> msg_name = kstrdup ( msg -> msg_name, GFP_KERNEL ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr_ext ) ; msg -> msg_name = kstrdup ( msg -> msg_name, GFP_KERNEL ) ; msg -> msg_namelen = sizeof (",0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,<S2SV_ModStart> asconf ) { <S2SV_ModEnd> sctp_addiphdr_t * hdr <S2SV_ModStart> sctp_addiphdr_t * hdr ; union sctp_addr_param * addr_param ; sctp_addip_param_t * asconf_param ; sctp_addip_chunk_t * asconf_hdr ; sctp_addip_chunk_t * asconf_hdr <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> goto done ; asconf_hdr = ( sctp_addip_chunk_t * ) asconf -> skb -> data ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %x,%zu\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined,0
316,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
317,"<S2SV_ModStart> } keylen = utf8s_to_utf16s <S2SV_ModEnd> ( key_name, <S2SV_ModStart> ( key_name ), & kvp_data -> data. key, sizeof ( kvp_data -> data. key ) <S2SV_ModStart> ( value, & valuelen, sizeof ( kvp_data -> data. value ) <S2SV_ModEnd> ) ; kvp_data <S2SV_ModStart> 1 ) ; kvp_data -> data. value_type = REG_SZ ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) <S2SV_ModEnd> ; icmsghdrp ->",0
318,"<S2SV_ModStart> ; ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx ) ctx = kmem_cache_alloc ( vhost_log_cache, GFP_KERNEL ) ; if (! ctx )",0
319,"<S2SV_ModStart> return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH )!= 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\",0
320,"<S2SV_ModStart> * parg = NULL <S2SV_ModEnd> ; long err <S2SV_ModStart> EINVAL ; int is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; if ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) return - EINVAL ; if ( _IOC_DIR ( cmd ) == _IOC_NONE ) { err = - EINVAL ; goto out ; } if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls =",0
321,"<S2SV_ModStart>!= psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( listLength ( c -> pubsub_channels ) > 0 && listLength ( c -> pubsub_patterns ) > 0 && cmd -> proc!= punsubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data, u16 size, void * buf <S2SV_ModEnd> ) { return <S2SV_ModStart>, 0, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 500 ) ; } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ;",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } else { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; --",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct cifsSesInfo * <S2SV_ModEnd> cifs_find_smb_ses ( struct <S2SV_ModStart> server -> smb_ses_list ) { struct cifsSesInfo * ses ; <S2SV_ModStart> smb_ses_list ) ; ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; list_for_each ( tmp, & server -> smb_ses_list ) { ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) { list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; list_for_each ( tmp, & server -> smb_ses_list ) { ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) { write_unlock ( & cifs_tcp_ses_lock ) ; return",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> cfg, 0, sizeof ( ctx -> cfg ) ) ; <S2SV_ModStart> && ( cfg -> <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_pass!= VPX_RC_ONE_PASS <S2SV_ModStart> ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg,",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( ptr,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! ( ptr = r_fs_name ( core -> fs, core -> offset ) ) ) eprintf ( ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_get_quota ( inode, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from,",0
329,<S2SV_ModStart> { struct key * <S2SV_ModEnd> keyring ; keyring,0
330,"<S2SV_ModStart> = 0 ; # ifdef __APPLE_CC__ static size_t scanned ; static size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; } pfd. revents = 0 ; while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ) ; } if (",0
331,"<S2SV_ModStart> orig ) ; if ( copy == NULL ) { mrb_free ( mrb ) ; return NULL ; } <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy,",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ VP9_FLAG_HIGHBITDEPTH ; cpi -> cur_buf -> flags &= ~ VP9_FLAG_HIGHBITDEPTH ; } # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> flags & VP9_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VP9_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ VP9_FLAG_HIGHBITDEPTH ; cpi -> cur_buf -> flags &= ~ VP9_FLAG_HIGHBITDEPTH ; } # endif vp9_init_plane_quantizers ( cpi <S2SV_ModEnd>, & cpi <S2SV_ModStart> mb ) ; } # endif",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) <S2SV_ModEnd> callee_params, sizeof <S2SV_ModStart> ) ) ; if ( res!= TEE_SUCCESS ) return TEE_",0
335,"<S2SV_ModStart> int rc ; unsigned long eip ; <S2SV_ModStart>, VCPU_SREG_CS ) ; eip = ctxt -> _eip ; memcpy ( & sel, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if ( load_segment_descriptor ( ctxt, eip <S2SV_ModEnd>, VCPU_SREG_EIP ) <S2SV_ModStart> VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; ctxt -> _eip = 0 ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if ( load_segment_descriptor ( ctxt, eip <S2SV_ModEnd>, VCPU_SREG_EIP ) <S2SV_ModStart> VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; ctxt -> _eip = 0 ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if ( load_segment_descriptor ( ctxt, eip <S2SV_ModEnd>, VCPU_SREG_EIP ) <S2SV_ModStart> VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ;",0
336,"<S2SV_ModStart> ; if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels",0
337,"<S2SV_ModStart> "".txt"" ) ; f = FS_FOpenFileWrite ( filename ) ; if (! f ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } f = FS_FOpenFileWrite ( filename ) ; if (! f ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ; f = FS_FOpenFileWrite ( filename ) ; if (! f ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; } f = FS_FOpenFileWrite ( filename ) ; if (! f ) { Com_Printf ( ""ERROR: <S2SV_blank> couldn\'t <S2SV_blank> open <S2SV_blank> %s.\\n"", filename ) ; return ; }",0
338,"<S2SV_ModStart> out_error ; } obj -> n_got = n_got ; obj -> got_table = NULL ; <S2SV_ModStart> 0 ) { obj -> got_table = NULL ; <S2SV_ModStart> 0 ) { obj -> got_table = NULL ; <S2SV_ModStart> 0 ) { obj -> got_table = NULL ; <S2SV_ModStart> 0 ) { obj -> got_table = NULL ; goto out_error ; } <S2SV_ModStart> 0 ) { obj -> got_table = NULL ; goto out_error ; } <S2SV_ModStart> 0 ) { obj -> got_table = NULL ; } } } } if ( obj -> got_table ) { ut32 offset = 0 ; for ( i = 0 ; i < n_reloc ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 < obj -> size ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) {",0
339,"<S2SV_ModStart> -> si_code >= 0 <S2SV_ModEnd> ) return - <S2SV_ModStart> - EPERM ; info -> si_pid = tgid ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) <S2SV_ModEnd> ; } <S2SV_null>",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ),",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> dir ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) { x = c ; } else if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xF0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F )",0
342,"<S2SV_ModStart> var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1, sizeof ( ""allowed_classes"" ) - 1 ) ; } else { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1, sizeof ( ""allowed_classes"" ) - 1, sizeof ( ""allowed_classes"" ) - 1 ) ) ; } } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; }",0
343,<S2SV_ModStart> goto __err ; <S2SV_ModEnd> tu -> queue,0
344,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! ptr -> movie_identifier ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; if (! tmp_str [ i ] ) return GF_ISOM_INVALID_FILE ; if (!,0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> = US ; uschar * cmdline_syslog_name = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * cmdline_syslog_name = NULL ; uschar * start_queue_run_id = NULL ; uschar * start_queue_run_id = NULL ; uschar * stop_queue_run_id = NULL ; uschar * cmdline_syslog_name = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar * cmdline_syslog_line_comment = NULL ; uschar *,0
347,"<S2SV_ModStart> ; s -> seekable = parse_seekable ( h, p ) ; if ( s -> seekable == - 1 ) { s -> seekable = parse_seekable ( h, p ) ; } else { s -> seekable = parse_seekable ( h, p ) ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } else { s -> seekable = parse_seekable ( h, p ) ; } if ( s -> filesize == - 1 ) { s -> seekable = parse_seekable ( h, p ) ; } else { s -> seekable = parse_seekable ( h, p ) ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; }",0
348,"<S2SV_ModStart> * cr ; size_t maxw, maxh, max ; size_t offset, upb ; size_t i, j ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxw ; ++ i ) { for ( j = 0U ; j < maxh ; ++ j ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ;",0
349,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void nfs4_state_set_mode_locked ( fmode_t <S2SV_ModEnd> mode ) { <S2SV_ModStart> state == mode ) { state -> state = mode ; return ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> & FMODE_WRITE )!= ( state -> state & FMODE_READ ) ) { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ;",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.one <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> 0 ; char lbase [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; int same = 0 ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_filename ) ; if ( ( fbase = fopen ( inParam. base_filename, ""rb"" ) ) == NULL ) { goto cleanup ; } printf ( ""Ok.\\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data ; <S2SV_ModStart> - ENODEV ; data = cdc_ncm_data_select_altsetting ( intf ) ; if (! data ) return - ENODEV ; <S2SV_ModStart> ret = cdc_ncm_bind_common <S2SV_ModEnd> ( dev, <S2SV_ModStart>, CDC_NCM_DATA_ALTSETTING_NCM, data <S2SV_ModEnd> ) ; usbnet_link_change <S2SV_ModStart>, 0, data <S2SV_ModEnd> ) ; return",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_base + elem -> out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_base + elem -> out_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->",0
357,"<S2SV_ModStart> ; err = xt_check_entry_offsets <S2SV_ModEnd> ( e,",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == BIT_LINE ) { avpriv_request_sample ( avctx, ""Line <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == BIT_PLANAR ) { avpriv_request_sample ( avctx, ""Line <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_INVALIDDATA ; } else if ( c -> format == BIT_LINE ) { avpriv_request_sample ( avctx, ""Line <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Line <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_INVALIDDATA ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Line <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_",0
359,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; <S2SV_ModEnd> snd_use_lock_sync ( & <S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
361,"<S2SV_ModStart> int error ; pgoff_t start = offset >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int from, to ; if (! start_offset ) start_offset = PAGE_CACHE_SIZE ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; if (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr = start ; offset = start << PAGE_CACHE_SHIFT ; from = 0 ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ;",0
362,<S2SV_ModStart> b ) ; VipsForeignLoadClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( class == NULL ) return ( NULL ) ; if ( <S2SV_ModStart> load ) || <S2SV_ModEnd> vips_image_pio_input ( load <S2SV_ModStart> out ) ) return ( NULL ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> out ) ) return ( NULL ) ; <S2SV_ModEnd> return ( vips_region_new,0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""- <S2SV_blank> "" ) ; } } } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree",0
364,"<S2SV_ModStart> ) ) { xfs_trans_log_buf ( mp -> m_rbm, bp, XFS_ERROR ( EFSCORRUPTED, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR, XFS_R_IOC_ERROR,",0
365,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo = kmalloc ( <S2SV_ModEnd> CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL <S2SV_ModStart> - ENOMEM ; state -> tx_kfifo = kmalloc ( CX23888_IR_TX_KFIFO_SIZE, GFP_KERNEL ) ; if ( state -> tx_kfifo == NULL ) { kfree ( state ) ; return - ENOMEM ; } <S2SV_ModStart> - ENOMEM ; state -> sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> service_name_tlv_length ) ; if ( miux_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; },0
367,"<S2SV_ModStart> void ) { <S2SV_ModEnd> return active_state ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( options <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ;",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_",0
369,"<S2SV_ModStart> * chan ; jas_uint16 channo ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { chan = & cdef -> ents [ channo ] ; if ( jp2_getuint16 ( in, &",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_MII_MODE_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg (",0
371,"<S2SV_ModStart> ; ipc = rcu_dereference_protected ( ipc, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_is_held ( & net -> ipv4. ip_cache, lockdep_",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ;",0
373,<S2SV_ModStart> = 0 ; } if ( skb_dst_is_gso ( skb ) ) skb_dst_set_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) )",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( log ) ) * log_num = nlogs ;,0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; },0
378,"<S2SV_ModStart> ) ) { if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else if ( tag_busy ( tags, off + bit ) ) { if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else if ( tag_busy ( tags, off + bit ) ) { if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else if ( tag_busy ( tags, off + bit ) ) { if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } else if ( tag_busy ( tags, off + bit ) ) { if ( tag_busy ( tags, off + bit ) ) { fn ( rq, data, reserved ) ; } }",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> ; if (! skb_cloned ( skb ) ) return 0 ; if (,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) | ( flags & GRE_KP ) ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ) ;",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", TIFFTileSize ( in ) ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", TIFFTileSize ( in ) ) ; exit ( - 1 ) ; } if ( tl > TIFFTileSize ( in ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tl ) ; exit ( - 1 ) ; } if ( tl > TIFFTileSize ( in ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", TIFFTileSize ( in ) ) ; exit ( - 1 ) ; } if ( tl > TIFFTileSize ( in ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"",",0
385,"<S2SV_ModStart> 'p' }, # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif # ifdef _WITH_BFD_ { ""no_bfd"", no_argument, NULL, 'B' }, # endif # ifdef _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'X' }, # endif # ifdef _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif # ifdef _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL,",0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ( error == 0 ) { printf ( ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return - EINVAL ; } <S2SV_ModEnd> switch ( dev <S2SV_ModStart> break ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> item ) ; struct o2nm_cluster * cluster = <S2SV_ModEnd> to_o2nm_cluster_from_node ( node <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmp == cluster -> cl_has_local && <S2SV_ModEnd> node -> nd_num <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EBUSY ; node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE,0
388,"<S2SV_ModStart> if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (",0
389,<S2SV_ModStart> : case 0x0a : case 0x0b : case 0x0c : case 0x0f : case 0x16 : case 0x17 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x2a : case 0x2b : case 0x2c : case 0x2f : <S2SV_ModStart> : case 0x6a : case 0x6b : case 0x6c : case 0x6f : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 :,0
390,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> owned_by_user\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } error = sctp_do_sm ( net, SCTP_EVENT_T_RESET, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { sctp_do_sm ( net, SCT",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> create <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fflush ( stdout ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; goto trunc ; } ND_TCHECK ( lshp -> ls_age ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %u, <S2SV_blank> length <S2SV_blank> %u"",",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), 4 ) ) return 0",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } <S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; } ret += obuf -> len ;,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; mm_segment_t <S2SV_ModStart> KERNEL_DS ) ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; <S2SV_ModStart> = 0 ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user (",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_",0
400,"<S2SV_ModStart> ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; c = find_host_connection ( & md -> iface -> ip_addr, pluto_port, ( ip_address * ) NULL, md -> sender_port, policy ) ; if ( c == NULL ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> { nsc_encode_subsampling ( <S2SV_ModEnd> context ) ; <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> stringset == ETH_SS_STATS ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( strlen ( g_xgmac_stats_string ) > sizeof ( g_xgmac_stats_string ) ) return sizeof ( g_xgmac_stats_string ) ; if ( strlen ( g_xgmac_stats_string ) > sizeof ( g_xgmac_stats_string ) ) return 0 ; if ( strlen ( g_xgmac_stats_string ) > sizeof ( g_xgmac_stats_string ) ) return 0 ; if ( strlen ( g_xgmac_stats_string ) > sizeof ( g_xgmac_stats_string ) ) return sizeof ( g_xgmac_stats_string ) ; if ( strlen ( g_xgmac_stats_string ) > sizeof ( g_xgmac_stats_string ) ) return sizeof ( g_xgmac_stats_string ) ; if ( strlen ( g_xgmac_stats_string ) > sizeof ( g_xgmac_stats_string ) ) return sizeof ( g_xgmac_stats_,0
404,<S2SV_ModStart> 1 ) return ( <S2SV_ModEnd> image -> columns <S2SV_ModStart> 8 ) ; else return ( image -> columns * GetPSDPacketSize ( image ) ) <S2SV_ModEnd> ; } <S2SV_null>,0
405,"<S2SV_ModStart> fd = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( pcu -> ctrl_intf -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return -",0
407,"<S2SV_ModStart> ( intf ) <S2SV_ModEnd> ; const char <S2SV_ModStart> name = d -> name ; struct device * dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> ) { xstep = ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1",0
409,<S2SV_ModStart> target_enc ) { * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_NULL ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; },0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int InsertRow ( Image * image, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> x ; ssize_t bit ; ssize_t x ; register Quantum * q ; Quantum index <S2SV_ModEnd> ; index = <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( Quantum ) ( ( ( ( ( * p ) & ( 0x80 >> bit )",0
411,"<S2SV_ModStart> u_char * tptr <S2SV_ModEnd> ) { u_int <S2SV_ModStart> = FALSE ; <S2SV_ModEnd> switch ( network_addr_type <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET4 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( n",0
412,"<S2SV_ModStart>, ss ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> X86EMUL_MODE_PROT32 ; else if ( ctxt -> mode == X86EMUL_MODE_VM86 ) usermode = X86EMUL_MODE_REAL ; else usermode = X86EMUL_MODE_VM86 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss. dpl = 3 ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> _eip = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC ) = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RSP ) = reg_read ( ctxt, VCPU_S_",0
413,"<S2SV_ModStart> ( dev ) ; int ret ; ret = sprintf ( buf, ""%s\\n"", pdev -> driver_override ) ; if ( ret ) return ret ; ret = sprintf ( buf, ""%s\\n"", ret ) ; if ( ret ) return ret ; ret = sprintf ( buf, ""%s\\n"", ret ) ; if ( ret ) return ret ; ret = sprintf ( buf, ""%s\\n"", ret ) ; if ( ret ) return ret ;",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( tmpout && ( BIO_write ( tmpout, buf, i )!= i ) ) goto err ; tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; int b ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vp9_cost_bit ( prob, b ) ; const vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } }",0
417,"<S2SV_ModStart> ) && ( ( tmp_dir = getenv ( ""TMPDIR"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL ||",0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; protoname = ""udp6"" ; break ; case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text + 1, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; break ; case",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ) err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err ) return err ; DEB ( printk ( ""sequencer_write(dev=%d, <S2SV_blank> count=%d)\\n"", dev, count ) ) ; return err ; } if ( ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return - EINVAL ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) ) return - EINVAL ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return - EIN",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; struct address_space * mapping = vma -> vm_file -> f_mapping ; long chg = vma_needs_reservation ( h, vma, addr ) ; if ( chg < 0 ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } set_page_private ( page, ( unsigned long ) mapping ) ; vma_commit_reservation ( h, vma, addr ) ; return page ;",0
422,"<S2SV_ModStart> filegen_string ) ; DEBUGF ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; <S2SV_ModStart> filegen_file ) ; DEBUGF ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; filegen -> flag |= FGEN_FLAG_ENABLED ; <S2SV_ModEnd> my_node = HEAD_PFIFO <S2SV_ModStart> my_node -> options ) ; for ( ; my_node!= NULL ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_node -> options ) ; my_opts = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_opts!= NULL ; my_opts = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node = my_node -> link ; my_node = my_node ->",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; if ( manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ) { r = manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & error, NULL ) ; if ( r < 0 ) goto fail ; log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; return ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_high_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 10 ] ; tran_high_",0
425,<S2SV_ModStart> ( ) ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAVE_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif return flags & mask <S2SV_ModEnd> ; } <S2SV_null>,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFF <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
428,<S2SV_ModStart> tot_len ) ; if ( opt2 -> tot_len < tot_len ) { err = - EINVAL ; goto out ; } <S2SV_ModStart> tot_len ) ; if ( opt2 -> tot_len > tot_len ) { err = - EINVAL ; goto out ; },0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length > 64 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> (%d)"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> fpath = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } ret = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
431,"<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= ( flag & ( CL_UNPRIVILEGED | CL_READONLY ) || ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_sb = sb ; mnt -> mnt_root = dget ( root ) ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_root ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & old -> mnt_instance ) ; unlock_mount_hash ( ) ;",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( ( unsigned int ) rsize >= 110 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 111 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 111 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 104 ] = 0x26 ; rdesc [ 105 ] = rdesc [ 110 ] = 0x80 ; rdesc [ 106 ] =",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - offset ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> & I8042_STR_AUXERR ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { dbg ( ""MUX <S2SV_blank> timeout, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } <S2SV_ModStart> & I8042_STR_AUXERR ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { str = last_str ; break ; } if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } } if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last_transmit + HZ / 10 ) { if ( time_before ( jiffies, last",0
436,"<S2SV_ModStart> case NFSPROC_GETSTATSTAT : if ( v3 ) { if ( parsewccres ( ndo, dp, ndo -> ndo_vflag )!= 0 ) { if ( parseattrstat ( ndo, dp,! ndo -> ndo_qflag, 0 )!= 0 ) { if ( parseattrstat ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) { if ( parsewccres ( ndo, dp, ndo -> ndo_vflag )!= 0 ) { if ( parsewccres ( ndo, dp, ndo -> ndo_vflag )!= 0 ) { if ( parseattrstat ( ndo, dp,! ndo -> ndo_qflag, 0 )!= 0 ) { if ( parseattrstat ( ndo, dp,! ndo -> ndo_vflag, 0 )!= 0 ) { if ( parsewccres ( ndo, dp, ndo -> ndo_vflag )!= 0 ) { if ( parsewccres ( ndo, dp, ndo -> ndo_vflag )!= 0 ) { if ( parse",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_translate_to_linux ( uint8_t * newName, size_t udfLen, uint8_t * fidName, size_t <S2SV_ModEnd> fidNameLen ) { <S2SV_ModStart> newIndex ; } } if ( newIndex < 256 ) { uint8_t curr ; uint8_t ext [ EXT_SIZE ] ; int localExtIndex = 0 ; for ( index = 0 ; index < EXT_SIZE && extIndex + index + 1 < udfLen ; index ++ ) { curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ extIndex + index + 1 ] == '/' || udfName [ extIndex + index + 1 ] == 0 ) ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 2 < udfLen && ( udfName [ extIndex + index + 2 ] == '/' || udfName [ extIndex + index + 2 ] == 0 ) ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ extIndex + index",0
438,"<S2SV_ModStart> * cpi, ThreadData * td, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ] ; int bw, bh ; if ( mi_row < cm -> mi_rows || mi_col < cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, td, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, td, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg",0
439,"<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ) ) { serverPanic ( ""Client <S2SV_blank> is <S2SV_blank> paused"" ) ; }",0
440,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> * s ; DSA_SIG_data * d2i_DSA_SIG = NULL ; <S2SV_ModStart> ; if ( d2i_DSA_SIG ( & d2i_DSA_SIG, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa )",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) return rv ; rv = gdDPExtractData <S2SV_ModEnd> ( out,",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p == NULL ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (",0
445,"<S2SV_ModStart> '\\0' ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ':' ) ; if ( separator == NULL ) { separator = osStrchr ( token, '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> password: <S2SV_blank> %s\\r",0
446,"<S2SV_ModStart> -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; has_local_ct = ( int ) ( ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x07 ) ; } if ( has_local_ct ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
449,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> asdl_seq * <S2SV_ModEnd> body, PyArena <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
451,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> flags ) { # if USE_PARTIAL_COPY int row, col, active_end ; int mb_rows = ( src -> y_height + 15 ) >> 4 ; int mb_cols = ( src -> y_width + 15 ) >> 4 ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if (! active_map [ col ] ) break ; } vpx_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; active_map += mb_cols ; } } else { vpx_copy_and_extend_frame ( src, &",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int scsi_disk_emulate_command (,0
455,<S2SV_ModStart> cur_pic. f && s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> cur_pic. f -> pix_fmt == FF_PIX_FMT_YUV420P || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> off ) { struct rds_header * h = & rm -> m_inc. i_hdr ; <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; if ( hdr_off || sg || off ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return 0 ; } if ( hdr_off || sg || off ) ; rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_inc_put ( & rm -> m_inc ) ; return",0
457,"<S2SV_ModStart> buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE (",0
458,<S2SV_ModStart> ; if ( key -> type -> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
459,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK_32BITS ( & mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> Cookie=%08x:%08x"", EXTRACT_32BITS ( & mh -> ip6m_data16 [ 0 ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, ""Home <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & mh -> ip6m_data16 [ 0 ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, ""Home <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""C",0
460,<S2SV_ModStart> = & ieee80211_dataif_ops ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING,0
461,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 212 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_INVALID_DATA, 0 ) ; return NULL ; } <S2SV_ModStart> channel ; } if ( hmi_size < 228 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_INVALID_DATA, 0 ) ; return NULL ; } <S2SV_ModStart> note ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_INVALID_DATA, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION",0
462,<S2SV_ModStart> = hdev -> id ; if ( * addr_len < sizeof ( * haddr ) ) { * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; * addr_len = sizeof ( * haddr ) ; return - EINVAL ; },0
463,<S2SV_ModStart> = inode -> i_generation ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_data ; fh32 [ 3 ] = ( __u32 ) ei -> i_iget5_offset ; fh32 [ 4 ] = ( __u32 ) ei -> i_iget5_data,0
464,"<S2SV_ModStart> ; } if ( server. pw_expiration && server. pw_expiration < kdc_time ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_RE",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) || signed_sub_overflows ( dst_reg -> umin_value, umin_val ) || signed_sub_overflows ( dst_reg -> umax_value, umax_val ) || signed_sub_overflows ( dst_reg -> umin_value, umax_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ;",0
466,"<S2SV_ModStart> method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) { const <S2SV_ModStart> int q = vp9_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd>, 0 ) <S2SV_ModStart> int q = vp9_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> qindex, 0 ) <S2SV_ModEnd> ; int filt_guess <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO <S2SV_ModEnd> ( q * <S2SV_ModStart> + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; }",0
467,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVAC,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,"<S2SV_ModStart> : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ;",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( sscanf ( l_line <S2SV_ModEnd>, ""%u <S2SV_blank> %u <S2SV_blank> %u"", <S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_row_count ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( *",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) { res = VPX_CODEC_MAX_DATA_SIZE ; } else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } # endif <S2SV_ModStart> else { res = VPX_CODEC_ERROR ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( unsigned int ) data_sz > VPX_CODEC_MAX_DATA_SIZE ) { res = VPX_CODEC_MAX_DATA_SIZE ; } else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } # endif return SAVE_STATUS ( ctx, res ) <S2SV_ModEnd> ; } <S2SV_null>",0
474,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> value [ strlen <S2SV_ModStart> ] == ',' ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
476,"<S2SV_ModStart> ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type, pptr ++ ) ) ; if ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", es",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
478,"<S2SV_ModStart> else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_set_counter_value ( vcpu, idx, p -> regval ) ; } else { if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval )",0
479,"<S2SV_ModStart> case IS_STRING : <S2SV_ModEnd> affine [ i <S2SV_ModStart> i ] = Z_LVAL ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL ( zval_affine_elem ) ; break ; case IS_LONG : affine [ i ] = Z_LVAL ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL ( zval_affine_elem ) ; break ; case IS_LONG : affine [ i ] = Z_LVAL ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL ( zval_affine_elem ) ; break ; case IS_LONG : affine [ i ] = Z_LVAL ( zval_affine_elem ) ; break ; case IS_DOUBLE : affine [ i ] = Z_DVAL ( zval_affine_elem ) ; break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ;",0
480,<S2SV_ModStart> self ) { Py_CLEAR <S2SV_ModEnd> ( self -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
481,"<S2SV_ModStart> SQL_DROP ) ; ret = SQLExecDirect ( hStmt, szSepLine, SQL_NTS ) ; if ( ret!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecDirect <S2SV_blank> returned <S2SV_blank> SQL_SUCCESS_WITH_INFO\\n"" ) ; } else if ( ret!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, hStmt ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecDirect <S2SV_blank> returned <S2SV_blank> SQL_SUCCESS_WITH_INFO\\n"" ) ; } else if ( ret!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecDirect <S2SV_blank> returned <S2SV_blank> SQL_SUCCESS_WITH_INFO\\n"" ) ; } else if ( ret!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQL",0
482,"<S2SV_ModStart> ; r = copy_to_user <S2SV_ModEnd> ( data,",0
483,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> VERSION ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness.\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\nThis <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie",0
484,"<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports > 1 ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank> ttyUSB%i\\n"", co -> index ) ; retval = - ENODEV ; goto error_get_interface ; }",0
485,"<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & cpuctx -> ctx. mutex ) ; lockdep_set_class ( & cpuctx -> ctx. lock, & cpuctx_lock ) ;",0
486,"<S2SV_ModStart>, struct iovec <S2SV_ModEnd> * iovec ) <S2SV_ModStart> = 1 ; return __aio_setup_single_vector ( kiocb, rw, buf, len, iovec ) <S2SV_ModEnd> ; } <S2SV_null>",0
487,"<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModEnd> groups_per_flex = 0 <S2SV_ModStart> -> s_log_groups_per_flex ; unsigned <S2SV_ModEnd> groups_per_flex = 1 <S2SV_ModStart> -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } sbi -> s_log_groups_per_flex = le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + EXT4_DESC_PER_BLOCK_BITS ( sb ) ) ; flex_group_count = ( ( sbi -> s_groups_count + groups_per_flex - 1 ) + ( ( le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + 1 ) << EXT4_DESC_PER_BLOCK_BITS ( sb ) ) ) / groups_per_flex ; size = flex_group_count * sizeof ( struct flex_groups ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR",0
488,"<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) SCTP_MAX_CHUNK_SIZE - required_length ) ) { pr_debug ( ""sctp_chunk_length_valid(): <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u <S2SV_blank>!= <S2SV_blank> %u"", chunk_length, required_length, SCTP_MAX_CHUNK_SIZE, SCTP_MAX_CHUNK_SIZE, chunk -> chunk_hdr -> type, ntohs ( chunk -> chunk_hdr -> length ), chunk_length, SCTP_MAX_CHUNK_SIZE - required_length ) ; return 0 ; }",0
489,"<S2SV_ModStart> count ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
490,"<S2SV_ModStart> (! EmptyString <S2SV_ModEnd> ( cli_sslclifp ( <S2SV_ModStart> ( cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ] <S2SV_ModEnd>, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"",",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; } for ( ; i < w ; i ++ ) dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; dst [ i + 3 ] = src1 [ i + 3 ] -,0
492,"<S2SV_ModStart> -> data ; size_t forward_matches = callback_args -> forward_matches ; <S2SV_ModStart> match_length += forward_matches ; if ( match_length > callback_args -> data_size ) { match_length = callback_args -> data_size ; forward_matches = callback_args -> forward_matches ; } <S2SV_ModStart> forward_matches ; } if ( match_length > callback_args -> data_size ) { FAIL_ON_ERROR ( yr_arena_write_data ( callback_args -> context -> matches_arena, & new_match, sizeof ( YR_MATCH ), ( void * * ) & new_match ) ) ; } else { if ( match_length > callback_args -> data_size ) { FAIL_ON_ERROR ( yr_arena_allocate_memory ( callback_args -> context -> matches_arena, sizeof ( YR_MATCH ), ( void * * ) & new_match ) ) ; } else { FAIL_ON_ERROR ( yr_arena_allocate_memory ( callback_args -> context -> matches_arena, sizeof ( YR_MATCH ), ( void * * ) & new_match ) ) ; }",0
493,"<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & SKIP_PORT_FORWARDING )!= 0 && ( options. allow_streamlocal_forwarding & SKIP_PORT_FORWARDING )!= 0 && ( options. allow_streamlocal_forwarding & SKIP_PORT_FORWARDING )!= 0 && ( options. allow_streamlocal_forwarding & SKIP_PORT_FORWARDING )!= 0 &&! options. disable_forwarding ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else if ( ( options. allow_streamlocal_forwarding & SKIP_PORT_FORWARDING )!= 0 &&! options. disable_forwarding ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"",",0
494,"<S2SV_ModStart>! bitstream_read_bit ( bc ) ) { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
495,<S2SV_ModStart> return err ; <S2SV_ModEnd> } else {,0
496,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" )",0
497,<S2SV_ModStart> ; register int <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ ( 2 - parity ) * stride ] ; srcptr = buf ; n = m ; dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a",0
501,"<S2SV_ModStart> ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( queue ) { if ( free_func ) ( queue ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first",0
502,"<S2SV_ModStart>, data ) ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { err = - EPERM ; goto out ; } err = security_remount_mnt ( path, mnt_flags, data ) ; if ( err ) return err ; down_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data",0
503,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> copied, err ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg ->",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> num_ports < 2 || serial -> num_ports > 1 ||! serial -> port [ 1 ],0
506,"<S2SV_ModStart> qmode ) { int do_rf64 = 0, write_junk = 1 ; ChunkHeader ds64hdr, datahdr, fmthdr ; RiffChunkHeader riffhdr ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0",0
507,"<S2SV_ModStart> ; if ( msg_sys -> msg_namelen ) { err = - EINVAL ; goto out_freeiov ; } <S2SV_ModStart> ) ; } else { err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_namelen : - EINVAL ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock",0
508,"<S2SV_ModStart> inode ) ; struct metapath * mp2 = & mp -> mp_metapath ; struct gfs2_inode * ip = GFS2_I ( inode ) ; struct metapath * metapath = & mp -> mp_metapath [ height - 1 ] ; struct buffer_head * dibh = metapath -> mp_bh [ height - 1 ] <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> end_of_metadata = height - 1 ; int eob ; if ( dibh == NULL ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; ptrs_per_blk = metapath_ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] - mp -> mp_list [ end_of_metadata ] ; bh = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_",0
509,"<S2SV_ModStart> ( global -> codec ) ) ; fprintf ( stderr, ""Interface: <S2SV_blank> %s\\n"", global -> codec -> interface ( ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) { fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : """,0
510,"<S2SV_ModStart> ; PROFILER_ENTER ( context <S2SV_ModEnd> -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> context -> priv -> prof_nsc_rle_decompress_data ) context -> priv -> <S2SV_ModEnd> nsc_rle_decompress_data ( context <S2SV_ModStart> context -> priv -> prof_nsc_decode ) context -> priv -> <S2SV_ModEnd> decode ( context <S2SV_ModStart> context -> priv -> prof_nsc_decode ) if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst",0
511,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute",0
512,"<S2SV_ModStart> 0 ) { if ( copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp,",0
513,<S2SV_ModStart> fv -> b ) { if ( <S2SV_ModStart> fv -> b ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFiles,0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> ) ; when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) return 0 ;,0
516,"<S2SV_ModStart> 1 ) ; if (! js_regexec ( re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else if ( js_isundefined ( J, 1 ) ) js_newregexp ( J, """", 0 ) ; else js_newregexp ( J, """", 0 ) ; else",0
517,"<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> caml_set_oo_id ( ( <S2SV_ModStart> dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { caml_set_oo_id ( ( value ) dest ) ; } break ; case OSetOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ;",0
518,"<S2SV_ModStart> * multipart_media ; size_t content_length ; int code = 500, fd = - 1, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; const char * errstr = NULL ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> range = parse_range <S2SV_ModStart> st -> st_size, & nranges ) ; if ( ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; if ( kv_add ( & resp -> http_headers, ""Content-Length"",",0
519,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER ) ; ksz8851WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS )!= 0 ) { if ( ( isr & KSZ8851_ISR_TXIS )!= 0 ) { if ( ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS )!= 0 ) { if ( ( isr & KSZ8851_ISR_RXIS )!= 0 ) { if (",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
521,"<S2SV_ModStart> if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
524,<S2SV_ModStart> flags ) { if ( flags & TFD_TIMER_ABSTIME ) { if ( ( ctx -> flags & TFD_TIMER_ABSTIME ) && ( ctx -> flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else { spin_unlock ( & cancel_lock ) ; } } else if (! ( ctx -> flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_unlock ( & cancel_lock ) ; } else if (! ( ctx -> flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if (! ( ctx -> flags & TFD_TIMER_CANCEL_ON_SET ) ) { spin_lock ( & cancel_lock ) ; spin_unlock ( & cancel_lock ) ; } else if ( ctx -> might_cancel ),0
525,"<S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; return NULL ; } <S2SV_ModStart> ++ ) { if ( nElements > 256 ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) nElements ) ; } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; } } else if ( nElements == 256 ) { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; } }",0
526,"<S2SV_ModStart> { if ( tomoyo_pathcmp ( & path, dev_name, sizeof ( path ) - 1 )!= 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & path, dev_name, sizeof ( path ) - 1 )!= 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & rdev, & rdev )!= 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & rdev, dev_name, sizeof ( rdev ) - 1 )!= 0 ) { error = - EINVAL ; goto out ; } if ( tomoyo_pathcmp ( & rdev, sizeof ( rdev ) - 1 )!= 0 ) { error = - EINVAL ; goto out ; } if ( pathcmp ( & rdev, & rdev )!= 0 ) { error = - EINVAL ; goto out ; } if ( pathcmp ( & rdev, dev_name, sizeof ( rdev ) - 1 )!= 0 ) { error = - EINVAL ; goto out ;",0
527,"<S2SV_ModStart> ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> big\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> big\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { printk ( KERN_ERR ""%s() <S2SV_blank> Too <S2SV_blank> big\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; }",0
528,<S2SV_ModStart> TSRMLS_CC ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
529,"<S2SV_ModStart> ; if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) == NULL ) { if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localrsa = d2i_RSA_pubkey_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( raw",0
530,"<S2SV_ModStart> ( ) ; strcpy ( t1_line_array <S2SV_ModEnd>, t1_buf_array )",0
531,"<S2SV_ModStart>, BLOCK_SIZE subsize, int partition <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> int hbs = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> switch ( partition <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 0",0
532,"<S2SV_ModStart> name ) ; if ( name == NULL ) { fsck_warn ( data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; free ( name ) ; return 0 ; }",0
533,<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int row_x = 0 ; int row_y = 0 ; int row_height = 0 ; int row_rows = 0 ; int row_cols = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_cols = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_cols = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_cols = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_rows = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols = 0 ; int row_cols =,0
534,<S2SV_ModStart> cnt ) { size_t <S2SV_ModEnd> n ; assert,0
535,"<S2SV_ModStart> ; __be16 type ; const struct gre_base_hdr * greh2 ; const struct gre_base_hdr * greh3 ; const struct gre_base_hdr * greh4 ; const struct gre_base_hdr * greh3 ; const struct gre_base_hdr * greh4 ; const struct gre_base_hdr * greh4 ; const struct gre_base_hdr * greh4 ; const struct gre_base_hdr * greh4 ; if ( skb_gro_header_fast ( skb, hlen ) ) { greh = skb_gro_header_fast ( skb, hlen ) ; greh = skb_gro_header_slow ( skb, hlen ) ; if (! greh ) goto out_unlock ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush",0
536,"<S2SV_ModStart> ; if ( ( matrix = jas_malloc2 ( numrows * numcols, sizeof ( jas_matind_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> maxrows_ = numrows ; matrix -> maxcols_ = numcols ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> maxrows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_matind_t ) ) ) ) ) { jas_matrix_destroy ( matrix )",0
537,<S2SV_ModStart> { if ( session -> sessionKey. t. size > TSS2_MAX_SESSION_KEY_SIZE ) { return TSS2_SYS_RC_OVERFLOW ; } <S2SV_ModStart> } else { if ( session -> sessionKey. t. size > TSS2_MAX_SESSION_KEY_SIZE - TSS2_MAX_SESSION_KEY_SIZE ) { return TSS2_SYS_RC_OVERFLOW ; } <S2SV_ModStart> } else { if ( session -> sessionKey. t. size > TSS2_MAX_SESSION_KEY_SIZE - TSS2_MAX_SESSION_KEY_SIZE ) { return TSS2_SYS_RC_OVERFLOW ; } else { if ( session -> sessionKey. t. size > TSS2_MAX_SESSION_KEY_SIZE - TSS2_MAX_SESSION_KEY_SIZE ) { return TSS2_SYS_RC_OVERFLOW ; } else { if ( session -> sessionKey. t. size > TSS2_MAX_SESSION_KEY_SIZE - TSS2_MAX_SESSION_KEY_SIZE - TSS2_MAX_SESSION_KEY_SIZE ) { return TSS2_SYS_RC_OVERFLOW ; },0
538,"<S2SV_ModStart> ; ret = key_permission_check <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> ; if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 0 ; } else if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 0 ; } else { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 0 ; } else if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 0 ; } else { ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_,0
540,"<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_UNION : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_UNION : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg ->",0
541,"<S2SV_ModStart> ) ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry )",0
542,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( vdev -> bar0_index ) ; info. size = pdev -> bar0_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( vdev -> bar0_index ) ; info. size = pdev -> bar5_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( vdev -> bar5_index ) ; info. size = pdev -> bar5_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_,0
543,"<S2SV_ModStart> ) ; if ( ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,"<S2SV_ModStart> -> filesize = - 1 ; s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; if ( options ) av_dict_copy ( & s -> chained_options, * options, 0 ) ; if ( s -> headers ) { int len = strlen ( s -> headers ) ; if ( len < 2 || strcmp ( ""\\r\\n"", s -> headers + len - 1 ) ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> trailing <S2SV_blank> CRLF <S2SV_blank> found <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> header.\\n"" ) ; ret = av_reallocp ( & s -> headers, len + 3 ) ; if ( ret < 0 ) return ret ; s -> headers [ len ] = '\\r' ; s -> headers [ len ] = '\\",0
545,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == 0 ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ), sock_owned_by_user ( sk ) ) == 0 ) { if ( rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) ) ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) == 0 ) { if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) == sock_owned_by_user ( sk ) ) == 0 ) { if ( rcu_dereference_protected ( sk, sock_owned_by_user ( sk ) )",0
546,"<S2SV_ModStart> char * in, size_t count <S2SV_ModStart> char * in, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> += 4 ; if ( count < count ) return - 1 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } else { * out ++ = ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >>",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, cur_len ; <S2SV_ModEnd> ssize_t total_written =",0
549,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; if ( <S2SV_ModEnd> encode_frame_count <= 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> vpx_svc_get_message ( svc_ctx <S2SV_ModStart> ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank>",0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left == 0 ) { * out ++ = 0 ; left -- ; } else if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } } * ( ( UINT32 * ) in ) = * ( ( UINT32 * ) in ) ; } else if ( value == * in ) { in ++ ; len = ( UINT32 ) * in ++ ; len += 4 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
552,"<S2SV_ModStart> = new_cols ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; screen -> buffers [ 0 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> buffers [ 1 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, <S2SV_ModEnd> sizeof ( VTermScreenCell <S2SV_ModStart> VTermScreenCell ) * new_cols ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, <S2SV_ModEnd> sizeof ( VTermScreenCell <S2SV_ModStart> VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, <S2SV_ModEnd> sizeof",0
553,"<S2SV_ModStart> { const char * literal_start = * str ; const char * literal_end = * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 1 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return -",0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> int bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ; return 0 ;",0
555,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( <S2SV_ModEnd> pd, g_settings_dump_location",0
556,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> return pcrypt_free ( <S2SV_ModStart> inst ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
558,<S2SV_ModStart> ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,<S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected <S2SV_ModEnd> ( neigh -> <S2SV_ModStart> neigh = rcu_dereference_protected ( neigh ->,0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; size_t replay_esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( replay_esn_len!= up_len ) return - EINVAL ; <S2SV_ModStart> )!= up_len <S2SV_ModEnd> ) return -,0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table, <S2SV_ModStart>, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent < 0 || sysctl_perf_cpu_time_max_percent > 100 || sysctl_perf_cpu_time_max_percent > 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; return ret ; } if ( sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 0 ) ; } else { WRITE_ONCE ( perf_sample_allowed_ns, sysctl_perf_cpu_time_max_percent",0
564,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> ) ) { if ( l_tmp_data == ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ) { opj_free ( l_tmp_data ) ; return 00 ; } <S2SV_ModStart> ) ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ) { opj_free ( l_tmp_data ) ; return ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ; } l_tmp_ptr = ( OPJ_UINT32 * * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ) ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) ) ) { opj_free ( l_tmp_data ) ; return ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * sizeof ( OPJ_UINT32 ),0
566,"<S2SV_ModStart> name ) { int ret ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", ret ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", ret ) ; if ( ret < 0 ) return NULL ;",0
567,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str = cm -> mi_stride <S2SV_ModEnd> * mi_row + <S2SV_ModStart> mi_col ; MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> idx_str ; MODE_INFO * * prev_mi = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; vp9_zero ( xd -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> case VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case SOURCE_VAR_BASED_PARTITION : switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) ibuf -> flags |= PIPE_BUF_FLAG_GIFT ; else ibuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ;,0
570,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
571,"<S2SV_ModStart> } else { if ( Instr && Instr -> IsVirtualFile ) { Fp = ( virtualDirCallback. open ) ( filename, UPNP_READ ) ; if ( Fp == NULL ) return HTTP_INTERNAL_SERVER_ERROR ; } <S2SV_ModEnd> parser -> position <S2SV_ModStart> POS_COMPLETE ) { status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok_on_close = TRUE ; } else if ( ( status!= PARSE_SUCCESS ) && ( status!= PARSE_CONTINUE_1 ) && ( status!= PARSE_INCOMPLETE ) ) { ret_code = HTTP_BAD_REQUEST ; goto ExitFunction ; } if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_BAD_REQUEST ; goto ExitFunction ; }",0
572,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; <S2SV_ModStart> PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg,0
573,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( ncolors > XWD_MAX_NCOLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> to <S2SV_blank> decode\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gb ) ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank>",0
574,"<S2SV_ModStart> ; krb5_data rspac ; HDB * clientdb = NULL, * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL, * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * client",0
575,"<S2SV_ModStart> ; cookie = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if (",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> ci = { <S2SV_ModEnd>. devnum = <S2SV_ModStart> -> devnum, <S2SV_ModEnd>. slow = <S2SV_ModStart> == USB_SPEED_LOW } ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> int opt, size_t <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; if ( opt -> optlen < opt -> optlen && ip_options_compile ( net, opt, NULL ) ) return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; }",0
578,"<S2SV_ModStart> ; } retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == ENOSPC ) { xfs_trans_ijoin ( args -> trans, dp, 0 ) ; error = xfs_trans_roll ( & args -> trans, dp, 0 ) ; if ( error ) return ( error ) ; xfs_trans_brelse ( args -> trans, bp ) ; return ( error ) ; } xfs_trans_ijoin ( args -> trans, dp, 0 ) ; if ( retval == ENOSPC ) { xfs_trans_brelse ( args -> trans, bp ) ; return ( error ) ; } xfs_trans_ijoin ( args -> trans, dp, 0 ) ; error = xfs_trans_roll ( & args -> trans, dp, 0 ) ; if ( error ) return ( error ) ; xfs_trans_brelse ( args -> trans, bp ) ; args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt",0
579,"<S2SV_ModStart> ) == STATUS_BUFFER_TOO_SMALL && IoEnumerateVolumeObjects ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; } else if ( IoEnumerateVolumeObjects ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; } else if ( IoEnumerateVolumeObjects ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) { * ( int * ) Irp -> AssociatedIrp.",0
580,"<S2SV_ModStart> ; if ( http_request_get_header ( info -> request, ""Sec-WebSocket-Connection"" ) == NULL ) { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Sec-WebSocket-Connection"" ) ; if ( strcmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Sec-WebSocket-Connection"" ) ; if ( strcmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count",0
581,"<S2SV_ModStart> uint16 nif = 0 ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { goto error ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d -> name ) ; if ( d -> description ) nif += strlen ( d -> description ) ; if ( d -> name ) nif += strlen ( d",0
582,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
583,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { for ( index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { for ( index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart>, int tstype <S2SV_ModEnd> ) { struct <S2SV_ModStart> sock_exterr_skb * serr <S2SV_ModEnd> ; int err <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; } if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; } if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_info = tstype ; if ( skb_sh",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> = len ; if (! in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, ""ERR: <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( in_cksum ( vec, 0 ) ) { ND_PRINT ( ( ndo, ""ERR: <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, ""ERR: <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; ND_PRINT ( ( ndo, ""ERR: <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( in_cksum ( vec, 0 ) ) { ND_PRINT ( ( ndo, ""ERR: <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> = len ; if ( in_cksum ( vec, 1 ) ) { ND_PRINT ( ( ndo, ""ERR: <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ), CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ), CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""\\/"" ), CONST_STR_LEN ( ""\\/"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR",0
589,<S2SV_ModStart> if ( dumpable &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ),0
590,"<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c"", __FILE__, __LINE__ ) ; return ; } else { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c(): <S2SV_blank> too <S2SV_blank> long <S2SV_blank> in <S2SV_blank> add_bytes_l2_c"", __FILE__, __LINE__ ) ; return ; }",0
591,"<S2SV_ModStart> flags & __GFP_ZERO ) memset ( addr, 0, size ) ;",0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> ps_codec ) ; if ( 0 == ps_bitstrm -> u4_offset ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; } <S2SV_ModStart> ps_codec ) ; if ( 0 == ps_bitstrm -> u4_offset ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags =,0
594,"<S2SV_ModStart> * priv ; if ( port -> interrupt_out_size > 9 ) { priv = usb_serial_alloc ( serial -> dev, CYPRESS_BUF_SIZE, GFP_KERNEL ) ; if (! priv ) return - ENOMEM ; } priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> read <S2SV_blank> & <S2SV_blank> write <S2SV_blank> intervals <S2SV_blank> forced <S2SV_blank> to <S2SV_blank> %d\\n"", __func__, interval ) ; } else { priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> intervals: <S2SV_blank> read=%d <S2SV_blank> write=%d\\n"", __func__, priv -> read_urb_interval, priv -> write_urb_interval ) ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank>",0
595,"<S2SV_ModStart> ; tmp_sdma_rht = kmalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; return - ENOMEM ; }",0
596,<S2SV_ModStart> -> device_data ; device -> device_data = NULL ;,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> mi_repair_parallel ( MI_CHECK <S2SV_ModStart> rep_quick ) { <S2SV_ModEnd> printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModStart> ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name, llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort",0
598,"<S2SV_ModStart> q, 10 ) ; if ( q == ( char * ) NULL ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( i == 0 ) i = 10 ; while ( ( isspace ( ( int ) ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( i == 0 ) i = 10 ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ) ;",0
599,"<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } } else { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) { nblks",0
600,"<S2SV_ModStart> out ) ; } if ( pcount > INT_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT_MAX / sizeof ( Pairs ) ) ) ; if ( pcount > INT_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT_MAX / sizeof ( Pairs ) ) ) ) ;",0
601,"<S2SV_ModStart> val ) ; if (! addvar ( r, var, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> addvar"", r -> name ) ; if ( hasrspfile ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile_content"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( text [ 1 ] <S2SV_ModStart> ( yyscanner ) ; if ( text [ 2 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 3 ] == EOF ) return 0 ; text [ 4 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 4 ] == EOF ) return 0 ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( text [ 5 ] == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) ; if ( text [ 5 ] == EOF ) return 0 ; text [ 6 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 6 ] == EOF ) return 0 ; text [ 7 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 7 ] == EOF ) return 0 ; text [ 8 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 8 ] == EOF ) return 0 ; text [ 9 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 9 ] == EOF ) return 0 ; text [ 10 ] = RE_YY_INPUT ( yyscanner ) ; if ( text [ 10 ] == EOF ) return,0
603,"<S2SV_ModStart> ""Content-Type"" ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", agoo_con_kind_str ( c -> bind -> kind ), ( unsigned long long ) c -> id, c -> buf ) ; return HEAD_AGAIN ; } <S2SV_ModStart> agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Connection"" ) ; if ( NULL == ( vend = agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Type"" ) ) { return bad_request ( c, 400, __LINE__ ) ; } if ( NULL == ( vend = agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Type"" ) ) { return bad_request ( c, 400, __LINE__ ) ; } if ( NULL == ( vend = agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Type""",0
604,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_fht16x16_c ( const <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16x16_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; int16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i )",0
605,"<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_error
606,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> goto out_errno ; <S2SV_ModStart> goto out_errno ; fh_lock ( fh ) ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) <S2SV_ModEnd> goto out_drop_lock ; <S2SV_ModStart> goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_access ) ; if ( error ) goto out_drop_unlock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if",0
607,<S2SV_ModStart> ue ; BUG_ON ( unfold_blk ( & tree_root ),0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_node ( enode ) ; fputc ( '\\n', fp",0
609,"<S2SV_ModStart> ) ; switch ( pc -> lengthComponentIdent ) { case 1 : if ( tolen == 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= 2 ; break ; case 2 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 5 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 6 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0",0
610,"<S2SV_ModStart> ; break ; case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) return ; break ; case NFSPROC_SETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) return ; break ; case NFSPROC_GETSTAT : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) return ; break ; case NFSPROC_RMDIR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) return ; break ; case NFSPROC_RMDIR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) return ;",0
611,"<S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> : ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : ND_PRINT ( ( ndo, "", <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x",0
612,"<S2SV_ModStart> -> userData, ctxt -> lineno, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> lineno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno <S2SV_ModStart>, ctxt -> colno, ctxt -> colno, ctxt -> colno, ctxt -> colno, ctxt -> colno, ctxt -> colno",0
613,<S2SV_ModStart> slow ; if ( msg -> msg_namelen ) * addr_len = sizeof ( * sin ) ;,0
614,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> trunc ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_type = EXTRACT_32BITS ( ( const rpki_rtr_pdu * ) tptr ) ; pdu_len = EXTRACT_32BITS ( ( const rpki_rtr_pdu * ) tptr ) ; if (! ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ) { break ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_len = EXTRACT_32BITS ( ( const rpki_rtr_pdu * ) tptr ) ; if (! pdu_type ||! pdu_len ) { break ; } if ( <S2SV_ModEnd> rpki_rtr_pdu_print ( n",0
615,"<S2SV_ModStart> int tagval ; if ( token ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } <S2SV_ModStart> ) ; if ( token ) { if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ;",0
616,"<S2SV_ModStart> = 0 ; register u_int <S2SV_ModEnd> data_size = ndo <S2SV_ModStart> int elt ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } cp += l ; l = labellen ( ndo, cp ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( i = * cp ++ ) & INDIR_MASK ) == INDIR_MASK ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ;",0
617,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE | XFS_ILOG_ADATA ) ; args -> valuelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen = valuelen ;",0
618,"<S2SV_ModStart> ) ; int rv ; rv = Socket_print ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd>, request,",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; exit ( 1 ) ; } child = copy_file ( src, dest ) ; if ( child < 0 ) errExit ( ""copy_file"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""chown"" ) ; if ( chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
620,"<S2SV_ModStart> flags ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> comp ) ; fcstats = kzalloc ( sizeof ( union bfa_port_stats_u ), GFP_KERNEL ) ; if ( fcstats == NULL ) { kfree ( fcstats ) ; return NULL ; } <S2SV_ModEnd> hstats -> tx_frames <S2SV_ModStart> fc. tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> link_failure",0
621,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; }",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } if (,0
623,<S2SV_ModStart> pte_unmap ( page_table ) ; lockdep_assert_held ( & mm -> mmap_sem ) ; <S2SV_ModStart> unlock ; } <S2SV_ModEnd> return VM_FAULT_SIGSEGV ;,0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> ) ) ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; env -> insn_aux_data = new_data ;",0
626,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_ident ) ; ND_TCHECK_16BITS ( & ip6 -> ip6_plen ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_hdr ) + EXTRACT_16BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_hdr ) + EXTRACT_16BITS ( & ip6 -> ip6_plen ) )",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> trunc)"" ) ) ; goto trunc ; }",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,<S2SV_ModStart> 0 ) ; if ( ( <S2SV_ModStart> occ0 % rowsize )!= 0 ) { TIFFErrorExt * tifp = & tifp -> tif_errors ; TIFFErrorExt * tifp = & tifp -> tif_errors ; TIFFErrorExt * tifp = & tifp -> tif_errors <S2SV_ModStart> 0 ) { TIFFErrorExt * tifp = & tifp -> tif_errors ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 0 ] ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 1 ] ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 2 ] ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 3 ] ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 3 ] ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 1 ] ; TIFFErrorExt * tifp = & tifp -> tif_errors [ 2 ] ; TIFFErrorExt * tifp = & tifp -> t,0
630,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { exif_log ( ne -> log, EXIF_LOG_CODE",0
631,<S2SV_ModStart> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if (,0
632,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
633,"<S2SV_ModStart> ; break ; case HA_ERR_NO_FILE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break",0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> int alloc = ( length? length : ( int ) strlen ( string ) ) + 1 ; char * ns = malloc ( alloc ) ; unsigned char in ; unsigned long hex ; CURLcode res ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { in = * string ; ptr = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } if ( olen ) * olen = strindex ; return ns <S2SV_ModEnd> ; } <S2SV_null>",0
635,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PF",0
636,"<S2SV_ModStart> cond_resched ( ) ; iov_iter_advance ( i, copied ) ; pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ; } while ( iov_iter_count ( i ) ) { index = pos >> PAGE_CACHE_SHIFT ; offset = ( pos & ( PAGE_CACHE_SIZE - 1 ) ) >> PAGE_CACHE_SHIFT ; bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; }",0
637,"<S2SV_ModStart> } if ( unlikely ( len < ring -> rx_buffersize ) ) { b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", len, ring -> rx_buffersize ) ; goto drop_recycle_buffer ; } desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot ) ; desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr,",0
638,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUT",0
639,"<S2SV_ModStart> |= SEEN ; if (! show_object ( obj, NULL, name, data ) ) continue ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OB",0
640,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags,",0
641,"<S2SV_ModStart> j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < width ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < height ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < zsize ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < zsize ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < npal ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; for ( j = 0 ; j < zsize ; j ++, dst += c -> framebuf_stride ) for ( i = 0 ; i < zsize ; i ++ ) memcpy ( dst + i * 3, transp, 3 ) ; dst",0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ] ; # ifndef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_GENERR ; }",0
644,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
645,"<S2SV_ModStart> timer ) ; mutex_lock ( & register_mutex ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> timer -> lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> timer -> lock ) ; udelay ( 10 ) ; } spin_unlock_irq ( & timeri -> timer -> lock ) ; } list_for_each_entry_safe ( slave, tmp, & timeri -> timer_list_head, open_list ) { spin_lock_irq ( & timeri -> timer -> lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> timer -> lock ) ; udelay ( 10 ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_CALLBACK ; } spin_unlock_irq ( & timeri -> timer -> lock ) ; mutex_unlock ( & register_",0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank>",0
647,"<S2SV_ModStart> ; const char * <S2SV_ModEnd> arch = info <S2SV_ModStart> arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", * info -> cpu ) ; r_asm_use ( r -> assembler, arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> return false ;",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> domain_device * dev, * n ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> disco_list_node, & port -> sas_port_list ) ; } list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_for_each_entry ( dev, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_for_each_entry ( dev, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> disco_list",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if (! netscreen_hex_dump ( wth -> fh, line, pkt_len, cap_int, & cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), & ( s -> s3 -> rrec ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), & ( s -> s3 -> rrec ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec ), s -> s3 -> rrec. seq_num ) return ( 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), & ( s -> s3 -> rrec ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> r",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image.,0
653,"<S2SV_ModStart> can_read_key : if ( key -> type -> validate ) { ret = - EOPNOTSUPP ; goto error ; } ret = key -> type -> validate ( key, buffer, buflen ) ; if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } <S2SV_ModEnd> error2 : key_put",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; if ( length > GetBlobSize ( image ) - GetBlobStart ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - GetBlobStart ( image ) - Get",0
656,"<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; if ( tmp > ( jas_ulonglong ) JAS_CAST ( jas_ulonglong ) JAS_CAST ( jas_ulonglong ) JAS_CAST ( jas_ulonglong ) JAS_CAST ( jas_ulonglong ) JAS_CAST ( jas_ulonglong ) JAS_CAST ( jas_ulonglong ) JAS_CAST ( jas_ulonglong <S2SV_ModEnd>, tmp )",0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> fadd. nocarry_mask ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_UNSUPPORTED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. nocarry_mask = ~ 0,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
659,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
660,"<S2SV_ModStart> ifnamsiz ] ; strncpy <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", var, iface ) ; flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", name, val, iface ) ; return - 1 ; } if ( access ( spath, F_OK )!= 0 ) return - 1 ; if ( access ( spath, F_OK )!= 0 ) return - 1 ; fp = fopen ( spath, ""w"" ) ; if (! fp ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) { flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s"", name, val, iface ) ; return - 1 ; }",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( * t &&! isspace ( * t ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while (! isspace ( * t ) ) t ++ ; while (! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc (,0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del (",0
663,"<S2SV_ModStart> * objp ) ; xdrs -> x_op = 0 ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) { ret = krb5_parse_name ( context, p, & pr ) ; if ( ret!= 0 ) return FALSE ; * objp = NULL ; break ; } if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) { ret = krb5_parse_name ( context, p, & pr ) ; if ( ret!= 0 ) return FALSE ; * objp = NULL ; break ; } if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; else * objp = NULL ;",0
664,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } if ( uipc_main. read_set >= uipc_main. max_fd ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> fd <S2SV_blank> (%d)"", uipc_main. max_fd ) ; result = select ( uipc_main. read_set, NULL, NULL, NULL ) ; if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> fd <S2SV_blank> (%d)"", uipc_main. max_fd ) ; continue ; } else if ( uipc_main. read_set >= uipc_main. max_fd ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> fd <S2SV_blank> (%d)"", uipc_main. max_fd ) ; continue ; }",0
665,"<S2SV_ModStart> return 1 ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_REQUEST ) { if ( dp -> dccps_role == DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_RESPOND ) { dccp_send_sync ( sk, dcb -> dccpd_seq",0
666,<S2SV_ModStart> msixcap ; assert ( msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 ) ; <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
667,"<S2SV_ModStart> ; upperdentry = d_find_alias <S2SV_ModEnd> ( dentry ) <S2SV_ModStart> dentry ) ; if ( upperdentry ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
668,<S2SV_ModStart> while ( isspace <S2SV_ModEnd> ( * p,0
669,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( sshpkt_get_cstring ( ssh, & pkalg, & alen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get",0
670,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer_t <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { vpx_read_bit_buffer_t <S2SV_ModEnd> data = vp9_rb_read_literal <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
671,"<S2SV_ModStart> ; for ( i = 0 ; i < ctx -> hdrmax ; i ++ ) if ( mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( mx_alloc_memory ( ctx ) ; ctx -> msgcount ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] -> data = mutt_str_strdup ( line ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> msgcount ++ ; ctx -> hdrs [ i ] -> refno = index - 1 ; pop_data -> clear_cache = true ; ctx -> hdrs [ i ] -> index = index - 1 ; return 0 ; }",0
672,"<S2SV_ModStart> NULL ) { pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" ) ; retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPk",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec * prec = comp -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } for ( bandno = 0 ; bandno < reslevel -> nbands ; bandno ++ ) { Jpeg2000Prec * prec = comp -> band + bandno ; av_freep ( & band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } for ( bandno = 0 ; bandno < reslevel -> nbands ; bandno ++ ) { Jpeg2000Prec * prec = comp -> band + bandno ; av_freep ( & prec -> zerobits ) ; av_freep ( & band -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } for ( precno = 0 ; precno < reslevel -> num_precinct,0
674,"<S2SV_ModStart> ( ctxt -> validate ) && ( ctxt -> vctxt. error == NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UN",0
675,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> -> ir_v6_rmt_addr ; rcu_read_unlock ( ) ; <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( <S2SV_ModStart> np -> tclass, rcu_dereference ( rcu ) ) ) ; rcu_read_unlock ( ) ;",0
676,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMP * cpi, const MV_REFERENCE_FRAME * sf ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart>. lossless ) { return ONLY_4X4 ; } else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> else if ( sf -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count",0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
678,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) { <S2SV_ModEnd> printval = DNAN <S2SV_ModStart> 0 ) {,0
679,"<S2SV_ModStart> sh_size < 1 || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size || shdr -> sh_name > bin -> ehdr. e_shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" )",0
680,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else { return - 1 ; } },0
681,"<S2SV_ModStart> ; # endif if ( ( i = cdf_read_scn ( & info, & h, & scn ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SCN"" ; goto out0 ; } if ( ( i = cdf_read_sst ( & info, & h, & sst, & scn ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SST"" ; goto out1 ; } if ( ( i = cdf_read_ssat ( & info, & h, & sat, & ssat, & scn, CDF_SHORT_SEC_SIZE ( & h ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SSAT"" ; goto out2 ; } # ifdef CDF_DEBUG cdf_dump_sat ( ""SSAT"", & ssat, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif if ( ( i = cdf_read_dir ( & info, & h, & dir, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out3 ; }",0
682,"<S2SV_ModStart> ; size_t sz = ( size >> PAGE_SHIFT ) + 2 ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY )",0
683,"<S2SV_ModStart>! eof ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } <S2SV_ModStart>! eof ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
686,<S2SV_ModStart> -> _eip ; if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; } if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; } if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; } if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; } rc = X86EMUL_CONTINUE ; goto out ; } if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; } if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; } if ( ctxt -> dst. val!= ctxt -> src. val ) { rc = X86EMUL_CONTINUE ; goto out ; },0
687,"<S2SV_ModStart> url ) ; if (! mutt_imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ) { mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; FREE ( & token. data ) ; return ; } <S2SV_ModStart> name ) ; if (! mutt_imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ) { mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; FREE ( & token. data ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; FREE ( & token. data ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) { mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; FREE ( & token. data ) ; }",0
688,"<S2SV_ModStart> * * p <S2SV_ModEnd>, void * <S2SV_ModStart> * th ; void * dp, * dend ; int dlen ; char is_enc ; struct ceph_crypto_key old_key ; void * tp, * tpend <S2SV_ModEnd> ; struct ceph_timespec <S2SV_ModStart> ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto out ; ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!=",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, UINT32_MAX ) ) ) ;",0
690,"<S2SV_ModStart> -> init_msg ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_INVALID_PARAMETER ) ; goto err ; }",0
691,"<S2SV_ModStart> b ) ; if ( b -> manager -> event ) { r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; r = log_debug_errno ( SYNTHETIC_ERRNO ( EADDRNOTAVAIL ), ""Device <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; if ( r < 0 ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> expose <S2SV_blank> keys <S2SV_blank> or <S2SV_blank> switches <S2SV_blank> relevant <S2SV_blank> to <S2SV_blank> us, <S2SV_blank> ignoring."", p ) ; r = log",0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
693,"<S2SV_ModStart>. entry ; * field_rtrn = NULL ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = NULL ; return ( * index_rtrn!= NULL ) ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. field ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; case EXPR_FIELD_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> field_ref. field ) ; * index_rtrn = NULL",0
694,<S2SV_ModStart> lun ) { list_del_init <S2SV_ModEnd> ( & cmd,0
695,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c",0
696,<S2SV_ModStart> = 0 ; struct ip_sockaddr_storage addr ; <S2SV_ModStart> = 0 ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> { if ( my_sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count, o_row_count ) == 3 || my_sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || my_sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || my_sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count, o_row_count ) == 3 || my_sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || my_sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o",0
700,<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_Palette. NumOfEntries ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) WPG_Palette. NumOfEntries = WPG_Palette. NumOfEntries ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) WPG_Palette. StartIndex = WPG_,0
701,<S2SV_ModStart> ctxt ) { # ifdef CONFIG_X86_EMUL_HIGHBITDEPTH if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) { if ( ctxt -> b == 0xe2 || ctxt -> eflags & X86EMUL_EFLAGS_HIGHBITDEPTH ) {,0
702,,1
703,"<S2SV_ModStart> 0 ) ; if ( res ) { ret = devm_ioremap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_of_clk_add_hw_provider ( & pdev -> dev, hi3660_stub_clk_hw_get, hi3660_stub_clks ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; ret = devm_iounmap ( dev, res ->",0
704,"<S2SV_ModStart> case SEEK_SET : psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> case SEEK_CUR : psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> case SEEK_END : psf_fseek ( psf, <S2SV_ModEnd> ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; <S2SV_ModStart> case SEEK_CUR : psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, SEEK_SET <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, whence <S2SV_ModStart> return ; } ; psf_fseek ( psf, <S2SV_ModEnd> position, SEEK_CUR <S2SV_ModStart> case SEEK_SET : psf_fseek ( psf, <S2SV_ModEnd> ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ;",0
705,"<S2SV_ModStart> out_mutex ; } inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; handle = ext4_journal_start ( handle, EXT4_HT_TRUNCATE, credits",0
706,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; midi_size -= 4 ; if ( tmp_val!= 6 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ;",0
708,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = udf_read_tagged <S2SV_ModStart> TAG_IDENT_LVD ) ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> numPartitionMaps ) ) ; if ( ret ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else",0
709,"<S2SV_ModStart> long n ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! ( info = bmp_getinfo ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } if (! ( info = bmp_info ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } if (! ( info = bmp_info ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> information\\n"" ) ; return 0 ; } if (! ( info = bmp_getinfo ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank>",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,"<S2SV_ModStart> ) IHEVCD_SUCCESS ) ; if ( ps_cabac -> u4_ofst >= ps_bitstrm -> u4_nxt_word ) { ps_cabac -> u4_ofst = 0 ; ps_cabac -> u4_range = ( UWORD32 ) ps_bitstrm -> u4_nxt_word - ps_bitstrm -> u4_cur_word ; ps_cabac -> u4_range = ( UWORD32 ) 510 << RANGE_SHIFT ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm -> u4_nxt_word, 9 ) ; ps_cabac -> u4_range = ( UWORD32 ) 510 << RANGE_SHIFT ; BITS_GET ( ps_cabac -> u4_ofst, ps_bitstrm -> u4_bit_ofst, ps_bitstrm -> u4_cur_word, ps_bitstrm",0
712,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ;",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT <S2SV_ModEnd> ; media_device_kpad_to_upad ( <S2SV_ModStart> entity ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & pad ) ) return - EFAULT ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink, & pad ) ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) ) return - EFAULT ; link. flags = entity -> links [ l ]. flags ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [",0
714,<S2SV_ModStart> p_end ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_,0
715,"<S2SV_ModStart>, extent ; size_t width, height ; size_t <S2SV_ModStart> height, length ; if ( sun_info. type == RT_ENCODED ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( sun_info. magic == 0x59a66a95 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; sun_info. width = sun_info. width ; sun_info. height = sun_info. height ; sun_info. depth = sun_info. depth ; sun_info. length = sun_info. length ; sun_info. type = sun_info. type ; sun_info. maplength = sun_info. maptype ; sun_info. magic = 0x59a66a95 ; sun_info. magic = 0x59a66a95 ; sun_info. width = sun_info. height ; sun_info. depth = sun_info. depth ; sun_info. length = sun_info. length ; sun_info. type = sun_info. type ; sun_info. maplength = sun_info. ma",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, hdb_entry_ex * krbtgt <S2SV_ModEnd>, krb5_principals spp <S2SV_ModStart> client_principal, hdb_entry_ex * krbtgt <S2SV_ModEnd>, krb5_enctype krbtgt_etype <S2SV_ModStart> == TRPOLICY_ALWAYS_HONOUR ) # define GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSIT_HONOUR_CHECK ( config -> trpolicy == TRPOLICY_ALWAYS_HONOUR_CHECK ) # define GLOBAL_ALLOW_DISABLE_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # define GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALLOW_DISABLE_PER_PRINCIP",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,<S2SV_ModStart> ; newinet -> inet_opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ;,0
719,<S2SV_ModStart> struct xmlparser parser ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlend = buffer ; parser. xmlstarteltfunc = NameValueParserEndElt ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. xmlendeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. xmlendeltfunc = NameValueParserEndElt ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. xmlendeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ;,0
720,"<S2SV_ModStart>!= 0 ) csum = csum_partial ( skb_transport_header ( skb ) + tlen, offset, 0 ) ; if (! msg -> msg_namelen ) { msg -> msg_namelen = 0 ; msg -> msg_namelen = 0 ; return ; } <S2SV_ModStart>, csum_partial ( skb_transport_header ( skb ) + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart> 0 ) ) ; if (! msg -> msg_namelen ) { msg -> msg_namelen = 0 ; return ; } <S2SV_ModEnd> put_cmsg ( msg",0
721,"<S2SV_ModStart> pfn ) ; kvm_iommu_put_pages ( kvm, slot -> base_gfn, slot -> npages ) ; kvm_iommu_unmap_pages ( kvm, slot -> base_gfn, slot -> npages ) ; kvm_iommu_unmap_pages ( kvm, slot -> base_gfn, slot -> npages ) ; gfn += page_size >> PAGE_SHIFT ; r = 0 ; if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; kvm_iommu_unmap_pages ( kvm, slot -> base_gfn, slot -> npages ) ; kvm_iommu_unmap_pages ( kvm, slot -> base_gfn, slot -> npages ) ; kvm_iommu_unmap_pages ( kvm, slot -> base_gfn, slot -> npages ) ; kvm_iommu_unmap_pages ( kvm, slot -> base_gfn, slot -> npages )",0
722,"<S2SV_ModStart> ], cmd -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len > sizeof ( b ) - ( 6 - cmd -> msg_len ) ) return - EINVAL ;",0
723,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_lock_irq,0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] << 24 ) ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) | ( buffer [ 1 ] << 16 ) | ( buffer [ 2 ] << 8 ) | ( buffer [ 0 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ) | ( buffer [ 0 ] << 16 ) | ( buffer [ 1 ] << 8 ) | ( buffer [ 2 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
725,"<S2SV_ModStart> free_nid * i <S2SV_ModEnd> ; struct nat_entry <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return false ; } spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; <S2SV_ModEnd> flags -> deblocking_level <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> color_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> color_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # endif,0
727,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely (! RING_GET_REQUEST ( & vif -> tx, cons ) ) ) { netdev_err ( vif -> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extras [ extra. type - 1 ], & extra, sizeof ( extra ) ) ;",0
728,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_reserved = 0 ; hdr -> sadb_msg_reserved2 = 0 ; hdr -> sadb_msg_reserved3 = 0 ; hdr -> sadb_msg_reserved4 = 0 ; hdr -> sadb_msg_reserved5 = 0 ; hdr -> sadb_msg_reserved5 = 0 ; hdr -> sadb_msg_reserved5 = 0 ; hdr -> sadb_msg_reserved5 = 0 ; hdr -> sadb_msg_reserved5 = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_reserved3 = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_reserved5 = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_reserved5 = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_reserved5 = ( sizeof ( struct sadb_msg ) / sizeof,0
729,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
730,"<S2SV_ModStart> 1 ; defaultoptions ( & h ) ; luaL_settop ( L, 2 ) ; while ( * fmt ) { int opt = * fmt ++ ; size_t size = optsize ( L, opt, & fmt ) ; pos += gettoalign ( pos, & h, opt, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 'd' : { double d ; memcpy ( & d, data + pos, size ) ; correctbytes ( & d, sizeof ( d ), h. endian ) ; lua_pushnumber ( L, d ) ; break ; } case 'e' : { lua_Number e ; memcpy ( & e, data + pos, size ) ; correctbytes ( & e, sizeof ( e ), h. endian ) ; lua_pushnumber ( L, e ) ; break ; } case 'f' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes",0
731,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )",0
732,"<S2SV_ModStart> ; int n ; if (! body -> data ) { oz_err ( "" <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
733,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
734,"<S2SV_ModStart> { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; exit ( 1 ) ; } pid_t rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == -",0
735,"<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_get_literal_count ( mailbox, & litlen )!= 0 ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) {",0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } neh = path [ depth ]. p_hdr ; if ( neh ) { EXT4_ERROR_INODE ( inode, ""p_neh <S2SV_blank>!= <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( neh ) { EXT4_ERROR_INODE ( inode, ""p_neh <S2SV_blank>!= <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( neh ) { EXT4_ERROR_INODE ( inode, ""p_neh <S2SV_blank>!= <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( neh ) { EXT4_ERROR_INODE ( inode, ""p_neh <S2SV_blank>!= <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; }",0
738,<S2SV_ModStart> ; if ( p_num_sfb [ LOW ]!= 0 && p_num_sfb [ LOW ]!= 0 ) { ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb ] ] = p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb ] ] ; ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb ] ] = p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer -> p_num_sfb [ ptr_hbe_txposer ->,0
739,"<S2SV_ModStart> ] ; # if 0 cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 6 ] ) ; image_w = get_ushort ( & tga [ 8 ] ) ; image_h = get_ushort ( & tga [ 9 ] ) ; # endif <S2SV_ModStart> # if 0 x_origin = get_ushort ( & tga [ 9 ] ) ; y_origin = get_ushort ( & tga [ 10 ] ) ; image_w = get_ushort ( & tga [ 11 ] ) ; image_h = get_ushort ( & tga [ 13 ] ) ; pixel_depth = tga [ 15 ] ; image_desc = tga [ 16 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * flip_image = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; }",0
740,<S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
741,"<S2SV_ModStart> tp ) { u64 rem ; <S2SV_ModStart> CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { rem = div_u64_rem ( cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem >= 0 ) rem = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem >= 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; else tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; if ( rem >= 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_nsec ) ; if ( rem >= 0 ) tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC, & tp -> tv_sec ) ; else tp -> tv_sec = div_u64_rem ( rem, NSEC_PER_SEC,",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; luaLuaModule * lua_module = NULL ; lua_authz_provider_spec * prov_spec = parsed_require_line ; int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, NULL, 0, ""authz <S2SV_blank> provider"" ) ; if ( spec == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file",0
744,"<S2SV_ModStart> * prev ; <S2SV_ModEnd> error = security_mmap_addr <S2SV_ModStart> address ) ; if ( error ) return error ; prev = vma -> vm_prev ; if (! ( prev -> vm_flags & VM_GROWSDOWN ) && ( prev -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) { if ( address - prev -> vm_start < stack_guard_gap ) return - ENOMEM ; } <S2SV_ModEnd> vma -> vm_pgoff <S2SV_ModStart> grow ) ; if (! ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) ) { error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { spin_lock ( & mm -> page_table_lock ) mm -> locked_vm += grow ; vm_stat_account ( mm, vma -> vm_flags, grow ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; perf_event_mmap ( vma",0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( inode, & mode, & acl ) ; error = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( error ) return error ; error = xfs_set_mode ( inode, mode, & acl ) ; if ( error ) return error ; error = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( error <= 0 ) { <S2SV_ModEnd> acl = NULL <S2SV_ModStart> return error ; } <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> # endif if ( mountflags & MS_REMOUNT ) { INFO ( ""mounting <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return 0 ; } if ( mountflags & MS_BIND ) { INFO ( ""remounting <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } # ifdef HAVE_STATVFS if ( statvfs ( fsname, & sb ) == 0 ) { if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ;",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> info -> si_overrun <S2SV_ModStart> -> si_overrun += <S2SV_ModEnd> timr -> it_overrun_last,0
749,"<S2SV_ModStart>! proto_end ) { printk ( KERN_ERR ""Malformed <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; printk ( KERN_ERR ""Malformed <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; return - 1 ; } cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; colon = strchr ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { printk ( KERN_ERR ""Malformed <S2SV_blank> URL: <S2SV_blank> %s\\n"", cp ) ; return - 1 ; } if ( cp == url ) { printk ( KERN_ERR ""Malformed <S2SV_blank> URL: <S2SV_blank> %s\\n"", url ) ; return - 1 ; }",0
750,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
751,<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> read && <S2SV_ModEnd> ret > 0 <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd> ( io_data -> <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
752,<S2SV_ModStart> ; if ( skb_is_gso ( skb ) ) { struct ip_options_rcu * opt_rcu = & opt -> opt ; struct ip_options_rcu * opt_rcu = rcu_dereference ( IPCB ( skb ) -> opt ) ; struct ip_options_rcu * opt_rcu = rcu_dereference ( IPCB ( skb ) -> opt. rcu ) ; opt_rcu = rcu_dereference_rcu ( opt_rcu ( opt ) ; IPCB ( skb ) -> flags &= ~ IPSKB_FORWARDED ; opt_rcu = rcu_dereference ( opt_rcu ) ; opt_rcu = rcu_dereference ( IPCB ( skb ) -> opt ) ; if (! opt_rcu ) opt_rcu = rcu_dereference_rcu ( opt_rcu ) ; opt_rcu = rcu_dereference_rcu ( opt_rcu ) ; IPCB ( skb ) -> flags &= ~ IPSKB_FORWARDED ;,0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; if (! new_o ) { pr_info ( ""trusted_key: <S2SV_blank> datablob <S2SV_blank> failed <S2SV_blank> (%d)\\n"", datalen ) ; kfree ( new_o ) ; goto out ; } new_p = trusted_payload_alloc ( key ) ; if (! new_p ) { ret = - ENOMEM ; goto out ; } datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; dump_payload ( p ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump",0
755,<S2SV_ModStart> } v |= ( ( jas_uint_fast32_t ) <S2SV_ModEnd> c << 24,0
756,"<S2SV_ModStart> ; while ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { if ( skb -> len < 4 ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( skb -> len < 4 ) { kfree_skb ( skb ) ; continue ; } dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } }",0
757,"<S2SV_ModStart> out_free ; } kvm_put_memory_region ( kvm, mem ) ; kvm_put_memory_region ( kvm, mem ) ;",0
758,"<S2SV_ModStart>!= NULL ) { rcu_read_unlock ( ) ; <S2SV_ModStart> indev!= NULL ) { newrange. flags = NF_NAT_RANGE_PROTO_SPECIFIED ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; } else { memset ( & newrange. min_addr, 0, sizeof ( newrange. min_addr ) ) ; memset ( & newrange. max_addr, 0, sizeof ( newrange. max_addr ) ) ; newrange. flags = NF_NAT_RANGE_PROTO_SPECIFIED ; newrange. flags = NF_NAT_RANGE_MAP_IPS ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. min ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; }",0
759,"<S2SV_ModStart> fdt ) ; if ( base >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >=",0
760,"<S2SV_ModStart> &&! ( config -> qmode & QMODE_IGNORE_LENGTH ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; return WAVPACK_SOFT_ERROR ; } if ( config -> qmode & QMODE_IGNORE_LENGTH ) { error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize",0
761,"<S2SV_ModStart> ; if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) - listLength ( server. slaves ), listLength ( server. clients ) <S2SV_ModEnd> ) ; closeTimedoutClients <S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. slaves ) - listLength ( server. clients ) - listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) - listLength ( server. slaves ) ) ; closeTimedoutClients ( ) ; }",0
763,"<S2SV_ModStart> if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_DETACHED )",0
764,"<S2SV_ModStart> int ret, wo <S2SV_ModEnd> ; if ( <S2SV_ModStart> EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret ;",0
765,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ;",0
766,<S2SV_ModStart> book -> dim && i < n,1
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; kfree ( new_root_item ) ; path = NULL ; if (! path ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir_item ) { ret = - ENOMEM ; goto root_item_alloc_fail ; } dir_item = kmalloc ( sizeof ( * dir_item ), GFP_NOFS ) ; if (! dir",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) ; list_del_init ( & u -> link ) ; unix_tot_inflight -- ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,"<S2SV_ModStart> channel_map!= NULL ) { size_t chanmap_size = map_info -> num_channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > psf -> sf. channels ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } else { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } <S2SV_ModEnd> return 0 ;",0
771,"<S2SV_ModStart> { if ( <S2SV_ModEnd> check_scale_factors ( other_w <S2SV_ModStart> other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4 ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y =",0
772,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ; if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( t -> verdict < - NF_MAX_VERDICT - 1 && unconditional ( & e -> ipv6 ) ) || visited ) { if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 )",0
774,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { sock_kfree_s ( sk, opt, opt -> tot_len ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; } <S2SV_ModEnd> if ( opt <S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
777,"<S2SV_ModStart> = 0 ; STACK_OF ( CMS_SignerInfo ) * sinfos = NULL, * tmpin = NULL ; if ( sk_CMS_SignerInfo_num ( sinfos ) <= 0 ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_SIGNERS ) ; goto err ; } sinfos = CMS_get0_SignerInfos ( cms ) ; if ( sk_CMS_SignerInfo_num ( sinfos ) <= 0 ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_SIGNERS ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_",0
778,<S2SV_ModStart> ; src_info. ipi6_offset = np -> mcast_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_pf_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_ops,0
780,<S2SV_ModStart> cs_flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
781,<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> & info ; <S2SV_ModEnd> return masq_device_event (,0
782,"<S2SV_ModStart> ( current -> mm <S2SV_ModEnd> ) { leave_mm <S2SV_ModStart> ( smp_processor_id ( ) ) ; <S2SV_ModStart> ( smp_processor_id ( ) ) ; flush_tlb_others ( current -> active_mm, mm, start, end ) ; <S2SV_ModEnd> trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN <S2SV_ModStart> ) ; goto out ; } if ( ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = tlb_single_page_flush_ceiling ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; local_flush_tlb ( ) ; } else { for ( addr = start ; addr < end ; addr += PAGE_SIZE ; addr += PAGE_SIZE ) { count_vm_tlb_event ( NR_TLB_LOCAL_ONE ) ; __flush_tlb_single ( addr ) ; }",0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; }",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ) { char * ret ; char * temp = malloc ( strlen ( temp ) + 10 ) ; if ( fp == NULL ) return NULL ; for ( ; ; ) { temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == EOF ) break ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( ret == NULL ) return NULL ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( ret == NULL ) return NULL ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) break ; if ( temp [ i ] == EOF ) break ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( ret == NULL ) return NULL ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; if ( ret == NULL ) return NULL,0
785,<S2SV_ModStart> task -> slow_task <S2SV_ModEnd> ) ) return,0
786,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( fp, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if ( ( c = strrchr ( dst_name, '.' ) ) && ( strncmp ( c, "".pdf"", 4 ) == 0 ) ) * c = '\\0' ; strcat ( dst_name, "".summary"" ) ; if (! ( dst = fopen ( fp, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } if ( ( c = strrchr ( dst_name, '.' ) ) && ( strncmp ( c, "".pdf"", 4 ) == 0 ) ) * c = '\\0' ; strcat ( dst_name, "".summary"" ) ; if (! ( dst = fopen ( fp, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
787,"<S2SV_ModStart> = 0 ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } if ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } if ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error ; } <S2SV_ModStart> NULL ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; goto error",0
788,<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_NULL : { plist_data_t data = plist_new_plist_data ( ) ; data -> type =,0
789,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree",0
790,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> chan_mutex ) ; <S2SV_ModStart> dead = 1 ; mutex_unlock ( & pch -> chan_mutex ) ;,0
791,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } else if (! di ) { ret = - ENODATA ; goto out ; } <S2SV_ModEnd> ret = btrfs_delete_one_dir_name <S2SV_ModStart> trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, b",0
792,"<S2SV_ModStart> 0xbf ) return 1 ; if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return ALOGE ( ""b/26366256"" ) ; } <S2SV_ModStart> 1 ; } if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return ALOGE ( ""b/26366256"" ) ; return 1 ; } if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return ALOGE ( ""b/26366256"" ) ; } <S2SV_ModStart> 1 ; } if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return ALOGE ( ""b/26366256"" ) ; return 1 ; } if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return ALOGE ( ""b/26366256""",0
793,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart>, plane, vpx_foreach_transformed_block_in_plane <S2SV_ModEnd>, & arg",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; p = key -> payload. data [ 0 ] ; if ( p -> key_len > UINT_MAX - p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> migratable ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> key_len > UINT_MAX - p -> key_len ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> migratable ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", p -> migratable ) ; kzfree ( new_p ) ; goto out ;",0
796,<S2SV_ModStart> ++ ; NEED_IP <S2SV_ModEnd> ( t + <S2SV_ModStart> endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_ModStart> + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ip_end ) ; ip = ip_end ; } else # endif { <S2SV_ModStart> + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ip_end <S2SV_ModEnd> ) ; } <S2SV_ModStart> endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { do { * op ++ = * ip ++ ; } while ( ip < ip_end ) ; ip = ip_end ; } else # endif { <S2SV_ModStart> + 3 ) ; do { * op ++ = * ip ++ ; } while ( ip < ip_end ) ; op += 3 ; copy_literal_run : # if defined ( CONFIG_HAVE_EFFICIENT_UN,0
797,"<S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModStart> - ENOEXEC ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; }",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> (! vmx_msr_bitmap_nested ) goto out6 <S2SV_ModEnd> ; vmx_io_bitmap_a = <S2SV_ModStart> (! vmx_io_bitmap_a ) goto out7 ; vmx_io_bitmap_b = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_io_bitmap_b ) goto out8 ; vmx_msr_bitmap_legacy_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out7 ; vmx_msr_bitmap_longmode_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_longmode_x2apic ) goto out8 ; vmx_msr_bitmap_nested = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bit,0
800,<S2SV_ModStart> ; if ( ( shdr -> sh_flags & SHF_ALWAYS ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_RELATIVE ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags & SHF_RELATIVE ) && ( shdr -> sh_flags & SHF_NOFOLLOW ) && ( shdr -> sh_flags &,0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (,0
802,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,<S2SV_ModStart> -= INDENT_INCR ; } else if ( indent == - 1 ) { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) tbl -> indent += INDENT_INCR ; } else { mode -> indent_level -- ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) tbl -> indent -= INDENT_INCR ; } <S2SV_ModStart> == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ;,0
806,"<S2SV_ModStart> tail ; if ( e > b + CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) return 0 ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u""",0
807,"<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyssa += ( N ) ) int yyssp = ( N ) ) ; yytype_int16 * yyvs = yyvsa ; yytype_int16 * yyssp = yyvs ; yytype_int16 * yyvs1 = yyss ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, & yyvs1, & yysize * sizeof ( * yyssp ), & yystacksize ) ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyssa += ( N ) ) int yyssp = ( N ) ) ; yytype_int16 * yyvs = yyvsa ; yytype_int16 * yyssp = yyss ; yytype_int16 * yyvs = yyvs ; yytype_int16 * yyss1 = yyss ; yytype_int16 * yyss1 = yyss ; yytype_int16 * yyvs1 = yyvs ; yytype_int16 *",0
808,"<S2SV_ModStart> ib ] ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. use_highbitdepth ) { vpx_strict_quantize_b ( b, d ) ; } else { vpx_strict_quantize_b ( b, d ) ; } # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context ->",0
809,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; } strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, ""lib"", sizeof ( buff ) - 1 ) ; strncat ( buff, """,0
810,"<S2SV_ModStart> ; if ( test_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
811,<S2SV_ModStart> : { struct hci_filter_desc * f = <S2SV_ModEnd> hci_pi ( sk <S2SV_ModStart> hci_pi ( sk ) -> filter ; uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; uf. type_mask [ 1 ] = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. type_mask [ 0 ] = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; uf. type_mask [ 0 ] = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. type_mask [ 0 ] = * ( ( u32 * ) f -> type_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f ->,0
812,"<S2SV_ModStart> ) ( data_end - data ) ; if ( n > ( int ) ( data_end - data ) ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
813,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
814,"<S2SV_ModStart> peer. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
815,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EBUSY ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Invalid <S2SV_blank> cc0 <S2SV_blank> (%d)"", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user\\n"", __func__ ) ; goto out_unlock ; } if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> owned_by_user\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : bh_unlock_sock ( sk <S2SV_ModEnd> ) ; sctp_association_put",0
818,"<S2SV_ModStart> size_t input_size, yr_int_flags_t <S2SV_ModEnd> flags, RE_MATCH_CALLBACK_FUNC <S2SV_ModStart> { action = ACTION_NONE <S2SV_ModEnd> ; break ; <S2SV_ModStart> } # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else character_size = 1 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } <S2SV_ModStart> ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ;",0
819,"<S2SV_ModStart>, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart> returnintra ) { BLOCK * b = & x -> block [ 0 ] ; BLOCKD * d = & x -> e_mbd. block [ 0 ] ; BLOCKD * xd = & x -> e_mbd. block [ 0 ] ; BLOCKD * xd = & x -> e_mbd. block [ 0 ] ; BLOCKD * xd2 = & x -> e_mbd. block [ 0 ] ; unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING mode_mv = best_ref_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DEN",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_CPUID ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm,",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; h -> hdr -> magic [ 0 ] = h -> hdr -> magic [ 1 ] ; h -> hdr -> magic [ 1 ] = '0' ; h -> hdr -> magic [ 2 ] = '0' ; h -> hdr -> magic [ 3 ] = '0' ; h -> hdr -> magic [ 4 ] = '0' ; h -> hdr -> magic [ 5 ] = '0' ; h -> hdr -> magic [ 6 ] = '0' ; h -> hdr -> magic [ 7 ] = '0' ; h -> hdr -> magic [ 8 ] = '0' ; h -> hdr -> magic [ 9 ] = '0' ; h -> hdr -> magic [ 10 ] = '0' ; h -> hdr -> magic [ 11 ] = '0' ; h -> hdr -> magic [ 12 ] = '0' ; h -> hdr -> magic [ 13 ] = '0' ; h -> hdr -> magic [ 14 ] = '0' ; h -> hdr -> magic [ 15 ] = '0' ; h -> hdr ->,0
822,"<S2SV_ModStart>, const cdf_stream_t <S2SV_ModEnd> * sst, <S2SV_ModStart> break ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) ==",0
823,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc <S2SV_ModEnd>, u1_seq_parameter_set_id ; <S2SV_ModStart> ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", i2_max_frm_num ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", i2_max_frm_num ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", i2_max_frm_num ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", i2_max_frm_num ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", i2_max_frm_num ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> max_frm_num"", i2_max_frm_num )",0
824,"<S2SV_ModStart> ) ; err |= put_user ( length, & up -> length ) ; if ( err ) return - EFAULT ;",0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ) { VP9_COMP <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( params <S2SV_ModStart> NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> svc. lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ;",0
826,"<S2SV_ModStart> ) ) ; if ( prev == NULL ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; goto err ; } if ( prev == NULL ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; if ( prev == NULL ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6",0
827,<S2SV_ModStart> out ) { TIFF_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
828,"<S2SV_ModStart> a ) { struct stat st ; int r ; if (! ( a -> flags & ARCHIVE_EXTRACT_LSTAT ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } r = lstat ( a -> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot",0
829,"<S2SV_ModStart> ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; } } umask ( cmask ) ; INFO ( ""Populating <S2SV_blank> container <S2SV_blank> /dev"" ) ; if (! dir_exists ( path ) ) { ERROR ( ""Error <S2SV_blank> calculating <S2SV_blank> container <S2SV_blank> /dev <S2SV_blank> location"" ) ; return 0 ; } for ( i = 0 ; i < sizeof ( lxc_devs ) / sizeof ( lxc_devs [ 0 ] ) ; i ++ ) { const struct lxc_devs * d = & lxc_devs [ i ] ; ret = snprintf ( path, MAXPATHLEN, ""%s/dev/%s"", d -> name, d -> maj ) ; if ( ret < 0 || ret >= MAXPATHLEN ) return - 1 ; ret = safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank>",0
830,"<S2SV_ModStart> int link_count ; struct indirectEntry * ie ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> indirectICB. extLength && udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> inode\\n"", inode -> i_ino ) ; make_",0
831,"<S2SV_ModStart> ; const TX_SIZE tx_size_uv = mbmi -> tx_size_uv ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int index = shift_y ; * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; * left_y |= left_prediction_mask_uv",0
832,"<S2SV_ModStart> dst_size ) { const uint16_t namelen = ff_amf_tag_size ( data, data_end ) ; int <S2SV_ModEnd> len ; while <S2SV_ModStart> data < data_end ) { if ( len >= data_end - data ) return - 1 ; data += len ; } if ( data_end - data < 3 ) return - 1 ; data ++ ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size < 0 || size >= data_end - data ) return - 1 ; data += size ; if (! memcmp ( data - size, name, namelen ) ) { break ; } if ( size < 0 || size >= data_end - data ) return - 1 ; data += size ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { break ; case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf (",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1",0
834,"<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> get_config ( vdev <S2SV_ModEnd>, vdev ->",0
835,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return TIFF <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_daddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_saddr ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr <S2SV_ModStart> -> inet_saddr ; inet_opt = rcu_dereference_protected ( inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl <S2SV_ModEnd> ; pid_t <S2SV_ModStart> instance ) ; sprintf ( s_path, ""%s%s%d"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance ) ; sprintf ( c_path, ""%s%s%d_C_%lu"", HSM_FM_SCK_PREFIX, mgr_prefix, hdl -> instance, ( long unsigned ) pid ) ; if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( *",0
840,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ;",0
842,<S2SV_ModStart> ; if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ]!= sizeof ( struct berval ) ) { err = ENOMEM ; goto cleanup ; } if ( code -> key_data_type [ 0 ]!= KRB5_KDB_SALTTYPE_NORMAL || code -> key_data_length [ 0 ],0
843,"<S2SV_ModStart> OP_JUMP ) ; if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } else { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ;",0
844,"<S2SV_ModStart> { if ( l_i < 3 ) { LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( io_generated_code, LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR, LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG_ERROR ( LIBXSMM_LOG",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> stream s ; RD_BOOL <S2SV_ModEnd> is_fastpath ; uint8 <S2SV_ModStart> return False ; result = mcs_parse_header ( s, MCS_CONNECT_RESPONSE, & length ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_RESULT, & length ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ;",0
847,<S2SV_ModStart> ; if ( stkt_server!= NULL ) { stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; } stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_server -> entries [ st_idx ] = NULL ; stkt_,0
848,<S2SV_ModStart> ':' ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FFF ) ) || ( ( c >= 0x218F ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0x10000 ) && ( c <= 0x10000 ) ) || ( ( c >= 0x10000 ) && ( c <= 0x10000 ) ) ) || ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ) || ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ) || ( ( c >= 0x10000 ) && ( c <= 0x10000 ) ) || ( ( c >= 0x10000 ) && ( c <= 0x10000 ) ) || ( ( c >= 0x10000 ) && ( c <= 0x10000 ) ) || ( ( c >= 0x10000 ) && ( c <= 0x10000 ) ),0
849,"<S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> ret ) { dev_err ( & pf -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> ret ) { dev_err ( & pf -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) <S2SV_ModStart> -> pdev -> dev <S2SV_ModEnd>, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans <S2SV_blank> macvlans <S2SV_blank> macvlans\\n"" ) ; return ret ; }",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> ; if ( unlikely ( extent. count > map -> nr_extents ) ) { ret = - EINVAL ; goto out ; } if ( extent. lower_first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> out ; } if ( unlikely ( extent. count > map -> nr_extents ) ) { ret = - EINVAL ; if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. lower_first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. lower_first > map -> nr_extents ) { ret = - EINVAL ; if ( extent. lower_first > map -> nr_extents ) { ret = - EINVAL ; goto out ; } if ( extent. count > map -> nr_extents ) { ret = - EINVAL ;,0
852,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok",0
853,"<S2SV_ModStart> { smb_ofile_t * <S2SV_ModEnd> of = NULL <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> lf_mic ) { memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> mode_info_context, pbi -> mode_info_context, sizeof ( pbi -> mode_info_context ) ) ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> corrupted ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> corrupted ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> mode_info_context, pbi -> mode_info_context, sizeof ( pbi -> mode_info_context ) ) ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> mode_info_context, pbi -> mode_info_context, sizeof ( pbi -> mode_info_context ) ) ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> corrupted ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> corrupted ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> corrupted ; memcpy <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> -> mode_info_context,",0
856,<S2SV_ModStart> = AF_TIPC ; <S2SV_ModEnd> addr -> addrtype,0
857,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( <S2SV_ModStart> user_alloc && ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM,0
858,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
859,"<S2SV_ModStart> ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> request"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> request"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> request"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> request"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> request"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> request"" ) ; return NULL ; } if ( tmp == NULL ) { php_stream_wrapper",0
860,"<S2SV_ModStart> len ) { PyObject * u ; PyObject * buf ; PyObject * p ; PyObject * w ; int kind ; PyObject * data ; Py_ssize_t i ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } p = buf ; s = buf ; len = p - buf ; s = buf ;",0
861,"<S2SV_ModStart> == NULL ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } <S2SV_ModStart> == NULL ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( strict_mode == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } <S2SV_ModStart> == NULL ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data",0
862,"<S2SV_ModStart> uint32_t bcount ; if (! config ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } # if 1 if ( infilesize &&! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } # endif <S2SV_ModStart> (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR",0
863,"<S2SV_ModStart> &&! ( config -> qmode & QMODE_IGNORE_LENGTH ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; return WAVPACK_SOFT_ERROR ; } if ( config -> qmode & QMODE_IGNORE_LENGTH ) { error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize",0
864,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; if ( timeri -> flags & SNDRV_TIMER_IFLG_SLAVE ) { spin_lock_irqsave ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_SLAVE ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; goto __end ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_START ) timeri -> flags &= ~ SNDRV_TIMER_IFLG_RESCHED ; timer -> hw. stop ( timer ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_RESCHED ) timer -> flags &= ~ SNDRV_TIMER_FLG_RESCHED ; timer -> hw. start ( timer ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CHANGE ) timeri -> flags &= ~ SNDRV_TIMER_FLG_CHANGE ; timeri -> flags &= ~ SNDRV_TIMER_FL",0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart> int setimes, targisdir <S2SV_ModEnd>, wrerrno = <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_name, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_name, stb. st_mode, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_name, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ. st_name, stb. st_mode, stb. st_mode ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s",0
866,"<S2SV_ModStart> } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> flags."" ), channel ) ; return ; } if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> flags."" ), channel ) ; return ; } <S2SV_ModEnd> if (! <S2SV_ModStart> } else if ( myentity_find_ext ( target )!= NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized <S2SV_blank> to <S2SV_blank> perform <S2SV_blank> flags."" ), channel ) ; return ; } if ( myentity_find_ext ( target )!= NULL",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,"<S2SV_ModStart> goto error ; ast -> sub_ctx = avformat_new_context ( ) ; if (! ast -> sub_ctx ) { avformat_free_context ( ast ) ; goto error ; } <S2SV_ModEnd> if ( ff_copy_whiteblacklists <S2SV_ModStart> ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ;",0
869,"<S2SV_ModStart> null_server ; int <S2SV_ModEnd> need_error_free = 0 <S2SV_ModStart> retval ) ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( version && strcmp ( inbuf. data, version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( strcmp ( inbuf. data, appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( strcmp",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
872,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> call_source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> call_dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> call_source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose",0
873,<S2SV_ModStart> = new_ns ; if ( p -> mnt. mnt_root -> mnt == new_fs -> root. mnt ) { q -> root. mnt = mntget ( & p -> mnt ) ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { q -> pwd. mnt = mntget ( & q -> mnt ) ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { q -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } else { q -> root. mnt = mntget ( & q -> mnt ) ; } if ( new_fs ) { if ( & p -> mnt == new_fs -> pwd. mnt ) { q -> pwd. mnt = mntget ( & q -> mnt ) ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { q -> pwd. mnt = mntget ( & q -> mnt ) ; } else { q -> root. mnt = mntget ( & q -> mnt ),0
874,<S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_INFO <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModStart> = vpx_calloc ( <S2SV_ModEnd> sizeof ( ENTROPY_CONTEXT_PLANES,0
875,<S2SV_ModStart> = php_zip_get_property_ptr ; zip_object_handlers. get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; if (,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_TCHECK2 ( * dp, siz ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; }",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,"<S2SV_ModStart> sent = 0 ; struct sockaddr_storage dstaddr = server -> dstaddr ; struct sockaddr_in smb_msg. msg_namelen = sizeof ( struct sockaddr_in ) ; smb_msg. msg_namelen = sizeof ( struct sockaddr_in ) ; smb_msg. msg_namelen = sizeof ( struct sockaddr_in ) ; smb_msg. msg_namelen = sizeof ( struct sockaddr_in ) ; if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break",0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return 0 ;,0
881,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs <S2SV_ModStart> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; else subseqEntry. value = 0 ; data [ 0 ] = ( ( 0xff & subseqEntry. value ) << 4 ) | ( ( 0xff & subseqEntry. value ) >> 8 ) ; data [ 1 ] = ( ( 0xff & subseqEntry. value ) << 4 ) ; size = 4 ; break ; case 48 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size = 4 ; } break ; case 64 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry.",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; <S2SV_ModEnd> isk -> inet_num,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
885,<S2SV_ModStart> ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_,0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode <S2SV_ModStart> = parse_rock_ridge_inode_internal ( <S2SV_ModEnd> de, inode",0
887,"<S2SV_ModStart> * inotify_new_group ( struct fsnotify_group * group, unsigned int <S2SV_ModEnd> max_events ) { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> -> inotify_data.",0
888,"<S2SV_ModStart> ; for ( p = 0 ; p < 4 && in -> data [ p ] ; p ++ ) { int w = inlink -> w ; int h = inlink -> h ; int r = s -> radius ; if ( p ) { int w = s -> chroma_w ; int h = s -> chroma_h ; int r = s -> chroma_r ; if ( p ) { w = s -> chroma_w ; h = s -> chroma_h ; r = s -> chroma_r ; } if ( FFMIN ( w, h ) > 2 * r ) filter ( s, out -> data [ p ], in -> data [ p ], w, h, out -> linesize [ p ], r ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ],",0
889,"<S2SV_ModStart> 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> buffers [ 4 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; if ( screen -> buffers [ 5 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; if ( screen -> buffers [ 6 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 6 ] ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ;",0
890,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
891,"<S2SV_ModStart> = 0 ; tsize_t <S2SV_ModEnd> nstrips = TIFFNumberOfStrips <S2SV_ModStart> in ) ; if ( nstrips == 0 ) TIFFError ( """", ""TIFF <S2SV_blank> number <S2SV_blank> of <S2SV_blank> strip <S2SV_blank> points <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nstrips, TIFFNumberOfStrips ( in ) ) ;",0
892,"<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> const char need_to_append_dot <S2SV_ModStart> 1 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = dom -> len ; char * const newname = ( char * ) mm_malloc ( base_len + need_to_append_dot + postfix_len + 1 ) ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; return NULL ; }",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
894,<S2SV_ModStart> out ; err = <S2SV_ModEnd> - EAGAIN ;,0
895,"<S2SV_ModStart>, number_planes_filled ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> number_planes_filled ) { pixel_info_length = ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax",0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if ( context -> PlaneByteCount == 0 ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount ) return FALSE ; if ( planeSize > UINT32_MAX / context -> OrgByteCount ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount ) return FALSE ; if ( originalSize > UINT32_MAX / planeSize ) return FALSE <S2SV_ModStart> < originalSize ) return FALSE ; if ( planeSize > UINT32_MAX / context -> PlaneByteCount ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount ) return FALSE <S2SV_ModStart> < originalSize ) return FALSE ; if ( planeSize > UINT32_MAX / context -> OrgByteCount ) return FALSE ; if ( originalSize > UINT32_MAX / context -> PlaneByteCount ) return TRUE ; if ( originalSize > UINT32_MAX / planeSize ) return FALSE ; if ( planeSize > UINT32_MAX / context -> PlaneByte,0
897,<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCACHE_I ( inode ) ; struct fscrypt_inode_info * ei = FSCACHE_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCACHE_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCACHE_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCACHE_I ( inode ) ; struct fscrypt_inode_info * ei_info = FSCACHE_I ( inode ) ; if (! ei -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! ei_info -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! ei -> i_sb -> s_cop -> empty_,0
898,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } } else if ( value ) { httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
899,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart>. raw_data = description <S2SV_ModEnd>,. match_data <S2SV_ModStart>. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; ret = request_key ( key, & ctx. match_data, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error ; } ret = request_key ( key, & ctx. match_data, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, & ctx. match_data, & ctx. match_data, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error ; } ret = request_key ( key, & ctx. match_data, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ;",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,<S2SV_ModStart> ) ) ; if ( clean && (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; pool -> swork. job_id = job_id ; cg_wlock ( & pool -> data_lock ) ; pool -> swork. job_id = job_id ; cg_wlock ( & pool -> data_lock ) ; if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; pool -> swork. job_id = job_id ; pool -> swork. prev_hash = prev_hash ; pool -> swork. bbversion = bbversion ; pool -> swork. nbit = nbit ; pool -> swork. ntime = n,0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { if ( num > UINT32_MAX / size ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> memory <S2SV_blank> sizes\\n"", __func__ ) ; return NULL ; } <S2SV_ModStart> ( ptr ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> memory <S2SV_blank> sizes\\n"", __func__ ) ; return NULL ; } <S2SV_ModStart> ( ptr ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> memory <S2SV_blank> sizes\\n"", __func__ ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
904,<S2SV_ModStart> cfq_exit ( ioc ) ; spin_lock_irq ( & ioc -> ioc_lock ) ; <S2SV_ModStart> ) ; } spin_unlock_irq ( & ioc -> ioc_lock ) ;,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; <S2SV_ModEnd> PyObject * dict <S2SV_ModStart> dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } Py_DECREF ( dict ) ; res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
906,<S2SV_ModStart> ( udev -> desc. bDescriptorType == USB_DT_OTG && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 2 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 2 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. bNumConfigurations == 1 && udev -> config [ 0 ]. desc. b,0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ( event, <S2SV_ModEnd> ( u64 __user <S2SV_ModStart> return ret ; } if ( cmd == PERF_EVENT_IOC_PERIOD ) return perf_event_period ( event, ( u64 __user * ) arg ) ; if ( cmd == PERF_EVENT_IOC_ID ) return perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & event -> id, sizeof ( event -> id ) ) ) return - EFAULT ; break ; case PERF_EVENT_SET_OUTPUT : { int ret ; ret = perf_event_set_output ( event, NULL ) ; fdput ( output ) ; ret = perf_event_set_output ( event, NULL ) ; if ( ret ) return ret ; ret = perf_event_set_output ( event, NULL ) ; if ( ret ) return ret ; ret = perf_event_set_output ( event, NULL ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
908,<S2SV_ModStart> -> prr_delivered += tcp_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
910,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) return NULL ; tfm -> type = type ; tfm -> flags |= CRYPTO_TFM_REQ_MAY_SLEEP ; tfm -> flags |= CRYPTO_TFM_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_MAY_SLEEP ; tfm -> flags |= CRYPTO_TFM_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO_RES_NO,0
911,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp",0
912,<S2SV_ModStart> tile_height ) { av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; av_free ( c -> kempf_buf ) ; av_free ( c -> kempf_flags ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ;,0
913,"<S2SV_ModStart> iv ) ; if (! NIL_P ( vpass ) ) { rb_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; return Qnil ; } if (! NIL_P ( vpass ) ) { rb_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; ossl_raise ( eCipherError, ""pass <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; return Qnil ; }",0
914,<S2SV_ModStart> ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ 1 - parity ] ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ;,0
915,"<S2SV_ModStart> ) ; register_savevm <S2SV_ModEnd> ( dev,",0
916,"<S2SV_ModStart> ) { register <S2SV_ModEnd> u_int length = <S2SV_ModStart> len ) ; if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; } ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
917,"<S2SV_ModStart> = 0 ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOLOCKS ) { cFYI ( 1, ""No <S2SV_blank> mnt_cifs_flags <S2SV_blank> set"" ) ; cifs_sb -> mnt_cifs_flags |= CIFS_MOUNT_NOLOCKS ; cifs_sb -> mnt_cifs_flags |= CIFS_MOUNT_NOLOCKS ; } else { cFYI ( 1, ""No <S2SV_blank> mount <S2SV_blank> option"" ) ; cFYI ( 1, ""No <S2SV_blank> mount <S2SV_blank> option <S2SV_blank> set"" ) ; cFYI ( 1, ""No <S2SV_blank> mnt_cifs_flags <S2SV_blank> set"" ) ; cifs_sb -> mnt_cifs_flags |= CIFS_MOUNT_NOLOCKS ; cifs_sb -> mnt_cifs_flags |= CIFS_MOUNT_NOLOCKS ; } else if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOLOCKS ) { cFYI ( 1, ""No <S2SV_blank> mount <S2SV_blank> option <S2SV_blank> set"" ) ; cFYI (",0
918,<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) && <S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_,0
919,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> raptor_sax2_set_uri_filter ( rdf_xml_parser,0
920,"<S2SV_ModStart> alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED",0
921,<S2SV_ModStart> ) ) { return SecureElement <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
922,"<S2SV_ModStart> : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_CLIENT_MAGIC]\\n"" ) ; iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_FIRST_SETTINGS",0
923,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ;,0
924,"<S2SV_ModStart> += dif ; kfree ( opt2 ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; if ( opt2 ) { kfree ( opt2 ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; if ( opt2 ) { kfree ( opt2 ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; if ( opt2 ) { kfree ( opt2 ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_ATOMIC ) ; opt2 = sock_kmalloc ( sk, opt -> tot_len, GFP_",0
925,"<S2SV_ModStart> ; if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; } else { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { if ( cpu_has ( & boot_cpu_data, X86_FEATURE_IA32_PERF_CAPABILITIES ) ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu.",0
926,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * classifications ) ) ; # endif <S2SV_ModEnd> int part_read =",0
927,<S2SV_ModStart> ) ; u32 <S2SV_ModEnd> now ; if <S2SV_ModStart> ) { if ( tp -> snd <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> TOKENEXTRA * * tp, const TOKENEXTRA * stop ) { const struct vp9_token * const a = & vp9_coef_encodings [ t ] ; const struct vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int i = 2 * p -> skip_eob_node ; if ( t >= TWO_TOKEN && t",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; <S2SV_ModEnd> struct vp9_write_bit_buffer wb <S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; write_uncompressed_header ( cpi, & wb ) ; saved_wb = wb ; write_compressed_header ( cpi, & wb ) ; compressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vp9_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; }",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> * rdesc ; __u16 version ; __u8 * country ; <S2SV_ModStart> - ENODEV ; } version = le16_to_cpu ( hdesc -> bcdHID ) ; country = le16_to_cpu ( hdesc -> bCountryCode ) ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } <S2SV_ModStart> -> version = le16_to_cpu ( hdesc -> bcdHID ) ; hid -> country = hdesc -> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ;",0
933,"<S2SV_ModStart> ) { struct ikev2_id id ; u_int id_len, idtype_len, i <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc",0
934,<S2SV_ModStart> group_dead ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # endif # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> char * name <S2SV_ModEnd> = path_name ( <S2SV_ModStart> ( path, obj -> oid. hash, obj -> oid. type, obj -> oid. hash ) ; add_preferred_base_object ( name ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; obj -> flags |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
936,<S2SV_ModStart> ; } } jas_tvparser_free ( tvp ) ; if (! ( jas_tvparser_free ( tvp ) ) ) { jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_protocol_error ( jas_,0
937,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
938,"<S2SV_ModStart>, h2, fft_jmp ; WORD32 xt0_0, yt0_0, yt1_0, yt2_0, xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_0, x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_l2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x",0
939,<S2SV_ModStart> ] ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } if ( unlikely ( len <= 0x7f ) ) { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; if ( unlikely ( tmp & 0x80 ) == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp,0
940,"<S2SV_ModStart> val ; if (! ( flags & ( __GFP_ZERO | __GFP_NOWARN ) ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( ( flags & ( __GFP_ZERO | __GFP_NOWAIT ) ) == 0 ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( flags & ( __GFP_ZERO | __GFP_NOWAIT | __GFP_IO ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( ( flags & ( __GFP_ZERO | __GFP_NOWAIT ) ) == 0 ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; } if ( flags & ( __GFP_ZERO | __GFP_NOWAIT | __GFP_NOWAIT ) ) { WARN ( 1, ""coherent <S2SV_blank> pool <S2SV_blank> not <S2SV_blank> initialised!\\n"" ) ; return NULL ; }",0
941,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; }",0
943,<S2SV_ModStart> n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModEnd> search ( value <S2SV_ModStart> n ] <= <S2SV_ModEnd> max <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cm -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
945,"<S2SV_ModStart> ; if ( ins_size < 0 || insns_size < 0 ) { return ; } <S2SV_ModStart> = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ;",0
946,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_name_val, rb_strdup ( req_server_name ( req ) ) ) ; rb_hash_aset ( env, server_port_val, rb_strdup ( req_server_port ( req ) ) ) ; rb_hash_aset ( env, server_ip_val, rb_strdup ( req_server_ip ( req ) ) ) ; rb_hash_aset ( env, server_name_val, rb_strdup ( req_server_name ( req ) ) ) ; rb_hash_aset ( env, server_ip_val, rb_strdup ( req_server_ip ( req ) ) ) ; rb_hash_aset ( env, server_name_val, rb_strdup ( req_server_name ( req ) ) ) ; rb_hash_aset ( env, server_ip_val, rb_strdup ( req_server_ip ( req ) ) ) ; rb_hash_aset ( env, server_port_val, rb_strdup ( req_server_port ( req ) ) ) ; rb_hash_aset ( env,",0
947,<S2SV_ModStart> 0 ) ; args -> rmtvaluelen = valuelen ; if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } else { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } else { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; } if ( args -> rmtvaluelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { args -> rmtvaluelen = XFS_LBSIZE ( args -> dp -> i_mount,0
948,"<S2SV_ModStart>, prepare_retval ; # endif <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare ) ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; } imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; imp_sth -> is_async = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ;",0
949,"<S2SV_ModStart> -> type -> destroy ) key -> type -> destroy ( key ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_PRIVILEGED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys )",0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num, state. sumlen ) ) ) ;",0
951,<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; char * <S2SV_ModStart> } ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; if ( scp -> data_buffer == ( char * ) malloc ( ( size_t ) need + 1 ) ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( (,0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> sbi -> s_journal &&! handle ) goto out ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_b",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) { strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""-Infinity"", len ) ; else if (! isfinite ( val ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else if (! isfinite ( val ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,"<S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; size = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size",0
956,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> return ; },0
957,"<S2SV_ModStart> { strncat ( str <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
958,"<S2SV_ModStart> ; } } if ( st. st_mode & S_IFMT ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"",",0
959,,1
960,"<S2SV_ModStart> * output ; size_t <S2SV_ModEnd> i ; register <S2SV_ModStart> MagickFalse ) ; } input = fopen_utf8 ( argv [ argc - 1 ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ;",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> fail : blkdev_put ( bdev, FMODE_READ | FMODE_WRITE | FMODE_EXCL ) ; if ( IS_ERR ( bdev ) ) { ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"", __bdevname ( dev, b ), PTR_ERR ( bdev ) ) ; return NULL ; }",0
963,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; linebuf = malloc ( buflen ) ; if (! linebuf ) break ; contlen = strlen ( linebuf ) ; while ( fgets ( linebuf, buflen, pwf ) == NULL ) break ; contlen = strlen ( linebuf ) ;",0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ; gchar * to = xmpp_stanza_get_to ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; gchar * to2 = xmpp_stanza_get_to ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; gchar * to2 = xmpp_stanza_get_to ( message ) ; gchar * from2 = xmpp_stanza_get_from ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; gchar * from2 = xmpp_stanza_get_from ( message ) ; gchar * from2 = xmpp_stanza_get_from ( message ) ; gchar * from2 = xmpp_stanza_get_from ( message ) ; gchar * from2 = xmpp_stan,0
967,"<S2SV_ModStart> badfmt ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. masterauth ) ; server. masterauth = NULL ; } zfree ( server. masterauth ) ; server. masterauth = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; } <S2SV_ModEnd> } config_set_special_field ( <S2SV_ModStart> ""cluster-announce-ip"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. masterauth ) ; server. masterauth = NULL ; zfree ( server. masterauth ) ; server. masterauth = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; }",0
968,"<S2SV_ModStart> ( CMD_PRINT_HELP, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * ) <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ( CONF_TYPE * )",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> ; if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank>",0
972,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes,0
973,"<S2SV_ModStart> int x, y, i ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ) ) return false ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size * sizeof ( struct map_tile ) ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * y_size ] ; tile -> frames_left = tileset_get_delay (",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ndo, const u_char * cp, u_int length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 ; } if ( ( length + 1 ) & 3 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; ptr = cp [ 2 ] - 1 ; if ( ptr < 3 || ( ( ptr + 1 ) & 3 ) || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; for ( len = 3 ; len < length ; len += 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", ipaddr_string ( ndo, & cp [ len ] ) ) ; if (",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> -> valuestring ) ; } <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if ( num_enc < 2 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx += num_enc - 1 ; if ( img ) img += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( img )",0
977,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L",0
978,"<S2SV_ModStart> * buf ; size_t size = sizeof ( unsigned char * ) * chm -> num_chunks ; if (! sys -> alloc ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! sys -> seek ( fh, ( off_t ) ( chm -> dir_offset + ( chunk_num * chm -> chunk_size ) ), MSPACK_SYS_SEEK_START ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t ) ( chm -> dir_offset + ( chunk_num * ch",0
979,"<S2SV_ModStart> leader ) ) return - EINVAL ; list_for_each_entry ( sibling, & event -> sibling_list, group_entry ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_INACTIVE ) { if ( sibling -> state == PERF_EVENT_STATE_INACTIVE ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_OFF ) { if ( sibling -> state == PERF_EVENT_STATE_INACTIVE ) { if ( sibling -> state == PERF_EVENT_STATE_INACTIVE ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF_STATE_OFF ) { if ( sibling -> state == PERF",0
980,"<S2SV_ModStart> } } when 10 : if ( term. csi_argc!= 2 ) return ; win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 3 ) { win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else",0
981,<S2SV_ModStart> ; if ( <S2SV_ModEnd> get_bits_count ( gb <S2SV_ModStart> gb ) ; if ( <S2SV_ModEnd> get_bits_count ( gb <S2SV_ModStart> gb ) ; if ( <S2SV_ModEnd> get_bits_count ( gb <S2SV_ModStart> gb ) ; if ( <S2SV_ModEnd> get_bits_count ( gb <S2SV_ModStart> gb ) ; if ( <S2SV_ModEnd> get_bits_count ( gb <S2SV_ModStart> gb ) ; if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if ( get_bits_count ( gb ) >= gb -> size_in_bits ) { if (,0
982,<S2SV_ModStart> ; if ( nsops > UINT_MAX / sizeof ( * sops ) ) return - EINVAL ; if ( tsops -> sem_flg > UINT_MAX / sizeof ( * tsops -> sem_flg ) || tsops -> sem_num > UINT_MAX / sizeof ( * tsops -> sem_num ) || tsops -> sem_op > SYSV_SEM_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
983,<S2SV_ModStart> ; for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = 0 ; i < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = 0 ; i < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int sumsq += x * y ; d [ c & 15 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7,0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; } if ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""file <S2SV_blank> block <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> = 0 ; if ( ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) || ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) || ( GetWord ( i -> parent ) > i -> parent -> width ) || ( GetWord ( i -> parent ) > i -> parent -> height ) ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas",0
986,"<S2SV_ModStart> ; if ( q == NULL ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> section <S2SV_blank> header <S2SV_blank> is <S2SV_blank> null\\n"" ) ) ; goto out ; } q = CAST ( const uint8_t * ) q ; q = CAST ( const uint8_t * ) q ; q = CAST ( const uint8_t * ) q ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset ) ; q -> sh_offset = CDF_TOLE4 ( q -> sh_offset )",0
987,<S2SV_ModStart> ; } } repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; if ( repeat_any_args!= NULL ) { * repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; * repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; } else { * repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; if ( repeat_any_args!= NULL ) { * repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; * repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; } else { * repeat_any_args = ( RE_REPEAT_ANY_ARGS * ) alloc ( MAX_FAST_RE_STACK ) ; },0
988,"<S2SV_ModStart> char * str, size_t len <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank>",0
989,<S2SV_ModStart> mnt_instance ) ; if ( unlikely ( list_empty ( & mnt -> mnt_mounts ) ) ) { rcu_read_unlock ( ) ; unlock_mount_hash ( ) ; return ; },0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
991,"<S2SV_ModStart> ( ) >= 1 ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_pi_prcno ( pi ), jpc_pi_lyrno ( pi )",0
992,"<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> iinfo ; uint32_t <S2SV_ModEnd> pos ; iinfo <S2SV_ModStart> -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
993,<S2SV_ModStart> else if ( vcpu -> arch. apic_base & X2APIC_MASK ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_longmode_x3apic ; else msr_bitmap = vmx_msr_bitmap_legacy_x3apic ; } else { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_legacy_x3apic ; else msr_bitmap = vmx_msr_bitmap_legacy_x3apic ; } else { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_,0
994,"<S2SV_ModStart>, result ) ; if ( ent == NULL ) { st = ENOMEM ; goto cleanup ; } if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) goto cleanup ; } if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } ldap_msgfree ( result ) ; if ( st!= 0 ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } <S2SV_ModEnd> cleanup : ldap_msgfree",0
995,"<S2SV_ModStart> i1_sps_valid ) { ps_codec -> i4_pps_done = 1 ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_codec -> i4_sps_base + ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP",0
996,<S2SV_ModStart> ) ) { switch ( ( c = * format ++ ) ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '2' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '3' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '4' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '5' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '6' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case '7' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '8' : psf -> rwf_endian =,0
997,"<S2SV_ModStart>, ret ; memset ( & state -> dsec_cmd, 0, sizeof ( state -> dsec_cmd ) ) ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( state -> dsec_cmd. len < CX24116_DISEQC_MSGLEN ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + i ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC",0
998,"<S2SV_ModStart> break ; } if ( sco_pi ( sk ) -> conn -> hcon!= NULL ) { memcpy ( cinfo. hci_handle, sco_pi ( sk ) -> conn -> hcon -> handle, 3 ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo. dev_class ) ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; if ( copy_to_user ( optval, ( char * ) & cinfo, len ) ) err = - EFAULT ; break ; }",0
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else",0
1001,"<S2SV_ModStart> ; guint pkt_len <S2SV_ModEnd> ; int pktnum <S2SV_ModStart> ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_LEN ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > WTAP_MAX_PACKET_LEN ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_",0
1002,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> -> msg_name ) { memset ( msg -> msg_name, 0, sizeof ( * msg -> msg_name ) ) ; memset ( msg -> msg_namelen, 0, sizeof ( * msg -> msg_name ) ) ; memcpy ( msg -> msg_namelen, sizeof ( * msg -> msg_namelen ) ) ; memcpy ( msg -> msg_name, sizeof ( * msg -> msg_name ) ) ; memcpy ( msg -> msg_namelen, sizeof ( * msg -> msg_name ) ) ; memcpy ( msg -> msg_namelen, sizeof ( * msg -> msg_namelen ) ) ; memcpy ( msg -> msg_name, & msg -> msg_name, sizeof ( * msg -> msg_namelen ) ) ; memcpy ( msg -> msg_namelen, sizeof ( * msg -> msg_name ) ) ; memcpy ( msg -> msg_namelen, sizeof ( * msg -> msg_namelen ) ) ; memcpy ( msg -> msg_namelen, sizeof ( *",0
1003,"<S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> key ) ; if (! zend_symtable_find ( ht, Z_STR",0
1004,"<S2SV_ModStart> ( link_info. str, nla_data ( link [ TIPC_NLA_LINK_NAME ] ) ) ;",0
1005,<S2SV_ModStart> } else { if ( ( flags & SPLICE_F_GIFT ) && ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ibuf -> ops = NULL ; opipe -> nrbufs -- ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers,0
1006,"<S2SV_ModStart> tokenlen ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; } if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) ) ; } assert ( p -> tokenpos < p -> tokenlen ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, sizeof ( p -> tokenbuf ) )",0
1007,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1008,<S2SV_ModStart> | IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ) || back_size > INT_MAX / sizeof ( uint16_t ),0
1010,<S2SV_ModStart> OPJ_UINT32 ) ( ( ( OPJ_UINT64 ) comp -> dx ) << ( ( OPJ_UINT64 ) comp -> dy ) << ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dy >> ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dy >> ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dy >> ( ( OPJ_UINT64 ) comp -> dx ) << ( ( OPJ_UINT64 ) comp -> dy ) << ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dy >> ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dy >> ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_UINT64 ) comp -> dy ) << ( ( OPJ_UINT64 ) comp -> dx >> ( ( OPJ_U,0
1011,"<S2SV_ModStart> send_pa ) { <S2SV_ModEnd> return_pkinit_kx ( plgctx <S2SV_ModStart> send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( plgctx, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( plgctx, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( plgctx, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( plgctx, request, reply, encrypting_key, send_pa ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx",0
1012,"<S2SV_ModStart> if ( CheckQuantumMemory ( count, quantum ) == MagickFalse ) return ( ( void * ) NULL ) ;",0
1013,"<S2SV_ModStart> stratum_port ; sprintf ( address <S2SV_ModEnd>, ""%s:%s"", <S2SV_ModStart> url, port ) ; if (! extract_sockaddr ( address, & sockaddr_url, & stratum_port ) ) return false ; applog ( LOG_WARNING, ""Stratum <S2SV_blank> reconnect <S2SV_blank> requested <S2SV_blank> from <S2SV_blank> pool <S2SV_blank> %d <S2SV_blank> to <S2SV_blank> %s"", pool -> pool_no, address ) ; return false ; applog ( LOG_WARNING, ""Stratum <S2SV_blank> reconnect <S2SV_blank> requested <S2SV_blank> from <S2SV_blank> pool <S2SV_blank> %d <S2SV_blank> to <S2SV_blank> %s"", pool -> pool_no, address ) ; if (! extract_sockaddr ( address, & sockaddr_url, & stratum_port ) ) return false ; applog ( LOG_WARNING, ""Stratum <S2SV_blank> reconnect <S2SV_blank> requested <S2SV_blank> from <S2SV_blank> pool <S2SV_blank> %d <S2SV_blank> to <S2SV_blank> %s"", pool -> pool_no, address ) ; if (! extract_sockaddr ( address, & sockaddr_url, & stratum_port ) ) return false ; applog ( LOG_WARNING, ""Stratum <S2SV_blank> reconnect <S2SV_blank> requested <S2SV_blank> from <S2SV_blank> pool <S2SV_blank> %d <S2SV_blank> to <S2SV_blank> %s"", pool -> pool",0
1014,"<S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; return error ( f, VORBIS_too_many_submaps ) ; } <S2SV_ModStart> max_submaps ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; return error ( f, VORBIS_too_many_submaps ) ; }",0
1015,<S2SV_ModStart> ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( hdr ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = ( void * ) p,0
1016,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = <S2SV_ModEnd> to_o2nm_cluster_from_node ( node <S2SV_ModStart> - EINVAL ; mutex_lock <S2SV_ModEnd> ( & cluster <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock <S2SV_ModEnd> ( & cluster <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( tmp, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { node -> nd_num = tmp ; set_bit ( tmp, cluster -> cl_nodes_bitmap ) ; }",0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""buffer <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame",0
1018,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * zcalloc,0
1019,"<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes == NULL ) psf_log_syserr ( psf, EPERM ) ;",0
1020,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1021,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify_ex ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ;",0
1024,"<S2SV_ModStart> ) ; hrtimer_set_expires ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_REL ) ;",0
1025,"<S2SV_ModStart> ; struct l2cap_conf_rfc <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_BASIC ; uint16_t <S2SV_ModEnd> txwin_size = L2CAP_DEFAULT_RX_WINDOW <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; uint16_t <S2SV_ModEnd> retrans_timeout = cpu_to_le16 <S2SV_ModStart>. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & <S2SV_ModEnd> rfc ) ;",0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = - 1 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return err ; }",0
1028,<S2SV_ModStart> return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ( ps_dec -> u2_total_mbs_coded == 1 ) || ( ps_dec -> u2_total_mbs_coded == 1 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec -> u2_total_mbs_coded == 1 ) || ( ps_dec -> u2_total_mbs_coded == 1 ) || ( ps_dec -> u2_total_mbs_coded == 0 ) || ( ps_dec,0
1029,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1030,"<S2SV_ModStart> } err = crypto_rng_setseed <S2SV_ModEnd> ( tfm,",0
1031,<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new ; } <S2SV_ModEnd> return ucounts ;,0
1032,<S2SV_ModStart> ; msg_sys. msg_namelen = 0 ;,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { size_t <S2SV_ModEnd> i ; for <S2SV_ModStart> 8 * 32 ) { ( void ) tab [ i + 0 * 8 ] ; ( void ) tab [ i + 1 * 8 ] ; ( void ) tab [ i + 2 * 8 ] ; ( void ) tab [ i + 3 * 8 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; } <S2SV_null> <S2SV_null>,0
1035,"<S2SV_ModStart> bh_result ) ; err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err < 0 ) { err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err < 0 ) { err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err < 0 ) { err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err < 0 ) { err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; goto out2 ; } err = ext4_journal_get_write_access ( handle, inode, bh_result ) ; if ( err < 0 ) { err = ext4_journal_get_",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> = 0 ; fmode &= ( FMODE_READ | FMODE_WRITE ) ; rcu_read_lock ( ) ; deleg_cur = rcu_dereference ( nfsi -> delegation ) ; if ( deleg_cur == NULL ) goto no_delegation ; spin_lock ( & deleg_cur -> lock ) ; if ( <S2SV_ModStart> deleg_cur ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL, open_flags <S2SV_ModEnd> ) ; ret",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart> int64_t * out_dist_sum, vpx_bit_depth_t * bit_depth <S2SV_ModStart> int sse ; memset ( x -> pred_sse, 0, sizeof ( x -> pred_sse ) ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int64_t quantizer ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; } else { int64_t rate ; int64_t dist ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist, & dist ) ;",0
1041,<S2SV_ModStart> } if ( pmd_none ( * pmd ) &&! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable,0
1042,"<S2SV_ModStart> ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type, pptr ++ ) ) ; if ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", es",0
1043,<S2SV_ModStart>!= '\\0' ) { ptr ++ ; } if ( ( * ptr =='<S2SV_blank>') || ( * ptr == '\\t' ) ) break ; else { username [ index ] = * ptr ; index ++ ; ptr ++ ; } } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( P,0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_reader_t <S2SV_ModEnd> tree_probs = seg <S2SV_ModStart> return vpx_read_tree ( <S2SV_ModEnd> r, vp9_segment_tree <S2SV_ModStart> -> tree_probs ) ; vpx_reader_t <S2SV_ModEnd> tree_probs = seg <S2SV_ModStart> return vpx_read_tree ( <S2SV_ModEnd> r, vpx_segment_tree",0
1045,<S2SV_ModStart> uint32_t backup_handle ; struct drm_vmw_surface_create_req * req = & arg -> req ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; req -> mip_levels = DRM_VMW_MAX_MIP_LEVELS ;,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> = NULL ; # ifdef CONFIG_MODIFY_LDT_SYSCALL if ( ( sel & SEGMENT_TI_MASK ) == SEGMENT_LDT ) { <S2SV_ModStart> ldt = current -> active_mm -> context. ldt ; mutex_lock ( & current -> active_mm -> context. lock ) ; <S2SV_ModStart> ldt && sel < ldt -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } # endif <S2SV_ModEnd> native_store_gdt ( & <S2SV_ModStart> gdt_desc ) ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; return ( struct desc_struct * ) ( gdt_desc. address + desc_base ) ;,0
1047,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1 [ 0 ], linesize ) ; dst_ptr1 += src_stride ; dst_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ; ++ i ) { memc",0
1048,"<S2SV_ModStart> * bp ; struct sctp_sockaddr_entry * laddr = & t -> ipaddr ; union sctp_addr * daddr = & t -> ipaddr ; union sctp_addr * baddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; sctp_scope_t scope ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( maxbuf - buf ) ) ) ) ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( maxbuf - buf ) ) ) ) ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) ( ( unsigned long ) (",0
1051,"<S2SV_ModStart> -> protocol_timeout ) { gsm_source_add ( client -> priv -> protocol_timeout, conn ) ; client -> priv -> protocol_timeout = 0 ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"" <S2SV_ModStart> -> description ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection ( client ) ; gsm_xsmp_close_connection (",0
1052,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) { if ( io < ie &&! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; for ( ie = io + ps -> nid ; io < ie &&! ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; for ( ie = io + ps -> nid ;",0
1053,"<S2SV_ModStart> ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR",0
1054,"<S2SV_ModStart> NULL ) ; rb_ary_push ( self, rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_double ( rb_",0
1055,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; } for ( j = 0 ; j < ASSOC_ARRAY_FAN_OUT ; j ++ ) { if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank>",0
1056,"<S2SV_ModStart> udpport = 11211 ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = false ; settings. ssl_verify_peer_password = false ; settings. ssl_verify_peer_password = false ; settings. ssl_verify_peer_username = false ; settings. ssl_verify_peer_password = false ; settings. ssl_verify_peer_password = false ; settings. ssl_verify_peer_password = false ; settings. ssl_verify_peer_password = false ; settings. ssl_verify_peer = false ; settings. ssl_verify_peer_name = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_password = """" ; settings. ssl_verify_peer_name = """" ; settings. ssl_verify_peer_password = """"",0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_f = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_e = * x0 ++ ; x_d = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_",0
1059,"<S2SV_ModStart> { clips = kmalloc <S2SV_ModEnd> ( num_clips * <S2SV_ModStart> ), GFP_KERNEL ) ; if (! clips ) { ret = - ENOMEM ; goto out_err1 ; }",0
1060,"<S2SV_ModStart> ) ) { if ( unlikely ( pmd_trans_huge_or_clear_bad ( pmd ) ) ) continue ; if ( PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) || PageHighMem ( page ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return",0
1061,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1062,"<S2SV_ModStart> case 'a' : r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_asm_set_pc ( core -> assembler, addr ) ; <S2SV_ModStart> case 'b' : r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler, addr ) ; ( void ) r_asm_set_pc ( core -> assembler,",0
1063,"<S2SV_ModStart>, frames ; int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; while ( readw ( chip -> DSPQ + JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ +",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc = NULL <S2SV_ModStart> OPCODE_DESC * opcode_desc = NULL ; if ( len < 2 ) { goto INVALID_OP ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { t = r_strbuf_get ( & op -> esil ) ; if ( t && strlen ( t ) > 1 ) { t += strlen ( t ) - 1 ; } t = r_strbuf_get ( & op -> esil ) ; if ( t && strlen ( t ) > 1 ) { t += strlen ( t ) - 1 ; } t = r_strbuf_get ( & op -> esil ) ; if ( t && strlen ( t ) > 1 ) { t = r_strbuf_get ( & op -> esil ) ; if ( t && strlen ( t ) > 1 ) { t += strlen ( t ) - 1 ; } t = r_strbuf_get ( & op -> esil ) ; if ( t && strlen ( t ) > 1 ) { t += strlen ( t ) - 1 ; } t = r_strbuf_get ( & op -> esil ) ; if (,0
1066,<S2SV_ModStart> ACPI_STATUS status ; <S2SV_ModEnd> union acpi_operand_object * <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ) ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node,0
1067,"<S2SV_ModStart> file_handle = fopen ( ""/dev/null"", ""w"" ) ; if (! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", ""w"" ) ||! open ( ""/dev/null"", """,0
1068,"<S2SV_ModStart> num_fields ) { PyObject * s, * l ; int result ; _Py_IDENTIFIER ( _attributes ) ; PyUnicode_FromString ( attrs [ num_fields ] ) ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0",0
1069,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> = calloc ( <S2SV_ModStart> -> base ; priv -> sz = sizeof ( * priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> cfg = * cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! cfg ) { return VPX_CODEC_MEM_,0
1070,"<S2SV_ModStart> { error = xfs_da_shrink_inode ( args, 0, bp ) ; if ( error ) goto out ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ), XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EFSCORRUPTED ) ) ;",0
1071,"<S2SV_ModStart> c ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], & tipc_nl_sock_policy ) ; if ( err ) return err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], & tipc_nl_sock_policy ) ; if ( err ) return err ; err = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! tsk ) return - EINVAL ;",0
1073,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ( ( void * ) ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ( ( void * ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count",0
1074,<S2SV_ModStart> = v ; if ( priv -> vm_ops -> vma_stop ) priv -> vm_ops -> <S2SV_ModStart> vma ) ; if ( priv -> vm_file ) priv -> vm_file -> f_cred -> user -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> f_cred -> fcred -> fcred -> fcred -> fcred -> fcred -> fcred -> fcred -> fcred -> fcred -> fcred ->,0
1075,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> wTotalLength ) ; if ( length > total_len ) { ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; if ( ret < total_len ) { ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } length = cap -> bLength ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err",0
1076,"<S2SV_ModStart> task_struct * task = current ; struct file_sb_list * file_sb_list = file -> f_sb_list ; file_sb_list_del ( file ) ; if ( likely (! ( task -> flags & PF_KTHREAD ) ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; if (! llist_add ( & file -> f_u. fu_llist, & delayed_fput_list ) ) schedule_work ( & delayed",0
1077,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) { if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr ++!= 'l' ) return 1 ; if ( * ptr == 'u' ) ptr ++ ; else return 1 ; } } else { if ( * ptr == 'u' ) ptr ++ ; else return 1 ; } } return ( n!= 3 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1080,<S2SV_ModStart> ) ; kfree_rcu <S2SV_ModEnd> ( inet ->,0
1081,<S2SV_ModStart>! saw_digit ) { goto trunc ; } <S2SV_ModStart>! saw_digit ) { goto trunc ; } <S2SV_ModStart>! saw_digit ) { goto trunc ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ),0
1082,<S2SV_ModStart> ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args ->,0
1083,"<S2SV_ModStart> DefragInOrderSimpleTest ) ; UtRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6",0
1084,<S2SV_ModStart> if ( object_data ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } <S2SV_ModStart> ( object_data ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ),0
1085,"<S2SV_ModStart> ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) goto err ; <S2SV_ModStart> - 1 ; if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( cp >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( cp >= end ) return - 1 ; if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; if ( cp >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( cp >= end ) return - 1 ;",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ) == 0 ) { TIFFErrorExt ( tif -> tif_file, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1089,"<S2SV_ModStart> vma -> vm_ops && vma -> vm_ops -> fault ) { if ( likely ( vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; else return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } return do_swap_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; } if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; } else { if ( pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, p",0
1090,"<S2SV_ModStart> s ) { size_t alloc_size = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; if ( alloc_size < 0 ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( * alloc_size ) ) ; return NULL ; } <S2SV_ModStart> + 1 ) ; memcpy ( r, s, alloc_size ) ; if (! r ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( * r ) ) ; return NULL ; } if ( alloc_size < sizeof ( * r ) ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( * r ) ) ; if (! r ) { pr_err ( ""pool_strdup(): <S2SV_blank> alloc_size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", sizeof ( * r ) ) ; return NULL ; }",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> lower_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> lower_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1093,"<S2SV_ModStart> if ( i >= <S2SV_ModEnd> da -> decls <S2SV_ModStart> da -> decls [ abbr_code - 1 ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ] ) ) ; if ( i >= da -> decls [ abbr_code - 1 ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } if ( i >= da -> decls [ abbr_code - 1 ]. length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values [ i ] ) ) ; break ; }",0
1094,"<S2SV_ModStart> p_enc ) ; if ( p_enc -> n_blocks > p_enc -> n_max_blocks ) { msg_Err ( p_enc, ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> blocks <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", p_enc -> n_blocks ) ; p_enc -> n_blocks = p_enc -> n_blocks ; p_enc -> n_blocks = 0 ; return NULL ; } if ( p_enc -> n_blocks > p_enc -> n_max_blocks ) { msg_Err ( p_enc, ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> blocks <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> blocks <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", p_enc -> n_max_blocks ) ; return NULL ; } if ( p_enc -> n_blocks > p_enc -> n_blocks ) { msg_Err ( p_enc, ""Maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> blocks <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", p_enc -> n_blocks ) ; return NULL ; }",0
1095,"<S2SV_ModStart> ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", fname ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; } else { mp_verbose ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; }",0
1096,"<S2SV_ModStart> ) ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } ND_TCHECK ( * ip6 ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> bytes <S2SV_blank> missing!"" ) ) ; return ; }",0
1097,"<S2SV_ModStart> 4 ) ; size_t num_properties ; CHECKINT32 ( idx, len ) ; num_properties = GETINT32 ( buf + idx ) ; idx += 4 ; <S2SV_ModStart> ) ; for ( j = 0 ; j < a -> names [ i ]. len >> 1 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < a -> names [ i ]. len >> 1 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte (",0
1098,"<S2SV_ModStart> ; vma = find_vma ( mm, start, & prev ) ; if (! vma ) goto out_unlock ; ret = - EINVAL ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; } if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; } if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ;",0
1099,<S2SV_ModStart> act = vp8_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_ref_frame_t * data = va_arg ( args, vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb ; vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
1102,"<S2SV_ModStart> ctxt ) ; if ( ops -> get_msr ( ctxt, MSR_EFER, & efer ) < 0 ) { return - EINVAL ; } ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> regs [ VCPU_REGS_RCX ] = ctxt -> _eip ; if ( ops -> get_msr ( ctxt, MSR_SYSCALL_MASK, & ms",0
1103,"<S2SV_ModStart>!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_SOS ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %",0
1104,"<S2SV_ModStart> ) ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; set_context ( c, expr1, Store, ch ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_annassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_annassign ( c, ch ) ; if (! newoperator ) return NULL ; return AugAssign ( expr1, newoperator, expr2, LINENO ( n ), n -> n",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG * mc_running_avg, YV12_BUFFER_CONFIG * running_avg, <S2SV_ModEnd> int motion_magnitude, <S2SV_ModStart> int sig_stride = 16 ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> char * mc_running_avg_y = mc_running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> char * running_avg_y = running_avg -> y_buffer <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - mc_running_avg_y [ c ] ; absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ;",0
1106,"<S2SV_ModStart> ) ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; }",0
1107,"<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS struct coprocessor_regs * cp = xtregs -> cp0 ; ret |= __copy_from_user ( cp, & ti -> xtregs_cp, sizeof ( cp -> cp0 ) ) ; ret |= __copy_from_user ( & cp -> cp1, & cp -> cp1, sizeof ( cp -> cp1 ) ) ; ret |= __copy_from_user ( & cp -> cp2, & cp -> cp2, sizeof ( cp -> cp2 ) ) ; ret |= __copy_from_user ( & cp -> cp3, & cp -> cp3, sizeof ( cp -> cp3 ) ) ; ret |= __copy_from_user ( & cp -> cp4, & cp -> cp4, sizeof ( cp -> cp4 ) ) ; ret |= __copy_from_user ( & cp -> cp3, & cp -> cp3, sizeof ( cp -> cp3 ) ) ; return ret? - EFAULT : 0 ;",0
1108,<S2SV_ModStart> size ) ; if ( message -> length > message -> size ) { message -> length = message -> size ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { struct se_device * remote_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""remote_dev: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } }",0
1110,"<S2SV_ModStart> 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = <S2SV_ModEnd> - errno ;",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache ; struct mb2_cache * mb2_cache = EXT2_SB ( sb ) -> s_mb_cache ; <S2SV_ModStart> get_bh ( new_bh ) ; mb2_cache = ext2_get_mb_cache ( mb2_cache ) ; <S2SV_ModStart> new_bh ) ; mb2_cache = ext2_get_mb2_cache ( sb, le32_to_cpu ( HDR ( new_bh ) -> h_mb_cache ) ; mb2_cache = ext2_get_mb2_cache ( sb, le32_to_cpu ( mb2_cache ) -> h_mb_cache ) ; mb2_cache = ext2_get_mb_cache ( mb2_cache ) ; if (! mb2_cache ) { mb2_cache = ext2_get_mb2_cache ( sb, le32_to_cpu ( mb2_cache -> h_mb_cache ) ; mb2_cache = ext2_get_mb2_cache ( sb,",0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> cols ) ) return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; <S2SV_ModEnd> } break ;",0
1115,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1116,"<S2SV_ModStart>. size, task_event -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_",0
1117,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> * len ; if ( len > MAX_URL_LEN ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""URL <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", len, MAX_URL_LEN ) ; efree ( state ) ; return NULL ; }",0
1118,<S2SV_ModStart> SUCCESS ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> var ) ; TEMP_FAILURE_RETRY (,0
1119,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1120,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy, 1, ( size_t )",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * )",0
1122,"<S2SV_ModStart>. path ; memset ( pop3c -> mailbox, 0, sizeof ( pop3c -> mailbox ) ) ; <S2SV_ModStart> (! pop3c -> mailbox ) { kfree ( pop3c -> mailbox ) ; return CURLE_OUT_OF_MEMORY ; } <S2SV_ModEnd> return CURLE_OK ;",0
1123,"<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n""",0
1124,"<S2SV_ModStart>, ret ; if ( IS_IRAP ( s ) ) sh -> no_output_of_prior_pics_flag = 0 ; if ( IS_BLA ( s ) ) sh -> no_output_of_prior_pics_flag = get_bits1 ( gb ) ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! sh -> first_slice_in_pic_flag ) sh -> no_output_of_prior_pics_flag = get_bits1 ( gb ) ; sh -> sps = ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ; if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
1126,"<S2SV_ModStart>, u4_y_offset ; ps_dec -> u2_prev_intra_mb = 0 ; <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; } else { ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; } <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset = 0 ; ps_dec -> u2_prev_intra_mb = 1 ; ps_dec -> u2_",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = & pbi -> common ; YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } } else { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if ( equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ;",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( mbmi, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_",0
1130,<S2SV_ModStart> random_factor ) ; if ( mmap_is_legacy ( ) ) { mm -> mmap_base = mmap_legacy_base ( random_factor ) ; mm -> get_unmapped_area = arch_get_unmapped_area_topdown ; } else { mm -> mmap_base = mmap_base ( random_factor ) ; mm -> get_unmapped_area = arch_get_unmapped_area_topdown ; },0
1131,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1132,"<S2SV_ModStart> case 'x' : return getnum ( L, fmt, sizeof ( long ) ) ; case 'c' : return getnum ( L, fmt, sizeof ( long ) ) ; case 'i' : case 'I' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( long ) ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ) ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( long ) ) ; return 0 ; }",0
1133,"<S2SV_ModStart> nrow ) { TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) ; rowsperstrip = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; offset_row = <S2SV_ModStart> -> row_offset ; TIFFSetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) ; if ( nrow > 0 ) { TIFFSetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) ; rowsperstrip = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; offset_row = <S2SV_ModStart> -> row_offset ; TIFFSetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) ; if ( buf == NULL ) { TIFFSetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) ; rowsperstrip = ( row + img -> row_offset ) % row",0
1134,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ), NCH ( n ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", NCH ( n ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 0 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n, 1 ) ) ; Py_FatalError ( ""Comment <S2SV_blank> found: <S2SV_blank> %d <S2SV_blank> %d"", TYPE ( CHILD ( n,",0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
1136,"<S2SV_ModStart> - EINVAL ; type = PIDTYPE_MAX ; if ( upid < 0 ) { type = PIDTYPE_MAX ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid < 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else { wo. wo_info = NULL ; wo.",0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; num &= SWF_SBITS_MASK ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MAX ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MAX ; if ( num < SWF_SBITS_MIN / number ) return SWF_SBITS_MIN / number ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MIN / number ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MAX / number ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MAX / number ; if ( num < SWF_SBITS_MIN / number ) return SWF_SBITS_MIN / number ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MIN / number ; if ( num > SWF_SBITS_MAX / number ) return SWF_SBITS_MAX / number ; if ( num > SWF_SBITS_MAX / number ) return SWF_S,0
1139,<S2SV_ModStart> int w = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt,0
1140,"<S2SV_ModStart> ; uint16_t attr_len ; uint16_t orig_attr_len ; uint16_t bytes_left ; uint16_t blocks_left ; uint16_t last_block_len ; <S2SV_ModStart> avp -> length ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dm_dev = lc -> dev ; int ret ; ret = dm_bdev_ioctl ( dm_dev, cmd, arg ) ; if ( ret < 0 ) return ret ; ret = __blkdev_driver_ioctl ( dm_dev, dm_dev -> mode, cmd, arg ) ; if ( ret < 0 ) return ret ; ret = __blkdev_driver_ioctl ( dm_dev -> bdev, dm_dev -> mode, cmd, arg ) ; if ( ret < 0 ) return ret ; ret = dm_dev_driver_ioctl ( dm_dev, cmd, arg ) ; if ( ret < 0 ) return ret ; ret = __blkdev_driver_ioctl ( dm_dev, dm_dev -> mode, cmd, arg ) ; if ( ret < 0 ) return ret ; ret = __blkdev_driver_ioctl ( dm_dev, dm_dev -> mode, cmd, arg ) ; if ( ret < 0 ) return ret ;",0
1142,<S2SV_ModStart> ; actx -> key. counter [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> key. counter [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> key. counter [ 0 ] = actx -> key. counter [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> key. counter [ 5 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx,0
1143,<S2SV_ModStart> comm_event -> event_id. <S2SV_ModEnd> header. size,0
1144,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; create_empty_file_as_root ( RUN_LIB_FILE, 0644 ) ; if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path )",0
1145,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock, sk ) ; sa -> rc_family = AF_BLUETOOTH ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ;",0
1146,"<S2SV_ModStart> cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC <S2SV_ModEnd> ; if ( <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1151,<S2SV_ModStart> -> head <= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1152,"<S2SV_ModStart> ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( line, 0, sizeof ( line ) )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( line, 22, 0 )!= 22 ) return ; memset ( line,",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; <S2SV_ModStart> } # endif memcpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1, curconn -> pass_salt, 16 ) ; md5_init ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; if ( curconn -> state == STATE_ACTIVE ) { abort_connection ( curconn, pkthdr, _",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - 1 > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - 1 > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } if ( strlen ( path ) - 1 > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ;",0
1156,"<S2SV_ModStart> ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ;",0
1157,"<S2SV_ModStart> ; if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - EINVAL ; goto out_unmap ; }",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } pp -> response_time = RESP_TIMEOUT ; pp -> statemach_act = smtp_statemach_act ; pp -> endofresp = smtp_endofresp ; pp -> conn = conn ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } pp -> response_time = RESP_TIMEOUT ; pp -> statemach_act = smtp_statemach_act ; pp -> endofresp = smtp_endofresp ; pp -> conn =",0
1160,"<S2SV_ModStart> ; for ( j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( i = 0 ; i < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = 0",0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,"<S2SV_ModStart> 0 ) ; ret = - EINVAL ; goto out ; } if ( hdr_off + RDS_CONG_MAP_BYTES > sg -> length ) { ret = - EINVAL ; goto out ; } if ( conn -> c_fcong ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; ret = - EINVAL ; goto out ; } if ( conn -> c_fcong ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; ret = - EINVAL ; goto out ; } if ( ret ) goto out ; if ( conn -> c_fcong ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; ret = - EINVAL ; goto out ; } if ( conn -> c_loopback ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; ret = - EINVAL ; goto out ; }",0
1163,"<S2SV_ModStart> ; priv -> mii_base = devm_ioremap_nocache ( & pdev -> dev, r -> start, r -> end ) ; priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = mdiobus_alloc ( ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return - ENOMEM ; } priv -> mii_bus -> ops = & unimac_mdio_ops ; priv -> mii_bus -> ops = & unimac_mdio_ops ; priv -> mii_bus -> ops = & unimac_mdio_ops ; priv -> mii_bus -> ops = & unimac_mdio_ops ; priv -> mii_bus -> ops = & unimac_mdio_ops ; priv -> mii_bus -> ops = & unimac",0
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,"<S2SV_ModStart> ) ) { if ( ( JAS_CAST ( int, pchg -> pirlvl -> prclyrnos ) [ pi -> prcno ] >= JAS_CAST ( int, pchg -> pirlvl -> numprcs ) ) || ( JAS_CAST ( int, pchg -> pirlvl -> prclyrnos ) [ pi -> prcno ] >= JAS_CAST ( int, pchg -> pirlvl -> numprcs ) ) || ( JAS_CAST ( int, pchg -> pirlvl -> prclyrnos ) [ pi -> prcno ] >= JAS_CAST ( int, pchg -> pirlvl -> numprcs ) || ( JAS_CAST ( int, pchg -> pirlvl -> prclyrnos ) [ pi -> prcno ] >= JAS_CAST ( int, pchg -> pirlvl -> numprcs ) ) || ( JAS_CAST ( int, pchg -> pirlvl -> prclyrnos ) [ pi -> prcno ] >= JAS_CAST ( int, pchg -> pirlvl ->",0
1166,"<S2SV_ModStart>! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode",0
1167,"<S2SV_ModStart> goto out ; if (! xdr_ok ( xdr ) ) { status = - EINVAL ; goto out ; } status = nfs4_set_getacl ( & res -> acl, & hdr. fh, & res -> fmode ) ; if ( status ) goto out ; status = nfs4_set_getacl_nolock ( & res -> fmode, & res -> fmode, & res -> fmode ) ; if ( status ) goto out ; status = nfs4_set_getacl_nolock ( & res -> fmode, & res -> fmode, & res -> fmode ) ; if ( status ) goto out ; if (! res -> fmode ) status = nfs4_set_getacl_nolock ( & res -> fmode, & res -> fmode ) ; if (! res -> fmode ) status = nfs4_set_getacl_nolock ( & res -> fmode, & res -> fmode, & res -> fmode ) ; if (! res -> fmode ) status = nfs4_set_getacl_nolock ( & res -> fmode, &",0
1168,"<S2SV_ModStart> ) ) { * status = ""NON_TGT_OPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & KDC_OPT_ENC_TKT_IN_SKEY ) { * status = ""NON_TGT_OPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & KDC_OPT_ENC_TKT_IN_SKEY ) { * status = ""NON_TGT_OPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & KDC_OPT_ENC_TKT_IN_SKEY ) { * status = ""NON_TGT_OPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & KDC_OPT_ENC_TKT_IN_SKEY ) { * status = ""NON_TGT_OPTION"" ; return KRB5KDC_ERR_BADOPTION ; } if ( request -> kdc_options & KDC_OPT_ENC_TKT_IN",0
1169,"<S2SV_ModStart> ( clone_flags & CLONE_SETTLS ) { thread -> tp_value = childregs -> ARM_r3 ; thread_notify ( THREAD_NOTIFY_COPY, thread ) ; return 0 ; } <S2SV_ModEnd> return 0 ;",0
1170,"<S2SV_ModStart> bufsize ) { JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_initbuf ( stream, JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY, 0, 0 ) ; stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( stream = jas_stream_create ( ) ) ) { return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> * key = NULL ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart>, * userstyle <S2SV_ModEnd> = NULL, <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart> ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype ; int authenticated = 0 ; struct sshauthopt * authopts = NULL ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & slen ) )!= 0 || ( r =",0
1172,"<S2SV_ModStart> ; uint32_t bcount ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> = 0 ; if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! ( config -> qmode & QMODE_READ_DATA ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1173,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sasl_failure ( s,",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
1176,<S2SV_ModStart> ( ext2_get_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1177,<S2SV_ModStart> bd_addr ) { int ret ; ret = btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_SUCCESS ) return btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_SUCCESS ) return btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_SUCCESS ) return btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_SUCCESS ) return btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_SUCCESS ) return btif_dm_remove_bond ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ;,0
1178,"<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n"", tcp_hdrlen ) ; return - 1 ; } if ( tcp_hdrlen + TCPOLEN_MSS > len ) { net_err_ratelimited ( ""invalid <S2SV_blank> path-MSS <S2SV_blank> (%u)\\n""",0
1179,"<S2SV_ModStart> int i ; memset ( matrix, 0, sizeof ( jas_matrix_t ) ) ; matrix = jas_malloc ( sizeof ( jas_matrix_t ) ) ; if ( matrix ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = 0 ; matrix -> numcols_ = 0 ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( matrix -> data_ = jas_alloc2 ( matrix -> data_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_",0
1180,"<S2SV_ModStart> ; tmp_hdr = rcu_dereference_protected ( np -> tmp_hdr, sock_owned_by_user ( net -> ipv4. ip_hdr_cache ) ) ; if (! tmp_hdr ) { IP6_INC_STATS ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; } <S2SV_ModStart>! tmp_hdr ) { IP6_INC_STATS ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; return - EMSGSIZE ; } IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ; if (! tmp_hdr ) { IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS",0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_request * r ; if (! qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> lun <S2SV_blank> %d\\n"", __func__, tag ) ; return NULL ; } <S2SV_ModStart> scsi_disk_reqops, & s -> qdev, tag, lun, hba_private ) ; if (! r ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> lun <S2SV_blank> %d\\n"", __func__, tag ) ; return NULL ; } r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; if (! r ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> lun <S2SV_blank> %d\\n"", __func__, tag ) ; return NULL ; }",0
1182,"<S2SV_ModStart> int i ; size_t <S2SV_ModEnd> avail ; int <S2SV_ModStart> buf, 4 ) ; if ( nxip < 0 ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } <S2SV_ModStart> ; expect = <S2SV_ModEnd> 8 + nxip <S2SV_ModStart> * 8 ; if ( expect < 0 || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( snap, nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ;",0
1185,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> ) & cb -> args [ 0 ] <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> = NLM_F_MULTI ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; if (! cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; if (! cb",0
1186,<S2SV_ModStart> = - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> = upperdir -> d_inode <S2SV_ModEnd> ; int err <S2SV_ModStart> = - ESTALE ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1188,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL,",0
1189,<S2SV_ModStart> (! * ptrptr <S2SV_ModEnd> &&! (,0
1190,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = get_html_data ( a ) ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies =,0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1192,"<S2SV_ModStart> ( ) >= 2 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> ( jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> ( jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> ( jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> ( jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> ( jas_getdbglevel ( ) >= 3 ) { jas_eprintf",0
1193,,1
1194,"<S2SV_ModStart> ) { journal_t * journal = NULL ; if ( page -> mapping -> host!= ext4_current_host ( ) ) journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else",0
1195,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = GF_SelfContainedType ( writer -> mdia ) ; writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE <S2SV_ModStart> < S2SV_null> <S2SV_null> UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE <S2SV_ModStart> 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF ; * out ++ = 0xFF,0
1197,"<S2SV_ModStart> 17 ] ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; # endif <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, password, 82 ) ; md5data [ 82 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control",0
1198,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; Com_sprintf ( libPath, sizeof ( libPath ), ""%s%c%s"", basePath, PATH_SEP, name ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; return NULL ;",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> ( sum ) ( <S2SV_ModEnd> bits <= 24 <S2SV_ModStart> bits <= 24 ) { if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } else { count = AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; } if ( p >= buffer + 0x800 ) { count = ReadBlob ( image, 0x800, buffer ) ; p = buffer ; } else { count = AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; }",0
1201,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ;",0
1202,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1203,"<S2SV_ModStart> # ifdef HAVE_IPV6 char * p ; if ( str_len > 1 ) { p = memchr ( str + 1, '[', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; host = estrndup ( str, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } # endif if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, """,0
1204,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_width ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) && ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( ( src_ybc -> flags & YV12_FLAG",0
1205,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( c -> cblk_style!= 0 ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> %X\\n"", c -> cblk_style ) ; }",0
1206,"<S2SV_ModStart> ( '%' == <S2SV_ModEnd> ptr [ 1 <S2SV_ModStart> 1 ] ) { ptr += 2 ; } else if ( '{' == ptr [ 1 ] ) { if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> mb. e_mbd <S2SV_ModEnd> ; SPEED_FEATURES * <S2SV_ModStart> mi_col ; int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x",0
1208,"<S2SV_ModStart> ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; tptr = pptr ; lmp_obj_header = ( const struct lmp_object_header * ) pptr ; lmp_obj_len = ( const struct lmp_object_header * ) pptr ; obj_tlen = ( const u_char * ) pptr ; ND_TCHECK ( * lmp_obj_header ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return",0
1209,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> mbmi, const int_mv <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> ) { const MV * ref = mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; nmv_context_counts * counts = mbmi -> counts ; vp9_inc_mv ( & diff, counts ) ; for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } for ( i = 0 ; i < 2 + has_second_ref ( mbmi ) ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; }",0
1212,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ;,0
1213,<S2SV_ModStart> perf_paranoid_kernel ( ) &&! capable ( CAP_SYS_TRACE ) ) return - EPERM ; if ( p_event -> attr. sample_type & PERF_SAMPLE_RAW ) return 0 ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } else { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; } else { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_RAW ) return 0 ; } if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags &,0
1214,"<S2SV_ModStart> 1 ) ; if ( data_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if ( control_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; }",0
1215,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1216,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( confmibs",0
1217,"<S2SV_ModStart> sctp_bind_hashbucket * head <S2SV_ModEnd> ; struct list_head <S2SV_ModStart> do_auto_asconf ) { sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) { sctp_ulpevent_free ( event ) ; sctp_ulpevent_free ( event ) ; } sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) { sctp_ulpevent_free ( event ) ; } sctp_skb_for_each ( skb, & assoc -> asconf_queue, tmp ) { sctp_ulpevent_free ( event ) ; sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) { sctp_ulpevent_free ( event ) ; } sctp_skb_for_each ( skb, & assoc -> asconf_list, tmp ) { sctp_ulpevent_free ( event ) ; } sctp_skb_for_each ( skb, & assoc -> asconf_queue, tmp ) { sctp_ulpevent_free",0
1218,"<S2SV_ModStart> open ( uinput_dev_path <S2SV_ModEnd> [ x ] <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, NULL ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable",0
1219,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> <S2SV_null> <S2SV_null> krb5_error_code <S2SV_ModEnd> iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( GetImageExtent ( screen ) == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( screen, screen -> columns, screen -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) )",0
1225,"<S2SV_ModStart>!= START_CODE_PREFIX ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; } while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, 8 ) ; } while ( u4_start_code == USER_DATA_START_CODE ) { while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, START_CODE_LEN ) ; while ( u4_start_code == USER_DATA_START_CODE ) { u4_start_code = impeg2d_bit_stream_nxt ( ps_stream, 8 ) ; } while ( u4_start_code ==",0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) goto out ;",0
1227,<S2SV_ModStart> imethod ) ; g_object_unref ( rmethod -> object ) ; <S2SV_ModStart> imethod ) ; g_object_unref <S2SV_ModEnd> ( rmethod -> <S2SV_ModStart> imethod ) ; g_object_unref <S2SV_ModEnd> ( rmethod -> <S2SV_ModStart> imethod ) ; g_object_unref <S2SV_ModEnd> ( rmethod -> <S2SV_ModStart> imethod ) ; g_object_unref <S2SV_ModEnd> ( rmethod -> <S2SV_ModStart> imethod ) ; g_object_unref ( rmethod -> object ) ; MONO_ARCH_SAVE_REGS ; g_object_unref ( rmethod -> object ) ;,0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] <S2SV_ModEnd> ; int tmp <S2SV_ModStart> ; if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1230,"<S2SV_ModStart> bh ) ; if ( buffer_uptodate ( bh ) ) { f2fs_msg ( sb, KERN_ERR, ""Block <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"" ) ; return 1 ; }",0
1231,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> char * last_elem <S2SV_ModStart> if ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 11 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const",0
1232,<S2SV_ModStart> } pDecCont = ( decContainer_t * ),0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space ; struct ipv6_txoptions_rcu * rcu <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> final_p ) ; rcu = rcu_dereference_protected ( rp -> rcu, sock_owned_by_user ( sk ) ) ; if ( rcu ) { rcu_assign_pointer ( rp -> rcu, final_p ) ; rcu = rcu_dereference_protected ( inet -> rcu, sock_owned_by_user ( sk ) ) ; rcu_assign_pointer ( rp -> rcu, final_p ) ; rcu = rcu_dereference_protected ( inet -> rcu, sock_owned_by_user ( sk ) ) ; if ( rcu ) { rcu_assign_pointer ( rp -> rcu, final_p ) ; rcu = rcu_dereference_protected ( inet -> rcu, sock_owned_by_user ( sk ) ) ; rcu_assign_pointer ( rp -> rcu, final_p ) ; rcu = rcu_dereference_protected (",0
1234,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; <S2SV_ModStart> return 0 ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen!= sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen!= sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen!= sizeof ( struct iphdr ) ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iph",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ; if ( rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif && rtm -> rt_iif!= rtm -> rt_iif ) { err = - EINVAL ; goto errout ; },0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( vi -> flags & VORBIS_FLAG_OVERFLOW ) { vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; } <S2SV_ModStart> goto errout ; if ( vi -> flags & VORBIS_FLAG_OVERFLOW ) { if ( vi -> flags & VORBIS_FLAG_OVERFLOW ) { vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; } <S2SV_ModStart> goto errout ; if ( vi -> flags & VORBIS_FLAG_OVERFLOW ) { if ( vi -> flags & VORBIS_FLAG_OVERFLOW ) { vi -> flags &= ~ VORBIS_FLAG_OVERFLOW ; vi -> flags &= ~ VORBIS_FLAG_OVERFLOW,0
1239,"<S2SV_ModStart> -> count ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ; if ( copied > 0 ) tcp_cleanup_rbuf ( sk, copied ) ; return copied ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq",0
1240,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> krb5_key_data * key_data <S2SV_ModStart> key_data ), & err ) ; if ( key_data == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> ( key_data_in == NULL ) { err = ENOMEM ; goto cleanup ; } memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) { err = ENOMEM ; goto cleanup",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = ( <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { pCsr -> zInput = sqlite3_calloc ( nByte + 1, GFP_KERNEL ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pC",0
1243,<S2SV_ModStart> filp ) { return fput ( filp ) ; },0
1244,"<S2SV_ModStart> expr_ty iter, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_sort_index ( MI_CHECK * param, register MI_INFO * info, <S2SV_ModEnd> char * name <S2SV_ModStart> name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILE",0
1246,"<S2SV_ModStart> } } opt = rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1247,"<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) {",0
1248,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_",0
1249,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif <S2SV_ModStart> case EVENTID_RESUME_TOUCH : if ( ( error = rdpei_recv_resume_touch_pdu ( callback, s ) ) ) { WLog_ERR ( TAG, ""rdpei_recv_resume_touch_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_send_cs_ready_pdu ( callback ) ) ) { WLog_ERR ( TAG, ""rdpei_send_cs_ready_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", error ) ; return error ; } if ( ( error = rdpei_recv_suspend_touch_pdu ( callback, s ) ) ) { WLog_ERR ( TAG, ""rdpei",0
1250,<S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_hops ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData <S2SV_ModStart> - 1 ) <S2SV_ModEnd> zsocket_set_multicast_wakeup ( pData,0
1251,"<S2SV_ModStart> < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; ret = - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode ->",0
1252,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct flowi6 <S2SV_ModStart> fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) ) ; <S2SV_ModStart> = 1 ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_UNICAST ) { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, & fl6, & fl6. daddr, & fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; } else { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, & fl6, & fl6. daddr, & fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPP",0
1253,"<S2SV_ModStart> ; root_info = kmem_cache_alloc ( ecryptfs_dentry_info_cache, GFP_KERNEL ) ; if (! root_info ) { rc = - ENOMEM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } root_info = kmem_cache_alloc ( ecryptfs_dentry_info_cache, GFP_KERNEL ) ; if (! root_info ) { rc = - ENOMEM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> length <S2SV_blank> in <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return - 1 ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> length <S2SV_blank> in <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return - 1 ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> length <S2SV_blank> in <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return - 1 ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> length <S2SV_blank> in <S2SV_blank> negotiation <S2SV_blank> request"" ) ; return - 1 ; }",0
1257,"<S2SV_ModStart> ; int ret = 0 <S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; last_pwd = adb. last_pwd ; have_pol = TRUE ; last_pwd = adb. last_pwd ; if ( have_pol ) last_pwd = adb. last_pwd ; if ( last_pwd!= adb. last_pwd ) last_pwd = adb. last_pwd ; if ( last_pwd!= adb. policy ) last_pwd = adb. last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; new_n_ks_tuple = 1 ; ret = apply_keysalt_policy ( handle, adb. policy, last_pwd, n_ks_tuple, ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple",0
1258,"<S2SV_ModStart>, result = RLC_ERR ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b (",0
1259,<S2SV_ModStart> ) ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( hctx ->,0
1262,"<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( strcmp ( path, ""-"" ) == 0 ) psf -> error = psf_set_stdio ( psf ) ; else psf -> error",0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> counts. highbitdepth > 0 ) count [ i ] += cm -> counts. highbitdepth_switchable_interp [ j ] [ i ] ; else count [ i ] += cm -> counts. lowbitdepth_switchable_interp [ j ] [ i ] ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. highbitdepth_switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] > 0 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] > 0 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] > 0 ) {,0
1264,"<S2SV_ModStart> token ++ ; } if (! token ) { return false ; } if ( token [ 0 ] == '[' ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; }",0
1265,"<S2SV_ModStart> ) { MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; VP9_COMMON <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> x -> act_zbin_adj <S2SV_ModStart> = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * aligned_mi_cols * MAX_MB_PLANE ) ; }",0
1266,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSP ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> retval = htc_request_check_host_hdr <S2SV_ModStart>!= 0 ) { WSP ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModEnd> return ( retval <S2SV_ModStart> retval ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1267,"<S2SV_ModStart> EOFOp 0x07 char <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } <S2SV_ModStart> ctl_files_rwlock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> ctl_files_rwlock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank>",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ) ),0
1271,<S2SV_ModStart> i4_poc ) { ps_dec -> s_cur_slice_poc = ps_cur_poc ; ps_dec -> s_cur_slice_offset = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_lsb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_lsb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_slice_offset_msb = 0 ; ps_dec -> s_cur_,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; item = pitem_new ( priority, rdata ) ; if ( item == NULL ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( rdata ) ; pitem_free ( item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; } # ifndef OPENSSL_NO_SCTP if ( BIO_dgram_is_sctp ( s ) ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_free ( rdata ) ; pitem_free ( item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; } # ifndef OPENSSL_NO_SCTP if ( s -> state == SSL3_ST_SR_FINISHED_A ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ;",0
1273,"<S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } <S2SV_ModEnd> exec2_list = kmalloc <S2SV_ModStart> exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> struct pci_dev * pdev <S2SV_ModEnd> ; int port <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> ) ) ; kfree ( karg ) ; return - ENODEV ; } karg = memdup_user ( uarg, data_size ) ; if ( IS_ERR ( karg ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> - <S2SV_blank> memdup_user <S2SV_blank> returned <S2SV_blank> error <S2SV_blank> [%ld]\\n"", __FILE__, __LINE__, PTR_ERR ( karg ) ) ; kfree ( karg ) ; return PTR_ERR ( karg ) ; } karg = memdup_user ( uarg, data_size ) ; if ( IS_ERR ( karg ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mpt_ioinfo() <S2SV_blank> -",0
1275,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int mount_entry_on_generic ( <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModStart> mntflags, mntdata <S2SV_ModEnd>, optional )",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> * ab ) { int i, len <S2SV_ModEnd> ; size_t len_sent <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * buf <S2SV_ModStart> ( * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! len ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p,",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd>, mode >",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; int pkt_len ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } else { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1280,"<S2SV_ModStart> rq ) { struct kvm_vcpu * vcpu = & __get_cpu_var ( <S2SV_ModStart> rq ) ; struct kvm_vcpu * vcpu = & __get_cpu_var ( kvm_vcpu_info, cpu ) ; struct kvm_vcpu * old_rq = & __get_cpu_var ( kvm_vcpu_info, cpu ) ; struct kvm_vcpu * old_rq = & __get_cpu_var ( kvm, cpu ) ; if ( rq -> skip_clock_update ) { struct kvm_vcpu * old_rq = & __get_cpu_var ( __kvm_vcpu_info, cpu ) ; struct kvm_vcpu * old_rq = & __get_cpu_var ( kvm_vcpu_info, cpu ) ; struct kvm_vcpu * old_rq = & __get_cpu_var ( kvm, cpu ) ; if ( rq -> skip_clock_update ) { struct kvm_vcpu * old_rq = & __get_cpu_var ( __kvm_vcpu_info,",0
1281,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1282,"<S2SV_ModStart> st ) { <S2SV_ModEnd> struct blkif_response resp <S2SV_ModStart> int notify ; unsigned long flags ; union blkif_back_rings * blk_rings ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; }",0
1283,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ; } if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ; } if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ),0
1284,"<S2SV_ModStart> ; if ( ( exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en ->",0
1285,"<S2SV_ModStart> ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; } if ( outname == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName ) ; return 1 ; }",0
1286,<S2SV_ModStart> ; ND_TCHECK ( ext_dp -> icmp_ext_hdr_len ) ; if ( ext_dp -> icmp_ext_hdr_len!= sizeof ( struct icmp_mpls_ext_hdr_t ) ) { ND_TCHECK ( ext_dp -> icmp_ext_hdr_len ) ; if ( ext_dp -> icmp_ext_hdr_len!= sizeof ( struct icmp_mpls_ext_hdr_t ) ) { ND_TCHECK ( ext_dp -> icmp_ext_hdr_len ) ; if ( ext_dp -> icmp_ext_hdr_len!= sizeof ( struct icmp_mpls_ext_hdr_t ) ) { ND_TCHECK ( ext_dp -> icmp_ext_hdr_len ) ; if ( ext_dp -> icmp_ext_hdr_len!= sizeof ( struct icmp_mpls_ext_hdr_t ) ) { ND_TCHECK ( ext_dp -> icmp_ext_hdr_len ) ; if ( ext_dp -> icmp_ext_hdr_len!= sizeof ( struct icmp_mpls_ext_hdr_t,0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> ; } ci = d_inode ( dentry ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ( ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ; <S2SV_ModStart> d_lock ) ; if ( ci && ci -> ci_keyring_key && ( ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_INVALIDATED ) ) ci = NULL ; <S2SV_ModStart> -> ci_keyring_key && ( ci -> ci_keyring_key -> flags & ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ; spin_lock ( & dentry -> d_lock ) ; cached_with_key = dentry -> d_flags & DCACHE_ENCRYPTED_WITH_KEY ; spin_unlock ( & dentry -> d_lock ) ; if (,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; if ( stunnel_locks [ LOCK_SECTIONS ] == NULL ) { s_log ( LOG_INFO, ""Unbinding <S2SV_blank> ports"" ) ; return - 1 ; } s_log ( LOG_INFO, ""Unbinding <S2SV_blank> ports"" ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { opt -> option. retry = 0 ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"",",0
1289,"<S2SV_ModStart> ; } numbers [ argc ] = ( unsigned long ) mtree_atol ( & p ) ; if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" )",0
1290,<S2SV_ModStart> parent ) ; context. curX = i -> posX ; context. curY = i -> posY ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0 ; context. line_p. p16 = 0,0
1291,"<S2SV_ModStart> if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if (",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1293,<S2SV_ModStart> void ) { if ( recovery_is_in_recovery_mode ( ) ) { recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) ) ; } else { recovery_is_in_recovery_mode = ( recovery_is_in_recovery_mode ( ) )? recovery_is_in_recovery_mode ( ) : recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( ) : ( recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( ) : ( recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( ) : ( recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( ) : recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( ) : ( recovery_is_in_recovery_mode ( )? recovery_is_in_recovery_mode ( ) : ( recovery_is_in_recovery_mode ( ),0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> request <S2SV_blank> type=%d <S2SV_blank> str=\'%.*s\'"", req -> socket, type, ( unsigned char * ) d -> headers [ HEADER_NT ]. p, ( unsigned char * ) d -> headers [ HEADER_USN ]. p, ( unsigned char * ) d -> headers [ HEADER_USN ]. p, ( unsigned char * ) d -> headers [ HEADER_LOCATION ]. p, l ) ) || ( LOG_INFO, ""(s=%d) <S2SV_blank> request <S2SV_blank> type=%d <S2SV_blank> str=\'%.*s\'"", req -> socket, type, ( unsigned char * ) d -> headers [ HEADER_NT ]. p, ( unsigned char * ) d -> headers [ HEADER_USN ]. p, ( unsigned char * ) d -> headers [ HEADER_USN ]. p, ( unsigned char * ) d -> headers [ HEADER_LOCATION ]. p, l ) ) || ( LOG_INFO, ""(s=%d) <S2SV_blank> request <S2SV_blank> type=%d <S2SV_blank> str=\'%.*s\'"", req -> socket, type, ( unsigned char * ) d -> headers [ HEADER_NT ]. p, ( unsigned char *",0
1297,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 ihevcd_ref_list ( codec_t * ps_codec, pps_t * ps_pps, sps_t * ps_sps, slice_header_t * ps_slice_hdr ) { return - 1 ; } <S2SV_ModEnd> dpb_mgr_t * ps_dpb_mgr <S2SV_ModStart> ps_slice_hdr ) { ps_dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_mv_buf_mgr ; WORD32 ai4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_st_",0
1298,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = get_user ( child -> thread. tp_value, datap ) ; break ; case PTRACE_GET_SYSCALL : ret = ptrace_getsyscall ( child ) ; break ; case PTRACE_SET_SYSCALL : ret = ptrace_setsyscall ( child, datap ) ; break ; case PTRACE_GETFPREGS : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_regs ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_GETWMMXREGS : ret = ptrace_getwmm",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ; goto fail ; } if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) ) { ret = - EINVAL ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, ( void __user * ) ( uintptr_t ) args -> uniforms_u, args -> uniforms_size ) ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * ) ( uintptr_t ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, ( void __user * ) ( uintptr_t ) args -> uniforms_u, args -> uniforms_size ) ) { ret =",0
1300,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { <S2SV_ModEnd> ++ numentries ; <S2SV_ModStart> = child -> next ; } if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0,0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,"<S2SV_ModStart> ; other = unix_get_peer ( sk ) ; if ( other ) { if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } else { if ( unix_recvq_full ( other ) ) writable = 0 ; } } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_peer ( other )!= sk ) { if ( unix_peer ( other )!= sk ) { if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } else { if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other",0
1303,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] ; quantum. unsigned_value = ( value & 0xffffffff ) ; return ( quantum. unsigned_value ) <S2SV_ModEnd> ; } <S2SV_null>,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ioc ; spin_lock_irq ( & ioc -> ioc_lock <S2SV_ModEnd> ) ; ioc <S2SV_ModStart> -> io_context ; spin_unlock_irq ( & ioc -> ioc_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> ioc = current <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context = NULL ; spin_unlock_irq ( & ioc -> ioc_lock <S2SV_ModEnd> ) ; if,0
1306,<S2SV_ModStart> 0 ) { if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { *,0
1307,"<S2SV_ModStart> data ) { unsigned int i <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; ret = xen_pcibk_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart>, value, data ) ; if ( ret ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_ref_frame_t * frame = va_arg ( args, vp9_ref_frame_t * ) ; if ( frame == NULL ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> } } <S2SV_null>,0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,"<S2SV_ModStart> dwc ; if ( req -> started ) { list_del ( & req -> list ) ; req -> remaining = 0 ; if ( req -> request. status == - EINPROGRESS ) req -> request. status = status ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; req -> trb = NULL ; } spin_lock ( & dwc -> lock ) ; if ( dep -> number > 1 ) pm_runtime_put ( dwc -> dev ) ; }",0
1312,"<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyssa, yyss ) ; yytype_int16 * yyssp = yyss ; yytype_int16 * yyvs ; yytype_int16 * yyvs1 = yyvs ; yytype_int16 * yyvs1 = yyvs ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, & yyvs1, & yysize * sizeof ( * yyvsp ), & yystacksize ) ; <S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyssa, yyss ) ; yytype_int16 * yyssp = yyss ; yytype_int16 * yyvs1 = yyvs ; yytype_int16 * yyvs1 = yyvs ; yyoverflow ( YY_ ( ""memory <S2SV_blank> exhausted"" ), & yyss1, & yyvs1, & yysize * sizeof ( * yyssp ), & yystacksize ) ; yyss = yyss1 ; yyvs = yyvsa ; yyss = yyss ; yytype_int16 * yyss1 = yyss ; yytype_int16 *",0
1313,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices <S2SV_ModEnd>, [ DISCE_RESUME <S2SV_ModStart> DISCE_DESTRUCT ] = sas_destruct_devices <S2SV_ModEnd>, } ;",0
1314,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ) ) { printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""- <S2SV_blank> re",0
1315,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( length, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto tooshort ; <S2SV_ModStart> ; tooshort : ND_TCHECK2 ( length, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto trunc ;",0
1317,"<S2SV_ModStart> = sk -> sk_family <S2SV_ModEnd> ; int copied <S2SV_ModStart> out ; if ( msg -> msg_name ) { struct sockaddr_in * sin ; struct sockaddr_in6 * sin6 ; sin6 = ( struct sockaddr_in6 * ) msg -> msg_name ; sin = ( struct sockaddr_in6 * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; <S2SV_ModStart> sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; if ( sin6 ) { pr_debug ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"", isk, isk -> inet_num ) ; * addr_len = sizeof ( * sin6 ) ;",0
1318,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ;",0
1319,<S2SV_ModStart> ; } else <S2SV_ModEnd> { uint32_t new_free_total <S2SV_ModStart> free ( buf ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; bpf_map_inc_nolock <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> tp ; { <S2SV_ModEnd> int cval = <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } <S2SV_ModEnd> ipfix_template_record = ( <S2SV_ModStart> ipfix_template_record_t * ) DataPtr ; count = ntohs ( ipfix_template_record -> FieldCount ) ; memset ( ( void * ) cache. common_extensions, 0, count ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element_map",0
1324,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1 ; for ( j = 0 ; j < w ; j ++ ) lut [ j ] = - 1",0
1325,"<S2SV_ModStart>, ubits = BN_num_bits ( u ), vbits = BN_num_bits ( v ) ; if ( ubits > BN_num_bits ( c ) ) goto err ; if ( vbits > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_",0
1326,<S2SV_ModStart> = 256 ; int old_mv_mode_penalty = 256 ; <S2SV_ModStart> vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col = 0 ; ref_mv_full. as_mv. row = 0 ; ref_mv_full. as_mv. col =,0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } else { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } <S2SV_ModEnd> msg -> readcount",0
1329,"<S2SV_ModStart> int err = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> -> count ; if ( snd_ctl_find_id ( card, & id ) ) { dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; if ( idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,<S2SV_ModStart> = dev ; dev -> netdev_ops = & usbnet_netdev_ops ; if ( interface -> desc. bNumInterfaces < 1 ) { status = - ENODEV ; goto out ; } dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; if ( interface -> desc. bNumInterfaces < 1 ) { status = - ENODEV ; goto out ; } dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; if ( interface -> desc. bNumInterfaces < 1 ) { status = - ENODEV ; goto out ; } dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; dev -> netdev_ops = & usbnet_netdev_ops ; dev ->,0
1331,"<S2SV_ModStart> * data ; const size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; const size_t size = overhead ; if ( bson_size ( bsons [ i ] ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } size = overhead ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; }",0
1332,<S2SV_ModStart> ( textview ) ) { gtk_text_view_free ( textview ) ; gtk_text_view_free ( textview ) ; gtk_dialog_destroy ( GTK_DIALOG ( dialog ) ) ; gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; },0
1333,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval ) { retval = - EPERM ; goto err_out ; } <S2SV_ModEnd> retval = v9fs_vfs_setattr_dotl <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ; <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case",0
1335,<S2SV_ModStart> ) ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( <S2SV_ModStart> ) ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( <S2SV_ModStart> ) ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes,0
1336,<S2SV_ModStart> case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE ;,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( correction_factor > get_rate_correction_factor ( cpi ) ) { correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs",0
1339,"<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg ( <S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg ( <S2SV_ModStart> value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( j < NCH ( n ) && <S2SV_ModEnd> TYPE ( CH,0
1343,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, uint8_t * left_col, uint8_t * above_data, uint8_t * above_row, const int bs, int x, int y, int plane ) { int i ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; uint8_t * above_row = above_data + 128 ; uint8_t * const_above_row = above_row + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv",0
1344,"<S2SV_ModStart> ; } else if ( end == 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1345,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1346,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_datasync_tid = 0 ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; },0
1347,"<S2SV_ModStart> (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; <S2SV_ModStart> synchronize_rcu ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ion_handle * <S2SV_ModEnd> ion_handle_get_by_id ( struct <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = idr_find_entry ( & client -> idr, id ) ; if ( handle ) ion_handle_get ( handle ) ; mutex_unlock ( & client -> lock ) ; return handle <S2SV_ModEnd> ; } <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cpi -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> common ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vpx_wb_write_bit ( wb, cm -> bit_depth - BITS_10 )",0
1350,"<S2SV_ModStart> long long_tmp ; <S2SV_ModEnd> strncpy ( col_nam <S2SV_ModStart> col_nam, sizeof ( col_nam ) ) ; <S2SV_ModEnd> strncpy ( col_nam <S2SV_ModStart> col_nam, sizeof ( col_nam ) ) ; <S2SV_ModEnd> strncpy ( col_nam <S2SV_ModStart> col_nam, sizeof ( col_nam ) ) ; <S2SV_ModEnd> strncpy ( col_nam <S2SV_ModStart> col_nam, sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy ( col_nam, ""name"", sizeof ( col_nam ) ) ; strncpy (",0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1352,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; i += 1 ; break ; } if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT_TYPE : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> segment_feature_data, 0, sizeof ( xd -> segment_feature_data ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> <S2SV_ModEnd> ref_lf_deltas, 0 <S2SV_ModStart> ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ;",0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; status = letoh32 ( status ) ; if ( ( status & ENC624J600_RSV_RECEIVED_OK )!= 0 ) { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_RX_BUFFER_START ) ; enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, EN",0
1355,"<S2SV_ModStart> == 0x01 ) { if ( i + 1 >= GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", GEMSAFE_MAX_OBJLEN ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( i + 1 >= GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", GEMSAFE_MAX_OBJLEN ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( i + 1 >= GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", GEMSAFE_MAX_OBJLEN ) ; return SC_ERROR_INTERNAL ; }",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VALUE read_memory ( int argc, VALUE klass, VALUE content ) { xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, ( int ) RINT_MAX <S2SV_ModEnd> ) ; xmlSchemaParserCtxtPtr <S2SV_ModStart> xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, ( int ) RINT_MAX <S2SV_ModEnd> ) ; VALUE <S2SV_ModStart> rb_schema ) ; errors = rb_ary_new ( ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; xmlSetLastError ( NULL, error ) ; Nokogiri_error_raise ( NULL, error ) ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( NULL, Nokogiri_error_array_push",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> par ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1359,"<S2SV_ModStart> ; if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line <S2SV_blank> length <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line <S2SV_blank> length <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_line ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> line <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,<S2SV_ModStart> / 2 ] ; out [ 3 ] = 0x00 ; out [ 4 ] = 0x00 ; out [ 5 ] = 0x00 ; out [ 6 ] = 0x00 ; out [ 7 ] = 0x00 ; out [ 8 ] = 0x00 ; out [ 9 ] = 0x00 ; out [ 10 ] = 0x00 ; out [ 11 ] = 0x00 ; out [ 12 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 12 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 13 ] = 0x00 ; out [ 14 ] = 0x00 ; out [ 15 ] = 0x00 ; out [ 15 ] = 0x00 ;,0
1361,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,"<S2SV_ModStart> ; err = sock_owned_by_user ( sk ) ; if ( err ) goto out ; err = - EBUSY ; if (! list_empty ( & fanout_list ) ) { list_add_tail ( & po -> list, & fanout_list ) ; list_del_init ( & fanout_list ) ; list_add_tail ( & po -> list, & fanout_list ) ; list_add_tail ( & po -> list, & fanout_list ) ; list_for_each_entry ( f, & fanout_list, list ) { struct net_device * dev = sock_net ( sk ) ; spin_lock_bh ( & dev -> sk_list_lock ) ; spin_unlock_bh ( & dev -> sk_list_lock ) ; spin_lock_bh ( & dev -> sk_list_lock ) ; spin_lock_bh ( & dev -> sk_list_lock ) ; list_for_each_entry ( f, & fanout_list, list ) { struct net_device * dev = sock_net ( sk ) ; spin_lock_bh ( &",0
1364,<S2SV_ModStart> ; if ( handle -> event ) { handle -> event -> pending_wakeup = 1 ; perf_event_wakeup ( handle -> event ) ; } else <S2SV_ModEnd> { handle -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; if ( <S2SV_ModEnd> u >= PLANE_SIZE <S2SV_ModStart> ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_",0
1366,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> i ; if <S2SV_ModStart> || ( s -> state & PNG_PLTE ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ;",0
1368,<S2SV_ModStart> = AF_INET6 ; } if ( PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET6 ; } else { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_FH_ID ( p ) ; } dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> remove = 0 ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ;,0
1369,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( KSZ8851_RXFHSR_RXFV | KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXCE ) )!= 0",0
1370,"<S2SV_ModStart> * n, bool <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) { tc = CHILD ( n, name_i + 3 ), 1 ) ; if ( TYPE ( tc ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( tc ) ; } else if ( NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) { type_comment = NEW_TYPE_COMMENT ( tc ) ;",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pgd = swapper_pg_dir + pgd_index ( mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pud, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; if ( pte_none_or_clear_bad ( pte ) ) goto out ;",0
1372,"<S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; if ( error ) return error ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args = skip_spaces ( args ) ; if (! * args ) return - EINVAL ; args = strsep ( & args, "" <S2SV_blank> "" ) ; if (! * args ) return - EINVAL ; args =",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if (! jas_getuint16 ( in, & siz -> caps ) ||! siz -> width ||! siz -> height ||! siz -> tilewidth ||! siz -> tileheight ||! siz -> numcomps || siz -> numcomps || siz -> numcomps > 16384 ) { return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1",0
1374,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( handle, * packet_data_pptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> -",0
1375,"<S2SV_ModStart> = 0 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_",0
1376,"<S2SV_ModStart> ; size_t total_len = iov_len ( iov, nr_segs ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return <S2SV_ModEnd> 0 ; do_wakeup <S2SV_ModStart> ; size_t chars = iov_len ( iov, nr_segs ) <S2SV_ModEnd> ; int error <S2SV_ModStart>, atomic ; if ( unlikely ( total_len < buf -> len ) ) { ret = total_len ; do_wakeup = 1 ; break ; } <S2SV_ModStart> ; error = <S2SV_ModEnd>! iov_fault_in_pages_write ( <S2SV_ModStart>, buf ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> error = pipe_iov_copy_to_user <S2SV_ModStart> buf ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { buf -> ops = NULL ; ops -> release ( pipe, buf ) ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_",0
1377,"<S2SV_ModStart> GIFOutputCode ( code ) { if ( bits + number_bits > data_size ) { MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( ""MagickError(MagickError(MagickError(MagickError ( ""MagickError(MagickError"", ""MagickError_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,"<S2SV_ModStart> ] ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> res ) ; res = - 1 ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> %d\\n"", res ) ; res = - 1 ; goto die_clean ; } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; res = - 1 ; goto die_clean ; } <S2SV_ModStart> res ) ; res = - 1 ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; res = - 1 ; goto die_clean ; } if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; res = - 1 ; goto die_clean ; } <S2SV_ModStart>",0
1380,"<S2SV_ModStart> ; if (! jas_valid_cmdname ( argv [ 0 ] ) ) { abort ( ) ; } cmdname = argv [ 0 ] ; infile = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ;",0
1381,"<S2SV_ModStart> 1 ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> 1 ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } else { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,<S2SV_ModStart> ; for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel (,0
1383,"<S2SV_ModStart> needed ) ; if ( ( unsigned long long ) param -> data_start + len > param -> data_size ) { dm_ioctl_set_flags ( filp, DM_BUFFER_FULL_FLAG ) ; return - EINVAL ; }",0
1384,"<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) NULL <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> vcpu_info ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( guest_irq >= irq_rt <S2SV_ModEnd> -> nr_rt_entries ) <S2SV_ModStart> nr_rt_entries ) ; hlist_for_each_entry ( e <S2SV_ModEnd>, & irq_rt <S2SV_ModStart> link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode,",0
1386,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfq_idle_slice_lock ) ; <S2SV_ModStart> bfqq ) ; spin_unlock_irq ( & bfq_idle_slice_lock,0
1387,"<S2SV_ModStart> } else { return rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == U64_MIN && rold -> smax_value == U64_MAX && tnum_is_unknown ( rold -> var_off ) ; } case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, var_off ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) ; case SCALAR_VALUE_OR_NULL : if ( rcur -> type == SCALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur -> var_off ) == 0 && tnum",0
1388,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void * pointer,0
1389,<S2SV_ModStart> length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
1390,<S2SV_ModStart>! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! ovl_dentry_lower (,0
1391,"<S2SV_ModStart> ; if ( tlen < 0 ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) tlen, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) s, ( int ) sprev, ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) tlen, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int )",0
1392,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case BLOCK_SIZE_8BITDEPTH : # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize ) { case BLOCK_SIZE_8BITDEPTH : # endif vp9_foreach_transformed_block_in_plane ( xd, b",0
1393,"<S2SV_ModStart>, error = <S2SV_ModEnd> - EINVAL ;",0
1394,<S2SV_ModStart> = hash ; sr -> vhost_fdt_readers = 0 ; sr -> vhost_fdt_chain = NULL ;,0
1395,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> x -> e_mbd ; <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= bsize ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col",0
1396,"<S2SV_ModStart> ) ) { u32 csum = virtio_cread_feature ( vdev, VIRTIO_NET_F_CSUM, struct virtio_net_config, & max_virtqueue_pairs, & max_queue_pairs ) ; if ( csum ) dev -> hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GSO, struct virtio_net_config, max_virtqueue_pairs, & max_queue_pairs ) ) { dev -> hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; } else if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GSO, struct virtio_net_config, max_virtqueue_pairs, & max_queue_pairs ) ) dev -> hw_features |= NETIF_F_GSO | NETIF_F_FRAGLIST ; if",0
1397,"<S2SV_ModStart> ; * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; if (! * err ) { * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; goto out ; } * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; if (! * err ) { hrtf = getHrtf ( & reader, err ) ; } if ( strcmp ( filename, ""-"" ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; goto out ; } if ( strcmp ( filename, ""-"" ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; goto out ; } if ( strcmp ( filename, ""-"" ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = SUPERBLOCK_INVALID ( & reader. superblock ) ; goto out ; } if ( strcmp ( filename,",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ;",0
1399,"<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange <S2SV_ModStart> MappedRange ) ) ; if ( pMap -> ranges == NULL ) { LOGE ( ""malloc(%d, <S2SV_blank> R, <S2SV_blank> PRIVATE, <S2SV_blank> %d, <S2SV_blank> %d) <S2SV_blank> failed: <S2SV_blank> %s\\n"", sizeof ( MappedRange ), sizeof ( MappedRange ) ) ; return - 1 ; }",0
1400,<S2SV_ModStart> fa ) ) { xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; } else if ( xfs_brelse ( mp -> m_ddev_targp ) ) { xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_ddev_targp ) ; } else if ( xfs_brelse ( mp -> m_ddev_targp ) ) { xfs_brelse ( mp -> m_ddev_targp ) ; xfs_brelse ( mp -> m_,0
1401,"<S2SV_ModStart> ; if ( ( ( <S2SV_ModStart> VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx ->",0
1402,"<S2SV_ModStart> ) break ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) quantum_info = ( QuantumInfo * ) NULL <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,"<S2SV_ModStart> event ) ; if ( head ) { hlist_add_head_rcu ( & event -> hlist_entry, head ) ; perf_event_update_userpage ( event ) ; return - EINVAL ; } <S2SV_ModEnd> hlist_add_head_rcu ( &",0
1404,"<S2SV_ModStart>, const u_char * pptr, u_int len, u_int flags <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( flags & BGPTYPE_IPV6_ADDRESS ) { <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( flags & BGPTYPE_IPV6_ADDRESS ) { <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV4_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV6_ADDRESS ) { if ( flags & BGPTYPE_IPV4_ADDRESS ) { if ( flags & BGPT",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Host</th>"" ""<th <S2SV_blank> width=\'60%%\'>Process <S2SV_blank> id</th>"" ""<th <S2SV_blank> width=\'60%%\'>Pidfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>Controlfile</th>"" ""<th <S2SV_blank> width=\'40%%\'>Logfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>State</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'40%%\'>Controlfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>Pidfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>State</th>"" ""<th <S2SV_blank> width=\'60%%\'>Controlfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>Logfile</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ( constr1, sizeof ( constr1 ) <S2SV_ModEnd>, ""zx_confirmZxLiquidTx"", <S2SV_ModStart> ( constr2, sizeof ( constr2 ) <S2SV_ModEnd>, ""zx_confirmZxLiquidTx"", <S2SV_ModStart> ""zx_confirmZxLiquidTx"", ""zx_confirmZxLiquidTx"", <S2SV_ModStart> ""zx_confirmZxLiquidTx"", ""zx_confirmZxLiquidTx"", ""zx_confirmZxLiquidTx"", <S2SV_ModStart> ""zx_confirmZxLiquidTx"", ""confirmZxLiquidTx"", <S2SV_ModStart> ""zx_confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""zx_confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""zx_confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""confirmZxLiquidTx"", ""confirmZ",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; },0
1409,"<S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart> iovec ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (! ret ) ret = - EINVAL ; break ; } if ( rw",0
1410,"<S2SV_ModStart> ; c -> rbytes = sizeof ( protocol_binary_request_header ) ; if ( c -> rbytes > sizeof ( protocol_binary_request_header ) ) { c -> rbytes = sizeof ( protocol_binary_request_header ) ; c -> rcurr = ( protocol_binary_request_header * ) c -> rbuf ; c -> rcurr = ( protocol_binary_request_header * ) c -> rbuf ; c -> rbytes = sizeof ( protocol_binary_request_header * ) c -> rbuf ; c -> rcurr = ( protocol_binary_request_header * ) c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < sizeof ( req -> bytes ) ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; c -> rcurr = ( protocol_binary_request_header * ) c",0
1411,"<S2SV_ModStart> ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> descriptor\\n"", cfgno ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> length\\n"", cfgno ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> length\\n"", cfgno ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> length\\n"", cfgno ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> length\\n"", cfgno ) ; return - EINVAL ; }",0
1412,"<S2SV_ModStart>, err ; mutex_lock ( & card -> controls_mutex ) ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) { mutex_unlock ( & card -> controls_mutex ) ; return - ENOMEM ; } if ( info -> count < 1 ) return - EINVAL ; access = info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; access |= info -> access & ( SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ; if ( access & SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) access |= SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ; if ( access & SNDRV_",0
1413,"<S2SV_ModStart> { exit_client ( <S2SV_ModEnd> client_p, client_p <S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDPARAM ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( parc < 3 ) { sendto_one ( source_p, form_str ( ERR_INVALIDPARAM ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( parc < 2 ) { sendto_one ( source_p, form_str ( ERR_INVALIDPARAM ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if ( parc < 3 ) { sendto_one ( source_p, form_str ( ERR_INVALIDPARAM ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ; } if",0
1414,<S2SV_ModStart> case 0x66 : if ( mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EMUL_MODE_VM86 ) { if ( ctxt -> mode == X86EM,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1417,"<S2SV_ModStart> 16 ) ; sse = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ x -> rdmult ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, sse ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, format, argptr ) ; start [ maxlen - 1 ] = 0 ; start [ maxlen - 1 ] = 0 ; psf -> headindex = strlen ( ( char * ) psf -> header ) + maxlen ; maxlen = sizeof ( psf -> header ) - maxlen ; va_end ( argptr ) ; psf -> header [ 0 ] = 0 ; psf -> header [ 1 ] = 0 ; psf -> header [ 2 ] = 0 ; psf -> header [ 3 ] = 0 ; psf -> header [ 4 ] = 0 ; psf -> header [ 5 ] = 0 ; psf -> header [ 7 ] = 0 ; psf -> header [ 8 ] = 0 ; psf -> header [ 9 ] = 0 ; psf -> header [ 10 ] = 0 ; psf -> header [ 11 ] = 0 ; psf -> header [ 12 ] = 0 ; psf -> header [ 12 ] = 0 ; psf -> header [ 12 ] = 0 ; psf -> header [ 12 ] = 0 ; psf -> header [ 12 ] = 0 ; psf -> header [ 12 ] = 0 ; psf -> header [ 12 ] = 0",0
1420,"<S2SV_ModStart> ; if ( unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && unconditional ( & e ->",0
1421,<S2SV_ModStart> alg_priv ) { vpx_alg_priv_t * priv = get_alg_priv ( ctx ) ; if ( priv ) priv -> destroy ( priv ) ; else priv = NULL ; <S2SV_ModStart> iface -> destroy <S2SV_ModEnd> ( priv ),0
1422,"<S2SV_ModStart> ; } if ( exit_reason == EXIT_REASON_RDPMC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } if ( exit_reason == EXIT_REASON_RDTSC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 0 ; } if ( exit_reason == EXIT_REASON_RDTSC ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; }",0
1423,"<S2SV_ModStart> speed ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh <S2SV_ModStart> -> use_square_partition_only = <S2SV_ModEnd> frame_is_intra_only ( cm <S2SV_ModStart> cm ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; else sf -> disable_split_mask = DISABLE_ALL_INTER_SPLIT ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y",0
1424,"<S2SV_ModStart> ct_dccp_roles role ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; BUG_ON ( dh == NULL ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET && test_bit ( IPS_ASSURED_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_lock_bh ( & ct -> lock ) ; spin_unlock_bh ( & ct -> lock ) ; <S2SV_ModStart> case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp_hdr_seq ( dh ) ; break ; case CT_DCCP_REQUEST : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. handshake_seq = dccp_hdr_seq ( dh ) ; break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DC",0
1425,<S2SV_ModStart> struct compat_timex tx32 ; txc -> modes = tx32. modes ; txc -> offset = tx32. offset ; txc -> freq = tx32. freq ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> jitter = tx32. jitter ; txc -> shift = tx32. shift ; txc -> stabil = tx32. stabil ;,0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,<S2SV_ModStart> + 2 * ( lua_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"",",0
1430,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> int is_keyframe_qaunt_set = <S2SV_ModStart> break ; } input_ptr = strdup ( option_value ) ; if ( input_ptr == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_",0
1431,"<S2SV_ModStart> mask & KADM5_PRINCIPAL <S2SV_ModEnd> ) || ( <S2SV_ModStart> mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return ret ; if ( mask & KADM5_POLICY",0
1432,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { int64_t linesize = ff_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int h = ff_ceil_rSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum,",0
1433,"<S2SV_ModStart> } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql == NULL ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } <S2SV_ModStart> imp_dbh ) ) { if ( imp_dbh -> pmysql == NULL ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ), mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
1437,"<S2SV_ModStart>! ( flags & SOCK_THREAD_FD_EXCEPTION ) || ( ( ioctl ( slot -> fd, FIONREAD, & size ) == 0 && size ) ) <S2SV_ModStart> pthread_mutex_unlock ( & slot_lock ) ; BTA_JvRfcommRead ( slot -> rfc_handle, slot -> id ) ; } if ( need_close || ( flags & SOCK_THREAD_FD_WR ) ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func",0
1438,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; proto_tree_add_subtree ( ppi_tree, hf_ppi_header_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_tree_add_subtree ( seg_tree, hf_ppi_hdr_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; agg_tree = proto_tree_add_subtree ( agg_tree, hf_ppi_hdr_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; if ( seg_tree ) { proto_tree_add_subtree ( seg_tree, hf_ppi_hdr_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_tree_add_subtree ( seg_tree, hf_ppi_hdr_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_tree_add_subtree ( seg_tree, hf_ppi_hdr_",0
1439,<S2SV_ModStart> = s_malloc ( <S2SV_ModEnd> hdrlen + initlen,0
1440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> nsc_encode_argb_to_aycocg ( NSC_CONTEXT * context, const BYTE * data, UINT32 scanline ) { UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x = 0 ; x < context -> width ; x ++ )",0
1441,"<S2SV_ModStart> + 1 ; } if ( offset < end_offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; } <S2SV_ModStart> hf_keybuffer ) ; if ( offset < end_offset ) { offset = dissect_ndr_uint32 ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint32 ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint32 ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint32 ( tvb, offset, pinfo, tree, di, drep, hf_keybuffer_size, & size ) ; offset = dissect_ndr_uint32 ( tvb, offset, pinfo, tree, drep, hf_keybuffer_size, & size",0
1442,"<S2SV_ModStart> ) return ERR_PTR ( <S2SV_ModEnd> - EINVAL ) <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1443,"<S2SV_ModStart> cpi ) { RATE_CONTROL * const rc = & cpi -> td. rc ; int target ; if ( cpi -> common. current_video_frame == 0 ) { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : <S2SV_ModEnd> ( int ) <S2SV_ModStart> int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / ( cpi -> output_framerate / 2 ) )",0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,"<S2SV_ModStart> struct hello6 * const hellop = ( const struct hello6 * ) op + OSPF6HDR_LEN ; ND_TCHECK ( hellop -> hello_options ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK ( hellop -> hello_deadint ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hellop -> hello_bdr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_bdr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Design",0
1447,<S2SV_ModStart> datalen ) { <S2SV_ModEnd> return - ENOTSUPP <S2SV_ModStart> return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1448,"<S2SV_ModStart> rc ) { if ( rc -> uwbd. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; } <S2SV_ModEnd> rc -> uwbd <S2SV_ModStart>. task == NULL ) { printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; rc -> uwbd. pid = current -> pid ; printk ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; return ; }",0
1449,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart>",0
1450,<S2SV_ModStart> char ) ( ( <S2SV_ModEnd> col & mask <S2SV_ModStart> bitIdx ) ) ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE ) { ptr ++ ; } else { idx += gfx -> data. bpp ; if ( idx >= 8 ) { int i ; for ( i = 0 ; i < 8 ; i ++ ) { * ptr = ( char ) ( col >> i ) ; ptr ++ ; } } } else { int i ; for ( i = 0 ; i < gfx -> data. bpp ; i ++ ) { * ptr = ( char ) ( col >> i ) ; ptr ++ ; } if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE ) { ptr ++ ; } else { int i ; for ( i = 0 ; i < 8 ; i ++ ) { * ptr = ( char ) ( col >> i ) ; ptr ++ ; } } },0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; struct macroblock_plane * p = & cpi -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & cpi -> mb. mi [ 0 ] -> mbmi ; <S2SV_ModEnd> const PLANE_TYPE type <S2SV_ModStart> -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = BLOCK_OFFSET ( p -> segment_id, block ) ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cp",0
1452,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> & SHM_RND ) { err = - EINVAL ; goto out ; } <S2SV_ModEnd> if ( shmflg <S2SV_ModStart> shm_perm ) ; if ( shp -> shm_file == NULL ) { err = - EIDRM ; goto out_unlock ; },0
1454,"<S2SV_ModStart> users ) ; switch ( minorversion ) { case 0 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 1 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 2 : serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; return ERR_PTR ( - EINVAL ) ;",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> case NPNVSupportsXEmbedBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1459,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; if ( ret <= 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank>",0
1460,"<S2SV_ModStart> ; for ( const xmlAttr * xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } <S2SV_ModEnd> while ( cIter",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1462,"<S2SV_ModStart> ) { int <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; if (! in_uint8s ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return RD_FALSE ; } <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; if (! in_uint8s ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return RD_FALSE ; } if (! in_uint8s ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return RD_FALSE ; } if (! in_uint8s ( s, length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" ) ; return RD_FALSE ; }",0
1463,"<S2SV_ModStart> 1 TSRMLS_CC ) ; zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ;",0
1464,"<S2SV_ModStart> only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if ( _y4m -> chroma_type == NULL ) { fprintf ( stderr, ""Missing <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } <S2SV_ModStart> VPX_IMG_FMT_I420 ; } else if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; return - 1 ; } if ( _y4m -> interlace == '?' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; } else if ( _y4m -> interlace == 'p' ) { fprintf ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" ""assuming <S2SV_blank> progressive",0
1465,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } else { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ( read_uids_guids ( fd <S2SV_ModEnd>, & table_start <S2SV_ModStart> ( table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( fd, sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( fd, sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( fd, sBlk. s",0
1467,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct env * <S2SV_ModStart> = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; if ( RB_INSERT ( envtree, & env -> root, NULL ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } }",0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> segment ] ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vpx_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q",0
1469,"<S2SV_ModStart> ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWGRP | S_IROTH <S2SV_ModStart> } write ( logfile_fd <S2SV_ModEnd>, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"",",0
1471,<S2SV_ModStart> += 8 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 4 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height && context -> curY >= p -> height && context -> curY >= p -> height && context -> curY >= p -> height && context -> curY >= p -> height && context -> curY >= p -> height && context,0
1472,<S2SV_ModStart> ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> y_mode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
1473,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile!= NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1474,<S2SV_ModStart> ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( WARN_ON ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ) ) ) ) )!= umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode ( umode,0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean ; double * argbuf <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> = 0 ; outpos = outputbuffer ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> = 1 ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> = 1 ; outpos += sprintf ( outpos <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' && * t ) t ++ ; * t ++",0
1476,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> static u32 ip_idents_hashrnd <S2SV_ModStart> ip_idents_hashrnd __read_mostly ; u32 hash <S2SV_ModEnd>, id ; <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; } else { hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; hash = jhash_3words ( ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons",0
1477,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = lookup_attr_id ( obj, & PyId_step ) ) { int res ; res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1479,"<S2SV_ModStart> ; if ( ctl -> pw -> pw_uid!= ctl -> pw -> pw_uid ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
1480,<S2SV_ModStart> { if ( get_unaligned_le16 ( & radiotap_header -> it_version )!= IEEE80211_RADIOTAP_VERSION ) return - EINVAL ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _reset_on_ext = 1 ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg += sizeof ( uint32_t ),0
1481,"<S2SV_ModStart> int err ; struct list_head * dscp_map ; <S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; } dscp_map = & alink -> dscp_map ; list_for_each_entry ( iter, & dscp_map, list ) { if ( iter -> handle == knode -> handle ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr,",0
1483,<S2SV_ModStart> cfg. g_pass <S2SV_ModEnd> = global -> <S2SV_ModStart> : VPX_RC_ONE_PASS ; if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; },0
1484,"<S2SV_ModStart> new_data_len ) ; if ( dbus_name == NULL ) { g_error
1485,<S2SV_ModStart> data_end ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm ->,0
1486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ) { VP9Decoder * const pbi = vpx_allocate ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( &",0
1487,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { s -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> count ; new_fpl -> old_count = fpl -> count ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> == NULL || opt -> opt. <S2SV_ModStart> == NULL || opt -> opt.,0
1490,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_token * tree2tok ( vpx_token * tokens <S2SV_ModEnd>, const vpx_tree_index <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1491,"<S2SV_ModStart> res = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags",0
1492,<S2SV_ModStart> wqh ) ; mutex_lock ( & ctx -> lock ) ; <S2SV_ModStart> clockid = clockid ; mutex_unlock ( & ctx -> lock,0
1493,"<S2SV_ModStart> child, * p <S2SV_ModEnd> ; int err <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } unlock_mount_hash ( ) ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; if ( parent_path ) { attach_mnt ( source_mnt, parent_path ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mountpoint ( dest_mnt, dest_mp, source_mnt ) ; touch_mnt_namespace ( source_mnt -> mnt_ns )",0
1494,"<S2SV_ModStart> ( asn1, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } seq = ( char * ) seq + count * elemtype -> size ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; }",0
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1496,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ MIF_MAGICLEN,0
1498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1499,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart>, int mi_row, int mi_col, BLOCK_SIZE bsize, ThreadData * td ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_ModStart> x = & td <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> select_txfm_size && td <S2SV_ModEnd> -> aq_mode!= <S2SV_ModStart>. allow_skip_recode ; <S2SV_ModEnd> int segment_id = <S2SV_ModStart> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> ] ; struct skcipher_tfm <S2SV_ModEnd> * tfm_des ; <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", <S2SV_ModEnd> 0, CRYPTO_ALG_ASYNC <S2SV_ModStart> tfm_des ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_free_skcipher ; } skcipher_setkey ( tfm_des, key, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; sg_init_one ( & sgout, out, 8 ) ; crypto_skcipher_setkey ( tfm_",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
1502,"<S2SV_ModStart> range_max ) { int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ;",0
1503,<S2SV_ModStart> delta ; else { if ( i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP && BPF_OP ( insn -> code ) == BPF,0
1504,"<S2SV_ModStart>, KVM_ISA_VMX ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> exit_reason ) ; return 1 ; } <S2SV_ModEnd> pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"" <S2SV_ModStart>, KVM_ISA_VMX ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info, intr_info, vmcs_read32 ( VM_EXIT_INTR_ERROR_CODE ) ) ; return 1 ; } <S2SV_ModEnd> pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"" <S2SV_ModStart>, KVM_ISA_VMX ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmx -> idt_vectoring_info, intr_info, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; }",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; path_put ( & nd -> path ) ;,0
1508,"<S2SV_ModStart> ++ r ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <=",0
1509,"<S2SV_ModStart> 4 ) { if ( ( ssize_t ) x + 4 > dds_info -> width - x ) || ( ssize_t ) y + 4 > dds_info -> height - y ) { return MagickFalse ; } <S2SV_ModStart>, y, ( ssize_t ) dds_info -> width - x, ( ssize_t ) dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height && ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize",0
1510,"<S2SV_ModStart> length ) { int ret ; struct sockaddr * buf ; buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf = kmalloc ( length, GFP_KERNEL ) ; if (! buf ) buf",0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1512,"<S2SV_ModStart> ) { int i ; memset ( cfg, 0, sizeof ( cfg_t ) ) ; for ( i = 0 ; i < argc ; i ++ ) { if ( strcmp ( argv [ i ], ""debug_file="", 12 ) == 0 ) cfg -> debug_file = argv [ i ] + 12 ; break ; } if ( strcmp ( argv [ i ], ""manual"" ) == 0 ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""openasuser"" ) == 0 ) cfg -> openasuser = 1 ; if ( strcmp ( argv [ i ], ""alwaysok"" ) == 0 ) cfg -> alwaysok = 1 ; if ( strcmp ( argv [ i ], ""cue"" ) == 0 ) cfg -> cue = 1 ; if ( strncmp ( argv [ i ], ""authpending_file="", 17 ) == 0 ) cfg -> authpending_file = argv [ i ] + 17 ; if ( strncmp ( argv [ i ], ""origin="", 6 ) == 0 ) cfg -> origin = argv [ i ] + 6 ; if ( strncmp ( argv [ i ], ""prompt="", 7 ) == 0",0
1513,"<S2SV_ModStart> F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UT",0
1514,"<S2SV_ModStart> ) ) { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { send ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; }",0
1515,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1516,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & YV12_FLAG_TEMPORAL_DENOISING ) ) ),0
1517,"<S2SV_ModStart> ; if ( used ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_add_pvc()\\n"" ) ; return - EBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENO",0
1518,"<S2SV_ModStart> * data ; if (! s_check ( s ) ) { ui_clip_protocol_error ( ) ; } <S2SV_ModStart> length ) ; if ( status == CLIPRDR_ERROR ) { logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length=%d"", type, status, length ) ; cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; } switch ( type ) { case CLIPRDR_FORMAT_ACK : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; cliprdr_send_packet ( CLIPRDR_FORMAT_ACK, CLIPRDR_RESPONSE, NULL, 0 ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_request_data ( format ) ; break ; case 7 : ui_clip_handle_data ( data, length ) ; break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> type=%d, <S2SV_blank> status=%d, <S2SV_blank> length",0
1519,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1520,<S2SV_ModStart> next ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { break ; } } else { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*' ) { break ; } } else { if ( l -> lineBuf [ c_rows ] == '*' ) { if ( l -> lineBuf [ c_rows ] == '*',0
1521,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xW,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % ( bps * stride <S2SV_ModEnd> ) ) == <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_file, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1525,"<S2SV_ModStart> { uint16 num_updates = 0 <S2SV_ModStart> ) { logger ( Protocol, Debug, ""%s()"", __func__ ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, left, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue",0
1526,"<S2SV_ModStart> } else { if ( smatch ( option, ""timestamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Timestamp <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Timestamp <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Timestamp <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> coef_probs = cpi <S2SV_ModEnd> -> frame_coef_probs [",0
1528,"<S2SV_ModStart> = { } <S2SV_ModEnd> ; r = <S2SV_ModStart> name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & tc ) < 0 ) { SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; } if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( tcgetattr ( fd, & tc ) < 0 ) { SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; } if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_",0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 1 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> ( d, <S2SV_ModEnd> ibuf, 3 <S2SV_ModStart> (",0
1530,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps",0
1531,"<S2SV_ModStart>, int uv_block_size, vpx_bit_depth_t bit_depth <S2SV_ModStart> ; const InterpKernel * const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_q4 ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> { n = cJSON_CreateNumber <S2SV_ModEnd> ( numbers [ <S2SV_ModStart> ] ) ; if (! n ) { suffix_object ( p, n ) ; p = n ; } else { suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1535,<S2SV_ModStart> float * w = f -> previous_window [ f -> channels - 1 ] ; if (! f -> previous_window [ f -> channels - 1 ] ) { f -> previous_window [ f -> channels - 1 ] = 0 ; } else { w = f -> previous_window [ f -> channels - 1 ] ; } f -> previous_window [ f -> channels - 1 ] = 0 ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ j ] ; f -> previous_window [ i ] [ j ] = 0 ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < f -> channels ; ++ j ) for ( j = 0 ; j < n ; ++ j ) f -> channel_buffers [ i ] [ right + j ] = f -> channel_buffers [ i ] [ right + j ] * w [ j ] ; f -> previous_window [ i ] [,0
1536,"<S2SV_ModStart> data_end ) { VP9_COMMON * const cm = & pbi -> common ; const uint8_t * bit_reader = NULL ; const int aligned_mi_cols = cm -> mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const int tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; if ( pbi -> tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_",0
1537,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = 0x505244 ; high = get2 ( ) ; wide = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_RawBitDepth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_RawBitDepth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_StorageMethod = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_BayerPattern",0
1538,"<S2SV_ModStart> seg = & cpi <S2SV_ModEnd> -> seg ; <S2SV_ModStart> -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; if ( cpi -> rc. is_src_frame_alt_ref ) { seg -> abs_delta = SEGMENT_DELTADATA ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LV",0
1539,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } shortv = ( uint16 ) TIFFGetField ( in, TIFFTAG_PLANARCONFIG, & shortv ) ; if ( shortv == config ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } TIFFSetField ( out, TIFFTAG_ROWSPERSTRIP, irps ) ; if (! TIFFIsTiled ( out ) ) { if (! TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ) tw = w ; if (! TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ) tl = l ; bychunk = ( tw == tilewidth && tl == tilelength ) ; } else { TIFFSetField ( out, TIFFTAG_T",0
1540,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> -> has_detail? <S2SV_ModEnd> error -> detail,0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOT_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 13, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> start <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; }",0
1543,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
1544,<S2SV_ModStart> prev ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ),0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb.,0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int df ) { if (! isdigit ( ( * fmt ) ++ ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; } while ( isdigit ( * * fmt ) ) ; if ( isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if ( isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; } while ( isdigit ( * * fmt,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ;",0
1548,"<S2SV_ModStart> = 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1549,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> char * server <S2SV_ModStart> sockaddr_in addr ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> mainloop_fd_callbacks = { <S2SV_ModEnd> } ; connection <S2SV_ModStart> = NULL ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket",0
1551,"<S2SV_ModStart> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> cpi, 0, sizeof ( VP8_COMMON ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; } cm = & cpi -> common ; memset ( cm, 0, sizeof ( VP8_COMP ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; init_config ( cpi, oxcf ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base",0
1552,"<S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS <S2SV_ModEnd>, 1, <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAJOR, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MIN, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS_MAX, <S2SV_ModEnd> 1, regs <S2SV_ModStart> ( PERF_COUNT_SW_",0
1553,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( bp [ 24 ] ) ; if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%",0
1554,"<S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) { * set_rtrn = false ; return false ; } <S2SV_ModStart>, set_rtrn ) ; if (! ok ) { * set_rtrn = false ; return false ; }",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
1557,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart>, padding, value, version, width ; if ( image_info == ( const ImageInfo * ) NULL ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image_info -> debug!= MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1558,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> jas_stream_getrwcount ( enc <S2SV_ModStart> out ) ; if ( <S2SV_ModEnd> jas_stream_getrwcount ( enc <S2SV_ModStart> out ) ; if ( <S2SV_ModEnd> jas_stream_getrwcount ( enc <S2SV_ModStart> out ) ; if ( <S2SV_ModEnd> jas_stream_getrwcount ( enc <S2SV_ModStart> out ) ; if (! jas_stream_getrwcount ( enc <S2SV_ModStart> out ) ; if (! jas_stream_getrwcount ( enc -> out ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc -> out ) ; if (! jas_stream_getrwcount ( enc -> mrk ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! jas_stream_getrwcount ( enc -> out ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc -> out ) ; if (! jas_stream_get",0
1559,"<S2SV_ModStart> chanmode_found ) { irc_server_set_chanmode ( server, irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id ( server ), irc_server_get_channel_id (",0
1560,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_reader <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> error ; giterr_t <S2SV_ModEnd> giterr_clear ( ) <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; }",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
1564,"<S2SV_ModStart>! stream ) fatal <S2SV_ModEnd> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart>. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; } else { stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ;",0
1565,"<S2SV_ModStart> case ND_OPT_RDNSSL : opp = ( const struct nd_opt_prefix_info * ) op ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opp -> nd_opt_mtu ) ) ) ; break ; case ND_OPT_HOMEAGENT_INFO : opp = ( const struct nd_opt_homeagent_info * ) op ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opp -> nd_opt_mtu ) ) ) ) ; break ; case ND_OPT_ADVINTERVAL : opp = ( const struct nd_opt_advinterval * ) op ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""advinterval"", opp -> nd_opt_mtu ) )",0
1566,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (,0
1567,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> auth_request_log_error ( iter <S2SV_ModStart> AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank>",0
1568,<S2SV_ModStart> ; if ( A >= skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len < A - skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len < A - skb -> len ) { kfree_skb ( skb ) ; return 0 ; },0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7",0
1571,<S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len < priv -> cac_id_len ) { return SC_ERROR_INVALID_DATA ; },0
1572,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; tok -> alterror = 1 ; tok -> alttabsize = 1 ; tok -> altindstack [ 0 ] = 0 ; tok -> decoding_state = STATE_INIT ; tok -> decoding_erred = 0 ; tok -> decoding_buffer = NULL ; # endif <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1573,<S2SV_ModStart> maxBitrate ; } av1 -> av1_config = AV1_DuplicateConfig ( av1 -> av1_config ) ; if ( av1 -> emul_esd ) { gf_odf_desc_del ( ( GF_Descriptor * ) av1 -> emul_esd ) ; av1 -> emul_esd = gf_odf_desc_esd_new ( 2 ) ; av1 -> emul_esd = gf_odf_desc_esd_new ( 2 ) ; av1 -> emul_esd = gf_odf_desc_esd_new ( 2 ) ; if ( av1 -> emul_esd ) { gf_odf_desc_del ( ( GF_Descriptor * ) av1 -> emul_esd ) ; av1 -> emul_esd = gf_odf_desc_esd_new ( 2 ) ; },0
1574,"<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> esteid <S2SV_blank> PD"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> esteid",0
1575,"<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS ) ; ASSERT ( maxRefFrames <= dpbSize ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> fullness = 0 ; else dpb -> fullness = 1 ; dpb -> numRefFrames = 0 ; dpb -> prevRefFrameNum = 0 ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEM",0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } addrlen_in = addrlen_out ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) { OE_RAISE_ERRNO (,0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if ( li!= length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if ( li!= length ) return FALSE ; if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ; if (! tpdu_read_negotiation_request ( s, & li, length ) ) return FALSE ;",0
1579,"<S2SV_ModStart> final_p, final ; struct ipv6_txoptions * opt ; struct ipv6_txoptions_rcu * rcu = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; struct ipv6_txoptions_rcu * rcu = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; struct ipv6_txoptions_rcu * rcu = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ) return - EPERM ; rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( rcu, sock_owned_by_user ( sk ) ) ; rcu",0
1580,"<S2SV_ModStart>, at ; <S2SV_ModEnd> struct pe_image_optional_hdr64 opt64 <S2SV_ModStart> pe_image_optional_hdr32 opt32 ; <S2SV_ModEnd> struct pe_image_section_hdr * <S2SV_ModStart> pe_image_optional_hdr64 opt64 ; <S2SV_ModEnd> struct pe_image_section_hdr * <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; dm9000WriteReg <S2SV_ModStart> ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1582,"<S2SV_ModStart> 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } # ifdef CCITT_SUPPORT if ( t2p -> pdf_compression == T2P_COMPRESS_G5 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( t2p -> pdf_compression == T2P_COMPRESS_G5 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"",",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> rcu_read_lock ( ) ; old_cred = __task_cred ( child ) ; __ptrace_link ( child, new_parent, old_cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> } } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. session, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> 3 } ; int num00, tmp_err, n, sr = 0, step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp",0
1587,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; if ( h -> addr == NULL ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModEnd> h -> addr <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> addr == NULL ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1588,"<S2SV_ModStart> ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif if ( child -> is_enabled == NOT_SET? parent -> is_enabled : child -> is_enabled ) { merged -> is_enabled = ( child -> is_enabled == NOT_SET? parent -> is_enabled : child -> is_enabled ) ; merged -> is_enabled = ( child -> is_enabled == NOT_SET? parent -> is_enabled : child -> is_enabled ) ; merged -> is_enabled = ( child -> is_enabled == NOT_SET? parent -> is_enabled : child -> is_enabled ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> res",0
1589,"<S2SV_ModStart> ) ) { memcpy ( ctl_buf, msg -> msg_name, sizeof ( struct cmsghdr ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; } else { memcpy ( ctl_buf, msg -> msg_name, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf, msg -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memcpy ( ctl_buf, ctl, sizeof ( ctl_buf ) ) ; } else { memcpy ( ctl_buf, msg -> msg_name, sizeof ( struct cmsghdr ) ) ; memcpy ( ctl_buf, ctl_buf, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memcpy ( ctl_buf, ctl_buf, sizeof ( ctl_buf ) ) ; memcpy ( ctl_buf,",0
1590,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> number_planes_filled ) { pixel_info_length = ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels, ( size_t ) MagickMax ( number_pixels,",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block_size ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> block",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,"<S2SV_ModStart> cib_client_t * client <S2SV_ModEnd> = user_data ; <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1594,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) { markvalue ( g, uv -> v ) ; } else { markvalue ( g, uv -> v ) ; } } } p = & g -> twups ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite",0
