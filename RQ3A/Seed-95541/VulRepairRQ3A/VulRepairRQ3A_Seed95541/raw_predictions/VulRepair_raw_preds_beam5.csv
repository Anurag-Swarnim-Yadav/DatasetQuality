,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 1 ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> mining <S2SV_blank> subscribe <S2SV_blank> request"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : ND_TCHECK ( * tptr ) ; <S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> 4 ) ; ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> } ND_TCHECK2 ( * tptr, len ) ; <S2SV_ModStart> { subtype = * ( tptr + 4 ) ; ND_TCHECK2 ( * tptr, len ) ; ND_TCHECK2 ( * tptr, len ) ; if ( type <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) goto out ;,0
5,"<S2SV_ModStart> ++ ) { uint64_t <S2SV_ModEnd> time, offset <S2SV_ModStart> ; offset = avio_rb64 ( f ) ; if ( offset > size ) { av_log ( mov -> fc, AV_LOG_ERROR, ""Bad <S2SV_blank> offset <S2SV_blank> in <S2SV_blank> tfra\\n"" ) ; return AVERROR ( EINVAL ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM",0
7,"<S2SV_ModStart> ) ) { GF_Box * stco = gf_list_get ( writers, 0 ) ; GF_Box * stsc = gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) apic_sync_pv_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ) return ; <S2SV_ModStart> return ; } <S2SV_ModEnd> data = *",0
9,<S2SV_ModStart> src ) ; <S2SV_ModEnd> clear_task_ebb ( dst,0
10,<S2SV_ModStart> item ) { if ( item < 0 ) { return NULL ; } <S2SV_ModStart> -> child ; <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; <S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; }",0
12,"<S2SV_ModStart> = NEXTHDR_FRAGMENT ; memset ( fptr, NEXTHDR_FRAGMENT, unfrag_len ) ;",0
13,"<S2SV_ModStart> u32 event_id, u64 <S2SV_ModEnd> nr, int <S2SV_ModStart>, event_id, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header * leaf ; struct grub_ext4_extent * ext ; int i ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> buf = grub_malloc <S2SV_ModStart> ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> fileblock >= grub_le_to_cpu16 <S2SV_ModStart> len ) ) return 0 <S2SV_ModEnd> ; else { <S2SV_ModStart> start ) ; <S2SV_ModEnd> return fileblock + <S2SV_ModStart> start ) ; <S2SV_ModEnd> } } } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> * out ) <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 0 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2, x3 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> t1, t2 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> t3 ; tran_high_t <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> t2, t3 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x1, x2 <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x3 ; tran_high_t <S2SV_ModStart> 1 ] ; tran_high_t <S2SV_ModEnd> t3 ; tran_high_t <S2SV_ModStart> 0 ]",0
16,<S2SV_ModStart> env ) ; kfree ( env -> insn_aux_data ) ;,0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; } } # else strcpy ( wpc -> error_message, ""libwavpack <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; # endif }",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : SDev -> changed = 1 ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err =",0
19,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cm -> lf <S2SV_ModEnd> ; const int <S2SV_ModStart> = get_max_filter_level ( <S2SV_ModEnd> cpi ) ; <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_err <S2SV_ModStart> ; if ( <S2SV_ModEnd> cm -> tx_mode <S2SV_ModStart> ONLY_4X4 ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max,0
21,"<S2SV_ModStart> left ; luaL_checkstack ( L, 1, & offset ) ;",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> ralg -> cra_rng,0
24,<S2SV_ModStart> ; if ( <S2SV_ModEnd> sp -> sa_protocol <S2SV_ModStart>!= PX_PROTO_PPTP ) { error = - EINVAL ; goto end ; } <S2SV_ModEnd> lock_sock ( sk,0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> options\\n"" ) ; exit ( EXIT_FAILURE ) ; } } if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> options\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( ( id = jas_getopt ( argc, argv, opts ) ) < 0 ) { fprintf ( stderr, ""invalid <S2SV_blank> options\\n"" ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { abort ( ) ; } if (! ( fmtname = jas_image_fmttos",0
27,"<S2SV_ModStart> int esr ) { if ( reason >= ARRAY_SIZE ( handler ) ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ptr ++, length <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) <S2SV_ModEnd> ) ) )",0
29,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> alt = uas_find_uas_altsetting <S2SV_ModStart> intf ) ; if ( alt < 0 ) return - ENODEV <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> bInterfaceNumber, alt ) <S2SV_ModEnd> ; } <S2SV_null>",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart>, int fromlen, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> * from, int len, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * to ) { struct pathComponent * pc ; int elen = 0 ; if ( fromlen < len ) { return - 1 ; } <S2SV_ModEnd> pc = ( <S2SV_ModStart> case 2 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 3 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break",0
31,"<S2SV_ModStart> ) ) { if ( server. slaveof_linenum >= totlines ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> line"" ; goto loaderr ; }",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> ; result = lego_usb_get_version ( udev, & get_version_reply ) ; if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } result = lego_usb_get_version ( udev, & get_version_reply ) ; if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""size"", sz ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""size"", sz ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key * construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> * authkey ; key_get ( dest_keyring ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> ; } <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
36,<S2SV_ModStart> = NULL ; if ( ctx == NULL ) return GSS_S_FAILURE ;,0
37,<S2SV_ModStart> ; int chk_addr_ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart>!= AF_INET ) goto out ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( inet -> inet_saddr!= inet -> inet_saddr ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) goto out ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = addr -> l2tp_addr. s_addr ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_saddr = addr -> l2tp_addr. s,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> static unsigned <S2SV_ModEnd> int stack_maxrandom_size ( <S2SV_ModStart> { unsigned int <S2SV_ModEnd> max = ( <S2SV_ModStart> ) << PAGE_SHIFT <S2SV_ModEnd> ; return max,0
39,"<S2SV_ModStart> ), _ ( ""Launch <S2SV_blank> anyway"" <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" <S2SV_ModEnd> ), RESPONSE_MARK_TRUSTED <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL",0
40,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * adap = adap -> priv ; struct dvb_usb_device_settings * settings = d -> priv ; struct dvb_usb_device * i2c_adap = adap -> i2c_adap ; int ret ; ret = <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 1, <S2SV_ModEnd> ibuf, 1 <S2SV_ModStart> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( <S2SV_ModEnd> dvb_attach ( m88rs2000_attach <S2SV_ModStart> & s421_m88rs2000_config, & <S2SV_ModEnd> d -> dev <S2SV_ModStart> i2c_adap ) ; <S2SV_ModEnd> if ( dvb_attach <S2SV_ModStart> dvb_attach ( ts2020_attach, d -> fe_adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> dvb_attach ( ts2020_attach, d -> fe_adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> dvb_attach ( ts2020_attach, d <S2SV_ModEnd> -> fe_ad",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> net = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> ; out_unlock : <S2SV_ModEnd> sctp_transport_put ( transport",0
44,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> name == ""group_time_str"" <S2SV_ModStart> ""group_time_str"" ) ) <S2SV_ModEnd> group_time_str = value",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> * cp0, tmsize_t cc ) { if ( cc < 0 ) { TIFFError ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> } } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAXSCANLINESIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> many <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> %lu"", ( unsigned long ) scanlinesizein ) ; goto bad ; }",0
47,"<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; memset ( page -> mapping, 0, sizeof ( * page -> mapping ) ) ;",0
48,"<S2SV_ModStart> ; if ( pes_packet_length > length ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> '-' ) ; if (! e || e == p ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) goto not_found ;",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void generic_pipe_buf_get ( <S2SV_ModStart> buf ) { if ( buf -> page ) get_page ( buf -> page ) ; else,0
51,<S2SV_ModStart> ep2 ) ; ND_TCHECK ( * ep ) ;,0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> reader -> bytes_available_fd, <S2SV_ModStart> reader -> bytes_available_fd <S2SV_ModEnd>, NULL,",0
54,<S2SV_ModStart> wp -> config -> pm_max_requests <S2SV_ModEnd> ; if (,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> int trans_to_still = <S2SV_ModStart> ; if ( <S2SV_ModEnd> frame_interval > MIN_GF_INTERVAL <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> ; } } <S2SV_ModEnd> return trans_to_still ;",0
56,"<S2SV_ModStart> 0 ; } err = 0 ; if ( handle -> h_transaction ) { err = jbd2_journal_stop ( handle ) ; if (! <S2SV_ModEnd> handle -> h_err <S2SV_ModStart> handle ) ; return err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) err = rc ; if (! err ) err = __ext4_std_error ( sb, where, line, err ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
57,<S2SV_ModStart> return ret ; if <S2SV_ModEnd> ( offset +,0
58,"<S2SV_ModStart> xfs_attr_leaf_name_remote * name_rmt ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_",0
59,"<S2SV_ModStart> alg ) { pr_err <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""%s-all"",",0
60,"<S2SV_ModStart> 2 ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> stlv_len ) ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> ISIS_SUBTLV_SPB_INSTANCE : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr )",0
61,"<S2SV_ModStart> ) { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,<S2SV_ModStart> ; if ( opt_len < 12 || opt_len > 20 || <S2SV_ModStart> flags & TH_SYN <S2SV_ModEnd> ) &&!,0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; uid_t <S2SV_ModEnd> new_uid ; gid_t <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" <S2SV_ModStart> ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModEnd> if ( options <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (1)"" <S2SV_ModStart> ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModEnd> if ( options",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; memcpy ( pkt -> ref, line, len ) ; <S2SV_ModStart> = '\\0' ; memcpy ( pkt -> msg, line, len ) ; <S2SV_ModEnd> return 0 ;",0
66,"<S2SV_ModStart> ; if ( header -> biSize < 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } <S2SV_ModStart> ; if ( header -> biSize < 56U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } <S2SV_ModStart> ; if ( header -> biSize < 108U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size <S2SV_blank> %d\\n"", header -> biSize ) ; return OPJ_FALSE ; }",0
67,<S2SV_ModStart> NULL ; } sas_put_device ( dev ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { struct scsi_device * sdev = bd -> bd_disk -> private_data ; struct scsi_disk * scsi_disk = bd -> bd_disk -> queue -> queuedata ; return scsi_cmd_ioctl ( sdev, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,<S2SV_ModStart> ; int req_len <S2SV_ModEnd> ; struct qeth_arp_query_info <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ; <S2SV_ModStart> ) ) return <S2SV_ModEnd> - EFAULT ;,0
74,<S2SV_ModStart> c ) { jas_t <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> ; den = avio_read_num ( pb ) ; if ( den < 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; }",0
76,"<S2SV_ModStart> ; if (! descriptor ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_umid"", 0 ) ; return AVERROR_INVALIDDATA ; } if (! descriptor ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_name"", 0 ) ; return AVERROR_INVALIDDATA ; } if (! descriptor ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_name"", 0 ) ; mxf_parse_package_comments ( mxf, & mxf -> fc -> metadata, material_package ) ; } if (! descriptor ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_name"", 0 ) ; return AVERROR_INVALIDDATA ; } if (! descriptor ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_name"", 0 ) ; mxf_parse_package_comments ( mxf, & mxf -> fc -> metadata, material_package",0
77,"<S2SV_ModStart> } return mount_entry_on_generic <S2SV_ModEnd> ( mntent,",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len < 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } <S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len < 0 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", tlv2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; }",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,"<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_entry * entry ; <S2SV_ModStart> rta ) ; entry = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! entry ) return - ENOMEM ; <S2SV_ModStart> ; p = kmemdup ( entry, xfrm_replay_state_esn_len ( entry ), GFP_KERNEL ) ; <S2SV_ModStart> - ENOMEM ; pp = kmemdup ( entry, xfrm_replay_state_esn_len ( entry ), GFP_KERNEL ) ; if (! pp ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> - EIO ; } <S2SV_ModEnd> return 0 ;,0
83,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ),0
84,<S2SV_ModStart> ) ; btif_config_flush <S2SV_ModEnd> ( ) ;,0
85,<S2SV_ModStart> { if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; } <S2SV_ModStart> } if ( numcols > JPC_QMFB_COLGRPSIZE * JPC_QMFB_COLGRPSIZE ) { abort ( ) ; },0
86,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc ) { res = VPX_CODEC_INCAPABLE ; } else { res = VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; },0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; kfree_skb ( skb ) ; <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; kfree_skb ( skb ) ;",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> void * data <S2SV_ModStart> char * last, <S2SV_ModEnd> struct bitmap * <S2SV_ModStart> ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } <S2SV_ModEnd> bitmap_set ( base",0
89,<S2SV_ModStart> newparity ) ; if ( newparity < 0 ) newparity = - 1 <S2SV_ModStart> newbits ) ; if ( newparity < 0 ) newparity = - 1 ;,0
90,<S2SV_ModStart> mixer ) { if ( mixer -> urb ) { kfree ( mixer -> urb -> transfer_buffer ) ; usb_free_urb ( mixer -> urb ) ; },0
91,"<S2SV_ModStart> type_flags ) { struct net * net = sock_net ( sk ) ; struct net * net = sock_net ( sk ) ; struct net * net = sock_net ( sk ) ; <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; match = NULL ; if ( list_empty ( & fanout_list ) ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } else { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list, list ) {",0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp,",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModEnd>, frame_in,",0
95,"<S2SV_ModStart> ; if ( imp_sth -> num_fields > imp_sth -> num_fields ) { do_error ( sth, JW_ERR_SEQUENCE, ""num_fields <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_fields ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ; } enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_",0
98,"<S2SV_ModStart> ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } <S2SV_ModStart> ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_",0
99,"<S2SV_ModStart> ( flags == <S2SV_ModEnd> EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_ModStart> ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN <S2SV_ModEnd> ) ; goto <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 2 ), 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } ND_TCHECK2 ( * ( p + 6 ), 6 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } ND_TCHECK2 ( *",0
101,"<S2SV_ModStart>! caller_is_in_ancestor ( <S2SV_ModEnd> fc -> pid <S2SV_ModStart> fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } <S2SV_ModEnd> k = cgfs_get_key",0
102,"<S2SV_ModStart> low_var_thresh, int flag <S2SV_ModEnd> ) { double <S2SV_ModStart> +.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> u_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer, 8 * mbr * source -> uv",0
103,"<S2SV_ModStart> { ret = copy_to_user <S2SV_ModEnd> ( param,",0
104,"<S2SV_ModStart> : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> cap_permitted = cap_intersect ( new -> cap_permitted, old -> cap_permitted ) ; } <S2SV_ModEnd> new -> securebits",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s, <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,<S2SV_ModStart> ( c == LUA_SIGNATURE [ 0 ] || c == LUA_SIGNATURE [ 1 ] )? luaU_undump : luaY_parser ;,0
108,<S2SV_ModStart> ; int err ; sock -> state = SS_UNCONNECTED ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) goto out_rcu_unlock ;,0
109,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) -> flags = dev -> flags ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) ->",0
111,<S2SV_ModStart> trunc : ND_PRINT (,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> int indent ) { <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> -> length ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type ) ) ; ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID:",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned int <S2SV_ModEnd> len ; sk <S2SV_ModStart> = NULL ; memset <S2SV_ModEnd> ( & facilities <S2SV_ModStart> (! rose_parse_facilities <S2SV_ModEnd> ( skb -> <S2SV_ModStart> + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,<S2SV_ModStart> ) ; } else if ( ( opt_flags & P_NOCOMMENTS ) ) { if ( ( opt_flags & P_NOCOMMENTS ) ) { if ( ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENTS ) ) { if (! ( opt_flags & P_NOCOMMENT,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; } ret = o2nm_node_ip_tree_lookup ( node, & ipv4_addr, & p, & parent ) ; if ( ret ) return ret <S2SV_ModEnd> ; write_lock ( <S2SV_ModStart> cl_nodes_lock ) ; if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - E",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : isoclns_print <S2SV_ModEnd> ( ndo,",0
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } }",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context, TPM_ALG_HASH hashAlg <S2SV_ModEnd>, TPM2B_MAX_BUFFER * <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; UINT32 bitsSwizzled, i_Swizzled ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [",0
121,"<S2SV_ModStart> size_t size ; jas_image_cmpt_t * cmpt_init = 0 ; jas_image_cmpt_init_init ( & cmpt_init, sizeof ( jas_image_cmpt_t ) ) ; if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> height_, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = jas_stream_memopen2 ( 0, size ) ; if",0
122,<S2SV_ModStart> s ) { if ( s < 0 ) return ( NULL ) ;,0
123,<S2SV_ModStart> ; if ( WARN_ON_ONCE (! capable ( CAP_SYS_ADMIN ) ) ) { ret = - EPERM ; goto bail ; },0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,"<S2SV_ModStart> peer ) get_net ( net, peer -> name ) ; spin_unlock_bh ( & net -> nsid_lock ) ;",0
126,"<S2SV_ModStart> ; if ( content_buf_used > content_buf_len ) { <S2SV_ModStart> ; } } if ( content_buf_used > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + content_buf_len ) ; content_buf_len = content_buf_used + content_buf_len ; }",0
127,"<S2SV_ModStart> if (! ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( c_id_subtype ) && POKE_UINT8 ( c_id_len ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES ( p_id, p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_BYTES (",0
128,<S2SV_ModStart> && dp == ( size_t ) <S2SV_ModStart> && tdp == ( size_t ) <S2SV_ModStart> && tdp == ( size_t ) <S2SV_ModStart> && tdp == ( size_t ) <S2SV_ModStart> && tdp == ( size_t ) <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ; pc += <S2SV_ModStart> &= ~ FLAG_MATCHED <S2SV_ModEnd> ; pc += <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ; pc += <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ; if (,0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ; memset ( & sp -> recvmsg, 0, sizeof ( struct sctp_skb_wq ) ) ;",0
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> gb ) { return mpeg4_decode_profile_level ( s, get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; if ( mpu -> substream_input == NULL ) return ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> while ( readw <S2SV_ModStart> + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) writew ( 0, mpu -> dev -> MIDQ + JQS_wHead ) ; else writew ( wTmp, mpu -> dev -> MIDQ + JQS_wHead ) ; }",0
132,<S2SV_ModStart> rule ) ; if ( result ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; },0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n""",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; <S2SV_ModEnd> struct kvec * <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( status = decode_op_hdr <S2SV_ModEnd> ( xdr, <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } <S2SV_ModEnd> xdr_read_pages ( xdr <S2SV_ModStart> ) ; * acl_len <S2SV_ModEnd> = attrlen ;",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
138,<S2SV_ModStart> while ( ( tmpName [ i ]!= 0 ) && ( i < to_read ) ) { i ++ ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { switch ( step ) { case 0 : { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < height ; j ++ ) outrow16 [ j ]",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } <S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } strncpy ( szFileName, sizeof ( szFileName ) - 5, pszFileName ) ; }",0
142,"<S2SV_ModStart> ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( schr ( auth, ':' ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if (",0
143,<S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; <S2SV_ModStart> nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ;,0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> struct eigrp_tlv_at_ext_t * eigrp_tlv_at_ext ; if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> eigrp_tlv_len ) ; if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
147,"<S2SV_ModStart> = NULL ; size_t address_size ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; address_size = ( size + align - 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; } <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; address_size = ( ( size + align - 1 ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( address_size + address_size ) ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) return NULL ; }",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart>. inodes ) * sizeof ( long long ) <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) * sizeof ( long long ) <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
149,"<S2SV_ModStart> ) ; } if ( ( strcmp ( ptr, '/' ) == 0 ) ) { rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp ->",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= <S2SV_ModEnd> EXT4_GET_BLOCKS_PRE_IO ; return,0
151,"<S2SV_ModStart> HASH_DISABLED ; } return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) <S2SV_ModEnd> ; } <S2SV_null>",0
152,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & final ) ; rcu_read_unlock ( ) ;,0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0 ; uint16 planar = 0 ; uint16 bps = 0 ; uint16 spp = 0 ; uint32 tlsize = 0, scanlinesize = 0 ; uint32 width = 0 ; uint32 length = 0 ; uint32 stsize = 0 ; uint32 tlsize = 0 ; uint32 tlsize = 0 ; uint32 stsize = 0 ; uint32 tlsize = 0 ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & stsize ) ) TIFFError ( ""loadimage"", ""Image <S2SV_blank> lacks <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tl",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match (",0
155,"<S2SV_ModStart> ) ) { if ( resp == NULL ) fatal ( ""%s: <S2SV_blank> sshbuf_new"", __func__ ) ;",0
156,<S2SV_ModStart> dev ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> err = 0 ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; struct ext4_inode_info * ei_inode = EXT4_I ( inode ) ; <S2SV_ModStart> out ; } neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) { neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, ei_inode -> i_ino ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, ei_inode -> i_ino ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, ei_inode",0
160,"<S2SV_ModStart> } if ( preverify_ok &&! c -> opt -> option. no_verify ) { s_log ( LOG_INFO, ""Certificate <S2SV_blank> verification <S2SV_blank> disabled"" ) ; return 1 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
161,"<S2SV_ModStart> -> egid ; kuid_t old_owner = owner ; kgid_t old_group = group ; <S2SV_ModStart> ; ret = security_create_user_ns ( new ) ; if ( ret ) { kmem_cache_free ( user_ns_cachep, ns ) ; return ret ; }",0
162,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE <S2SV_ModEnd> ) ) goto",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 1 ; if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> 2decode <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> 2decode <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_ModStart> CVAR_LATCH ) ; s_alDriver = Cvar_Get ( ""s_alDriver"", ALDRIVER_DEFAULT, CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; if (! s_alDriver ) { return qfalse ; } <S2SV_ModStart> CVAR_LATCH ) ; s_alDriver = Cvar_Get ( ""s_alDriver"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"",",0
165,<S2SV_ModStart> ts_status ; bool is_drop_n_account ; <S2SV_ModStart> is_drop_n_account = false ; if ( skb -> pkt_type == PACKET_LOOPBACK ) goto drop ; if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUMNOTREADY ; else status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; },0
166,"<S2SV_ModStart> ) ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) list_add_tail ( & asoc -> peer. transport_addr_list, & new -> peer. transport_addr_list ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) list_add_tail ( & asoc -> peer. transport_addr_list, & new -> peer. transport_addr_list ) ; list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } if (! list_empty ( & asoc -> peer. transport_addr_list ) ) list_",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ; <S2SV_ModStart> return true ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
168,"<S2SV_ModStart> int on_exec, const char * lsm_label, size_t size <S2SV_ModStart> ( name, ""nop"" ) == 0 ) goto out ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( name, ""none"" ) == 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { int size ; command = malloc ( size + 1 ) ; if (! command ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if (! command ) {",0
169,<S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ),0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,<S2SV_ModStart> cpi ) { # ifdef DISABLE_RC_LONG_TERM_MEM const uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> 0 ) ; # ifdef CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } # endif <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
172,"<S2SV_ModStart> charlen ; } if ( num + totallen > ITEMSIZE - 1 ) { UNCHAR ; } <S2SV_ModStart> curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '*' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( node",0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry * * ce <S2SV_ModEnd> ) { __u32 <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> struct mb_cache * <S2SV_ModStart> ; again : mb2_cache_entry_delete_block ( ext4_mb_cache, EXT4_SB ( inode -> i_sb ) -> s_mb_cache, ce -> e_block <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else { bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len = parse_cosine_rec_hdr <S2SV_ModStart> ; pkt_len = cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, wth -> frame_buffer <S2SV_ModEnd>, err, <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, wth -> frame_buffer <S2SV_ModEnd>, err,",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left",0
177,<S2SV_ModStart> Rec. RecordLength > sizeof ( WPGColorMapRec ) <S2SV_ModEnd> ) ThrowReaderException ( <S2SV_ModStart> Rec. RecordLength > sizeof ( WPGColorMapRec ) <S2SV_ModEnd> ) ThrowReaderException (,0
178,"<S2SV_ModStart> - ENOMEM ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ) { ret = - EINVAL ; goto out ; }",0
179,<S2SV_ModStart> int m ; jas_int64_t <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> QMFB_SPLITBUFSIZE ) { jas_int64_t <S2SV_ModEnd> hstartcol = ( <S2SV_ModStart> >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += JPC_QMFB_COLGRPSIZE ; srcptr += stride << 1 ; } dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = buf ; srcptr = buf ; n = m ;,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x07 char * magick = ( char * ) Malloc ( <S2SV_ModEnd> 12 ) ; <S2SV_ModStart> ) ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = ( Magick",0
182,<S2SV_ModStart> ) ; ext2_xattr_put_super <S2SV_ModEnd> ( sb ),0
183,<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { error = - ENODEV ; goto err_free_devs ; },0
184,"<S2SV_ModStart> len ) ; if ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> the <S2SV_blank> sandbox <S2SV_blank> doesn\'t <S2SV_blank> use <S2SV_blank> a <S2SV_blank> new <S2SV_blank> network <S2SV_blank> namespace\\n"" ) ; exit ( 1 ) ; }",0
185,<S2SV_ModStart> node ) { struct o2nm_cluster * o2nm_cluster ; if ( node -> nd_item. ci_parent ) { o2nm_cluster = to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; return o2nm_cluster ; } else { o2nm_cluster = to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; } return o2nm_cluster ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> ) ; nfs_set_open_stateid_locked <S2SV_ModEnd> ( state,",0
187,"<S2SV_ModStart> ; if ( i < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> sample <S2SV_blank> rate <S2SV_blank> %d\\n"", i ) ; return AVERROR ( EINVAL ) ; }",0
188,<S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; <S2SV_ModStart> nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ;,0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, ""rawstats"", & rawstats ) ; <S2SV_ModStart> ( statsdir, ""cryptostats"", & cryptostats ) ; <S2SV_ModStart> ( statsdir, ""timingstats"", & timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & shadows -> mnt_mounts ) ) attach_shadowed ( mnt, parent, shadows ) ; else attach_shadowed ( mnt, parent, & shadows -> mnt_mounts <S2SV_ModEnd> ) ; touch_mnt_namespace",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( prev -> es | next -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | next -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, gsindex ) ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; switch_fpu_finish ( prev_p, fpu ) ; prev -> usersp = this_read ( old_rsp ) ; this_write ( old_rsp, next -> usersp ) ; prev -> usersp = this_read ( old_rsp ) ; next -> usersp = this_read ( old_rsp ) ; next -> usersp =",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> { static char <S2SV_ModEnd> temp [ NFSX_V3FHMAX <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; if ( strlen ( sfsname ) > NFSX_V3FHMAX ) goto trunc <S2SV_ModEnd> ; temp [ <S2SV_ModStart> NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ;",0
197,"<S2SV_ModStart> int transhdrlen, unsigned <S2SV_ModStart> skb ) -> ip6_frag_id = 0",0
198,"<S2SV_ModStart> res ) return res ; if ( protocol_version < HSR_PROT_NONE ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> %d\\n"", __func__, protocol_version ) ; return res ; }",0
199,<S2SV_ModStart> = 0 ; if ( narg!= NULL ) { <S2SV_ModStart> narg ) ; },0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_CONTEXT * ctx <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> const YV12_BUFFER_CONFIG * src <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 5 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 5 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride <S2SV_ModEnd> } ; int",0
201,<S2SV_ModStart> ++ ) ; if (! args -> stable ) return 0 ; <S2SV_ModStart> ++ ) ; if (! args -> count ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( hdr ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart>, ulong dst, u64 * eip <S2SV_ModEnd> ) { switch <S2SV_ModStart> case 2 : * eip = ( u16 ) dst ; break ; case 4 : * eip = ( u32 ) dst ; break ; case 8 : * eip = ( u64 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 0 ;",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = tvb_captured_length_remaining <S2SV_ModEnd> ( tvb,",0
205,<S2SV_ModStart> == READ ) { struct buffer_head * bh ; <S2SV_ModStart> == READ ) bh = ocfs2_dio_get_block ; <S2SV_ModStart> else get_block = ocfs2_dio_get_block_nolock <S2SV_ModEnd> ; return __blockdev_direct_IO,0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> fscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm ) ; } else if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ;",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_pmc ( i,0
209,"<S2SV_ModStart> = len ; if ( * nl == 0 ) { * nl = 0 ; len = get_line_size ( * b, * avail, nl ) ; }",0
210,"<S2SV_ModStart> { int all_whitespace <S2SV_ModEnd> ; int kind <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; char * str <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ; PyObject * o <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; Py_ssize_t len <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } } Py_DECREF ( o ) ; if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str = PyMem_RawMalloc ( len + 3 ) ; if ( str == NULL ) { ast_error ( c,",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { if (! cJSON_strcasecmp ( c -> string, string ) ) return NULL",0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> * len ) ; if ( ( plen < 0 ) || ( plen > UINT32_MAX / sizeof ( nh. nh_len ) ) ) { printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; return - 1 ; }",0
215,"<S2SV_ModStart> XFS_ATTR_INCOMPLETE ) { xfs_trans_log_buf ( context -> trans, XFS_LOG_ERROR, ""xfs_attr3_leaf_list_int() <S2SV_blank> returned <S2SV_blank> invalid <S2SV_blank> list"" ) ; return 0 ; } if ( cursor -> offset == 0 ) { xfs_trans_log_buf ( context -> trans, XFS_LOG_ERROR, ""xfs_attr3_leaf_list_int() <S2SV_blank> returned <S2SV_blank> invalid"" ) ; return 0 ; }",0
216,<S2SV_ModStart> - EINVAL ; if ( flags & MSG_CMSG_COMPAT ) return - EINVAL ; <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> datagrams = __sys_recvmmsg <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && get_compat_timespec <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && put_compat_timespec <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && put_compat_timespec <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && put_compat_timespec,0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret = <S2SV_ModStart> ; ret = <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> q_num ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>,0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,<S2SV_ModStart> ; if ( maxcore > 0 && maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ) ) ; if ( maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ) ) ; if ( maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } if ( maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ) ) ; if ( maxcore > 0 && maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } if ( maxcore < MAXCONNS_FAST ) { exit ( EXIT_FAILURE ) ; } if ( maxcore < MAXCONNS_FAST,0
221,"<S2SV_ModStart> ; RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; r_strbuf_fini ( & next_op. esil ) ;",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { const char * user_config = NULL ; char * repo_config = NULL ; int found = 0 ; <S2SV_ModStart> ) ; } user_config = perf_pathdup ( ""user.perfconfig"" ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; <S2SV_ModStart> } repo_config = <S2SV_ModEnd> perf_pathdup ( ""config""",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event_context * ctx <S2SV_ModEnd>, struct perf_event <S2SV_ModStart> event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> return 1 ; <S2SV_ModEnd> return armpmu -> <S2SV_ModStart> get_event_idx ( hw_events <S2SV_ModEnd>, & fake_event <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace <S2SV_ModEnd> * ns, <S2SV_ModStart> return true ; if ( ns_capable ( current_user_ns ( ), cap_setid ) ) return true ; if ( new_map -> nr_extents == 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( uid_eq ( kuid, current_fsuid ( ) ) ) return true ; } else { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( gid_eq ( kgid, current_fsgid ( ) ) ) return true ; } <S2SV_ModEnd> return false ;",0
226,"<S2SV_ModStart> ++ ) { if ( j >= a -> num_values ) continue ; <S2SV_ModStart> j ++ ) { if ( j >= a -> num_values ) continue ; <S2SV_ModStart> j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, a -> data -> len ) ;",0
227,"<S2SV_ModStart> * hx ; <S2SV_ModEnd> int ret, <S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; int pos <S2SV_ModStart> ; hx = kzalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart> ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModEnd> ret = usb_cypress_writemem <S2SV_ModStart> 0 ) { <S2SV_ModEnd> reset = 1 <S2SV_ModStart> = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""firmware <S2SV_blank> download <S2SV_blank> failed <S2SV_blank> at <S2SV_blank> %d <S2SV_blank> with <S2SV_blank> %d"", pos, ret ) ; kfree ( hx ) ; return ret ; } <S2SV_ModEnd> if ( ret <S2SV_ModStart> 0 ) { <S2SV_ModEnd> reset = 0 <S2SV_ModStart> = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModEnd> val_h = EXTRACT_16BITS <S2SV_ModStart> val_l ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""Timeout=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; ptr ++ ; N",0
229,"<S2SV_ModStart> princ ) ; if ( c1 && c2 && strncmp ( c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0",0
230,"<S2SV_ModStart> * bo ; struct vc4_shader_state * shader_state ; uint32_t uniforms_size ; uint32_t temp_size ; if ( args -> shader_rec_count >= ( UINT_MAX / sizeof ( struct vc4_shader_state ) ) || temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } shader_state = temp + bin_offset ; uniforms_u = temp + shader_rec_offset ; uniforms_state = temp + uniforms_size ; exec -> shader_state_size = temp + exec_size ; if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( shader_state, ( void __user * ) args -> shader_state, args -> shader_state_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> if ( zip,0
232,"<S2SV_ModStart> -> vm_file ) ; ext4_inode_dio_wait ( inode ) ; <S2SV_ModStart> ext4_file ) ; <S2SV_ModEnd> if ( test_opt <S2SV_ModStart> ext4_nonda_switch ( inode ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && ext4_should_retry_alloc ( inode -> i_sb, & retries ) ) ; goto out_ret ; } if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && ext4_should_retry_alloc ( inode -> i_sb, & retries ) ) ; goto out_ret ; }",0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> arg ) { if ( * arg == '\\n' ) { * b ++ = '\\n' ; break ; } arg ++ ; } <S2SV_ModStart> case '\\n' : { <S2SV_ModStart> break ; default : <S2SV_ModEnd> * b ++ <S2SV_ModStart> * arg ; } <S2SV_ModEnd> arg ++ ;,0
235,"<S2SV_ModStart> ( ndo, ""%s"", NPSTR ( ikev1_p_map ) <S2SV_ModEnd> ) ) ;",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean <S2SV_ModEnd> accept_ice_connection ( GIOChannel <S2SV_ModStart>, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; g_object_unref ( client ) ;",0
237,<S2SV_ModStart> = CHECKSUM_NONE ; skb_orphan_frags ( skb ) ;,0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_DONTROUTE : v. val = sock_flag ( sk, SOCK_DONTROUTE ) ; break ; case SO_REUSEPORT : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_ACCEPTCONN : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPOPEN : v. val =",0
240,<S2SV_ModStart> { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> ) ; else <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ) ; else <S2SV_ModEnd> msg -> msg_namelen,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_z ) ; } }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_subject_name ( cert <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_issuer_name ( cert <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_subject_name ( cert <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_issuer_name ( cert <S2SV_ModStart> ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg",0
244,"<S2SV_ModStart> out_free ; } kvm_release_memory_region ( kvm, mem ) ;",0
245,<S2SV_ModStart> ; err = - EINVAL ;,0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ;,0
247,"<S2SV_ModStart> * ni ; <S2SV_ModEnd> register u_int amt <S2SV_ModStart> ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> case RIP6_REQUEST : ND_TCHECK ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> dump"" ) ) ; ND_TCHECK ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; ND_TCHECK ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; rip6_entry_print ( ndo, ni, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> case RIP6_RESPONSE : ND_TCHECK ( ( ndo, "" <S2SV_blank> ripng-resp <S2SV_blank> dump"" ) ) ; break ; case RIP6_STATUS : ND_TCHECK ( ( ndo, "" <S2SV_blank> ripng-resp <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-resp",0
248,<S2SV_ModStart> ; if ( unlikely ( ret == - EPERM ) ) { ret = - EPERM ; goto error ; } <S2SV_ModEnd> goto set ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; strncpy ( iname, fmt -> interpreter, BINPRM_BUF_SIZE ) ;",0
251,<S2SV_ModStart> = 0.0 ; <S2SV_ModEnd> res -> ContribRow <S2SV_ModStart> = iLeft ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } <S2SV_ModEnd> if ( dTotalWeight,0
252,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" <S2SV_ModEnd> ) ; return",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> limit = 0,0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; if (! mobj ) return NULL ; <S2SV_ModStart> ( mobj ) memset <S2SV_ModEnd> ( mobj_get_va (,0
256,<S2SV_ModStart> += incr ; if (! timer -> it_overrun ) { <S2SV_ModStart> += 1 << i ; delta -= incr ; },0
257,<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch ) == <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> NCH ( for_ch <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( NCH ( <S2SV_ModStart> ; if ( <S2SV_ModEnd>,0
258,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { <S2SV_ModEnd> const MACROBLOCKD * <S2SV_ModStart> -> mi_stride ] <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> ; const MODE_INFO * const above_mi = mi <S2SV_ModEnd> [ - xd <S2SV_ModStart> ; const MODE_INFO * const left_mi = mi <S2SV_ModEnd> [ - xd <S2SV_ModStart> ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; for ( idx = 0 ; idx < num_4x4_w ; ++ idx ) { write_intra_mode ( w, mi -> bmi [ block ]. as_mode, get_y_mode_probs ( mi, above_mi",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart> r -> req. tag, r -> iov. iov_len <S2SV_ModEnd> ) ; n <S2SV_ModStart> n ; scsi_req_data <S2SV_ModEnd> ( & r",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) { SWF_LOG ( 3, ( ""decompileAction: <S2SV_blank> n <S2SV_blank> %d <S2SV_blank> maxn <S2SV_blank> %d"", n, maxn ) ) ; <S2SV_ModStart> endif switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_WAITFORFRAME : decompileWAITFORFRAME ( & actions [ n ] ) ; return 0 ; case SWFACTION_SETPROPERTY : decompileSETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME :",0
264,<S2SV_ModStart> ; if ( l < 0 ) { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ) ) ) ) ) ) ) ) ) ) ) ) ; AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ,0
265,<S2SV_ModStart> out ; } if ( free < 0 ) { err = - ENOSPC ; goto out ; },0
266,<S2SV_ModStart> ) ) ; if ( <S2SV_ModEnd> len < sizeof <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg <S2SV_ModEnd> ) ; value <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ATUSB_REQ_FROM_DEV, <S2SV_ModEnd> reg, & <S2SV_ModStart>, 1, 1000 ) ; if ( ret < 0 ) <S2SV_ModEnd> return ret ; <S2SV_ModStart> ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> sizeof ( char <S2SV_ModEnd> ) * (,0
270,<S2SV_ModStart> } } <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart>, dwFlags, & m, & off ) ; if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_NO_MISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; } if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_NOMISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; } if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_MISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; } if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_NOMISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; } if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_NOMISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; } if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_MISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; } if ( m == NULL ) { cmsSignalError ( ContextID, cmsERROR_NOMISC, ""NoMISC <S2SV_blank> available"" ) ; goto Error ; }",0
272,"<S2SV_ModStart> { for ( i = 0 ; i < sec -> size ; i += 4 <S2SV_ModEnd> ) { ut32 <S2SV_ModStart> ( i = 0 ; i < sec -> size ; i += 4 <S2SV_ModEnd> ) { ut64 <S2SV_ModStart> ( i = 0 ; i < sec -> size ; i += 8 ) { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } }",0
273,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( * tptr, subl ) ;",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] < 0 ) { return - 1 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] < 0 ) { return - 1 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] < 0 ) { return - 1 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ] < 0 ) { return - 1 ; } <S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [,0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc,0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> struct bfq_data * <S2SV_ModStart> struct bfq_data * data <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> unsigned long flags <S2SV_ModEnd> ; spin_lock_irqsave ( <S2SV_ModStart> flags ) ; data = bfq_bfqq_data ( bfqq ) ; <S2SV_ModStart> return ; } <S2SV_ModEnd> if ( bfq_bfqq_budget_timeout <S2SV_ModStart> ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ; if ( unlikely ( idx >= XEN_NETIF_MAX_TX_REQS ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModEnd> idx = vif <S2SV_ModStart> req_cons ; rmb ( ) ; memcpy ( & txfrags, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txfrags ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif, & txreq ) ; continue ; } <S2SV_ModEnd> netbk_tx_err ( vif",0
279,<S2SV_ModStart> cb ) { <S2SV_ModEnd> struct net *,0
280,<S2SV_ModStart> conn ) ; h2o_http2_parse_input_data <S2SV_ModEnd> ( conn ),0
281,"<S2SV_ModStart> ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp <S2SV_ModEnd> ; int nr_frags <S2SV_ModStart> status ; if ( unlikely ( nr_frags < 1 ) ) goto done <S2SV_ModEnd> ; start = <S2SV_ModStart>, newerr ; pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_ring_idx_t index ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( likely (! newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ;",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
284,<S2SV_ModStart> ; if ( len < sizeof ( struct hv_kvp_ipaddr_value ) ) { error = - EINVAL ; close ( fd ) ; exit ( EXIT_FAILURE ) ; },0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; if ( update_msg == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } if (",0
287,"<S2SV_ModStart> + diffBlockLength || extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > newDataLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,"<S2SV_ModStart> ; if (! fibh -> sbh ) goto out_err ; fi = udf_tread ( dir -> i_sb, lfi ) ; if (! fi ) goto out_err ;",0
289,"<S2SV_ModStart> ) ) ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ;",0
290,"<S2SV_ModStart> ; err = ip6_xmit <S2SV_ModEnd> ( sk,",0
291,<S2SV_ModStart> ib_ucm_cmd_hdr hdr ; size_t <S2SV_ModEnd> result ; if,0
292,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> = cgdir ; <S2SV_ModEnd> if (! <S2SV_ModStart> O_RDWR ) ) { <S2SV_ModEnd> ret = - <S2SV_ModStart> - EACCES ; goto out ; } <S2SV_ModEnd> if ( caller_is_in_ancestor <S2SV_ModStart> ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } <S2SV_ModEnd> ret = cgfs_create <S2SV_ModStart> ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; out : free ( fpath ) ; <S2SV_ModEnd> free ( cgdir <S2SV_ModStart> ) ; return <S2SV_ModEnd> ret ; }",0
293,<S2SV_ModStart> ) ) { kfree ( disk ) ; kfree ( disk ) ;,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> ; if ( <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_bands > 1 && <S2SV_ModEnd> number_data_bands > 1 <S2SV_ModStart> number_data_,0
296,"<S2SV_ModStart> ; int64_t index_pts ; if ( ( index_pts = ff_rescale ( itime, i, 10000 ) ) < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", index_pts, pct ) ; return - 1 ; }",0
297,<S2SV_ModStart> srp ) ; if ( unlikely (! srp_init ( srp ) ) ) return - ENOMEM ;,0
298,"<S2SV_ModStart>, global_active ) ; # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""dynamic_interfaces"", & dynamic_interfaces_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""default_interface"", & default_interface_handler ) ; # endif # if",0
299,"<S2SV_ModStart> ) { return encoder_common_init <S2SV_ModEnd> ( ctx,",0
300,<S2SV_ModStart> 0 ) { if ( strlen ( key ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> key ) + 2 ; if ( strlen ( key ) + 2 > length ) { kfree ( tmpbuf ) ; return - 1 ; },0
301,"<S2SV_ModStart> ENOENT ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID <S2SV_ModEnd>, 0 )",0
302,"<S2SV_ModStart> 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> len ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> len ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank>",0
303,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size",0
304,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> = false ; memset ( & vnet_hdr, 0, sizeof ( vnet_hdr ) ) ; <S2SV_ModStart> ( m && <S2SV_ModEnd> m -> msg_control <S2SV_ModStart> sock_flag ( & q -> sk, SOCK_ZEROCOPY ) ) copylen = vnet_hdr. hdr_len ; if (! copylen ) copylen = GOODCOPY_LEN ;",0
305,"<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr <S2SV_ModEnd> ; u16 offset <S2SV_ModStart> ; while ( offset < ipv6_optlen ( exthdr ) <S2SV_ModEnd> ) { switch <S2SV_ModStart> nexthdr ) { case NEXTHDR_HOP : if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # else if ( IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif <S2SV_ModStart> return offset ; } <S2SV_ModEnd> offset += ipv6_optlen <S2SV_ModStart> ; exthdr = <S2SV_ModEnd> exthdr -> nexthdr <S2SV_ModStart> ; offset += ipv6_optlen ( <S2SV_ModEnd> exthdr ) ;",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; memcpy ( mvx, mvp -> mvx, sizeof ( mvx ) ) ; memcpy ( mvy, mvp -> mvy, sizeof ( mvy ) ) ; memcpy ( mvx, mvp -> mvy, sizeof ( mvx ) ) ; memcpy ( mvy, mvp -> mvy, sizeof ( mvy ) ) ; memcpy ( mvx, mvp -> mvx, sizeof ( mvx ) ) ; memcpy ( mvy, mvp -> mvy, sizeof ( mvy ) ) ; memcpy ( mvy, mvp -> mvy, sizeof ( mvy ) ) ; memcpy ( mvx, mvp -> mvx, sizeof ( mvx ) ) ; memcpy ( mvy, mvp -> mvy, sizeof ( mvy ) ) ; memcpy ( mvy, mvp -> mvy, sizeof ( mvy ) ) ; memcpy ( mvx, mv",0
308,<S2SV_ModStart> sll ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN || dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr ; union sctp_addr_param * addr_param ; sctp_addip_param_t * asconf_param ; struct sctp_chunk * asconf_ack ; struct sctp_association * asoc = asconf -> asoc ; struct sctp_association * asoc_init = asoc -> peer. asoc_init ; struct sctp_chunk * chunk = asconf -> chunk ; sctp_init_chunk ( asconf ) ; if (! asconf_ack ) goto done ; err_code = SCTP_ERROR_NO_ERROR ; all_param_pass = 1 ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; chunk_len -= length ; asconf_ack = sctp_make_asconf_",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n""",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> ; break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500MC ) ),0
316,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> goto response_done ; } memcpy ( kvp_data -> data. key, key_name, sizeof ( kvp_data -> data. key ) ) ; <S2SV_ModStart> 1 ) ; memcpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ) ) ; <S2SV_ModStart> valuelen = utf8s_to_utf16s ( kvp_data -> data. value, strlen ( kvp_data -> data. value ) ) ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; kvp_data -> data. key_type = REG_SZ ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; icmsghdrp -> icflags = ICMSGHDRFLAG_TRANSACTION | ICMSGHDRFLAG_RESPONSE ; vmbus_sendpacket ( channel, recv_buffer, buf_len, req_id, sizeof ( struct vmbuspipe_hdr ) ) ; memcpy ( kvp_data -> data. key, key_name, strlen ( key_name ) ) ; memcpy ( kvp_data ->",0
318,<S2SV_ModStart> -> log_ctx ; d -> log_file = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ;,0
319,<S2SV_ModStart> = OPJ_CLRSPC_SRGB ; } if ( img -> color_space == OPJ_CLRSPC_SRGB ) { img -> color_space = OPJ_CLRSPC_GRAY ; return ; },0
320,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> long err = <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> size_t ctrls_size = <S2SV_ModStart> case _IOC_NONE : if ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) return - EINVAL ; <S2SV_ModStart> case _IOC_READ : if ( cmd == VIDIOC_WRITE ) { parg = NULL ; break ; } <S2SV_ModEnd> case _IOC_READ : <S2SV_ModStart> case _IOC_WRITE : if ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) { parg = NULL ; break ; } <S2SV_ModEnd> if ( is_ext_ctrl <S2SV_ModStart> case _IOC_READ : if ( cmd == VIDIOC_READ ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p ->",0
321,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart>, u16 indx, u16 size, void * data, int timeout <S2SV_ModStart>, indx, size, timeout <S2SV_ModEnd> ) ; } <S2SV_ModStart>, indx, size, timeout ) ; return <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, size, timeout <S2SV_ModEnd> ) ; }",0
323,<S2SV_ModStart> { case RESPONSE_RUN <S2SV_ModEnd> : { screen <S2SV_ModStart> uri ) ; <S2SV_ModEnd> break ; case,0
324,"<S2SV_ModStart> -> port_number ; if ( urb -> actual_length && <S2SV_ModStart> -> lsr_event ) { if (! edge_port -> open ) { retval = - ENODEV ; dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 1, edge_port -> lsr_mask, * data ) ; -- edge_port -> actual_length ; ++ data ; } else { retval = - ENODEV ; dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- data ; }",0
325,"<S2SV_ModStart> ( struct TCP_Server_Info <S2SV_ModEnd> * server, <S2SV_ModStart> ( tmp, & server -> smb_ses_list ) ) { <S2SV_ModEnd> ses = list_entry <S2SV_ModStart> smb_ses_list ) ; <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>, username, <S2SV_ModEnd> MAX_USERNAME_SIZE ) ) <S2SV_ModStart> continue ; ++ ses <S2SV_ModEnd> -> ses_count ;",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> ; if ( ( cfg -> g_w!= 0 && ( cfg -> g_h!= 0 ) ) && ( ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) <S2SV_ModEnd> ) ) ERROR <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; } else { ctx -> cfg = * cfg ; }",0
327,"<S2SV_ModStart>'<S2SV_blank>') input = oinput = strdup ( input ) ; if (! <S2SV_ModStart>'<S2SV_blank>') input = oinput = strdup ( input ) ; if (! <S2SV_ModStart> input ++ ; if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; else if (! <S2SV_ModStart> } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } free ( ptr ) ; } break ; case '+' : r_fs_umount ( core -> fs, input + 1 ) ; break ; case '\\0' : r_list_foreach ( core -> fs -> roots, iter, root ) { r_cons_printf (",0
328,"<S2SV_ModStart> ) ; if ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; <S2SV_ModEnd> return ret ;",0
329,<S2SV_ModStart> new ) { const struct key * keyring = new -> thread_keyring ; if (! keyring ) return - ENOMEM,0
330,<S2SV_ModStart> = 0 ; size_t scanned ; size_t readnbd ; if ( readnbd > cmdsize ) { return - 1 ; } <S2SV_ModStart> scanned ++ ; if ( readnb > cmdsize - scanned ) { return - 1 ; },0
331,"<S2SV_ModStart> orig ) ; if ( copy == NULL ) { mrb_set_args ( mrb, ""o"", & orig ) ; return NULL ; } <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set (",0
332,"<S2SV_ModStart>,. match_data. type_data = KEY_IS_UNINSTANTIATED,. match_data.",0
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart>, callee_params ) ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart>, callee_params ) ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; u32 eip <S2SV_ModEnd> ; old_cs = <S2SV_ModStart>, VCPU_SREG_CS ) ; eip = ctxt -> _eip ; memcpy ( & eip, ctxt -> src. valptr + ctxt -> op_bytes, sizeof ( eip ) ) ; memcpy ( & eip <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, VCPU_SREG_CS ) ; memcpy ( & eip <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, VCPU_SREG_EIP ) ; memcpy ( & eip <S2SV_ModEnd>, ctxt -> <S2SV_ModStart>, VCPU_SREG_EIP ) ; memcpy ( & eip, ctxt -> src. valptr + ctxt -> op_bytes, sizeof ( eip ) ) ; ctxt -> src. val = eip <S2SV_ModEnd> ; rc =",0
336,<S2SV_ModStart> ; if ( j < 2 ) return AVERROR_INVALIDDATA ; if ( j < 2 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( j < 2 ) return AVERROR_INVALIDDATA ;,0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; } <S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; }",0
338,<S2SV_ModStart> out_error ; } <S2SV_ModEnd> if ( got_table,0
339,"<S2SV_ModStart> - EINVAL ; if ( info -> si_code < 0 ) return - EPERM ; <S2SV_ModStart> si_code >= 0 && info -> si_signo >= sig ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ),",0
341,"<S2SV_ModStart> char * fname, <S2SV_ModEnd> int lower, <S2SV_ModStart> ) fname ) ; if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModStart> ) fname ++ ; if (! fname ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModStart> sep ) fname ++ ; if (! fname ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModEnd> p = & <S2SV_ModStart> fname ++ ; if ( utf8 ) { do { if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xF ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else { x = '?' ; } } else { if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { x = ( c & 0xF )",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; <S2SV_ModStart> } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } <S2SV_ModEnd> } if (",0
343,"<S2SV_ModStart> goto __err ; memset ( tu, 0, sizeof ( * tu ) ) ;",0
344,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! ptr -> movie_identifier ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! tmp_strsize ) return GF_ISOM_INVALID_FILE ;,0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> ; # ifdef EXIM_PERL if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { if ( group_count > 0 ) { int group_count = 0 ; int group_count = group_count ; if ( group_count > 0 ) { int group_count = group_count - 1 ; if ( group_count > 0 ) { int group_count = group_count - 1 ; if ( group_count > 0 ) { if ( group_count > 0 ) { int group_count = group_count - 1 ; group_count = group_count - 1 ; group_count = group_count ; group_count = group_count ; group_count = group_count ; group_count = group_count ; group_count = group_count ; group_count = group_count ; group_count = group_count ; group_count,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) { s -> seekable = strtoll ( p, NULL, 10 ) ; s -> filesize = strtoll ( slash + 1, NULL, 10 ) ; } else { s -> seekable = - 1 ; } }",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> maxw = ( <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> offset = 1 <S2SV_ModStart> = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; maxw = maxw * maxh ; maxh = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = g = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r ==",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; }",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ;",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> 0 ; char * lbase = NULL, * ltest = NULL ; char * strbase = NULL ; char * strbase = NULL ; char * ltest = NULL ; char * strtest = NULL ; char * ltest = NULL ; char * strbase = NULL ; char * ltest = NULL ; char * strtest = NULL ; char * strbase = NULL ; char * ltest = NULL ; char * strtest = NULL ; int same = 0 ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"" "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_filename ) ; printf ( ""************************* <S2SV_blank> \\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) {",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data ; int ret ; data = cdc_ncm_select_altsetting ( intf, CDC_NCM_COMM_ALTSETTING_NCM ) ; if (! data ) return - ENODEV ; <S2SV_ModStart> ret = cdc_ncm_bind_common <S2SV_ModEnd> ( dev, <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM, data <S2SV_ModEnd> ) ; usbnet_link_change",0
355,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
356,<S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
357,"<S2SV_ModStart> ; err = ipv6_check_entry_offsets <S2SV_ModEnd> ( e,",0
358,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ;",0
359,"<S2SV_ModStart> 1 ) ; } ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; } ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ;",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_use_lock_sync ( & <S2SV_ModStart> q ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ;,0
361,"<S2SV_ModStart> ; u64 start <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; u64 end <S2SV_ModEnd> ; pgoff_t curr <S2SV_ModStart> ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } <S2SV_ModEnd> unlock_page ( page <S2SV_ModStart> ) ) { <S2SV_ModEnd> mark_inode_dirty ( inode <S2SV_ModStart> ; out : <S2SV_ModEnd> brelse ( dibh <S2SV_ModStart> : return error <S2SV_ModEnd> ; } <S2SV_null>",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> ( load -> real, out ) ) return ( NULL ) ; if (! class -> load ( load ) ||! vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } return ( vips_region_new ( load -> real ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
363,"<S2SV_ModStart> image_noffset ) { const char * name ; name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } }",0
364,"<S2SV_ModStart> xfs_attr_leaf_name_local_t * name_loc ; memset ( name_loc, 0, sizeof ( * name_loc ) ) ; if (! ( name_loc -> flags & XFS_ATTR_INCOMPLETE ) ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } if (! ( name_loc -> flags & XFS_ATTR_INCOMPLETE ) ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } if (! ( name_loc -> flags & XFS_ATTR_LOCAL ) ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } if (! ( name_loc -> flags & XFS_ATTR_INCOMPLETE ) ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf",0
365,<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo. size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo. size = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; state -> tx_kfifo. size = CX23888_IR_TX_KFIFO_SIZE ;,0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv ) <S2SV_ModStart> += service_name_tlv_length ; if ( miux_tlv ) { <S2SV_ModStart> += miux_tlv_length ; } <S2SV_ModStart> rw_tlv_length ) ; if ( rw_tlv ) { <S2SV_ModStart> += rw_tlv_length ; },0
367,"<S2SV_ModStart> void ) { <S2SV_ModEnd> struct ssh * <S2SV_ModStart> ssh = active_state <S2SV_ModEnd> ; monitor_openfds ( <S2SV_ModStart> ; if ( options. compression &&! mon -> m_zlib ) mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS )",0
369,<S2SV_ModStart> * chan ; jas_uint16 <S2SV_ModEnd> channo ; if,0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
371,<S2SV_ModStart> ; icmp_param. code = code ; icmp_param. info = info ;,0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ;",0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> crypto_free_skcipher ( private,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) break ; <S2SV_ModStart> -= 2 ; if ( dlen < 1 ) break ; <S2SV_ModEnd> * pt ++,0
378,"<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( tags,",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if (! skb_is_nonlinear ( skb ) || <S2SV_ModEnd> A > skb,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> or <S2SV_blank> tile <S2SV_blank> rowsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; }",0
385,"<S2SV_ModStart> 'u' }, # if defined ( _WITH_BFD_ ) { ""no_bfd"", no_argument, NULL, 3 }, # if defined ( _WITH_LVS_ ) { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-respawn"", no_argument, NULL, 'n' }, # if defined ( _WITH_LVS_ ) { ""dont-fork"", no_argument, NULL, 'n' }, # if defined ( _WITH_BFD_ ) { ""no_bfd"", no_argument, NULL, 3 }, # if defined ( _WITH_LVS_ ) { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif { ""dont-respawn"", no_argument, NULL, 'n' }, # if defined ( _WITH_LVS_ ) { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # if defined _WITH_BFD_ { ""no_bfd"", no_",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return <S2SV_ModEnd> EINVAL ; } <S2SV_ModStart> ; } return <S2SV_ModEnd> error ; },0
387,<S2SV_ModStart> ) ; struct o2net_cluster <S2SV_ModEnd> * cluster = <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; char * <S2SV_ModStart> - EINVAL ; tmp = node -> nd_num ; if ( tmp == cluster -> cl_has_local && cluster -> cl_local_node!= node -> nd_num ) return - EBUSY ; if ( tmp == cluster -> cl_has_local && cluster -> cl_local_node == O2NM_INVALID_NODE_NUM ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; ret = count ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
388,"<S2SV_ModStart> ; if ( fscanf ( fp, ""\\n <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if (",0
389,<S2SV_ModStart> case 0x0a : case 0x0b : case 0x0c : case 0x0d : case 0x0e : case 0x0f :,0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> net = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> ; out_unlock : <S2SV_ModEnd> sctp_transport_put ( transport",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> create <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fflush ( stdout ) ;",0
393,<S2SV_ModStart> trunc ; ND_TCHECK_32BITS ( lshp -> ls_type ) ; ND_TCHECK_16BITS ( lshp -> ls_age ) ; ND_TCHECK_32BITS ( lshp -> ls_length ) ;,0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> -> ds_present = ND_TTEST2 ( * ( p + offset ), <S2SV_ModEnd> tim. length <S2SV_ModStart> -> cf_present = ND_TTEST2 ( * ( p + offset ), <S2SV_ModEnd> tim. length <S2SV_ModStart> -> tim_present = ND_TTEST2 ( * ( p + offset ), tim. length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), tim. length ) ) return 0 ; memcpy ( & rates, p + offset, rates. rates ) ; offset += rates. rates ; length -= rates. rates ; if (! ND_TTEST2 ( * ( p + offset ), tim. length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), tim. length ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), tim. length ) ) return 0 ; memcpy ( & rates, p + offset, rates. rates ) ; offset += rates. rates ; length -= rates. rates ; if (! ND_TTEST2 ( * ( p + offset ), tim.",0
396,<S2SV_ModStart> } else { if ( ibuf -> len < len ) { ret = - EINVAL ; break ; } <S2SV_ModStart> } else { if ( ibuf -> len < len ) { ret = - EINVAL ; break ; },0
397,"<S2SV_ModStart> ) ; r_buf_set_bytes <S2SV_ModEnd> ( tbuf,",0
398,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; mm_segment_t <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""proc"", MS_NOEXEC | MS_",0
400,"<S2SV_ModStart> stf_status ikev2_inI1outR1 ( st, <S2SV_ModEnd> md -> iface <S2SV_ModStart> md -> iface, <S2SV_ModEnd> md -> sender_port",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> BYTE * bmpdata, UINT32 rowstride, BOOL use_aycocg <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> { nsc_encode_subsampling ( <S2SV_ModEnd> context ) ; <S2SV_ModStart> } <S2SV_null> <S2SV_null>",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
403,<S2SV_ModStart> ( stringset == ETH_SS_STATS <S2SV_ModEnd> ) return ARRAY_SIZE,0
404,<S2SV_ModStart> == 1 ) return ( <S2SV_ModEnd> GetPSDPacketSize ( image,0
405,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR | O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY,0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } alt = alt -> cur_altsetting ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } alt = alt -> cur_altsetting ; if ( alt -> desc. bNumEndpoints < 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> struct device * dev <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart> dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_BITS ) { return - 1 ; } <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) <S2SV_ModEnd> << ( pirlvl <S2SV_ModStart> hsamp * ( JAS_CAST ( uint",0
409,<S2SV_ModStart> target_enc ) { if ( ci -> syntax == ONIG_SYNTAX_NONE ) { r = ONIGERR_INVALID_DESCRIPTORS ; goto err2 ; },0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t depth, <S2SV_ModEnd> register Quantum * <S2SV_ModStart> register Quantum * q <S2SV_ModEnd> ; Quantum index <S2SV_ModStart> ; ssize_t x ; <S2SV_ModEnd> register Quantum * <S2SV_ModStart> ; ssize_t x <S2SV_ModEnd> ; register Quantum <S2SV_ModStart> ; index = <S2SV_ModEnd> 0 ; switch <S2SV_ModStart> case 1 : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 ) { index = ( Qu",0
411,"<S2SV_ModStart> const u_char * t <S2SV_ModEnd> ) { u_int <S2SV_ModStart> network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %u <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ) ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> (%u)"", tok2str ( af_",0
412,"<S2SV_ModStart> desc_struct ss ; <S2SV_ModEnd> int usermode ; <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; <S2SV_ModEnd> ops -> get_msr <S2SV_ModStart> = 3 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModEnd> cs_sel |= SELECTOR_RPL_MASK <S2SV_ModStart> = 1 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> _eip = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC ) ; * reg_write ( ctxt, VCPU_REG",0
413,"<S2SV_ModStart> ) ; return sprintf <S2SV_ModEnd> ( buf, <S2SV_ModStart> -> driver_override ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
414,"<S2SV_ModStart>, i ; <S2SV_ModEnd> if ( out <S2SV_ModStart> CMS_TEXT ) { <S2SV_ModEnd> tmpout = BIO_new <S2SV_ModStart> } tmpout = BIO_new <S2SV_ModEnd> ( BIO_s_mem (",0
415,"<S2SV_ModStart> retval, NULL <S2SV_ModEnd> ) ; }",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii ; for ( ii = 0 ; ii <= 1 ; ++ ii ) { const int cc = c + vpx_cost_bit ( prob, b ) ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart> ) ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IWUSR | S_IWUSR ) == 0 ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IWUSR | S_IWUSR ) == 0 ) { if ( ( st. st_mode & ( S_IRUSR | S_IWUSR ) ) == 0 ) { if ( ( st. st_mode & ( S_IWUSR |,0
418,"<S2SV_ModStart> = 0 ; if ( strlen ( addr_text ) < 2 ) { sprintf ( addr, ""<AF <S2SV_blank> %d>"", af ) ; return ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr, ""<AF <S2SV_blank> %d>"", af ) ; return ; } strncpy ( addr_text, ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; protoname = ""unix"" ; break ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr, ""<AF <S2SV_blank> %d>"", af ) ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr, ""<AF <S2SV_blank> %d>"", af ) ; return ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr, ""<AF <S2SV_blank> %d>"", af ) ; return ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr, ""<AF <S2SV_blank> %d>"", af ) ; return ; }",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) err = - ENODEV ; else err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct hstate * <S2SV_ModStart> h = hstate_vma ( vma ) <S2SV_ModEnd> ; struct page <S2SV_ModStart> page ) { <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_",0
422,"<S2SV_ModStart> ; DPRINTF ( 4 <S2SV_ModEnd>, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) <S2SV_ModEnd> ) ; filegen",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error = SD_BUS_ERROR_NULL ; if ( r < 0 ) goto fail ; r = touch_file ( t -> stamp_path, true, <S2SV_ModEnd> t -> last_trigger",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 3 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t <S2SV_ModEnd> x",0
425,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,0
427,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFFHorAcc16_t <S2SV_ModEnd> ( tif,",0
428,"<S2SV_ModStart> tot_len ) ; memset ( & opt2 -> opt, 0, tot_len ) ;",0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl32 ( pb ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ( ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } free ( fpath ) ; <S2SV_ModEnd> return ret ;",0
431,<S2SV_ModStart> MNT_MARKED ) ; mnt -> mnt. mnt_flags |= ( flag & ( CL_UNPRIVILEGED | CL_READONLY ) <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> |= MNT_LOCK_READONLY ; mnt -> mnt. mnt_flags |= ( flag & ( CL_UNPRIVILEGED | CL_SHARED_TO_SLAVE ) <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> |= MNT_LOCKED ; <S2SV_ModEnd> atomic_inc ( &,0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( * rsize >= 104 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x21 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> serio ) ; spin_unlock_irqrestore ( & i8042_lock, flags ) ; if ( str & I8042_STR_OBF ) { spin_unlock_irqrestore ( & i8042_lock, flags ) ; ret = 0 ; goto out ; }",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> uint8_t * udfName <S2SV_ModEnd>, int udfLen <S2SV_ModStart> newIndex ; } <S2SV_null> static <S2SV_ModStart> newIndex ; } <S2SV_null> static <S2SV_ModStart> newIndex ; } static int udf_translate_to_linux ( uint8_t * newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen, uint8_t * fidName, int fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; if ( udfName [ newIndex ] == '.' ) { memcpy ( newName, udfName, udfLen ) ; } else { if ( udfName [ newIndex ] == '.' ) { needsCRC = 1 ; newIndex = udfLen ; memcpy ( newName, udfName, udfLen ) ; } else { memcpy ( newName, udfName, udfLen ) ; } } return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
438,"<S2SV_ModStart> void count_segs_sb ( VP9_COMMON * cm, <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int bs <S2SV_ModStart> ] ; int hbs = bs / 2 ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row + hbs, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs,",0
439,<S2SV_ModStart> ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ;,0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> = - 1 <S2SV_ModStart> ; if ( d2i_DSA_SIG <S2SV_ModEnd> ( & s <S2SV_ModStart>, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ;",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ; if ( rv ) return rv ;",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> size_t canonnamelen = <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & p -> ai_addrlen,",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,"<S2SV_ModStart> ] ) ; if ( rctx -> image_height < 0 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> image <S2SV_blank> size"" ) ; goto done ; } <S2SV_ModStart> ] ) ; if ( rctx -> image_height < 0 ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> image <S2SV_blank> height"" ) ; goto done ; }",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> 100 ) ; kfree ( buf ) ;",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,"<S2SV_ModStart> destroy_list ) ; sas_destruct_event ( dev -> port <S2SV_ModEnd>, DISCE_DESTRUCT )",0
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> ts_end, unsigned <S2SV_ModEnd> int flags ) <S2SV_ModStart> -> write_idx ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> bits_per_sample > 8 ) return 1 ; # else int row, col, active_end ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> bits_per_sample > 8 ) return 1 ; # endif <S2SV_ModStart> -> write_idx ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( <S2SV_ModEnd> flags ) { <S2SV_ModStart> } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; if (! * s4u_x509_user ) { * status = ""INVALID_S4U2SELF_REQUEST"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,"<S2SV_ModStart> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModEnd> * r, <S2SV_ModStart> outbuf ) ; if ( buflen < 0 ) goto illegal_request ;",0
455,<S2SV_ModStart> || s -> cur_pic <S2SV_ModEnd>. field_picture ||,0
456,"<S2SV_ModStart> { if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; <S2SV_ModStart> ) ; return <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; } if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; if ( hdr -> h_flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } if ( hdr -> h_flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES <S2SV_ModEnd> ; } <S2SV_null>",0
457,<S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; ext_block =,0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,<S2SV_ModStart> ) { ND_TCHECK <S2SV_ModEnd> ( * mh <S2SV_ModStart> 8 ) ; ND_TCHECK <S2SV_ModEnd> ( * mh,0
460,<S2SV_ModStart> dev ) ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING ;,0
461,"<S2SV_ModStart> hmi_data ; uint32_t hmi_bpm = 0 ; uint32_t hmi_track_cnt = 0 ; uint32_t hmi_track_offset = NULL ; <S2SV_ModStart> ; } * note = NULL ; UNUSED ( hmi_base ) ; UNUSED ( hmi_size ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if",0
462,<S2SV_ModStart> -> id ; if ( * addr_len < sizeof ( * haddr ) ) * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] <S2SV_ModEnd> = inode ->,0
464,"<S2SV_ModStart> ) ) { if ( request -> kdc_options & AS_INVALID_OPTIONS ) { * status = ""INVALID <S2SV_blank> AS <S2SV_blank> OPTIONS"" ; return KDC_ERR_BADOPTION ; } else if ( request -> kdc_options & AS_INVALID_OPTIONS ) { * status = ""INVALID <S2SV_blank> AS <S2SV_blank> OPTIONS"" ; return KDC_ERR_BADOPTION ; } else if ( request -> kdc_options & AS_INVALID_OPTIONS ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( request -> kdc_options & AS_INVALID_OPTIONS ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_NAME_EXP ) ; } else { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; }",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; <S2SV_ModStart> else { search_filter_level <S2SV_ModEnd> ( sd, <S2SV_ModStart> method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModEnd> ) ; }",0
467,<S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED <S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED <S2SV_ModStart> BT_STATUS_SUCCESS ) { <S2SV_ModEnd> BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED <S2SV_ModStart> status ) ; },0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_row_count + 1 ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( data_sz > VPX_CODEC_MAX_DATA_SIZE || ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) || ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) || ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_ERROR ; # else res = VPX_CODEC_INVALID_PARAM ; # endif <S2SV_ModStart>. decode ( ctx -> priv -> alg_priv, data, data_sz <S2SV_ModEnd>, user_priv,",0
474,"<S2SV_ModStart> int ret ; if ( <S2SV_ModEnd> value [ strlen <S2SV_ModStart> ] == ',' ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; }",0
475,"<S2SV_ModStart> inode * inode, fmode_t fmode",0
476,"<S2SV_ModStart> ) ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; goto trunc ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; goto trunc ; } if ( source_address_number > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; goto trunc ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; goto trunc ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; goto trunc ; }",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
478,<S2SV_ModStart> { BUG ( ) ; return false <S2SV_ModEnd> ; } } <S2SV_ModStart> else { BUG ( ) ; return false <S2SV_ModEnd> ; } },0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= Z_TYPE_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= Z_TYPE_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } } else { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
480,<S2SV_ModStart> self ) { if ( self -> dict ) Py_CLEAR ( self -> dict ) ;,0
481,<S2SV_ModStart> SQL_DROP ) ; <S2SV_ModEnd> return 0 ;,1
482,"<S2SV_ModStart> ; r = copy_to_user <S2SV_ModEnd> ( data,",0
483,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; exit",0
484,<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & pmus_lock ) ; <S2SV_ModStart> type = cpu_context ; mutex_unlock ( & pmus_lock ) ;,0
486,"<S2SV_ModStart>, struct iovec * iovec, size_t nr_segs <S2SV_ModEnd> ) { if <S2SV_ModStart> = 1 ; return len <S2SV_ModEnd> ; } <S2SV_null>",0
487,<S2SV_ModStart> ext4_group_t flex_group ; ext4_group_t <S2SV_ModEnd> groups_per_flex = 0 <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = ( <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> if ( groups_per_flex,0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) <S2SV_ModEnd> required_length ) ),0
489,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> ] ) ; if ( n ) { cJSON_Delete ( a, n ) ; a = 0 ; break ; } <S2SV_ModEnd> } return a",0
490,"<S2SV_ModStart> ) ) { if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ], parv [ 2 ] ) ; } if ( first ) { if (! EmptyString ( cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S <S2SV_blank> %s <S2SV_blank> :%s"", realhost, parv [ 1 ],",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ; },0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) match_length = callback_args -> data_size ;,0
493,<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ),0
494,<S2SV_ModStart> (! bitstream_read_bit <S2SV_ModEnd> ( bc ),0
495,<S2SV_ModStart> ; } m -> msg_namelen = 0 ;,0
496,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> if ( _PyObject_HasAttrId <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> if ( _PyObject_HasAttrId <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> res = obj2ast_stmt <S2SV_ModStart>, & value, arena ) < 0 ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } asdl_seq_SET ( body, i, value ) ; } Py_CLEAR ( tmp ) ; if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id",0
497,<S2SV_ModStart> int m ; jas_assert ( bufsize <= QMFB_SPLITBUFSIZE ) ; if ( numrows < 2 ) { jas_assert ( bufsize <= QMFB_SPLITBUFSIZE ) ; abort ( ) ; } <S2SV_ModEnd> if ( numrows <S2SV_ModStart> 2 ) { jas_assert ( numrows >= 2 ) ; hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = buf ; n = numrows - hstartcol ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } dstptr = & a [ hstartcol * stride ] ; src,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)",0
501,"<S2SV_ModStart> ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModStart> ( queue ) { spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModStart> ( queue ) { spin_lock_irqsave_nested ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; # ifdef CONFIG_LOCKDEP hashbin_lock_depth -- ; # endif } <S2SV_ModEnd> hashbin -> hb_current <S2SV_ModStart> ~ HB_MAGIC ; <S2SV_ModEnd> return 0 ;",0
502,<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) { err = - EPERM ; goto out ; } <S2SV_ModEnd> err = security_sb_remount,0
503,"<S2SV_ModStart> * skb ; struct sockaddr_ll * sll = msg -> msg_name <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart>, err ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,<S2SV_ModStart> ; if ( serial -> num_ports < 2 || serial -> num_ports > 2 + serial -> num_ports,0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> riffhdr ; DS64Chunk <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; int64_t total_riff_bytes ; int64_t total_samples ; int64_t total_samples ; int64_t total_samples ; int64_t total_samples ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_samples ) ; do_rf64 = 1 ; } else if ( total_samples > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_samples ) ; do_rf64 = 0 ; } else { if ( debug_logging_",0
507,"<S2SV_ModStart> msg ) ; memset ( & addr, 0, sizeof ( addr ) ) ;",0
508,<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = ip_meta ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = ip_meta ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = ip_meta ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_,0
509,"<S2SV_ModStart>, vpx_codec_iface_name <S2SV_ModEnd> ( global -> <S2SV_ModStart> -> filename, <S2SV_ModEnd> input -> use_i420 <S2SV_ModStart> input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; fprintf ( stderr, ""\\nEncoder <S2SV_blank> parameters:\\n"" ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\n",0
510,"<S2SV_ModStart> ; PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> -> priv -> prof_nsc_decode ) <S2SV_ModStart> -> decode ( context ) ; PROFILER_EXIT ( context -> priv -> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT",0
511,"<S2SV_ModStart> -> psvi == XSLT_REFACTORED && ( attr -> ns!= NULL ) && ( attr -> children -> type!= XML_TEXT_NODE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( ( attr -> psvi == XSLT_REFACTORED ) && ( attr -> ns!= NULL ) && ( attr -> children -> type!= XML_TEXT_NODE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
512,"<S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> 0 ) { copy_file_as_user <S2SV_ModEnd> ( ""/",0
513,<S2SV_ModStart> ( fv -> b. sf -> fv!= & fv -> b ) { return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> timr ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; <S2SV_ModStart> it_value ) ; if ( new_setting -> it_interval ) when = timespec_to_ns ( new_setting -> it_interval ) ; else when = 0 ;,0
516,<S2SV_ModStart> (! js_regexec <S2SV_ModEnd> ( re ->,0
517,<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart> 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; } else { <S2SV_ModEnd> caml_set_oo_id ( ( <S2SV_ModStart> ) dest ) ; },0
518,"<S2SV_ModStart>, multipart_media ; <S2SV_ModEnd> struct evbuffer * <S2SV_ModStart> = NULL ; <S2SV_ModEnd> size_t content_length ; <S2SV_ModStart> ; size_t content_length ; size_t <S2SV_ModEnd> nranges, ret <S2SV_ModStart> = 500, fd = - 1, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; const char * errstr = NULL ; if ( ( st = stat ( path, O_RDONLY ) ) == NULL ) { errstr = ""failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) goto abort ; media = media_find_config ( env, srv_conf, path ) ; if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort",0
519,"<S2SV_ModStart> = FALSE ; if ( interface -> nicEvent ) return flag ; <S2SV_ModStart>, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER, KSZ8851_IER_LCIE <S2SV_ModEnd> ) ; isr <S2SV_ModStart>, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS ) ; if ( ( isr & KSZ8851_ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } else { flag |= osSetEventFromIsr ( & interface -> nicTxEvent )",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> QINDEX_BITS ) ; vpx_wb_write_delta_q ( wb, cm -> y_dc_delta_q ) ; vpx_wb_write_delta_q ( wb, cm -> uv_dc_delta_q ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
521,"<S2SV_ModStart> ( ) ; if ( msglen > UINT16_MAX ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } case <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
523,"<S2SV_ModStart> fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) ) ;",0
524,<S2SV_ModStart> int flags ) { spin_lock ( & timerfd_ctx_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & timerfd_ctx_lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & timerfd_ctx_lock ) ;,0
525,"<S2SV_ModStart> ++ ) { if ( i >= nCurves ) { _cmsMallocZero ( ContextID, sizeof ( Curves16Data ) ) ; return NULL ; }",0
526,<S2SV_ModStart> { if (! path_is_dir ( dir ) ) { error = - ENOENT ; goto out ; },0
527,<S2SV_ModStart> buf_size ) ; if ( msg -> size > buf_size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( msg -> size > buf_size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } <S2SV_ModStart> buf_size ) ; if ( msg -> size > buf_size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; },0
528,"<S2SV_ModStart> ) ; RETVAL_STRINGL <S2SV_ModEnd> ( replaced,",0
529,<S2SV_ModStart> peerec ) ) { ret = - 1 ; goto sslerr ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> peerec ) ) { ret = - 1 ; goto sslerr ; },0
530,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
531,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> bsize ), hbs = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1",0
532,<S2SV_ModStart> name ) ; if (! name ) return 0 ;,0
533,"<S2SV_ModStart> row_ptr = 0 ; int block_ptr = 0 ; int pixel_x, pixel_y <S2SV_ModEnd> ; int total_blocks <S2SV_ModStart> break ; case 0xe1 : if ( s -> buf [ stream_ptr ]!= 0xe1 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> byte <S2SV_blank> is <S2SV_blank> 0x%02x <S2SV_blank> instead <S2SV_blank> of <S2SV_blank> 0xe1\\n"", s -> buf [ stream_ptr ] ) ; stream_ptr += 4 ; }",0
534,<S2SV_ModStart> cnt ) { jas_ssize_t <S2SV_ModEnd> n ; assert,0
535,<S2SV_ModStart> * ptype ; __be16 type ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; } } else { type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ),0
536,"<S2SV_ModStart> ; if ( numrows < 0 || numcols < 0 || numrows > JAS_MAX ( numrows, numcols ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; if ( matrix -> rows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> rows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> numcols_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = 0",0
537,"<S2SV_ModStart> } else { if ( session -> sessionType == TSS2_SESSION_TYPE_SHA1 ) { if ( session -> tpmKey == TPM_RH_NULL ) { if ( session -> bind == TPM_RH_NULL ) { session -> sessionKey. b. size = 0 ; } else { if ( session -> bind == TPM_RH_NULL ) { session -> sessionKey. b. size = 0 ; } } else { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> authValueBind. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_",0
538,"<S2SV_ModStart> ; ret = key_permission <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> u4_first_slice_in_pic = 0 ; ps_dec -> u4_first_slice_in_pic = 1 ; ps_dec -> u4_first_slice_in_pic = 1 ;,0
540,"<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; if ( dst_reg -> smin_value > S64_MAX || dst_reg -> smax_value > S64_MAX ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_DEL : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin",0
541,"<S2SV_ModStart> filp ) ; cifs_read_lock_nested ( & cifs_sb -> mnt_cifs_lock, F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW | F_NOFOLLOW",0
542,"<S2SV_ModStart> ; if ( copy_from_user ( & caps, ( void __user * ) arg, sizeof ( caps ) ) ) return - EFAULT ; <S2SV_ModStart> ; if ( copy_from_user ( & caps, ( void __user * ) arg, sizeof ( caps ) ) ) return - EFAULT ;",0
543,"<S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,"<S2SV_ModStart> = 1 ; if ( s -> filesize < 0 ) { av_log ( h, AV_LOG_WARNING, ""File <S2SV_blank> size <S2SV_blank> is <S2SV_blank> negative. <S2SV_blank> "" ) ; return AVERROR ( EINVAL ) ; }",0
545,<S2SV_ModStart> ; rcu_read_lock ( ) ; rcu_read_unlock ( ) ;,0
546,"<S2SV_ModStart> char * in, size_t len <S2SV_ModStart> += 4 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 4 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 4 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 4 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 2 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 4 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 4 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart>!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 6 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 6 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 6 ; if ( len >= 4 ) return - 1 ; <S2SV_ModStart> += 6 ; if ( len >= 4 ) return - 1 ;",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, len, total_written <S2SV_ModEnd> ; loff_t offset <S2SV_ModStart> cur_len ) ; total_written += copied <S2SV_ModEnd> ; } <S2SV_null>",0
549,<S2SV_ModStart> if (! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
550,"<S2SV_ModStart> ) { int <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> ; SvcInternal * const si <S2SV_ModEnd> ; svc_log_reset ( <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = 0 ; number_of_keyframes = 0 ; <S2SV_ModEnd> encode_frame_count = si <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ; encode_frame_count = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> ++ i ) { <S2SV_ModEnd> number_of_frames = encode_frame_count <S2SV_ModStart> ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank>",0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if ( left < 4 ) { return FALSE ; } <S2SV_ModStart> value ; left -= 4 ; } else { <S2SV_ModStart> value ; left -= 4 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
552,"<S2SV_ModStart> = new_cols ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = 0 ; rect. start_col = 0 ; damagerect ( rect, new_cols, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; }",0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> char * literal_start <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> char * literal_end <S2SV_ModEnd> ; int result <S2SV_ModStart> ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } } else { if ( ch == '}' ) { if ( recurse_lvl == 0,0
554,"<S2SV_ModStart> jas_stream_memobj_t * m, jas_uint32 <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> unsigned char * buf <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> bufsize ) ) ; buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ; if (! buf ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ; if (! buf ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ;",0
555,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
556,"<S2SV_ModStart> ; if (! strcmp <S2SV_ModEnd> ( symInterpretMatchMaskNames, <S2SV_ModStart>, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ;",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> void pcrypt_free ( <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_drop_aead ( &,0
558,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> neigh ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> no <S2SV_blank> neighbour <S2SV_blank> found\\n"" ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> rp ) ; len = nla_len ( rp ) ; if ( len < xfrm_replay_state_esn_len ( up ) || len > xfrm_replay_state_esn_len ( replay_esn ) || len > xfrm_replay_state_esn_len ( up ),0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table,",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> ; if (! l_tmp_data ) { opj_free ( l_tmp_data ) ; return 00 ; },0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCKD * xd, <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> int mi_col, <S2SV_ModEnd> TOKENEXTRA * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, TOKENEXTRA * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> ) { int <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev_mi = cm -> prev_mi <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> ; vp9_zero ( xd -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> BLOCK_SIZE bsize ; vp9_zero ( xd -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> case SOURCE_VAR_BASED_PARTITION : set_offsets <S2SV_ModEnd> ( cpi, <S2SV_ModStart> BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) obuf = opipe -> bufs + nbuf ; else obuf = opipe -> bufs + nbuf ;,0
570,"<S2SV_ModStart> u_int8_t state ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < sizeof ( _dh ) ) goto out_invalid ;",0
571,"<S2SV_ModStart> { Fp = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart> ""wb"" ) ; if ( Fp == NULL ) { return HTTP_INTERNAL_SERVER_ERROR ; } <S2SV_ModStart> Fp == NULL ) { parser -> http_error_code = HTTP_UNAUTHORIZED ; ret_code = HTTP_UNAUTHORIZED ; goto ExitFunction ; } <S2SV_ModEnd> parser -> position <S2SV_ModStart> POS_COMPLETE ) status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok_on_close = TRUE ; } else if ( status == PARSE_SUCCESS ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER",0
572,<S2SV_ModStart> ; if ( blkg ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg <S2SV_ModStart> ) ; } <S2SV_ModEnd> q -> root_rl,0
573,"<S2SV_ModStart> ; if ( ncolors < 1 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char <S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char,0
575,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } }",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> usbdevfs_connectinfo ci = { <S2SV_ModEnd>. devnum = <S2SV_ModStart> -> devnum,. slow = ps -> dev -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> IPOPT_END ; if ( opt -> optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } <S2SV_ModEnd> return 0 ;",0
578,"<S2SV_ModStart> ; } retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == ENOSPC ) { xfs_bmap_init ( args -> flist, args -> firstblock ) ; error = xfs_bmap_finish ( args -> flist, & committed ) ; if (! error ) { ASSERT ( committed ) ; args -> trans = NULL ; xfs_trans_ijoin ( args -> trans, dp, 0 ) ; } } else { xfs_bmap_init ( args -> flist, args -> firstblock ) ; error = xfs_bmap_finish ( args -> flist, & committed ) ; if (! error ) { ASSERT ( committed ) ; args -> trans = NULL ; xfs_trans_ijoin ( args -> trans, dp, 0 ) ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt ; }",0
579,"<S2SV_ModStart> ( int ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = 0 ; * ( int * ) Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_IOCTL_GET_DEVICE_COUNT : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_IOCTL_GET_VOLUME_DRIVE_NUMBER : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { LONG tmp = DeviceObject -> ReferenceCount ; memcpy ( Irp -> AssociatedIrp. SystemBuffer, & tmp, 4 ) ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_SUCCESS ; } break ; case TC_",0
580,"<S2SV_ModStart> ""Connection"" ) ; if ( connection == NULL || strlen ( connection ) <= 0 || <S2SV_ModStart> goto error ; if ( strlen ( connection ) <= 0 || <S2SV_ModStart> goto error ; if ( strlen ( connection ) <= 0 || strlen ( connection ) <= 0 || strlen ( connection ) <= 0 || strlen ( connection ) <= 0 || strlen ( connection ) <= 0 || strlen ( connection ) <= 0",0
581,<S2SV_ModStart> rpcap_findalldevs_if * findalldevs_if ; uint32 nif = 0 ; <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen > sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; },0
582,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart>, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
583,"<S2SV_ModStart> ) ; x += 2 ; if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex",0
584,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
585,"<S2SV_ModStart> sk, int <S2SV_ModEnd> tstype ) { <S2SV_ModStart> * serr ; <S2SV_ModEnd> serr = SKB_EXT_ERR <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; }",0
586,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
587,"<S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 0 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 1 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 2 ], len ) ; <S2SV_ModStart> = len ; ND_TCHECK2 ( bp [ 3 ], len ) ;",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",0
589,<S2SV_ModStart> (! dumpable &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ),0
590,<S2SV_ModStart> long ) ; if ( w < sizeof ( long ) && i < w,0
591,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,"<S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining < 4 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sei <S2SV_blank> payload <S2SV_blank> size <S2SV_blank> %d\\n"", __func__, u4_payload_size ) ; return ; } <S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining < 4 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> sei <S2SV_blank> payload <S2SV_blank> size <S2SV_blank> %d\\n"", u4_payload_size ) ; return ; }",0
594,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
595,<S2SV_ModStart> -> per_sdma ) { kfree ( dd -> per_sdma ) ;,0
596,<S2SV_ModStart> -> device_data ; if ( dev ) device_put ( & dev -> dev ) ;,0
597,"<S2SV_ModStart> const char * name <S2SV_ModEnd>, int rep_quick <S2SV_ModStart> name, int rep_quick <S2SV_ModEnd> ) { int <S2SV_ModStart>, rep_quick ) ; if (! ( param -> testflag & T_UNPACK ) ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %u\\n"", llstr ( start_records, llbuff ) ) ; }",0
598,<S2SV_ModStart> == q || <S2SV_ModEnd> size > 256,0
599,<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB,0
600,<S2SV_ModStart> } pairs = pcalloc <S2SV_ModEnd> ( pcount *,0
601,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart> val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
602,<S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ; if ( <S2SV_ModStart> ( yyscanner ) ;,0
603,"<S2SV_ModStart> agooHook ) { if ( NULL == hook ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; return HEAD_AGAIN ; }",0
604,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
605,"<S2SV_ModStart> ( g_str_has_prefix ( new_data, "".service"" ) && g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, ""dbus"" ) &&! g_str_has_prefix ( new_data, "".data"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, ""dbus"" ) &&! g_str_has_prefix ( new_data, "".data"" ) &&! g_str_has_prefix ( new",0
606,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = posix_acl_update ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; error = posix_acl_update ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_errno ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",0
607,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, ""Empty <S2SV_blank> meta-tree"" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; fflush ( fp ) ; fclose ( fp ) ; if ( chmod ( temp_filename, S_IRUSR | S_IRGRP | S_IWGRP ) == - 1 )",0
609,"<S2SV_ModStart> ( from + elen ) ; if ( pc -> lengthComponentIdent < 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 1 : if ( pc -> lengthComponentIdent < 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> case 2 : if ( pc -> lengthComponentIdent < 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= 2 ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : if ( pc -> lengthComponentIdent < 0 ) return - ENAMETOOLONG ; * p ++ = '/' ; tolen -= 3 ; break ; } elen += <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct pathComponent ) + <S2SV_ModEnd> pc -> lengthComponentIdent",0
610,"<S2SV_ModStart> ( ndo, ""%s"", nfs_tstr <S2SV_ModEnd> ) ) ;",0
611,"<S2SV_ModStart> case VTP_SUMMARY_VLAN : ND_TCHECK2 ( * tptr, 4 ) ; <S2SV_ModStart> case VTP_UPDATE_VLAN : ND_TCHECK2 ( * tptr, 8 ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Timestamp <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( tptr ), ipaddr_string ( ndo, tptr + 4 ) ) ; tptr += 4 ;",0
612,"<S2SV_ModStart> userData, target, ctxt -> instate <S2SV_ModStart>, target, ctxt -> instate <S2SV_ModStart>, target, ctxt -> instate",0
613,<S2SV_ModStart> sk ) ; msg -> msg_namelen = 0 ; <S2SV_ModStart> slow ; } <S2SV_ModEnd> if ( addr_len,0
614,"<S2SV_ModStart> len ) { <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> ) ) ; ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> trunc ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tlen -= sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ;",0
615,"<S2SV_ModStart> int tagval ; if ( s == NULL ) return False ; <S2SV_ModStart> length ) ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) return False ; if (! ber_in_header ( s, & tagval, & length ) || tagval!= ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) return False ; if (! ber_in_header",0
616,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> int elt ; <S2SV_ModStart> ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return",0
617,<S2SV_ModStart> args ) ; if ( args -> valuelen < args -> rmtblkcnt ) return XFS_ERROR ( EFSCORRUPTED ) ;,0
618,"<S2SV_ModStart> ; int rv <S2SV_ModEnd> = Socket_print ( <S2SV_ModStart>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src,",0
620,<S2SV_ModStart> flags ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset,0
621,"<S2SV_ModStart> value ) { value -> x = MaxF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MaxF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return 0 ; } <S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return GIT_EBUFS ; },0
623,"<S2SV_ModStart> ( vma, address, page_table <S2SV_ModEnd> ) < 0 <S2SV_ModStart> VM_FAULT_SIGSEGV ; unlock : pte_unmap ( page_table ) ; <S2SV_ModEnd> return VM_FAULT_SIGSEGV ;",0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> * new_data, * old_data ; new_data = env -> insn_aux_data ; old_data = env -> insn_aux_data ; <S2SV_ModStart> 1 ) ) ; env -> insn_aux_data = new_data ;",0
626,"<S2SV_ModStart> ; ND_TCHECK ( dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""vflag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_hdr ) ) ) ; } if ( ( EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK )!= 0 ) return - 1 ;",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,<S2SV_ModStart> 0 ) ; assert <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> 0 ) ; assert <S2SV_ModEnd> ( sp -> <S2SV_ModStart> 0 ) ; assert <S2SV_ModEnd> ( sp ->,0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, n -> order ) ; o += 2 ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount",0
631,<S2SV_ModStart> ; if ( ctx == NULL ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; },0
632,<S2SV_ModStart> = NULL ; hugetlbfs_put_super ( sb -> s_fs_info <S2SV_ModEnd> ) ; },0
633,<S2SV_ModStart> ; if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS ) ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENE,0
634,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> string ) ) + 1 ; size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart>, 1 ) ; free ( ns ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
635,"<S2SV_ModStart> ; RAnalOp next_op ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; }",0
636,"<S2SV_ModStart> ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } <S2SV_ModStart> again ; } iov_iter_advance ( i, copied ) ; pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ;",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } <S2SV_ModEnd> desc = ops <S2SV_ModStart> -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", tmp, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot )",0
638,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def -> <S2SV_ModStart> = usm_secmod_process_in_msg ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defAuthType"", snmpv3_authtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_privtype_conf, NULL, ""MD5|SHA|SHA-512|",0
639,"<S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ;",0
640,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags ; else sub -> flags &= ~ prog -> flags ;,0
641,<S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> + 1 ; if ( zsize > dlen / 3 ) return AVERROR_INVALIDDATA ;,0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
644,<S2SV_ModStart> j ] ; if ( j >= ( ssize_t ) length ) return ( - 1 ) ; if ( j >= ( ssize_t ) length ) return ( - 1 ) ; <S2SV_ModStart> j ] ; if ( j >= ( ssize_t ) length ) return ( - 1 ) ; <S2SV_ModStart> j ] ; if ( j >= ( ssize_t ) length ) return ( - 1 ) ; <S2SV_ModStart> j ] ; if ( j >= ( ssize_t ) length ) return ( - 1 ) ;,0
645,"<S2SV_ModStart> timer ) ; <S2SV_ModEnd> list_for_each_entry_safe ( slave <S2SV_ModStart> tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } <S2SV_ModEnd> mutex_unlock ( &",0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; }",0
647,"<S2SV_ModStart> -> has_va ; <S2SV_ModEnd> ut16 bits = <S2SV_ModStart> arch ) ; if ( info -> cpu && * info -> cpu ) { r_config_set ( r -> config, ""anal.cpu"", info -> cpu ) ; } else { r_config_set ( r -> config, ""anal.cpu"", arch ) ; }",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> struct domain_device * <S2SV_ModEnd> dev, *",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,"<S2SV_ModStart> ; int pkt_len <S2SV_ModEnd> ; char line <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; if (! parse_netscreen_hex_dump ( wth -> fh, line, pkt_len, cap_int, cap_dir, cap_dst, & wth -> phdr, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if",0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num <S2SV_ModEnd> ), s",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( newRasterSize / ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( newRasterSize / ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32,0
653,"<S2SV_ModStart> can_read_key : if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error2 ; } <S2SV_ModStart> == 0 ) <S2SV_ModEnd> { ret = <S2SV_ModStart> - EOPNOTSUPP ; goto error2 ; } <S2SV_ModEnd> ret = key <S2SV_ModStart> -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } <S2SV_ModEnd> error2 : key_put",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return 0 ;,0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FREND : rm -> atomic. op_m_frend. add = args -> frend. add ; rm -> atomic. op_m_frend. nocarry_mask = args -> frend. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. noc,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> lintr <S2SV_blank> device\\n"", __func__, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
659,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath,",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( isspace ( * t ) ) t ++ ; if ( * t == '/' ) { const char * t = ++ s ; while (! isspace ( * t ) ) t ++ ; if ( isspace ( * t ) ) t ++ ; if ( * t &&! isspace ( * t ) ) t ++ ; if ( * t == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if (! isspace ( * t ) ) t ++ ; if (! isspace ( * t <S2SV_ModEnd> ) ) t,0
662,"<S2SV_ModStart> 0 ) { mutt_bcache_del <S2SV_ModEnd> ( pop_data -> <S2SV_ModStart> data ) ; mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> refno <S2SV_ModEnd> ) ; # <S2SV_ModStart> 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ; # endif } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> deleted ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [",0
663,"<S2SV_ModStart> ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; * objp = NULL ;",0
664,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY (",0
665,<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; },0
666,"<S2SV_ModStart> msixcap ; assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; assert ( barnum >= 0 && barnum <= PCIR_MAX_BAR_0 <S2SV_ModEnd> ) ; tab_size <S2SV_ModStart> msgnum ) ; if (! pci_msix_table_init ( dev, msgnum ) ) return - ENOMEM ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix",0
667,"<S2SV_ModStart> out ; if ( dentry -> d_inode -> i_uid!= current_uid ( ) ) { err = - EPERM ; goto out ; } <S2SV_ModStart> dentry ) ; if (! err ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
668,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
669,"<S2SV_ModStart> ; if (! authctxt -> userauth ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if (",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { <S2SV_ModEnd> return vp9_rb_read_literal (",0
671,<S2SV_ModStart> ; i < <S2SV_ModEnd> ctx -> msgcount,0
672,"<S2SV_ModStart> NULL ) goto cleanup <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_cmp ( X509_get_issuer_name <S2SV_ModStart> ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } }",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec_t <S2SV_ModEnd> * prec = <S2SV_ModStart> ++ ) { Jpeg2000Prec_t <S2SV_ModEnd> * prec = <S2SV_ModStart> prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
674,"<S2SV_ModStart> ) ) { if ( ( ctxt -> instate == XML_PARSER_EOF ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_PEREF_SEMICOLON_MISSING, NULL ) ; return ; }",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ; err = ip6_xmit <S2SV_ModEnd> ( sk,",0
676,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMMON * cm, const VP9EncoderConfig <S2SV_ModEnd> * cpi ) <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return <S2SV_ModEnd> malloc ( size <S2SV_ModStart> ( size ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
678,<S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; printval += <S2SV_ModStart> ; magfact = magfact <S2SV_ModEnd> ; break ;,0
679,"<S2SV_ModStart> return NULL ; } if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } if ( shdr -> sh_size > SIZE_MAX / sizeof ( ut8 ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } <S2SV_ModStart> goto beach ; sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; } if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = s",0
680,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; },0
681,"<S2SV_ModStart> ; if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } if ( ( i = cdf_read_dir ( & info, & h, & dir, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out3 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out4 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & scn, & root_storage ) ) == - 1 ) {",0
682,<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof,0
683,"<S2SV_ModStart> } } if ( vars -> cnt < 1 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_P_MAX ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
686,<S2SV_ModStart> -> _eip ; <S2SV_ModEnd> rc = em_push <S2SV_ModStart> case 4 : rc = em_push ( ctxt ) ; break ; } case 5 : rc = em_push ( ctxt ) ; break ; case 6 : rc = em_jmp_far ( ctxt ) ; break ; case 7 : rc = em_push ( ctxt ) ; break ; case 8 : rc = em_push ( ctxt ) ; break ; case 9 : rc = em_push ( ctxt ) ; break ; case 10 : rc = em_push ( ctxt ) ; break ; case 11 : rc = em_push ( ctxt ) ; break ; case 12 : rc = em_push ( ctxt ) ; break ; case 13 : rc = em_push ( ctxt ) ; break ;,0
687,"<S2SV_ModStart> & url ) ; strncpy <S2SV_ModEnd> ( errstr,",0
688,"<S2SV_ModStart> secret, void * end <S2SV_ModEnd>, void * <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> old_key ; struct <S2SV_ModStart> ; struct ceph_timespec <S2SV_ModEnd> new_validity ; struct <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> new_session_key ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; u64 new_secret_id ; int ret ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
690,"<S2SV_ModStart> init_msg ; n2l ( p, s -> session -> tlsext_tick_lifetime_hint ) ; n2s ( p, ticklen ) ; if ( ticklen + 6 > n ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH ) ; goto f_err ; }",0
691,<S2SV_ModStart> b ) ; <S2SV_ModEnd> r = sd_event_add_io,0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ;,0
693,<S2SV_ModStart> = NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_IDENT <S2SV_ModStart>. ident ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF <S2SV_ModStart>. field ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF,0
694,<S2SV_ModStart> lun ) sas_eh_defer_cmd ( cmd ) ; list_del_init ( & cmd -> eh_entry ) ;,0
695,"<S2SV_ModStart>, end_col_offset ; assert ( TYPE ( CHILD ( n, name_i ) ) == TYPE_IDENTIFIER ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 2 ) ) ; if (! args ) return NULL ; returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; <S2SV_ModStart> ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_are",0
696,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if (,0
697,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double )",0
700,<S2SV_ModStart> Rec. RecordLength > sizeof ( WPGColorMapRec ) <S2SV_ModEnd> ) ThrowReaderException ( <S2SV_ModStart> Rec. RecordLength > sizeof ( WPGColorMapRec ) <S2SV_ModEnd> ) ThrowReaderException (,0
701,"<S2SV_ModStart> ctxt ) { struct x86_emulate_regs * regs = ctxt -> regs ; struct x86_emulate_regs * regs = ctxt -> regs ; struct x86_emulate_regs * regs = ctxt -> regs ; register_address_increment ( ctxt, regs -> rcx ) ; if ( ( address_mask ( ctxt, reg_read ( ctxt, VCPU_REGS_RCX ) )!= 0 ) && ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( ctxt -> b == 0xe2 || test",0
702,,1
703,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; if (! res ) return - EINVAL,0
704,"<S2SV_ModStart> : if ( <S2SV_ModEnd> position > SIGNED_SIZEOF <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; <S2SV_ModStart> : if ( <S2SV_ModEnd> position > psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> position <= psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> position <= psf <S2SV_ModStart> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> position <= psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> position <= psf <S2SV_ModStart> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence",0
705,<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode,0
706,"<S2SV_ModStart> uint32_t track_size ; <S2SV_ModEnd> uint8_t * * <S2SV_ModStart> * track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> * track_end ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } midi_data += 4 ; midi_size -= 4 ; tmp_val = * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; tmp_val |= * midi_data ++ ; midi_size -= 4 ; if ( tmp_val!= 6 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_MIDI, NULL, 0 ) ; return (",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = max_t ( u32, <S2SV_ModEnd> val * 2",0
708,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = udf_read_tagged <S2SV_ModStart> TAG_IDENT_LVD ) ; if (! bh ) return 1 ; <S2SV_ModStart> struct logicalVolDesc * ) bh -> b_data ; if ( le32_to_cpu ( lvd -> mapTableLength ) >= sbi -> s_partitions ) goto out_bh ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else if ( type == 2 ) { struct genericPartitionMap1 * gpm1 = ( struct genericPartitionMap1 * ) gpm ; map -> s_partition_",0
709,"<S2SV_ModStart> long n ; jas_uint64_t numplanes ; jas_uint64_t numplanes ; jas_uint64_t numplanes ; jas_uint64_t numplanes ; jas_uint64_t numplanes ; jas_uint64_t numplanes ; jas_uint64_t numplanes ; if ( optstr ) { jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; } if ( bmp_gethinfo ( in, & info, & numplanes, & numplanes, & numplanes, & numplanes, & numplanes ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> "" ""depth <S2SV_blank> %d; <S2SV_blank> enctype <S2SV_blank> %d; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> hres <S2SV_blank> %d; <S2SV_blank> vres <S2SV_blank> %d; <S2SV_blank> off",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,<S2SV_ModStart> u4_ofst ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
712,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment,",0
713,"<S2SV_ModStart> media_pad_desc pad ; memset ( & pad, 0, sizeof ( pad ) ) ; <S2SV_ModStart> continue ; media_device_kpad_to_upad <S2SV_ModEnd> ( entity ->",0
714,<S2SV_ModStart> off ) ; if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; } else { line -> type = MD_LINE_FENCEDCODE ; },0
715,"<S2SV_ModStart>, extent ; size_t width, height ; size_t depth ; size_t <S2SV_ModEnd> length ; ssize_t <S2SV_ModStart>, height ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_info. type = RT_STANDARD ; else if ( sun_info. type == RT_RAW ) <S2SV_ModStart> sun_info. type = RT_ENCODED ; else if ( sun_info. type == RT_RAW ) <S2SV_ModStart> sun_info. height = sun_info. width ; if ( sun_info. height!= sun_info. depth ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>. length ; if ( sun_info. type == RT_ENCODED ) <S2SV_ModStart> sun_info. type = RT_ENCODED ; else if ( sun_info. type == RT_RAW ) <S2SV_ModStart> sun_info. type = RT_RAW ; else if ( sun_info. type == RT_RAW ) <S2SV_ModStart> sun_info. height = sun_info. height = sun_info. depth = sun_info. depth ; else if ( sun_info. length!= sun_info. length ) ThrowReaderException ( CorruptImage",0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, hdb_entry_ex <S2SV_ModEnd> * krbtgt,",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,"<S2SV_ModStart> -> loc_addr ; ireq -> opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ; dccp_sync_mss ( newsk, dst_mtu ( dst ) ) ;",0
719,<S2SV_ModStart> struct xmlparser parser ; data -> l_tail = NULL ; <S2SV_ModStart> -> l_tail = NULL ; data -> l_taillen = 0 ;,0
720,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> offset!= 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0",0
721,"<S2SV_ModStart> pfn ) ; kvm_iommu_put_pages ( kvm, slot -> base_gfn, slot -> npages <S2SV_ModEnd> ) ; gfn",0
722,<S2SV_ModStart> } ; memcpy <S2SV_ModEnd> ( & b,0
723,<S2SV_ModStart> perf_event_context * ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock <S2SV_ModEnd> ( event ),0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [,0
725,"<S2SV_ModStart> ; struct free_nid * <S2SV_ModEnd> i ; struct <S2SV_ModStart> * ne ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true",0
726,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags,0
727,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, extra.",0
728,"<S2SV_ModStart> ) ) ; memset ( hdr, 0, sizeof ( * hdr ) ) ;",0
729,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
730,"<S2SV_ModStart> - 1 ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; <S2SV_ModStart> size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; lua_settop ( L, 2 ) ; while ( * fmt ) { int opt = * fmt ++ ; size_t size = optsize ( L, opt",0
731,"<S2SV_ModStart> = 0 ; if (! msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> struct olsr_msg4 ) ) ; if (! msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } if (! msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! msg_len_valid ) { ND_PRINT ( ( ndo, ""OLSRv%i",0
732,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> unit_size ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTI_FIXED : { struct oz_multiple_fixed * body = ( struct oz_multiple_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_multiple_fixed ) + 1 ; int count ; int i ; if (! count ) break ; count = data_len / count ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc",0
733,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; memset ( store_reg, 0, sizeof ( store_reg ) ) ; <S2SV_ModStart> timer ) ; memset ( store_reg, 0, sizeof ( store_reg ) ) ;",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ) ) { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; }",0
735,"<S2SV_ModStart> IMAP_CMD_CONTINUE ) { imap_set_result ( idata, IMAP_FATAL ) ; <S2SV_ModStart> IMAP_FATAL ) { imap_set_result ( idata, IMAP_FATAL ) ; return ; }",0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
738,<S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_,0
739,"<S2SV_ModStart> ] ; image_w = get_ushort ( & tga [ 2 ] ) ; image_h = get_ushort ( & tga [ 5 ] ) ; pixel_depth = tga [ 3 ] ; image_desc = tga [ 4 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } if ( image_type > 8 ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } <S2SV_ModStart> # if 0 x_origin = get_ushort ( & tga [ 8 ] ) ; y_origin = get_ushort ( & tga [ 10 ] ) ; image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ush",0
740,<S2SV_ModStart> rdma_ucm_cmd_hdr hdr ; size_t <S2SV_ModEnd> ret ; if,0
741,"<S2SV_ModStart> tp ) { struct timespec * tmp ; <S2SV_ModStart> CPUCLOCK_SCHED ) { tmp <S2SV_ModEnd> -> tv_sec = <S2SV_ModStart> ; tp -> tv_nsec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> tp -> tv_sec, NSEC_PER_SEC <S2SV_ModEnd> ) ; } <S2SV_ModStart> tp ) ; } return ;",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; lua_module_t * lua_module ; lua_module_t * lua_dir_cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; lua_authz_provider_spec * prov_spec = parsed_require_line ; lua_module_t * lua_dir_cfg = ap_get_module_config ( cfg, & lua_module ) ; lua_dir_cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; <S2SV_ModStart> r ) ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_r",0
744,"<S2SV_ModStart> * prev ; unsigned long vm_pgoff ; <S2SV_ModStart> &= PAGE_MASK ; vm_pgoff = address >> PAGE_SHIFT ; <S2SV_ModStart> = security_mmap_addr ( vm_pgoff <S2SV_ModEnd>, address )",0
745,"<S2SV_ModStart> { umode_t mode ; posix_acl_update_mode ( & inode -> i_mode, & acl ) ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl ) ; if ( error <= 0 ) { <S2SV_ModEnd> acl = NULL <S2SV_ModStart> return error ; } <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> char * data, <S2SV_ModEnd> int optional ) <S2SV_ModStart>, mountflags & ~ MS_REMOUNT <S2SV_ModEnd>, data ) <S2SV_ModStart>, mountflags & ~ MS_BIND <S2SV_ModEnd>, data )",0
747,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
748,<S2SV_ModStart> -> it_overrun ; <S2SV_ModEnd> ++ timr -> <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,"<S2SV_ModStart> ""://"" ) ; if ( proto_end == url ) return - 1 ; if (",0
750,"<S2SV_ModStart>, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;",0
751,"<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; <S2SV_ModEnd> usb_ep_free_request ( io_data <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb",0
752,<S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> srr &&! <S2SV_ModStart> &&! skb_sec_path ( skb ),0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> pcrlock ) { pr_info ( ""trusted_key: <S2SV_blank> pcrlock <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } if (! p -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } dump_payload ( p ) ; dump_payload ( new_p ) ; dump_payload ( new_o ) ; dump_payload ( new_o ) ; dump_payload ( new_o ) ; dump_options ( new_o ) ;",0
755,<S2SV_ModStart> } v |= ( uint_fast32_t ) <S2SV_ModEnd> c ; if,0
756,"<S2SV_ModStart>, lci_o ; mutex_lock ( & loopback_lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & loopback_lock ) ; <S2SV_ModStart> 4 ) ; mutex_unlock ( & loopback_lock ) ;",0
757,"<S2SV_ModStart> gfn ) ; kvm_put_memslot ( kvm, slot ) ;",0
758,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
759,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> = nextoffset ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> FDT_PROP : include = want >= 2 ; stop_at = offset ; <S2SV_ModStart> FDT_BEGIN_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 +",0
760,"<S2SV_ModStart> DFFChunkHeader ) ) || bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ck",0
761,"<S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; }",0
764,"<S2SV_ModStart> ; int ret = <S2SV_ModEnd> - EOPNOTSUPP ; <S2SV_ModStart> - EOPNOTSUPP ; } if ( wlen < 1 || wlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) return - EINVAL <S2SV_ModEnd> ; mutex_lock ( <S2SV_ModStart> wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
765,"<S2SV_ModStart> channel ) ; if (! client -> priv -> protocol_timeout ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> No <S2SV_blank> protocol <S2SV_blank> timeout <S2SV_blank> set"" ) ; return ; }",0
766,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> new_root_item ) ; if ( ret ) { kfree ( new_root_item ) ; kfree ( path ) ; goto root_item_alloc_fail ; } dir_item = btrfs_lookup_dir_item ( path, root -> root_key. objectid ) ; if (! dir_item ) { kfree ( path ) ; goto root_item_alloc_fail ; }",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> s ) ; <S2SV_ModEnd> list_del_init ( & <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> NULL ) { size_t <S2SV_ModEnd> chanmap_size = psf,0
771,"<S2SV_ModStart> this_h ) { # if CONFIG_VP9_HIGHBITDEPTH if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } # endif <S2SV_ModStart> 16 ) { # if CONFIG_VP9_HIGHBITDEPTH if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_scale_fp, sf -> y_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } # endif <S2SV_ModStart> 16 ) { # if CONFIG_VP9_HIGHBITDEPTH if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp, sf",0
772,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ( struct ip6t_entry ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 || ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 || ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 || ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 || ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 || strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 || strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET )",0
774,"<S2SV_ModStart> ( xref_t ) <S2SV_ModEnd> * pdf -> <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
776,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> NULL ) ; rcu_assign_pointer ( np -> opt, NULL ) ; <S2SV_ModStart> ( opt ) rcu_assign_pointer ( np -> opt, NULL ) ; <S2SV_ModEnd> sock_kfree_s ( sk <S2SV_ModStart> ( sk, <S2SV_ModEnd> opt, opt <S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
777,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin = NULL ; <S2SV_ModEnd> if (!,0
778,"<S2SV_ModStart> len ) ; memset ( & src_info, 0, sizeof ( src_info ) ) ;",0
779,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_v4_del_protocol <S2SV_ModEnd> ( ) ;,0
780,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"", <S2SV_ModStart> cs_flags ) ; service_named_bind_command <S2SV_ModEnd> ( ""chanserv"",",0
781,"<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> ; netdev_notifier_info_init ( & info, dev ) ; return masq_device_event ( this, event, & info ) <S2SV_ModEnd> ; } <S2SV_null>",0
782,<S2SV_ModStart> ) ; if ( unlikely ( current -> mm == mm ) ) { leave_mm ( smp_processor_id ( ) ) ; <S2SV_ModStart> ) ; goto out ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN,0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; }",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i =,0
785,<S2SV_ModStart> task -> slow_task <S2SV_ModEnd> ) ) return,0
786,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
787,"<S2SV_ModStart> ; if ( ( addr_str_length < sizeof ( addr_str_buffer ) ) || ( addr_str_length > sizeof ( orgid ) ) ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> port"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( ( addr_str_length < sizeof ( orgid ) ) ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> port"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( ( <S2SV_ModStart> ) ) ; if ( ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> port"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( ( addr_str_length < sizeof ( orgid ) ) ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> port"" ) ; return - 1 ; }",0
788,"<S2SV_ModStart> ; if ( ( * object ) + size > bplist -> length_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; }",0
789,"<S2SV_ModStart> ( ) ; # if ( KSZ8851_SPI_SUPPORT == ENABLED ) interface -> extIntDriver -> init ( ) ; # endif <S2SV_ModStart> ( ) ; # if ( KSZ8851_DEBUG_MODE == 1 ) { <S2SV_ModStart> ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; } # endif <S2SV_ModStart> ( ) ; # if ( KSZ8851_DEBUG_MODE == 2 ) { TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; } # endif ksz8851WriteReg ( interface, KSZ8851_MARH, htons ( interface -> macAddr. w [ 0 ] ) ) ; ksz8851WriteReg ( interface, KSZ8851_MARM, htons ( interface -> macAddr. w [ 1 ] ) ) ; ksz8851WriteReg ( interface, KSZ8851_MARL, htons ( interface -> macAddr. w",0
790,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> chan_mutex ) ; <S2SV_ModStart> dead = 1 ; mutex_unlock ( & pch -> chan_mutex ) ;,0
791,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & XATTR_REPLACE <S2SV_ModStart> & XATTR_REPLACE ) { ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret =",0
792,"<S2SV_ModStart> 0xbf ) return 0 ; if ( op -> len < 1 || op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> 0xbf ) return - 1 ; if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; if ( op -> len < 1 ) { ALOGE ( ""b/26366256"" ) ; if ( op -> len < 1 ) { ALOG",0
793,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
795,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; p = key -> payload. data [ 0 ] ; if ( p -> key_len < 1 || p -> key_len > 32767 ||! p -> key [ p -> key_len ] ||! p -> key [ p -> key_len ] ||! p -> key [ p -> key_len ] ) return - EINVAL ; if ( p -> key_len < 1 || p -> key_len > 32767 ||! p -> key [ p -> key_len ] ||! p -> key [ p -> key_len ] ||! p -> key [ p -> key_len ] ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if (! p -> keyhandle ) { ret = - EINVAL ; kzfree ( new_p ) ; goto out ; } dump_payload ( p ) ; dump_payload ( p ) ; dump_payload ( p ) ; dump_payload ( p ) ; dump_",0
796,"<S2SV_ModStart> ++ ; NEED_IP <S2SV_ModEnd> ( 1 ) <S2SV_ModStart> endif { NEED_IP <S2SV_ModEnd> ( t + <S2SV_ModStart> t + 3 ) ; do { * op ++ = * ip ++ ; } while ( -- t > 0 ) ; } state = 4 ; match_next : # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { const unsigned char * ie = ip + t ; unsigned char * oe = op + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < oe ) ; ip = oe ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ;",0
797,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,<S2SV_ModStart> goto out6 ; if (! vmx_msr_bitmap_x2apic ) goto out7 ;,0
800,"<S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""size"", sz ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""size"", sz ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
802,<S2SV_ModStart> refresh_alt_ref_frame ) )? ( <S2SV_ModEnd> rc -> baseline_gf_interval <S2SV_ModStart> af_ratio ) / ( rc -> baseline_gf_interval <S2SV_ModEnd> + af_ratio - <S2SV_ModStart> 1 ) : <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> ; # else target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i - 1 ], ""--allow-untrusted"" ) == 0 ) { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } else { errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; } }",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,<S2SV_ModStart> -= INDENT_INCR ; } if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; <S2SV_ModStart> -= INDENT_INCR ; },0
806,"<S2SV_ModStart> + tail ; DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]\\n"", line, b, e, <S2SV_ModEnd> CDF_SEC_SIZE ( h <S2SV_ModStart> ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len ) <S2SV_ModEnd> ) ; errno",0
807,<S2SV_ModStart> } # else ( void ) lex_env ; <S2SV_ModStart> : # endif ( void ) <S2SV_ModStart> : # endif ( void ) yyscanner ; <S2SV_ModStart> : # endif ( void ) yylval ; <S2SV_ModStart> : # endif ( void ) lex_env ; <S2SV_ModStart> : # endif ( void ) yyscanner ; <S2SV_ModStart> : # endif ( void ) yylval ; <S2SV_ModStart> : # endif ( void ) yyscanner ; <S2SV_ModStart> : # endif ( void ) yylval ; <S2SV_ModStart> : # endif ( void ) yylval ; # endif ( void ) <S2SV_ModStart> : # endif ( void ) lex_env ; # endif ( void ) <S2SV_ModStart> : # endif ( void ) yyscanner ; <S2SV_ModStart> : # endif ( void ) yylval ; # endif ( void ) <S2SV_ModStart> : # endif ( void ) <S2SV_ModStart> : # endif ( void ) yylval ; # endif ( void ) yylval ; # endif ( void ) yylval ; # endif ( void ) yylval ; # endif ( void ) <S2SV_ModStart> : # endif ( void ) yylval ; # endif ( void ) <S2SV_ModStart> : # endif ( void ) yylval ; # endif ( void ) <S2SV_ModStart> : # endif ( void ) <S2SV_ModStart> : # endif ( void ) yylval ; # endif ( void,0
808,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,"<S2SV_ModStart> ; if ( test_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
811,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( sk -> sk_filter, sock_owned_by_user ( sk ) ) ;",0
812,<S2SV_ModStart> ) ( data_end <S2SV_ModEnd> - data ) <S2SV_ModStart> ) ( data_end <S2SV_ModEnd> - data ),0
813,<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,0
814,"<S2SV_ModStart>. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
815,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib, sizeof ( struct aac_srb ) ) ; if ( status < 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EFAULT <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } <S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> } if ( <S2SV_ModStart> goto cleanup ; <S2SV_ModEnd> status = aac_fib_free ( dev, srbfib, sizeof ( struct aac_srb ) ) ; if ( status < 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EFAULT <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status < 0 ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EFAULT <S2SV_blank> from <S2SV_blank> user\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; } if ( status < 0 ) { dprintk ( ( KER",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""InvalidTileSize"" ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""InvalidTileSize"" ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> net = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, <S2SV_ModEnd> ep, asoc <S2SV_ModStart> GFP_ATOMIC ) ; <S2SV_ModEnd> sctp_association_put ( asoc",0
818,"<S2SV_ModStart> input_data, size_t <S2SV_ModEnd> input_size, RE_MATCH_CALLBACK_FUNC <S2SV_ModStart>, RE_MATCH_CALLBACK_FUNC callback, void * callback_args <S2SV_ModStart>, RE_MATCH_CALLBACK_FUNC callback_args <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart>, RE_MATCH_CALLBACK_FUNC callback_args <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart>, RE_MATCH_CALLBACK_FUNC callback_args <S2SV_ModEnd> ) { uint8_t <S2SV_ModStart> } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & fiber ) ; fail_if_error ( error ) ; fiber -> ip = re_code ; fibers. tail = fiber ; fail_if_error ( error ) ; fiber -> ip = re_code ; fibers. head = fiber ; fibers. tail = fiber ; error = _yr_re_fiber_sync ( & fibers, & storage -> fiber_pool, fiber ) ; fail_if_error ( error ) ;",0
819,"<S2SV_ModStart> returnrate, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart>, int * returnintra <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # if <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_ref_mv.",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_RDPMC ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm",0
821,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; <S2SV_ModStart> goto error ; if ( statbuf. st_size > UINT32_MAX / sizeof ( struct ntreg_header ) ) goto error ;,0
822,"<S2SV_ModStart> const cdf_stream_t * <S2SV_ModEnd> sst, const <S2SV_ModStart> const cdf_stream_t * <S2SV_ModEnd> sst, const <S2SV_ModStart> break ; } if ( cdf_file_property_info ( ms, info, count, <S2SV_ModEnd> clsid ) ==",0
823,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> UWORD16 i2_max_frm_num ; <S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id ; WORD32 <S2SV_ModEnd> i4_num_reorder_frames ; WORD32 <S2SV_ModStart> u4_num_reorder_frames ; WORD32 <S2SV_ModEnd> u4_num_reorder_frames ; WORD32 <S2SV_ModStart> u4_num_reorder_frames ; WORD32 <S2SV_ModEnd> u4_num_reorder_frames ; WORD32 <S2SV_ModStart> u4_num_reorder_frames ; WORD32 <S2SV_ModEnd> u4_num_reorder_frames ; WORD32 <S2SV_ModStart> u1_frame_cropping_flag ) ; <S2SV_ModEnd> u1_frm = ih264d_get_bit_h264 <S2SV_ModStart> u1_frm ) ; <S2SV_ModEnd> u1_frm_cropping_flag = ih264d_get_bit_h264 <S2SV_ModStart> u1_frm ) ; <S2SV_ModEnd> u1_frm_cropping_flag = ih264d_get_bit_h264 <S2SV_ModStart> u1_frm ) ; <S2SV_ModEnd> u1_frm = ih264d_get_bit_h264 <S2SV_ModStart> u1_frm ) ; <S2SV_ModEnd>",0
824,"<S2SV_ModStart> ) ; err |= __put_user ( length, & up -> length ) ; if ( err ) return - EFAULT",0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_codec_alg_priv_t * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) ; VPxWorker * const worker = ctx -> worker ; VPxWorkerData * const frame_worker_data = ( VPxWorkerData * ) worker -> data1 ; VPxWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return VPX_CODEC_INVALID_PARAM ; frame_worker_data -> svc. spatial_layer_id = params -> spatial_layer ; frame_worker_data -> svc. temporal_layer_id = params -> temporal_layer ; frame_worker_data -> lst_fb_idx = params -> lst_fb_idx ; frame_worker_data -> gld_fb_idx = params -> gld_fb_idx ; frame_worker_data -> alt_fb_idx = params -> alt_fb_idx ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min",0
826,"<S2SV_ModStart> -> frag_off ; if ( fhdr -> frag_off & htons ( IP6_MF ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ; return - 1 ; }",0
827,"<S2SV_ModStart> out ) { <S2SV_ModEnd> uint16 bitspersample, <S2SV_ModStart> uint16 samplesperpixel ; <S2SV_ModEnd> uint16 input_compression, <S2SV_ModStart>, input_photometric ; if ( bitspersample!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( bitspersample!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( bitspersample!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_S",0
828,"<S2SV_ModStart> a ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; <S2SV_ModStart> = '\\0' ; archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModEnd> a -> pst <S2SV_ModStart> = NULL ; archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; <S2SV_ModEnd> a -> pst <S2SV_ModStart> = NULL ; archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModEnd> a -> pst <S2SV_ModStart> = NULL ; archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_OK ) ; # else archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink",0
829,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
830,"<S2SV_ModStart> -> i_sb ) ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; struct indirectEntry * ie ; struct indirectEntry * ie ; if ( sbi -> udf_flags & UDF_FLAG_NOATIMEOUT ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
831,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int index = shift_y ; * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; *",0
832,"<S2SV_ModStart> dst_size ) { const <S2SV_ModStart> data_end ) ; const uint16_t namelen = ff_amf_tag_size ( data, data_end ) ; const uint8_t * const name = ff_amf_tag_name ( data, data_end ) ; const uint8_t * const name_end = ff_amf_tag_name ( data, data_end ) ; const uint8_t * const name_start = ff_amf_tag_name ( data, data_end ) ; const uint16_t namelen = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data ) return - 1 ; data += len ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"",",0
833,"<S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return TIFF_swabHorDiff <S2SV_ModEnd> ( tif, <S2SV_ModStart> wc ) ;",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) continue ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; <S2SV_ModEnd> pid_t pid ; <S2SV_ModStart> ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ;",0
840,<S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) || <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) || <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) || <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) || * replySize > sizeof ( effect_param_t ),0
841,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
842,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
843,"<S2SV_ModStart> OP_JUMP ) ; if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if ( F -> strict ) { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict",0
844,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_values ) ) ; * o_column_count = ( unsigned int * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_values = ( double * ) malloc ( sizeof ( double",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> STREAM s ; <S2SV_ModStart> int length ; RD_BOOL <S2SV_ModEnd> is_fastpath ; uint8 <S2SV_ModStart> return False ; result = in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_RESULT, & length ) ; in_uint8s ( s, length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ; sec_process_mcs_data ( s ) ; s_check_end ( s ) ; }",0
847,<S2SV_ModStart> ; if ( stkt_server!= NULL && stkt_server -> stkt_id!= 0 ) { if ( stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 ) { if ( stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id,0
848,<S2SV_ModStart> ) ) { if ( ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ) || ( len == 0 ),0
849,"<S2SV_ModStart> -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> macvlans\\n"" ) ; return ret <S2SV_ModEnd> ; } ch",0
850,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
851,<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EINVAL ; goto out ; },0
852,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
853,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ; } of = sr -> fid_ofile ; if (! of ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; }",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,<S2SV_ModStart> lf_mic ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic ) ; memcpy <S2SV_ModEnd> ( lf_mic ->,0
856,"<S2SV_ModStart> = AF_TIPC ; memset ( & addr -> addr, 0, sizeof ( * addr ) ) ;",0
857,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_free ; r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_free ; r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_free ; r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_free ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_free ; r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_,0
858,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
859,"<S2SV_ModStart> ( use_proxy ) { if (! use_proxy ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; }",0
860,"<S2SV_ModStart> len ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; end = s + len ; while ( s < end ) { if ( * s == '\\\\' ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u )",0
861,"<S2SV_ModStart> = 0 ; if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; }",0
862,"<S2SV_ModStart> WaveHeader ; uint32_t <S2SV_ModEnd> bcount ; uint32_t <S2SV_ModStart> uint32_t bcount ; if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & chunk_header, sizeof ( Wave64ChunkHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> DFFChunkHeader ) ) || bcount!= sizeof ( DFFChunkHeader ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ck",0
864,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock <S2SV_ModEnd>, flags )",0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart> unsigned long long ull <S2SV_ModEnd> ; int setimes <S2SV_ModStart>, wrerrno = 1 <S2SV_ModEnd> ; char ch",0
866,"<S2SV_ModStart> return ; } if (! strcmp ( target, ""LIST"" ) && myentity_find_ext ( target ) == NULL ) { do_list ( si, mc, 0 ) ; free ( target ) ; return ; } else if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if (! strcasecmp ( target, ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized."" ), channel ) ; return ; } if (! chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel )",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,<S2SV_ModStart> goto error ; ret = <S2SV_ModStart> goto error ; if ( ret < 0 ) goto error ; <S2SV_ModStart> goto error ; if ( ret < 0 ) goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; if ( ret < 0 ) goto error ; ret = ret ; if ( ret < 0 ) goto error ; if ( ret < 0 ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> goto error ; if ( ret < size ) goto error ; <S2SV_ModStart> g,0
869,"<S2SV_ModStart> null_server ; int need_error_free = 0, local_rcache = 0, local_authcon = 0 ; if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } else if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( flags & KRB5_RECVAUTH_SKIP_VERSION )",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
872,"<S2SV_ModStart> = frametype ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, buffer, faclen ) ; dptr += f",0
873,"<S2SV_ModStart> = new_ns ; if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { list_add_tail ( & p -> mnt_list, & q -> mnt_list ) ; q = next_mnt ( q, new ) ; } if ( p -> mnt. mnt_root!= q -> mnt. mnt_root ) { list_add_tail ( & p -> mnt_list, & q -> mnt_list ) ; q = next_mnt ( q, new ) ; }",0
874,<S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( width & 0xf )!= 0 ) { vpx_free ( oci -> yv12_fb ) ; } else { vpx_free ( oci -> yv12_fb ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( height & 0xf )!= 0 ) { vpx_free ( oci -> yv12_fb ) ; } # endif <S2SV_ModStart> ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( width & 0xf )!= 0 ) { vpx_free ( oci -> yv12_fb ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ( height & 0xf )!= 0 ) { vpx_free ( oci -> yv12_fb ) ; } # endif,0
875,<S2SV_ModStart> php_zip_get_property_ptr_ptr ; zip_object_handlers. create_object = php_zip_create_object ; zip_object_handlers. close_object = php_zip_close_object ; <S2SV_ModStart> = php_zip_get_properties ; zip_object_handlers. close_object = php_zip_close_object ;,0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; } return <S2SV_ModEnd> ( iova + <S2SV_ModStart> || ( iova + length > mem -> iova + mem -> length ) )? - EFAULT : 0 ; case RXE_MEM_TYPE_MR : if ( iova + length > mem -> iova + mem -> length ) { return - EFAULT ; } return <S2SV_ModEnd> ( iova +,0
877,"<S2SV_ModStart> ) ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz < sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ;",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,<S2SV_ModStart> ; * sent = 0 ; if ( n_vec == 0 ) return - EINVAL,0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> void buffer_pipe_buf_get ( <S2SV_ModEnd> struct pipe_inode_info * <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
881,"<S2SV_ModStart> ; if ( cluster < 0 || cluster >= fs -> clusters ) die ( ""Bad <S2SV_blank> FAT <S2SV_blank> entry <S2SV_blank> size: <S2SV_blank> %d <S2SV_blank> bits."", fs -> fat_bits ) ; <S2SV_ModStart> ; if ( cluster < 0 || cluster >= fs -> clusters ) die ( ""Bad <S2SV_blank> FAT <S2SV_blank> cluster <S2SV_blank> size: <S2SV_blank> %d <S2SV_blank> bits."", cluster ) ;",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; inet_csk ( sk ) -> inet_num = 0 ; isk -> inet_num = 0 ; isk -> inet_sport = 0 ;,0
884,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
885,<S2SV_ModStart> ; if ( unlikely (,0
886,"<S2SV_ModStart> int result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> inode, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { result = parse_rock_ridge_inode_internal ( de, inode, 14 <S2SV_ModEnd> ) ; }",0
887,<S2SV_ModStart> struct fsnotify_group * <S2SV_ModEnd> inotify_new_group ( struct <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return group ;,0
888,<S2SV_ModStart> p < 4 && in -> data [ p ] && in -> linesize [ p ],0
889,"<S2SV_ModStart> ; if ( screen -> buffers [ 1 ] && screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ;",0
890,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
891,<S2SV_ModStart> = 0 ; tsize_t <S2SV_ModEnd> nstrips = TIFFNumberOfStrips,0
892,<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> struct search_domain * <S2SV_ModStart> ; struct search_domain <S2SV_ModEnd> * dom ;,0
893,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY (,0
894,<S2SV_ModStart> out ; err = - EINVAL <S2SV_ModEnd> ; if (,0
895,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""Im",0
896,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; if ( context -> priv -> PlaneBuffers == NULL ||! context -> priv -> PlaneBuffers ) return FALSE ; if (! context -> priv -> PlaneBuffers ) return FALSE ; if (! context -> priv -> PlaneBuffers ) return FALSE ; if ( originalSize == 0 ) fillMemory ( <S2SV_ModEnd> context -> priv <S2SV_ModStart> -> PlaneBuffers [ i ], originalSize, 0xFF ) ; else if ( planeSize > originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += originalSize ; } return TRUE ;",0
897,<S2SV_ModStart> policy ) { struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; struct fscrypt_inode_info * ei = FSCAN_I ( inode ) ; if ( ei -> flags & FSCAN_NOCACHE ) ei -> flags |= FSCAN_NOCACHE ;,0
898,"<S2SV_ModStart> { httpSetHostName ( state <S2SV_ModEnd>, stok (",0
899,"<S2SV_ModStart>,. match_data. type_data. name = type -> name,. match_data. description = description,. match_data.",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,"<S2SV_ModStart> (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { ret = json_is_true ( json_array_get ( val, 9 ) ) ; goto out ; } <S2SV_ModEnd> cg_wlock ( &",0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t ptr ; if ( num > size ) { return NULL ; } <S2SV_ModStart> * size ) ; if ( ptr ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; }",0
904,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * res ; _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModEnd> if ( dict <S2SV_ModStart> { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return NULL ;",0
906,"<S2SV_ModStart>, USB_DT_OTG, <S2SV_ModEnd> & desc )",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, <S2SV_ModEnd> ( u64 __user <S2SV_ModStart> ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } <S2SV_ModEnd> case PERF_EVENT_SET_FILTER :",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else { sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE uv_mode = read_intra_mode <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( type ) ; if (! skcipher ) return NULL ; <S2SV_ModStart> mask ) ; crypto_free_skcipher ( skcipher ) ; return NULL ;,0
911,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ;",0
912,"<S2SV_ModStart> tile_height ) { if ( c -> old_tile_w < c -> tile_width || c -> old_tile_h < c -> tile_height ) { <S2SV_ModStart> 3, 16 ) ; aligned_height = c -> tile_height ; } else { c -> tile_stride = FFALIGN ( c -> tile_width * 3, 16 ) ; aligned_height = c -> tile_height ; }",0
913,<S2SV_ModStart> ; return Qnil ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
914,"<S2SV_ModStart> jas_fix3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; }",0
915,"<S2SV_ModStart> ) ; register_savevm <S2SV_ModEnd> ( dev,",0
916,<S2SV_ModStart> p ) { <S2SV_ModEnd> register u_int length <S2SV_ModStart> ) ; } ND_TCHECK ( length ) ; ND_TCHECK ( caplen ) ;,0
917,<S2SV_ModStart> = 0 ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOQUOTA ) { rc = - EPERM ; goto out ; },0
918,<S2SV_ModStart> && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
919,<S2SV_ModStart> ) ) ; raptor_sax2_set_uri_filter <S2SV_ModEnd> ( rdf_xml_parser ->,0
920,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
921,<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE ; },0
922,<S2SV_ModStart> ; if (! nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_NO_DATA ; },0
923,<S2SV_ModStart> = ucounts ; if (! new_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - ENOMEM ) ; },0
924,<S2SV_ModStart> += dif ; kfree ( opt2 ) ;,0
925,"<S2SV_ModStart> ) ) ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, capabilities ) ; x86_pmu. intel_cap. capabilities = capabilities ; }",0
926,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif <S2SV_ModEnd> CHECK ( f",0
927,<S2SV_ModStart> ) ; u32 <S2SV_ModEnd> now ; if <S2SV_ModStart> ) { challenge_timestamp = tcp_time_stamp <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> ) { challenge_timestamp = tcp_time_stamp <S2SV_ModEnd> ; challenge_count =,0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * const b <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * const a <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int n = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( b -> base_val ) { const int e = p -> extra, l = b -> len ; do { const int bb = ( v >> -- n ) & 1 ; vpx_write ( w, bb, pb [ i >> 1 ] ) ; i = b -> tree [ i + bb ] ; } while ( n ) ; } vpx_write_bit ( w, e & 1 <S2SV_ModEnd> ) ; }",0
930,"<S2SV_ModStart> ; struct vp9_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> = wb ; vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; int n <S2SV_ModStart> - ENODEV ; if ( interface -> desc. bNumEndpoints < 1 ) return - ENODEV ; if ( le16_to_cpu ( dev -> descriptor. idVendor )!= le16_to_cpu ( dev -> descriptor. idProduct ) ) return - ENODEV ; if (! <S2SV_ModEnd> hdesc -> bcdHID <S2SV_ModStart> bcdHID ) ; if (! hdesc -> bNumDescriptors ) return - ENODEV ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } rdesc = kmalloc ( rsize, GFP_KERNEL ) ; if (! rdesc ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank>",0
933,"<S2SV_ModStart> ) { struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> ; ND_TCHECK ( <S2SV_ModEnd> * ext ) <S2SV_ModStart> ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id. h, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; UNALIGNED_",0
934,<S2SV_ModStart> ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) robust_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> struct strbuf * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> ( path, last, obj -> oid. hash <S2SV_ModEnd> ) ; add_preferred_base_object <S2SV_ModStart> |= OBJECT_ADDED ; strbuf_put ( path, obj -> oid. hash ) ; strbuf_put ( path, obj -> oid. hash ) ; <S2SV_ModStart> |= OBJECT_ADDED ; strbuf_put ( path, obj -> oid. hash ) ; free ( name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
936,"<S2SV_ModStart> ) ) { jas_log ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id: <S2SV_blank> %d\\n"", jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_log ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> size: <S2SV_blank> %d\\n"", jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( jas_strerror ( ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> size: <S2SV_blank> %d\\n"", jas_strerror ( jas_",0
937,"<S2SV_ModStart> urb ) ; if ( urb -> transfer_flags & URB_NO_TRANSFER_DMA_MAP ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ;",0
938,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0",0
939,<S2SV_ModStart> ] ; if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; <S2SV_ModStart> ] ; if ( unlikely ( <S2SV_ModStart> 0x7f ) ) { if ( datalen - dp < 2 ) goto data_overrun_error ; } <S2SV_ModStart> ++ ] ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ++ ] ; if ( datalen - dp < 2 ) goto data_overrun_error ; n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_error ; for ( n = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len,0
940,"<S2SV_ModStart> val ; if <S2SV_ModEnd> ( flags & <S2SV_ModStart> & __GFP_ZERO ) memset <S2SV_ModEnd> ( ptr,",0
941,"<S2SV_ModStart> { return mount_entry_on_generic <S2SV_ModEnd> ( mntent,",0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; }",0
943,"<S2SV_ModStart> && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] >= min && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ field -> value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ field -> value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( value, value, value [ n ], count ) ) h",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,<S2SV_ModStart> ; if ( argReg < 0 || argReg >= sizeof ( struct dex_debug_local_t ) ) { return ; } <S2SV_ModStart> = true ; if ( argReg < 0 || argReg >= sizeof ( struct dex_debug_local_t ) ) { return ; } <S2SV_ModStart> = true ; if ( argReg < 0 || argReg >= sizeof ( struct dex_debug_local_t ) ) { return ; },0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, request_method_val, req_method ( req ) ) ; rb_hash_aset ( env, script_name_val, req_script_name ( req ) ) ; rb_hash_aset ( env, path_info_val, req_path_info ( req ) ) ; rb_hash_aset ( env, query_string_val, req_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash",0
947,<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
948,<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= CALL_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= SERVER_PRE,0
949,<S2SV_ModStart> ; if ( key -> type && key -> type -> destroy ) <S2SV_ModStart> -> type -> destroy ( key <S2SV_ModEnd> ) ; security_key_free,0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
951,"<S2SV_ModStart> int eol ; int <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { eol = '\\n' <S2SV_ModEnd> } ) ; <S2SV_ModStart>, { eol = '\\n' <S2SV_ModEnd> } ) ;",0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } else { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; }",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> JsVarFloat stopAtError = 0.0000001 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( val ) ) strncpy ( str, ""NaN"", len ) ; else strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; return <S2SV_ModEnd> 0 ; }",0
954,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
955,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 8 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 8 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 8 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 8 <S2SV_ModStart> ; } } free ( buf ) ;,0
956,"<S2SV_ModStart> cycles ) ; add_interrupt_bench <S2SV_ModEnd> ( cycles ) <S2SV_ModStart> ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
957,"<S2SV_ModStart> { strncpy ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ; strncat ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
958,"<S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank>",0
959,,1
960,"<S2SV_ModStart> * output ; <S2SV_ModEnd> register ssize_t i <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> ( argc - <S2SV_ModStart> ( ssize_t ) <S2SV_ModEnd> fputc ( ( <S2SV_ModStart> ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv [ i ] ) ; return ( MagickTrue ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname ( <S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname (",0
963,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; <S2SV_ModEnd> if ( fchown,0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
965,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
966,<S2SV_ModStart> TRUE ; } gchar * from = xmpp_stanza_get_from ( message ) ; gchar * to = xmpp_stanza_get_to ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; if (! from ) from = from ; Jid * jid_to = jid_create ( <S2SV_ModEnd> to ) ;,0
967,<S2SV_ModStart> ; } } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; zfree ( server. requirepass ) ; server. requirepass = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ;,0
968,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> e -> enc_blocksize <S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> e -> enc_blocksize",0
972,<S2SV_ModStart> -> s_ivd_video_decode_ip_t. u4_num_Bytes ; if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } },0
973,"<S2SV_ModStart> map_zone * zone <S2SV_ModEnd> ; int old_width <S2SV_ModStart>. height ; tilemap = malloc ( x_size * y_size <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> struct map_tile ) ) ) ) return false ; for ( x = 0 ; x < x_size ; ++ x ) { for ( y = 0 ; y < y_size ; ++ y ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_width ] ; } else { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tile -> tile_index = 0 ; } } }",0
974,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> item -> valuestring ) ; } <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> 1 ) res = vpx_alg_encode <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. encode ( ctx -> priv -> alg_priv <S2SV_ModEnd>, img,",0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" )",0
978,<S2SV_ModStart> ; if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks,0
979,<S2SV_ModStart> = fake_used_mask ; perf_event_init_hw_events ( event ) ; <S2SV_ModStart> group_entry ) { perf_event_init_hw_events ( sibling ) ; <S2SV_ModStart> group_entry ) { perf_event_init_hw_events ( sibling ) ; } <S2SV_ModEnd> list_for_each_entry ( sibling <S2SV_ModStart> group_entry ) { perf_event_init_hw_events ( sibling ) ; } <S2SV_ModEnd> return 0 ;,0
980,<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; } else { win_maximise ( 0 ) ; },0
981,<S2SV_ModStart> ; if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_profile ) { if ( <S2SV_ModEnd> s -> studio_profile <S2SV_ModStart> -> studio_,0
982,<S2SV_ModStart> ; if ( nsops > OABI_MAX_SEMSIZE,0
983,<S2SV_ModStart> cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; },0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < 0 || fileblock >= grub_le_to_cpu16 ( leaf -> len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif",0
986,<S2SV_ModStart> ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ; <S2SV_ModStart> nelements ) ; if ( nelements > CDF_MAX_ENTRIES ) goto out ;,0
987,"<S2SV_ModStart> RE_OPCODE_LITERAL ) { if ( i + 1 >= MAX_FAST_RE_STACK ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> match <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; } <S2SV_ModStart> ++ ; } if ( i + 1 >= MAX_FAST_RE_STACK ) { FAIL_ON_ERROR ( callback ( ""Invalid <S2SV_blank> match <S2SV_blank> in <S2SV_blank> re_fast_exec"" ) ) ; break ; }",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank> COMMENT"", len ) ; return ; } if ( token >= _LEX_OPERATOR_START && token < _LEX_R_LIST",0
989,"<S2SV_ModStart> mnt_instance ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ; }",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
991,"<S2SV_ModStart> ) ) ; if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi ) ) ; }",0
992,"<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> * iinfo ; <S2SV_ModEnd> down_read ( & <S2SV_ModStart> ; uint32_t pos <S2SV_ModEnd> ; iinfo = <S2SV_ModStart> ; pos = udf_block_map ( inode, 0 ) ; down_read ( & iinfo -> i_data_sem ) ; if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } <S2SV_ModEnd> brelse ( bh <S2SV_ModStart> out : up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
993,<S2SV_ModStart> ; else if ( is_x2apic ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( is_x2apic ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_legacy_x2apic ;,0
994,"<S2SV_ModStart>, result ) ; if ( st!= 0 ) goto cleanup ; if ( ent == NULL ) { st = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> } cleanup :",0
995,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
996,"<S2SV_ModStart> ) ) { va_start ( argptr, c ) ; <S2SV_ModEnd> switch ( c <S2SV_ModStart> break ; case <S2SV_ModEnd> 'e' : psf <S2SV_ModStart> break ; case <S2SV_ModEnd> 'T' : trunc_8to4 <S2SV_ModStart> break ; case <S2SV_ModEnd> '1' : data <S2SV_ModStart> break ; case <S2SV_ModEnd> '2' : data <S2SV_ModStart> break ; case <S2SV_ModEnd> '3' : data <S2SV_ModStart> break ; case <S2SV_ModEnd> '4' : data <S2SV_ModStart> break ; case <S2SV_ModEnd> '5' : data <S2SV_ModStart> break ; case <S2SV_ModEnd> '6' : data <S2SV_ModStart> break ; case '7' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_int ( psf, data ) ; } else { header_put_le_int ( psf, data ) ; } ; count += 5 ; break ; case '6' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_int ( psf, data ) ; } else { header_put_le_int ( psf, data ) ; }",0
997,<S2SV_ModStart> ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ;,0
998,<S2SV_ModStart> break ; } memcpy <S2SV_ModEnd> ( cinfo.,0
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ;",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> 0 ) ; if ( num_items_scanned < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank>",0
1002,<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> ; err = - EMSGSIZE <S2SV_ModEnd> ; if (,0
1003,<S2SV_ModStart> key ) ; if ( Z_TYPE_P ( key )!= IS_STRING ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } if ( Z_TYPE_P ( key )!= IS_LONG ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } if ( Z_TYPE_P ( key )!= IS_STRING ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } if ( Z_TYPE_P ( key )!= IS_LONG ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } if ( Z_TYPE_P ( key )!= IS_LONG ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } if ( Z_TYPE_P ( key )!= IS_LONG ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; },0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { if ( len < ibuf -> len ) { ret = - EINVAL ; break ; } <S2SV_ModStart> } else { if ( len < obuf -> len ) { ret = - EINVAL ; break ; },0
1006,"<S2SV_ModStart> -> tokenlen ) { assert (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; }",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; } <S2SV_null>,0
1008,<S2SV_ModStart> | IFF_POINTOPOINT ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> ; if (! st -> codecpar ) return AVERROR_INVALIDDATA ; if (,0
1010,<S2SV_ModStart> ) ) { if ( comp -> dx < 0 || comp -> dy < 0 || comp -> dx > OPJ_UINT32 ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( comp -> dy >> ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp -> dx >> ( OPJ,0
1011,"<S2SV_ModStart> ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REP ) { return return_pkinit_rep ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_REQ ) { return return_pkinit_req ( context, request, reply, padata, cb, rock, moddata, moddata",0
1012,<S2SV_ModStart> ; if ( <S2SV_ModEnd> CheckMemoryOverflow ( count,0
1013,"<S2SV_ModStart> -> stratum_port ; strncpy <S2SV_ModEnd> ( address, <S2SV_ModStart>, ""%s:%s"", <S2SV_ModEnd> url, port",0
1014,"<S2SV_ModStart> ) ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> max_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ;",0
1015,<S2SV_ModStart> return 0 ; if ( head -> iov_len + len < XDR_QUADLEN ( len * 4 ) ) return 0 ; <S2SV_ModStart> - hdr ; if ( dlen < XDR_QUADLEN ( len * 4 ) ) return 0 ;,0
1016,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; spin_lock_irq ( & cluster -> cl_nodes_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; spin_unlock_irq ( & cluster -> cl_nodes_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; <S2SV_ModEnd> return count ;,0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 4 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> en",0
1018,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
1019,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ssize_t count ;,0
1020,<S2SV_ModStart> == sip && <S2SV_ModEnd> rxent -> dport,0
1021,"<S2SV_ModStart> = bss_desc ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset (",0
1022,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_LOG_IOC, ""list"", ( long ) dp -> i_ino, ( long ) dp -> i_ino ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, ( long ) dp -> i_ino, ( long ) dp -> i_ino, ( long ) dp -> i_ino ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_LOG_IOC, ""list"", ( long ) dp -> i_ino, ( long ) dp -> i_ino, ( long ) dp -> i_ino ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, ( long ) dp -> i_ino, ( long ) dp -> i_ino, ( long ) dp -> i_ino ) ; xfs_trans_log_inode ( dp, XFS_ILOG_IOC, ""list"", ( long ) dp -> i_ino, (",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ;",0
1024,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1025,"<S2SV_ModStart> = data ; struct l2cap_conf_txwin_size <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> rfc. txwin_size <S2SV_ModStart> = L2CAP_DEFAULT_TX_WINDOW ; <S2SV_ModEnd> rfc. retrans_timeout <S2SV_ModStart> = L2CAP_DEFAULT_RETRANS_TO ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } <S2SV_ModEnd> req -> dcid",0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1027,"<S2SV_ModStart> = 0 ; if ( s -> chunksize < 0 ) { av_log ( h, AV_LOG_ERROR, ""Chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> chunksize ) ; return err ; }",0
1028,<S2SV_ModStart> -> u1_nal_ref_idc ) ; if ( u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; },0
1029,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1030,"<S2SV_ModStart> } err = crypto_rng_set_seed <S2SV_ModEnd> ( tfm,",0
1031,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> } if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> } if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ;",0
1032,<S2SV_ModStart> ; if ( msg_sys. msg_namelen ) msg_sys. msg_namelen = 0 ;,0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { size_t i ; if ( len < 8 * 32 ) { return - 1 ; } <S2SV_ModStart> 32 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1035,"<S2SV_ModStart> bh_result ) ; if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { err = ext4_ext_get_blocks ( handle, inode, & newex, max_blocks, & bh_result ) ; goto out2 ; }",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode = fmode <S2SV_ModEnd> & ( FMODE_READ <S2SV_ModStart> FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> deleg_cur ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd>!= open_flags )",0
1037,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart>, int64_t * out_rate_sum, int64_t * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t * dist_sum = 0 ; int64_t sse ; int64_t * dist_sum = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer ; if ( pd -> dequant [ 1 ] >> 3 ) rate = ( sse * ( 280 - quantizer ) ) >> 8 ; else rate = 0 ; dist = ( sse * quantizer ) >> 8 ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, &",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1042,"<S2SV_ModStart> ) ) ; if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; goto trunc ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; goto trunc ; } if ( source_address_number > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; goto trunc ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", length ) ) ; goto trunc ; } if ( source_address_length > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", source_address_length ) ) ; goto trunc ; }",0
1043,<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart>'<S2SV_blank>') || ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_,0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,<S2SV_ModStart> uint32_t size ; <S2SV_ModEnd> if ( req,0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> * desc = <S2SV_ModStart> ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1047,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; src_ptr2 += src_stride ; dst_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ;",0
1048,"<S2SV_ModStart> struct sctp_bind_addr * bp <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> struct sctp_sockaddr_entry * laddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen <S2SV_ModEnd> ; sctp_scope_t scope <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! asoc || saddr ) goto out ; bp = & t -> base. bind_addr ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6.",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> depth ++ ; if (! smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ) return ( NULL ) ; <S2SV_ModStart> depth -- ; if (! smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ) return ( NULL ) ;",0
1051,"<S2SV_ModStart> -> protocol_timeout ) { g_source_add ( client -> priv -> protocol_timeout, conn ) ; client -> priv -> protocol_timeout = 0 ; }",0
1052,"<S2SV_ModStart> n >= 0 && <S2SV_ModEnd> ND_TTEST ( * <S2SV_ModStart> 1 ) ; if ( ps -> nid < ps -> nid ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> page. p_uid, ps -> page. p_nid, ps -> nid ) ) ; return ( - 1 ) ; }",0
1053,"<S2SV_ModStart> } n = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if (",0
1054,"<S2SV_ModStart> NULL ) ; if ( key_len < 0 ) ossl_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> %d <S2SV_blank> bytes"", key_len ) ;",0
1055,<S2SV_ModStart> ; if (! edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) { kfree ( edit -> segment_cache [ ASSOC_ARRAY_FAN_OUT ] ) ; return false ; },0
1056,<S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211,0
1057,<S2SV_ModStart> ( ) ; # else mono_attach_maybe_start ( ) ;,0
1058,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n11, n21, n31 ; WORD32 n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n00, n10, n11, n30, n01, n10, n11, n12, n12, n13, n23, n33 ; WORD32 n00, n10, n11, n21, n31 ; WORD32 n01, n11, n12, n22, n32, n03, n13, n23, n33 ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n11 = x_0 - x_2 ; n12 = x_4 + x_6 ; n12 = x_5 + x_7 ; n13 = x_6 + x_7 ; n12 = x_4 + x_6 ; n13 = x_5 + x_7",0
1059,"<S2SV_ModStart> clips_ptr ) { if (! clips ) { ret = - ENOMEM ; goto out_err1 ; } <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if",0
1060,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),0
1061,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1062,"<S2SV_ModStart> ) ; } if ( i < len ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; }",0
1063,"<S2SV_ModStart>, frames ; int width, height, target_width, target_height ; if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 <S2SV_ModEnd> wTmp ; snd_msnd_eval_dsp_msg <S2SV_ModStart> ) ) ; if ( readw ( chip -> DSPQ + JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ; } <S2SV_ModStart> + JQS_wHead ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wTail ) ) ) ;",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; } <S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; },0
1066,"<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> # ifdef ACPI_EXEC_APP <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ; } } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { ACPI_EXCEPTION ( ( AE_INFO, ""Namespace <S2SV_blank> freed\\n"" ) ) ; return_VOID ; } <S2SV_ModEnd> acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node",0
1067,<S2SV_ModStart> ) ) { if ( ret_val < 0 ) { ret_val = - 1 ; goto exit ; } <S2SV_ModStart> ) ) { if ( ret_val < 0 ) { ret_val = - 1 ; goto exit ; },0
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> struct vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> enc ) { memset ( priv, 0, sizeof ( * priv ) ) ; priv -> sz = sizeof ( * priv ) ; priv -> iface = ctx -> iface ; priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { memcpy ( priv -> cfg, * ctx -> config. enc, sizeof ( * priv -> cfg ) ) ; priv -> init_flags = ctx -> init_flags ; } cfg = & priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; priv -> cx_data_sz = priv ->",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE,",0
1071,<S2SV_ModStart> ++ ; } if ( cnt_c + step > BOT ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> freq [ i ] = sum ; pixel -> lookup [ i ] = sum ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for (,0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested <S2SV_ModEnd> ( sock, <S2SV_ModStart>, TIPC_NLA_SOCK_MAX, <S2SV_ModEnd> attrs [ TIPC_NLA_SOCK <S2SV_ModStart> - EINVAL ; if ( err ) return err ; <S2SV_ModStart> - EINVAL ; if (! attrs [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> tsk_portid = nla_get_u32 <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> err = __tipc_nl_list_sk_publ",0
1073,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
1074,"<S2SV_ModStart> = v ; if ( priv -> vm_ops -> vm_stop ) priv -> vm_ops -> vm_stop ( priv <S2SV_ModEnd>, vma )",0
1075,<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; if ( total_len < length ) break ; total_len -= length ;,0
1076,<S2SV_ModStart> task_struct * task <S2SV_ModEnd> ; file_sb_list_del (,0
1077,"<S2SV_ModStart> efe ) ; if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { enc28j60WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; inet_opt_put ( inet ) ; <S2SV_ModStart> inet -> opt ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) <S2SV_ModEnd> ) ; sk_refcnt_debug_dec",0
1081,<S2SV_ModStart> ) ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; } <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>!= '\\r' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) { ND_TCHECK ( * bp ) ; } else { ND_TCHECK ( * bp ) ; } else { ND_TCHECK ( * bp ) ; } } bp ++ ; len -- ; saw_digit = 1 ; } } },0
1082,"<S2SV_ModStart> ; if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( ENOATTR ) ) ; return XFS_ERROR ( ENOATTR ) ; } if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { xfs_trans_log_buf ( args -> dp, bp, XFS_ERROR ( ENOATTR ) ) ; return XFS_ERROR ( ENOATTR ) ; } if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( ENOATTR ) ) ; } if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { xfs_trans_log_buf ( args -> dp, bp, XFS_ERROR ( ENOATTR ) ) ; return XFS_ERROR ( ENOATTR ) ; } if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { xfs_trans_log_buf ( args -> dp, bp, XFS_ERROR (",0
1083,"<S2SV_ModStart> ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovakLastTest ) ; # endif",0
1084,<S2SV_ModStart> = object_length ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; },0
1085,"<S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""size"", sz ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( sdb_num_set ( sdb, ""size"", sz ) < 0 ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ;",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if (! tmp ) { TIFFError ( tif -> tif_dir. td_filename, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFError ( tif -> tif_dir. td_filename, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> return ; while ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( cp [ stride ] + cp [ 0 ] & 0xff ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < b",0
1089,"<S2SV_ModStart> ) ) { spin_lock ( ptl ) ; <S2SV_ModStart>, address, pte, pmd <S2SV_ModEnd>, flags, <S2SV_ModStart>, address, pte, pmd <S2SV_ModEnd>, flags )",0
1090,"<S2SV_ModStart> s ) { size_t <S2SV_ModEnd> r = pool_alloc <S2SV_ModStart> + 1 ) ; if (! r ) return NULL ; <S2SV_ModStart> + 1 ) ; strcpy ( r, s, strlen ( s ) ) ;",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,<S2SV_ModStart> ; if ( unlikely ( idx >= map -> nr_extents ) ) { ret = - EINVAL ; goto out ; },0
1093,"<S2SV_ModStart> ) ; } if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> compunit <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; return NULL ; }",0
1094,"<S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_bitrate > UINT32_MAX / p_enc -> fmt_in. i_bitrate ) { msg_Err ( p_enc, ""Bitrate <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> (%u)"", p_enc -> fmt_in. i_bitrate ) ; return NULL ; }",0
1095,"<S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; goto exit_mf ; }",0
1096,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * ip6 ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ;",0
1097,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( idx + 4 > len ) return NULL ;,0
1098,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ; vpx_get_reference_dec ( <S2SV_ModStart> YV12_BUFFER_CONFIG * fb <S2SV_ModEnd> ) ; yuvconfig2image",0
1102,"<S2SV_ModStart> ctxt ) ; if ( ops -> get_msr ( ctxt, MSR_EFER, & efer ) < 0 ) return - EINVAL ; <S2SV_ModStart> efer ) ; if ( ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { cs. d = 0 ; cs. l = 1 ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ctxt -> regs [ VCPU_REGS_RCX ] = ctxt -> _eip ; ops -> get_msr ( ctxt, MSR_SYSCALL_MASK, & msr_data ) ; ctxt -> eflags &= ~ ( EFLG_VM | EFLG_IF",0
1103,"<S2SV_ModStart> ; if ( j < length ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> "" ""beginning <S2SV_blank> of <S2SV_blank> image.\\n"", j ) ; return AVERROR_INVALIDDATA ; }",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else e = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) ) { case Name_kind : case Attribute_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; }",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int mc_avg_y_stride, <S2SV_ModStart> unsigned char * running_avg_y, <S2SV_ModEnd> int avg_y_stride, <S2SV_ModStart> char * mc_avg_y, <S2SV_ModEnd> int avg_y_stride, <S2SV_ModStart> char * running_avg_y, <S2SV_ModEnd> int r, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = running_avg",0
1106,<S2SV_ModStart> ; } } if (,0
1107,"<S2SV_ModStart> ; int ret ; if ( test_thread_flag ( child, TIF_SINGLESTEP ) ) return - EPERM",0
1108,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { <S2SV_ModStart> -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; } if ( ( flags & SOCKET_FLAG_PEEK ) == 0 ) { socket -> receiveQueue = queueItem -> next ; netBufferFree ( queueItem -> buffer ) ; },0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> struct se_device * <S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> ; if ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) remote_dev = xop -> src_dev ; else remote_dev = xop -> dst_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ;",0
1111,"<S2SV_ModStart> int error ; struct ext2_inode_info * ei = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode = EXT2_I ( inode ) ; struct ext2_inode_info * ei_inode = EXT2_I ( inode ) ; <S2SV_ModStart> get_bh ( old_bh ) ; get_bh ( new_bh ) ; ei_inode = ei_inode ; <S2SV_ModStart> ) ; ext2_xattr_cache_insert ( ei_inode, new_bh <S2SV_ModEnd> ) ; }",0
1112,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> 0 ) return <S2SV_ModEnd> rc ; inode",0
1115,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1116,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1117,<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3,0
1118,"<S2SV_ModStart> SUCCESS ) { if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Variable <S2SV_blank> is <S2SV_blank> zero"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( zval_is_zero ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Variable <S2SV_blank> is <S2SV_blank> zero"" ) ; RETURN_FALSE ; }",0
1119,<S2SV_ModStart> ; sig_none = ( <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> -> it_sigev_notify & <S2SV_ModEnd> SIGEV_THREAD_ID ) ==,0
1120,"<S2SV_ModStart> = 2048 ; if ( p == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart>, 1 ) ; if ( p == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart>, 1 ) ; if ( p == NULL ) { return ( MagickFalse ) ; }",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG sd ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_ref_frame_t * frame = ( vpx_ref_frame_t * ) va_arg ( args, vpx_ref_frame_t * ) ; if ( frame ) { vpx_ref_frame_t * frame = ( vpx_ref_frame_t * ) data ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1122,<S2SV_ModStart>. path ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModEnd> return CURLE_OK ;,0
1123,<S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( len < 0 ) return 0 ;,0
1124,"<S2SV_ModStart>, ret ; if ( IS_IRAP ( s ) ) sh -> no_output_of_prior_pics_flag = 0 ; if ( IS_BLA ( s ) ) sh -> no_output_of_prior_pics_flag = 1 ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! sh -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; }",0
1125,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; <S2SV_ModStart> u1_num_mbsNby2 ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
1126,"<S2SV_ModStart>, u4_y_offset ; if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_OVERFLOW ; } <S2SV_ModStart> B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_OVERFLOW ; } if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_OVERFLOW ; } } else { if ( ps_dec -> u2_total_mbs_coded > ps_dec -> u2_total_mbs_coded ) { return IMPEG2D_ERROR_OVERFLOW ; } if ( ps_dec -> e_pic_type == B_PIC ) { if ( ps_dec -> u2_total_mbs",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_COMMON * const cm = pbi -> common ; const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> TX_SIZE tx_size = <S2SV_ModStart> 1 ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int num_4x4_w = num_4x4_w ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide,0
1130,<S2SV_ModStart> ( random_factor ) ; if ( mm -> mmap_legacy_base == - 1UL ) { mm -> mmap_legacy_base = mmap_legacy_base ( random_factor ) ; } else { mm -> mmap_legacy_base = mmap_base ( random_factor ) ; },0
1131,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1132,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt <S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt <S2SV_ModStart> case 'I' : { size_t sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; }",0
1133,<S2SV_ModStart> nrow ) { if ( img -> row_offset + nrow > h ) { return ( 0 ) ; },0
1134,<S2SV_ModStart> } } assert ( 1 <S2SV_ModEnd> ) ; return,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1136,<S2SV_ModStart> upid == - 1 || upid == 0,0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; num &= SWF_SBITS_MASK ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MAX <S2SV_ModEnd> ; else return,0
1139,"<S2SV_ModStart> plane ] ; const int x = vpx_img_plane_width ( img, plane ) ; const int y = vpx_img_plane_height ( img, plane ) ; const int y2 = vpx_img_plane_height ( img, plane ) ; const int y3 = vpx_img_plane_height ( img, plane ) ; const int w = vpx_img_plane_width ( img, plane ) ; const int h = vpx_img_plane_height ( img, plane ) ; const int y4 = vpx_img_plane_height ( img, plane ) ; <S2SV_ModStart> ++ y ) { if ( fread <S2SV_ModEnd> ( buf,",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, secret",0
1141,"<S2SV_ModStart> -> private ; struct dm_dev * dev = lc -> dev ; struct dm_dev * bd = lc -> dev -> bd_inode ; return dm_block_driver_ioctl ( bd -> bd_inode, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
1142,"<S2SV_ModStart> ) ) ; if ( actx -> tag_len > CHACHA_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LEN_ERROR ) ; return 0 ; }",0
1143,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1144,"<S2SV_ModStart> fp ) ; if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ;",0
1145,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1146,"<S2SV_ModStart> ) { memcpy <S2SV_ModEnd> ( pass_salt, <S2SV_ModStart> length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ;,0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> * cp0, tmsize_t cc ) { if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""%s"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%",0
1151,<S2SV_ModStart> g -> sect > UINT32_MAX <S2SV_ModEnd> || g -> <S2SV_ModStart> g -> head > UINT32_MAX <S2SV_ModEnd> || g ->,0
1152,"<S2SV_ModStart> 0 ) { if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1153,"<S2SV_ModStart>, & rlen, 0",1
1154,"<S2SV_ModStart> ; read_userfile ( & user ) ; <S2SV_ModStart> slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; if ( user -> password!= NULL ) { mlock ( user -> password, strlen ( user -> password ) ) ; } # endif <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT",0
1155,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1156,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
1157,"<S2SV_ModStart> ; if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - EINVAL ; goto out_unmap ; }",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } Curl_pp_init ( pp ) ; pp -> response_time = RESP_TIMEOUT ; pp -> statemach_act = smtp_statemach_act ; pp -> endofresp = smtp_endofresp ; pp -> conn = conn ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn,",0
1160,<S2SV_ModStart> ; i < sizeof ( buf ) <S2SV_ModEnd> && str [,0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> ) ; return <S2SV_ModEnd> sizeof ( struct,0
1163,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1164,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1165,"<S2SV_ModStart> ) ) { JAS_LOG ( 0x534e4554, ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"" ) ) ) ) ) ; JAS_LOG ( 0x534e4554, ( ""JAS_ERROR"" ) ) ) ; return - 1 ; }",0
1166,"<S2SV_ModStart> ) ) { if ( i > 0 ) { r_cons_printf ( ""\\n"" ) ; } r_spaces_push ( & r -> anal -> meta_spaces, ""bin"" ) ; } r_spaces_push ( & r -> anal -> meta_spaces, ""entries"" ) ; <S2SV_ModStart> ) ) { if ( i > 0 ) { r_spaces_push ( & r -> anal -> meta_spaces, ""entries"" ) ; } if ( i > 0 ) { r_cons_printf ( ""\\n"" ) ; } r_spaces_push ( & r -> anal -> meta_spaces, ""entries"" ) ; r_spaces_push ( & r -> anal -> meta_spaces, ""bin"" ) ; } if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_ENTRIES ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""\\n"" ) ; } else { r_spaces_push ( & r -> anal -> meta_spaces, ""entries"" ) ; }",0
1167,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock <S2SV_ModEnd> ( xdr,",0
1168,"<S2SV_ModStart> ) ) { krb5_error_code errcode = KRB5KDC_ERR_BADOPTION ; <S2SV_ModStart> return KRB5KDC_ERR_BADOPTION ; } if (! krb5_principal_compare ( kdc_context, t2enc -> princ, server_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""NOT_ALLOWED_TO",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) p -> thread. <S2SV_ModEnd> tp_value = childregs,0
1170,"<S2SV_ModStart> { jas_stream_t * stream ; jas_stream_memobj_t * obj ; jas_dbgLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; jas_stream_initbuf ( stream, JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> buf_ = 0 ; obj -> myalloc_ = 0 ; obj -> buf_ = 0 ; if ( bufsize <= 0 ) { obj -> bufsize_ = 1024 ; obj -> growable_ = 1 ; } else { obj -> bufsize_ = bufsize ; obj -> growable_ = 0 ; } <S2SV_ModEnd> } if (",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> ; char * userstyle <S2SV_ModEnd> = NULL, <S2SV_ModStart> ; u_char * pkblob, * sig, have_sig ; size_t blen, slen ; int r, pktype ; int authenticated = 0 ; struct sshauthopt * authopts ; int r, r, pktype ; int authenticated = 0 ; if ( authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkalg, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 ||",0
1172,"<S2SV_ModStart> = 0 ; int64_t <S2SV_ModEnd> bcount ; uint32_t <S2SV_ModStart> = 0 ; if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & chunk_header, sizeof ( WaveHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && filehdr. ckSize && filehdr. ckSize + 1 && filehdr. ckSize!= infilesize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT",0
1173,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sas",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
1176,"<S2SV_ModStart> db_count = le32_to_cpu ( es -> s_db_count ) ; if ( db_count > EXT2_MAX_DBS_PER_BLOCK ) { ext2_msg ( sb, KERN_ERR, ""blockgroup <S2SV_blank> count <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", db_count ) ; goto failed_sbi ; }",0
1177,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1178,<S2SV_ModStart> 4 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ;,0
1179,<S2SV_ModStart> int i ; jas_matind_t numrows ; jas_matind_t <S2SV_ModEnd> numcols ; if <S2SV_ModStart> < 0 ) { jas_matind_t <S2SV_ModEnd> i ; if <S2SV_ModStart> ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } numrows = numrows ; numcols = numcols ; matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> datasize_ = numrows * numcols ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numrows ; matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix,0
1180,<S2SV_ModStart> skb ) ; if ( hlen >= IP6_MAX_FRAGLEN ) { err = - EMSGSIZE ; goto slow_path ; },0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_req * r <S2SV_ModEnd> ; req = <S2SV_ModStart> scsi_disk_reqops, & <S2SV_ModEnd> s -> qdev <S2SV_ModStart> scsi_disk_reqops, & <S2SV_ModEnd> s -> qdev <S2SV_ModStart> scsi_disk_reqops, & <S2SV_ModEnd> s -> qdev <S2SV_ModStart> scsi_disk_reqops, & <S2SV_ModEnd> s -> qdev",0
1182,<S2SV_ModStart> int i ; <S2SV_ModEnd> int avail ; <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len || nxip > buf -> len ) goto bad_format ;,0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_unbind_addr ( cm_id, & sin ) ; }",0
1185,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; struct xfrm_policy_walk_args * args = cb -> args ; <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModStart> = NLM_F_MULTI ; xfrm_policy_walk_init ( & args -> xfrm_policy_walk, <S2SV_ModEnd> XFRM_POLICY_TYPE_ANY ) ; <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModStart> if (! args -> xfrm_policy_walk_init ( & args -> xfrm_policy_walk, XFRM_POLICY_TYPE_ANY ) ; xfrm_policy_walk_init ( & args -> xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; <S2SV_ModStart> ; if (! args -> xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; xfrm_",0
1186,<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> = ovl_dentry_upper ( dentry ) <S2SV_ModEnd> ; int err <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; } <S2SV_ModEnd> ovl_dentry_version_inc ( dentry <S2SV_ModStart> d_parent ) ; <S2SV_ModEnd> inode_unlock ( dir",0
1188,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1",0
1189,<S2SV_ModStart> &&! ( nmemb <S2SV_ModEnd> && size ),0
1190,<S2SV_ModStart> ] ; if ( <S2SV_ModEnd> a -> name <S2SV_ModStart> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( <S2SV_ModEnd> a -> name <S2SV_ModStart> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; },0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_MIN_SIZE : * ( size_t * ) val = ms -> elf_min_size ; return 0 ; case MAGIC_PARAM_ELF_MAX_SIZE : * ( size_t * ) val = ms -> elf_max_size ; return 0 ; case MAGIC_PARAM_ELF_MIN_SIZE : * ( size_t * ) val = ms -> elf_min_size ; return 0 ; case MAGIC_PARAM_ELF_MAX_SIZE : * ( size_t * ) val = ms -> elf_max_size ; return 0 ; case MAGIC_PARAM_ELF_MAX_SIZE : * ( size_t * ) val = ms -> elf_max_size ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", <S2SV_ModStart> name ) ; goto error ; }",0
1193,,1
1194,<S2SV_ModStart> ) { journal_t <S2SV_ModEnd> * journal =,0
1195,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( TrackWriter ) ; if (! writer ) goto exit ; <S2SV_ModStart> i + 1 ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if (! writer -> stsc ) return",0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> UINT32 nsc_rle_encode (,0
1197,<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data +,0
1198,<S2SV_ModStart> useSystemLib ) { <S2SV_ModEnd> if ( useSystemLib,0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) SNMP_FREE ( _mibindexes ) ; _mibindexes = NULL ;,0
1200,"<S2SV_ModStart> == 0xfffffe00UL ) if ( image -> columns > 1536 ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( CorruptImageError, ""InsufficientImageDataInFile"", image -> filename ) ;",0
1201,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1202,<S2SV_ModStart> ) ; g_hash_table_destroy ( headers ) ; g_assert_not_reached ( ) ;,0
1203,"<S2SV_ModStart> # ifdef HAVE_IPV6 char * p ; if ( str_len > 1 ) { p = memchr <S2SV_ModEnd> ( str + <S2SV_ModStart>, ']', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; host = estrndup ( str + 1, p - str - 1 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } # endif if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { colon = NULL ; } if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf (",0
1204,"<S2SV_ModStart> y_buffer ; for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1205,"<S2SV_ModStart> ; } c -> csty = bytestream2_get_byteu ( & s -> g ) ; if ( c -> csty & JPEG2000_CSTY_HIGHBITDEPTH ) { av_log ( s -> avctx, AV_LOG_ERROR, ""highbitdepth <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1206,<S2SV_ModStart> { if ( <S2SV_ModEnd> '%' == * <S2SV_ModStart> '%' == * ptr <S2SV_ModEnd> ) { if,0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist ; <S2SV_ModEnd> BLOCK_SIZE i ; <S2SV_ModStart> { for ( <S2SV_ModEnd> i = BLOCK_4X4 <S2SV_ModStart> ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index ) for",0
1208,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * bw ) ; tptr = pptr ; tlen = EXTRACT_16BITS ( bw -> f ) ; if ( tlen!= sizeof ( struct lmp_common_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match"" ) ) ; return ; } if ( tlen!= sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match"" ) ) ; return ; } <S2SV_ModEnd> tlen = EXTRACT_16BITS <S2SV_ModStart> -> length ) ; if ( tlen!= sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match"" ) ) ; return ; } if ( tlen!= sizeof ( struct lmp_object_header ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> does <S2SV_blank> not <S2SV_blank> match"" ) ) ;",0
1209,"<S2SV_ModStart> const MB_MODE_INFO * mbmi <S2SV_ModEnd>, const int_mv <S2SV_ModStart> ++ i ) { const MV * ref = mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] ; const MV * diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ) ; if ( skb_out -> len + hdr_size > size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry (",0
1212,<S2SV_ModStart> ) ; spin_lock_init <S2SV_ModEnd> ( & sta <S2SV_ModStart> ) ; spin_lock_init <S2SV_ModEnd> ( & sta,0
1213,<S2SV_ModStart> && perf_paranoid_kernel ( ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attr. sample_type & PERF_SAMPLE_RAW ) return 0 ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; },0
1214,"<S2SV_ModStart> 1 ) ; if ( data_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if ( control_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; }",0
1215,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
1216,"<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; if (! env_var ) return ; <S2SV_ModStart> ) { add_mibfile <S2SV_ModEnd> ( entry,",0
1217,"<S2SV_ModStart> * head ; struct list_head tmplist ; sctp_bind_hashbucket_init ( & tmplist ) ; newsk -> sk_sndbuf = oldsk -> sk_sndbuf ; newsk -> sk_rcvbuf = oldsk -> sk_rcvbuf ; sctp_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk_copy_descendant ( newsk, oldsk ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_bind_hash_init ( newsk ) ; sctp_sk ( newsk ) -> bind_hash = NULL ; sctp_sk ( newsk ) -> bind_hash = NULL ; sctp_sk ( newsk ) -> inet_num = sctp_phashfn ( sock_net ( oldsk ), sctp_phashfn ( sock_net ( newsk ), sctp_phashfn ( sock_net ( newsk ) -> inet_num ) ; sctp_sk ( newsk ) -> bind_hash = pp ; sctp_sk ( newsk ) -> inet_num",0
1218,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd, UI_SET_EVBIT, <S2SV_ModEnd> EV_KEY ) ; <S2SV_ModStart> ( fd, <S2SV_ModEnd> UI_SET_KEYBIT, key_map <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ) ;",0
1219,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> * desc ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> if ( v8086_mode <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; if (! desc -> l ) return - EINVAL ; if (! desc -> d ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return - EINVAL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,0
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, screen -> columns, screen -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1225,<S2SV_ModStart> ; while ( <S2SV_ModEnd> impeg2d_bit_stream_nxt ( ps_stream,0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
1227,<S2SV_ModStart> imethod ) ; g_object_unref ( rmethod -> object ) ;,0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; size_t <S2SV_ModEnd> tmp ; if <S2SV_ModStart> if ( copy_from_user <S2SV_ModEnd> ( buf,",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1230,"<S2SV_ModStart> bh ) ; return 0 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > F2FS_MAX_LOG_SECTOR_SIZE || le32_to_cpu ( raw_super -> log_blocks_per_seg ) < F2FS_MIN_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE || le32_to_cpu ( raw_super -> log_sectorsize ) < F2FS_MIN_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize <S2SV_blank> (%u)"", le32_to_cpu ( raw_super -> log_sectorsize ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> is_path ) { const char * repl ; size_t len ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) )? l -> l_origin : _dl_platform ; repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : l -> l_platform ) : _dl_platform ) ; if ( repl!= NULL && repl!= (",0
1232,<S2SV_ModStart> } pDecCont = ( decContainer_t * ),0
1233,"<S2SV_ModStart> size_t len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) rcu_assign_pointer ( rp -> opt_space, opt_space ) ;",0
1234,"<S2SV_ModStart> drop ; } iph = ip_hdr ( skb ) ; if (! iph ) goto inhdr_error ; <S2SV_ModStart> ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) )",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error <S2SV_ModEnd> ; else {",0
1236,<S2SV_ModStart> ; if ( rtm -> rt_flags & RTCF_DEST ) { err = - EINVAL ; goto errout ; },0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1239,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; tcp_rcv_space_adjust ( sk ) ;,0
1240,"<S2SV_ModStart> 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> & err ) ; if ( key_data_in == NULL ) goto cleanup ; <S2SV_ModStart> cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_kvno!= key_data [ i + 1 ]. key_data_kvno ) num_versions ++ ; ret [ j ] = k5alloc ( sizeof ( struct berval )",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_INVALID ; } else { <S2SV_ModStart> nByte + 1 ) ; },0
1243,<S2SV_ModStart> filp ) { file_accessed ( filp ) ; <S2SV_ModStart> ) ) ; return fput ( filp ) <S2SV_ModEnd> ; } <S2SV_null>,0
1244,"<S2SV_ModStart> expr_ty iter, asdl_seq * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ;",0
1246,<S2SV_ModStart> } } return opt <S2SV_ModEnd> ; } <S2SV_null>,0
1247,"<S2SV_ModStart> ; if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, UD_VECTOR ) ; return 1 ; }",0
1248,"<S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> SPDY <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return """,0
1249,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId ) ; return error ; }",0
1250,"<S2SV_ModStart> ) ) ; if ( pData -> multicastHops > - 1 ) zsocket_set_multicasthops ( pData -> socket, pData -> multicastHops ) ;",0
1251,"<S2SV_ModStart> 0 ) return - EINVAL ; if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> return 0 ;",0
1252,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt ; <S2SV_ModStart> ( sk ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> SCTP_INC_STATS ( sock_net <S2SV_ModStart> SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart> sk, skb <S2SV_ModEnd>, & fl6 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1253,"<S2SV_ModStart> = - EPERM ; if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return TRUE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
1257,"<S2SV_ModStart>, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; last_pwd = adb. last_pwd ;",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = RLC_ERR <S2SV_ModStart> ; } * p_len = m_len ; <S2SV_ModEnd> m_len -- ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> pad!= RSA_PUB <S2SV_ModStart> ; if ( <S2SV_ModEnd> pad!= RSA_DEC <S2SV_ModStart> ) ) { <S2SV_ModEnd> result = RLC_ERR <S2SV_ModStart> ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; result = RLC_OK ; break ; case RSA_SIG : id = hash_id ( MD_MAP, & len ) ;",0
1259,<S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ; <S2SV_ModStart> ; if ( count > MAX_FUNCTION_ARGS ) return ERROR_INSUFFICIENT_MEMORY ;,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( hctx ->,0
1262,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
1264,<S2SV_ModStart> ] == '[' ) { token ++ ; } if (! token ) { return false ; },0
1265,"<S2SV_ModStart> ) { MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; VP9_COMMON <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context, 0, sizeof ( * xd -> above_context ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd",0
1266,"<S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
1267,"<S2SV_ModStart> EOFOp 0x07 MemoryInfo * info <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; info = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( info == ( MemoryInfo * ) NULL ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, info ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, info ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, info ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, info ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, info ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, info ) ; if ( status ==",0
1268,<S2SV_ModStart> ctl_files_rwlock ) ; mutex_lock ( & snd_cards_mutex ) ; <S2SV_ModStart> ctl_files_rwlock ) ; mutex_unlock ( & snd_cards_mutex ) ;,0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,<S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY (,0
1271,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> <S2SV_ModStart> -> u2_cur_slice_num = u2_frame_num ; ps_dec -> <S2SV_ModStart> -> u2_cur_slice_num = u2_frame_num ; ps_dec -> <S2SV_ModStart> -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ; ps_dec -> u2_cur_slice_num = u2_frame_num ;,0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata!= NULL ) { OPENSSL_free ( rdata ) ; pitem_free ( item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; }",0
1273,"<S2SV_ModStart> ; if ( args -> buffer_count > I915_NUM_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if (",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ; struct pci_dev <S2SV_ModEnd> * pdev ; <S2SV_ModStart> PTR_ERR ( karg ) ) { <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> return PTR_ERR ( karg ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( karg ) ) { <S2SV_ModEnd> printk ( MYIOC_s_ERR_FMT <S2SV_ModStart> ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n""",0
1275,"<S2SV_ModStart>, const char <S2SV_ModEnd> * path ) <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len_sent = 0 <S2SV_ModStart> ; audit_log_format ( * ab, ""argc=%d"", context -> execve. argc <S2SV_ModEnd> ) ; buf <S2SV_ModStart> ; buf = kmalloc <S2SV_ModEnd> ( MAX_EXECVE_AUDIT_LEN + <S2SV_ModStart> + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; kfree ( buf ) ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ;",0
1278,"<S2SV_ModStart> ( path, O_RDONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } <S2SV_ModStart> FALSE ; } if (! parse_netscreen_rec_hdr ( phdr, line, cap_int, & cap_dir, & cap_dir, cap_dst, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dir, cap_dst, phdr, buf, err, err_info )",0
1280,<S2SV_ModStart> rq ) { u64 <S2SV_ModEnd> irq_time ; if <S2SV_ModStart> rq ) ; <S2SV_ModEnd> irq_time = irq_time <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1281,"<S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
1282,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> struct blkif_response resp <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; spin_lock_irqsave ( & ring -> blk_ring_lock, flags ) ; blk_rings = & ring -> blk_rings ; switch ( ring -> blkif -> blk_protocol ) { case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64.",0
1283,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if (,0
1284,"<S2SV_ModStart> offset ; if ( datao + 12 > buf_size || datao + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( datao + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += 2 ; exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) *",0
1285,"<S2SV_ModStart> ; if ( nimages < 1 ) return ERROR_INT ( ""nimages <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; nimages = nfiles ; <S2SV_ModStart> ) ) { if ( nimages < 1 ) return ERROR_INT ( ""nimages <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; nimages = 1 ; }",0
1286,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & dp -> icmp_type ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & dp -> icmp_id ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & dp -> icmp_type ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & dp -> icmp_type ) ; <S2SV_ModStart> ( void ) snprintf ( buf, sizeof ( buf ), ""%s"", ipaddr_string ( ndo, & dp -> icmp_ip. ip_dst ) ; <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""%s"", ipaddr_string ( ndo, & dp -> icmp_ip. ip_p ) ;",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> ; } ci = d_inode ( dentry ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ;,0
1288,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] <S2SV_ModEnd> ) ; opt <S2SV_ModStart> servname ) ; return - 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1289,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; }",0
1290,<S2SV_ModStart> parent ) ; if (! i -> parent ) return - 1 ; <S2SV_ModStart> ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = context. line_p. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posX ; # endif # else if ( i -> parent -> mode & NGIFLIB_MODE_STATIC ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY,0
1291,"<S2SV_ModStart> n ) ; if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if (",0
1292,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> image ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> image ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> image ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> image ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1293,<S2SV_ModStart> void ) { if ( recovery_recovery_enabled ) { recovery_recovery_enabled = false ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> )",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> %s"", req -> socket, n ) ;",0
1297,"<S2SV_ModStart> ) { WORD32 <S2SV_ModEnd> st_rps_idx ; WORD32 <S2SV_ModStart> ) { WORD32 <S2SV_ModEnd> num_neg_pics, num_pos_pics",0
1298,"<S2SV_ModStart> case PTRACE_GET_THREAD_AREA : if ( request == PTRACE_GETREGS ) { ret = ptrace_getregs ( child ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; else ret = ptrace_getregs ( child ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; else ret = ptrace_getregs ( child ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; if ( ret ) ret = ptrace_getregs ( child ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; else ret = ptrace_setregs ( child, ret ) ; if ( ret ) ret = ptrace_setregs ( child, ret ) ; if ( ret ) ret = ptrace_getregs ( child, ret ) ;",0
1299,"<S2SV_ModStart> ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; ret = - EINVAL ;",1
1300,"<S2SV_ModStart> cJSON * item <S2SV_ModEnd>, int fmt <S2SV_ModStart>, int fmt, printbuffer * p <S2SV_ModStart> = 0 ; if (! p ) return 0 ; if (! p ) return 0 ; if (! p ) return 0 ; if (! child ) return 0 ; if (! p ) return 0 ; if (! p ) return 0 ; if (! child -> next ) { ++ numentries ; child = child -> next ; } if (! p ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; if (! ptr ) return 0 ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\n' ; * ptr ++ = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( fmt ) for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = '\\t' ; if ( fmt ) for ( j = 0 ; j < numentries ; ++ j ) * ptr ++ = '\\t' ; if ( fmt ) for ( j = 0 ; j < depth",0
1301,"<S2SV_ModStart> STREAM s, uint16_t <S2SV_ModEnd> tagval, int",0
1302,"<S2SV_ModStart> ; other = unix_peer_get ( sk ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } <S2SV_ModStart> other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1303,<S2SV_ModStart> 4 ] ; <S2SV_ModEnd> size_t value ; <S2SV_ModStart> size_t ) ( <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) <S2SV_ModEnd> ; value |= <S2SV_ModStart> ] << 16 ; value |= <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= buffer [ 4 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1305,<S2SV_ModStart> void ) { <S2SV_ModEnd> struct io_context * <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> current ) ; mutex_unlock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ioc = current <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context = NULL ; mutex_unlock <S2SV_ModEnd> ( current ),0
1306,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ; <S2SV_ModStart> return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
1307,"<S2SV_ModStart> data ) { u32 <S2SV_ModEnd> i ; int <S2SV_ModStart> int ret ; * value = 0 <S2SV_ModEnd> ; ret = <S2SV_ModStart> ret ; ret = xen_pcibk_read_config_dword <S2SV_ModEnd> ( dev, <S2SV_ModStart>, value, data ) ; if ( ret ) return ret <S2SV_ModEnd> ; for ( <S2SV_ModStart> & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_ROM_RESOURCE ) * value |= PCI_COMMAND_ROM ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; ret = ret <S2SV_ModEnd> ; } <S2SV_null>",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> vp9_ref_frame_t * frame <S2SV_ModStart> * fb ; <S2SV_ModEnd> vp9_get_reference_enc ( ctx <S2SV_ModStart> NULL ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx <S2SV_ModEnd> -> cpi, <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ) ; kfree <S2SV_ModEnd> ( fpl ),0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,<S2SV_ModStart> -> dwc ; if (! req ) return ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,<S2SV_ModStart> } # else ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # endif ( void ) # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # endif ( void ) # <S2SV_ModStart> } # endif ( void ) # endif ( void ) # endif ( void ),0
1313,"<S2SV_ModStart> DISCE_PROBE ] = sas_probe_devices, <S2SV_ModEnd> [ DISCE_SUSPEND ] <S2SV_ModStart> DISCE_RESUME ] = sas_suspend_devices, <S2SV_ModEnd> [ DISCE_DESTRUCT ]",0
1314,"<S2SV_ModStart> const char * name <S2SV_ModEnd>, int rep_quick",0
1315,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_bits = curve -> num_n_bits ; uECC_word_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; uECC_vli_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modMult ( k, k, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( length, ND_RPL_DAOACK_TRUNC_LEN ) ; if ( length < ND_RPL_DAOACK_TRUNC_LEN ) goto tooshort ;",0
1317,"<S2SV_ModStart> ) ; int <S2SV_ModEnd> err ; int <S2SV_ModStart> out ; if ( msg -> msg_name ) { struct sockaddr_in * sin ; struct sockaddr_in6 * sin6 ; <S2SV_ModStart> ) ) ; sin6 = ( struct sockaddr_in6 * ) msg -> msg_name <S2SV_ModEnd> ; sin -> <S2SV_ModStart> ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; if ( addr_len ) * addr_len = sizeof ( * sin6 ) ; if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } err = - EINVAL ; if (! ( flags & MSG_TRUNC ) ) { err = - EINVAL ; goto done ; } <S2SV_ModEnd> err = skb_copy_datagram_iovec <S2SV_ModStart> skb, 0, <S2SV_ModEnd> msg -> msg_iov",0
1318,"<S2SV_ModStart> ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_GET_BLOCKS_NOCACHE <S2SV_ModEnd> ; if ( <S2SV_ModStart> | EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> i_mutex ) ; <S2SV_ModEnd> if ( ext4_test_inode_flag <S2SV_ModStart> inode, EXT4_INODE_EXTENTS ) <S2SV_ModEnd> flags |= EXT4_GET_BLOCKS_UNWRIT_EXT <S2SV_ModStart> | EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModEnd> if ( ext4_test_inode_flag <S2SV_ModStart> EXT4_INODE_EXTENTS ) <S2SV_ModEnd> flags |= EXT4_GET_BLOCKS_UNWRITTEN",0
1319,<S2SV_ModStart> buf ; } <S2SV_ModEnd> } else { <S2SV_ModStart> buf ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1320,"<S2SV_ModStart> map ; map = bpf_map_inc <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> { while ( * cp ) { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NESTDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp",0
1322,<S2SV_ModStart> int file_is_y4m ( <S2SV_ModEnd> const char detect,0
1323,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> && size_left < 4 ) || ( sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) * sizeof ( ipfix_template_elements_std_t ) *,0
1324,"<S2SV_ModStart> * lined ; l_float32 minfract = 0.05 ; l_float32 difffract = 0.05 ; l_float32 maxfract = 0.05 ; <S2SV_ModStart> = 15 ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( i = 0 ; i < n",0
1325,"<S2SV_ModStart>, ubits = BN_num_bits ( u ), vbits = BN_num_bits ( v ) ; if ( ubits > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( u ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits",0
1326,<S2SV_ModStart> 256 ; vpx_mse16x16_t vpx_mse16x16 ; vpx_mse16x16_t mvpx_mse16x16 ; vpx_mse16x16_t mvpx_mse16x16 ; vpx_mse16x16 = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon,0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> msg -> oob ) { value = msg -> data [ msg -> readcount ] ; msg -> readcount += 1 ; msg -> bit += 8 ; } else { nbits = 0 ; <S2SV_ModStart> & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } msg -> readcount = ( msg -> bit >> 3 ) + 1 ; } if ( sgn && bits > 0 && bits < 32 ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id2 ; <S2SV_ModStart> ; up_write ( & card -> controls_rwsem ) ; id = kcontrol -> id ; <S2SV_ModStart> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,"<S2SV_ModStart> ; status = register_netdev ( net, interface ) ; if ( status < 0 ) goto out ; status =",0
1331,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> + 4 + <S2SV_ModEnd> count + 1,0
1332,<S2SV_ModStart> g_wnd_assistant ) ; g_free ( g_dump_dir_name ) ; g_free ( g_dump_dir_name ) ;,0
1333,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1334,"<S2SV_ModStart> { umode_t mode ; struct iattr iattr ; mode = inode -> i_mode ; if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EPERM ; goto err_out ; } <S2SV_ModEnd> retval = posix_acl_update_mode <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ) ; err_out : posix_acl_release_mode ( & inode -> i_mode, & mode, & acl ) ; <S2SV_ModEnd> break ; case",0
1335,<S2SV_ModStart> ; if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } <S2SV_ModEnd> methods = calloc <S2SV_ModStart> ; if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; },0
1336,<S2SV_ModStart> NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginNameString : type = RPC_TYPE_STRING ; break ; case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE <S2SV_ModEnd> ; } <S2SV_null>,0
1338,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } }",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value |= T",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1343,"<S2SV_ModStart>, PREDICTION_MODE mode, <S2SV_ModEnd> TX_SIZE tx_size, <S2SV_ModStart> plane ] ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( up_available ) { DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 128 ; uint8_t * above_row",0
1344,"<S2SV_ModStart> ; } else if ( end < 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } else if ( end < 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; }",0
1345,"<S2SV_ModStart> uchar * buf <S2SV_ModEnd>, int len",0
1346,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1347,<S2SV_ModStart> BUG ( ) ; if (! thresholds ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> usage = mem_cgroup_usage <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = idr_find_and_get ( & client -> idr, id ) ; mutex_unlock ( & client -> lock ) ; if (! handle ) { mutex_unlock ( & client -> lock ) ; return ERR_PTR ( - EINVAL ) ; } mutex_unlock ( & client -> lock ) ; handle = idr_find ( & client -> idr, id ) ; if (! handle ) { mutex_unlock ( & client -> lock ) ; handle = ERR_PTR ( - EINVAL ) ; } mutex_unlock ( & client -> lock ) ; return handle <S2SV_ModEnd> ; } <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vp9_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1350,<S2SV_ModStart> ; if ( stroff > 0 && stroff < max_stroff ) { <S2SV_ModEnd> stroff = max_stroff <S2SV_ModStart> ; } } if ( stroff > 0 && stroff < max_stroff ) { <S2SV_ModEnd> stroff = max_stroff <S2SV_ModStart> ; } } if ( stroff > 0 && stroff < max_stroff ) { <S2SV_ModEnd> stroff = max_stroff <S2SV_ModStart> stroff ; } if ( stroff > 0 && stroff < max_stroff ) { <S2SV_ModEnd> stroff = max_stroff <S2SV_ModStart> ; } } if ( stroff > 0 && stroff < max_stroff ) { <S2SV_ModEnd> stroff = max_stroff <S2SV_ModStart> ; } } if ( stroff > 0 && stroff < max_stroff ) { <S2SV_ModEnd> stroff = max_stroff <S2SV_ModStart> stroff ; } if ( stroff > 0 && stroff < max_stroff ) { stroff = max_stroff <S2SV_ModStart> stroff ; } if ( stroff > 0 && stroff < max_stro,0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
1352,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
1353,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1354,"<S2SV_ModStart> error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_START ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_",0
1355,"<S2SV_ModStart> == 0x01 ) { if ( ibuf [ ind + 1 ] == 0xFE ) { gemsafe_prkeys [ i ]. ref = ibuf [ ind + 4 ] ; sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> allocated <S2SV_blank> and <S2SV_blank> uses <S2SV_blank> key_ref <S2SV_blank> %d"", i + 1, gemsafe_prkeys [ i ]. ref ) ; ind += 9 ; } else { gemsafe_cert [ i ]. ref = 0 ; }",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ""rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ), rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ""rb_const_get ( ""rb_const_get ( rb_const_get ( rb_const_get ( rb",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> au1200fb_device * fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> vma ) ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1359,"<S2SV_ModStart> config_arg ) ; if ( i < 0 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,"<S2SV_ModStart> / 2 ] ; memset ( out, 0, 4 ) ; <S2SV_ModStart> / 2 ] ; memset ( out, 0, 4 ) ;",0
1361,"<S2SV_ModStart> idx ) ) { perf_event_update_period ( event, hwc, idx, <S2SV_ModEnd> & data,",0
1362,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1363,<S2SV_ModStart> fanout_mutex ) ; mutex_unlock ( & fanout_mutex ) ; <S2SV_ModStart> - EINVAL ; mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> out ; } mutex_unlock ( & fanout_mutex ) ;,0
1364,<S2SV_ModStart> ; if ( <S2SV_ModEnd> handle -> nmi <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> - EINVAL ; if ( len < size ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW |",0
1366,<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> i ; if <S2SV_ModStart> == PNG_COLOR_TYPE_RGB && length!= 6 ) return AVERROR_INVALIDDATA ; if ( s -> bit_depth > 8 || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ;,0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1368,<S2SV_ModStart> = AF_INET6 ; } if ( dt -> vlan_id [ 0 ] < 0 || dt -> vlan_id [ 1 ] < 0 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] < 0 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1 || dt -> vlan_id [ 1 ] > UINT32_MAX - 1 || dt -> vlan_id [ 0 ] > UINT32_MAX - 1,0
1369,"<S2SV_ModStart> ; status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) )!= <S2SV_ModStart> ( status & ( RXFHSR_RXFV | RXFHSR_RXFV_RXCE <S2SV_ModEnd> ) )!= <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) )!= <S2SV_ModStart> ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ",0
1370,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static stmt_ty_t <S2SV_ModEnd> ast_for_funcdef_impl ( struct <S2SV_ModStart>, int is_async, const node * funcdef, <S2SV_ModStart>, returns, funcdef, <S2SV_ModStart>, returns, funcdef, funcdef -> type_comments <S2SV_ModStart>, returns, funcdef -> type_comments <S2SV_ModEnd>, n -> <S2SV_ModStart>, returns, funcdef -> type_comments <S2SV_ModEnd>, n -> <S2SV_ModStart>, returns, funcdef -> type_comments <S2SV_ModEnd>, n -> <S2SV_ModStart>, returns, funcdef -> type_comments <S2SV_ModEnd>, LINENO ( <S2SV_ModStart>, returns, funcdef -> type_comments <S2SV_ModEnd> ) ; }",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) ; pte ++ ; } pte_unmap_unlock ( pte, ptl ) ; out :",0
1372,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL <S2SV_ModEnd>, & sa",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; jas_uint32_t tilewidth = 0 ; jas_uint32_t tileheight = 0 ; jas_uint32_t tilexoff = 0 ; jas_uint32_t tileyoff = 0 ; <S2SV_ModStart> numcomps ) ) { if (! siz -> width ||! siz -> height ||! siz -> tilewidth ||! siz -> tileheight ||! siz -> numcomps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> yoff >=",0
1374,"<S2SV_ModStart> ; if ( 0!= ( * packet_data_pptr & COAP_HEADER_TOKEN_LENGTH_MASK ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
1375,"<S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __",0
1376,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely ( <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart> ; size_t chars = iov_len ( iov, nr_segs ) ; if ( unlikely ( total_len < 0 ) ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; size_t error <S2SV_ModEnd>, atomic ; <S2SV_ModStart> ; int error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { total_len = chars ; buf -> len = 0 ; } if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = 0 ; break ; } ret += chars ; buf -> ops = NULL ; ops -> release ( pipe, buf ) ; } if (! ret ) ret = ret ; ret += chars ; buf -> len -= chars ;",0
1377,<S2SV_ModStart> MaxGIFBits ) GIFOutputCode <S2SV_ModEnd> ( code ) <S2SV_ModStart> ( code ) ; GIFOutputCode ( clear_code ) ; GIFOutputCode ( end_of_information_code ) ;,0
1378,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1379,<S2SV_ModStart> ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> res ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1380,"<S2SV_ModStart> size_t max_mem ; jas_strcpy ( argv [ 0 ], ""jas"" ) ; <S2SV_ModStart> 0 ] ; jas_strcpy ( argv [ 1 ], ""jas"" ) ; <S2SV_ModStart> break ; case OPT_MAXMEM : max_mem = strlen ( jas_optarg ) ; break ; case OPT_HELP : jas_setdbglevel ( 0 ) ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) jas_set_max_mem_usage ( max_mem ) ; # endif if ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strlen ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strlen ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = strlen ( jas_optarg ) ; break",0
1381,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> bdaddr <S2SV_blank> is <S2SV_blank> empty.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1382,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( i = 0 ; i < raw_height ; i ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if (,0
1383,<S2SV_ModStart> ( len < <S2SV_ModEnd> needed ) {,0
1384,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1385,"<S2SV_ModStart> vcpu_info ; struct kvm_kernel_irq_routing_entry * e ; struct kvm_kernel_irq_routing_table * irq_rt ; int ret ; if ( guest_irq >= irq_rt -> nr_rt_entries ) return - EINVAL ; if ( host_irq >= irq_rt -> nr_rt_entries ) return - EINVAL ; if ( guest_irq >= irq_rt -> nr_rt_entries ) return - EINVAL ; if ( guest_irq >= irq_rt -> nr_rt_entries ) return - EINVAL ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq",0
1386,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
1387,"<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == U64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur )",0
1388,<S2SV_ModStart> ; if ( IS_ERR_OR_NULL ( handle ) ) return NULL ; if (,0
1389,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType < 0 || orderInfo -> orderType >= MAX_ORDER_TYPE ) return - 1 ;,0
1390,<S2SV_ModStart> ; if ( new -> d_inode ) { err = - EBUSY ; goto out ; },0
1391,"<S2SV_ModStart> ; if ( n < 0 ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) sprev ) ; return - 1 ; }",0
1392,<S2SV_ModStart> int plane ; for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,0
1393,"<S2SV_ModStart> * skb ; size_t <S2SV_ModEnd> copied, error",0
1394,<S2SV_ModStart> = hash ; sr -> fd = fd ;,0
1395,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMMON * cm, MACROBLOCK * const x, MACROBLOCKD * const xd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart>, tile, xd, mi_row, mi_col, BLOCK_SIZE bsize ) { <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, tile, xd, mi_row, mi_col, bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; <S2SV_ModStart> ) ) { vpx_pick_inter_mode <S2SV_ModEnd> ( cpi,",0
1396,<S2SV_ModStart> ( csum ) { dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= ( NETIF_F_HW_CSUM | NETIF_F_FRAGLIST ) <S2SV_ModEnd> dev -> features,0
1397,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> ; if ( ( be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) ) return __this_address ; if (,0
1401,"<S2SV_ModStart> ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref",0
1402,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1405,"<S2SV_ModStart> res -> outputbuffer, ""</table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ; if ( strlen ( constr1 ) < 40 ) { return false ; } snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr1 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ;",0
1408,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; },0
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec, compat <S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ;",0
1410,"<S2SV_ModStart> ) ) ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; }",0
1411,"<S2SV_ModStart> -> bNumInterfaces ; if ( size2 < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, size2 ) ; nintf = USB_MAXINTERFACES ; }",0
1412,<S2SV_ModStart> ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS <S2SV_ModEnd> ) return - <S2SV_ModStart> - ENOMEM ; if ( info -> count > MAX_USER_CONTROLS ) return - ENOMEM ; if (,0
1413,"<S2SV_ModStart> ) { exit_client <S2SV_ModEnd> ( client_p, <S2SV_ModStart> client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } <S2SV_ModEnd> saslserv_p = find_named_client",0
1414,<S2SV_ModStart> ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> ~ IFF_XMIT_DST_RELEASE ; dev -> priv_flags |= IFF_TX_SKB_SHARING ;,0
1417,"<S2SV_ModStart> 16 ) ; if ( xd -> mode_info_context -> mbmi. mode == DC_PRED ) { vp8_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16 ) ; } else { distortion = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, ""%s"", format ) ; va_end ( argptr ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; }",0
1420,<S2SV_ModStart> ; if ( unconditional ( e <S2SV_ModEnd> ) ) ||,0
1421,<S2SV_ModStart> else { if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv,0
1422,"<S2SV_ModStart> ( vmcs12, CPU_BASED_RDTSC_EXITING <S2SV_ModEnd> ) ; case",0
1423,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> disable_split_mask = DISABLE_ALL_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V,0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < 0 ) return NF_DROP ; <S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ;",0
1425,"<S2SV_ModStart> struct compat_timex ) ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1426,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1427,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ;",0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart>, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; if ( quote < 0 ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> invalid <S2SV_blank> quote"" ) ; return NULL ; } <S2SV_ModStart> ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> invalid <S2SV_blank> quote"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } else { Py_DECREF ( type ) ; Py_DECREF ( tback ) ; } Py_DECREF ( type ) ; Py_DECREF ( tback ) ; <S2SV_ModStart> ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_",0
1430,"<S2SV_ModStart> ; int is_keyframe_qaunt_set <S2SV_ModEnd> ; vpx_codec_err_t res <S2SV_ModStart> ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) {",0
1431,"<S2SV_ModStart> context ) ; if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return ret ; if ( mask & KADM5_TL_DATA ) { tl_data_orig =",0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; int h = inlink -> h ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int h = inlink -> h ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i",0
1433,"<S2SV_ModStart> ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. mb_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> ) ) { do_error <S2SV_ModEnd> ( dbh, <S2SV_ModStart> ) ) ; do_error <S2SV_ModEnd> ( dbh,",0
1437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) ||! size ) <S2SV_ModEnd> cleanup_rfc_slot ( slot,0
1438,<S2SV_ModStart> ; struct ieee_802_11_phdr <S2SV_ModEnd> phdr ; col_set_str,0
1439,<S2SV_ModStart> ; sh = s_malloc <S2SV_ModEnd> ( hdrlen +,0
1440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) { NSC_LOG ( ""nsc_encode_argb_to_aycocg: <S2SV_blank> Not <S2SV_blank> implemented <S2SV_blank> in <S2SV_blank> nsc <S2SV_blank> function <S2SV_blank> nsc_encode_argb_to_aycocg"" ) ; return FALSE ; }",0
1441,"<S2SV_ModStart> + 1 ; } offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; return offset ; } <S2SV_ModEnd> offset = dissect_spoolss_uint16uni <S2SV_ModStart> hf_keybuffer ) ; if ( offset < end_offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; return offset ; }",0
1442,<S2SV_ModStart> nr_parens ) return ERR_PTR <S2SV_ModEnd> ( - EINVAL <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { ret = - EINVAL ; goto out_free ; },0
1443,<S2SV_ModStart> { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> ) { target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart>. starting_buffer_level / 2 <S2SV_ModEnd> ) > INT_MAX <S2SV_ModStart> int ) ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart>. starting_buffer_level / 2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> { target = ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> frames_since_key / ( <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> / 2 ) ) <S2SV_ModEnd> ; } },0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; if ( svm -> arch. flags & KVM_GUEST_DB ) { update_db_bp_intercept ( vcpu ) ; } else { update_db_bp_intercept ( vcpu ) ; },0
1445,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",0
1446,"<S2SV_ModStart> struct hello6 * hellop ; if ( op -> ospf6_len < OSPF6HDR_LEN ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Priority <S2SV_blank> %u"", op -> ospf6_len ) ) ; return - 1 ; } ND_TCHECK ( hellop -> hello_options ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hellop -> hello_bdr",0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 ) return - ENOTSUPP ; if (,0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart>. task == NULL ) { mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; } else { mutex_unlock ( & rc -> uwbd. mutex ) ; }",0
1449,"<S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar",0
1450,<S2SV_ModStart> : idx ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { if ( gfx -> data. flags & JSGRAPH,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> mb. plane [ plane ] ; <S2SV_ModEnd> struct macroblockd_plane * <S2SV_ModStart> plane ] ; <S2SV_ModEnd> const PLANE_TYPE type <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const int seg_eob = get_tx",0
1452,<S2SV_ModStart> pSelect -> pSrc ; if ( p -> pTab == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &=,0
1454,"<S2SV_ModStart> ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVPluginElementNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
1459,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> = NULL ; const char * prop_name <S2SV_ModEnd> = ( const <S2SV_ModStart> -> name ; if ( strcmp ( xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; free ( path ) ; return ; } }",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1462,"<S2SV_ModStart> { int length ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; if (! s_check ( s ) ) return RD_FALSE <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE",0
1463,"<S2SV_ModStart> ; if (! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_STRING ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } if (! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1464,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if ( _y4m -> chroma_type == NULL ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; _y4m -> vpx_fmt |= VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if ( _y4m -> chroma_type == NULL ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; if ( strcmp ( _y4m -> chroma_type, ""4"" ) ) { fprintf ( stderr, ""Invalid <S2SV_blank> chroma <S2SV_blank> type.\\n"" ) ; return - 1 ; }",0
1465,"<S2SV_ModStart> ; { struct obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam <S2SV_ModEnd> ( buf,",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr",0
1467,"<S2SV_ModStart> struct rule * rule, struct rb_root * root <S2SV_ModStart> root ) ; if (! root ) err ( 1, NULL ) ; if (! env -> root ) err ( 1, NULL ) ;",0
1468,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; vpx_enable_segmentation ( seg ) ; vpx_set_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vpx_clearall_segfeatures ( seg ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vpx_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_set_seg",0
1469,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; <S2SV_ModStart> 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type, Return_fields, 1 ) ; if (! Return_",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> ; } write ( <S2SV_ModEnd> logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea""",0
1471,<S2SV_ModStart> += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 4 ; } break ; case <S2SV_ModStart> += 4 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 1 ; } break ; case <S2SV_ModStart> += 2 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 1 ; } break ;,0
1472,<S2SV_ModStart> ) ; } # else ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1473,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile!= NULL ) { mutex_enter ( & sr -> fid_ofile -> f_mutex ) ; smb_flush_file ( sr, sr -> fid_ofile ) ; mutex_exit ( & sr -> fid_ofile -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } else { flist = & sr -> tid_tree -> t_ofile_list ; smb_llist_enter ( flist, RW_READER ) ; file = smb_llist_head ( flist ) ; while ( file ) { mutex_enter ( & file -> f_mutex ) ; smb_flush_file ( sr, file ) ; mutex_exit ( & file -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } smb_llist_exit ( flist ) ;",0
1474,<S2SV_ModStart> ) ) { if ( WARN_ONCE ( sizeof ( visbuf ) > sizeof ( buf ) ) { wrerrno = 1 ; goto screwup ; },0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, <S2SV_ModEnd> * StartClean ; <S2SV_ModStart> * StartClean ; <S2SV_ModEnd> double * argbuf <S2SV_ModStart> ; outpos = outputbuffer <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( out",0
1476,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 ip_idents_hashrnd __read_mostly <S2SV_ModStart> ip_idents_hashrnd ) ) ; if ( segs < IP_SEGS_PER_HDR ) { pr_err ( ""ip_select_ident: <S2SV_blank> segs <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range <S2SV_blank> (%d), <S2SV_blank> segs <S2SV_blank> %d)"", segs, IP_SEGS_PER_HDR ) ; return ; } <S2SV_ModStart> ip_idents_hashrnd ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1477,"<S2SV_ModStart> expr_ty step ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper ) ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims ) ) {",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1479,<S2SV_ModStart> = gecos ; <S2SV_ModEnd> printf ( _,0
1480,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) get_unaligned_le64 ( & radiotap_header -> it_version ) ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = max_length ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _arg += sizeof ( uint8_t ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof (,0
1481,"<S2SV_ModStart> int err ; struct tc_cls_u32_key * key ; <S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; return - EOPNOTSUPP ; } <S2SV_ModStart>! match ) { kfree ( match ) ; <S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; list_add ( <S2SV_ModStart> ) ; goto err_delete <S2SV_ModEnd> ; } <S2SV_null>",0
1482,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr,",0
1483,"<S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> statistics <S2SV_blank> store"" ) ; if ( stream -> config. cfg. g_pass!= VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } <S2SV_ModEnd> stream -> cx_time <S2SV_ModStart> = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1484,"<S2SV_ModStart> ( g_str_has_prefix ( new_data, "".service"" ) && g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, ""dbus"" ) &&! g_str_has_prefix ( new_data, "".data"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, "".dbus"" ) &&! g_str_has_prefix ( new_data, ""dbus"" ) &&! g_str_has_prefix ( new_data, "".data"" ) &&! g_str_has_prefix ( new",0
1485,"<S2SV_ModStart> { VP9_COMMON * const cm <S2SV_ModEnd> = & pbi <S2SV_ModStart> pbi -> common ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++",0
1486,"<S2SV_ModStart> VP9D_CONFIG * oxcf, VP9_COMMON * * common <S2SV_ModEnd> ) { VP9Decoder <S2SV_ModStart> VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * * const cm = common? & common -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi ->",0
1487,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1489,<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( opt == NULL || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
1490,"<S2SV_ModStart> * tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } }",0
1491,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> ( img ) { <S2SV_ModEnd> pick_quickcompress_mode ( ctx <S2SV_ModStart> } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_UPD_ARF ) upd ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_",0
1492,"<S2SV_ModStart> wqh ) ; if ( isalarm ( ctx ) ) alarm_init ( & ctx -> t. alarm, ctx -> clockid == CLOCK_REALTIME_ALARM? ALARM_REALTIME : ALARM_BOOTTIME, timerfd_alarmproc ) ; else hrtimer_init ( & ctx -> t. tmr, ctx -> clockid, HRTIMER_MODE_ABS ) ;",0
1493,"<S2SV_ModStart> mount * child <S2SV_ModEnd> ; struct hlist_node <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; commit_tree ( child, q ) ; } unlock_mount_hash ( ) ; <S2SV_ModEnd> return 0 ;",0
1494,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } <S2SV_ModStart>, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; }",0
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth *,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> ) { Huff_transmit <S2SV_ModEnd> ( huff, <S2SV_ModStart> } else { Huff_transmit <S2SV_ModEnd> ( huff,",0
1499,"<S2SV_ModStart> void encode_superblock ( VP9_COMMON * cm, MACROBLOCK * x, MACROBLOCKD * xd, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> x = & xd <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mi_width <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ bsize ] <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> ; ctx -> is_coded =! x -> select_txfm_size && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) ; if",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> struct crypto_skcipher * <S2SV_ModStart> crypto_skcipher * tfm_des <S2SV_ModEnd> ; struct scatterlist <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> tfm_des = crypto_alloc_skcipher <S2SV_ModStart> tfm_des ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModEnd> req = skcipher_request_alloc <S2SV_ModStart> tfm_des ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } rc = crypto_skcipher_setkey ( tfm_des, key, 8 ) ; crypto_skcipher_setkey ( tfm_des, key2, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; skcipher_request_set_crypt ( req, & sgin, & sgout, 8, NULL ) ; rc = crypto_skcipher_",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1502,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { position = get_bits_count ( gbc ) ; zeroes = i = 0 ; if ( ctx -> bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return",0
1503,<S2SV_ModStart> delta ; else { if ( i > pos && i + insn -> off + 1 < pos ) { <S2SV_ModStart> += delta ; } else { if ( i > pos && i + insn -> off + 1 < pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) {,0
1504,<S2SV_ModStart> ) ) { if ( kvm_vcpu_get_cpl ( vcpu ) -> flags & KVM_GUEST ) return 0 ;,0
1505,"<S2SV_ModStart> { } else if ( isalpha ( c ) || <S2SV_ModStart> { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalpha ( c",0
1506,"<S2SV_ModStart> = 0, packet -> http_content_length. ptr = NULL, packet -> http_content_length. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) { path_put ( & nd -> path ) ; <S2SV_ModStart> = LAST_BIND ; },0
1508,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) ; assert ( ( int ) floor ( pow ( ( float ) r + 1, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) > entries ) ; assert ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) ; assert ( r <= entries ) ; <S2SV_ModEnd> return r ;",0
1509,"<S2SV_ModStart> += 4 ) { if ( dds_info -> width < x || dds_info -> height < y ) return MagickFalse ; <S2SV_ModStart> y ), <S2SV_ModEnd> exception ) ;",0
1510,<S2SV_ModStart> { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1512,"<S2SV_ModStart> ) { int <S2SV_ModEnd> i ; memset <S2SV_ModStart> ; } } memset ( cfg, 0, sizeof ( cfg_t ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg -> authpending_file ) ) ; memset ( cfg -> origin, 0, sizeof ( cfg -> origin ) ) ; memset ( cfg -> prompt, 0, sizeof ( cfg -> prompt ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg -> authpending_file ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg_t ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg -> authpending_file ) ) ; memset ( cfg -> origin, 0, sizeof ( cfg -> origin ) ) ; memset ( cfg -> prompt, 0, sizeof ( cfg -> prompt ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg -> authpending_file ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg -> authpending_file ) ) ; memset ( cfg -> authpending_file, 0, sizeof ( cfg -> authpending_file ) ) ;",0
1513,"<S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; <S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; <S2SV_ModStart> ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ;",0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; send <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1515,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
1516,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) && ( cpi -> oxcf. flags & VP,0
1517,"<S2SV_ModStart> pvc ) ; dev = alloc_netdev ( <S2SV_ModEnd> 0, ""pvceth%d"" <S2SV_ModStart> ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,<S2SV_ModStart> * data ; if (! s_check_rem ( s ) ) { abort ( ) ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s ) ) { abort ( ) ; },0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpxmt_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,<S2SV_ModStart> next ) { if ( c_rows >= rows ) break ; <S2SV_ModStart> ; if ( c_rows >= rows ) break ; if ( c_rows >= rows ) break ; if ( c_rows >= rows ) break ;,0
1521,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxBlock -> xBlockSize = xWantedSize ; pxBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pv,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return 0 ; } <S2SV_ModEnd> _TIFFmemcpy ( tmp <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return 1 ; } <S2SV_ModEnd> _TIFFmemcpy ( tmp <S2SV_ModStart> (! tmp ) { TIFFErrorExt ( tif -> tif_dir. td_file, ""MemoryAllocationFailed"" ) ; return 1 ; }",0
1525,<S2SV_ModStart> STREAM s ) { assert ( s. length >= 2 ) ; assert ( s. length <= 4 ) ; <S2SV_ModStart> int i ; assert ( s. length >= 4 ) ; <S2SV_ModStart> ++ ) { assert ( s. length >= 4 ) ; assert ( s. length <= 4 ) ; <S2SV_ModStart> ) ) { assert ( s. length >= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 8 ) ; assert ( s. length >= 4 ) ; assert ( s. length >= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 8 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length >= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length >= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s. length <= 4 ) ; assert ( s,0
1526,"<S2SV_ModStart> } else { if (! smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return MPR_ERR_BAD_SYNTAX ; } option = maGetNextArg ( sclone ( option ), & tok ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! smatch ( option, ""format"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Format <S2SV_blank> option <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
1528,<S2SV_ModStart> { } ; if (! is_valid_name ( name ) ) return - EINVAL,0
1529,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_state * state = d -> priv ; struct dvb_usb_device_data * data = d -> data ; struct dvb_usb_device_info * info = & adap -> data ; if ( dvb_usb_generic_rw ( d, data, 3, data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, data, 3, data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, data, 3, data, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ds3000_attach, & su3000_ds3000_config, & d -> dev -> i2",0
1530,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION )",0
1531,"<S2SV_ModStart>, int stride <S2SV_ModEnd>, int mv_row <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size,",0
1532,"<S2SV_ModStart> TRUE ; # if defined ( MICRO ) &&! defined ( NOCWD_ASSUMPTIONS ) if (! mungspaces ( origbuf ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( match_varname ( buf, ""OPTIONS"", 4 ) ) { bufp = find_optparam ( origbuf ) ; if (! bufp ) config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } else if ( match_varname ( buf, ""OPTIONS"", 4 ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } if ( match_varname ( buf, ""AUTOPICKUP_EXCEPTION"", 5 ) ) { add_autopickup_exception ( bufp ) ; } else if ( match_varname ( buf, ""AUTOCOMPLETE"", 5 ) ) { parseautocomplete ( bufp, TRUE ) ; } else if ( match_varname ( buf, ""MSGTYPE"", 7 ) )",0
1533,"<S2SV_ModStart> cJSON * cJSON_CreateFloatArray <S2SV_ModEnd> ( double * <S2SV_ModStart> < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } <S2SV_ModEnd> return a ;",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } <S2SV_ModEnd> if ( status",0
1535,"<S2SV_ModStart> float * w = get_window <S2SV_ModEnd> ( f,",0
1536,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads, num_workers <S2SV_ModEnd> ) ; TileWorker <S2SV_ModStart> worker = & pbi -> tile_workers [ i ] ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( sizeof ( TileWorkerData ) ) ) ; CHECK",0
1537,<S2SV_ModStart> 0x101 ; offset = base <S2SV_ModEnd> + get4 ( <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ; <S2SV_ModStart> ( ) ; if ( len < 4 ) break ;,0
1538,"<S2SV_ModStart> -> common ; VP9_COMMON * const rc = & cpi -> rc ; <S2SV_ModStart> -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; const int segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = ( cm -> y_dc_delta_q * Q_RATIO ( i ) ) ; if ( cpi -> refresh_alt_ref_frame ) { vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { qindex",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFIsTiled ( in ) ) { return ( NULL ) ; } <S2SV_ModStart> ; if (! TIFFIsTiled ( in ) ) { if (! TIFFIsTiled ( out ) ) { if (! TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ) tw = w ; if (! TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ) tl = l ; } else { if ( tw == tilewidth && tl == tilelength ) { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; if (! TIFFIsTiled ( out ) ) { if (! TIFFIsTiled ( out ) ) { if (! TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ) tw = w ; if (! TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ) tl = l ; } else { if ( tw == tilewidth && tl == tilelength ) { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; TIFFGetField ( in",0
1540,<S2SV_ModStart>. err_detail = error -> has_detail ; else ctx -> base. err_detail = NULL ;,0
1541,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS,",0
1542,"<S2SV_ModStart> ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" ) ;",0
1543,"<S2SV_ModStart> ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; memset ( ps_dec -> ps_cur_slice, 0, sizeof ( * ps_dec -> ps_cur_slice ) ) ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ;",0
1544,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { ret = - EPERM ; goto out_unlock ; },0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ) ;,0
1546,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> return df ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g ->",0
1548,<S2SV_ModStart> ; else return <S2SV_ModEnd> - EIO ;,0
1549,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ; if ( safe_memcmp <S2SV_ModEnd> ( buffer, <S2SV_ModStart> ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> return NULL ;",0
1550,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd> ; struct sockaddr_in <S2SV_ModStart> ; struct sockaddr_in <S2SV_ModEnd> addr ; int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = 0 ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = NULL ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ;,0
1551,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi,",0
1552,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_PAGE_FAULTS, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1,",0
1553,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], 2 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 27 ], 2 ) ; <S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", ( ( bp [ 27 ] & 0x07 ) ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp",0
1554,<S2SV_ModStart> case EXPR_NOT : if (! * set_rtrn ) * set_rtrn = true ; <S2SV_ModStart> case EXPR_UNARY_PLUS : if (! * set_rtrn ) * set_rtrn = false ;,0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
1557,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register MagickBooleanType <S2SV_ModStart>, length, <S2SV_ModEnd> padding, value <S2SV_ModStart>, length, <S2SV_ModEnd> value, version",0
1558,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ;",0
1559,<S2SV_ModStart> ) ) { case '\\0' : break ; case '\\1' : break ; case '\\2' : break ; case '\\3' : break ; case '\\4' : break ; case '\\5' : break ; case '\\6' : break ; case '\\7' : break ; case '\\8' : break ; case '\\9' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; case '\\0' : break ; default : break ; },0
1560,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 1 ) ; vpx_read_bit <S2SV_ModEnd> ( r )",0
1561,"<S2SV_ModStart> ; int is_valid ; giterr_clear ( ) ; is_valid = error!= GIT_ECERTIFICATE ; error = git_stream_certificate ( & cert, t -> io ) ; if ( error < 0 ) return error ; <S2SV_ModEnd> error = t",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> mode = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ; if ( <S2SV_ModEnd>! cm -> <S2SV_ModStart>! cm -> frame_parallel_decoding_mode ) ++ cm -> counts. <S2SV_ModEnd> comp_inter [ ctx",0
1564,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart>. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; stream -> config. cfg. g_lag_in_frames = 0 ; stream -> config. out_fn = NULL ; stream -> next = NULL ; return stream ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1565,"<S2SV_ModStart> nd_opt_mtu * opm ; if ( op -> nd_opt_type == ND_OPT_SOURCE_LINKADDR ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""source"" ), op -> nd_opt_type, op -> nd_opt_len ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""target"" ), op -> nd_opt_type, op -> nd_opt_len ) ) ; }",0
1566,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ;,0
1567,"<S2SV_ModStart> DICT_PATH_SHARED ) ; if ( key -> key -> key ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_expand ( iter -> conn -> dict, iter -> pool, path, & key -> value, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, path, & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_",0
1568,<S2SV_ModStart> return 0 ; if ( <S2SV_ModEnd> A > skb <S2SV_ModStart> A ] ; <S2SV_ModEnd> nla = nla_find_nested,0
1569,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</received>"" ""</forwarded>"" ""</message>""",0
1571,<S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len > SC_MAX_SERIALNR ) { return SC_ERROR_FILE_NOT_FOUND ; },0
1572,<S2SV_ModStart> = 0 ; if ( tok -> prompt == NULL ) { tok -> prompt = NULL ; } <S2SV_ModStart> = 0 ; if ( tok -> prompt == NULL ) { tok -> prompt = NULL ; },0
1573,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; }",0
1574,<S2SV_ModStart> r ] = '\\0' <S2SV_ModEnd> ; set_string (,0
1575,<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ; dpb -> numRefFrames = 0 ; dpb -> prevRefFrameNum = 0 ;,0
1576,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) OE_RAISE_,0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> final ; struct ipv6_txoptions <S2SV_ModEnd> * opt = <S2SV_ModStart> np ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt -> opt, sock_owned_by_user ( sk ) ) ; }",0
1580,"<S2SV_ModStart>, at ; size_t <S2SV_ModEnd> fsize ; uint32_t <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; int ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = NULL <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> ) = ( <S2SV_ModStart>, dsize, dll <S2SV_ModEnd> )",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000ReadReg ( DM9000_EPDRH ) ; dm9000ReadReg ( DM9000_EPDRL ) ; dm9000ReadReg ( DM",0
1582,"<S2SV_ModStart> = 0 ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> = 0 ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; }",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * cred ; <S2SV_ModStart> rcu_read_lock ( ) ; cred = __task_cred ( child ) ; __ptrace_link <S2SV_ModEnd> ( child, <S2SV_ModStart> new_parent, cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,"<S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib,",0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> } ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> ] ; int new_mv_mode_penalty = 256 <S2SV_ModEnd> ; int step_param <S2SV_ModStart> bsize ] ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; <S2SV_ModStart> bsize ] ; new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, &",0
1587,"<S2SV_ModStart> ntreg_header ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1588,"<S2SV_ModStart> ) ) ; if ( merged -> is_enabled!= ( parent -> is_enabled!= ( child -> is_enabled!= ( parent -> is_enabled!= ( child -> is_enabled!= ( child -> is_enabled!= ( child -> is_enabled!= ( BOOL ) ) ) ) ) ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Parent <S2SV_blank> directory <S2SV_blank> config <S2SV_blank> is <S2SV_blank> not <S2SV_blank> enabled"" ) ; return NULL ; }",0
1589,"<S2SV_ModStart> ctl_len ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ;",0
1590,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, number_planes_filled ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = number_planes_filled ; number_planes_filled = number_planes_filled ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes = number_planes_filled ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; number_planes_filled = number_planes_filled ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )",0
1592,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1593,<S2SV_ModStart> user_data ) { <S2SV_ModEnd> cib_client_t * client <S2SV_ModStart> num_clients ) ; g_object_unref <S2SV_ModEnd> ( client ) <S2SV_ModStart> user ) ; g_object_unref <S2SV_ModEnd> ( client ) <S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( client ) <S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( client ),0
1594,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) { lua_assert (! iswhite ( thread ) ) ; markvalue ( g, uv -> v ) ; } else { work ++ ; } <S2SV_ModEnd> } } <S2SV_null>",0
