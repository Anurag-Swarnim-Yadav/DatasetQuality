,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } <S2SV_ModEnd> nonce1 = json_object_get <S2SV_ModStart> ""nonce1"" ) ; if ( n2size < 0 ) { applog ( LOG_INFO, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } if ( n2size < 0 ) { applog ( LOG_INFO, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 2 ) ), * ( tptr + 2 ) ) ; return ; } <S2SV_ModStart> 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ) ; ND_TCHECK2 ( * tptr, len ) ; if ( type <= 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ), * ( tptr + 4 ) ) ; return ; } ND_TCHECK2 ( * tptr, len ) ; ND_TCHECK2 ( * tptr, len ) ;",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> SIOCYAMSMCS : if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) { kfree ( ym ) ; return - ENOBUFS ; } if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( ( ym = kmalloc ( sizeof ( struct yamdrv_ioctl_mcs ), GFP_KERNEL ) ) == NULL ) return - ENOBUFS ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_mcs ) ) ) return - EFAULT ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_mcs )",0
4,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < frag_hdr_sz ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
5,"<S2SV_ModStart> { int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; } else { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else { time = avio_rb32 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; size_t <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> - EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM ) ; tpg -> tport_tpgt = tpgt ; ret = core_tpg_register ( & vhost_scsi_fabric_configfs -> tf_ops, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { kfree ( tpg ) ; return NULL ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, &",0
7,"<S2SV_ModStart> ) ) { GF_Box * stco = ( GF_Box * ) gf_list_get ( writers, 0 ) ; GF_Box * stsc = ( GF_Box * ) gf_list_get ( writers, 1 ) ; gf_isom_box_del ( stco ) ; gf_isom_box_del ( stsc",0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> u32 data ; <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_PV_EOI_PENDING, & vcpu -> arch. apic_attention ) ) apic_sync_pv_eoi_from_guest ( vcpu, vcpu -> arch. apic ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic ) ; apic_set_tpr ( vcpu -> arch. apic, data & 0xff ) ; }",0
9,<S2SV_ModStart> src ) ; <S2SV_ModEnd> clear_task_ebb ( dst,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> array -> child <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; <S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; }",0
12,"<S2SV_ModStart> = NEXTHDR_FRAGMENT ; memset ( fptr, NEXTHDR_FRAGMENT, unfrag_len ) ;",0
13,"<S2SV_ModStart> u32 event_id, u64 <S2SV_ModEnd> nr, int <S2SV_ModStart>, event_id, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { if ( fileblock < grub_le_to_cpu32 ( inode -> blocks. dir_blocks ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ) ; if ( fileblock >= grub_le_to_cpu16 ( leaf -> entries ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> * out ) <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 13 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; s0 = input [ 0 ] + input [ 7 ] ; s1 = input [ 1 ] + input [ 6 ] ; s2 = input [ 2 ] + input [",0
16,<S2SV_ModStart> env ) ; kfree ( env -> insn_aux_data ) ;,0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; } } # else if ( ( config -> flags & CONFIG_HYBRID_FLAG ) { strcpy ( wpc -> error_message, ""hybrid <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> available <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( ~ CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> flags &= ( ~ CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> flags &= ( ~ CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = 0",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, & sshdr, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there",0
19,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cm -> lf <S2SV_ModEnd> ; const int <S2SV_ModStart> = get_max_filter_level ( <S2SV_ModEnd> cpi ) ; <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_err <S2SV_ModStart> ; if ( <S2SV_ModEnd> cm -> tx_mode <S2SV_ModStart> ONLY_4X4 ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cm -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max,0
21,"<S2SV_ModStart> left ; luaL_checkinteger <S2SV_ModEnd> ( L, <S2SV_ModStart> offset ) ; luaL_checkinteger <S2SV_ModEnd> ( L,",0
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> i ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart>. rng_make_random? <S2SV_ModEnd> ralg -> cra_rng,0
24,"<S2SV_ModStart> ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) || lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) || lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) || lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr. s_addr. s_addr ) || lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> ; char * cmdname <S2SV_ModEnd> ; int verbose <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv <S2SV_ModEnd>, opts ) <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { if ( id == OPT_INFILE ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 )",0
27,"<S2SV_ModStart> int esr ) { if ( reason >= ARRAY_SIZE ( handler ) ) { pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"", handler [ reason ], esr ) ; die ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", regs, 0 ) ; } <S2SV_ModEnd> local_irq_disable ( )",0
28,"<S2SV_ModStart> ; ND_PRINT ( ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ( l2tp_cc_",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = interface_to_usbdev ( intf ) ; struct usb_host_interface * intf2 = interface_to_usb_interface ( intf ) ; struct usb_host_interface * intf1 = interface_to_usb_interface ( intf ) ; int <S2SV_ModEnd> alt = uas_find_uas_alt_setting <S2SV_ModStart> intf ) ; if (! intf1 ) return - ENODEV ; alt = intf1 -> desc. bNumInterfaces <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> bInterfaceNumber, alt1 ) <S2SV_ModEnd> ; } <S2SV_null>",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart>, int fromlen, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * from, int fromlen, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * to ) { int elen = 0 <S2SV_ModEnd> ; struct pathComponent <S2SV_ModStart> case 2 : memcpy ( p, ""../"", 3 ) ; p += 3 ; break ; case 3 : memcpy ( p, ""../"", 2 ) ; p += 2 ; break ; case 4 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 5 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 6 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; } elen += sizeof ( struct pathComponent ) + pc -> length",0
31,"<S2SV_ModStart> 0 ) { if ( server. port < 0 || server. port > 65535 ) { err = ""Invalid <S2SV_blank> port"" ; goto loaderr ; } } else if (! strcasecmp ( argv [ 0 ], ""keepalive"" ) && argc == 2 ) { if ( ( server. keepalive = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( ( server. protected_mode = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( ( server. keepalive = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } } else if ( ( server. protected_mode = nonotoi ( argv [ 1 ] ) ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ;",0
32,<S2SV_ModStart> connection_id ) ; <S2SV_ModEnd> spin_lock_irqsave ( &,0
33,"<S2SV_ModStart> ; result = lego_usb_get_version ( udev, & get_version_reply ) ; if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } result = lego_usb_get_version ( udev, & get_version_reply ) ; if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto error ; }",0
34,"<S2SV_ModStart> 0 ) ; if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\",0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct key * construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> * authkey ; key_get ( dest_keyring ) ; <S2SV_ModStart> authkey ) ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else <S2SV_ModEnd> { switch ( <S2SV_ModStart> break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_THREAD_KEYRING : <S2SV_ModStart> case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user -> uid_keyring ) ; if ( dest_keyring ) dest_keyring = key_get ( cred -> user,0
36,"<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_mech_set ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_der_mech_set ( sc -> der_mechTypes, & sc -> DER_mechTypes ) < 0 ) goto cleanup ; ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_der_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes )",0
37,"<S2SV_ModStart> ; int chk_addr_ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ) ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( inet -> inet_state!= TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) goto out ; chk_addr_ret = inet_addr_type ( net, addr -> l2tp_addr. s_addr ) ; ret = - EADDRNOTAVAIL ; if ( chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST || chk_addr_ret == RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = addr -> l2tp_addr. s_addr ; if ( chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST",0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> { unsigned int <S2SV_ModEnd> max = ( <S2SV_ModStart> ) << PAGE_SHIFT <S2SV_ModEnd> ; return max,0
39,"<S2SV_ModStart> ), _ ( ""Launch <S2SV_blank> anyway"" <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" <S2SV_ModEnd> ), RESPONSE_MARK_TRUSTED <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL",0
40,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> length ) ; MD5Init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; }",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adapter <S2SV_ModEnd> ) { u8 <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, obuf, 1, ibuf, 1, 0 <S2SV_ModEnd> ) < 0 <S2SV_ModStart> err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, & d -> <S2SV_ModEnd> i2c_adap ) ; <S2SV_ModStart> dvb_attach ( ts2020_attach, d -> fe_adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> dvb_attach ( ts2020_attach, d -> fe_adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> dvb_attach ( ts2020_attach, d -> fe_adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> dvb_attach ( ts2020_attach, d -> fe_adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> dvb_attach ( ts",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> net = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> ; out_unlock : <S2SV_ModEnd> sctp_transport_put ( transport",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%llu\'",0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein < 1 || scanlinesizeout < 1 ) { TIFFError ( TIFFFileName ( in ), ""MemoryAllocationFailed"" ) ; goto bad ; }",0
47,<S2SV_ModStart> ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; mutex_lock <S2SV_ModEnd> ( & hugetlb_lock <S2SV_ModStart> hugetlb_lock ) ; mutex_unlock <S2SV_ModEnd> ( & hugetlb_lock <S2SV_ModStart> hugetlb_lock ) ; mutex_unlock <S2SV_ModEnd> ( & hugetlb_lock,0
48,"<S2SV_ModStart> ; if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> ; if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & reply, ""su"", ( uint32_t ) uid ) ; if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> generic_pipe_buf_get ( struct <S2SV_ModStart> buf ) { return <S2SV_ModEnd> get_page ( buf <S2SV_ModStart> page ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
51,"<S2SV_ModStart> ep2 ) ; if (! idstr ) { ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, ikev2_t_type_map [ t. t_type ] ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, ikev2_t_type_map [ t. t_type ], ikev2_t_type_map [ t. t_type ] ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, ikev2_t_type_map [ t. t_type ] ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, ikev2_t_type_map [ t. t_type ] ) ) ) ; }",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode,",0
53,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & read_fds, TEMP_FAILURE_RETRY, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY, <S2SV_ModStart> reader -> bytes_available_fd, TEMP_FAILURE_RETRY",0
54,"<S2SV_ModStart> wp -> config -> pm_max_requests ; if ( 0 > <S2SV_ModStart> wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> int trans_to_still = <S2SV_ModStart> ; if ( <S2SV_ModEnd> frame_interval > MIN_GF_INTERVAL <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> > MIN_GF_INTERVAL && last_decay_rate < 0.9 <S2SV_ModEnd> ) { int <S2SV_ModStart> int j ; FIRSTPASS_STATS tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; } <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> ) ; } <S2SV_ModEnd> return trans_to_still ;",0
56,<S2SV_ModStart> 0 ; } spin_lock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; <S2SV_ModStart> h_transaction ) { spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; <S2SV_ModStart> return err ; } <S2SV_ModEnd> sb = handle <S2SV_ModStart> handle ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; err = handle -> h_err ; spin_lock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; handle -> h_err = 0 ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ; handle -> h_err = 0 ; spin_unlock_bh ( & EXT4_SB ( sb ) -> s_journal_lock ) ;,0
57,"<S2SV_ModStart> return ret ; if ( unlikely ( offset + size > i_size_read ( inode ) ) ) { ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } ret = ext4_set_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> name_rmt ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans,",0
59,<S2SV_ModStart> alg ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_,0
60,"<S2SV_ModStart> 2 ) { switch ( stlv_type ) { case ISIS_SUBTLV_SPB_INSTANCE : ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_TCHECK2 ( * tptr, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> CIST <S2SV_blank> Root-ID: <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT_32BITS ( tptr ) ) ) ; tptr = tptr + 4 ; ND_PRINT ( ( ndo, "" <S2SV_blank> %08x"", EXTRACT",0
61,"<S2SV_ModStart> job_data_size_limit ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,"<S2SV_ModStart> ) opt ; ND_TCHECK_32BITS ( mpc -> flags ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( mpc -> sender_key ) ; if ( opt_len == 12 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) N",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options <S2SV_ModStart> int fd ; uid_t <S2SV_ModEnd> new_uid ; gid_t <S2SV_ModStart> 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 )",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> pkt -> msg <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> len = ptr <S2SV_ModStart> + 1 ; if ( len < 1 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; }",0
66,<S2SV_ModStart> ; if ( <S2SV_ModEnd> header -> biSize <S2SV_ModStart> header -> biSize >= 12U ) { header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biBitCount = ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 16 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 24 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc,0
67,<S2SV_ModStart> NULL ; } sas_put_device ( dev ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { if ( bd -> bd_disk -> queue ) return scsi_cmd_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; return scsi_verify_blk_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
73,"<S2SV_ModStart> ; int req_len <S2SV_ModEnd> ; struct qeth_arp_query_info <S2SV_ModStart> int ) ) ) { kfree ( ureq ) ; return - EFAULT ; } <S2SV_ModEnd> ureq = memdup_user <S2SV_ModStart> ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata_offset = qinfo. udata_len ; iob = qeth_get_adapter_cmd ( card, IPA_SETADP_SET_SNMP_CONTROL, QETH_SNMP_SETADP_CMDLENGTH + req_len ) ; cmd = ( struct qeth_ipa_cmd * ) ( iob -> data + IPA_PDU_",0
74,<S2SV_ModStart> c ) { jas_t <S2SV_ModEnd> m ; for,0
75,"<S2SV_ModStart> ; den = avio_read_num ( pb ) ; if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } if ( den!= 1 ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", den ) ; return AVERROR_PATCHWELCOME ; }",0
76,"<S2SV_ModStart> ; if ( j >= mxf -> metadata_sets_count ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_umid"", material_package -> umid ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_umid"", material_package -> umid ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_umid"", material_package -> umid ) ; if ( j >= mxf -> metadata_sets_count ) { mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_umid"", material_package -> umid ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { mxf_add_umid_metadata ( & mxf -> fc",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = snprintf ( path, sizeof ( path ), ""%s/%s"", rootfs, mntent -> mnt_dir ) ; if ( ret < sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < sizeof ( path ) ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> long"" ) ; return - 1 ; }",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len!= 4 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; } <S2SV_ModStart> tlv_len ) ; if ( jnx_ext_len!= 4 ) { ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", tlv2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; return 0 ; }",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,"<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_entry * entry ; <S2SV_ModStart> rta ) ; entry = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! entry ) return - ENOMEM ; <S2SV_ModStart> ; p = kmemdup ( entry, xfrm_replay_state_esn_len ( entry ), GFP_KERNEL ) ; <S2SV_ModStart> - ENOMEM ; pp = kmemdup ( entry, xfrm_replay_state_esn_len ( entry ), GFP_KERNEL ) ; if (! pp ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
82,"<S2SV_ModStart> - ENODEV ; for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME )",0
83,<S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ) <S2SV_ModStart> : { result = <S2SV_ModEnd> ( MagickRealType ),0
84,"<S2SV_ModStart> ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_bin ( bdstr, ""DeviceType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""DeviceType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""DeviceType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""DeviceType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""DeviceType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""DeviceType"", ( int ) key_type ) ; ret &= btif_config_flush ( ) ;",0
85,"<S2SV_ModStart> QMFB_SPLITBUFSIZE ) { jas_verify2 ( bufsize, sizeof ( jpc_fix_t ), & splitbuf ) ; abort ( ) ; } if ( numrows < 2 ) { jas_verify2 ( bufsize, sizeof ( jpc_fix_t ), & splitbuf ) ; abort ( ) ; } if ( numrows >= 3 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = buf ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; }",0
86,<S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc ) { res = VPX_CODEC_INCAPABLE ; } else { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; },0
87,"<S2SV_ModStart>. size ) { netdev_dbg ( vif -> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; <S2SV_ModStart> XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; <S2SV_ModStart> ) { netdev_dbg ( vif -> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_type |= SKB_GSO_DODGY ; skb_shinfo ( skb ) -> gso_segs = 0 ;",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> void * data <S2SV_ModStart> char * last, <S2SV_ModEnd> struct bitmap * <S2SV_ModStart> { char * name = path_name ( path, last ) ; int bitmap_pos = bitmap_position ( object -> oid. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
89,<S2SV_ModStart> ; newparity = baud_to_parity ( opts. baud ) ; newbits = baud_to_bits ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newparity = baud_to_parity ( opts. baud ) ; if ( newparity > 0 ) newpar,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,"<S2SV_ModStart> type_flags ) { struct net * net = sock_net ( sk ) ; struct net * net = sock_net ( sk ) ; <S2SV_ModStart> - EINVAL ; } mutex_lock ( & fanout_mutex ) ; if ( list_empty ( & fanout_list ) ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_huge, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } else { atomic_long_set ( & po -> rollover -> num, 0 ) ; atomic_long_set ( & po -> rollover -> num_failed, 0 ) ; } mutex_lock ( & fanout_mutex ) ; match = NULL ; list_for_each_entry ( f, & fanout_list, list ) { if ( f -> id == id && read_pnet ( & f ->",0
92,"<S2SV_ModStart> ) ; memcpy <S2SV_ModEnd> ( newnp,",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModEnd>, frame_in,",0
95,"<S2SV_ModStart> ; if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_rows, imp_sth -> num_cols ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ; } enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return",0
99,"<S2SV_ModStart> ( flags == <S2SV_ModEnd> EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_ModStart> ; else ext4_set_inode_state ( inode <S2SV_ModEnd>, EXT4_STATE_DIO_UNWRITTEN ) <S2SV_ModStart> out ; } <S2SV_ModEnd> if ( flags <S2SV_ModStart> == EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ;",0
100,"<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } ND_TCHECK_16BITS ( p + 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> = <S2SV_blank> 6)"" ) ) ; return len ; } ND_TCHECK_16BITS ( p + 6 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo,",0
101,"<S2SV_ModStart> ) ) { if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { ret = -",0
102,"<S2SV_ModStart> low_var_thresh, int flag <S2SV_ModEnd> ) { double <S2SV_ModStart> +.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer, source -> u_stride, source -> u_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer, 8 * mbr * source -> uv",0
103,"<S2SV_ModStart> ) ) { if ( copy_to_user ( param, ptr, sizeof ( * ptr ) ) ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += length ; }",0
104,"<S2SV_ModStart> : if ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> cap_permitted = cap_intersect ( new -> cap_permitted, old -> cap_permitted ) ; } if (! issecure ( SECURE_NOROOT ) ) { ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return ret ; ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) return ret ; ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if (! issecure ( SECURE_NOROOT ) ) { ret = audit_log_bprm_fcaps ( bprm",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; error = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_socket_protocol_error ( s, ""HTTP/1.0"" ) ; r_protocol_error ( s, ""HTTP/1.0"" ) ;",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaY_parser ) ( L, p -> z, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
108,"<S2SV_ModStart> = 0 ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> err ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt. opt_csum = inet_opt -> opt. opt_csum = inet_opt -> opt. opt_csum",0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> && copy_from_user ( & opt -> opt. <S2SV_ModEnd> __data, data",0
110,"<S2SV_ModStart> ; dl = kmalloc_array ( size, GFP_KERNEL ) ; if (! dl ) return - ENOMEM ; di = dl -> dev_info ; spin_lock ( & rfcomm_dev_lock ) ; list_for_each_entry ( dev, & rfcomm_dev_list, list ) { if ( test_bit ( RFCOMM_TTY_RELEASED, & dev -> flags ) ) continue ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) -> flags = dev -> flags ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> channel = dev -> channel ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) -> state = dev -> dlc -> state ; ( di + n ) -> src = dev -> src ; ( di + n ) -> dst = dev -> dst ; ( di + n ) ->",0
111,<S2SV_ModStart> trunc : ND_PRINT (,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> ) tptr, u_int <S2SV_ModEnd> indent ) { <S2SV_ModStart> case RPKI_RTR_RESET_QUERY_PDU : ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_32BITS ( msg ) ) ) ; break ; case RPK",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; memset <S2SV_ModEnd> ( & facilities <S2SV_ModStart> (! rose_parse_facilities <S2SV_ModEnd> ( skb -> <S2SV_ModStart> + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_trans",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ; if ( new_value_alloced < 0 ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'value\' <S2SV_blank> to <S2SV_blank> non <S2SV_blank> zero <S2SV_blank> value"" ) ; } else if ( new_value_alloced < 0 ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'value\' <S2SV_blank> to <S2SV_blank> non <S2SV_blank> zero <S2SV_blank> value"" ) ; } else if ( new_value_alloced < 0 ) { errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'value\' <S2SV_blank> to <S2SV_blank> non <S2SV_blank> zero <S2SV_blank> value"" ) ; }",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ( item ) <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; } ret = o2nm_node_ip_tree_lookup ( node, & ipv4_addr, & p, & parent ) ; if ( ret ) return ret ; memcpy ( & node -> nd_ipv4_address, & ipv4_addr, sizeof ( ipv4_addr ) ) ; if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { rb_link_node ( & node -> nd_ip_node, parent, p ) ; rb_insert_color ( & node -> nd_ip_node, & cluster -> cl_node_ip_tree ) ; } write_unlock ( & cluster -> cl_nodes_lock",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : ND_PRINT ( ( ndo, ""[|isoclns]"" ) ) ; break ; case BSD_AFNUM_APPLETALK : atalk_print ( ndo, p, length ) ; break ; case BSD_AFNUM_IPX : ipx_print ( ndo, p, length ) ; break ; default : if ( ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_suppress_default_print ) ND_DEFAULTPRINT ( p, caplen ) ;",0
119,"<S2SV_ModStart> == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } for ( ; ; ) { if ( src [ 0 ] == '/' ) { src ++ ; continue ; } else if ( src [ 0 ] == '.' ) { if ( src [ 1 ] == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } }",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context <S2SV_ModEnd>, TPMI_ALG_HASH hashAlg <S2SV_ModStart> resultKey ) { UINT32 bitsSwizzled, i_Swizzled ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; j = 0 ; bufferList [ j ++ ] = ( TPM2B_DIGEST * ) &",0
121,"<S2SV_ModStart> size_t size ; if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, vstep, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream",0
122,<S2SV_ModStart> s ) { if ( s > UINT32_MAX / sizeof ( tdata_t ) ) { return ( malloc ( ( size_t ) ( UINT32_MAX / sizeof ( tdata_t ) ) ) ) ; },0
123,"<S2SV_ModStart> ; if ( copy > count ) { ret = - EINVAL ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } copy = sizeof ( cmd. cmd ) ; dest = & cmd. cmd ; src = & ucmd -> cmd ; break ; case QIB_CMD_SET_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_TID_UPDATE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & ucmd -> cmd. tid_info ; break ; case QIB_CMD_SET_PART_KEY : copy = sizeof ( cmd. cmd. part_key ) ; dest = & cmd. cmd. part_key ; src = & ucmd -> cmd. part_key ; break ; case QIB_",0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
125,"<S2SV_ModStart> peer ) get_net ( net, peer -> name ) ; spin_unlock_bh ( & net -> nsid_lock ) ;",0
126,"<S2SV_ModStart> ] = '\\0' ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } <S2SV_ModStart> ] = '\\0' ; if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_len + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used + n ) ; content_buf_len = content_buf_used + n ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_len + n ) ; content_buf_len = content_buf_len ; } if ( content_buf_used + n > content_buf_len ) { content_buf = realloc ( content_buf, content_buf_used +",0
127,<S2SV_ModStart> ; if (! ( POKE_START_LLDP_TLV ( LLDP_TLV_CHASSIS_ID ) && POKE_UINT8 ( c_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len,0
128,<S2SV_ModStart> &= ~ FLAG_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG_INDEFINITE_LENGTH <S2SV_ModEnd> ) || ( <S2SV_ModStart> &= ~ FLAG,0
129,"<S2SV_ModStart> ; if ( sk -> sk_protocol == IPPROTO_UDP ) { pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"", __func__, sk -> sk_protocol ) ; return - EINVAL ; } <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"" <S2SV_ModStart> ; if ( sk -> sk_protocol == IPPROTO_TCP ) { pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"", __func__, sk -> sk_protocol, sk -> sk_protocol ) ; if ( sk -> sk_protocol == IPPROTO_UDP ) { pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"", __func__, sk -> sk_protocol ) ; return - EINVAL ; } <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"" <S2SV_ModStart> ; if ( sk -> sk_protocol == IPPROTO_TCP ) { pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"", __func__, sk -> sk_protocol ) ; if ( sk -> sk_protocol == IPPROTO_UDP ) { pr_debug ( ""%s: <S2SV_blank> tcp:%p\\n"", __func__, sk -> sk_protocol",0
130,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModStart> gb ) { return mpeg4_decode_profile_level ( s, get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ) <S2SV_ModStart> 8 ) { return mpeg4_decode_profile_level ( s, get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ), get_bits ( gb, 4 ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; readw ( mpu -> dev -> MIDQ + JQS_wTail ) ; if ( readw ( mpu -> dev -> MIDQ + JQS_wHead )!= readw ( mpu -> dev -> MIDQ + JQS_wTail ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( mpu -> dev -> MIDQ + JQS_wSize ) ) writew ( 0, mpu -> dev -> MIDQ + JQS_wHead ) ; else writew ( wTmp, mpu -> dev -> MIDQ + JQS_w",0
132,<S2SV_ModStart> rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; result = - EINVAL ; },0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> win.postMessage( <S2SV_blank> message, <S2SV_blank> targetOrigin);\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> win.postMessage( <S2SV_blank> message, <S2SV_blank> targetOrigin);\\n""",0
136,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> int status ; <S2SV_ModEnd> struct kvec * <S2SV_ModStart> int status ; if ( <S2SV_ModEnd> decode_op_hdr ( xdr <S2SV_ModStart>, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
137,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 || unfrag_ip6hlen > INT_MAX / frag_hdr_sz > INT_MAX / frag_hdr_sz || unfrag_ip6hlen > INT_MAX / frag_hdr_sz || unfrag_ip6hlen > INT_MAX / frag_hdr_sz > INT_MAX / frag_hdr_sz || unfrag_ip6hlen > INT_MAX / frag_hdr_sz || unfrag_ip6hlen < 0 || unfrag_ip6hlen > INT_MAX / frag_hdr_sz > UINT_MAX / frag_hdr_sz || unfrag_ip6hlen > INT_MAX / frag_hdr_sz || unfrag_ip6hlen > INT_MAX / frag_hdr_sz || unfrag_ip6hlen > INT_MAX / frag_hdr_sz <S2SV_ModEnd> ) goto out,0
138,<S2SV_ModStart> while ( ( tmpName [ i ]!= 0 ) && ( i < to_read ) ) { i ++ ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read - 1 ) { ptr -> nameURN = tmpName ; ptr -> location = NULL ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < height ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j <",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } <S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } strncpy ( szFileName, sizeof ( szFileName ) - 5, pszFileName ) ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, "":"", & owner ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
146,"<S2SV_ModStart> struct eigrp_tlv_at_ext_t * eigrp_tlv_at_ext ; if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv",0
147,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) }",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart>. inodes ) * sizeof ( long long ) <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) * sizeof ( long long ) <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
149,"<S2SV_ModStart> ) ; } sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp,",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= <S2SV_ModEnd> EXT4_GET_BLOCKS_PRE_IO ; return,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else { return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; }",0
152,"<S2SV_ModStart> ) ) ; dst = ip6_dst_lookup_flow ( sk, & fl6 ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; return PTR_ERR ( dst ) ; } dst = ip6_dst_lookup_flow ( sk, & fl6, final_p ) ; if ( IS_ERR ( dst ) ) { sk -> sk_route_caps = 0 ; sk -> sk_err_soft = - PTR_ERR ( dst ) ; }",0
153,"<S2SV_ModStart> = 0.0 ; if (! TIFFGetField ( in, TIFFTAG_NSTRIPS, & nstrips ) ) TIFFError ( ""loadImage"", ""No <S2SV_blank> strips <S2SV_blank> in <S2SV_blank> image <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_NTILES, & ntiles ) ) TIFFError ( ""loadImage"", ""No <S2SV_blank> tiles <S2SV_blank> in <S2SV_blank> image <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & buffsize ) ) TIFFError ( ""loadImage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> image <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> image <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage"", ""No <S2SV_blank> scanlines <S2SV_blank> in <S2SV_blank> image <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_SCANLINESIZE, & tlsize ) ) TIFFError ( ""loadimage""",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP10_ENCODER if ( strcmp ( global -> codec -> name, ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp11"" ) == 0 ) { ctrl_args = vp11_args ; ctrl_args_map = vp11_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp12"" ) == 0 ) { ctrl_args = vp12_args ; ctrl_args_map = vp12_arg_ctrl_map ; # endif } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match (",0
155,"<S2SV_ModStart> r = sshbuf_get ( resp, sizeof ( * resp ) ) ; if ( r!= sizeof ( * resp ) ) fatal ( ""%s: <S2SV_blank> sshbuf_put_u32: <S2SV_blank> %s"", __func__, r ) ;",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> ; if ( unlikely (! ( flags & EXT4_MB_HINT_TRY_GOAL ) ) ) { flags |= EXT4_MB_HINT_TRY_GOAL ; goal = ext4_idx_pblock ( EXT_FIRST_INDEX ( EXT_inode_hdr ( inode ) ) ) ; } <S2SV_ModStart> out ; } neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh ) ; ext4_extent_block_csum_set ( inode, neh ) ;",0
160,"<S2SV_ModStart> } if ( preverify_ok &&! c -> opt -> option. no_verify ) { s_log ( LOG_INFO, ""Certificate <S2SV_blank> verification <S2SV_blank> disabled"" ) ; return 1 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart>. client ||! c -> opt -> protocol ||! c -> opt -> redirect_addr. names ||! c -> opt -> redirect_addr. names ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart>. redirect_addr. names ||! c -> opt -> redirect_addr. names ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> if ( c <S2SV_ModStart>. protocol ||! c -> opt -> redirect_addr. names ||! c -> opt -> redirect_addr. names ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 1 ;",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if ( fixed_length < AT91_AES_BLOCK_SIZE_BYTE || fixed_length > AT91_AES_BLOCK_SIZE_MAX ) { rc = - 1 ; goto exit ; } if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cmac ( data_length, data, computed_cmac, key_size, cmac_key, AT91_AES_BLOCK_SIZE_BYTE ) ) { rc = - 1 ; goto exit ; } if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; rc = 0 ;",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> reduction_factor ) { if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( c -> nreslevels2decode > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
164,"<S2SV_ModStart> CVAR_CHEAT ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_ModStart> CVAR_LATCH ) ; s_alDriver = Cvar_Get ( ""s_alDriver"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; if (! s_",0
165,"<S2SV_ModStart> ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> ) )!= 32 ) ; BUILD_BUG_ON ( TPACKET_ALIGN ( sizeof ( * h. h1 ) )!= 48 ) ; BUILD_BUG_ON ( TPACKET_ALIGN ( sizeof ( * h. h2 ) )!= 32 ) ; BUILD_BUG_ON ( TPACKET_ALIGN ( sizeof ( * h. h3 ) )!= 48 ) ; if ( dev -> header_ops ) { if ( skb -> pkt_type!= PACKET_OUTGOING ) { skb_pull ( skb, skb_network_offset ( skb ) ) ; status |= TP_STATUS_CSUMNOTREADY ; } else if ( skb -> pkt_type == PACKET_OUTGOING && ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) ) status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> pkt_type == PACKET_OUTGOING ) { skb_pull ( skb, skb_network_offset ( skb ) ) ;",0
166,"<S2SV_ModStart> ; } list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_add_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } list_for_each_entry ( pos, temp, & new -> peer. transport_addr_list, transports ) { sctp_tsnmap_init ( & trans -> tsn_map, SCTP_TSN_MAP_INITIAL, trans -> i. initial_tsn, GFP_ATOMIC ) ; sctp_ssnmap_clear ( asoc -> ssnmap ) ; sctp_ulpq_flush",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ; <S2SV_ModStart> return true ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
168,"<S2SV_ModStart> ( int procfd <S2SV_ModEnd>, int on_exec <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; const char <S2SV_ModStart> ( name, ""nop"" ) == 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( name, ""none"" ) == 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } if ( strcmp ( name, ""SELinux"" ) == 0 ) { int size ; command = malloc ( strlen ( lsm_label ) + strlen ( ""changeprofile <S2SV_blank> "" ) + 1 ) ; if (! command ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s",0
169,<S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ) ( ( OPJ_UINT64 ),0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> uint64_t bits_used = <S2SV_ModStart> # ifdef DISABLE_RC_LONG_TERM_MEM <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> # endif cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar ++ ; } else if ( charlen == 1 && t_iseq ( ptr, '*' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; curqlevel -> flag |= LQL",0
173,"<S2SV_ModStart> * header, <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = EXT4_GET_MB_CACHE ( inode ) ; struct mb2_cache * mb2_cache = <S2SV_ModEnd> EXT4_GET_MB_CACHE ( inode <S2SV_ModStart> ; again : mb2_cache_entry_delete_first ( ext4_mb_cache, mb2_cache -> s_bdev, hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_block, le32_to_cpu ( BHDR ( bh ) ->",0
174,<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth ->,0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left",0
177,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; }",0
178,"<S2SV_ModStart> if ( copy_from_user <S2SV_ModEnd> ( buf, <S2SV_ModStart> size_in ) ) { ret = - EFAULT ; goto out ; } ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if ( ret ) goto out ; ret = vbg_core_ioctl ( session, req, buf ) ; if (",0
179,<S2SV_ModStart> int m ; jas_int64_t <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> QMFB_SPLITBUFSIZE ) { jas_int64_t <S2SV_ModEnd> hstartcol = ( <S2SV_ModStart> >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += JPC_QMFB_COLGRPSIZE ; srcptr += stride << 1 ; } dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = buf ; srcptr = buf ; n = m ;,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x07 unsigned <S2SV_ModEnd> char * magick <S2SV_ModStart> ) ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { image -> header. x = ReadBlobLSBShort ( image ) ; image -> header. y = ReadBlobLSBShort ( image ) ; image -> header. columns = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. columns = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. columns = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlobLSBShort ( image ) ; image -> header. rows = ReadBlob",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; ext2_sync_super ( sb, es, 1 ) ; }",0
183,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev,",0
184,"<S2SV_ModStart> ; if ( strlen ( buf ) > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; if ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sizeof ( buf ) ) ; if ( len > sizeof ( buf ) ) { fprintf ( stderr, ""Error: <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> (%d)"",",0
185,<S2SV_ModStart> node ) { struct o2nm_cluster * o2nm_cluster ; if ( node -> nd_item. ci_parent ) { o2nm_cluster = to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; return o2nm_cluster ; } else { o2nm_cluster = to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; } return o2nm_cluster ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,<S2SV_ModStart> ; v = avio_rb32 ( pb ) ; v = avio_rb32 ( pb ) ; v = avio_rb32 ( pb ) ; v = avio_rb32 ( pb ) ; v = avio_rb32 ( pb ) ; switch ( v ) { case 1 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; case 2 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; case 3 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; default : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB,0
188,"<S2SV_ModStart> ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
189,"<S2SV_ModStart> ( statsdir, ""protostats"", & protostats ) ; <S2SV_ModStart> ( statsdir, ""cryptostats"", & cryptostats ) ; <S2SV_ModEnd> # ifdef DEBUG_TIMING <S2SV_ModStart> ( statsdir, ""timingstats"", & timingstats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
190,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_RETRY ( fd = TEMP_FAILURE_,0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & shadows -> mnt_mounts ) ) attach_shadowed ( mnt, parent, shadows ) ; else attach_shadowed ( mnt, parent, & shadows -> mnt_mounts <S2SV_ModEnd> ) ; touch_mnt_namespace",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, fsindex ) ; if ( ifindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, gsindex ) ; if ( ifindex ) prev -> gs = 0 ; } if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fsindex = fsindex ; if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gs",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> update_gui_state_from_problem_data ( 0,0
194,"<S2SV_ModStart> -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i",0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u << <S2SV_ModStart> DB_VECTOR ) ; if ( ( vcpu -> guest_debug & KVM_GUESTDBG_ENABLE ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= 1u << BP_VECTOR ; if ( ( vcpu -> guest_debug & KVM_GUESTDBG_ENABLE ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= 1u << PF_VECTOR ; if ( enable_ept ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ; if ( is_guest_mode ( vcpu ) ) eb |= ( 1u << DB_VECTOR ) ;,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; strncpy <S2SV_ModEnd> ( temp, <S2SV_ModStart> NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp ) ) ; if ( fsid. Fsid_dev. Minor == 257 ) ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Opaque_Handle ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Opaque_Handle )",0
197,"<S2SV_ModStart> int transhdrlen, unsigned <S2SV_ModStart> -> gso_type = SKB_GSO_UDP <S2SV_ModEnd> ; ipv6_select_ident ( <S2SV_ModStart> = SKB_GSO_UDP ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ;",0
198,"<S2SV_ModStart> ) return res ; spin_lock_init ( & hsr -> seqnr_lock ) ; <S2SV_ModStart> ( res ) { spin_unlock_init ( & hsr -> seqnr_lock ) ; res = hsr_create_self_node ( & hsr -> self_node_db, hsr_dev -> dev_addr, hsr_dev -> dev_addr ) ; if ( res < 0 ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR",0
199,"<S2SV_ModStart> ] ) ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ] ) ; if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; const int max_mb_planes = MAX_MB_PLANE ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
201,<S2SV_ModStart> ++ ) ; if (! args -> stable ) return 0 ; <S2SV_ModStart> ++ ) ; if (! <S2SV_ModStart>!= args -> count ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( len * 4 ) ; if ( dlen < XDR_QUADLEN ( hdr ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len * 4 ) ) return 0 ;,0
202,"<S2SV_ModStart> void assign_eip_near ( struct x86_emulate_ctxt * ctxt <S2SV_ModEnd>, ulong dst <S2SV_ModStart> { switch ( ctxt -> op_bytes ) { case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } } <S2SV_ModStart> { switch ( ctxt -> op_bytes ) { case 2 : ctxt -> _eip = ( u16 ) dst ; break ; case 4 : ctxt -> _eip = ( u32 ) dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; }",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = tvb_captured_length_remaining <S2SV_ModEnd> ( tvb,",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> == READ ) ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) <S2SV_ModEnd> ; return __blockdev_direct_IO",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> = false ; sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%i"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm + 2, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! strcmp ( def, defaults [",0
208,<S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> write_pmc ( i,0
209,"<S2SV_ModStart> = len ; if ( * nl == 0 ) { * nl = 0 ; len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; } else { * nl = 0 ; len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; }",0
210,"<S2SV_ModStart> { int all_whitespace <S2SV_ModEnd> ; int kind <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; char * str ; PyObject * o, * fstring_name ; Py_ssize_t len <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( kind, data, i ) ) { all_whitespace = 0 ; break ; } } } Py_DECREF ( o ) ; if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,"<S2SV_ModStart> string ) { int i ; for ( i = 0 ; i < object -> depth ; i ++ ) c = c -> child ; while ( c && cJSON_strcasecmp ( c -> string, string ) ) c = c -> next ;",0
213,"<S2SV_ModStart> == 0 ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> len ) ; if (! ( <S2SV_ModStart> plen <= * len ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ;",0
215,"<S2SV_ModStart
216,<S2SV_ModStart> - EINVAL ; if ( flags & MSG_CMSG_COMPAT ) return - EINVAL ; <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> datagrams = __sys_recvmmsg <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && get_compat_timespec <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && put_compat_timespec <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && put_compat_timespec <S2SV_ModStart> ( datagrams > <S2SV_ModEnd> 0 && put_compat_timespec,0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret = <S2SV_ModStart> = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; ndev -> stats. tx_packets ++ ; } ret = netdev_tx_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>,",0
221,"<S2SV_ModStart> 4 ) ; RAnalOp anal, next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; r_strbuf_fini ( & next_op. esil ) ;",0
222,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
223,"<S2SV_ModStart> data ) { const char * user_config = NULL ; char * repo_config = NULL ; int found = 0 ; <S2SV_ModStart> ; } user_config = perf_pathdup ( ""user.perfconfig"" ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; if ( found == 0 ) return - 1 ; if ( home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; } if ( perf_config_global ( ) && home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free (",0
224,"<S2SV_ModStart> int validate_event ( struct pmu_hw_events * hw_events <S2SV_ModEnd>, struct perf_event <S2SV_ModStart> event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> return 1 ; <S2SV_ModEnd> return armpmu -> <S2SV_ModStart> get_event_idx ( hw_events <S2SV_ModEnd>, & fake_event <S2SV_ModStart> return 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
225,"<S2SV_ModStart> new_idmap_permitted ( struct user_namespace <S2SV_ModEnd> * ns, <S2SV_ModStart> return true ; if ( new_map -> nr_extents == 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; kuid_t uid = make_kuid ( ns -> parent, id ) ; if ( uid_eq ( uid, current_fsuid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETUID ) { kuid_t gid = make_kgid ( ns -> parent, id ) ; if ( uid_eq ( uid, current_fsuid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETGID ) { kgid_t gid = make_kgid ( ns -> parent, id ) ; if ( gid_eq ( gid, current_fsgid ( ) ) ) return true ; }",0
226,"<S2SV_ModStart> ++ ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> len = a -> values [ j ]. len ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> len = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; memmove ( body [ j ] -> data, body [ j ] -> data -> buf, body [ j ] -> len ) ;",0
227,"<S2SV_ModStart> * hx ; <S2SV_ModEnd> int ret, <S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; int pos <S2SV_ModStart> ; hx = kzalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart> * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; <S2SV_ModEnd> ret = usb_cypress_writemem <S2SV_ModStart> ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset <S2SV_ModEnd>, 1 ) <S2SV_ModStart> 0 ) { <S2SV_ModEnd> deb_fw ( ""writing <S2SV_blank> to <S2SV_blank> address <S2SV_blank> 0x%04x <S2SV_blank> (buffer: <S2SV_blank> 0x%02x <S2SV_blank> %02x)\\n"", hx -> addr, hx -> chk ) ; ret = usb_cypress_writemem ( udev, hx -> addr, hx -> data, hx -> len ) ; if ( ret!= hx -> len ) { err ( ""error <S2SV_blank> while <S2SV_blank> transferring <S2SV_blank> firmware <S2SV_blank> (transferred <S2SV_blank> size: <S2SV_blank> %d, <S2SV_blank> block <S2SV_blank> size: <S2SV_blank> %d)"", ret, hx -> len ) ; ret = - EINVAL ; break ; } <S2SV_ModEnd> } <S2SV_null",0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> l2tp_call_errors_print ( netdissect_options <S2SV_ModStart>, val_l ; ND_TCHECK16 ( val_h ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_h ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_h ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_h ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_h ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_h ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_l ) ; ND_TCHECK16 ( val_l )",0
229,"<S2SV_ModStart> princ ) ; if ( strncmp ( handle -> params. realm, realm -> data, realm -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""k",0
230,"<S2SV_ModStart> * bo ; uint32_t temp_size ; uint32_t temp_bin = 0 ; uint32_t temp_bin_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t temp_bin_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t temp_bin_rec_offset = roundup ( bin_offset + args -> shader_rec_size, 16 ) ; temp = drm_malloc_ab ( temp_bin, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (!",0
231,<S2SV_ModStart> && HAVE_LIBLZMA <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
232,"<S2SV_ModStart> -> vm_file ) ; if ( test_opt ( inode -> i_sb, DELALLOC ) &&! test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_nonda_switch ( inode -> i_sb ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb, & retries ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && ext4_should_retry_alloc ( inode -> i_sb, & retries ) ) ; goto out_ret ; }",0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> arg ) { if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg ) ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg ) ; } if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg ) ; if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg ) ; } if ( strlen ( arg ) < 1 ) { r_return_val_if_fail ( arg",0
235,<S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) / sizeof <S2SV_ModStart> = sizeof ( oakley_t_map <S2SV_ModEnd> ) /,0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean <S2SV_ModEnd> accept_ice_connection ( GIOChannel <S2SV_ModStart> ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return TRUE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return TRUE ; }",0
237,<S2SV_ModStart> = CHECKSUM_NONE ; skb_orphan_frags ( skb ) ;,0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_DONTROUTE : v. val = sock_flag ( sk, SOCK_DONTROUTE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_ERROR : v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock_error ( sk ) ; if ( v. val == 0 ) v. val = - sock",0
240,<S2SV_ModStart> { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> ) ; else <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ) ; else <S2SV_ModEnd> msg -> msg_namelen,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ MAX_MB_PLANE ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ MAX_MB_PLANE ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { const int strides [ i ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, sf -> subsampling_z ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = &",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_subject_name ( cert <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_issuer_name ( cert <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_subject_name ( cert <S2SV_ModStart> ; X509_NAME_oneline_ex ( <S2SV_ModEnd> X509_get_issuer_name ( cert <S2SV_ModStart> ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; ret = crypto_retrieve_X509_sans ( context, plg",0
244,"<S2SV_ModStart> out_free ; } memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> guest_phys_addr ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> guest_phys_addr ) memslot = id_to_memslot ( kvm -> memslots, mem ->",0
245,"<S2SV_ModStart> 0 ; } if (! err ) { if ( ru ) copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ; return - EFAULT ; }",0
246,<S2SV_ModStart> ; lock_sock ( sk ) ; msg -> msg_namelen = 0 ;,0
247,"<S2SV_ModStart> * ni ; <S2SV_ModEnd> register u_int amt <S2SV_ModStart> ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; } else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni )!= i ) ; rip6_entry_print ( ndo, ni, 0 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo, ""\\",0
248,<S2SV_ModStart> ; if (! ret && reqkey_defl == KEY_REQKEY_DEFL_DEFAULT ) { ret = - EINVAL ; goto error ; } break ; case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : ret = install_session_keyring_to_cred ( new ) ; if ( ret < 0 && reqkey_defl == KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_requestor_keyring_to_cred ( new ) ; if ( ret < 0 && reqkey_defl == KEY_REQKEY_DEFL_NO_CHANGE ) { ret = - EINVAL ; goto error ; } break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 && reqkey_defl == KEY_REQKEY_DEFL_NO_CHANGE ) { ret = - EINVAL ; goto error ; },0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; <S2SV_ModStart> ++ ; interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; if ( fmt -> flags & MISC_FMT_OPEN_BINARY ) { retval = fd_install ( fd_binary, bprm -> file ) ; fput ( bprm -> file ) ; bprm -> file = NULL ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; } else interp_file = open_exec ( iname ) ; retval = PTR_ERR ( interp_file ) ; if ( IS_ERR ( interp_file ) ) goto _error ; bprm -> file = interp_file ; if ( fmt -> flags & MISC_FMT_OPEN_BINARY ) { retval = fd_install ( fd_binary, bprm -> file ) ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD",0
251,<S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Top = iLeft ; res -> ContribRow [ u ]. Bottom = iRight ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Top = iRight ; res -> ContribRow [ u ]. Bottom = iRight ; res -> ContribRow [ u ]. Bottom = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } <S2SV_ModEnd> if ( dTotalWeight,0
252,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
253,"<S2SV_ModStart> { Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" <S2SV_ModEnd> ) ; return",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> limit = 0,0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; if (! mobj ) return NULL ; <S2SV_ModStart> ( mobj ) memset <S2SV_ModEnd> ( mobj_get_va (,0
256,<S2SV_ModStart> += incr ; if ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
257,"<S2SV_ModStart> * for_ch ; int <S2SV_ModEnd> is_async = 0 <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), NULL, is_",0
258,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> dst_state -> curframe,0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> mi_stride ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"" <S2SV_ModEnd>, r -> <S2SV_ModStart> r -> req. tag, r -> iov. iov_len <S2SV_ModEnd> ) ; n <S2SV_ModStart> n ; scsi_req_data <S2SV_ModEnd> ( & r",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } f_pdata = & cqspi -> f_pdata [ cs ] ; ret = cqspi_of_get_flash_pdata ( pdev, f_pdata, np ) ; if ( ret ) goto err ;",0
263,"<S2SV_ModStart> maxn ) { switch ( n ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_SETPROPERTY : decompileSETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION",0
264,<S2SV_ModStart> ; if ( l < 0 ) { AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ) ) ) ) ) ) ) ) ) ) ) ; AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ ( AZ (,0
265,"<S2SV_ModStart> out ; } if ( free < 0 ) { err = - ENOSPC ; goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } table -> refs [ free ] = 1 ; table -> entries [ free ] = cpu_to_be32 ( vlan ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { err = - ENOSPC ; goto out ; } table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { err = -",0
266,"<S2SV_ModStart> ( len < <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * io, * ie ; char c = '<' ; ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; ie < ie ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ;",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg <S2SV_ModEnd> ) ; value <S2SV_ModStart> 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( atusb, usb_rcvctrlpipe ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, <S2SV_ModEnd> reg, & <S2SV_ModStart>, 1, 1000 ) ; if ( ret < 0 ) return ret ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> sizeof ( char <S2SV_ModEnd> ) * (,0
270,<S2SV_ModStart> } } <S2SV_null> <S2SV_null>,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_ERROR, ""AdaptationStates <S2SV_blank> array <S2SV_blank> has <S2SV_blank> no <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_ERROR, ""AdaptationStates <S2SV_blank> has <S2SV_blank> no <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_ERROR, ""AdaptationStates <S2SV_blank> array <S2SV_blank> has <S2SV_blank> no <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } } else { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_ERROR, ""AdaptationStates <S2SV_blank> has <S2SV_blank> no <S2SV_blank> adaptation <S2SV_blank> state"" ) ; goto Error ; } }",0
272,"<S2SV_ModStart> ) { ut32 addr32 = r_read_le32 ( buf + i ) ; if ( addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { RBinAddr * ba = newEntry ( sec -> paddr + i, 0, type, bits ) ; r_list_append ( ret, ba ) ; }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : if ( subl >= 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; if ( subl >= 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; if ( subl == 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr + 4 ) ) ) ; if ( subl == 4 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo,",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ]!= NULL ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ]!= NULL ) { ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] = ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ]!= NULL ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ]!= NULL ) { ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] = ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ],0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { <S2SV_ModEnd> struct bfq_data * <S2SV_ModStart> -> bfqd ; <S2SV_ModEnd> bfq_clear_bfqq_wait_request ( bfqq <S2SV_ModStart> return ; } <S2SV_ModEnd> if ( bfq_bfqq_budget_timeout <S2SV_ModStart> ( bfqq ) <S2SV_ModEnd> reason = BFQQE_BUDGET_TIMEOUT,0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS <S2SV_ModEnd> ( & vif <S2SV_ModStart> req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit ) { netbk_tx_err ( vif, & txreq ) ; continue ; } vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; } vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras (",0
279,<S2SV_ModStart> cb ) { <S2SV_ModEnd> struct net *,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> ; struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; struct xenvif_tx_request * txp <S2SV_ModEnd> ; int nr_frags <S2SV_ModStart> -> status ; pending_tx_info = netbk -> pending_tx_info ; <S2SV_ModStart> ( unlikely ( pending_tx_info ) ) { pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_ring_idx_t index ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
284,"<S2SV_ModStart> struct hv_kvp_ipaddr_value * kvp_ip_val ; memset ( & hv_msg -> kvp_hdr, 0, sizeof ( * hv_msg -> kvp_hdr ) ) ; memcpy ( & hv_msg -> kvp_ip_val, sizeof ( * hv_msg -> kvp_ip_val ) ) ; memcpy ( & hv_msg -> kvp_hdr. key_value, sizeof ( * hv_msg -> kvp_ip_val ) ) ; memcpy ( & hv_msg -> kvp_hdr. ip_value, sizeof ( * hv_msg -> kvp_hdr ) ) ; memcpy ( & hv_msg -> kvp_hdr. ip_val, sizeof ( * hv_msg -> kvp_ip_val ), sizeof ( * hv_msg -> kvp_hdr. ip_value ) ) ; memcpy ( & hv_msg -> kvp_hdr. ip_value, sizeof ( * hv_msg -> kvp_hdr. ip_value ) ) ; memcpy ( & hv",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; <S2SV_ModEnd> type = crm_element_value <S2SV_ModStart> F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } if ( do_send ) { if ( client -> ipc ) { if ( crm_ipcs_send ( client -> ipc, 0, update_msg, TRUE ) == FALSE ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return",0
287,"<S2SV_ModStart> + diffBlockLength || extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; for ( j = 0 ; j < diffBlockLength ; j ++ ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x + diffBlockLength > extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; for ( j = 0 ; j < extraBlockLength ; j ++ ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ; if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> ebh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) { if ( IS_ERR_OR_NULL ( fibh -> ebh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) ) { if ( IS_ERR_OR_NULL ( fibh -> sbh ) { if ( IS_ERR_OR,0
289,"<S2SV_ModStart> = IP_VS_BASE_CTL ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ; memset ( & d [ 2 ], 0, sizeof ( d [ 2 ] ) ) ; memcpy ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memcpy ( & d [ 4 ], sizeof ( d [ 4 ] ) ) ; memcpy ( & d [ 5 ], sizeof ( d [ 5 ] ) ) ; memcpy ( & d [ 6 ], sizeof ( d [ 6 ] ) ) ; memcpy ( & d [ 7 ], sizeof ( d [ 7 ] ) ) ; memcpy ( & d [ 6 ], sizeof ( d [ 6 ] ) ) ; memcpy ( & d [ 7 ], sizeof ( d [ 7 ] ) ) ; memcpy ( & d [ 6 ], sizeof ( d [ 6 ] ) ) ; memcpy ( & d [ 7 ], sizeof ( d [ 7 ] ) ) ; memcpy ( & d [ 7 ],",0
290,"<S2SV_ModStart> ; err = ip6_xmit <S2SV_ModEnd> ( sk,",0
291,<S2SV_ModStart> ib_ucm_cmd_hdr hdr ; size_t <S2SV_ModEnd> result ; if,0
292,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> = cgdir ; <S2SV_ModEnd> if (! <S2SV_ModStart> O_RDWR ) ) { if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; <S2SV_ModEnd> out : free <S2SV_ModStart> ( cgdir ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> ) ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> queue <S2SV_blank> name\\n"", __func__ ) ; pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> queue <S2SV_blank> name\\n"", __func__ ) ; blk_mq_destroy_sq_queue ( & cd -> tag_set, 1, BLK_MQ_F_SHOULD_MERGE ) ; blk_queue_bounce_limit ( disk -> queue, BLK_BOUNCE_HIGH ) ; disk -> fops = & pcd_bdops ; disk -> flags = GENHD_FL_BLOCK_EVENTS_ON_EXCL_WRITE ; disk -> fops = & pcd_bdops ; disk -> fops = & pcd_bdops ; disk -> fops = & pcd_bdops ; disk -> flags = GENHD_FL_BLOCK_EVENTS_ON_EXCL_READ <S2SV_ModEnd> ; } <S2SV_null>",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> -> number_data_bands ; if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } else if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } <S2SV_ModStart> -> number_data_bands ; if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } else if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } else if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, CorruptImageError, ""InsufficientImageDataInFile"" ) ; } <S2SV_ModStart> -> number_data_bands ; if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } else if ( number_data_bands < 1 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
296,"<S2SV_ModStart> ; int64_t index_pts ; if ( ( index_pts = ff_rescale ( itime, i, 10000 ) ) < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", index_pts, pct, ict ) ; goto end ; } index_pts = ff_rescale ( itime, i, 10000 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", index_pts, pct, ict ) ; goto end ; } index_pts = ff_rescale ( itime, i, 10000 ) ; if ( index_pts < 0 ) { av_log ( s, AV_LOG_ERROR, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", index_pts ) ; goto end ; }",0
297,<S2SV_ModStart> srp ) ; mutex_lock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock <S2SV_ModEnd> ( & sfp <S2SV_ModStart> srp ) ; mutex_unlock <S2SV_ModEnd> ( & sfp,0
298,"<S2SV_ModStart> # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_LVS_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_context"", & security_context_handler ) ; # endif # ifdef _WITH_LVS_ install_keyword",0
299,<S2SV_ModStart> data ) { vpx_codec_ctx_t * const ctx = ( vpx_codec_ctx_t * ) data ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) ctx ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) data ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ; vpx_codec_ctx_t * const prev = ( vpx_codec_ctx_t * ) prev ;,0
300,"<S2SV_ModStart> 0 ) { if (! tmpbuf ) kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if (! tmpbuf ) kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_value ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_key ( key, phase, sender, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_key ( key, phase, sender, param_list ) < 0 ) { kfree ( tmpbuf",0
301,"<S2SV_ModStart> ENOENT ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; else if ( errno == EEXIST ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, box",0
303,"<S2SV_ModStart> int _Unpickler_ResizeMemoList ( UnpicklerObject <S2SV_ModEnd> * self, <S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size",0
304,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> = true ; memset ( & vnet_hdr, 0, sizeof ( vnet_hdr ) ) ; <S2SV_ModStart> ( zerocopy ) { memcpy ( & vnet_hdr, iv, sizeof ( vnet_hdr ) ) ; len -= vnet_hdr. hdr_len ; err = - EINVAL ; if ( vnet_hdr. hdr_len > len ) goto err ; <S2SV_ModStart> goto err ; <S2SV_ModEnd> skb = macvtap_alloc_skb <S2SV_ModStart> ( & q -> sk, NET_IP_ALIGN, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb",0
305,"<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr <S2SV_ModEnd> ; u16 offset <S2SV_ModStart> ; while ( offset < ipv6_optlen ( exthdr ) <S2SV_ModEnd> ) { switch <S2SV_ModStart> ( * * nexthdr ) { case NEXTHDR_HOP : if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # else if ( IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif <S2SV_ModStart> case NEXTHDR_DEST : # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( found_rhdr ) return offset ; # else if ( IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( IS_ENABLED ( CONFIG_IPV",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; vcnt ++ ; if ( aboveleft -> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias )",0
308,<S2SV_ModStart> ; if ( msg -> msg_namelen > sizeof ( struct virtio_net_hdr ) ) { err = - EMSGSIZE ; goto out_free ; } msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN || dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index",0
310,"<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,1
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addiphdr_t * hdr ; union sctp_addr_param * addr_param ; sctp_addip_param_t * asconf_param ; struct sctp_chunk * asconf_ack ; __be16 err_code <S2SV_ModEnd> ; int all_param_pass <S2SV_ModStart> ; while ( chunk_len > 0 ) { err_code = sctp_process_asconf_param ( asoc, asconf, asconf_param ) ; if ( SCTP_ERROR_NO_ERROR!= err_code ) all_param_pass = 0 ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, asconf_param -> crr_id, err_code, asconf_param ) ; if ( SCTP_ERROR_RSRC_LOW == err_code ) goto done ; length = ntohs ( asconf_param -> param_hdr. length ) ; asconf_param = ( void * ) asconf_param + length ; chunk_len -= length ; asconf_ack = sctp_make_asconf_ack ( asoc, serial, chunk",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n""",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
315,<S2SV_ModStart> break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500V2 ) ) if ( defined ( CONFIG_KVM_E500MC ) if ( defined ( CONFIG_KVM_E500MC ) ) if ( defined ( CONFIG_KVM_E500MC ),0
316,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> goto response_done ; } memcpy ( kvp_data -> data. key, key_name, sizeof ( kvp_data -> data. key ) ) ; <S2SV_ModStart> 1 ) ; memcpy ( kvp_data -> data. value, value, sizeof ( kvp_data -> data. value ) ) ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; <S2SV_ModStart> valuelen = utf8s_to_utf16s ( kvp_data -> data. key, strlen ( kvp_data -> data. key ), sizeof ( wchar_t * ) kvp_data -> data. key ) ; kvp_data -> data. key_size = 2 * ( kvp_data -> data. key ) ; kvp_data -> data. key_type = REG_SZ ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; icmsghdrp -> icflags = ICMSGHDRFLAG_TRANSACTION | ICMSGHDRFLAG_RESPONSE ; vmbus_sendpacket ( channel, recv_buffer, buf_len, req_id, sizeof ( struct vmb",0
318,"<S2SV_ModStart> ; ctx = rcu_dereference_protected ( d -> log_ctx, lockdep_is_held ( & d -> mutex ) )? <S2SV_ModEnd> eventfd_ctx_fileget ( eventfp <S2SV_ModStart> ; ctx = rcu_dereference_protected ( d -> log_ctx, lockdep_is_held ( & d -> mutex ) ) : NULL ; d -> log_file = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ; d -> log_ctx = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ; d -> log_ctx = eventfp? eventfd_ctx_fileget ( eventfp",0
319,<S2SV_ModStart> return ; } if ( img -> numcomps > 3 ) { img -> color_space = OPJ_CLRSPC_SRGB ; } else if ( ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) ) { sycc422_to_rgb ( img ) ; } else if ( ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) ) { sycc444_to_rgb ( img ) ; } else if ( ( img ->,0
320,"<S2SV_ModStart> * mbuf = NULL ; <S2SV_ModEnd> long err = <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> size_t ctrls_size = <S2SV_ModStart> case _IOC_NONE : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; <S2SV_ModStart> case _IOC_READ : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; <S2SV_ModEnd> parg = mbuf <S2SV_ModStart> case _IOC_WRITE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if",0
321,"<S2SV_ModStart> ) ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( ( cmd -> flags & REDIS_CMD_DENYOOM ) && zmalloc_used_memory ( ) > server. maxmemory ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> ) { return <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, <S2SV_ModEnd> indx, 0 <S2SV_ModStart>, 500 ) ; } <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> case RESPONSE_RUN : { GdkScreen * screen = gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; }",0
324,"<S2SV_ModStart> -> port_number ; if (! <S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; ++ data ; } if ( urb -> actual_length ) { usb_serial_debug_data ( dev, __func__, urb -> actual_length, data ) ; if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func__ ) ; else edge_tty_recv ( edge_port -> port, data, urb -> actual_length ) ; }",0
325,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct cifsSesInfo <S2SV_ModEnd> * cifs_find_smb_ses ( <S2SV_ModStart> ) ; ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } <S2SV_ModEnd> ++ ses ->",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> ( ( cfg -> g_w!= ctx -> cfg. g_w ) && ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) && ( cfg -> g_lag_in_frames > 1 || ( cfg -> g_pass!= VPX_RC_ONE_PASS ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; }",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } break ; case '+' : eprintf ( ""List <S2SV_blank> commands <S2SV_blank> in <S2SV_blank> radare <S2SV_blank> format\\n"" ) ; r_list_foreach ( core -> fs -> roots, iter, root ) { r_cons_printf ( ""m <S2SV_blank> %s <S2SV_blank> %s\\n"", root -> path, root -> p -> name, root -> delta ) ;",0
328,"<S2SV_ModStart> ) ; if ( vm_flags & VM_NORESERVE ) return 0 ; ret = hugetlb_get_quota ( inode -> i_mapping, chg ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } <S2SV_ModEnd> if (! <S2SV_ModStart> 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; ret = hugetlb_put_quota ( inode -> i_mapping, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; }",0
329,"<S2SV_ModStart> new ) { struct key * keyring ; if ( new -> thread_keyring ) { key_put ( new -> thread_keyring ) ; key_put ( new -> thread_keyring ) ; return 0 ; } keyring = keyring_alloc ( ""_tid"", new -> uid, new -> gid, new, KEY_POS_ALL | KEY_USR_VIEW, NULL, NULL ) ; if ( IS_ERR ( keyring ) ) return PTR_ERR ( keyring ) ; keyring = keyring_alloc ( ""_tid"", new -> uid, new -> gid, new, KEY_POS_ALL | KEY_USR_VIEW, NULL, NULL, NULL ) ; if ( IS_ERR ( keyring ) ) return PTR_ERR ( keyring ) ;",0
330,"<S2SV_ModStart> = 0 ; size_t scanned = 0 ; size_t readnbd = 0 ; <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) readnbd = ( size_t ) 0U ; <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) readnbd = ( size_t ) 0U ; <S2SV_ModStart> scanned ++ ; if ( readnb > ( size_t ) 0U ) readnbd = ( size_t ) 0U ; if ( readnb > ( size_t ) 0 && errno == EINTR ) { while ( readnb > ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( readnb > ( ssize_t ) 0 ) read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( readnb > ( ssize_t ) 0 && errno == EINTR )",0
331,"<S2SV_ModStart> & orig ) ; if ( copy == NULL ) { mrb_free ( mrb ) ; return NULL ; } <S2SV_ModStart> mrb_io * ) mrb_io_alloc ( mrb ) ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,"<S2SV_ModStart> cpi ) { vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; vpx_init_plane_quantizers <S2SV_ModEnd> ( cpi,",0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart>, callee_params ) ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t )",0
335,"<S2SV_ModStart> int rc ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; <S2SV_ModStart>, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; if (! is_load_segment ( ctxt, sel, VCPU_SREG_EIP <S2SV_ModEnd> ) ) return <S2SV_ModStart>, VCPU_SREG_EIP ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr, ctxt -> op_bytes ) ; ctxt -> _eip = 0 ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr, ctxt -> op_bytes ) ; ctxt -> src. val = 0 ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_eip ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL",0
336,"<S2SV_ModStart> ) ) { if (! comp -> i_data ) return AVERROR ( ENOMEM ) ; comp -> f_data = NULL ; comp -> i_data = NULL ; comp -> f_data = NULL ; comp -> f_data = av_malloc_array ( csize, sizeof ( * comp -> f_data ) ) ; if (! comp -> f_data ) return AVERROR ( ENOMEM ) ; comp -> i_data = NULL ; comp -> f_data = NULL ; comp -> f_data = av_malloc_array ( csize, sizeof ( * comp -> f_data ) ) ; if (! comp -> f_data ) return AVERROR ( ENOMEM ) ; comp -> f_data = av_malloc_array ( csize, sizeof ( * comp -> f_data ) ) ; if (! comp -> f_data ) return AVERROR ( ENOMEM ) ; comp -> i_data = NULL ; comp -> f_data = NULL ; comp -> i_data = NULL ; comp -> f_data = av_malloc_array ( csize, sizeof ( * comp -> f_data ) ) ; if (! comp -> i",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; } <S2SV_ModStart> "".txt"" ) ; if (! COM_DefaultExtension ( filename, sizeof ( filename ), "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; }",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t <S2SV_ModEnd> * got_table = <S2SV_ModStart> ; if ( got_table ) { ut32 offset ; if ( obj -> hdr -> data_start + 4 > obj -> size || obj -> hdr -> data_start + 4 < obj -> hdr -> data_start + offset + 4 ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset + 4, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ; } got_table [ i ]. addr_to_patch = got_entry ; got_table [ i ]. data_offset = got_entry + BFLT_HDR_SIZE ; got_table [ i ]. data_offset = got_entry + BFLT_HDR_SIZE ; } obj -> n_got = n_got ; obj -> got_table = got_table ; }",0
339,<S2SV_ModStart> -> si_code >= INT_MAX <S2SV_ModEnd> ) return - <S2SV_ModStart> - EPERM ; if ( info -> si_signo >= INT_MAX <S2SV_ModEnd> ) return -,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ),",0
341,"<S2SV_ModStart> char * fname, <S2SV_ModEnd> int lower, <S2SV_ModStart> ) fname ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModStart> fname ++ ; p = & name [ strlen ( ( char * ) name ] ; if (! ( p = & name [ strlen ( ( char * ) name ) ] ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0xF0 ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; }",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( Z_TYPE_P ( options ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash && Z_TYPE_P ( classes ) == IS_ARRAY ) { class_hash = zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; } if ( var_hash ) { zend_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ; } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash",0
343,"<S2SV_ModStart> ; kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tread == NULL ) err = - ENOMEM ; } else { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread == NULL ) err = - ENOMEM ; } } else { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> queue == NULL ) err = - ENOMEM ; }",0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR, ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG ( GF_LOG_ERROR, ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_ERROR ) ( GF_LOG_",0
345,<S2SV_ModStart> ; else { if (! ctx -> priv -> alg_priv ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> alg_priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else buf = ctx -> iface -> enc. get_glob_hdrs ( ctx ->,0
346,<S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ( argv [ i <S2SV_ModEnd> ] == '\\0' <S2SV_ModStart> ) ) { if ( argv [ i ] == '\\0' ) { if ( argv [ i ] == '\\0' ) { argv [ i ] = '\\0' ; } else if ( argv [ i ] == '\\0' ) { argv [ i ] = '\\0' ; } else if ( argv [ i ] == '\\0' ) { argv [ i ] = '\\0' ; } else if ( argv [ i ] == '\\0' ) { argv [ i ] = '\\0' ; } else if ( argv [ i ] == '\\0' ) { if ( argv [ i ] == '\\0' ) { argv [ i ] = '\\0' ; } else if ( argv [ i ] == '\\0' ) { argv [ i ] = '\\0' ; } else if ( argv [ i ] == '\\0' ),0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) { s -> seekable = strtoll ( p, NULL, 10 ) ; s -> filesize = strtoll ( slash + 1, NULL, 10 ) ; } else if ( strlen ( p ) > 0 ) { s -> seekable = strtoll ( p, NULL, 10 ) ; s -> filesize = strtoll ( p + strlen ( slash ) - 1, NULL, 10 ) ; } if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; } else { s -> seekable = - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart>, upb ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart> ; upb = ( size_t ) img -> comps [ 0 ]. prec ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; for ( i = 0U ; i < maxw ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ g ;",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( fmode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } }",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; ptr = sshpkt_ptr ( ssh, & dlen ) ; if ( ( r = sshbuf_put ( kex -> peer, ptr, dlen ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
353,"<S2SV_ModStart> 0 ; char lbase [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; char strbase [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; char ltest [ 256 ] ; char strtest [ 256 ] ; if ( parse_cmdline_cmp ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"" "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_filename ) ; printf ( ""************************* <S2SV_blank> \\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest",0
354,"<S2SV_ModStart> intf ) { struct cdc_ncm_data * data ; <S2SV_ModStart> int ret ; data = cdc_ncm_select_altsetting ( intf, CDC_NCM_COMM_ALTSETTING_NCM ) ; if (! data ) return - ENODEV ; <S2SV_ModStart> ret = cdc_ncm_bind_common <S2SV_ModEnd> ( dev, <S2SV_ModStart>, intf, CDC_NCM_DATA_ALTSETTING_NCM, data <S2SV_ModEnd> ) ; usbnet_link_change",0
355,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
356,"<S2SV_ModStart> ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
357,<S2SV_ModStart> EINVAL ; for ( h = NF_INET_NUMHOOKS ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) for ( h = NF_INET_NUMHOOKS ; h ++ ) for ( h = 0 ; h < NF_INET_NUMHOOKS ;,0
358,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; <S2SV_ModStart> 1 ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; if ( caplen > length - 1 ) ND_PRINT ( ( ndo",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_use_lock_sync ( & <S2SV_ModStart> q ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ;,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK <S2SV_ModEnd> ; pgoff_t curr <S2SV_ModStart> ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } <S2SV_ModEnd> unlock_page ( page <S2SV_ModStart> page ) ; <S2SV_ModEnd> mark_inode_dirty ( inode <S2SV_ModStart> gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; <S2SV_ModEnd> brelse ( dibh <S2SV_ModStart> out : return <S2SV_ModEnd> error ; }",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClassClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if (! class ) return ( NULL ) ; <S2SV_ModStart> load ) ||! vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } else { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ;",0
363,"<S2SV_ModStart> image_noffset ) { const char * name ; name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, sig_blob, sig_offset, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } }",0
364,"<S2SV_ModStart> xfs_attr_leaf_name_local_t * name_loc ; xfs_trans_log_buf ( mp -> m_rbm, bp, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_dblocks, XFS_I ( mp ) -> m_sb. sb_",0
365,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo. size = CX23888_IR_RX_KFIFO_SIZE ; state -> tx_kfifo. size = CX23888_IR_TX_KFIFO_SIZE ; <S2SV_ModStart> - ENOMEM ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; mutex_init ( & state -> tx_params_lock ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; ret = cx23888_ir_write4 ( dev, C",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; <S2SV_ModStart> service_name_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; <S2SV_ModStart> rw_tlv_length ) ; pr_debug ( ""SKB <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> SN <S2SV_blank> length <S2SV_blank> %zu\\n"", size, sock -> service_name_len ) ; skb = llcp_allocate_pdu ( sock, LLCP_PDU_CONNECT, size ) ; if ( skb == NULL ) { err = - ENOMEM ; goto error_tlv ; }",0
367,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct monitor * <S2SV_ModStart> ) ; if (! mon -> m_zback ) { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ;",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS )",0
369,"<S2SV_ModStart> * chan ; jas_uint16 type ; jas_uint16 assoc ; jas_uint16 numchans ; if (! jas_getuint16 ( in, & type ) ||! jas_getuint16 ( in, & assoc ) ) { return - 1 ; } numchans = jp2_getuint16 ( in, & numchans ) ; if (! ( cdef -> ents = jas_alloc2 ( numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < numchans ; ++ channo ) { chan = & cdef -> ents [ channo ] ; if (! jas_alloc2 ( numchans, sizeof ( jp2_cdefent_t ) ) ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( numchans, sizeof ( jp2_cdefent_t ) ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < numchans ; ++ channo ) { chan = & cdef -> ent",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ;",0
371,"<S2SV_ModStart> ) ) { struct icmphdr icmphdr ; memset ( & icmp_param, 0, sizeof ( icmp_param ) ) ; iph = ip_hdr ( skb_in ) ; if ( iph -> protocol == IPPROTO_ICMP ) { iph = ip_hdr ( skb_in ) ; itp = skb_header_pointer ( skb_in, iph -> ihl << 2, sizeof ( icmphdr ) ) ; if ( itp == NULL ) { struct icmphdr icmp_param ; icmp_param. type = type ; icmp_param. code = code ; icmp_param. info = info ; } } else if ( iph -> protocol == IPPROTO_ICMP ) { iph = ip_hdr ( skb_in ) ; itp = skb_network_header ( skb_in ) + ( iph -> ihl << 2 ) + offsetof ( struct icmphdr, type ) - skb_in -> data, sizeof ( icmp_param. type ) ; icmp_param. code = code ; icmp_param. info = info ;",0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_TCHECK_32BITS ( p + 2 ) ; <S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ;",0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,"<S2SV_ModStart> ) ) { if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else { if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } } * pt ++ = \'""\' ; * pt ++ = '\\0' ;",0
378,"<S2SV_ModStart> { rq = blk_mq_tag_to_rq <S2SV_ModEnd> ( tags,",0
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> * nla ; if (! skb_is_nonlinear ( skb ) ) return 0 ; if ( A > skb -> len - sizeof ( struct nlattr ) <S2SV_ModEnd> ) return 0,0
382,"<S2SV_ModStart> -> open_flags ) ; xdr_encode_empty_array ( xdr, <S2SV_ModEnd> arg -> open_flags <S2SV_ModStart> -> open_flags ) ; xdr_encode_empty_array ( xdr, <S2SV_ModEnd> arg -> nfs_client <S2SV_ModStart> -> nfs_client ) ; xdr_encode_empty_array ( xdr, arg -> nfs_client, arg -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client, arg -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs",0
383,"<S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; <S2SV_ModStart> trunc ; ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 2 ; len -= 2",0
384,"<S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Tile <S2SV_blank> size <S2SV_blank> or <S2SV_blank> tile <S2SV_blank> rowsize <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small, <S2SV_blank> using <S2SV_blank> alternate <S2SV_blank> calculation <S2SV_blank> %u"", tl * tile_rowsize ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> ) ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; }",0
385,<S2SV_ModStart> } # if defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__ ) || defined ( __linux__,0
386,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int modify_bar_registration ( <S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> bar <S2SV_blank> type <S2SV_blank> %d\\n"", __func__, dev -> bar [ idx ]. type ) ; return - EINVAL <S2SV_ModEnd> ; } switch <S2SV_ModStart> break ; } pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> bar <S2SV_blank> type <S2SV_blank> %d\\n"", __func__, dev -> name, idx ) ; return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> tmp == cluster -> cl_has_local && node -> nd_num == O2NM_INVALID_NODE_NUM <S2SV_ModEnd> ) return - <S2SV_ModStart> - EBUSY ; <S2SV_ModEnd> if ( tmp <S2SV_ModStart> tmp == cluster -> cl_has_local && node -> nd_num == O2NM_INVALID_NODE_NUM ) { ret = o2net_start_listening ( node ) ; if ( ret ) return ret ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } <S2SV_ModEnd> return count ;,0
388,"<S2SV_ModStart> ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr ) )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", n, typestr ) )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", n, typestr ) )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( ( n = fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"",",0
389,"<S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1,",0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> net = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart> SCTP_EVENT_T3_RTX ), <S2SV_ModEnd> SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), <S2SV_ModEnd> asoc -> state <S2SV_ModStart>, asoc -> ep, <S2SV_ModEnd> transport, GFP_ATOMIC <S2SV_ModStart> GFP_ATOMIC ) ; <S2SV_ModEnd> bh_unlock_sock ( sk <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; out_unlock : sctp_bh_unlock_sock ( <S2SV_ModEnd> sk ) ;",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> create <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fflush ( stdout ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; }",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset + 1 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 3 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 4 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 5 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 6 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 7 )",0
396,<S2SV_ModStart> } else { if ( ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && ( flags & SPLICE_F_NONBLOCK ) && (,0
397,"<S2SV_ModStart> ) ; r_buf_set_bytes <S2SV_ModEnd> ( tbuf,",0
398,"<S2SV_ModStart> long ret, <S2SV_ModEnd> err ; mm_segment_t <S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> ru_utime. tv_sec, ur -> ru_utime. tv_sec ) ; ret |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; ret |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; ret |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; ret |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; ret |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; ret |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; ret |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; ret |= __put_user ( r. ru_nswap, & ur -> ru_nswap ) ; ret |= __put_",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sysrq-trigger"", ""%r/proc/sysrq-trigger"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_RW, ""proc"", ""%r/proc",0
400,"<S2SV_ModStart> ; } if ( addrinsubnet ( & md -> sender, & md -> iface -> ip_addr ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & md -> iface -> ip_addr ) ) ) { c = d ; break ; } if ( addrinsubnet ( & md -> sender, & md -> iface -> ip_addr ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & md -> iface -> ip_addr ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"", ip_str ( & md -> iface -> ip_addr ), md -> iface -> port ) ; c = d ; break ; } if ( addrinsubnet ( & md -> sender, & md -> iface -> ip_addr ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> { nsc_encode_subsampling ( <S2SV_ModEnd> context ) ;",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, const",0
403,<S2SV_ModStart> { if ( g_xgmac_stats_string && g_xgmac_stats_string [ ETH_SS_STATS ] ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( g_xgmac_stats_string && g_xgmac_stats_string [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] && g_xgmac_stats_string [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS ] [ ETH_SS_STATS,0
404,<S2SV_ModStart> == 1 ) return ( <S2SV_ModEnd> GetPSDPacketSize ( image,0
405,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_CLOEXEC ) ; TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY,0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } alt = alt -> cur_altsetting ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } alt = alt -> cur_altsetting ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> struct device * dev <S2SV_ModEnd> ; dev_dbg ( <S2SV_ModStart> dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; } <S2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> ) { xstep = ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1 ) << <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, 1",0
409,<S2SV_ModStart> target_enc ) { if ( ci -> syntax!= ci -> syntax ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) { r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) { r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS ) r = ONIGERR_INVALID_DESCRIPTORS ; if ( r!= ONIGERR_INVALID_DESCRIPTORS,0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t depth, <S2SV_ModEnd> register Quantum * <S2SV_ModStart> * q ; <S2SV_ModEnd> Quantum index ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> switch ( depth <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 ) { index = ( Quantum ) ( ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) )!= 0",0
411,"<S2SV_ModStart> const u_char * t <S2SV_ModEnd> ) { u_int <S2SV_ModStart> network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> (%u)"", tok2str ( af_values, ""Unknown"", network_addr_type ) ) ) ; switch ( network_addr_type ) { case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; default : ND_PRINT ( ( n",0
412,"<S2SV_ModStart>, ss ; <S2SV_ModEnd> int usermode ; <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; <S2SV_ModEnd> ops -> get_msr <S2SV_ModStart> = 3 ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> break ; } <S2SV_ModStart> = 1 ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ctxt -> _eip = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC ) = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC ) = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_RC ) = reg_read ( ctxt, VCPU_REGS_RDX ) ; * reg_write ( ctxt, VCPU_REGS_",0
413,"<S2SV_ModStart> ) ; return sprintf <S2SV_ModEnd> ( buf, <S2SV_ModStart> -> driver_override ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
414,"<S2SV_ModStart>, i ; <S2SV_ModEnd> if ( out <S2SV_ModStart> CMS_TEXT ) { if ( flags & CMS_TEXT ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; } else tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS ) retval = KRB5_PREAUTH_SUCCESS ; if ( response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS ) retval = KRB5_PREAUTH_SUCCESS ; if ( response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS ) retval = KRB5_PREAUTH_SUCCESS ; if ( response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( retval!= KRB5_PREAUTH_SUCCESS ) retval = KRB5_PREAUTH_SUCCESS ; if ( response!= otp_response_success ) retval = KRB5_PREAUTH_FAILED ; if ( response!= otp_response_success ) retval = KRB5_PREAUTH_SUCCESS ; if ( retval!= KRB5_PREAUTH_FAILED ) retval = KRB5_PREAUTH,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii ; for ( ii = 0 ; ii <= 1 ; ++ ii ) { const int cc = c + vpx_cost_bit ( prob, b ) ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
417,"<S2SV_ModStart> NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMPDIR"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir =",0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_port ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; break ; case AF_INET6 : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; if ( inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ) { strcat ( addr_text, ""]"" )",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch == NULL ) err = - ENODEV ; else err = synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; DEB ( printk ( ""sequencer_write(dev=%d, <S2SV_blank> count=%d)\\n"", dev, count ) ) ; if ( err < 0 ) return err ; if ( ev_code >= 128 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return - EINVAL ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) goto out ; ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct hstate * <S2SV_ModStart> vma ) ; <S2SV_ModEnd> long chg ; <S2SV_ModStart> ) if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } <S2SV_ModEnd> vma_commit_reservation (",0
422,"<S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix <S2SV_ModEnd>, filegen -> <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_file, filegen -> basename <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_string, filegen -> prefix <S2SV_ModEnd>, filegen -> <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"", filegen_file, filegen -> basename <S2SV_ModEnd> ) ) ; <S2SV_ModStart> } my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node!= NULL ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node!= NULL ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node = HEAD_PFIFO ( my_node -> options ) ; for ( ; my_node = my_node -> link )",0
423,"<S2SV_ModStart> -> stamp_path ) { _cleanup_bus_error_free_ sd_bus_error = SD_BUS_ERROR_NULL ; if ( manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & sd_bus_error ) ; if (! manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & sd_bus_error ) ; if (! manager_remove_job ( UNIT ( t ) -> manager, JOB_START, UNIT ( t ) -> manager, JOB_START, UNIT_TRIGGER ( UNIT ( t ) ), JOB_REPLACE, true, & sd_bus_error ) ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> queue <S2SV_blank> unit <S2SV_blank> startup <S2SV_blank> job: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 3 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t <S2SV_ModEnd> x",0
425,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> # endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return TIFFHorAcc16_t <S2SV_ModEnd> ( tif,",0
428,"<S2SV_ModStart> tot_len ) ; memset ( & opt2 -> opt, 0, tot_len ) ;",0
429,"<S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } length = avio_rl32 ( pb ) ; length = avio_rl32 ( pb ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; } if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> header"" ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> const char * <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } free ( fpath ) ; <S2SV_ModEnd> return ret ;",0
431,"<S2SV_ModStart> ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & ( MNT_READONLY | MNT_LOCK_READONLY ) <S2SV_ModEnd> ) mnt -> <S2SV_ModStart> |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) mnt -> mnt. mnt_flags |= MNT_LOCKED ; atomic_inc ( & sb -> s_active ) ; mnt -> mnt. mnt_sb = sb ; mnt -> mnt. mnt_root = dget ( root ) ; mnt -> mnt_mountpoint = mnt -> mnt. mnt_mountpoint ; mnt -> mnt_parent = mnt ; lock_mount_hash ( ) ; list_add_tail ( & mnt -> mnt_instance, & sb -> s_mounts ) ; unlock_mount_hash ( ) ; if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) mnt -> mnt. mnt_flags",0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> { if ( rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x03 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x21 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL-Key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
435,"<S2SV_ModStart> serio ) ; if ( ( ~ str & I8042_STR_AUXERR ) || ( ~ str & I8042_STR_MUXERR ) ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; ret = 0 ; goto out ; } if ( ( ~ str & I8042_STR_AUXERR ) || ( ~ str & I8042_STR_MUXERR ) ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; ret = 0 ; goto out ; } if ( ( ~ str & I8042_STR_AUXERR ) || ( ~ str & I8042_STR_MUXERR ) || ( ~ str & I8042_STR_MUXERR ) ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; ret = 0",0
436,"<S2SV_ModStart> ; if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> uint8_t * udfName <S2SV_ModEnd>, int udfLen <S2SV_ModStart> newIndex ; } <S2SV_null> static <S2SV_ModStart> newIndex ; } <S2SV_null> static <S2SV_ModStart> newIndex ; } static int udf_translate_to_linux ( uint8_t * newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; memcpy ( newName, fidName, fidNameLen ) ; if ( needsCRC ) { uint8_t ext [ EXT_SIZE ] ; int localExtIndex = 0 ; if ( hasExt ) { int maxFilenameLen ; for ( index = 0 ; index < EXT_SIZE && extIndex + index + 1 < udfLen ; index ++ ) { curr = udfName [ extIndex + index + 1 ] ; if ( curr == '/' || curr == 0 ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen &&",0
438,"<S2SV_ModStart> VP9_COMP * cpi <S2SV_ModEnd>, const TileInfo <S2SV_ModStart> const tile, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> ] ; int bw, bh ; if ( mi_row < cm -> mi_rows || mi_col < cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts",0
439,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> flags <S2SV_ModStart> CLIENT_CLOSE_AFTER_REPLY ) break ; if (! c -> reqtype ) { if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_INLINE ; } else { if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_MULTIBULK ; } else { c -> reqtype = PROTO_REQ_INLINE ; } else { c -> reqtype = PROTO_REQ_INLINE ; } } if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_,0
440,<S2SV_ModStart> b_state = 0 <S2SV_ModEnd> ; get_blocks_flags = <S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_,0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> = - 1 <S2SV_ModStart> ; if ( d2i_DSA_SIG <S2SV_ModEnd> ( & s <S2SV_ModStart>, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ;",0
442,"<S2SV_ModStart> NULL ) ; if (! out ) return NULL ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; <S2SV_ModEnd> rv = gdDPExtractData",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval ) { ret = OE_EAI_FAIL ; if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO",0
445,"<S2SV_ModStart> '\\0' ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> '\\0' ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ':' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else if ( osStrcasecmp ( token, ""Digest"" ) ) { error = base64Decode ( token, n, token, & n ) ; if (! error ) { token [ n ] = '\\0' ; separator = osStrchr ( token, '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else if ( osStrcasecmp ( token, ""Digest"" ) ) { error = base64Decode ( token, n, token, & n ) ; if (! error ) { token [ n ] = '\\0' ; separator = osStr",0
446,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> rctx -> interlaced <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { int ret <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, <S2SV_ModEnd> data, size <S2SV_ModStart> size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ;",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,<S2SV_ModStart> destroy_list ) ; <S2SV_ModEnd> } } <S2SV_null>,1
451,"<S2SV_ModStart> * src, <S2SV_ModEnd> int64_t ts_start, <S2SV_ModStart> ts_end, unsigned <S2SV_ModEnd> int flags ) <S2SV_ModStart> ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { for ( col = 0 ; for ( ; col < mb_cols ; ++ col ) { vpx_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } # else vpx_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return code ; } if ( code ) { * status = ""INVALID_S4U2SELF_REQUEST"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> r, uint8_t <S2SV_ModEnd> * outbuf )",0
455,<S2SV_ModStart> || s -> cur_pic <S2SV_ModEnd>. field_picture ||,0
456,"<S2SV_ModStart> { if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; if ( hdr -> h_flags & RDS_FLAG_CONG_BITMAP ) { if ( rm -> m_inc. i_hdr. h_flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } } if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; if ( hdr -> h_flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; } if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; if ( hdr -> h_flags & RDS_FLAG_CONG_BITMAP ) { rds_",0
457,<S2SV_ModStart> buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; <S2SV_ModStart> buf ) ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; break ; } <S2SV_ModEnd> } } <S2SV_null>,0
458,"<S2SV_ModStart> ; if ( unlikely ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) ) { ret = - ENOKEY ; goto error2 ; } ret = key_permission ( key_ref, KEY_POSITIVE ) ; if ( ret!= - EACCES ) goto error2 ; if (! is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } ret = key_validate ( key ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ;",0
459,"<S2SV_ModStart> ) { ND_TCHECK <S2SV_ModEnd> ( * mh <S2SV_ModStart> 8 ) ; ND_TCHECK_32BITS ( & bp [ hlen ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } else { ND_TCHECK ( * mh, hlen + 4 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", type == IP6M_CAREOF_TEST_INIT? ""Care-of"" : ""Home"", EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ;",0
460,<S2SV_ModStart> dev ) ; dev -> priv_flags &= ~ IEEE80211_FLAG_TX_SKB_SHARING ; <S2SV_ModStart> & ieee80211_dataif_ops ; dev -> priv_flags |= IEEE80211_FLAG_TX_SKB_SHARING | IEEE80211_FLAG_TX_SKB_SHARING | IEEE80211_FLAG_TX_SKB_SHARING,0
461,"<S2SV_ModStart> hmi_data ; uint32_t hmi_bpm = 0 ; <S2SV_ModStart> ; } * note = NULL ; UNUSED ( hmi_base ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION",0
462,<S2SV_ModStart> -> id ; if ( * addr_len < sizeof ( * haddr ) ) * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 ] = ( __u32 ) ei -> i_iget5_data ; fh32 [ 0 ] |= ( __u32 ) ei -> i_iget5_offset ; fh32 [ 1 ] |= ( __u32 ) ei -> i_iget5_generation ; fh32 [ 2 ] |= ( __u32 ) ei -> i_iget5_inode_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
464,"<S2SV_ModStart> KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_PWCHANGE_SERVICE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> umin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case",0
466,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int filt_guess = ROUND_POWER_OF_TWO ( cm -> base_qindex * 20723 + 1015158, 18 ) ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModEnd> ) ; }",0
467,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; BT_DBGLOG ( ( ""BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( ""BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG(BT_DBGLOG (BT_DBGLOG (BT_DBGLOG (BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( BT_DBGLOG ( ""BT_DBG",0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_row_count + 1 ) ) ; * o_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,<S2SV_ModStart> vpx_codec_err_t res ; if (! data ||! data_sz ) res = VPX_CODEC_INVALID_PARAM ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_ERROR ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ; else if ( data_sz > VPX_CODEC_MAX_DATA_SIZE ) res = VPX_CODEC_MAX_DATA_SIZE ;,0
474,"<S2SV_ModStart> int ret ; if ( <S2SV_ModEnd> value [ strlen <S2SV_ModStart> ] == ',' ) { par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_log ( s, AV_LOG_DEBUG, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata, par -> extradata_size ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par ->",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { ret = - EIO ; goto fail ; } if ( de -> name_len > ISOFS_MAX_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_NAME_LEN ),0
476,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * esis_header ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; ND_TCHECK ( * esis_header ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_TCHECK",0
477,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; }",0
478,"<S2SV_ModStart> { BUG ( ) ; return false ; } } else if ( r -> CRn == 9 && r -> CRm == 13 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = vcpu_sys_reg ( vcpu, PMSELR_EL0 ) & ARMV8_PMU_COUNTER_MASK ; } else { BUG ( ) ; return false ; } if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval )",0
479,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= Z_TYPE_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= Z_TYPE_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } } else { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
480,<S2SV_ModStart> self ) { if ( self -> dict ) Py_CLEAR ( self -> dict ) ;,0
481,"<S2SV_ModStart> SQL_DROP ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecDirect <S2SV_blank> returned <S2SV_blank> SQL_DROP\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> SQL_DROP ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecDirect <S2SV_blank> returned <S2SV_blank> SQL_DROP\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> SQL_DROP ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecDirect <S2SV_blank> returned <S2SV_blank> SQL_DROP\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } fprintf ( stderr, ""[ISQL]INFO: <S2SV_blank> SQLExecute <S2SV_blank> returned <S2SV_blank> SQL_SUCCESS_WITH_INFO\\n"" ) ; if ( ret!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, hStmt ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLExecute <S2SV_blank> returned <S2SV_blank> SQL_SUCCESS_WITH_INFO\\n"" ) ; SQLFreeStmt ( hStmt, SQL_DROP ) ; return 0 ; } ret = SQLExecute ( hStmt ) ; if ( ret!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, hStmt ) ;",0
482,"<S2SV_ModStart> ; r = copy_to_user <S2SV_ModEnd> ( data,",0
483,"<S2SV_ModStart> ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n"" <S2SV_ModEnd> ) ; exit",0
484,<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; },0
485,<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & pmus_lock ) ; <S2SV_ModStart> type = cpu_context ; mutex_unlock ( & pmus_lock ) ;,0
486,"<S2SV_ModStart>, struct iovec * iovec, size_t nr_segs <S2SV_ModEnd> ) { if <S2SV_ModStart> = 1 ; return len ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
487,"<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModEnd> sbi -> s_log_groups_per_flex <S2SV_ModStart> sbi -> s_log_groups_per_flex ; unsigned <S2SV_ModEnd> size_t size ; <S2SV_ModStart> -> s_log_groups_per_flex ; <S2SV_ModEnd> flex_group_count = ( <S2SV_ModStart> 1 << sbi -> s_log_groups_per_flex ; size = sizeof ( struct flex_groups ) ; if ( sbi -> s_flex_groups == NULL ) { sbi -> s_flex_groups = ext4_kvzalloc ( size, GFP_KERNEL ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank> flex <S2SV_blank> groups"", flex_group_count ) ; goto failed ; } sbi -> s_flex_groups = ext4_kvzalloc ( size, GFP_KERNEL ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> %u <S2SV_blank>",0
488,<S2SV_ModStart> ; if ( unlikely ( chunk_length > ( __u16 ) <S2SV_ModEnd> required_length ) ),0
489,"<S2SV_ModStart> ; for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
490,"<S2SV_ModStart> if (! ( acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ) ) { if ( strcmp ( feature_str ( FEAT_SASL_SERVER ), ""*"" ) ) acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ; } if (! acptr && strcmp ( feature_str ( FEAT_SASL_SERVER ), ""*"" ) ) acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ; if (! acptr ) { if ( strcmp ( feature_str ( FEAT_SASL_SERVER ), ""*"" ) ) acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ; } if (! acptr && strcmp ( feature_str ( FEAT_SASL_SERVER ), ""*"" ) ) acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ; if (! acptr )",0
491,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ; } } # else for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_,0
492,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) match_length = callback_args -> data_size ; <S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) match_length = callback_args -> data_size ;,0
493,"<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) { c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else if ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) { c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; }",0
494,"<S2SV_ModStart>! bitstream_read_bit ( bc ) ) { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { int r ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; return smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; return smacker_decode_tree ( bc, hc, prefix, length ) ; }",0
495,<S2SV_ModStart> ; } m -> msg_namelen = 0 ;,0
496,"<S2SV_ModStart> asdl_seq * type_ignores ; if ( _PyObject_HasAttrId ( obj, & PyId_body ) ) { int res ; int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_body ) ; if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { asdl_seq * body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) {",0
497,<S2SV_ModStart> int m ; jas_int <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> 2 ) { jas_int <S2SV_ModEnd> hstartcol = ( <S2SV_ModStart> - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride,0
498,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
499,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
500,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(M|N)iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\t",0
501,"<S2SV_ModStart> ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags ) ; <S2SV_ModStart> hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave_nested ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } <S2SV_ModEnd> hashbin -> hb_current <S2SV_ModStart> ~ HB_MAGIC ; <S2SV_ModEnd> return 0 ;",0
502,"<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_READONLY ) return - EPERM ; <S2SV_ModStart> ; } up_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, mnt_flags, data, 0 ) ; if (! err ) { lock_mount_hash ( ) ; mnt -> mnt. mnt_flags |= mnt -> mnt. mnt_flags & ~ MNT_USER_SETTABLE_MASK ; mnt -> mnt. mnt_flags = mnt_flags ; touch_mount_namespace ( mnt -> mnt_ns ) ; unlock_mount_hash ( ) ;",0
503,"<S2SV_ModStart> skb ; int <S2SV_ModEnd> copied, err <S2SV_ModStart>, err ; msg -> msg_namelen = len ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr",0
504,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
505,"<S2SV_ModStart> ; if ( serial -> num_ports < 2 || serial -> port [ 0 ] -> bulk_out_endpointAddress < USB_ENDPOINT_NUMBER_MIN || serial -> port [ 0 ] -> bulk_out_endpointAddress > USB_ENDPOINT_NUMBER_MAX ) return - 1 ; port = serial -> port [ 0 ] ; port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER_MIN ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_urbs ) ; ++ j ) port -> write_urbs [ j ] -> pipe = usb_sndbulkpipe ( serial -> dev, port -> bulk_out_endpointAddress ) ; port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER_MAX ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_urbs ) ; ++ j ) port -> write_urbs [ j ] -> pipe = usb_sndbulkpipe ( serial -> dev, port -> bulk_out_endpointAddress ) ; for ( j = 0 ; j < ARRAY_SIZE ( port -> write_urbs ) ; ++ j ) port -> write_urbs [ j ] -> pipe =",0
506,"<S2SV_ModStart> qmode ) { RiffChunkHeader <S2SV_ModEnd> riffhdr ; DS64Chunk <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; WaveHeader wavhdr ; uint32_t bcount ; int64_t total_data_bytes, total_riff_bytes ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_data_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_data_bytes ) ; do_rf64 = 1 ; } else if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_data_bytes",0
507,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ; msg_sys -> msg_name = NULL ; } else { memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ; } <S2SV_ModEnd> total_len = err <S2SV_ModStart> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, total_len, msg_sys -> msg_flags ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_flags & MSG_CMSG_COMPAT ) msg_sys -> msg_flags |= MSG_CMSG_",0
508,"<S2SV_ModStart> inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = NULL ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; struct gfs2_meta_inode * ip_meta = GFS2_I ( inode ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if (",0
509,"<S2SV_ModStart> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> filename, input -> <S2SV_ModEnd> use_i420? ""I420"" <S2SV_ModStart> : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next -> index ) ; if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n",0
510,"<S2SV_ModStart> FALSE ; PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> -> prof_nsc_rle_decompress_data ) ; PROFILER_EXIT ( context -> priv -> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> -> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_",0
511,"<S2SV_ModStart> ; } next_attribute : if ( attr -> children!= NULL ) { if ( ( attr -> children -> type!= XML_TEXT_NODE ) || ( attr -> children -> next!= NULL ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } } else { if ( ( attr -> children!= NULL ) && ( attr -> children -> next!= NULL ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; }",0
512,"<S2SV_ModStart> 0 ) { struct stat s ; <S2SV_ModStart> 0 ) { struct stat s ; if ( stat ( ""/etc/skel/.zshrc"", & s ) == 0 ) { struct stat s ; if ( stat ( ""/etc/skel/.zshrc"", & s ) == 0 ) { if ( copy_file ( ""/etc/skel/.zshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" ) ; } } else { struct stat s ; if ( stat ( ""/etc/skel/.cshrc"", & s ) == 0 ) { if ( copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_",0
513,<S2SV_ModStart> ; if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
514,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
515,<S2SV_ModStart> timr ) ; if ( new_setting ) { <S2SV_ModStart> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; } else { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; },0
516,"<S2SV_ModStart> ; if ( re ) { if (! js_regexec ( J, re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, - 1 ) ; }",0
517,"<S2SV_ModStart> case OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart>, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } <S2SV_ModStart> OFreshOID : if ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart>, 1 ) ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : size = ( len + sizeof ( value ) ) / sizeof ( value ) ; v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest += 1 + size ; } else if ( tag == Object_tag ) { * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest",0
518,"<S2SV_ModStart>, multipart_media ; <S2SV_ModEnd> struct evbuffer * <S2SV_ModStart> = NULL ; <S2SV_ModEnd> size_t content_length ; <S2SV_ModStart> = NULL ; int code = 500, fd = - 1, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; <S2SV_ModEnd> char content_range [ <S2SV_ModStart> ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; if ( ( nranges = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; if ( kv_add ( & resp ->",0
519,"<S2SV_ModStart> FALSE ; ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS ) ; if ( ( isr & KSZ8851_ISR_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS ) ; if ( ( isr & KSZ8851_ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; } n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_",0
520,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> QINDEX_BITS ) ; vpx_wb_write_delta_q ( wb, cm -> y_dc_delta_q ) ; vpx_wb_write_delta_q ( wb, cm -> uv_dc_delta_q ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
521,"<S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
522,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } case <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; state -> url. scheme = & state -> buffer [ state -> offset ++ ] ; state -> buffer [ state -> offset ++ ] = 0 ; break ; case ':' : state -> url. scheme = & state -> buffer [ state -> offset ++ ] ; break ; case '0' : state -> url. scheme = & state -> buffer [ state -> offset ++ ] ; break ; case '1' : state -> url. scheme = & state -> buffer [ state -> offset ++ ] ; break ; case '2' : state -> url. scheme = & state -> buffer [ state -> offset ++ ] ; break ; case '3' : state -> url. scheme = & state -> buffer [ state -> offset ++ ] ; break ; case '4' : state -> buffer [ state -> offset ++ ] = 0 ; break ; case '5' : state -> buffer [ state -> offset ++ ] = 0 ; break ; case '6' : state -> buffer [ state -> offset ++ ] = 0 ; break ; case '7' : state -> buffer [ state -> offset ++ ] = 0 ; break ; case '8' : state ->,0
523,"<S2SV_ModStart> fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) ) ;",0
524,<S2SV_ModStart> int flags ) { mutex_lock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } mutex_unlock ( & ctx -> ctx_lock ) ; <S2SV_ModStart> ) ; } mutex_unlock ( & ctx -> ctx_lock ) ;,0
525,"<S2SV_ModStart> ++ ) { if ( nCurves == 256 ) { if ( nElements == 256 ) { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_8_TO_16 ( j ) ) ; } } else { if ( nCurves == 256 ) { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } }",0
526,"<S2SV_ModStart> need_dev ) { error = - ENODEV ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) ) { error = - ENOENT ; goto out ; } <S2SV_ModEnd> requested_dev_name = tomoyo_realpath_from_path <S2SV_ModStart> path ) ) { error = - ENOENT ; goto out ; } <S2SV_ModEnd> rdev. name <S2SV_ModStart> rdev. name = requested_dev_name ; tomoyo_fill_path_info ( & rdev ) ; out : path_put ( & path ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry ) ; kfree ( path. dentry",0
527,<S2SV_ModStart> ; if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( buf_size < msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; },0
528,"<S2SV_ModStart> ) ; RETVAL_STRINGL <S2SV_ModEnd> ( replaced,",0
529,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL",0
530,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
531,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> bsize ), hbs = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1",0
532,"<S2SV_ModStart> name ) ; if (! name ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
533,<S2SV_ModStart> = 0 ; int row_height = 0 ; <S2SV_ModStart> = 0 ; int row_height = 0 ; <S2SV_ModStart> = 0 ; row_height = 0 ; row_height = s -> frame. height ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; if ( row_height > s -> frame. rows [ row_height ] ) { row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ] ; row_height = s -> frame. rows [ row_height ],0
534,"<S2SV_ModStart> cnt ) { jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; <S2SV_ModStart> cnt ) { jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log_debug ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_log ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n""",0
535,"<S2SV_ModStart> * ptype ; <S2SV_ModEnd> hlen = off <S2SV_ModStart> ; hlen = off + sizeof ( * greh ) ; if ( unlikely (! hlen ) ) goto out_unlock ; type = greh -> protocol ; if ( skb_gro_header_fast ( skb, hlen ) ) { greh = skb_gro_header_fast ( skb, hlen ) ; if (! greh ) goto out_unlock ; type = greh -> protocol ; if ( skb_gro_header_hard ( skb, hlen ) ) { greh = skb_gro_header_slow ( skb, hlen, off ) ; if (! greh ) goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb )",0
536,"<S2SV_ModStart> ; if ( numrows > jas_matind_max ( numrows, numcols ) || numcols > jas_matind_max ( numcols, numrows ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> rows_, sizeof ( jas_seqent_t * ) ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> rows_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i <",0
537,"<S2SV_ModStart> } else { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceOlder. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> nonceOlder.",0
538,"<S2SV_ModStart> ; ret = key_permission <S2SV_ModEnd> ( key_ref,",0
539,<S2SV_ModStart> u4_first_slice_in_pic ) { if ( 0 == ps_dec -> u1_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if ( 0 == ps_dec -> u2_first_slice_in_pic ) { if,0
540,"<S2SV_ModStart> var_off ) ; switch ( opcode ) { case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_DEL : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value",0
541,"<S2SV_ModStart> ; cFYI ( 1 <S2SV_ModEnd>, ""non-NULL <S2SV_blank> inode <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", <S2SV_ModStart> ; cFYI ( 1 <S2SV_ModEnd>, ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", <S2SV_ModStart> ""non-NULL <S2SV_blank> file <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", cfile, cfile -> f_name. name, cfile -> f_name. name, cfile -> f_name. name, cfile -> f_name. name, cfile -> f_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_name. d_",0
542,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX ; info. size = VFIO_PCI_BAR5_REGION_INDEX ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX ; info. size = VFIO_PCI_BAR5_REGION_INDEX ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR0_REGION_INDEX ; info. size = VFIO_PCI_BAR5_REGION_INDEX ; break ; case VFIO_PCI_CONFIG_REGION_INDEX : info. offset = VFIO_PCI_CONFIG_REGION_INDEX ; info. size = pdev -> cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION,0
543,"<S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
544,<S2SV_ModStart> = 1 ; if ( s -> filesize < 0 ) { s -> filesize = - 1 ; s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; } else s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ;,0
545,<S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference <S2SV_ModStart> -> opt. <S2SV_ModEnd> rcv_wscale = rcu_dereference,0
546,"<S2SV_ModStart> char * in, size_t len <S2SV_ModStart> += 4 ; * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } } while ( * in && digit4!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; }",0
547,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
548,"<S2SV_ModStart>, len, total_written <S2SV_ModEnd> ; loff_t offset <S2SV_ModStart> = min_t ( size_t <S2SV_ModEnd>, cur_len, <S2SV_ModStart> ) { copied = min_t ( size_t, total_written, sizeof ( struct cifs_writedata ) ) ; if ( copied < 0 ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> total_written += copied <S2SV_ModStart> ) { copied = min_t ( size_t, total_written, sizeof ( struct cifs_writedata ) ) ; if ( rc ) { rc = - EINVAL ; break ; } rc = cifs_write_allocate_pages ( wdata -> pages, nr_pages ) ; if ( rc ) { kfree ( wdata ) ; break ; } rc = cifs_write_allocate_pages ( wdata -> pages, nr_pages ) ; if ( rc ) { kfree ( wdata ) ; break ; } rc = cifs_write_allocate_pages ( wdata -> pages, nr_pages ) ; if ( rc ) { kfree ( wdata ) ; break ; } rc = cifs_write_allocate_pages ( wdata -> pages, nr_pages ) ;",0
549,"<S2SV_ModStart> ; if (! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ||! ( quirks & CP_RDESC_SWAPPED_MAX_MAX ) ) return rdesc ; for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x19 ; swap ( rdesc [ i + 3 ], rdesc [ i + 1 ] ) ; } else if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x29 ; swap ( rdesc [ i + 3 ], rdesc [ i + 1 ] ) ; }",0
550,"<S2SV_ModStart> { int number_of_frames, <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> ; SvcInternal * const si <S2SV_ModEnd> = get_svc_internal ( <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; number_of_frames = 0 ; number_of_keyframes = 0 ; encode_frame_count = si -> encode_frame_count ; if ( encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f,",0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { len = ( UINT32 ) * in ++ ; <S2SV_ModStart> 4 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else if ( value == * in ) { in ++ ; if ( * in < 0xFF ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { len = ( UINT32 ) * in ++ ; len += 2 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
552,<S2SV_ModStart> = new_cols ; # if CONFIG_HAVE_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMPORAL_TEMP,0
553,<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> char * literal_start <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2,0
554,"<S2SV_ModStart> jas_stream_memobj_t * m <S2SV_ModEnd>, int bufsize <S2SV_ModStart> unsigned char * buf ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return",0
555,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
556,"<S2SV_ModStart>! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; }",0
557,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> void pcrypt_free ( <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_drop_aead ( &,0
558,<S2SV_ModStart> ; if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> width ) ) { if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + w1 ) > ( ptr -> width,0
559,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
560,"<S2SV_ModStart> ) ) { if ( optlen < NDISC_OPTLEN_MIN ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return ; } <S2SV_ModStart> ) ) { if ( optlen < NDISC_OPTLEN_MIN ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return ; } <S2SV_ModStart> ) ) { if ( optlen < NDISC_OPTLEN_MAX ) { if ( optlen < NDISC_OPTLEN_MIN ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return ; } <S2SV_ModStart> ) ) { if ( optlen < NDISC_OPTLEN_MIN ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short\\n"" ) ; return ; }",0
561,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
562,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart> rp ) ; len = nla_len ( rp ) ; if ( len < xfrm_replay_state_esn_len ( up ) || len > xfrm_replay_state_esn_len ( replay_esn ) || len > xfrm_replay_state_esn_len ( up ),0
563,"<S2SV_ModStart> int ret = proc_dointvec <S2SV_ModEnd> ( table,",0
564,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_array <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_array",0
565,<S2SV_ModStart> ; if ( compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps || compno >= p_image -> numcomps ||,0
566,<S2SV_ModStart> ) { return try_then_request_module <S2SV_ModEnd> ( __crypto_lookup_template (,0
567,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
568,"<S2SV_ModStart> void encode_nonrd_sb_row ( VP9_COMMON * cm, MACROBLOCKD * xd <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> MODE_INFO * * prev_mi <S2SV_ModEnd> ; vp9_zero ( <S2SV_ModStart> -> mb. pred_mv ) ; vp9_zero ( cpi -> sf. partition_search_type ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; nonrd_use_partition ( cpi, tile, mi_row",0
569,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { obuf = opipe -> bufs + nbuf ; },0
570,"<S2SV_ModStart> u_int8_t state ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < sizeof ( _dh ) ) goto out_invalid ; <S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) goto out_invalid ; state = dccp_state_table [ CT_DCCP_ROLE_SERVER ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; if ( state == CT_DCCP_INVALID ) { msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; }",0
571,"<S2SV_ModStart> { Fp = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart> ""wb"" ) ; if ( Fp == NULL ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } <S2SV_ModStart> Fp == NULL ) { parser -> http_error_code = HTTP_UNAUTHORIZED ; goto ExitFunction ; } parser -> position = POS_ENTITY ; do { if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } } while ( parser -> position!= POS_COMPLETE ) { status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok_on_close = TRUE ; } else if ( entity_offset + Data_Buf_Size > parser -> msg. entity. length ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ;",0
572,<S2SV_ModStart> ; if ( blkg ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } <S2SV_ModEnd> q -> root_blkg <S2SV_ModStart> ) ; } <S2SV_ModEnd> q -> root_rl,0
573,"<S2SV_ModStart> ; if ( buf_size < ncolors ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( buf_size < lsize || buf_size < rsize ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < ncolors ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < lsize || buf_size < rsize ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < ncolors ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors <S2SV_blank> in <S2SV_blank> frame\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
574,<S2SV_ModStart> ; krb5_data rspac ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ; HDB * s4u2self_impersonated_clientdb = NULL ;,0
575,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; }",0
576,"<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> usbdevfs_connectinfo ci = { <S2SV_ModEnd>. devnum = <S2SV_ModStart> -> devnum,. slow = ps -> dev -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; if",0
577,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> int optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> & 3 ) opt -> __data <S2SV_ModEnd> [ optlen ++ <S2SV_ModStart> IPOPT_END ; opt -> optlen <S2SV_ModEnd> = optlen ; <S2SV_ModStart> ; if ( opt -> optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } kfree ( * optp ) ; * optp = NULL ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
578,"<S2SV_ModStart> ; } retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == ENOSPC ) { xfs_bmap_init ( args -> flist, args -> firstblock ) ; error = xfs_bmap_finish ( args -> flist, & committed ) ; if (! error ) { ASSERT ( committed ) ; args -> trans = NULL ; xfs_trans_ijoin ( args -> trans, dp, 0 ) ; } } else { xfs_bmap_init ( args -> flist, args -> firstblock ) ; error = xfs_bmap_finish ( args -> flist, & committed ) ; if (! error ) { ASSERT ( committed ) ; args -> trans = NULL ; xfs_trans_ijoin ( args -> trans, dp, 0 ) ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt ; }",0
579,"<S2SV_ModStart> = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCVolumeObject, NULL, 0, & deviceObjectCount ) == STATUS",0
580,"<S2SV_ModStart> ""Connection"" ) ; if ( connection == NULL || strcmp ( connection, ""close"" )!= 0 ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ;",0
581,"<S2SV_ModStart> * findalldevs_if ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errmsgbuf ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errbuf ) == - 1 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errmsgbuf ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & findalldevs_if, errbuf ) == - 1 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description )",0
582,"<S2SV_ModStart> ""basename"" ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_TYPE ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_UID ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_CMDLINE ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_UID ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_TYPE ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_TYPE ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_TYPE ) ; if (! dir_basename ) dir_basename = g_hash_table_lookup ( problem_info, FILENAME_TYPE ) ; if (! dir_basename ) dir_basename = g_hash_",0
583,"<S2SV_ModStart> image ) ; if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( *",0
584,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2",0
585,"<S2SV_ModStart> * sk, <S2SV_ModEnd> struct sock_exterr_skb * <S2SV_ModStart> * serr ; <S2SV_ModEnd> serr = SKB_EXT_ERR <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } } <S2SV_ModEnd> err = sock_queue_err_skb",0
586,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
587,"<S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ; <S2SV_ModStart> len ; if (! ND_TTEST2 ( bp [ 0 ], len ) ) goto trunc ;",0
588,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN (",0
589,<S2SV_ModStart> (! dumpable &&! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ),0
590,"<S2SV_ModStart> long ) ; if ( w < sizeof ( long ) ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c"", __func__, w ) ; return ; } if ( w < sizeof ( long ) ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> add_bytes_l2_c"", __func__, w ) ; return ; }",0
591,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
592,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
593,<S2SV_ModStart> i4_payload_size ) ; if (! ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present ) { ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_,0
594,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
595,"<S2SV_ModStart> -> sdma_rht = kcalloc ( num_engines, sizeof ( * dd -> sdma_rht ), GFP_KERNEL ) ; if (! dd -> per_sdma ) { kfree ( dd -> per_sdma ) ; return - ENOMEM ; }",0
596,<S2SV_ModStart> device_data ; mutex_lock <S2SV_ModEnd> ( & dev <S2SV_ModStart> dev ) ; mutex_unlock <S2SV_ModEnd> ( & dev,0
597,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> name, rep_quick, & got_error ) ; if ( got_error ) { printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %s\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"",",0
598,<S2SV_ModStart> ; if ( size <S2SV_ModEnd> < 16 || <S2SV_ModStart> > 256 ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) ( ( unsigned char ) (,0
599,<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB,0
600,<S2SV_ModStart> } pairs = pcalloc <S2SV_ModEnd> ( pcount *,0
601,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if (! strcmp ( var, ""rspfile"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ;",0
602,<S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_,0
603,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; <S2SV_ModStart> agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Type"" ) ; if ( NULL == ( v = agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Transfer-Encoding"" ) ) { return bad_request ( c, 400, __LINE__ ) ; } if ( NULL == ( v = agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Type"" ) ) { return bad_request ( c, 400, __LINE__ ) ; } if ( NULL == ( v = agoo_con_header_value ( c -> buf, ( int ) ( hend - c -> buf ), ""Content-Transfer-Encoding"" ) ) { return bad_request ( c, 400, __LINE__ ) ; } if ( NULL == ( v = agoo_",0
604,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
605,"<S2SV_ModStart> G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
606,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = posix_acl_update ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; error = posix_acl_update ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_errno ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_write ; fh_unlock ( fh ) ; <S2SV_ModEnd> fh_drop_write ( fh",0
607,"<S2SV_ModStart> * ue ; fprintf ( stdout, ""Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( array, & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } }",0
608,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func",0
609,"<S2SV_ModStart> ) ; if (! pc ) return - EINVAL ; <S2SV_ModStart> case 1 : if (! pc -> componentIdent ) return - EINVAL ; <S2SV_ModStart> case 2 : if (! pc -> lengthComponentIdent ) return - EINVAL ; <S2SV_ModStart> break ; case 3 : if (! pc -> componentIdent ) return - EINVAL ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if (! pc -> lengthComponentIdent ) return - EINVAL ; comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; break ; case 6 : if (! pc -> componentIdent ) return - EINVAL ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 7 : if (! pc -> lengthComponentIdent ) return - EINVAL ; comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, comp_len ) ; p += comp_len ; tolen",0
610,<S2SV_ModStart> ) ) ; if ( rp -> rm_call. cb_vers == NFS_VER3 || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS || rp -> rm_call. cb_proc >= NFS_NPROCS ) goto trunc ;,0
611,"<S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %d]"", tlv_len ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank>",0
612,"<S2SV_ModStart> ; ctxt -> instate = XML_PARSER_PI ; return ; } if ( ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; ctxt -> instate = XML_PARSER_PI ; return ; } if ( ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) && ( ctxt -> instate!= XML_PARSER_PI ) ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ;",0
613,"<S2SV_ModStart> sk ) ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> slow ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) { inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if (! inet_opt ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INERRORS, is_udplite ) ; } if (! inet_opt ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INERRORS, is_udplite ) ; } if (! inet_opt ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INERRORS, is_udplite ) ; }",0
614,"<S2SV_ModStart> len ) { <S2SV_ModEnd> ND_TCHECK2 ( * <S2SV_ModStart> ) ) ; ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> trunc ; } ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tlen -= sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ;",0
615,"<S2SV_ModStart> int tagval ; if (! <S2SV_ModStart> ) ; if (! ber_in_header ( s, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header ( s, & tagval, & length ) ||! ber_in_header (",0
616,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> int elt ; <S2SV_ModStart> ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i = * cp ++ ) & INDIR_MASK )!= INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return",0
617,"<S2SV_ModStart> args ) ; valuelen = args -> valuelen ; <S2SV_ModStart> valuelen ) ; if ( valuelen > XFS_IFORK_ASIZE ( dp -> i_mount ) ) { error = xfs_bmapi_truncate ( args -> trans, dp, ( xfs_fileoff_t ) lblkno, valuelen, XFS_BMAPI_ATTRFORK | XFS_BMAPI_METADATA, valuelen ) ; if ( error ) { error = xfs_bmap_cancel ( args -> flist, & committed ) ; xfs_bmap_cancel ( args -> flist, & committed ) ; args -> trans = NULL ; return ( error ) ; } xfs_bunmapi ( args -> trans, dp, lblkno, blkcnt, XFS_BMAPI_ATTRFORK | XFS_BMAPI_METADATA, args -> firstblock, args -> total, & map, & nmap, args -> flist ) ; if (! nmap ) { xfs_bmap_cancel ( args -> flist, & committed ) ; args -> trans = NULL ; return ( error ) ;",0
618,"<S2SV_ModStart> ; int rv <S2SV_ModEnd> = Socket_print ( <S2SV_ModStart>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
619,"<S2SV_ModStart> } pid_t child ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } <S2SV_ModStart> 0 ) ; if ( is_link ( dest ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", dest ) ; exit ( 1 ) ; } <S2SV_ModEnd> rv = copy_file <S2SV_ModStart> ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } unlink ( src ) ; }",0
620,<S2SV_ModStart> flags ) ; kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> lip_count = fcstats -> fc. lip_count ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ;,0
621,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
622,<S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return 0 ; } <S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return GIT_EBUFS ; },0
623,"<S2SV_ModStart>, address ) ; spin_lock_irqsave ( & vma -> vm_page_table_lock, flags ) ; <S2SV_ModStart> ; unlock : spin_unlock_irqrestore ( & vma -> vm_page_table_lock, flags ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; unlock : spin_unlock_irqrestore ( & vma -> vm_page_table_lock, flags ) ; if ( page_table ) { pte_unmap_unlock ( & vma -> vm_page_table, ptl ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) goto unlock ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if ( vma -> vm_flags & VM_WRITE ) entry = pte_mkwrite ( pte_mkdirty ( entry ) ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & pt",0
624,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ;,0
625,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> * new_data, * old_data ; new_data = env -> insn_aux_data ; old_data = env -> insn_aux_data ; <S2SV_ModStart> 1 ) ) ; env -> insn_aux_data = new_data ;",0
626,"<S2SV_ModStart> ; ND_TCHECK ( dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""vflag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_frag ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK, sizeof ( struct ip6_hdr ) ) ) ; } if ( ( EXTRACT_16BITS ( & dp -> ip6f_offlg ) & IP6F_OFF_MASK )!= 0 ) return - 1 ;",0
627,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(",0
628,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
629,"<S2SV_ModStart> 0 ) ; assert <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> 0 ) ; assert <S2SV_ModEnd> ( sp -> <S2SV_ModStart> 0 ) { assert ( ( occ0 % rowsize ) == 0 ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( ( occ0 % rowsize ) == 0 ) ; assert ( ( sp -> decodepfunc ) ( tif, op0, rowsize ) ; op0 += rowsize ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( ( occ0 % rowsize ) == 0 ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( ( occ0 % rowsize ) == 0 ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( ( occ0 % rowsize ) == 0 ) ; assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { assert ( sp -> decodep",0
630,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( buf_size, 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, n -> order ) ; o += 2 ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount",0
631,"<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL || kg_locate_iov ( iov, iov",0
632,<S2SV_ModStart> = NULL ; hugetlbfs_put_super ( sb ) ; if ( sb -> s_root ) hugetlbfs_put_super ( sb -> s_root ) ; if ( sb -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root ->,0
633,<S2SV_ModStart> ; if ( ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) ) && ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ) && ( ( param -> testflag & ( T_FORCE_UNIQUENESS | T_FORCE_UNIQUENESS ) ),0
634,"<S2SV_ModStart> ) { int alloc <S2SV_ModEnd> ; char * <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> ; res = Curl_convert_from_network <S2SV_ModEnd> ( handle, <S2SV_ModStart>, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in ; string ++ ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) { * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
635,"<S2SV_ModStart> 4 ) ; RAnalOp * anal ; RAnalOp * next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"", next_op. jump ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},""",0
636,"<S2SV_ModStart> ; if ( unlikely ( iov_iter_single_seg_count ( i ) ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } <S2SV_ModStart> again ; } iov_iter_advance ( i, copied ) ; pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ;",0
637,"<S2SV_ModStart> drop_recycle_buffer ; } <S2SV_ModEnd> desc = ops <S2SV_ModStart> -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } b43err ( ring -> dev -> wl, ""DMA <S2SV_blank> RX <S2SV_blank> buffer <S2SV_blank> too <S2SV_blank> small <S2SV_blank> "" ""(len: <S2SV_blank> %u, <S2SV_blank> buffer: <S2SV_blank> %u)"", tmp, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot )",0
638,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, free_engineID, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUT",0
639,"<S2SV_ModStart> |= SEEN ; if (! name ) continue ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, name, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * )",0
640,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, prog -> flags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) { if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, prog -> flags | eflags, sub ) ; if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, prog -> flags | eflags, sub ) ; else match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; }",0
641,<S2SV_ModStart> 0 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( ret < 0 ) return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 0 ) { if ( ret < 0 ) return AVERROR_INVALID,0
642,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
643,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
644,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
645,"<S2SV_ModStart> timer ) ; <S2SV_ModEnd> list_for_each_entry_safe ( slave <S2SV_ModStart> tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } <S2SV_ModEnd> mutex_unlock ( &",0
646,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; }",0
647,"<S2SV_ModStart> ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
648,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; list_for_each_entry_safe ( dev, n, & port -> sas_list, dev_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> disco_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_",0
649,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
650,<S2SV_ModStart> ; int pkt_len <S2SV_ModEnd> ; char line <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_,0
651,"<S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; <S2SV_ModStart> 0 ) ; if (! dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ) return ( 0 ) ; dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num <S2SV_ModEnd> ), s",0
652,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( newRasterSize / ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( newRasterSize / ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32_t ) ( uint_fast32,0
653,"<S2SV_ModStart> can_read_key : if ( key_is_positive ( key ) ) { ret = - EINVAL ; goto error2 ; } <S2SV_ModStart> = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } <S2SV_ModEnd> error2 : key_put",0
654,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & <S2SV_ModStart> user ) ) { ret_t ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret_error ; ret = init_filter (",0
655,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
656,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return 0 ;,0
657,<S2SV_ModStart> ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = 0 ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC,0
658,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> lintr <S2SV_blank> device\\n"", __func__, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
659,"<S2SV_ModStart> ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"", size, msg_flags, timeo",0
660,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath,",0
661,<S2SV_ModStart> 0 ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while ( <S2SV_ModEnd> * t && <S2SV_ModStart> * t &&! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ;,0
662,"<S2SV_ModStart> 0 ) { # ifdef USE_BCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; # endif } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> deleted ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; # endif } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # endif if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ; # endif if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i",0
663,"<S2SV_ModStart> ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; * objp = NULL ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; * objp = NULL ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p )",0
664,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY (",0
665,"<S2SV_ModStart> return 1 ; if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( dp -> dccps_role == DCCP_ROLE_SERVER ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; }",0
666,"<S2SV_ModStart> msixcap ; assert ( <S2SV_ModEnd> msgnum >= 1 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_populate_msixcap ( & msixcap, msgnum, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCI",0
667,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> ( dentry ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> ovl_drop_write ( dentry,0
668,<S2SV_ModStart> ( isspace ( <S2SV_ModEnd> * p ),0
669,"<S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } <S2SV_ModEnd> r = sshpkt_get_cstring <S2SV_ModStart> ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, &",0
670,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
671,"<S2SV_ModStart> ) ; for ( i = 0 ; i < ctx -> hdrmax ; i ++ ) if ( mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; } if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> hdrmax ) { mutt_debug ( 1, ""new <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrmax = i ; }",0
672,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; }",0
673,<S2SV_ModStart> ++ ) { Jpeg2000Prec_t <S2SV_ModEnd> * prec = <S2SV_ModStart> ++ ) { Jpeg2000Prec_t <S2SV_ModEnd> * prec = <S2SV_ModStart> prec = band -> prec + precno ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; },0
674,"<S2SV_ModStart>!= NULL ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } }",0
675,"<S2SV_ModStart> fl6 ) ; rcu_read_lock ( ) ; <S2SV_ModStart> -> opt, rcu_dereference ( <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock ( ) ; <S2SV_ModStart> = ip6_xmit ( sk, skb, & fl6, rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> tclass ), rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> np -> tclass ), rcu_dereference ( <S2SV_ModStart> tclass ), rcu_dereference ( rcu_dereference ( rcu_dereference ( <S2SV_ModStart> tclass ), rcu_dereference ( <S2SV_ModStart> tclass ), rcu_dereference ( rcu_dereference ( rc",0
676,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE select_tx_mode ( const VP9_COMP * cpi ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart>. lossless ) { return ONLY_4X4 ; } else if ( <S2SV_ModEnd> cpi -> sf <S2SV_ModStart>. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ]? cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] : cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] : cp,0
677,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { return <S2SV_ModEnd> malloc ( size <S2SV_ModStart> size ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
678,"<S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ( printval, <S2SV_ModEnd> im -> gdes",0
679,<S2SV_ModStart> return NULL ; } if ( shdr -> sh_size > sz ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_,0
680,<S2SV_ModStart> < buf2 -> size ) { return - 1 ; } else if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; },0
681,"<S2SV_ModStart> ; if ( ( i = cdf_read_ssat ( & info, & h, & ssat ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> SSAT"" ; goto out1 ; } # ifdef CDF_DEBUG cdf_dump_ssat ( ""SSAT"", & ssat, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif if ( ( i = cdf_read_dir ( & info, & h, & dir, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out2 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & ssat, CDF_SHORT_SEC_SIZE ( & h ) ) ; # endif if ( ( i = cdf_read_short_stream ( & info, & h, & sst, & dir ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & sst, CDF_SHORT_SEC_SIZE ( &",0
682,"<S2SV_ModStart> ; size_t sz ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if (! info ) return NULL ;",0
683,"<S2SV_ModStart> } } if ( vars -> cnt < 2 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
684,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_P_MAX ) return - EINVAL,0
685,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
686,<S2SV_ModStart> -> _eip ; <S2SV_ModEnd> rc = em_push <S2SV_ModStart> case 4 : rc = em_push ( ctxt ) ; break ; } case 5 : rc = em_push ( ctxt ) ; break ; case 6 : rc = em_jmp_far ( ctxt ) ; break ; case 7 : rc = em_push ( ctxt ) ; break ; case 8 : rc = em_push ( ctxt ) ; break ; case 9 : rc = em_push ( ctxt ) ; break ; case 10 : rc = em_push ( ctxt ) ; break ; case 11 : rc = em_push ( ctxt ) ; break ; case 12 : rc = em_push ( ctxt ) ; break ; case 13 : rc = em_push ( ctxt ) ; break ;,0
687,"<S2SV_ModStart> & url ) ; if (! imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ) { mutt_err ( 1, ""Invalid <S2SV_blank> mailbox <S2SV_blank> name: <S2SV_blank> %s\\n"", list. name ) ; return ; }",0
688,"<S2SV_ModStart> secret, void <S2SV_ModEnd> * end, <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> old_key ; struct <S2SV_ModStart> ; struct ceph_timespec <S2SV_ModEnd> new_validity ; struct <S2SV_ModStart> ; struct ceph_crypto_key <S2SV_ModEnd> new_session_key ; struct ceph_buffer * new_ticket_blob ; unsigned long new_expires, new_renew_after ; u64 new_secret_id ; int ret ; dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!=",0
689,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
690,"<S2SV_ModStart> init_msg ; n2l ( p, s -> session -> tlsext_tick_lifetime_hint ) ; n2s ( p, ticklen ) ; if ( ticklen + 6 > n ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH ) ; goto f_err ; }",0
691,<S2SV_ModStart> b ) ; <S2SV_ModEnd> r = sd_event_add_io,0
692,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
693,"<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart> expr -> array_ref. entry ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_IDENT <S2SV_ModStart> expr -> ident. ident ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. field ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> ident. entry ) ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF",0
694,<S2SV_ModStart> lun ) sas_eh_defer_cmd ( cmd ) ; list_del_init ( & cmd -> eh_entry ) ;,0
695,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset",0
696,<S2SV_ModStart> = 0 ; struct sockaddr_storage addr = & asoc -> peer. primary_addr ; struct ip_sockaddr_storage addr = & asoc -> peer. primary_addr ; struct ip_sockaddr_storage addr = sctp_sk ( sk ) -> addr ; struct ip_sockaddr_storage addr = sctp_sk ( sk ) -> addr ; if ( addr -> sa_family!= AF_INET6 ) addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_,0
697,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
698,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
699,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double )",0
700,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & StartWPG ) ; return NULL ; }",0
701,"<S2SV_ModStart> ctxt ) { register_address_increment ( ctxt, reg_read ( ctxt, VCPU_REGS_RCX ), - 1 ) ; if ( address_mask ( ctxt, reg_read ( ctxt, VCPU_REGS_RCX )!= 0 ) && ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags ) ) { if ( ctxt -> b == 0xe2 || test_cc ( ctxt -> b ^ 0x5, ctxt -> eflags",0
702,,1
703,"<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ; res = platform_get_resource ( pdev, IORESOURCE_MEM, 0 ) ; if (! res ) return - EINVAL ; <S2SV_ModEnd> freq_reg += HI3660_STUB_CLOCK_DATA",0
704,"<S2SV_ModStart> : if ( <S2SV_ModEnd> position > SIGNED_SIZEOF <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, whence ) ; return ; } ; if ( <S2SV_ModEnd> psf -> header",0
705,<S2SV_ModStart> out_mutex ; } <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
706,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } midi_data += 4 ; midi_size -= 4 ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_COR",0
707,"<S2SV_ModStart> |= SOCK_SNDBUF_LOCK ; sk -> sk_sndbuf = min_t ( u32, <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ;",0
708,"<S2SV_ModStart> * bh ; <S2SV_ModEnd> bh = udf_read_tagged <S2SV_ModStart> TAG_IDENT_LVD ) ; if (! bh ) goto out <S2SV_ModEnd> ; bh = <S2SV_ModStart> struct logicalVolDesc * ) bh -> b_data ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> mapTableLength ) ) ; if ( ret ) goto out_bh ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else if ( type == 1 ) { struct genericPartitionMap1 * gpm1 = ( struct genericPartitionMap1 * ) gpm ; map -> s_partition_type = UDF",0
709,"<S2SV_ModStart> long n ; JAS_DBGLOG ( 1, ( ""BMP: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! bmp_gethdr ( in, & hdr ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> header\\n"" ) ; return 0 ; } jas_eprintf ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. res1, hdr. reserved2, hdr. off ) ) ; if (! bmp_getinfo ( in, & info ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d",0
710,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
711,<S2SV_ModStart> u4_ofst ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
712,"<S2SV_ModStart> ; save_text_from_text_view ( g_tv_comment, FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( pages [ PAGENO_EDIT_COMMENT ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, FALSE ) ; on_comment_changed ( gtk_text_view_get_buffer ( g_tv_comment ), NULL ) ; } if ( pages [ PAGENO_EVENT_PROGRESS ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, FALSE ) ; on_progress_changed ( gtk_text_view_get_buffer ( g_tv_progress ), NULL",0
713,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> entity ) continue ; if ( copy_to_user ( & links -> links [ l ]. source, & link. source ) ) return - EFAULT ; media_device_kpad_to_upad ( & entity -> links [ l ]. sink, & link. sink ) ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. source, & link. source ) ; media_device_kpad_to_upad ( entity -> links [ l ]. sink, & link. sink ) ; link. flags = entity -> links [ l ]. flags ; link. flags = entity -> links [ l ]. flags ;",0
714,<S2SV_ModStart> ) ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; } else if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; } else if ( line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST,0
715,"<S2SV_ModStart>, extent ; size_t width = sun_info. width ; size_t height = sun_info. height ; size_t depth = sun_info. depth ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, extent ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, """,0
716,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart> client_principal, hdb_entry_ex <S2SV_ModEnd> * krbtgt,",0
717,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
718,"<S2SV_ModStart> -> loc_addr ; ireq -> opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ; dccp_sync_mss ( newsk, dst_mtu ( dst ) ) ;",0
719,<S2SV_ModStart> struct xmlparser parser ; data -> portListing = NULL ; data -> portListingLength = 0 ; <S2SV_ModStart> l_head = NULL ; data -> portListingStart = 0 ; parser. portListingEnd = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstarteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ;,0
720,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> offset!= 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, csum_partial ( <S2SV_ModEnd> skb_transport_header ( skb <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0",0
721,"<S2SV_ModStart> pfn ) ; kvm_iommu_put_pages ( kvm, slot -> base_gfn, slot -> npages <S2SV_ModEnd> ) ; gfn",0
722,"<S2SV_ModStart> 4 ] = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0",0
723,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; task = <S2SV_ModStart> event ) ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF ; perf_event_ctx_unlock <S2SV_ModEnd> ( event ),0
724,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [,0
725,"<S2SV_ModStart> ; struct free_nid <S2SV_ModEnd> * i ; <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err =",0
726,<S2SV_ModStart> ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag )? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag )? VP9D_DEBUG_CLR_BLK_MODES : 0 ; flags -> color_b_modes_flag = ( ctx -> dbg_color_b_modes_flag )? VP9D_DEBUG_CLR_BLK_MODES : 0 ; flags -> display_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag )? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ; flags -> display_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag )? VP9D_DEBUG_CLR_BLK_MODES : 0 ; flags -> display_b_modes_flag = ( ctx -> dbg_color_b_modes_flag )? VP9D_DEBUG_CLR_BLK,0
727,"<S2SV_ModStart> ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, extra.",0
728,<S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len > sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) { kfree_skb ( skb_out ) ; return - ENOBUFS ; } <S2SV_ModStart> ) ) ; if ( hdr -> sadb_msg_len > sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) { kfree_skb ( skb_out ) ; hdr = ( struct sadb_msg * ) hdr ; hdr -> sadb_msg_len = sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ; hdr -> sadb_msg_type = SADB_X_SPDFLUSH ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_,0
729,<S2SV_ModStart> ) return ; if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( event >= SNDRV_TIMER_EVENT_START && event <= SNDRV_TIMER_EVENT_PAUSE ) { if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_BROADCAST ) { if ( tu -> flags & SNDRV_TIMER_IFLG_B,0
730,"<S2SV_ModStart> - 1 ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> long"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; while ( * fmt ) { int opt = * fmt ++ ; size_t size = optsize ( L, opt, & fmt ) ; pos += gettoalign ( pos, & h, opt, size ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; luaL_argcheck ( L, pos + size <= ld, 2, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( opt ) { case 't' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; lua_pushnumber ( L, res ) ; break ; } case",0
731,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )",0
732,"<S2SV_ModStart> ; int n <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> unit_size ) { n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_MULTI_FIXED : { struct oz_multiple_fixed * body = ( struct oz_multiple_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_multiple_fixed ) + 1 ; int count ; int i ; if (! count ) break ; count = data_len / count ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc",0
733,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; memset ( store_reg, 0, sizeof ( store_reg ) ) ; <S2SV_ModStart> timer ) ; memset ( store_reg, 0, sizeof ( store_reg ) ) ;",0
734,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ; int rv <S2SV_ModEnd> = copy_file ( <S2SV_ModStart> 0 ) ; fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ;",0
735,<S2SV_ModStart> IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IM,0
736,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
737,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank>!= EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; }",0
738,<S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb - 1 ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb - 1 ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; <S2SV_ModStart> ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; sfb = sfb - 1 ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_SUPPORTED ; if ( sfb < 0 ) return ERROR_QMF_HBE_DATA_NOT_,0
739,<S2SV_ModStart> 2 ] ; pixel_depth = get_ushort ( & tga [ 5 ] ) ; image_desc = tga [ 7 ] ; <S2SV_ModStart> # if 0 x_origin = get_ushort ( & tga [ 8 ] ) ; y_origin = get_ushort ( & tga [ 10 ] ) ; image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ushort ( & tga [ 13 ] ) ; <S2SV_ModStart> # endif image_w = get_ushort ( & tga [ 13 ] ) ; image_h = get_ushort ( & tga [ 14 ] ) ; image_w = get_ushort ( & tga [ 15 ] ) ; image_h = get_ushort ( & tga [ 16 ] ) ; pixel_depth = tga [ 15 ] ; image_desc = tga [ 16 ] ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len,0
740,<S2SV_ModStart> rdma_ucm_cmd_hdr hdr ; size_t <S2SV_ModEnd> ret ; if,0
741,"<S2SV_ModStart> tp ) { if <S2SV_ModEnd> ( CPUCLOCK_WHICH ( <S2SV_ModStart> ( which_clock ) == CPUCLOCK_SCHED ) { tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart>. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; tp -> tv_nsec = 0 ; } else { tp -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> tp ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
742,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
743,"<S2SV_ModStart> lua_module ) ; lualua_server_cfg * server_cfg = ap_get_module_config ( r -> server -> module_config, & lua_module ) ; lua_authz_provider_spec * prov_spec = parsed_require_line ; lualua_dir_cfg * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; <S2SV_ModStart> r ) ; if (! lua_checkstack ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank>",0
744,<S2SV_ModStart> * prev ; unsigned long stack_guard_gap ; <S2SV_ModStart> &= PAGE_MASK ; stack_guard_gap = ( address - vma -> vm_start ) >> PAGE_SHIFT ; <S2SV_ModStart> = security_mmap_addr ( <S2SV_ModEnd> address ) ;,0
745,"<S2SV_ModStart> { umode_t mode = inode -> i_mode ; posix_acl_update_mode ( & inode -> i_mode, & acl ) ; <S2SV_ModStart> { umode_t mode = inode -> i_mode ; posix_acl_update_mode ( & inode -> i_mode, & acl ) ; error = posix_acl_update_mode ( & inode -> i_mode, & acl ) ; if ( error <= 0 ) { acl = NULL ; if ( error <= 0 ) return error ; } error = xfs_set_mode ( inode, mode ) ; if ( error <= 0 ) { acl = NULL ; if ( error <= 0 ) return error ; } error = xfs_set_mode ( inode, mode ) ; if ( error ) return error ; } <S2SV_ModEnd> error = xfs_set_mode",0
746,"<S2SV_ModStart> char * data, <S2SV_ModEnd> int optional ) <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } <S2SV_ModEnd> # ifdef HAVE_STATVFS <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } # ifdef HAVE_STATVFS if ( statvfs ( fsname, & sb ) == 0 ) { unsigned long required_flags = rqd_flags ; if ( sb. f_flag & MS_NOSUID ) required_flags |= MS_NOSUID ; if ( sb. f_flag & MS_RDONLY ) required_flags |= MS_",0
747,"<S2SV_ModStart> quantum_type ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
748,<S2SV_ModStart> -> it_overrun ; <S2SV_ModEnd> ++ timr -> <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
749,"<S2SV_ModStart> ""://"" ) ; if ( proto_end == url ) return - 1 ; if (",0
750,"<S2SV_ModStart>, struct static_key <S2SV_ModEnd> * done_key ) <S2SV_ModStart> flags ) ; if (! done_key ) { spin_unlock_irqrestore ( & lock, flags ) ; return false ; } <S2SV_ModEnd> spin_lock_irqsave ( & <S2SV_ModStart> flags ) ; if (! done_key ) { spin_unlock_irqrestore ( & lock, flags ) ; return false ; } <S2SV_ModEnd> __net_random_once_disable_jump ( done_key",0
751,"<S2SV_ModStart> -> actual ; <S2SV_ModEnd> if ( io_data <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; <S2SV_ModEnd> usb_ep_free_request ( io_data <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> io_data -> kiocb",0
752,"<S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> srr &&! <S2SV_ModStart> ; if ( opt -> opt. <S2SV_ModEnd> srr &&! <S2SV_ModStart> &&! skb_sec_path ( skb ) ) IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_REJECTED ) ; icmp_send ( skb, ICMP_DEST_UNREACH, htonl ( mtu ) ) ;",0
753,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
754,"<S2SV_ModStart> prep ) { <S2SV_ModEnd> struct trusted_key_payload * <S2SV_ModStart> trusted_key_payload * p <S2SV_ModEnd> ; struct trusted_key_options <S2SV_ModStart> trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } if (! new_o -> pcrlock ) { pr_info ( ""trusted_key: <S2SV_blank> pcrlock <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } if (! p -> keyhandle ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } dump_payload ( p ) ; dump_payload ( p ) ; dump_payload ( new_p ) ; dump_",0
755,"<S2SV_ModStart> 1 ; } if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> bmp_getint32"" ) ; return - 1 ; } <S2SV_ModStart> << 24 ) ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> bmp_getint32"" ) ; return - 1 ; }",0
756,"<S2SV_ModStart>, lci_o ; mutex_lock ( & rose_loopback_lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & rose_loopback_lock ) ; <S2SV_ModStart> 4 ) ; mutex_unlock ( & rose_loopback_lock ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( sk, skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } } }",0
757,"<S2SV_ModStart> out_free ; } memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> guest_phys_addr ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if (! memslot ) memslot = id_to_memslot ( kvm -> memslots, mem -> guest_phys_addr ) memslot = id_to_memslot ( kvm -> memslots, mem ->",0
758,<S2SV_ModStart> indev!= NULL && indev -> dead ) { if (! indev ) return NF_DROP ; } <S2SV_ModStart> indev!= NULL && indev -> dead ) { ifa = indev -> ifa_list ; newdst = ifa -> ifa_local ; } rcu_read_unlock ( ) ; if (! newdst ) return NF_DROP ;,0
759,"<S2SV_ModStart> fdt ) ; const char * const name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; break ; case FDT_NOP : include = want >= 2 ; stop_at = offset ; break ; case FDT_BEGIN_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; break ; case FDT_END_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> ; name = fdt_get_name ( fdt, offset, &",0
760,"<S2SV_ModStart> ; if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && dff_chunk_header. ckDataSize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %l",0
761,"<S2SV_ModStart> ; if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if ( j < 0 ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; }",0
762,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
763,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; }",0
764,"<S2SV_ModStart> ; int ret = <S2SV_ModEnd> - EOPNOTSUPP ; <S2SV_ModStart> - EOPNOTSUPP ; } if ( wlen < 1 || wlen > MAX_XFER_SIZE ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } mutex_lock ( & d -> data_mutex ) ; st -> data [ 0 ] = cmd ; memcpy ( & st -> data [ 1 ], wbuf, wlen ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 <S2SV_ModEnd> ) ; mutex_unlock",0
765,"<S2SV_ModStart> ; client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ;",0
766,<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) return - 1 ;,0
767,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
768,"<S2SV_ModStart> ; dentry = btrfs_lookup_dir_item ( path, root -> root_key. objectid ) ; if (! dentry ) { ret = - ENOENT ; goto root_item_alloc_fail ; } dir_item = btrfs_lookup_dir_item ( path, root -> root_key. dirid, new_uuid ) ; if (! dir_item ) { ret = - ENOENT ; goto root_item_alloc_fail ; } dir_item = btrfs_lookup_dir_item ( path, root -> root_key. dirid ) ; if (! dir_item ) { ret = - ENOENT ; goto root_item_alloc_fail ; } dir_item = btrfs_lookup_dir_item ( path, root -> root_key. dirid, new_uuid ) ; if (! dir_item ) { ret = - ENOENT ; goto root_item_alloc_fail ; } dir_item = btrfs_lookup_dir_item ( path, root -> root_key. dirid, new_uuid ) ; if (! dir_item ) { ret = - ENOENT ; goto root_item_alloc_",0
769,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> s ) ; <S2SV_ModEnd> list_del_init ( & <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> NULL ) { size_t <S2SV_ModEnd> chanmap_size = psf,0
771,"<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf",0
772,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
773,"<S2SV_ModStart> ip6t_entry ) && ( <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT",0
774,"<S2SV_ModStart> ( xref_t ) <S2SV_ModEnd> * pdf -> <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
775,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
776,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> opt = xchg <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> sock_kfree_s ( sk <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
777,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin = NULL ; <S2SV_ModEnd> if (!,0
778,"<S2SV_ModStart> ; } break ; case IPV6_MULTICAST_MSFILTER : { struct group_filter gsf ; int err ; if ( copy_from_user ( & gsf, optval, GROUP_FILTER_SIZE ( 0 ) ) ) return - EFAULT ; if ( gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf. gf_group. ss_family!= AF_INET6 || gsf.",0
779,"<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_v4_del_protocol <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; sctp_v6_protosw_exit ( ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_assoc_hashbucket, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; kfree ( sctp_ep_hashtable ) ; free_pages ( ( unsigned long ) sctp_port_hashbucket, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ;",0
780,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; <S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; <S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""disco"", & disco_flags ) ; <S2SV_ModEnd> } <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
781,"<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> ; netdev_notifier_info_init ( & info, dev ) ; return masq_device_event ( this, event, & info ) <S2SV_ModEnd> ; } <S2SV_null>",0
782,<S2SV_ModStart> ( ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ( ) ) ; rcu_read_unlock ( ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ; <S2SV_ModEnd> leave_mm ( smp_processor_id <S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
783,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; }",0
784,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i =,0
785,<S2SV_ModStart> task -> slow_task ) { mutex_lock ( & task -> slow_task -> lock ) ; <S2SV_ModStart> (! del_timer ( & task -> slow_task -> timer ) ) { mutex_unlock ( & task -> slow_task -> lock ) ; return ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
786,"<S2SV_ModStart> name ) { if (! ( dst = fopen ( name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } dst_name = malloc ( strlen ( name ) * 2 + 16 ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } dst = fopen ( dst_name, ""w"" ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"" ) ; return ; }",0
787,"<S2SV_ModStart> ; if ( addr_str_length < sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } <S2SV_ModStart> ) ; if ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } <S2SV_ModStart> ) ) { if ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; } <S2SV_ModStart> ) ; if ( addr_str_length < sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> %d"", addr_str_length ) ; return - 1 ; }",0
788,"<S2SV_ModStart> case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } default : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_",0
789,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPool",0
790,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> chan_mutex ) ; <S2SV_ModStart> dead = 1 ; mutex_unlock ( & pch -> chan_mutex ) ;,0
791,"<S2SV_ModStart> { struct btrfs_dir_item <S2SV_ModEnd> * di ; <S2SV_ModStart> = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } if (! di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_insert_xattr_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, value, size ) ; if ( ret == - EOVERFLOW ) ret = - EEXIST ; if ( ret == - EOVER",0
792,"<S2SV_ModStart> 0xbf ) return 1 ; if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } <S2SV_ModStart> op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } <S2SV_ModStart> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short"", __func__ ) ; return 1 ; } if ( op -> len < 1 ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> short <S2SV_blank> "", __func__ ) ; return 1 ; }",0
793,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
794,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
795,"<S2SV_ModStart> = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; p = key -> payload. data [ 0 ] ; if ( p -> key_len > 32767 ||! p -> key [ p -> key_len ] ) return - EINVAL ; if (! p -> key [ p -> key_len ]. keyhandle ) { ret = - EINVAL ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> key_len > 32767 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( p -> key_len > 32767 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)",0
796,"<S2SV_ModStart> ++ ; NEED_IP <S2SV_ModEnd> ( 1 ) <S2SV_ModStart> endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { const unsigned char * ie = ip + t ; unsigned char * oe = op + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < ie ) ; ip += 8 ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; } while ( ip < oe ) ; ip = oe ; op = ie ; } else # endif { # if defined ( CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS ) if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) { const unsigned char * ie = ip + t ; unsigned char * oe = op + t ; do { COPY8 ( op, ip ) ; op += 8 ; ip += 8 ; do {",0
797,"<S2SV_ModStart> ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { if (! fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT",0
798,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
799,"<S2SV_ModStart> out6 : rdmsrl_safe ( MSR_EFER, & host_efer ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_bitmap_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_bitmap_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_",0
800,"<S2SV_ModStart> 0 ) ; if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name < bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\",0
801,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
802,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> baseline_gf_interval ) / ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc -> baseline_gf_interval + ( rc ->,0
803,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i - 1 ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i - 1 ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i - 1 ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> untrusted <S2SV_blank> option"", ""--allow-untrusted"" ) ; else if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s",0
804,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
805,<S2SV_ModStart> -= INDENT_INCR ; } if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; <S2SV_ModStart> -= INDENT_INCR ; },0
806,"<S2SV_ModStart> + tail ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; } else { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]""",0
807,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static <S2SV_ModStart> } <S2SV_null> static,0
808,"<S2SV_ModStart> ib ] ; memset ( d, 0, sizeof ( BLOCKD ) ) ;",0
809,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
810,"<S2SV_ModStart> ; if ( test_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
811,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( sk -> sk_filter, sock_owned_by_user ( sk ) ) ; if ( f -> type_mask ) { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } else { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; }",0
812,"<S2SV_ModStart> decrypt_cb ) { if (! pbi -> decrypt_state ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } <S2SV_ModStart> } if ( pbi -> decrypt_state ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; } if ( pbi -> decrypt_state ) { int n = ( int ) ( data_end - data ) ; if ( n > 10 ) n = 10 ; pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; } if ( pbi -> decrypt_state ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; }",0
813,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
814,"<S2SV_ModStart> peer. sack_needed ; if (! list_empty ( & asoc -> peer. transport_addr_list ) ) { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; } else { sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; }",0
815,"<S2SV_ModStart> cleanup ; } status = aac_fib_write ( dev, srbfib, sizeof ( struct aac_srb ), sizeof ( struct aac_srb ), sizeof ( struct aac_srb ) ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EBUSY ; goto cleanup ; } <S2SV_ModStart> cleanup ; } status = aac_fib_write ( dev, srbfib, sizeof ( struct aac_srb ), sizeof ( struct aac_srb ), sizeof ( struct aac_srb ) ) ; if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ; rcode = - EBUSY ; goto cleanup ; } if ( status ) { dprintk ( ( KERN_DEBUG ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EBUSY\\n"" ) ) ; rcode = - EBUSY ; goto cleanup",0
816,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT ""byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT ""byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
817,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; struct <S2SV_ModStart> net = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_association_put ( asoc ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_hold ( asoc ) ; goto out_unlock ; } <S2SV_ModEnd> out_unlock : bh_unlock_sock <S2SV_ModStart> sk ) ; sctp_association_put ( asoc ) ; out_unlock : sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep,",0
818,"<S2SV_ModStart> input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> ACTION_KILL_TAIL 3 # define <S2SV_ModEnd> fail_if_error ( e <S2SV_ModStart> ) switch ( e ) { case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_size, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & storage -> fiber_pool, & fiber ) ; fail_if_error ( error ) ; fiber -> ip = re_code ; fibers. head = fiber ; fibers. tail = fiber",0
819,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPOR",0
820,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_RDPMC ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm",0
821,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; } else { h -> addr = mmap ( NULL, h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; h -> addr = malloc ( h -> size, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; h -> fd = - 1 ; } if (! h -> writable ) { h -> addr = mmap ( NULL, h -> size, PROT_READ, h -> fd, 0 ) ; } else { h -> addr = mmap ( NULL, h -> size, PROT_READ, h -> fd, 0 ) ; } if ( h -> addr == NULL ) goto error",0
822,"<S2SV_ModStart> h, const cdf_stream_t <S2SV_ModEnd> * sst, <S2SV_ModStart>, const cdf_stream_t <S2SV_ModEnd> * sst, <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; <S2SV_ModEnd> return cdf_file_property_info (",0
823,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> UWORD16 i2_max_frm_num ; <S2SV_ModStart> ; u1_level_idc = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_level_idc = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_level_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_seq_parameter_set_id = ih264d_get_idc_h264 ( ps_dec ) ; u1_seq_parameter_set,0
824,"<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ; <S2SV_ModStart> ) ; up_native = compat_alloc_user_space ( sizeof ( struct video_spu_palette ) ) ; err = put_user ( compat_ptr ( palp ), & up_native -> palette ) ; err |= put_user ( length, & up_native -> length ) ; if ( err ) return - EFAULT",0
825,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> -> cpi ; <S2SV_ModEnd> VP9_COMP * const <S2SV_ModStart> const params = va_arg ( args, vpx_svc_parameters_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> svc <S2SV_ModStart>. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> extra_cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> extra_cfg. rc_min_quant",0
826,"<S2SV_ModStart> ; if (! ( fhdr -> frag_off & htons ( IP6_MF ) ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; return - 1 ; }",0
827,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart>, input_photometric ; if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; return FALSE ; } TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( width!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, length ) ; TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; TIFFSetField ( out, TIFFTAG_IMAGELENGTH, length ) ; return FALSE ; } TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_SAMPLESPERPIXEL, & samplesperpixel ) ; if ( bitspersample!= ( uint16 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSP",0
828,"<S2SV_ModStart> a ) { archive_assert ( a -> flags & ARCHIVE_EXTRACT_SYMLINKS ) ; <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } } else { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } else { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED",0
829,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
830,"<S2SV_ModStart> -> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_IE && ibh ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; memcpy ( & iinfo -> i_location, & loc",0
831,"<S2SV_ModStart> -> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int index = shift_y ; * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ] << shift_uv ; *",0
832,"<S2SV_ModStart> dst_size ) { const uint8_t * name_end = data ; const uint8_t * name_start = data ; const uint8_t * name_end = data ; const uint8_t * name_start = data ; const uint8_t * name_start = data ; const uint8_t * name_start = data ; const uint8_t * name_start = data ; const uint8_t * name_end = data_end ; while ( * data!= AMF_DATA_TYPE_OBJECT && data < data_end ) { len = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 || len >= data_end - data ) return - 1 ; data += len ; } if ( data_end - data < 3 ) return - 1 ; data ++ ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if (! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) )",0
833,"<S2SV_ModStart> mq_flush_lock, flags ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q, queue_flag_set ( q,",0
834,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
835,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return TIFF_swabHorDiff <S2SV_ModEnd> ( tif, <S2SV_ModStart> wc ) ;",0
836,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) continue ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
837,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
838,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
839,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; <S2SV_ModEnd> pid_t pid ; <S2SV_ModStart> ; pid_t pid ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; default : return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_",0
840,"<S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) <S2SV_ModStart> == NULL || ( uint32_t ) * replySize!= sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_get_state ( effect, EFFECT_STATE_CONFIG ) ; } break ; case EFFECT_CMD_SET_PARAM : { if ( pReplyData == NULL || * replySize!= sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( effect -> state!= EFFECT",0
841,"<S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } <S2SV_ModStart>!= MagickFalse ) { if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
842,"<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> key_data [ i ]. key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( * code ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } ret [ j ] -> key_data_length [ 0 ] = mkvno ; ret [ j ] -> type = KRB5_KDB_SALTTYPE_NORMAL ; ret [ j ]. key_data_length [ 0 ] = 0 ; ret [ j ] -> key_data_contents [ 0 ] = k5_malloc ( sizeof ( * code ), & err ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; }",0
843,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode",0
844,"<S2SV_ModStart> { if ( sscanf ( l_line, ""%u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> "", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> "", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> "", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> "", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column",0
845,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
846,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> STREAM s ; <S2SV_ModStart> int length ; RD_BOOL <S2SV_ModEnd> is_fastpath ; uint8 <S2SV_ModStart> ( s, MCS_CONNECT_RESPONSE, & length ) ; ber_parse_header ( s, BER_TAG_RESULT, & length ) ; in_uint8 ( s, result ) ; if ( result!= 0 ) { logger ( Protocol, Error, ""mcs_recv_connect_response(), <S2SV_blank> result=%d"", result ) ; return False ; } ber_parse_header ( s, BER_TAG_INTEGER, & length ) ; in_uint8s ( s, length ) ; mcs_parse_domain_params ( s ) ; ber_parse_header ( s, BER_TAG_OCTET_STRING, & length ) ; sec_process_mcs_data ( s ) ; s_check_end ( s ) ; }",0
847,<S2SV_ModStart> ; if ( stkt_server!= NULL && stkt_server -> stkt_id!= 0 ) { if ( stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 ) { if ( stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id!= 0 && stkt_server -> stkt_id,0
848,<S2SV_ModStart> (! ( ( ( c >= 0xC0 ) && ( c <= 0xD6 ) ) || ( ( c >= 0xF8 ) && ( c <= 0xF6 ) ) || ( ( c >= 0xF8 ) && ( c <= 0x2FF ) ) || ( ( c >= 0x370 ) && ( c <= 0x37D ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0xFDF0 ) && ( c <= 0xFFFD ) ) || ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ) ) { return ( NULL ) ; },0
849,<S2SV_ModStart> ; } for ( i = 0 ; i < I40E_NUM_CHANNELS ; i ++ ) { if ( i < I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1 || i >= I40E_NUM_CHANNELS - 1,0
850,"<S2SV_ModStart> { if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 16 ] = 0xff ; rdesc [ 12 ] = rdesc [ 17 ] = 0x03 ; } else if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 16 ] = 0xff ; rdesc [ 12 ] = rdesc [ 17 ] = 0x03 ; }",0
851,"<S2SV_ModStart> -> nr_extents = simple_strtoul ( pos, & pos, 10 ) ; if ( extent. first == ( u32 ) - 1 && extent. lower_first == ( u32 ) - 1 && extent. count == ( u32 ) - 1 && extent. count == ( u32 ) - 1 && extent. count == map -> nr_extents ) { ret = - EINVAL ; goto out ; } pos = next_line ; next_line = strchr ( pos, '\\n' ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent. count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent. first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent. lower_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
852,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
853,"<S2SV_ModStart> sr ) { smb_ofile_t <S2SV_ModEnd> * of = <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; } if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
854,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
855,"<S2SV_ModStart> -> mode_info_context ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, yv12_fb_new -> mode_info ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> mode_info_context, yv12_fb_new -> mode_info_size ) ; memcpy ( lf_mic -> mode_info_context, yv12_fb_new -> mode_info_context, yv12_fb_new -> mode_info_size ) ; memcpy ( lf_mic -> mode_info_context, yv12_fb_new -> mode_info, yv12_fb_new -> mode_info_size ) ; memcpy ( lf_mic -> mode_info_context, yv12_fb_new -> mode_info_size ) ; memcpy ( lf_mic -> mode_info_context, yv12_fb_new -> mode_info_context, yv12_fb_new -> mode_info_size ) ; memcpy ( lf_mic -> mode_info_context, yv12_fb_new ->",0
856,"<S2SV_ModStart> = AF_TIPC ; memset ( & addr -> addr, 0, sizeof ( * addr ) ) ;",0
857,<S2SV_ModStart> ( user_alloc && ( mem -> guest_phys_addr <S2SV_ModEnd> & ( PAGE_SIZE <S2SV_ModStart> 1 ) ) ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) goto out_,0
858,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
859,"<S2SV_ModStart> ; if (! use_proxy ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } if ( ( flags & HTTP_WRAPPER_NO_PROXY ) == 0 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } if ( ( flags & HTTP_WRAPPER_NO_PROXY ) == 0 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } if ( ( flags & HTTP_WRAPPER_NO_PROXY ) == 0 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return NULL ; } if ( ( flags & HTTP_WRAPPER_NO_PROXY ) == 0 ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Proxy <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return",0
860,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * p ; PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr ; Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf ( p, ""\\\\U%08x"", chr ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL",0
861,"<S2SV_ModStart> = 0 ; if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum.""",0
862,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) ||! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ||! memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) ||! memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ||! memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
863,"<S2SV_ModStart> ; if (! ( config -> qmode & QMODE_IGNORE_LENGTH ) && dff_chunk_header. ckDataSize ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %l",0
864,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) { spin_unlock_irqrestore ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; }",0
865,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart> unsigned long long ull <S2SV_ModEnd> ; int setimes <S2SV_ModStart>, wrerrno = 1 <S2SV_ModEnd> ; char ch <S2SV_ModStart> ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> a <S2SV_blank> directory"", __func__ ) ; if ( stat ( targ, & stb )!= 0 ) fatal (",0
866,"<S2SV_ModStart> } else if ( myentity_find_ext ( target ) == NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized."" ), channel ) ; return ; } if ( myentity_find_ext ( target ) == NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized."" ), channel ) ; return ; } if (! myentity_find_ext ( target ) == NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> not <S2SV_blank> authorized."" ), channel ) ; return ; } if (! myentity_find_ext ( target ) == NULL && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_",0
867,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
868,"<S2SV_ModStart> goto error ; if (! ast ) goto error ; <S2SV_ModStart> ; if (! ast -> sub_ctx ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; ast -> sub_ctx -> pb = pb ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx, s ) < 0 ) goto error ; if ( ff_copy_whiteblacklists ( ast -> sub_ctx",0
869,"<S2SV_ModStart> null_server ; int <S2SV_ModEnd> need_error_free = 0 <S2SV_ModStart> retval ) ; if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return ( retval ) ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RE",0
870,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
871,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
872,"<S2SV_ModStart> = frametype ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, buffer, faclen ) ; dptr += f",0
873,<S2SV_ModStart> = new_ns ; if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; },0
874,"<S2SV_ModStart> ) ) { memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; memset ( oci -> above_context, 0, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ;",0
875,"<S2SV_ModStart> php_zip_get_property_ptr_ptr ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ; <S2SV_ModStart> = php_zip_get_properties ; php_zip_register_prop_handler ( & zip_prop_handlers, ""numFiles"", php_zip_get_num_files, NULL, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""comment"", php_zipobj_get_comment, NULL, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""filename"", NULL, NULL, php_zipobj_get_filename, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers, ""comment"", NULL, php_zipobj_get_comment, IS_STRING TSRMLS_CC ) ; php_zip_register_prop_handler ( & zip_prop_handlers,",0
876,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; <S2SV_ModStart> case RXE_MEM_TYPE_MR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT ; return ( ( iova + length ) > mem -> iova + mem -> length ) )? - EFAULT : 0 ; case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) return - EFAULT <S2SV_ModEnd> ; default :,0
877,"<S2SV_ModStart> ) ) ; if ( siz!= sizeof ( * dp ) + 4 ) { ND_TCHECK2 ( * dp, siz ) ; if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz!= sizeof ( * dp ) + 4 ) { ND_TCHECK2 ( * dp, siz ) ; if ( siz!= sizeof ( * dp ) + 4 ) { ND_TCHECK2 ( * dp, siz ) ; if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } ND_TCHECK2 ( * dp, siz ) ; if ( siz",0
878,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
879,"<S2SV_ModStart> -> ssocket ; if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } <S2SV_ModEnd> smb_msg. msg_namelen <S2SV_ModStart> smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_control = NULL ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_name -> msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_namelen = sizeof ( struct sockaddr ) ; smb_msg. msg_controllen = sizeof ( struct sockaddr ) ; if (! server -> noblocksnd ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } <S2SV_ModEnd> msleep ( 500",0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> void buffer_pipe_buf_get ( <S2SV_ModEnd> struct pipe_inode_info * <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
881,"<S2SV_ModStart> ; if ( new < 0 ) { die ( ""Bad <S2SV_blank> FAT <S2SV_blank> entry <S2SV_blank> size: <S2SV_blank> %d <S2SV_blank> bits."", fs -> fat_bits ) ; } <S2SV_ModStart> FAT_ENTRY subseqEntry ; if ( new < 0 ) { die ( ""Bad <S2SV_blank> FAT <S2SV_blank> entry <S2SV_blank> size: <S2SV_blank> %d <S2SV_blank> bits."", fs -> fat_bits ) ; } <S2SV_ModStart> break ; case 64 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster + 1, fs ) ; data = fs -> fat + cluster * 4 ; size = 4 ; } break ; case 48 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size = 4 ; } break ; case 48 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster *",0
882,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
883,<S2SV_ModStart> sk_nulls_node ) ; inet_csk ( sk ) -> inet_num = 0 ; isk -> inet_num = 0 ; isk -> inet_sport = 0 ;,0
884,<S2SV_ModStart> ; if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbs + u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbs + u1_num_mbsNby2 ; } if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mb,0
885,<S2SV_ModStart> ; if ( unlikely ( src >= ( size_t ) PAGE_SIZE ) ) { ret = - EINVAL ; goto free ; } page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ),0
886,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int parse_rock_ridge_inode ( <S2SV_ModStart> int result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 ) && ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de,",0
887,<S2SV_ModStart> struct fsnotify_group * <S2SV_ModEnd> inotify_new_group ( struct <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = NULL ; <S2SV_ModEnd> return group ;,0
888,"<S2SV_ModStart> in ) ; if ( in -> data [ p ] ) { int w = inlink -> w ; int h = inlink -> h ; int r = s -> radius ; if ( p ) { if ( FFMIN ( w, h ) > 2 * r ) filter ( s, out -> data [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], in -> linesize [ p ],",0
889,"<S2SV_ModStart> ; if ( screen -> buffers [ 0 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; if ( screen -> buffers [ 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] ) ;",0
890,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"" <S2SV_ModEnd>, regno,",0
891,"<S2SV_ModStart> ; uint16 strips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; uint32 rows = 0 ; if ( nstrips == 0 ) { TIFFError ( """", ""TIFFNumStrips <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } strips = TIFFNumberOfStrips ( in ) ; stripsize = TIFFStripSize ( in ) ; rows = TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) ; if ( rows > TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rows ) ; if ( rows > TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rows ) ) { TIFFError ( """", ""TIFFNumStrips <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large!"" ) ; return 0 ; }",0
892,<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> struct search_domain * <S2SV_ModStart> ; struct search_domain <S2SV_ModEnd> * dom ;,0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
894,<S2SV_ModStart> out ; err = - EINVAL ; if ( size > PAGE_SIZE ) { err = - EMSGSIZE ; goto out ; } <S2SV_ModEnd> err = - <S2SV_ModStart> = 0 ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_iov = & msg -> msg_iov ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namelen = sizeof ( struct msghdr ) ; msg -> msg_namel,0
895,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader",0
896,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> < S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> < originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else if ( planeSize > originalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; else CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += originalSize ; } return TRUE ;",0
897,<S2SV_ModStart> policy ) { if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ;,0
898,"<S2SV_ModStart> { httpSetHostName ( state <S2SV_ModEnd>, stok (",0
899,"<S2SV_ModStart>,. match_data. type_data = key_type_data ( type ) <S2SV_ModEnd>,. match_data <S2SV_ModStart> cmp = type -> cmp,. match_data. raw_data = description,. match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if (",0
900,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
901,"<S2SV_ModStart> (! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { ret = json_is_true ( json_array_get ( val, 9 ) ) ; goto out ; } <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ( job_id ) { free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; free ( pool -> swork. prev_hash ) ; free ( pool -> prev_hash ) ; free ( pool -> bbversion ) ; free ( pool -> nbit ) ; free ( pool -> ntime ) ;",0
902,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
903,"<S2SV_ModStart> size ) { size_t <S2SV_ModEnd> ptr = malloc <S2SV_ModStart> * size ) ; if ( ptr ) { memset ( ptr, '\\0', ( num * size ) ) ; } else { memset ( ptr, '\\0', ( num * size ) ) ; }",0
904,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
905,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return NULL ;",0
906,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_descriptor_header * ) & desc ) ; if (! desc ) { err = - ENODEV ; goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> bLength == sizeof ( struct usb_otg_descriptor ) ) { err = - ENODEV ; goto error ; } <S2SV_ModEnd> if ( desc <S2SV_ModStart> bLength == sizeof ( struct usb_otg_descriptor ) ) { err = usb_control_msg ( udev, usb_sndctrlpipe ( udev, 0 ), USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_ALT_HNP_SUPPORT, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) { dev_err ( & udev -> dev, ""set <S2SV_blank> a_alt_hnp_support <S2SV_blank> failed: <S2SV_blank> %d\\n"", err ) ; bus -> b_hnp_enable = 0 ; } } else if ( desc -> bLength == sizeof ( struct usb_otg_descriptor ) ) { err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0,",0
907,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, <S2SV_ModEnd> ( u64 __user <S2SV_ModStart> ) arg ) ; case PERF_EVENT_ID : return perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } <S2SV_ModEnd> case PERF_EVENT_SET_FILTER :",0
908,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else { sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE uv_mode = read_intra_mode <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
910,<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type ) ; if (! tfm ) { crypto_free_skcipher ( tfm ) ; return NULL ; } <S2SV_ModEnd> return crypto_alloc_skcipher ( <S2SV_ModStart> mask ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
911,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA1_DIGEST_SIZE ) return - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA256_DIGEST_SIZE ) return - EINVAL ; block_size = SHA256_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_1 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA1_DIGEST_SIZE ) return - EINVAL ; block_size = SHA1_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_224 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA224_DIGEST_SIZE ) return - EINVAL ; block_size = SHA384_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_256 : if ( cmd_q",0
912,<S2SV_ModStart> tile_height ) { av_free ( c -> framebuf ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; if (! c -> framebuf ) return AVERROR ( ENOMEM ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; if (! c -> framebuf ) return AVERROR ( ENOMEM ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; if (! c -> framebuf ) return AVERROR ( ENOMEM ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; c -> framebuf = av_mallocz ( c -> framebuf_stride * aligned_height ) ; c -> frame,0
913,"<S2SV_ModStart> sizeof iv ) ; if (! NIL_P ( vsalt ) ) ossl_raise ( eCipherError, ""salt <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ; if (! NIL_P ( viter ) ) ossl_raise ( eCipherError, ""iter <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
914,"<S2SV_ModStart> jas_fix3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ; if (! ( buf = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } <S2SV_ModStart> jas_fix3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ; if (! ( buf = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! ( buf = jas_alloc3 ( bufsize, JPC_QMFB_COLGRPSIZE, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; }",0
915,"<S2SV_ModStart> s ) ; memory_region_init_io ( & s -> mmio, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; memory_region_init_io ( & s -> irq, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; memory_region_init_io ( & s -> mmio, OBJECT ( s ), & stellaris_enet_ops, s, ""stellaris_enet"", 0x1000 ) ; sysbus_init_irq ( sbd, & s -> irq ) ; s -> nic = NULL ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), ""stellaris_enet"" ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), s -> conf. macaddr. a ) ; qemu_format_nic_info_str ( qemu_get_queue ( s -> nic ), ""stellaris_enet"" ) ;",0
916,"<S2SV_ModStart> p ) { <S2SV_ModEnd> register u_int length <S2SV_ModStart> ) ; } if ( length < CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
917,"<S2SV_ModStart> referral_walks_count ++ ; if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSHARE ) { rc = - EPERM ; goto out ; } cFYI ( 1, ""Loading <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
918,<S2SV_ModStart> && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS || sk -> sk_tsflags & SOF_TIMESTAMPING_SOFTWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_HARDWARE ) && ( sk -> sk_,0
919,<S2SV_ModStart> ) ) ; raptor_sax2_set_uri_filter <S2SV_ModEnd> ( rdf_xml_parser ->,0
920,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
921,<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + 4 ) { return SECURE_ELEMENT_ERROR_NPE ; },0
922,"<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } <S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft < NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN - NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> payloadleft -= NGHTTP2_CLIENT_MAGIC_LEN ; if ( memcmp ( & NGHTTP2_CLIENT_MAGIC [ NGHTTP2_CLIENT_MAGIC_LEN - NGHTTP2_CLIENT_MAGIC_LEN ], in, NGHTTP2_CLIENT_MAGIC_LEN - NGHTTP2_CLIENT_MAGIC_LEN ) ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; }",0
923,<S2SV_ModStart> = ucounts ; if (! new_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - ENOMEM ) ; },0
924,<S2SV_ModStart> += dif ; kfree ( opt2 ) ;,0
925,"<S2SV_ModStart> ) ; if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( & boot_cpu_data, X86_FEATURE_ARCH_PERFMON ) ) { if (! cpu_has ( &",0
926,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE int * * part_classdata = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif",0
927,"<S2SV_ModStart> ) ; u32 <S2SV_ModEnd> now ; if <S2SV_ModStart> ) { challenge_timestamp = tcp_time_stamp <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> ; challenge_count = sysctl_tcp_challenge_ack_limit ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tcp_send_ack ( sk ) ; }",0
928,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
929,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int n = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> n ; int v = v >> n ; int i = 2 * p -> skip_eob_node ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits",0
930,"<S2SV_ModStart>, uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> data, 0 } ; struct vpx_write_bit_buffer saved_wb ; write_uncompressed_header ( cpi, & wb ) ; saved_wb = wb ; write_uncompressed_header ( cpi, & wb ) ; saved_wb = wb ; vpx_wb_write_literal ( & wb, 0, 16 ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_size, 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
931,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
932,"<S2SV_ModStart> ; int ret <S2SV_ModEnd>, n ; <S2SV_ModStart> - ENODEV ; } if ( le16_to_cpu ( dev -> descriptor. idVendor )!= le16_to_cpu ( dev -> descriptor. idProduct ) || le16_to_cpu ( dev -> descriptor. idProduct )!= le16_to_cpu ( dev -> descriptor. idVendor ) || le16_to_cpu ( dev -> descriptor. idProduct )!= le16_to_cpu ( dev -> descriptor. idProduct ) ) return - ENODEV ; hid -> version = le16_to_cpu ( hdesc -> bcdHID ) ; hid -> country = hdesc -> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return",0
933,"<S2SV_ModStart> { struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; <S2SV_ModEnd> ND_TCHECK ( * <S2SV_ModStart> * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id. h, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } ND_TCHECK ( * ext ) ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; UNALIGNED_MEMCP",0
934,<S2SV_ModStart> ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) robust_exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
935,"<S2SV_ModStart> * obj, <S2SV_ModEnd> struct strbuf * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> char * ) data <S2SV_ModEnd> ; add_preferred_base_object ( <S2SV_ModStart> name ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
936,"<S2SV_ModStart> ) ) { jas_log ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( ( 1, ( ""jas_mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> id\\n"" ) ) ; jas_log ( 1, ( ""jas_mif_process_",0
937,"<S2SV_ModStart> urb ) ; if ( urb -> transfer_flags & URB_NO_TRANSFER_DMA_MAP ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ;",0
938,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0",0
939,<S2SV_ModStart> ++ ] ; if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } len = data [ dp ++ ] ; if ( len <= 0x7f ) { dp += len ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun,0
940,"<S2SV_ModStart> val ; if <S2SV_ModEnd> ( flags & <S2SV_ModStart> & __GFP_ZERO ) memset <S2SV_ModEnd> ( ptr,",0
941,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
942,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; }",0
943,"<S2SV_ModStart> && value [ n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> ] >= min && field -> value [ n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && <S2SV_ModStart> n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( value, field -> value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ field -> value [ n ] - min ], 0, interrupt ) ; if ( field -> value [ n ] >= min && field -> value [ n ] <= max && field -> usage [ field -> value [ n ] - min ]. hid == HID_UP_KEYBOARD + 1 && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ field -> value [ n ] - min ], 1, interrupt ) ;",0
944,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
945,"<S2SV_ModStart> = true ; if ( argReg < 0 || argReg >= sizeof ( struct dex_debug_local_t ) <S2SV_ModEnd> ) { return <S2SV_ModStart> ; } p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & line_start ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p",0
946,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, request_method_val, req_method ( req ) ) ; rb_hash_aset ( env, script_name_val, req_script_name ( req ) ) ; rb_hash_aset ( env, path_info_val, req_path_info ( req ) ) ; rb_hash_aset ( env, query_string_val, req_query_string ( req ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash_aset ( env, query_string_val, env_query_string ( env ) ) ; rb_hash",0
947,<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
948,<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare ) ; if ( imp_sth -> use_server_side_prepare ) { # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare ) : ( imp_dbh -> use_server_side_prepare ) ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare,0
949,"<S2SV_ModStart> ; if ( key -> type && key -> type -> destroy ) <S2SV_ModStart> type -> destroy ( key ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nkeys",0
950,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""program <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
951,"<S2SV_ModStart> int eol ; int <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { eol = '\\n' <S2SV_ModEnd> } ) ; <S2SV_ModStart> *= 4 ; if ( need >= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; } if ( need >= ( size_t ) need ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ;",0
952,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } else { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; }",0
953,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> JsVarFloat stopAtError = 0.0000001 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( val ) ) strncpy ( str, ""NaN"", len ) ; else if (! isfinite ( val ) ) { strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { <S2SV_ModEnd> if ( val",0
954,"<S2SV_ModStart> ; if ( ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, & signtmp, & w, temp, & h )!= 9 ) || ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, & endian1, & endian2, signtmp, & prec, temp, & w, temp, & h )!= 9 ) || ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, & w, temp, & h )!= 9 ) || ( sscanf ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"", temp, & prec, & w, temp",0
955,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 6 <S2SV_ModStart> < 6 ) { size = size ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size = size ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; size = size ; result = my_asnprintf ( NULL, & length, ""%d"", 12345 )",0
956,"<S2SV_ModStart> cycles ) ; add_interrupt_bench <S2SV_ModEnd> ( cycles ) <S2SV_ModStart> ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { if (! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } else if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; }",0
957,"<S2SV_ModStart> { strncpy ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> { strncpy ( str, ""String:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString ( lex -> tk, str, len ) ; jslTokenAsString",0
958,"<S2SV_ModStart> ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> -- <S2SV_blank> skipping"", g. inf ) ; return ; }",0
959,,1
960,"<S2SV_ModStart> * output ; <S2SV_ModEnd> register ssize_t i <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { # if 0 fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; # endif input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) { ( void ) fputc ( ( char ) c, output ) ; ( void ) fputc ( ( char ) c, output ) ; ( void ) fclose ( input ) ; ( void ) remove_utf8 ( argv",0
961,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
962,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname ( <S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname (",0
963,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int setpwnam ( <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY ( fp = TEMP_FAILURE_RETRY (,0
964,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, const",0
965,"<S2SV_ModStart> s2 ) { memcpy <S2SV_ModEnd> ( s1, <S2SV_ModStart> 1U ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
966,<S2SV_ModStart> TRUE ; } gchar * to = xmpp_stanza_get_to ( message ) ; gchar * from = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get_from ( message ) ; gchar * from_jid = xmpp_stanza_get,0
967,"<S2SV_ModStart> ; if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } config_set_special_field ( ""password"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. password ) ; server. password = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; } zfree ( server. rdb_filename ) ; server. rdb_filename = zstrdup ( o -> ptr ) ; } config_set_special_field ( ""password"" ) { if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) goto badfmt ; zfree ( server. password ) ; server. password = ( ( char * ) o -> ptr ) [ 0 ]? zstrdup ( o -> ptr ) : NULL ; }",0
968,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-help"" ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 1 ; }",0
969,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
970,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
971,"<S2SV_ModStart> st -> st_v1_new_iv, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs <S2SV_ModStart> md -> packet_pbs, <S2SV_ModEnd> md -> packet_pbs",0
972,<S2SV_ModStart> u4_num_Bytes ) { if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ( ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes > ps_ip -> s,0
973,"<S2SV_ModStart> map_zone * zone <S2SV_ModEnd> ; int old_width <S2SV_ModStart>. height ; tilemap = malloc ( x_size * y_size <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> struct map_tile ) ) ) return false ; tilemap [ x + y * x_size ]. frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tilemap [ x + y * x_size ]. frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tilemap [ x + y * x_size ]. frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tile -> tile_index = 0 ; for ( i = 0 ; i < s_map -> num_layers ; ++ i ) { if (! s_map -> layers [ i ]. is_parallax ) { if (! s_map -> layers [ i ]. is_parallax ) { s_map -> width = fmax ( s_map -> width, s_map -> height ) ; s_map -> height = fmax ( s_map -> height, s_map -> layers [ i ]",0
974,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
975,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
976,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags <S2SV_ModEnd> ) ; else <S2SV_ModStart> i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; ctx += num_enc - 1 ; if ( img ) img += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; }",0
977,"<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } ret = sscanf ( argv [ i ] + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n""",0
978,"<S2SV_ModStart> * buf ; size_t size ; size = sizeof ( unsigned char * ) * chunk_num ; if (! chm -> chunk_cache ) { size_t size = sizeof ( unsigned char * ) * chm -> num_chunks ; if (! sys -> alloc ( sys, size ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } memset ( chm -> chunk_cache, 0, size ) ; return NULL ; } if (! sys -> read ( fh, buf, ( int ) chm -> chunk_size ) ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if ( sys -> seek ( fh, ( off_t ) ( chunk_num * chm -> chunk_size ) )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if (! sys -> read ( fh, buf, ( int ) chm -> chunk_size ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if (",0
979,"<S2SV_ModStart> ; if (! list_empty ( & leader -> sibling_list ) ) return - EINVAL ; list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! list_empty ( & sibling -> sibling_list ) ) return - EINVAL ; } <S2SV_ModEnd> list_for_each_entry ( sibling <S2SV_ModStart> group_entry ) { if (! list_empty ( & sibling -> sibling_list ) ) return - EINVAL ; } <S2SV_ModEnd> list_for_each_entry ( sibling <S2SV_ModStart> group_entry ) { if (! list_empty ( & sibling -> sibling_list ) ) return - EINVAL ; } <S2SV_ModEnd> return 0 ;",0
980,"<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 2 ) win_maximise ( - 2 ) ; else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; } else if ( arg1 == 1 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( rows0, cols0 ) ; }",0
981,"<S2SV_ModStart> -> studio_profile ) { if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> studio_profile ) { if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> -> studio_profile ) { if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> not <S2SV_blank> supported\\n"" ) ;",0
982,<S2SV_ModStart> ; if ( nsops > OABI_MAX_SEMSIZE || nsops > OABI_MAX_SEMSIZE,0
983,<S2SV_ModStart> cols + 17 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; },0
984,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock < grub_le_to_cpu32 ( leaf -> blocks. dir_blocks ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } fileblock -= leaf -> blocks. dir_blocks ; fileblock -= leaf -> blocks. dir_blocks ; if ( fileblock >= grub_le_to_cpu32 ( leaf -> blocks. dir_blocks ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } fileblock -= leaf -> blocks. dir_blocks ; if ( fileblock >= grub_le_to_cpu32 ( leaf -> blocks. dir_blocks ) ) { fileblock -= leaf -> blocks. dir_blocks ; fileblock -= leaf -> blocks. dir_blocks ; if ( fileblock >= grub_le_to_cpu32 ( leaf -> blocks. dir_blocks ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; }",0
985,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif",0
986,"<S2SV_ModStart> ; if ( nelements == 0 ) { DPRINTF ( ( ""CDF_READ_PROPERTY_INFO: <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
987,"<S2SV_ModStart> RE_OPCODE_LITERAL : if ( ( flags & RE_FLAGS_BACKWARDS ) || ( flags & RE_FLAGS_EXHAUSTIVE ) ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> RE_OPCODE_LITERAL : if ( ( flags & RE_FLAGS_EXHAUSTIVE ) ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } else { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_EXHAUSTIVE? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( ( flags & RE_FLAGS_EXHAUSTIVE ) ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; }",0
988,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy ( str, ""UNFINISHED <S2SV_blank> COMMENT"", len ) ; return ; } if ( token >= _LEX_OPERATOR_START && token < _LEX_R_LIST",0
989,"<S2SV_ModStart> mnt_instance ) ; if (! list_empty ( & mnt -> mnt_mounts ) ) { list_add_tail ( & mnt -> mnt_mounts, & mnt -> mnt_mounts ) ; }",0
990,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
991,"<S2SV_ModStart> ) ) ; if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_getdbglevel ( ) >= 3 ) { jas_eprintf ( ""warning: <S2SV_blank> packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_lyrno ( pi ) ) ; }",0
992,"<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> struct udf_inode_info * iinfo <S2SV_ModEnd> ; uint32_t pos <S2SV_ModStart> ; uint32_t pos ; down_read ( & iinfo -> i_data_sem ) ; if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; unlock_page ( page ) ; return err ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
993,<S2SV_ModStart> ; else if ( vcpu -> arch. x2apic_base & X2APIC_ENABLE ) { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_longmode_x2apic ; else msr_bitmap = vmx_msr_bitmap_legacy_x2apic ; } else if ( vcpu -> arch. apic_base & X2APIC_ENABLE ) { if ( is_long_mode ( vcpu ) ) msr_bitmap = vmx_msr_bitmap_longmode_x2apic ; else msr_bitmap = vmx_msr_bitmap_legacy ; },0
994,"<S2SV_ModStart>, result ) ; if ( ent == NULL ) { st = ENOMEM ; goto cleanup ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ; cleanup : ldap_msgfree ( result ) ; if ( st!= 0 ) { krb5_ldap_put_handle_to_pool ( ldap_context, ldap_server_handle ) ; return st ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
995,"<S2SV_ModStart> -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_seq_parameter_set_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i4_seq_parameter_set_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_CNT - 1 ) ; ps_codec -> i",0
996,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 4 ; break ; case '1' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_3byte ( psf, data ) ; } else { header_put_le_3byte ( psf, data ) ; } ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_",0
997,<S2SV_ModStart> ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGLEN ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOF,0
998,"<S2SV_ModStart> break ; } memcpy ( cinfo. hci_handle, sco_pi ( sk ) -> conn -> hcon -> handle, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo. dev_class ) ) ; memcpy ( cinfo. dev_class, sco_pi ( sk ) -> conn -> hcon -> dev_class, 3 ) ; len = min_t ( unsigned int, len, sizeof ( cinfo ) ) ;",0
999,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1000,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ;",0
1001,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> 0 ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> ) ; num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; }",0
1002,"<S2SV_ModStart> * cskb ; struct iucv_sock * iucv_sock ; <S2SV_ModStart> = 0 ; iucv_sock = sock_net ( sk ) ; if ( msg -> msg_namelen ) { iucv_sock_recv_ts_and_drops ( iucv, msg -> msg_namelen ) ; iucv_sock_recv_ts_and_drops ( iucv, msg -> msg_namelen ) ; } rskb = skb ; err = put_cmsg ( msg, SOL_IUCV, SCM_IUCV_TRGCLS_LEN, CB_TRGCLS_LEN ( skb ) ) ; if ( err ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return err ; } err = sock_recv_datagram ( sk, flags, noblock, & err ) ; if ( err ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return err ; }",0
1003,"<S2SV_ModStart> if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), sizeof ( old_data ), NULL ) ; break ; case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht,",0
1004,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1005,<S2SV_ModStart> } else { if ( ( flags & SPLICE_F_NONBLOCK ) && ( opipe -> flags & SPLICE_F_NONBLOCK ) && ( opipe -> flags & SPLICE_F_NONBLOCK ) && ( opipe -> flags & SPLICE_F_NONBLOCK ) && ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } ret += obuf -> len ; len -= obuf -> len ; },0
1006,"<S2SV_ModStart> -> tokenlen ) { assert (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) ; if (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; } if (! jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; }",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vp9_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vp9_mse8x16 <S2SV_ModEnd> ; } <S2SV_null>,0
1008,<S2SV_ModStart> | IFF_POINTOPOINT ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING,0
1009,<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( back_size > INT_MAX / 2 || back_size > INT_MAX / 2 || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ) || back_size > INT_MAX / sizeof ( uint32_t ),0
1010,<S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dx ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dy ) >> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dx ) >> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dy ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dx ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) comp -> dy ) >> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dx ) >> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) comp -> dy ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp -> dx ) >> ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( comp -> dx ) >> ( OPJ_UINT32,0
1011,"<S2SV_ModStart> ; if ( reqp ) { memcpy ( & reqp -> subjectPublicKey, subjectPublicKey, sizeof ( reqp -> subjectPublicKey ) ) ; memcpy ( & reqp -> dh_pubkey, dh_pubkey, sizeof ( reqp -> dh_pubkey ) ) ; memset ( & reqp -> server_key, 0, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len ) ; memcpy ( & reqp -> dh_pubkey, sizeof ( reqp -> dh_pubkey ) ) ; memset ( & reqp -> server_key, 0, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len ) ; memcpy ( & reqp -> server_key, server_key_len )",0
1012,<S2SV_ModStart> ; if ( <S2SV_ModEnd> CheckMemoryOverflow ( count,0
1013,"<S2SV_ModStart> -> stratum_port ; if (! url ) url = pool -> sockaddr_url ; if (! url ) url = pool -> sockaddr_url ; if (! port ) port = pool -> stratum_port ; if (! strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } stratum_port = ( char * ) json_string_value ( json_array_get ( val, 2 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 3 ) ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 2 ) ; if (! stratum_port ) stratum_port = ( char * ) json_string_value ( json_array_get ( val, 3 ) ) ; if (! stratum_port ) stratum",0
1014,"<S2SV_ModStart> 0 ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> 0 ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> 0 ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; return error ( f, VORBIS_too_many_submaps ) ; } <S2SV_ModStart> 0 ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; } <S2SV_ModStart> 0 ) { if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; return error ( f, VORBIS_too_many_submaps ) ; }",0
1015,<S2SV_ModStart> return 0 ; if ( hdr > NFSSVC_MAXBLKSIZE_V2 ) return 0 ; <S2SV_ModStart> ) p - head -> iov_base ; dlen = XDR_QUADLEN ( len * 4 ) ; if ( dlen < XDR_QUADLEN ( hdr ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v ++ ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; },0
1016,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> - EINVAL ; spin_lock_irq ( & cluster -> cl_nodes_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; spin_unlock_irq ( & cluster -> cl_nodes_lock ) ; <S2SV_ModStart> cl_nodes_lock ) ; <S2SV_ModEnd> return count ;,0
1017,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 4 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> en",0
1018,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
1019,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> ssize_t count ;,0
1020,<S2SV_ModStart> == sip && rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> server. s_addr == clip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; do { rxent = & rx_cache [ i ] ; if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> server. s_addr == sip && rxent -> client. s_addr == clip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ;,0
1021,"<S2SV_ModStart> = bss_desc ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset (",0
1022,"<S2SV_ModStart> ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; if ( sfe -> namelen > XFS_ATTR_SF_ENTSIZE_MAX ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ], & sfe -> valuelen, & sfe -> nameval [ sfe -> valuelen ] ) ; if ( error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; }",0
1023,"<S2SV_ModStart> r ) { int ret ; ret = ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ; if ( ret < 0 ) return ret ;",0
1024,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> hrtimer_start ( &,0
1025,"<S2SV_ModStart> = data ; struct l2cap_conf_txwin_size <S2SV_ModEnd> rfc = { <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> rfc. txwin_size <S2SV_ModStart> = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; } <S2SV_ModEnd> req -> dcid",0
1026,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = recv ( sock_fd, buf, r, MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } }",0
1027,"<S2SV_ModStart> = 0 ; if ( s -> chunksize < 0 ) { av_log ( h, AV_LOG_ERROR, ""Chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> chunksize ) ; return err ; }",0
1028,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( u1_nal_ref_idc > IDR_SLICE_NAL ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) ) || ( ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) || ( u1_nal_ref_id,0
1029,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1030,"<S2SV_ModStart> } err = crypto_rng_set_seed <S2SV_ModEnd> ( tfm,",0
1031,"<S2SV_ModStart> = uid ; if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) { kfree ( new ) ; return NULL ; } <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> } if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) { kfree ( new ) ; return NULL ; } spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) { kfree ( new ) ; } spin_lock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! atomic_add_unless ( & ucounts -> count, 1, INT_MAX ) ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1032,<S2SV_ModStart> ; if ( msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_flags & MSG_TRUNC ) { err = - EINVAL ; break ; } if ( msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_namelen > UINT32_MAX / sizeof ( * entry ) || msg_sys. msg_flags & MSG_TRUNC ) { err = - EINVAL ; break ; },0
1033,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1034,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { size_t i ; if ( len < 8 * 32 ) { return - 1 ; } <S2SV_ModStart> ; for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; ( void ) tab [ i + 6 * 32 ] ; } for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; ( void ) tab [ i + 6 * 32 ] ; ( void ) tab [ i + 7 * 32 ] ; } for,0
1035,"<S2SV_ModStart> inode ) ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> p_ext -> p_depth, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_inode -> i_ino, path [ depth ]. p_inode -> i_ino ) ; goto out2 ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, path [ depth ]. p_ext -> p_depth, path [ depth ]. p_inode -> i_ino, path [ depth ]. p_inode -> i_ino ) ; goto out ; }",0
1036,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode = fmode <S2SV_ModEnd> & ( FMODE_READ <S2SV_ModStart> FMODE_WRITE ) ; if ( fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
1037,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart>, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1038,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1040,"<S2SV_ModStart>, int64_t * out_dist_sum, int64_t * out_rate_sum, int64_t * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t sse <S2SV_ModEnd> ; for ( <S2SV_ModStart> ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * quantizer ) >> 8 ; else rate = 0 ; dist = ( square_error * quantizer",0
1041,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1042,"<S2SV_ModStart> ) ) ; ND_TCHECK ( * esis_header ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; ND_TCHECK ( * esis_header ) ; if ( li < sizeof ( struct esis_header_t ) + 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", li ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%02X"", * pptr ++ ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_TCHECK",0
1043,<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart>'<S2SV_blank>') || ( index >= PAM_MAX_RESP_SIZE ) ) return ( PAM_BUF_ERR ) ; if ( ( * ptr =='<S2SV_blank>') || ( index >= PAM_MAX_RESP_SIZE ) ) return ( PAM_BUF_ERR ) ; if ( ( * ptr =='<S2SV_blank>') || ( index >= PAM_MAX_RESP_SIZE ) ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF,0
1044,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1045,"<S2SV_ModStart> uint32_t size ; uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; size = ttm_round_pot ( sizeof ( * user_srf ) ) + 128 ; backup_handle = ttm_round_pot ( sizeof ( * backup_handle ) ) + 128 ; ret = vmw_surface_gb_priv_define ( dev, backup_handle, req -> mip_levels, req -> array_size, req -> base_size, & backup_handle ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = vmw_surface_gb_priv_define ( dev, backup_handle, req -> format, req -> svga3d_flags, req -> drm_surface_flags & drm_vmw_surface_flag_scanout, req -> mip_levels, req -> array_size, req -> base_size, & backup_handle ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = vmw_surface_gb_priv_priv_define ( dev,",0
1046,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> * desc = <S2SV_ModStart> ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ( ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; } <S2SV_ModEnd> # endif native_store_gdt <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1047,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; src_ptr2 += src_stride ; dst_ptr2 += src_stride ; } } src_ptr1 = src - extend_left ; src_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr1 = src + src_stride * ( height - 1 ) - extend_left ; dst_ptr2 = src + src_stride * ( height - 1 ) - extend_left ; for ( i = 0 ; i < extend_top ; ++ i ) { memcpy ( dst_ptr1, src_ptr1, linesize ) ; dst_ptr1 += src_stride ; } for ( i = 0 ; i < extend_bottom ; ++ i ) { memcpy ( dst_ptr2, src_ptr2, linesize ) ; dst_ptr2 += src_stride ; } for ( i = 0 ; i < extend_right ;",0
1048,"<S2SV_ModStart> struct sctp_bind_addr * bp <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> sctp_sockaddr_entry * laddr <S2SV_ModEnd> ; union sctp_addr <S2SV_ModStart> ; __u8 matchlen <S2SV_ModEnd> ; sctp_scope_t scope <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! asoc || saddr ) goto out ; bp = & t -> base. bind_addr ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6.",0
1049,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1050,"<S2SV_ModStart> depth ++ ; if (! smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ) { ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"" ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n",0
1051,"<S2SV_ModStart> -> protocol_timeout ) { g_source_add ( client -> priv -> protocol_timeout, conn ) ; client -> priv -> protocol_timeout = 0 ; } else { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"", client -> priv -> description ) ; * mask_ret |= SmsRegisterClientProcMask ; callbacks_ret -> register_client. callback = register_client_callback ; callbacks_ret -> register_client. manager_data = client ; * mask_ret |= SmsInteractRequestProcMask ; callbacks_ret -> interact_request. callback = interact_request_callback ; callbacks_ret -> interact_request. manager_data = client ; * mask_ret |= SmsSaveYourselfP2RequestProcMask ; callbacks_ret -> save_yourself_phase2_request. callback = save_yourself_phase2_request_callback ; callbacks_ret -> save_yourself_phase2_request. manager_data = client ; * mask_ret |= SmsSaveYourselfDone",0
1052,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) { if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) io ; if (! ND_TTEST ( * io ) ) { if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) io ; }",0
1053,"<S2SV_ModStart> ERROR_INVALID_LENGTH ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, KSZ88",0
1054,<S2SV_ModStart> NULL ) ; rb_ary_push ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_,0
1055,"<S2SV_ModStart> ) ) { if ( assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; } else if (! assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1056,<S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211 <S2SV_ModStart> ; settings. <S2SV_ModEnd> port = 11211,0
1057,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES if (! g_slist_is_empty ( domains_to_finalize ) ) { g_assert (! g_slist_is_empty ( domains_to_finalize ) ) ; if (! g_slist_is_empty ( domains_to_finalize ) ) { g_assert (! g_slist_is_empty ( domains_to_finalize ) ; } else { g_assert (! g_slist_is_empty ( domains_to_finalize ) ) ; if (! g_slist_is_empty ( domains_to_finalize ) ) { g_assert (! g_slist_is_empty ( domains_to_finalize ) ) ; if (! g_slist_is_empty ( domains_to_finalize ) ) { g_assert (! g_slist_is_empty ( domains_to_finalize ) ) ; } else { g_assert (! g_slist_is_empty ( domains_to_finalize ) ) ; if (! g_slist_is_empty ( domains_to_finalize ) ) { g,0
1058,"<S2SV_ModStart>, x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15 ; WORD32 x_11, x_12, x_13, x_14 ; WORD32 x_15 = * x0 ++ ; WORD32 x_16 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d =",0
1059,"<S2SV_ModStart> && clips_ptr ) { mutex_unlock ( & dev -> mode_config. mutex ) ; <S2SV_ModStart> ), GFP_KERNEL ) ; mutex_lock ( & dev -> mode_config. mutex ) ; clips = kzalloc ( num_clips * sizeof ( * clips ), GFP_KERNEL ) ; if (! clips ) { mutex_unlock ( & dev -> mode_config. mutex ) ; return - ENOMEM ; } mutex_unlock ( & dev -> mode_config. mutex ) ; clips = kzalloc ( num_clips * sizeof ( * clips ), GFP_KERNEL ) ; mutex_lock ( & dev -> mode_config. mutex ) ; if (! clips ) { mutex_unlock ( & dev -> mode_config. mutex ) ; ret = - ENOMEM ; goto out_err2 ; } } if ( flags & DRM_MODE_FB_DIRTY_ANNOTATE_COPY ) { mutex_unlock ( & dev -> mode_config. mutex ) ; clips = kzalloc ( num_clips * sizeof ( * clips ), GFP_KERNEL ) ; mutex",0
1060,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1061,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1062,"<S2SV_ModStart> ; if ( i < len ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; if (! esil ) { r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil",0
1063,"<S2SV_ModStart>, frames ; int width, height, target_width, target_height ; if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } if ( argc < 6 ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open",0
1064,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 <S2SV_ModEnd> wTmp ; snd_msnd_eval_dsp_msg <S2SV_ModStart> ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; <S2SV_ModEnd> wTmp = readw <S2SV_ModStart> + JQS_wHead ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wTail ) ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; <S2SV_ModEnd> writew ( wTmp <S2SV_ModStart> + JQS_wHead ) ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wTail ) ) ) ; inb ( chip -> io + HP_RXL ) ; return IRQ_HANDLED ;",0
1065,<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; } <S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; },0
1066,<S2SV_ModStart> acpi_status status ; <S2SV_ModEnd> # ifdef ACPI_EXEC_APP <S2SV_ModStart> * prev ; <S2SV_ModEnd> next = acpi_gbl_module_code_list <S2SV_ModStart> ; } } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { ACPI_FAILURE ( status ) ; status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; ( void ) acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; ( void ) acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; ( void ) acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; ( void ) acpi_ns_delete_node ( acpi_gbl_root_node ) ; ( void ) acpi_ut_release_mutex (,0
1067,"<S2SV_ModStart> # ifndef WIN32 dlopen ( the_url, O_RDONLY | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW",0
1068,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1069,"<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> enc ) { memset ( priv, 0, sizeof ( * priv ) ) ; priv -> sz = sizeof ( * priv ) ; priv -> iface = ctx -> iface ; priv -> init_flags = ctx -> init_flags ; } cfg = & ctx -> config ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! cfg ) return VPX_CODEC_MEM_ERROR ;",0
1070,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_LOG_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1071,"<S2SV_ModStart> ++ ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4",0
1072,"<S2SV_ModStart> err ; err = nla_parse_nested ( <S2SV_ModEnd> sock, TIPC_NLA_SOCK_MAX <S2SV_ModStart> TIPC_NLA_SOCK ], TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> tsk_portid = nla_get_u32 <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> err = __tipc_nl_list_sk_publ",0
1073,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ( void * ) ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ( void * ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION + 1 ) ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION + 1 ) ) { ctx -> fragments. count = 0 ;",0
1074,<S2SV_ModStart> = v ; spin_lock_irq ( & priv -> mmap_lock ) ; <S2SV_ModStart> vma ) ; spin_unlock_irq ( & priv -> mmap_lock,0
1075,"<S2SV_ModStart> -> bLength ; if ( total_len < length ) { ret = - ENOMSG ; goto err ; } length = le16_to_cpu ( cap -> wTotalLength ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } buffer += length ; length = cap -> bLength ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ; } ret = - ENOMSG ; goto err ; } if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; goto err ;",0
1076,<S2SV_ModStart> task_struct * task <S2SV_ModEnd> ; file_sb_list_del (,0
1077,"<S2SV_ModStart> efe ) ; if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1078,"<S2SV_ModStart> data ) { enc28j60WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) ptr ++ ; else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; else if ( * ptr == 'l' ) ptr ++ ; else if ( * ptr == 'u' ) ptr ++ ; else if ( * ptr == 'l' ) ptr ++ ; else if ( * ptr == 'u' ) ptr ++ ; else if ( * ptr == 'l' ) ptr ++ ; else if ( * ptr == 'u' ) ptr ++ ; else if ( * ptr == 'u' ) ptr ++ ;,0
1080,"<S2SV_ModStart> sk_forward_alloc ) ; inet_opt_put ( inet ) ; <S2SV_ModStart> inet -> opt ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) <S2SV_ModEnd> ) ; sk_refcnt_debug_dec",0
1081,<S2SV_ModStart> ) ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\r' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\r' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\r' ) { ND_TCHECK ( * bp ) ; if ( * bp!= '\\n' ) { ND_TCHECK ( * bp ) ;,0
1082,<S2SV_ModStart> ; if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) { if ( args -> flags & XFS_DA_OP_JUSTCHECK ) {,0
1083,<S2SV_ModStart> &,0
1084,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new,0
1085,"<S2SV_ModStart> 0 ) ; if ( shdr -> sh_name >= sizeof ( Verdef ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name >= sizeof ( Verdef ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name >= sizeof ( Verdef ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( shdr -> sh_name >= sizeof ( Verdef ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( shdr -> sh_name >= sizeof ( Verdef ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false",0
1086,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1087,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( ptr_count > 63 ) return - 1 ; if ( cp!= name_out ) { if ( cp + 1 >= end ) return - 1 ; * cp ++ = '.' ; } if ( cp + label_len > end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; } if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( ptr_count > 63 ) return - 1 ; if ( cp!= name_out ) { if ( cp!= name_out ) { if ( cp + 1 >= end ) return - 1 ; * cp ++ = '.' ; } if ( cp!= name_out ) { if ( cp + 1 >= end ) return - 1 ; * cp ++ = '.'",0
1088,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if (! tmp ) { TIFFError ( tif -> tif_dir. td_filename, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFError ( tif -> tif_dir. td_filename, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> return ; while ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( cp [ stride ] + cp [ 0 ] & 0xff ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte",0
1089,"<S2SV_ModStart> ) ) { if ( vma -> vm_ops && vma -> vm_ops -> fault ) return do_fault ( mm, vma, address, pte, pmd <S2SV_ModEnd>, flags, <S2SV_ModStart>, vma, address, pte, pmd <S2SV_ModEnd>, flags ) <S2SV_ModStart>, vma, address, pte, pmd <S2SV_ModEnd>, flags )",0
1090,"<S2SV_ModStart> s ) { size_t <S2SV_ModEnd> r = pool_alloc <S2SV_ModStart> + 1 ) ; if (! r ) return NULL ; <S2SV_ModStart> + 1 ) ; memcpy ( r, s, strlen ( s ) ) ;",0
1091,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1092,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1093,"<S2SV_ModStart> ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; if ( i >= cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values ) ) ; } if ( i >= cu -> dies [ cu -> length ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } memset ( & cu -> dies [ cu -> length ]. attr_values [ i ], 0, sizeof ( cu -> dies [ cu -> length ]. attr_values ) ) ; if ( i >= cu -> dies [ cu -> length ]. capacity ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1094,"<S2SV_ModStart> p_enc ) ; if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, p_enc -> fmt_in. bytes_per_sample ) ; vlc_fourcc_to_char ( p_enc -> fmt_in. bytes_per_sample, p_enc -> fmt_in. bytes_per_sample ) ; } else if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, p_enc -> fmt_in. bytes_per_sample ) ; vlc_fourcc_to_char ( p_enc -> fmt_in. bytes_per_sample, p_enc -> fmt_in. bytes_per_sample ) ; } else if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_in. i_codec ) { vlc_fourcc_",0
1095,"<S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; } else if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; } else if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; } else if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; } else if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; }",0
1096,"<S2SV_ModStart> ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", len - length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", len - length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; if ( length < len ) ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> bytes <S2SV_blank> missing!"" ) )",0
1097,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; <S2SV_ModStart> j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i",0
1098,"<S2SV_ModStart> mmap_sem ) ; if ( start > end ) goto out_unlock ; vma = find_vma_next ( mm, start, & vma_end ) ; if (! vma ) goto out_unlock ; ret = - EINVAL ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( start & ( vma_hpagesize - 1 ) ) goto out_unlock ; } ret = - EINVAL ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_pagesize ( vma ) ; if ( is_vm_hugetlb_page ( vma ) ) { unsigned long vma_hpagesize = vma_kernel_",0
1099,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1100,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
1101,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; yuvconfig2image ( & data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1102,"<S2SV_ModStart> ctxt ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } else { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } ops -> get_msr ( ctxt, MSR_SYSCALL_MASK, & msr_data ) ; ctxt -> eflags",0
1103,"<S2SV_ModStart>!= JPEG_MARKER_SOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; }",0
1104,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else e = ast_for_expr ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( TYPE ( CHILD ( n, 2 ) ) == augassign ) { expr_ty expr1 ; expr2 = ast_for_augassign ( c, ch ) ; if (! expr2 ) return NULL ; newoperator = ast_for_augassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_annassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_annassign ( c, ch ) ; if (! newoperator ) return NULL ; return AugAssign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c ->",0
1105,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int mc_avg_y_stride, <S2SV_ModStart> unsigned char * running_avg_y, <S2SV_ModEnd> int avg_y_stride, <S2SV_ModStart> int sig_stride = 16 ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; int absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 8 && absdiff <= 15 ) { running_avg_y [ c ] =",0
1106,"<S2SV_ModStart> ) ) { if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( e - s ) ) ; } else { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; if ( reqPtr -> request. line == NULL ) { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; sockPtr -> flags = NS_CONN_LINETOOLONG ; } else { Ns_Log ( DriverDebug, ""SockParse: <S2SV_blank> maxline <S2SV_blank> reached <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> bytes"", drvPtr -> maxline ) ; } }",0
1107,"<S2SV_ModStart> = 0 ; unsigned long flags ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; ret |= __copy_from_user ( & regs -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; ret |= __copy_from_user ( & ti -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user )",0
1108,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; message -> ttl = queueItem -> ancillary. ttl ; # else message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; message -> ttl = queueItem -> ancillary. ttl ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1109,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> struct se_device * <S2SV_ModStart> se_device * remote_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) remote_dev = xop -> src_dev ; else remote_dev = xop -> dst_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1110,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1111,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, new_bh <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; ext2_mb_cache_insert ( ext2_mb_cache, new_bh <S2SV_ModEnd> ) ; }",0
1112,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1113,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1114,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> 0 ) return <S2SV_ModEnd> rc ; inode",0
1115,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) )",0
1116,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1117,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> len ; struct parse_state * state = ecalloc ( 1, sizeof ( * state ) ) ; if (! state ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> query: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> path: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_query ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> query: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse",0
1118,"<S2SV_ModStart> SUCCESS ) { if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var )!= SUCCESS ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> 3 <S2SV_blank> points <S2SV_blank> in <S2SV_blank> your <S2SV_blank> array"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var )!= SUCCESS ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""You <S2SV_blank> must <S2SV_blank> have <S2SV_blank> at <S2SV_blank> least <S2SV_blank> 3 <S2SV_blank> points <S2SV_blank> in <S2SV_blank> your <S2SV_blank> array"" ) ; RETURN_FALSE ; } points [ i ]. y = Z_LVAL_PP ( var ) ; } if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var )!= SUCCESS ) { php_error_docref ( NULL T",0
1119,<S2SV_ModStart> ; sig_none = ( <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> -> it_sigev_notify & <S2SV_ModEnd> SIGEV_THREAD_ID ) ==,0
1120,"<S2SV_ModStart> = 2048 ; if ( ( <S2SV_ModStart> ) AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ) AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ResetQuantumMemory ( dmsy <S2SV_ModEnd> ) ; if",0
1121,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG sd ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( ctx -> frame_parallel_decode ) return vpx_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; else return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1122,<S2SV_ModStart>. path ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ;,0
1123,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_DEBUG ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1124,"<S2SV_ModStart>, ret ; if ( IS_IRAP ( s ) ) sh -> no_output_of_prior_pics_flag = 0 ; if ( IS_BLA ( s ) ) sh -> no_output_of_prior_pics_flag = 1 ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if (! sh -> first_slice_in_pic_flag ) sh -> no_output_of_prior_pics_flag = 1 ; if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA",0
1125,<S2SV_ModStart> ; if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbs + u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbs = u1_num_mbs + u1_num_mbsNby2 ; } if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; } if ( u1_num_mbs < u1_num_mbsNby2 ) { ps_dec -> u1_num_mbsNby2 = u1_num_mbsNby2 ; ps_dec -> u1_num_mbsNby2 = u1_num_mb,0
1126,"<S2SV_ModStart>, u4_y_offset ; WORD8 * pu1_out_p ; WORD8 * pu1_pred ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; memset ( pu1_out_p, 0, sizeof ( * pu1_out_p ) ) ; memset ( pu1_pred, 0, sizeof ( * pu1_pred ) ) ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if ( ps_dec -> e_pic_type == B_PIC ) { memcpy ( pu1_out_p, & pu1_out_p, sizeof ( * pu1_out_p ) ) ; } else { memcpy ( pu1_pred, & pu1_pred, sizeof ( * pu1_pred ) ) ; } IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2",0
1127,"<S2SV_ModStart> VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
1128,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1129,"<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> TX_SIZE tx_size = <S2SV_ModStart> 1 ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> (",0
1130,<S2SV_ModStart> mmap_legacy_base ( random_factor ) ; if ( mm -> mmap_legacy_base ) { mm -> mmap_base = mm -> mmap_legacy_base ; mm -> get_unmapped_area = arch_get_unmapped_area ; } else { mm -> mmap_base = mmap_base ( random_factor ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1131,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1132,"<S2SV_ModStart> return getnum ( <S2SV_ModEnd> L, fmt <S2SV_ModStart> case 'c' : { size_t sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'i' : case 'I' : { size_t sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } case 'I' : { size_t sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; }",0
1133,"<S2SV_ModStart> { rowstoread = ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP ) - ( TIFFTAG_ROWSPERSTRIP ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROW_OFFSET ) - ( TIFFGetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP ) - ( TIFFTAG_ROWSPERSTRIP ) - ( TIFFTAG_ROWSPERSTRIP ) - ( TIFFTAG_ROW_OFFSET ) - ( TIFF",0
1134,<S2SV_ModStart> } } assert ( 1 <S2SV_ModEnd> ) ; return,0
1135,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1136,"<S2SV_ModStart> - EINVAL ; if ( upid < 0 ) { type = PIDTYPE_MAX ; } else if ( upid > UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ; else if ( upid > UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ; else if ( upid > UINT32_MAX / sizeof ( * upid ) ) type = PIDTYPE_MAX ; else if ( upid > UINT32_MAX / sizeof ( * upid ) ) { type = PIDTYPE_MAX ; pid = get_task_pid ( current, type ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, type ) ; }",0
1137,"<S2SV_ModStart> siocb -> scm, false",1
1138,<S2SV_ModStart> number ) ; num &= SWF_SBITS_MASK ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MAX ; if ( num < SWF_SBITS_MIN ) num = SWF_SBITS_MIN ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MIN ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MAX ; if ( number > SWF_SBITS_MAX ) num = SWF_SBITS_MAX ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MAX ; if ( num < SWF_SBITS_MIN ) num = SWF_SBITS_MIN ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MAX ; if ( num > SWF_SBITS_MAX ) num = SWF_SBITS_MAX ;,0
1139,"<S2SV_ModStart> ] ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, 1, rows <S2SV_ModEnd>, file )",0
1140,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, secret",0
1141,"<S2SV_ModStart> -> private ; dm_block_device_lock ( lc -> dev -> bdev -> bd_inode ) ; dm_block_unlock ( lc -> dev -> bdev -> bd_inode ) ; return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> dev -> mode, cmd, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
1142,"<S2SV_ModStart> ; if ( actx -> tag_len > CHACHA_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LEN_ERROR ) ; return 0 ; } <S2SV_ModStart> ; if ( actx -> tag_len > CHACHA_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LEN_ERROR ) ; return 0 ; } if ( actx -> tag_len > CHACHA_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LEN_ERROR ) ; return 0 ; } if ( actx -> tag_len > CHACHA_CTR_SIZE ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_TAG_LEN_ERROR ) ; return 0 ; }",0
1143,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
1144,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; create_empty_file_as_root ( RUN_LIB_FILE, 0644 ) ; if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { errExit ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { if ( arg_debug || arg_debug_private_lib ) printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path, R_OK ) ) { errExit ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } if ( access ( full_path,",0
1145,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
1146,"<S2SV_ModStart> { memcpy ( pass_salt <S2SV_ModEnd>, cpkt. <S2SV_ModStart> cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_win",0
1147,<S2SV_ModStart> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_ModEnd> flags |= NTLMSSP_NEGOTIATE_SIGN <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = *,0
1148,"<S2SV_ModStart> { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc == IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } else { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } } else { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; } } else { if ( mutt_ssl_starttls ( adata -> conn ) ) {",0
1149,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1150,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) cp0 ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""%s"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"",",0
1151,<S2SV_ModStart> g -> sect > UINT32_MAX / 8 || g -> head > UINT32_MAX / 8 || <S2SV_ModStart> g -> head > UINT32_MAX / 8 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || g -> track > UDP -> tracks >> STRETCH ( g ) || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ;,0
1152,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ==",0
1153,"<S2SV_ModStart> ) ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & contents, & clen, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & remainder, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & contents, & clen, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & contents, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & contents, & rlen ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t, & t, & remainder, & rlen ) ) return ASN1_BAD_ID ;",0
1154,"<S2SV_ModStart> ; read_userfile ( ) ; <S2SV_ModStart> slavename ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; if ( user -> password!= NULL ) { mlock ( user -> password, strlen ( user -> password ) ) ; } # endif <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PT",0
1155,"<S2SV_ModStart> 1 ; } r = mount_entry_on_generic ( mntent, path ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } ret = mount_entry_on_generic ( mntent, path ) ; return ret ;",0
1156,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> ++ ) { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c,",0
1157,"<S2SV_ModStart> ; if ( unlikely (! bio_flagged ( bio, BIO_UPTODATE ) ) ) { ret = - EINVAL ; goto out_unmap ; }",0
1158,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1159,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn, FIRSTSOCKET ) ; if ( result ) return result ; } Curl_pp_init ( pp ) ; pp -> response_time = RESP_TIMEOUT ; pp -> statemach_act = smtp_statemach_act ; pp -> endofresp = smtp_endofresp ; pp -> conn = conn ; if ( ( conn -> handler -> protocol & CURLPROTO_SMTPS ) && data -> state. used_interface!= Curl_if_multi ) { result = Curl_ssl_connect ( conn,",0
1160,"<S2SV_ModStart> } ; for ( i = 0, j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++, j ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } else if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = 0 ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; for ( i = 0 ; i < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [",0
1161,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1162,<S2SV_ModStart> ) ; return <S2SV_ModEnd> sizeof ( struct,0
1163,"<S2SV_ModStart> ; priv -> mii_bus = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> mii_bus ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_map = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; priv -> mii_map = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> mii_map ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_map = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; priv -> mii_map = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> mii_map )",0
1164,"<S2SV_ModStart> ; return FALSE ; } if ( transport -> credssp == NULL ) { fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> not <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> not <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> not <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> not <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; cred",0
1165,"<S2SV_ModStart> ( * prclyrno ) < 0 ) { JAS_LOG ( 0x534e
1166,"<S2SV_ModStart> { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_",0
1167,<S2SV_ModStart> goto out ; if (! res -> fmode ) status = nfs4_xdr_read_fmode ( xdr ) ; if ( status ) goto out ; <S2SV_ModStart> goto out ; if (! res -> fmode ) status = nfs4_xdr_read_fmode ( xdr ) ; if (! status ) status = nfs4_xdr_read_fmode ( xdr ) ; if (! status ) status = nfs4_xdr_read_fmode ( xdr ) ; if (! status ) status = nfs4_xdr_read_fmode ( xdr ) ; if ( status ) status = nfs4_xdr_read_fmode ( xdr ) ; if ( status ) status = nfs4_xdr_read_fmode ( xdr ) ; if (! status ) status = nfs4_xdr_read_fmode ( xdr ) ; if (! status ) status = nfs4_xdr_read_fmode ( xdr ) ;,0
1168,"<S2SV_ModStart> ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; }",0
1169,<S2SV_ModStart> & CLONE_SETTLS ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p -> flags & PF_KTHREAD ) ) { if (! ( p,0
1170,"<S2SV_ModStart> { jas_stream_t * stream ; jas_stream_memobj_t * obj ; jas_dbgLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_initbuf ( stream, JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY, 0, 0 ) ; stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ) ; stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; }",0
1171,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> ; char * userstyle <S2SV_ModEnd>, * key_s <S2SV_ModStart> ; u_char * pkblob, * sig, have_sig ; size_t blen, slen <S2SV_ModEnd> ; int r <S2SV_ModStart> ; if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkalg, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, &",0
1172,"<S2SV_ModStart> ; uint32_t bcount ; if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! ( config -> qmode & QMODE_NO_STORE_WRAPPER ) &&! WavpackAddWrapper ( wpc, & filehdr, sizeof ( filehdr ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1173,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ), 0 ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sas",0
1174,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1175,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( o, buf_size, 2 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
1176,<S2SV_ModStart> db_count = le32_to_cpu ( es -> s_db_count ) ; if ( db_count < 0 || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || ( db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || ( db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count ) || db_count > EXT2_MAX_DBS_PER_BLOCK ( es -> s_db_count,0
1177,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_INVALID_PARAMETER ;,0
1178,"<S2SV_ModStart> 4 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { struct net * net = xt_net ( par ) ; unsigned int in_mtu = min ( dst_mtu ( skb_dst ( skb ) ), in_mtu ) ; if ( in_mtu <= minlen ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { struct net * net = xt_net ( par ) ; unsigned int in_mtu = min ( dst_mtu ( skb_dst ( skb ) ) ; if ( in_mtu <= minlen ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"",",0
1179,"<S2SV_ModStart> * matrix ; jas_matind_t i ; jas_matind_t maxrows ; jas_matind_t <S2SV_ModEnd> numcols ; if <S2SV_ModStart> return 0 ; maxrows = numrows ; maxcols = numcols ; matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; if ( maxrows > 0 ) { if (! matrix -> rows_ = jas_alloc2 ( maxrows, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> maxrows_ = maxrows ; matrix -> numcols_ = numcols ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t * ) ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ;",0
1180,"<S2SV_ModStart> ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb ) ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb ) ) ; <S2SV_ModEnd> kfree_skb ( skb <S2SV_ModStart> skb ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IPSTATS_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_FRAGFAILS ) ; kfree_skb ( skb ) ;",0
1181,"<S2SV_ModStart> * req ; struct scsi_disk_reqops * scsi_disk_reqops = s -> scsi_disk_reqops <S2SV_ModEnd> ; req = <S2SV_ModStart> scsi_disk_reqops, & scsi_disk_reqops <S2SV_ModEnd>, & s <S2SV_ModStart> scsi_disk_reqops, & s -> scsi_disk_reqops <S2SV_ModEnd>, hba_private ) <S2SV_ModStart> scsi_disk_reqops, & s -> scsi_disk_reqops <S2SV_ModEnd>, req )",0
1182,"<S2SV_ModStart> int i ; <S2SV_ModEnd> txid xmin, <S2SV_ModStart> int expect ; <S2SV_ModEnd> nxip = pq_getmsgint <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len <S2SV_ModEnd> || expect > <S2SV_ModStart> goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1183,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ; } <S2SV_null> <S2SV_null>,0
1184,"<S2SV_ModStart>!= RDMA_NODE_IB_CA ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_unbind_addr ( cm_id, & sin ) ; }",0
1185,"<S2SV_ModStart> sk ) ; struct xfrm_dump_info info ; <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> BUILD_BUG_ON ( sizeof <S2SV_ModStart> xfrm_dump_info info ; info. in_skb = cb -> skb ; info. out_skb = cb -> skb ; info. nlmsg_seq = cb -> nlh -> nlmsg_seq ; info. nlmsg_flags = <S2SV_ModEnd> NLM_F_MULTI ; walk <S2SV_ModStart> = NLM_F_MULTI ; if ( <S2SV_ModStart> 0 ] ) { xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ;",0
1186,<S2SV_ModStart> - 1 ; struct oe_epoll * epoll ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1187,"<S2SV_ModStart> = ovl_dentry_upper ( dentry ) <S2SV_ModEnd> ; int err <S2SV_ModStart> = - ESTALE ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } <S2SV_ModEnd> inode_unlock ( dir <S2SV_ModStart> I_MUTEX_PARENT ) ; <S2SV_ModEnd> inode_unlock ( dir <S2SV_ModStart> I_MUTEX_PARENT ) ; <S2SV_ModEnd> return err ;",0
1188,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", errstr ) ; return 1",0
1189,<S2SV_ModStart> &&! ( nmemb <S2SV_ModEnd> && size ),0
1190,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; },0
1191,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1192,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", <S2SV_ModStart> name ) ; goto error ; } if ( jas_getdbglevel ( ) >= 2 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %s\\n"", box -> info -> name ) ; goto error ; }",0
1193,,1
1194,<S2SV_ModStart> ) { journal_t <S2SV_ModEnd> * journal =,0
1195,<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STCO ) ;,0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> UINT32 nsc_rle_encode (,0
1197,<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data +,0
1198,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; }",0
1199,<S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1200,"<S2SV_ModStart> == 0xfffffe00UL ) if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( image -> columns > 1536 ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed""",0
1201,"<S2SV_ModStart> ; if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_",0
1202,"<S2SV_ModStart> g_hash_table_destroy ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=5;k=blah"" ) ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=6;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_destroy ( headers ) ; g_hash_",0
1203,"<S2SV_ModStart> HAVE_IPV6 char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> { p = memchr <S2SV_ModEnd> ( str + <S2SV_ModStart> 1 ) ; if (! p || * ( p + 1 )!= ']' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } * portno = atoi ( p + 2 ) ; return estrndup ( str + 1, p - str - 1 ) ; } # else if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; if (! colon ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL",0
1204,"<S2SV_ModStart> y_buffer ; for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1205,<S2SV_ModStart> ; } c -> csty = bytestream2_get_byteu ( & s -> g ) ; if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { if,0
1206,"<S2SV_ModStart> { if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE ) && ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECT",0
1207,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMMON <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; int64_t dummy_dist <S2SV_ModStart> BLOCK_SIZE i ; const int num_4x4_blk = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> mb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x -> mb_index",0
1208,<S2SV_ModStart> ; int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * bw ) ; tptr = pptr ; tlen = EXTRACT_32BITS ( * bw ) ; if ( tlen!= sizeof ( struct lmp_common_header ) || tlen!= sizeof ( struct lmp_object_header ) || tlen!= sizeof ( struct lmp_object_header ) || tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_common_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) || obj_tlen!= sizeof ( struct lmp_object_header ) ||,0
1209,"<S2SV_ModStart> const MB_MODE_INFO * mbmi <S2SV_ModEnd>, const int_mv <S2SV_ModStart> ++ i ) { const MV * ref = mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] ; const int_mv diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; }",0
1210,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1211,"<S2SV_ModStart> ) ; if ( skb -> len + hdr_size > size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry,",0
1212,<S2SV_ModStart> ) ; spin_lock_init <S2SV_ModEnd> ( & sta <S2SV_ModStart> ) ; spin_lock_init <S2SV_ModEnd> ( & sta,0
1213,<S2SV_ModStart> &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attr. sample_type & PERF_SAMPLE_RAW ) return 0 ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; },0
1214,"<S2SV_ModStart> 1 ) ; if ( data_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if ( control_interface == NULL ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> found\\n"" ) ; return - ENODEV ; }",0
1215,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
1216,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var =",0
1217,"<S2SV_ModStart> sctp_bind_hashbucket * head ; struct list_head tmplist ; sctp_sk_copy_descendant ( oldsk, newsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; sctp_sk_copy_descendant ( newsk, oldsk ) ; newsp -> ep = NULL ; newsp -> hmac = NULL ; spin_lock ( & head -> lock ) ; head = & sctp_port_hashtable [ sctp_phashfn ( sock_net ( oldsk ), sctp_phashfn ( sock_net ( oldsk ), sctp_phashfn ( sock_net ( newsk ), sctp_phashfn ( sock_net ( newsk ), sctp_phashfn ( sock_net ( newsk ), sctp_phashfn ( sock_net ( newsk ) ) ] ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; spin_unlock ( & head -> lock ) ; sctp_sk ( newsk ) -> bind_hash =",0
1218,"<S2SV_ModStart> O_RDWR ) ; if (! open ( uinput_dev_path [ x ], O_RDONLY ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, O_RDWR ) ; if (! write ( fd, & dev, sizeof ( dev ) ) ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart>, EV_KEY ) ; ioctl ( fd, UI_SET_EVBIT, EV_REL ) ; ioctl ( fd, UI_SET_EVBIT, EV_SYN ) ; for ( x = 0 ; key_map [ x ]. name!= NULL ; x ++ ) ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, NULL ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __",0
1219,"<S2SV_ModStart> { struct desc_struct <S2SV_ModEnd> * desc ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> if ( v8086_mode <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; if ( desc -> type & BIT ( 3 ) ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } } <S2SV_null> <S2SV_null>",0
1220,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1221,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s,",0
1222,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1223,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> ; code = krb5_gss_init_context <S2SV_ModEnd> ( & ctx,0
1224,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, screen -> columns, screen -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1225,<S2SV_ModStart> ; while ( <S2SV_ModEnd> impeg2d_bit_stream_nxt ( ps_stream,0
1226,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; }",0
1227,"<S2SV_ModStart> imethod ) ; if (! method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if (! method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if (! method -> is_inflated ) method = ( ( MonoMethodInflated * ) method ) -> declaring ; if ( count!= mono_array_length ( types ) ) return NULL ; count = mono_array_get ( types, gpointer, count ) ; type_argv [ count ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType *, count ) ; type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType *, count ) ; for ( i = 0 ; i < count ; i ++ ) type_argv [ i ] = g_new0 ( MonoType",0
1228,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( & end, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( end, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
1229,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1230,"<S2SV_ModStart> raw_super -> blocks_per_seg > F2FS_MAX_LOG_SEGS || le32_to_cpu ( raw_super -> blocks_per_seg ) < F2FS_MIN_LOG_SEGS || le32_to_cpu ( raw_super -> blocks_per_seg ) > F2FS_MAX_LOG_SEGS || le32_to_cpu ( raw_super -> blocks_per_seg ) > F2FS_MAX_LOG_SEGS || le32_to_cpu ( raw_super -> blocks_per_seg ) < F2FS_MIN_LOG_SEGS || le32_to_cpu ( raw_super -> blocks_per_seg ) > F2FS_MAX_LOG_SEGS || le32_to_cpu ( raw_super -> blocks_per_seg ) < F2FS_MIN_LOG_SEGS ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; }",0
1231,"<S2SV_ModStart> is_path ) { const char * repl ; size_t len ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' ) && ( __libc_enable_secure? NULL : l -> l_origin ) <S2SV_ModEnd> : _dl_",0
1232,<S2SV_ModStart> } pDecCont = ( decContainer_t * ),0
1233,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> sin6 ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) { opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; if (! opt_space ) { opt_space = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt_space, sock_owned_by",0
1234,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt ) ) goto inhdr_",0
1235,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1236,<S2SV_ModStart> ; if ( rtm -> rt_iif!= RTA_IIF && rtm -> rt_iif!= RTA_DST && rtm -> rt_iif!= RTA_IIF && rtm -> rt_iif!= RTA_IIF ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_iif!= RTA_IIF ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_iif!= RTA_IIF && rtm -> rt_dif!= RTA_DST && rtm -> rt_iif!= RTA_IIF && rtm -> rt_iif!= RTA_IIF ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_iif!= RTA_IIF ) { err = - EINVAL ; goto errout ; } if ( rtm -> rt_iif!= RTA_IIF && rtm -> rt_dif!= RTA_DST ) { err = - EINVAL ; goto errout ; },0
1237,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1238,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1239,<S2SV_ModStart> ) break ; <S2SV_ModEnd> tp -> copied_seq <S2SV_ModStart> = seq ; tcp_rcv_space_adjust ( sk ) ;,0
1240,"<S2SV_ModStart> ; krb5_key_data * key_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> & err ) ; key_data = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_",0
1241,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1242,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> zInput = sqlite3_malloc <S2SV_ModStart> nByte + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1243,<S2SV_ModStart> filp ) { file_accessed ( filp ) ; <S2SV_ModStart> ) ) ; return fput ( filp ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1244,"<S2SV_ModStart> expr_ty iter, asdl_seq * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
1245,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_sort_index ( MI_CHECK <S2SV_ModEnd> * param, <S2SV_ModStart> name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ;",0
1246,<S2SV_ModStart> } } return opt <S2SV_ModEnd> ; } <S2SV_null>,0
1247,<S2SV_ModStart> ; if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) ) { vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; } else if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( is_page_fault ( intr_info ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_EXIT,0
1248,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version""",0
1249,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif",0
1250,"<S2SV_ModStart> ; if ( IS_ERR ( pData -> socket ) ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } <S2SV_ModStart> ; if ( IS_ERR ( pData -> socket ) ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if ( IS_ERR ( pData -> socket ) ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_",0
1251,"<S2SV_ModStart> 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) resv_map_free ( resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; if (! resv_map ) resv_map_free ( resv_map )",0
1252,"<S2SV_ModStart> sk ) ; struct ipv6_txoptions * opt ; <S2SV_ModStart> skb ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1253,"<S2SV_ModStart> goto out_free ; if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_inode -> i_uid!= current_euid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n""",0
1254,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1255,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1257,"<S2SV_ModStart>, last_pwd ; krb5_ret_t ret <S2SV_ModEnd> ; krb5_boolean have_pol <S2SV_ModStart> have_pol ) { last_pwd = adb. last_pwd ; if ( last_pwd == NULL ) last_pwd = adb. last_pwd ; if ( last_pwd == NULL ) last_pwd = adb. last_pwd ; if ( last_pwd == NULL ) last_pwd = adb. last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; ret = kdb_get_active_mkey ( handle, & act_mkey, & act_n_ks_tuple, keepold, kdb ) ; if ( ret ) goto done ; ret = kdb_get_active_mkey ( handle, & act_mkey, & act_n_ks_tuple, keepold, kdb ) ; if ( ret ) goto done ; ret = kdb_get_active_mkey ( handle, & act_mkey, & act_n_ks_tuple, keepold, kdb ) ; if ( ret ) goto done ; ret = kdb_get_",0
1258,"<S2SV_ModStart>, result = RLC_OK <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= RSA_DEC ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } do { m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad!= 0 && m_len > 0 )",0
1259,<S2SV_ModStart> ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; <S2SV_ModStart> ; if (! is_undef ( r2 ) ) mem [ r1. i ] = r2. i ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; <S2SV_ModStart> ; if (! is_undef ( r2 ) ) mem [ r1. i ] = r2. i ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t,0
1260,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1261,"<S2SV_ModStart> 1 ) ) { if ( blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if ( rq -> q == hctx -> queue ) fn ( hctx, rq, data, reserved ) ; } else { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) ) { if (! blk_mq_tag_to_rq ( hctx -> tags, off + bit ) )",0
1262,"<S2SV_ModStart> SF_PRIVATE ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_init_files ( psf ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; return NULL ; }",0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) <S2SV_ModEnd> count [ i,0
1264,"<S2SV_ModStart> ] == '[' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. shift = ARM_NO_SHIFT ; } if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } if (! strncmp ( token, ""lsr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR",0
1265,"<S2SV_ModStart> ) { MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; VP9_COMMON <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context, 0, sizeof ( * xd -> above_context ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd",0
1266,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSP ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ;",0
1267,"<S2SV_ModStart> EOFOp 0x07 unsigned <S2SV_ModEnd> char * magick <S2SV_ModStart> ) ) ; if ( count < 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> do { image -> <S2SV_ModEnd> columns = ReadBlobLSBShort <S2SV_ModStart> ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = ( MagickStatusType ) ReadBlobByte ( image )",0
1268,"<S2SV_ModStart> ctl_files_rwlock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_ecards_limit - 1, err ) ; kfree ( card ) ; return err ; } mutex_unlock ( & snd_card_mutex ) ;",0
1269,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1270,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len ) ; return - 1 ; }",0
1271,"<S2SV_ModStart> i4_poc, u2_frame_num, & ps_dec -> s_cur_slice_pic, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps_dec -> s_cur_slice_pic_out, & ps",0
1272,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata!= NULL ) { OPENSSL_free ( rdata ) ; pitem_free ( item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; }",0
1273,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> args -> buffer_count <S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ) * args -> buffer",0
1274,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> int data_size ) { <S2SV_ModEnd> struct mpt_ioctl_iocinfo * <S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; if ( ( ( iocnum = mpt_verify_adapter ( ioc -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d <S2SV_blank> - <S2SV_blank>",0
1275,"<S2SV_ModStart>, const char <S2SV_ModEnd> * path ) <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1276,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1277,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len_sent = 0 <S2SV_ModStart> ; audit_log_format ( * ab, ""argc=%d"", context -> execve. argc <S2SV_ModEnd> ) ; buf <S2SV_ModStart> ; buf = kmalloc <S2SV_ModEnd> ( MAX_EXECVE_AUDIT_LEN + <S2SV_ModStart> + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; kfree ( buf ) ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ;",0
1278,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1279,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; gchar line [ NETSCREEN_LINE_LENGTH ] ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } pkt_len = parse_netscreen_rec_hdr ( phdr, line, cap_int, & cap_dir, & cap_dir, cap_dst, buf, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_int, cap_dir, cap",0
1280,<S2SV_ModStart> rq ) { struct kvm_vcpu * vcpu ; <S2SV_ModStart> rq ) ; vcpu = smp_processor_id ( ) ; <S2SV_ModStart> ) ; u64 <S2SV_ModEnd> irq_time ; vcpu <S2SV_ModStart> ) ; } vcpu = smp_processor_id ( ) ; if ( vcpu!= smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == smp_processor_id ( ) || cpu == s,0
1281,"<S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { raw_printf <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
1282,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> struct blkif_response resp <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; spin_lock_irqsave ( & ring -> blk_ring_lock, flags ) ; blk_rings = & ring -> blk_rings ; switch ( ring -> blkif -> blk_protocol ) { case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64.",0
1283,<S2SV_ModStart> ; if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ; } if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) { if ( ( mask & KADM5_ATTRIBUTES ) && ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ; } },0
1284,"<S2SV_ModStart> offset ; if ( ( datao + 12 < datao ) || ( datao + 12 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( Mnote",0
1285,"<S2SV_ModStart> ; if ( nimages < 0 ) return ERROR_INT ( ""nimages <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nimages, ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( <S2SV_ModStart> ) ; if ( nimages < 0 ) return ERROR_INT ( ""nimages <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", nimages, ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( nimages / ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int32 ) ( l_int",0
1286,"<S2SV_ModStart> ICMP_ECHO : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"" <S2SV_ModEnd>, dp -> <S2SV_ModStart> ICMP_ECHOREPLY : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_type, dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"" <S2SV_ModEnd>, dp -> <S2SV_ModStart> ICMP_ECHO : ND_TCHECK_16BITS ( & dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_id, dp -> icmp_seq ) ; ( void ) snprintf ( buf, sizeof ( buf ),",0
1287,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> ; } ci = d_inode ( dentry ) -> i_crypt_info ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_REVOKED ) | ( 1 << KEY_FLAG_DEAD ) ) ) ci = NULL ; if ( ci && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( ( 1 << KEY_FLAG_INVALIDATED | ( 1 << KEY_FLAG_INVALIDATED | ( 1 << KEY_FLAG_REVOKED | ( 1 << KEY_FLAG_DEAD ) ) ) ) ) ci = NULL ; spin_lock ( & dentry -> d_lock ) ; dir_has_key = ( ci!= NULL && ci -> ci_keyring_key && ci -> ci_keyring_key -> flags & ( ( 1 << KEY_FLAG_INVALIDATED ) | ( 1 << KEY_FLAG_INVALIDATED | ( 1 << KEY_FLAG_REVOKED | ( 1 << KEY_FLAG_,0
1288,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> exec_name && opt -> connect_addr. names ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s]",0
1289,"<S2SV_ModStart> ; } numbers [ argc ] = ( unsigned long ) <S2SV_ModStart> ; if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( numbers [ argc ] > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, """,0
1290,<S2SV_ModStart> ) ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posX ; # else context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posX * i -> parent -> width ; context. frbuff_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posX ; # else context. line_p. p8 = i -> parent -> frbuff. p8 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p,0
1291,"<S2SV_ModStart> n ) ; if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; }",0
1292,"<S2SV_ModStart> ) { # define ThrowDCMException ( exception, message ) { if ( info. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( redmap!= ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; if ( stream_info!= ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream",0
1293,<S2SV_ModStart> void ) { if ( recovery_mode == RECOVERY_MODE_NONE ) { recovery_mode = RECOVERY_MODE_NONE ; } else if ( recovery_mode == RECOVERY_MODE_NONE ) { recovery_mode = RECOVERY_MODE_NONE ; },0
1294,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT11 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT13 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT12 <S2SV_ModEnd> )",0
1295,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1296,"<S2SV_ModStart> ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; n = read ( req -> socket, buf, n ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, buf, n ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } n = read ( req -> socket, buf, n ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket, n ) ; goto error ; } n = read ( req -> socket, buf, n ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; }",0
1297,<S2SV_ModStart> { WORD32 i ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; UWORD32 u4_max_poc_lsb ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_dpb_mgr ;,0
1298,"<S2SV_ModStart> case PTRACE_GET_THREAD_AREA : if ( request == PTRACE_GETREGS ) { ret = copy_regset_to_user ( child, & user_arm_view, REGSET_GPR, 0, sizeof ( struct pt_regs ), datap ) ; ret = copy_regset_to_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; } else { ret = copy_regset_to_user ( child, & user_arm_view, REGSET_GPR, 0, sizeof ( struct fp_regs ), datap ) ; ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; ret = copy_regset_from_user ( child, & user_arm_view, REGSET_FPR,",0
1299,"<S2SV_ModStart> ) ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> "" ""in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } if ( copy_from_user ( bin + bin_offset, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin + bin_offset, ( void __user * ) ( uintptr_t ) args -> shader_cl, args -> shader_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin + bin_offset, ( void __user * ) ( uintptr_t ) args",0
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_object <S2SV_ModStart> ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { names [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth,",0
1301,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> RD_BOOL <S2SV_ModEnd> ber_parse_header ( STREAM,0
1302,"<S2SV_ModStart> ; other = unix_peer_get ( sk ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } <S2SV_ModStart> other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask <S2SV_ModEnd> ; } <S2SV_null>",0
1303,<S2SV_ModStart> 4 ] ; <S2SV_ModEnd> size_t value ; <S2SV_ModStart> size_t ) ( <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ) ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 16 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 8 ; value |= ( size_t ) <S2SV_ModEnd> buffer [ 4 <S2SV_ModStart> ] ; quantum. unsigned_value = ( value & 0xffffffff ) ; return ( quantum. unsigned_value ) <S2SV_ModEnd> ; } <S2SV_null>,0
1304,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1305,<S2SV_ModStart> void exit_io_context ( <S2SV_ModEnd> void ) { <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> current ) ; mutex_unlock <S2SV_ModEnd> ( current ) <S2SV_ModStart> current ) ; <S2SV_ModEnd> ioc = current <S2SV_ModStart> -> io_context ; mutex_unlock <S2SV_ModEnd> ( current ),0
1306,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg |= ptr [ 2 ] << 8 ; if ( ptr [ 3 ]!= 0xFF || ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF || ptr [ 6 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; },0
1307,"<S2SV_ModStart> data ) { u32 <S2SV_ModEnd> i ; int <S2SV_ModStart> int ret ; * value = 0 <S2SV_ModEnd> ; ret = <S2SV_ModStart> ; ret = xen_pcibk_read_config_dword <S2SV_ModEnd> ( dev, <S2SV_ModStart>, value, data ) ; if ( ret ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
1308,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1309,<S2SV_ModStart> ) ; kfree <S2SV_ModEnd> ( fpl ),0
1310,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1311,<S2SV_ModStart> -> dwc ; if (! req ) return ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1312,<S2SV_ModStart> } # endif # if 0 <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModStart> } # endif # if 0 <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV_null> <S2SV_null> # <S2SV_ModStart> } # endif # if 1 <S2SV_ModEnd> <S2SV,0
1313,"<S2SV_ModStart>, [ DISCE_PROBE ] = sas_probe_devices, [ DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, [ DISCE_DESTRUCT ] = sas_destruct_devices, } ; static const work_func_t sas_event_fns [ DISC_NUM_EVENTS ] = { [ DISCE_DISCOVER_DOMAIN ] = sas_discover_domain, [ DISCE_REVALIDATE_DOMAIN ] = sas_revalidate_devices, [ DISCE_PROBE ] = sas_probe_devices, [ DISCE_SUSPEND ] = sas_suspend_devices, [ DISCE_RESUME ] = sas_resume_devices, } ; INIT_SAS_WORK ( & disc -> disc_work [ DISC_NUM_EVENTS ]. work, sas_event_fns [ DISC_NUM_EVENTS ] ) ; for ( i = 0 ; i < DISC_NUM_EVENTS ; i ++ ) { INIT_SAS_WORK ( & disc -> disc_work [ i ]. work, sas_event_fns [ i ]",0
1314,"<S2SV_ModStart> name, int rep_quick ) { <S2SV_ModEnd> DBUG_ENTER ( ""mi_repair_by_sort"" <S2SV_ModStart> name, rep_quick, & got_error ) ; if ( got_error ) { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr ( start_records, llbuff ) ) ; printf ( ""Data <S2SV_blank> records: <S2SV_blank> %d\\n"", llstr",0
1315,"<S2SV_ModStart> ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0 ; } uECC_vli_modMult ( k, k, tmp, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, k, curve -> n, num_n_words ) ; uECC_",0
1316,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * daoack, ND_DAOACK_TRUNC_LEN ) ; if ( length < ND_DAOACK_TRUNC_LEN ) goto tooshort <S2SV_ModEnd> ; bp += <S2SV_ModStart> ; tooshort : ND_TCHECK2 ( * daoack, ND_DAOACK_TOO_SHORT_LEN ) ; if ( length < ND_DAOACK_TOO_SHORT_LEN ) goto tooshort ; bp += ND_DAOACK_TOO_SHORT_LEN ; length -= ND_DAOACK_TOO_SHORT_LEN ; if ( RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_TCHECK2 ( * daoack, ND_DAOACK_TOO_SHORT_LEN ) ; if ( length < ND_DAOACK_TOO_SHORT_LEN ) goto tooshort ; dagid_str = ip6addr_string ( ndo, daoack -> rpl_dagid ) ; bp += DAGID_LEN ; length -= DAGID_LEN ; }",0
1317,"<S2SV_ModStart> ) ; int <S2SV_ModEnd> err ; int <S2SV_ModStart> out ; if ( msg -> msg_name ) { struct sockaddr_in * sin <S2SV_ModEnd> ; sin = <S2SV_ModStart> ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; if ( addr_len ) * addr_len = sizeof ( * sin ) ; msg -> msg_namelen = sizeof ( * sin ) ; if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } msg -> msg_name = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = family ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; if ( isk -> cmsg_flags ) ip_cmsg_flags ( msg, sk, skb )",0
1318,<S2SV_ModStart> ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN <S2SV_ModEnd> | EXT4_EX_NOCACHE ; <S2SV_ModStart> | EXT4_GET_BLOCKS_KEEP_SIZE ; <S2SV_ModEnd> if ( mode <S2SV_ModStart> & FALLOC_FL_KEEP_SIZE ) <S2SV_ModEnd> flags |= EXT4_GET_BLOCKS_KEEP_SIZE,0
1319,"<S2SV_ModStart> buf ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( new_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } } }",0
1320,"<S2SV_ModStart> map ; map = bpf_map_inc <S2SV_ModEnd> ( map,",0
1321,"<S2SV_ModStart> cp ) { <S2SV_ModEnd> int cval = <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0'",0
1322,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1323,"<S2SV_ModStart> size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < 4 ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; }",0
1324,"<S2SV_ModStart> * lined ; l_uint32 <S2SV_ModEnd> * pixc, <S2SV_ModStart> * pixc, * pixm, * pixg, * pixd, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs || pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( i = 0 ; i < ncolors ; i ++ ) lut [ i ] = - 1 ; for ( i",0
1325,<S2SV_ModStart> goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err ; if ( BN_num_bits ( r ) > BN_num_bits ( r ) ) goto err,0
1326,<S2SV_ModStart> 256 ; vpx_mse16x16_t vpx_mse16x16 ; vpx_mse16x16_t mvpx_mse16x16 ; vpx_mse16x16_t mvpx_mse16x16 ; vpx_mse16x16 = vpx_mse16x16 ; vpx_mse16x16. vf = vpx_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. row_buffer = recon_buffer -> y_buffer + recon_yoffset ; xd -> pre. col_buffer = recon,0
1327,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1328,"<S2SV_ModStart> ; value = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> ) { nbits = 8 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } <S2SV_ModEnd> msg -> readcount",0
1329,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id2 ; <S2SV_ModStart> ; up_write ( & card -> controls_rwsem ) ; id = kcontrol -> id ; <S2SV_ModStart> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1330,"<S2SV_ModStart> netif_msg_init ( msg_level, NETIF_MSG_DRV | NETIF_MSG_PROBE | NETIF_MSG_LINK ) ; INIT_WORK ( & dev -> txq_pause, usbnet_txq_resume ) ; init_usb_anchor ( & dev -> deferred ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init ( & dev -> txq_mutex ) ; mutex_init",0
1331,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> + 4 ; size_t <S2SV_ModEnd> overhead = overhead <S2SV_ModStart> + 1 ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) ) { return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append ( data, ns, strlen ( ns ) + 1 ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i ] ) ) ; } if ( write_concern ) { if ( mongo_check_last_error ( conn, ns, write_concern ) ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_",0
1332,<S2SV_ModStart> g_wnd_assistant ) ; if ( ( g_dump_dir_name == NULL ) || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL ) || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL ) || ( g_dump_dir_name == NULL || ( g_dump_dir_name == NULL || ( g_dump_dir_name,0
1333,"<S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) plen = S_HELLO_LEN ; <S2SV_ModStart> - 2 ; if ( plen > S_HELLO_LEN ) { int x = 2 + 4 ; * cmd ++ = htons ( S_CMD_INET_CHECK ) ; memcpy ( cmd + 1, addr, 4 ) ; memcpy ( cmd + 1 + 2, id, 2 ) ; memcpy ( cmd + 1 + 2, id, 2 ) ; printf ( ""Inet <S2SV_blank> check <S2SV_blank> by <S2SV_blank> %s <S2SV_blank> %d\\n"", inet_ntoa ( * addr ), ntohs ( * id ) ) ; printf ( ""\\n"" ) ; * cmd ++ = htons ( S_CMD_INET_CHECK ) ; memcpy ( cmd + 1, addr, 4 ) ; memcpy ( cmd + 1 + 2, id, 2 ) ; memcpy ( cmd + 1 + 2, id, 2 ) ; printf ( ""Inet <S2SV_blank> check <S2SV_blank> by <S2SV_blank> %s <S2SV_blank> %d\\n"", inet_ntoa ( * addr ), ntohs ( * id ) ) ; printf ( ""\\",0
1334,<S2SV_ModStart> { umode_t mode ; mode = inode -> i_mode ; <S2SV_ModStart> retval < 0 ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ) ||! S_ISDIR ( inode -> i_mode ),0
1335,<S2SV_ModStart> ; if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } <S2SV_ModEnd> methods = calloc <S2SV_ModStart> ) ; if (! methods ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> imports_list ) ; return false ; },0
1336,<S2SV_ModStart> NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginNameString : type = RPC_TYPE_STRING ; break ; case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE <S2SV_ModEnd> ; } <S2SV_null>,0
1338,"<S2SV_ModStart> INT_MAX ; const <S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs <S2SV_ModEnd> ; do { <S2SV_ModStart> int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } else { last_error = bits_per_mb_at_this_q - target_bits_",0
1339,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101WritePhyReg ( interface, TJA1101_COMM_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value |= T",0
1340,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1341,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1342,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD (,0
1343,"<S2SV_ModStart>, PREDICTION_MODE mode, <S2SV_ModEnd> TX_SIZE tx_size, <S2SV_ModStart> TX_SIZE tx_size, <S2SV_ModEnd> int up_available, <S2SV_ModStart> plane ] ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_row, 128 + 16 ) ; uint8_t * left_col = left_col + 64 ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, right_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( left_available ) { if ( xd -> mb_to_bottom_edge < 0 ) { for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref",0
1344,"<S2SV_ModStart> ; } else if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } else if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> marker\\n"" ) ; goto error ; }",0
1345,"<S2SV_ModStart> uchar * buf, jas_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1346,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1347,"<S2SV_ModStart> BUG ( ) ; if (! thresholds ) { mutex_unlock ( & memcg -> thresholds_lock ) ; return ; } <S2SV_ModEnd> usage = mem_cgroup_usage <S2SV_ModStart> ( memcg, type == _MEMSWAP ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. threshold < usage ) { ++ new -> current_threshold ; } j ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new )",0
1348,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = idr_find_and_get ( & client -> idr, id ) ; mutex_unlock ( & client -> lock ) ; if (! handle ) { mutex_unlock ( & client -> lock ) ; return ERR_PTR ( - EINVAL ) ; } mutex_unlock ( & client -> lock ) ; handle = idr_find ( & client -> idr, id ) ; if (! handle ) { mutex_unlock ( & client -> lock ) ; handle = ERR_PTR ( - EINVAL ) ; } mutex_unlock ( & client -> lock ) ; return handle <S2SV_ModEnd> ; } <S2SV_null>",0
1349,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( wb, VP9_FRAME_MARKER",0
1350,"<S2SV_ModStart> long long_tmp ; memset ( scan_mtm, 0, sizeof ( scan_mtm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_mtm, 0, sizeof ( scan_mtm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; memset ( scan_ltm, 0, sizeof ( scan_ltm ) ) ; mem",0
1351,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> ; q = osStrchr <S2SV_ModEnd> ( p +,0
1352,"<S2SV_ModStart> ; if (! TYPE_COMMENT ( CHILD ( n, i ) ) ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_",0
1353,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ;",0
1354,"<S2SV_ModStart> error ; uint32_t <S2SV_ModEnd> status ; enc624j600Context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; context -> nextPacket = letoh16 ( context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; enc624j600SetBit ( interface, ENC624J600_ECON1, ENC624J600_",0
1355,"<S2SV_ModStart> = 2 ; if ( objlen < 2 ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( objlen < 4 ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 4 ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( objlen < 4 ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( objlen < 4 ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u",0
1356,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1357,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE klass = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get",0
1358,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> au1200fb_device * fbdev = info -> par <S2SV_ModEnd> ; if ( <S2SV_ModStart> vma ) ; return vm_iomap_memory <S2SV_ModEnd> ( vma, <S2SV_ModStart> vma ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1359,"<S2SV_ModStart> ] ) ; if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ] ) ; if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ] ) ; if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ] ) ; if ( strlen ( config_arg ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> in <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; }",0
1360,"<S2SV_ModStart> / 2 ] ; memset ( out, 0, 4 ) ; <S2SV_ModStart> / 2 ] ; memset ( out, 0, 4 ) ;",0
1361,"<S2SV_ModStart> idx ) ) { perf_event_update_period ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_userpage ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_userpage ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_period ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_userpage ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_userpage ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_userpage ( event, hwc, idx, alpha_pmu -> pmc_max_period [ idx ] + 1 ) ; perf_event_update_userpage ( event, hwc",0
1362,"<S2SV_ModStart> 1 ) ; if <S2SV_ModEnd> ( ( unsigned <S2SV_ModStart> unsigned int ) arg >= cdi -> capacity ) return - EINVAL ; info = kmalloc ( sizeof ( * info ), GFP_KERNEL ) ; if (! info ) return - ENOMEM ; ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret = mech_status ( cdi, info ) ; if (! ret ) ret",0
1363,<S2SV_ModStart> fanout_mutex ) ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FAN,0
1364,<S2SV_ModStart> ; if ( <S2SV_ModEnd> handle -> nmi <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1365,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t * pwcs <S2SV_ModEnd> ) { u16 <S2SV_ModStart> ; if ( <S2SV_ModEnd> size >= PLANE_SIZE <S2SV_ModStart> PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_LOW | SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PA",0
1366,"<S2SV_ModStart> { int v <S2SV_ModEnd>, i ; <S2SV_ModStart> 2 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_GRAY && length!= 6 ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; }",0
1367,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_error ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; <S2SV_ModStart> EPROTONOSUPPORT ) { crm_error ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; <S2SV_ModStart> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> register_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st",0
1368,<S2SV_ModStart> ; } } if ( dt -> vlan_id [ 0 ] < 0 || dt -> vlan_id [ 1 ] < 0 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 ) { dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; dt -> vlan_id [ 1 ] = p -> vlan_id [ 1 ] ; dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> remove = 0 ; dt -> seen_last = 0 ;,0
1369,"<S2SV_ModStart> ; status = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE ) ) == 0 ) { n = ksz8851ReadReg ( interface, KSZ8851_RXFHBCR ) & RXFHBCR_RXBC_MASK ; if ( ( status & ( KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE ) ) == 0 ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ88",0
1370,"<S2SV_ModStart> const node * n, asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; int name_i = 1 ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 1 ; } if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, n, name_i + 3 ) ) ; if (! body ) return NULL ; <S2SV_ModStart> returns, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, type_comment, LINENO ( n",0
1371,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) ; pte ++ ; } pte_unmap_unlock ( pte, ptl ) ; out :",0
1372,"<S2SV_ModStart> = - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; if ( error ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""profile"" ) == 0 ) { error = aa_setprocattr_profile ( args, arg_size,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""permipc"" ) == 0 ) { error = aa_setprocattr_permipc ( args,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""profile"" ) == 0 ) { error = aa_setprocattr_profile ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""profile"" ) == 0 ) { error = aa_setprocattr_profile ( args,! AA_ONEXEC,! AA_DO_TEST",0
1373,"<S2SV_ModStart> uint_fast8_t tmp ; if ( jas_getuint16 ( in, & siz -> caps ) || jas_getuint32 ( in, & siz -> width ) || jas_getuint32 ( in, & siz -> height ) || jas_getuint32 ( in, & siz -> tilexoff ) || jas_getuint32 ( in, & siz -> tileyoff ) || jas_getuint16 ( in, & siz -> numcomps ) ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" )",0
1374,"<S2SV_ModStart> = 0 ; if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> has <S2SV_blank>",0
1375,"<S2SV_ModStart> << 16 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> << 24 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> << 16 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> << 16 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> << 24 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> << 16 ; if ( xmi_size < 4 ) {",0
1376,"<S2SV_ModStart> ; size_t total_len ; size_t data_len ; <S2SV_ModStart> ; size_t total_len ; data_len = iov_len ( iov, nr_segs ) ; if ( unlikely (! data_len ) ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; size_t chars = data_len <S2SV_ModEnd> ; int error <S2SV_ModStart> int error, atomic ; if ( unlikely ( total_len < chars ) ) return - EINVAL <S2SV_ModEnd> ; error = <S2SV_ModStart> ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> do_wakeup =! <S2SV_ModStart> =! iov_fault_in_pages_write <S2SV_ModEnd> ( iov, <S2SV_ModStart> ; error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret",0
1377,"<S2SV_ModStart> MaxGIFBits ) GIFOutputCode <S2SV_ModEnd> ( code ) <S2SV_ModStart> code ) { if ( displacement > data_size ) MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( ""MagickErrorEncodeImage"" ) ), ""MagickErrorEncodeImage"" ), ""MagickErrorEncodeImage"" ) ) ) ) ) ) { MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( MagickError ( ""MagickError"" ), ""MagickError(MagickError(MagickError(MagickError ( ""MagickErrorEncodeImage"" ), ""MagickErrorEncodeImage"" ), ""MagickErrorEncodeImage"" ) ) ) ) ) ; return FALSE ; }",0
1378,"<S2SV_ModStart> ( ) ; if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( ugh == NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_md ( dh -> md ) ; return ; } if ( ugh!= NULL ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> Request <S2SV_blank> was <S2SV_blank> disconnected <S2SV_blank> from <S2SV_blank> state"", __FUNCTION__ ) ; release_",0
1379,"<S2SV_ModStart> ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> res ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> %d\\n"", res ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; die_clean : fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; die_clean : fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; die_clean : fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n""",0
1380,"<S2SV_ModStart> size_t max_mem ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif <S2SV_ModStart> 0 ] ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif <S2SV_ModStart> break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : default : usage ( ) ; break ; } # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = atoi ( jas_optarg ) ; break ; case OPT_MAXMEM : max_mem = atoi ( j",0
1381,<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_empty ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_is_zero ( & bt_remote_bdaddr ) || bdaddr_,0
1382,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( row = 0 ; row < height ; row ++ ) { <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( i = 0 ; i < raw_height ; i ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8 ) ) ) { if ( ( j = raw_bits ( 8,0
1383,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> len < needed <S2SV_ModStart> needed ) { struct dm_ioctl * ioctl = filp -> private_data ; if ( ioctl -> data_size < param -> data_start + param -> data_size ) { dm_ioctl_set_data_size ( ioctl, param -> data_size, param -> data_start + param -> data_size ) ; dm_ioctl_set_data_size ( ioctl, param -> data_start + param -> data_size ) ; } else { struct dm_ioctl * ioctl = filp -> private_data ; dm_ioctl_set_data_size ( ioctl, param -> data_size ) ; dm_ioctl_set_data_size ( ioctl, param -> data_size, param -> data_start + param -> data_size ) ; dm_ioctl_set_data_size ( ioctl, param -> data_start + param -> data_size ) ; }",0
1384,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1385,"<S2SV_ModStart> vcpu_info ; hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank>",0
1386,<S2SV_ModStart> bfqq ) { spin_lock_irq ( & bfqd -> queue_lock ) ; <S2SV_ModStart> bfqq ) ; spin_unlock_irq ( & bfqd -> queue_lock ) ;,0
1387,"<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == U64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur )",0
1388,<S2SV_ModStart> ; if ( IS_ERR_OR_NULL ( handle ) ) return NULL ; if (,0
1389,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
1390,<S2SV_ModStart> OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ),0
1391,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> # ifdef ONIG_DEBUG_MATCH fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d\\n"", ( int ) end, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", ( int",0
1392,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vpx_foreach_transformed_block_in_plane (",0
1393,"<S2SV_ModStart> * skb ; size_t <S2SV_ModEnd> copied, error",0
1394,"<S2SV_ModStart> = hash ; fd = mk_vhost_fdt_open ( id, hash, sr -> file_info. flags_read_only ) ; if ( fd == - 1 ) { vhost_fdt_close ( id, sr -> file_info. flags_read_only ) ; fd = mk_vhost_fdt_close ( id, sr -> file_info. flags_read_only ) ; fd = mk_vhost_fdt_open ( id, hash, sr -> file_info. flags_read_only ) ; fd = mk_vhost_fdt_open ( id, sr -> file_info. flags_read_only ) ; if ( fd == - 1 ) { vhost_fdt_close ( id, sr -> file_info. flags_read_only ) ; fd = mk_vhost_fdt_close ( id, sr -> file_info. flags_read_only ) ; fd = mk_vhost_fdt_open ( id, sr -> file_info. flags_read_only ) ; fd = mk_vhost_fdt_open ( id, sr -> file_info. flags_read_",0
1395,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMMON * cm, MACROBLOCK * const x <S2SV_ModEnd>, const TileInfo <S2SV_ModStart> const tile, int mi_row, int mi_col, int * rate, int64_t * dist, BLOCK_SIZE bsize ) { <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, tile, mi_row, mi_col, rate, dist, bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModEnd> duplicate_mode_info",0
1396,"<S2SV_ModStart> { dev -> features |= VIRTIO_NET_F_HW_CSUM | VIRTIO_NET_F_SG | VIRTIO_NET_F_FRAGLIST <S2SV_ModEnd> ; if ( <S2SV_ModStart> csum ) dev -> features |= VIRTIO_NET_F_HW_CSUM | VIRTIO_NET_F_SG | VIRTIO_NET_F_FRAGLIST <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= VIRTIO_NET_F_HW_CSUM | VIRTIO_NET_F_FRAGLIST <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) dev -> features |= VIRTIO_NET_F_HW_CSUM | VIRTIO_NET_F_SG | VIRTIO_NET_F_FRAGLIST <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GSO ) ) dev -> features |= VIRTIO_NET_F_GSO ; if ( virtio_has_feature ( vdev, VIRTIO_NET_F",0
1397,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ; if (! reader. fhd ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ; if (! reader. fhd ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ; if (! reader. fhd ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ; if ( strcmp ( filename, ""-"" ) ) reader. fhd = fopen ( ""/share/libmysofa/default.sofa"", ""rb"" ) ;",0
1398,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename",0
1399,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1400,<S2SV_ModStart> ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize || be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > mp -> m_sb. sb_inodesize || be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) return __this_address ; if ( mode && ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > mp -> m_sb. sb_inodesize ) ) return __this_address ; if ( mode && ( be16_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_nblocks ) > mp -> m_sb. sb_inodesize ) ) return __this_address ; if ( mode,0
1401,<S2SV_ModStart> ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) ) || ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_E,0
1402,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1403,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1404,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", bgp_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s""",0
1405,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Description</th>"" ""<th <S2SV_blank> width=\'60%%\'> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1406,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1407,"<S2SV_ModStart> ], sizeof ( constr1 ), ""%s"", constr1 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ; snprintf ( constr1, sizeof ( constr1 ), ""%s"", strlen ( constr2 ) ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr1 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ; snprintf ( constr1, sizeof ( constr1 ), ""%s"", constr1 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr1 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ; snprintf ( constr1, sizeof ( constr1 ), ""%s"", constr1 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ; snprintf ( constr2, sizeof ( constr2 ), ""%s"", constr2 ) ;",0
1408,"<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { jpc_bitstream_seterror ( bitstream, "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1409,"<S2SV_ModStart>, & len, <S2SV_ModEnd> iovec, compat <S2SV_ModStart>, & len, <S2SV_ModEnd> iovec ) ;",0
1410,"<S2SV_ModStart> ; if ( c -> protocol == ascii_prot ) { memmove ( c -> rbuf, c -> rbuf, sizeof ( c -> rbuf ) ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } } else { memmove ( c -> rbuf, c -> rbuf, sizeof ( c -> rbuf ) ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } } if ( c -> protocol == ascii_prot ) { memmove ( c -> rbuf, c -> rbuf, sizeof ( c -> rbuf ) ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ;",0
1411,"<S2SV_ModStart> if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bLength ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < sizeof ( struct usb_descriptor_header ) ) { dev_warn ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bLength ) ; return - EINVAL ; }",0
1412,"<S2SV_ModStart>, err ; mutex_lock ( & card -> controls_rwsem ) ; if ( card -> user_ctl_count >= MAX_USER_CONTROLS ) { mutex_unlock ( & card -> controls_rwsem ) ; return - ENOMEM ; } <S2SV_ModStart> -> user_ctl_count >= SNDRV_CTL_ELEM_MAX_USER_CONTROLS ) { mutex_unlock ( & card -> controls_rwsem ) ; return - ENOMEM ; } <S2SV_ModStart> -> user_ctl_count >= SNDRV_CTL_ELEM_MAX_USER_CONTROLS ) { mutex_unlock ( & card -> controls_rwsem ) ; return - ENOMEM ; } mutex_unlock ( & card -> controls_rwsem ) ; mutex_unlock ( & card -> controls_rwsem ) ; mutex_unlock ( & card -> controls_rwsem ) ; mutex_unlock ( & card -> controls_rwsem ) ; mutex_lock ( & card -> controls_rwsem ) ; mutex_unlock ( & card -> controls_rwsem ) ; mutex_unlock ( & card -> controls_rwsem ) ; mutex_unlock ( & card -> controls_rwsem ) ; mutex",0
1413,"<S2SV_ModStart> 3 ) { switch ( parc ) { case 2 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 1 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 3 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 2 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 3 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 4 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 2 : exit_client ( client_p, client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 3 : exit_client (",0
1414,<S2SV_ModStart> ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x66 : if ( mode == X86EMUL_MODE_PROT32 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x67 : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x2e : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x3e : if ( mode == X86EMUL_MODE_PROT32 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x3e : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x3e : if ( mode == X86EMUL_MODE_PROT64 ) ctxt -> ad_bytes = def_ad_bytes ; break ; case 0x3f : if (,0
1415,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1416,<S2SV_ModStart> ~ IFF_XMIT_DST_RELEASE ; dev -> priv_flags |= IFF_TX_SKB_SHARING ;,0
1417,<S2SV_ModStart> 16 ) ; error16x16 = vp8_variance16x16 <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1418,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp",0
1419,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, maxlen, ""%s"", format ) ; va_end ( argptr ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; }",0
1420,"<S2SV_ModStart> ) ) ; if ( unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. name, XT_STANDARD_TARGET ) == 0 && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp (",0
1421,<S2SV_ModStart> else { if (! ctx -> iface -> destroy ) return VPX_CODEC_ERROR ; if (! ctx -> priv -> alg_priv ) return VPX_CODEC_ERROR ; <S2SV_ModStart> alg_priv ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> alg_priv ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; ctx ->,0
1422,"<S2SV_ModStart> CPU_BASED_RDTSC_EXITING ) ; if ( exit_reason == EXIT_REASON_RDPMC_EXITING ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } else if ( exit_reason == EXIT_REASON_RDTSC_EXITING ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } else if ( exit_reason == EXIT_REASON_RDPMC_EXITING ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION",0
1423,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted ( cpi <S2SV_ModEnd> )? USE_FULL_RD <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1424,"<S2SV_ModStart> ct_dccp_roles role ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < sizeof ( _dh ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } <S2SV_ModStart> ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_lock_bh ( & ct -> lock ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET &&! test_bit ( IPS_SEEN_REPLY_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; }",0
1425,<S2SV_ModStart> compat_timex ) ) { txc -> modes = tx32. modes ; txc -> offset = tx32. offset ; txc -> freq = tx32. freq ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> precision = tx32. precision ; txc -> tolerance = tx32. tolerance ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> tick = tx32. tick ; txc -> ppsfreq = tx32. ppsfreq ; txc -> jitter = tx32. jitter ; txc -> stabil = tx32. stabil ; txc -> calcnt = tx32. calcnt ; txc -> errcnt = tx32. errcnt ; txc -> stbcnt = tx32. stbcnt ;,0
1426,"<S2SV_ModStart> ; int ret ; if ( h >= MAX_THREADS ) { APPL_TRACE_ERROR ( ""too <S2SV_blank> many <S2SV_blank> threads <S2SV_blank> in <S2SV_blank> socket <S2SV_blank> poll <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", h, errno, strerror ( errno ) ) ; break ; } ret = select ( pfds, ts [ h ]. poll_count, - 1 ) ; if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; } if ( ret == - 1 ) { APPL_TRACE_ERROR ( ""poll <S2SV_blank> ret <S2SV_blank> -1, <S2SV_blank> exit <S2SV_blank> the <S2SV_blank> thread, <S2SV_blank> errno:%d, <S2SV_blank> err:%s"", errno, strerror ( errno ) ) ; break ; }",0
1427,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = L -> stacksize ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { },",0
1428,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1429,"<S2SV_ModStart> n ) ; # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf",0
1430,"<S2SV_ModStart> ; int is_keyframe_qaunt_set <S2SV_ModEnd> ; vpx_codec_err_t res <S2SV_ModStart> ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) {",0
1431,"<S2SV_ModStart> ; if ( mask & KADM5_PRINCIPAL <S2SV_ModEnd> ) || ( <S2SV_ModStart> return KADM5_BAD_MASK ; if ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & adb ) ; if ( ret ) return ret ; if ( mask & KADM5_",0
1432,"<S2SV_ModStart> -> log2_chroma_h ; if ( frame -> data [ plane ] && frame -> linesize [ plane ] ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < linesize ; i ++ ) { uint8_t * data = frame -> data [ plane ] ; int h = FF_CEIL_RSHIFT ( inlink -> h, vsub ) ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { uint8",0
1433,"<S2SV_ModStart> ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; fprintf ( m",0
1434,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1435,,1
1436,"<S2SV_ModStart> imp_dbh ) ) { imp_dbh -> mysql_error = mysql_error ( imp_dbh -> pmysql ) ; <S2SV_ModStart> imp_dbh ) ) { imp_dbh -> mysql_error = mysql_error ( imp_dbh -> pmysql ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; if ( imp_dbh -> mysql_error == MYSQL_ERR_OK ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_db",0
1437,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> ) || ( <S2SV_ModEnd> flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModStart> || size ) ) <S2SV_ModEnd> cleanup_rfc_slot ( slot,0
1438,"<S2SV_ModStart> ; struct ieee_802_11_phdr <S2SV_ModEnd> phdr ; col_set_str <S2SV_ModStart> struct ieee_802_11_phdr phdr ; col_set_str ( pinfo -> cinfo, COL_PROTOCOL, ""PPI"" ) ; col_clear ( pinfo -> cinfo, COL_INFO ) ; version = tvb_get_guint8 ( tvb, offset ) ; flags = tvb_get_guint8 ( tvb, offset + 1 ) ; data_len = tvb_get_guint8 ( tvb, offset + 2 ) ; dlt = tvb_get_letohl ( tvb, offset + 4 ) ; if ( tree ) { proto_tree_add_protocol_format ( tree, proto_ppi, tvb, 0, tot_len, ""PPI <S2SV_blank> version <S2SV_blank> %u, <S2SV_blank> %u <S2SV_blank> bytes"", version, dlt ) ; ppi_flags_tree = proto_tree_add_protocol_format ( tree, proto_ppi_flags, tvb, 0, dlt, ""PPI <S2SV_blank> flags <S2SV_blank> %u, <S2SV_blank> %u <S2SV_blank> bytes"",",0
1439,"<S2SV_ModStart> * fp ; if ( hdrlen + initlen + 1 > sdsHdrSize ( type ) ) { sdsErr ( ""too <S2SV_blank> big <S2SV_blank> sds <S2SV_blank> header <S2SV_blank> size: <S2SV_blank> %d\\n"", sdsHdrSize ( type ) ) ; sdsErr ( ""too <S2SV_blank> big <S2SV_blank> sds <S2SV_blank> header <S2SV_blank> size: <S2SV_blank> %d\\n"", sdsHdrSize ( type ) ) ; return NULL ; } if ( hdrlen + initlen + 1 > sdsHdrSize ( type ) ) { sdsErr ( ""too <S2SV_blank> big <S2SV_blank> sds <S2SV_blank> header <S2SV_blank> size: <S2SV_blank> %d\\n"", sdsHdrSize ( type ) ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) s ) - 1 ; switch ( type ) { case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_64 : { SDS_HDR_VAR ( 64, s ) ; sh -> len = initlen ; sh -> alloc = initlen ;",0
1440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> UINT32 tempWidth ; <S2SV_ModStart> ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; for ( x,0
1441,"<S2SV_ModStart> + 1 ; offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, h",0
1442,"<S2SV_ModStart> nr_parens ) return ERR_PTR <S2SV_ModEnd> ( - EINVAL <S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
1443,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int calc_iframe_target_size_one_pass_cbr ( <S2SV_ModStart> { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> ) : ( <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> ) : ( <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> ) : ( <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> ) : ( <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModEnd> ) ) ;,0
1444,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1445,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
1446,"<S2SV_ModStart> struct hello6 * hellop ; ND_TCHECK_32BITS ( & hellop -> hello_options ) ; ND_TCHECK ( hellop -> hello_deadint ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Priority <S2SV_blank> %u"", EXTRACT_16BITS ( & hellop -> hello_priority ) ) ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hellop -> hello_bdr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_bdr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_bdr ) ) ) ; ND_TCHECK ( hellop ->",0
1447,<S2SV_ModStart> datalen ) { if ( datalen < 1 || datalen > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) ) { if ( datalen < 1 || datalen > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) > SIZE_MAX / sizeof ( * ( unsigned char * ) data ) ) return - ENOTSUPP ; },0
1448,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ; <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ( KERN_ERR ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> -> pid ; mutex_unlock ( & rc -> uwbd. mutex ) ;",0
1449,"<S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 120 <S2SV_ModEnd> ""re_grammar.y"" {",0
1450,<S2SV_ModStart> : idx ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB ) { int wholeBytes = ( gfx -> data. bpp * ( pixelCount + 1 ) ) >> 3 ; if ( wholeBytes ) { char c = ( char ) ( 0xFF ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; ptr ++ ; } else { int wholeBytes = ( gfx -> data. bpp * ( pixelCount + 1 ) ) >> 3 ; if ( wholeBytes ) { char c = ( char ) ( 0xFF ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; if ( wholeBytes ) { char c = ( char ) ( 0xFF ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; ptr ++ ; } } else { int wholeBytes = ( gfx -> data. bpp * ( pixelCount + 1 ) ) >> 3 ; if ( wholeBytes ) { char c = ( char ) ( 0xFF ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; ptr ++ ;,0
1451,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & cpi -> mb. plane [ plane ] ; <S2SV_ModEnd> struct macroblockd_plane * <S2SV_ModStart> plane ] ; <S2SV_ModEnd> const PLANE_TYPE type <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> fc. coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const int seg_eob = get_tx",0
1452,<S2SV_ModStart> ; SrcList * const pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1453,<S2SV_ModStart> { if ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else if ( shmflg & SHM_MAYREAD ) addr &= ~ ( shmlba - 1 ) ; else if ( shmflg & SHM_MAYWRITE ) addr &= ~ ( shmlba - 1 ) ; else if ( shmflg & SHM_MAYEXEC ) addr &= ~ ( shmlba - 1 ) ; else if ( addr & ( PAGE_SIZE - 1 ) ) goto out ;,0
1454,<S2SV_ModStart> users ) ; if ( cb_info -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client -> nfs_client,0
1455,"<S2SV_ModStart> PointZZ_p * point, const CurveZZ_p * curve ) { PointZZ_p R0, R1 ; int dbits ; if ( mpz_tstbit ( scalar, 2 ) ) { mpz_set ( R0. x, R0. x ) ; mpz_set ( R0. y, R1. y ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; } else { mpz_set ( R0. x, R0. x ) ; mpz_set ( R0. y, R1. y ) ; pointZZ_pDouble ( & R0, & tmp, curve ) ; } if ( mpz_tstbit ( scalar, 2 ) ) { mpz_set ( R1. x, R1. x ) ; mpz_set ( R1. y, R1. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R1. x ) ; mpz_set ( tmp. y, R1. y ) ; pointZZ_pDouble ( & R1, & tmp",0
1456,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1457,<S2SV_ModStart> NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVPluginElementNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1458,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
1459,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1460,"<S2SV_ModStart> ; for ( xmlAttr * xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; free ( path ) ; return ; } } while ( cIter!= NULL ) { xmlNode * child = cIter ; cIter = __xml_next ( cIter ) ; __xml_acl_post_process ( child ) ;",0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1462,"<S2SV_ModStart> ) { int <S2SV_ModEnd> length ; ber_parse_header <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & length ) ; in_uint8s ( s, length ) ;",0
1463,"<S2SV_ModStart> ; if ( hkey. type == HASH_KEY_IS_STRING &&! zend_hash_exists ( params, hkey. str, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_index_exists ( params, hkey. num ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG &&! zend_hash_exists ( params, hkey. num, hkey. len ) ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1464,<S2SV_ModStart> only_420 ) { struct video_format * vpx_fmt <S2SV_ModEnd> ; int ret <S2SV_ModStart> = VPX_IMG_FMT_I420 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; <S2SV_ModStart> vpx_bps = 12 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; vpx_bps = 12 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I420 ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; vpx_fmt <S2SV_ModEnd> = VPX_IMG_FMT_I,0
1465,"<S2SV_ModStart> ; { struct obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1466,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( parse_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr",0
1467,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct env * <S2SV_ModStart> root ) ; if (! env -> root ) err ( 1, NULL ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * keybuf ; size_t len ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
1468,"<S2SV_ModStart> -> seg ; if ( cm -> refresh_alt_ref_frame ) { int segment ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT",0
1469,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; <S2SV_ModStart> 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type, Return_fields, 1 ) ; if (! Return_",0
1470,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> S_IROTH ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> } write
1471,"<S2SV_ModStart> += 8 ; # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff_p. p8 = v ; # ifndef NGIFLIB_INDEXED_ONLY } else * context -> frbuff_p. p32 = GifIndexToTrueColor ( i -> palette, v ) ; # endif <S2SV_ModStart> += 4 ; # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff_p. p32 = GifIndexToTrueColor ( i -> palette, v ) ; # endif } # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff_p. p32 = GifIndexToTrueColor ( i -> palette, v ) ; # endif } # ifndef NGIFLIB_INDEXED_ONLY if ( p -> mode & NGIFLIB_MODE_INDEXED ) { # endif * context -> frbuff",0
1472,<S2SV_ModStart> ) ; } if ( m == Y_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; } else { ++ x -> ymode_count [ m ] ; ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
1473,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile!= NULL ) { mutex_enter ( & sr -> fid_ofile -> f_mutex ) ; smb_flush_file ( sr, sr -> fid_ofile ) ; mutex_exit ( & sr -> fid_ofile -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } else { flist = & sr -> tid_tree -> t_ofile_list ; smb_llist_enter ( flist, RW_READER ) ; file = smb_llist_head ( flist ) ; while ( file ) { mutex_enter ( & file -> f_mutex ) ; smb_flush_file ( sr, file ) ; mutex_exit ( & file -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } smb_llist_exit ( flist ) ;",0
1474,"<S2SV_ModStart> = 0 ; memset ( vect, 0, sizeof ( vect ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( visbuf, & np, sizeof ( visbuf ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( vect ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( visbuf ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, & np, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( vect ) ) ; memcpy ( vect, vect, sizeof ( vect ) ) ; memcpy ( vect, sizeof ( vect ) ) ; mem",0
1475,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, <S2SV_ModEnd> * t, <S2SV_ModStart> * t, * <S2SV_ModEnd> StartClean ; double <S2SV_ModStart> ; double * <S2SV_ModEnd> argbuf = 0 <S2SV_ModStart> ; outpos = outputbuffer <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ; outpos += sprintf <S2SV_ModEnd> ( out",0
1476,"<S2SV_ModStart> { static u32 ip_idents_hashrnd <S2SV_ModEnd> __read_mostly ; u32 <S2SV_ModStart> id ; net_get_random_once <S2SV_ModEnd> ( & ip_idents_hashrnd <S2SV_ModStart> ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1477,"<S2SV_ModStart> expr_ty step ; int i ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if (",0
1478,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1479,"<S2SV_ModStart> ; if ( ctl -> pw -> pw_gecos!= gecos ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( ctl -> pw -> pw_gecos!= gecos ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1480,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) get_unaligned_le64 ( & radiotap_header -> it_version ) ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; iterator -> _arg += sizeof ( uint32_t ) ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg += sizeof ( uint32_t ) ; iterator -> _arg += sizeof,0
1481,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, iter ) ; return - EOPNOTSUPP ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 <S2SV_ModEnd> ; err_delete : <S2SV_ModStart> knode ) ; err = nfp_abm_u32_knode_delete ( alink, knode ) ; err = nfp_abm_u32_knode_delete ( alink, knode ) ; err = nfp",0
1482,"<S2SV_ModStart> ; } ZEND_FUNCTION_TRACE ( 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554, ( void * ) 0x534e4554",0
1483,<S2SV_ModStart> ; } stream -> config. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart> ( pass )? VPX_RC_ONE_PASS : VPX_RC_LAST_PASS ; stream -> config. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart> ( pass )? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; stream -> config. cfg. <S2SV_ModEnd> rc_twopass_stats_in = stats_get <S2SV_ModStart> = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1484,"<S2SV_ModStart> G_KEY_FILE_KEEP_TRANSLATIONS, error ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
1485,"<S2SV_ModStart> { VP9_COMMON * const cm <S2SV_ModEnd> = & pbi <S2SV_ModStart> pbi -> common ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++",0
1486,"<S2SV_ModStart> VP9D_CONFIG * oxcf, VP9_COMMON * * common <S2SV_ModEnd> ) { VP9Decoder <S2SV_ModStart> VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * * const cm = common? & common -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2",0
1487,"<S2SV_ModStart> -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1488,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1489,"<S2SV_ModStart> req ) { struct ip_options_rcu * inet_opt ; struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; inet_opt = rcu_dereference_protected ( req_inet -> inet_opt, 1 ) ; if ( inet_opt == NULL || inet_opt -> opt. <S2SV_ModStart> return ; cipso_v4_delopt <S2SV_ModEnd> ( & req_inet",0
1490,"<S2SV_ModStart> * tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } }",0
1491,"<S2SV_ModStart> ; if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO_UPD_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & V",0
1492,"<S2SV_ModStart> wqh ) ; if ( isalarm ( ctx ) ) alarm_init ( & ctx -> t. alarm, ctx -> clockid == CLOCK_REALTIME_ALARM? ALARM_REALTIME : ALARM_BOOTTIME, timerfd_alarmproc ) ; else hrtimer_init ( & ctx -> t. tmr, ctx -> clockid, HRTIMER_MODE_ABS ) ;",0
1493,"<S2SV_ModStart> ; struct mount * <S2SV_ModEnd> p ; struct <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; commit_tree ( child, q ) ; } unlock_mount_hash ( ) ; <S2SV_ModEnd> return 0 ;",0
1494,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } <S2SV_ModStart>, & len ) ; if ( ret ) goto error ; ret = get_tag ( asn1, len, & t, & contents, & clen, & asn1, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ;",0
1495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> },0
1496,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth *,0
1497,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1498,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> ) { Huff_transmit <S2SV_ModEnd> ( huff, <S2SV_ModStart> ) { Huff_transmit <S2SV_ModEnd> ( huff,",0
1499,"<S2SV_ModStart> VP9_COMP * cpi <S2SV_ModEnd>, TOKENEXTRA * <S2SV_ModStart>, int output_enabled <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> td. <S2SV_ModEnd> mb ; MACROBLOCKD <S2SV_ModStart> x = & cpi -> td. <S2SV_ModEnd> mb ; PICK_MODE_CONTEXT <S2SV_ModStart> -> skip_recode =! x -> select_txfm_size && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) ; if ( x -> skip_encode ) return ; <S2SV_ModEnd> set_ref",0
1500,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> struct skcipher_request * <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } crypto_skcipher_setkey ( tfm_des, key, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; skcipher_request_set_callback ( req, 0, NULL, NULL ) ; skcipher_request_set_crypt ( req, & sgin, & sgout, 8",0
1501,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1502,"<S2SV_ModStart> { uint32_t value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; zeroes = i = 0 ; if ( ctx -> bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return A",0
1503,<S2SV_ModStart> delta ; else { if ( i > pos && i + insn -> off + 1 == pos ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_CALL ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_EXIT ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_CLASS ( insn -> code ) == BPF_JMP ) { if ( BPF_OP ( insn -> code ) == BPF_JMP ) { if ( BPF_OP,0
1504,"<S2SV_ModStart> intr_info & INTR_INFO_VECTOR_MASK ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } switch ( exit_reason ) { case EXIT_REASON_NMI : if (! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } else { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; }",0
1505,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { } else if ( isalnum ( c ) || strchr (",0
1506,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_method. ptr = NULL, packet -> http_method. len = 0, packet -> http_response. ptr = NULL, packet -> http_response. len = 0, packet ->",0
1507,<S2SV_ModStart> path ) ; if ( error ) { path_put ( & nd -> path ) ; <S2SV_ModStart> = LAST_BIND ; },0
1508,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) )",0
1509,"<S2SV_ModStart> += 4 ) { if ( ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart> y ), ( x + 4 ) > dds_info -> width || ( y + 4 ) > dds_info -> height ) return MagickFalse ; <S2SV_ModStart>, dds_info, ( y + 4 ) > dds_info -> height ) return MagickFalse <S2SV_ModEnd> ; c0 = <S2SV_ModStart> image ) ; c1 = ReadBlobLSBLong ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width ) { if ( ( y + j ) < ( ssize_t ) dds_info -> height ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width ) ) { SetPixelRed ( q, ScaleCharToQuantum (",0
1510,<S2SV_ModStart> { int ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY (,0
1511,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1512,"<S2SV_ModStart> ) { int <S2SV_ModEnd> i ; memset <S2SV_ModStart> -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; <S2SV_ModStart> -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ; if (! cfg -> debug_file ) cfg -> debug_file = fopen ( filename, ""w"" ) ;",0
1513,<S2SV_ModStart> ; sm_info -> seg1_blkaddr = le32_to_cpu ( raw_super -> segment1_blkaddr ) ; sm_info -> seg2_blkaddr = le32_to_cpu ( raw_super -> segment2_blkaddr ) ; sm_info -> seg3_blkaddr = le32_to_cpu ( raw_super -> segment3_blkaddr ) ; sm_info -> seg4_blkaddr = le32_to_cpu ( raw_super -> segment4_blkaddr ) ; sm_info -> seg5_blkaddr = le32_to_cpu ( raw_super -> segment5_blkaddr ) ; sm_info -> seg6_blkaddr = le32_to_cpu ( raw_super -> segment6_blkaddr ) ; sm_info -> seg7_blkaddr = le32_to_cpu ( raw_super -> segment7_blkaddr ) ;,0
1514,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; send <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1515,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ;",0
1516,<S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING if ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) ) ) || ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & VP8_TEMPORAL_DENOISING ) || ( cpi -> oxcf. flags & VP8_,0
1517,"<S2SV_ModStart> pvc ) ; dev = alloc_netdev ( <S2SV_ModEnd> 0, ""pvceth%d"" <S2SV_ModStart> pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) random_ether_addr ( dev -> dev_addr ) ; else random_ether_addr ( dev -> dev_addr ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1518,"<S2SV_ModStart> ; in_uint16_le ( s, & type ) ; in_uint16_le ( s, & status ) ; if ( status == CLIPRDR_ERROR ) { switch ( type ) { case CLIPRDR_FORMAT_ACK : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_FORMAT_ANNOUNCE : cliprdr_send_native_format_announce ( last_formats, last_formats_length ) ; break ; case CLIPRDR_DATA_REQUEST : in_uint32_le ( s, format ) ; ui_clip_request_data ( format ) ; break ; case CLIPRDR_DATA_RESPONSE : cliprdr_handle_data ( data, length ) ; break ; case 7 : break ; default : logger ( Clipboard, Warning, ""cliprdr_process(), <S2SV_blank> unhandled <S2SV_blank> packet <S2SV_blank> type <S2SV_blank> %d"", type ) ; } }",0
1519,"<S2SV_ModStart> -> b_multithreaded_rd ) vpxmt_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1520,"<S2SV_ModStart> next ) { if ( spos >= buf -> currentLine -> len || epos >= buf -> currentLine -> len || epos >= buf -> currentLine -> len ) break ; <S2SV_ModStart> ) { if ( spos >= buf -> currentLine -> len || epos >= buf -> currentLine -> len ) break ; <S2SV_ModStart> ) { if ( spos >= buf -> currentLine -> len ) break ; if ( epos >= buf -> currentLine -> len ) break ; if ( epos >= buf -> currentLine -> len ) break ; if ( form -> type == FORM_TEXTAREA ) { int n = a -> y - buf -> currentLine -> linenumber ; if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> next, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; if (! l ) break ; if ( l -> type == FORM_TEXTAREA ) { int n = a -> y - buf -> currentLine -> linenumber ; if ( n < 0 ) for ( ; l && n ; l = l -> next, n ++ )",0
1521,<S2SV_ModStart> 0 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ;,0
1522,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1523,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
1524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return - 1 ; } _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte",0
1525,"<S2SV_ModStart> STREAM s ) { if (! s_check ( s ) ) { abort ( ) ; } <S2SV_ModStart> int i ; if (! s_check ( s ) ) { abort ( ) ; } <S2SV_ModStart> { in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint16_le ( s, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ;",0
1526,"<S2SV_ModStart> } else { if (! smatch ( option, ""type"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } option = maGetNextArg ( sclone ( option ), & tok ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; } else if ( smatch ( option, ""type"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } else if ( smatch ( option, ""type"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } else if ( smatch ( option, ""type"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_",0
1527,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
1528,"<S2SV_ModStart> { } ; if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ) ) { r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = TEMP_FAILURE_RETRY ( name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; }",0
1529,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> d ) { if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart> ; if ( <S2SV_ModEnd> dvb_usb_generic_rw (",0
1530,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION )",0
1531,"<S2SV_ModStart> int stride, <S2SV_ModEnd> const InterpKernel * <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size,",0
1532,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ;",0
1533,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON <S2SV_ModEnd> * cJSON_CreateFloatArray ( <S2SV_ModStart> ) ; for ( i = 0 ; i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>",0
1534,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_unlock ; } <S2SV_ModEnd> if ( status",0
1535,"<S2SV_ModStart> float * w = get_window <S2SV_ModEnd> ( f,",0
1536,"<S2SV_ModStart> { VP9_COMMON * const cm = & pbi -> common ; const uint8_t * bit_reader_start = NULL ; const int aligned_mi_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_cols = MIN ( pbi -> oxcf. max_threads & ~ 1, cm -> log2_tile_cols ) ; const int tile_rows = MIN ( pbi -> oxcf. max_tile_rows, cm -> log2_tile_rows ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> ( pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ;",0
1537,"<S2SV_ModStart> 0x101 ; offset = base + get4 ( ) ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = tag << 8 | fgetc ( ifp ) ; len = get4 ( ) ; len = len + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = tag << 8 | fgetc ( ifp ) ; len = len + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { tag = tag << 8 | fgetc ( ifp ) ; len = len + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort )",0
1538,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> y_dc_delta_q ) ; const int segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; int i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_",0
1539,"<S2SV_ModStart> int bychunk ; if (! TIFFGetField ( in, TIFFTAG_PLANARCONFIG, & shortv ) ) { return ( NULL ) ; } if ( shortv!= config && bitspersample!= 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } TIFFGetField ( in, TIFFTAG_ROWSPERSTRIP, & l ) ; if (! TIFFIsTiled ( out ) ) { if (! TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ) tw = w ; if (! TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ) tl = l ; bychunk = ( tw == tilewidth && tl == tilelength ) ; } else { TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ; TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ; bychunk = ( tw == tilewidth && tl == tilelength ) ; }",0
1540,<S2SV_ModStart>. err_detail = error -> has_detail ; else ctx -> base. err_detail = NULL ;,0
1541,"<S2SV_ModStart> error ; } perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_EMULATION_FAULTS,",0
1542,"<S2SV_ModStart>, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST <S2SV_ModStart>, 4, BSON_VALIDATE_DOLLAR_KEYS, ""keys <S2SV_blank> cannot <S2SV_blank> begin <S2SV_blank> with <S2SV_blank> \\""$\\"": <S2SV_blank> \\""$query\\"""" <S2SV_ModEnd> ) ; VALIDATE_TEST",0
1543,"<S2SV_ModStart> ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; if ( ps_dec -> u4_num_cores > 1 ) { ps_dec -> u4_num_cores = 1 ; ps_dec -> u2_pic_ht = 0 ; ps_dec -> u2_pic_wd = 0 ; } ps_prev_poc = ps_dec -> ps_prev_poc ; ps_cur_poc = ps_dec -> ps_cur_poc ; ps_dec -> ps_sei = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_sei -> u1_is_valid = 0 ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_dec -> ps_sei = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; ps_",0
1544,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_,0
1545,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ) ;,0
1546,<S2SV_ModStart> const char * fmt <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; if (! isdigit ( * ( * fmt ) ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * ( * fmt ) ) ) ; a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1547,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = * psurvival ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g ->",0
1548,<S2SV_ModStart> ; else return <S2SV_ModEnd> - EIO ;,0
1549,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } memset ( buffer, 0, sizeof buffer ) ; s_read ( c, c -> local_rfd. fd, buffer, sizeof buffer ) ; memset ( buffer, 0, sizeof buffer ) ; memset ( buffer, 0, sizeof buffer ) ; s_read ( c, c -> local_wfd. fd, buffer, sizeof buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ;",0
1550,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> cib_tls_signon ( cib_t <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> struct sockaddr_in addr <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = 0 ; <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = NULL ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror (",0
1551,"<S2SV_ModStart> cpi, 0, sizeof ( VP8_COMMON ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; memset ( cpi, 0, sizeof ( VP8_COMP ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 0 ; vp8_remove_compressor ( & cpi ) ; return 0 ; } cm = & cpi -> common ; memset ( cpi, 0, sizeof ( VP8_COMP ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) )",0
1552,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_PAGE_FAULTS, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1,",0
1553,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( bp [ 24 ] ) ; if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; }",0
1554,"<S2SV_ModStart> : ok = <S2SV_ModEnd> ExprResolveBoolean ( ctx <S2SV_ModStart>, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_UNARY_PLUS : ok = ExprResolveBoolean ( ctx, expr -> boolean. set, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_UNARY_PLUS : ok = ExprResolveBoolean ( ctx, expr -> boolean. set, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_UNARY_MINUS : ok = ExprResolveBoolean ( ctx, expr -> boolean. set, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_UNARY_MINUS : ok = ExprResolveBoolean ( ctx, expr -> boolean. set, set_rtrn ) ; if (! ok ) * set_rtrn =! * set_rtrn",0
1555,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1556,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
1557,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register MagickBooleanType <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ;",0
1558,"<S2SV_ModStart> ) ) { if (! ( jas_stream_getrwcount ( enc -> out ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! ( jas_stream_getrwcount ( enc -> out ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc -> out ) ; if (! ( jas_stream_getrwcount ( enc -> out ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! ( jas_stream_getrwcount ( enc -> out ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } jas_stream_getrwcount ( enc -> out ) ; if (! ( jas_stream_getrwcount ( enc -> out ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker",0
1559,<S2SV_ModStart> = '\\0' ; length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) length = strlen ( str_mode ) ; if (! length ) return ;,0
1560,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1561,"<S2SV_ModStart> ; int is_valid <S2SV_ModEnd> ; if ( <S2SV_ModStart> error ; giterr_clear ( ) ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb",0
1562,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1563,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> mode = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ; if ( <S2SV_ModEnd>! cm -> <S2SV_ModStart>! cm -> frame_parallel_decoding_mode ) ++ cm -> counts. <S2SV_ModEnd> comp_inter [ ctx",0
1564,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart> ; res = vpx_codec_enc_config_default <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; # if CONFIG_WEBM_IO stream -> ebml. last_pts_ms = - 1 ; # endif stream -> ebml. debug = global -> debug ; stream -> config. cfg. g_lag_in_frames = 0 ; stream -> config. out_fn = NULL ; stream -> next = NULL ;",0
1565,"<S2SV_ModStart> nd_opt_rdnss * oprd ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_type ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_type ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_type ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", op -> nd_opt_type ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> """,0
1566,<S2SV_ModStart> = 0 ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { * re_ast = ( RE_AST * ) yr_malloc ( sizeof ( RE_AST ) ) ; return ERROR_INSUFFICIENT_MEMORY ; } },0
1567,"<S2SV_ModStart> DICT_PATH_SHARED ) ; if ( key -> key -> key ) { <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank>",0
1568,<S2SV_ModStart> return 0 ; if ( <S2SV_ModEnd> A > skb <S2SV_ModStart> A ] ; <S2SV_ModEnd> nla = nla_find_nested,0
1569,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1570,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>""",0
1571,"<S2SV_ModStart> SC_MAX_SERIALNR ) ; if ( serial -> len < priv -> cac_id_len ) { SC_FUNC_RETURN ( card -> ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_FILE_NOT_FOUND ) ; }",0
1572,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; tok -> alterror = 1 ; tok -> alttabsize = 1 ; tok -> altindstack [ 0 ] = 0 ; tok -> decoding_state = STATE_INIT ; tok -> decoding_erred = 0 ; tok -> decoding_buffer = NULL ; # ifndef PGEN tok -> filename = NULL ; tok -> decoding_readline = NULL ; # endif,0
1573,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; }",0
1574,<S2SV_ModStart> r ] = '\\0' <S2SV_ModEnd> ; set_string (,0
1575,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( picSizeInMbs <= MAX_NUM_REF_PICS ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS ) ; ASSERT ( <S2SV_ModStart> dpbSize ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx,0
1576,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> ( addrlen ) addrlen_in = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1577,,1
1578,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } <S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { Stream_Read_UINT8 ( s, type ) ; if ( type!= TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; } if ( Stream_GetRemainingLength ( s ) >= 4 ) { Stream_Read_UINT8 ( s, type ) ; if ( type!= TYPE_RDP_NEG_REQ ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 """", type ) ; return FALSE ; }",0
1579,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) opt = rcu_dereference ( opt_space ) ; if ( opt == NULL ) opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt == NULL ) opt = rcu_dereference_",0
1580,"<S2SV_ModStart>, at ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt",0
1581,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000ReadReg ( DM9000_EPDRH ) ; dm9000ReadReg ( DM9000",0
1582,"<S2SV_ModStart> ; if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) striplength ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) striplength ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long )",0
1583,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> rcu_read_lock ( ) ; old_cred = __task_cred ( child ) ; __ptrace_link ( child, old_cred, __task_cred ( new_parent ) ) ; __ptrace_link ( child, new_parent, old_cred <S2SV_ModEnd> ) ; rcu_read_unlock",0
1584,<S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) { rc = - EPERM ; } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } } <S2SV_ModStart> pcmk_ok ) { if (! capable ( CAP_NET_ADMIN ) ) { if (! capable ( CAP_NET_ADMIN ) ) { if (! capable ( CAP_NET_ADMIN ) ) { rc = - EPERM ; } },0
1585,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1586,"<S2SV_ModStart> 3 } ; vpx_variance_fn_ptr_t v_fn_ptr ; int <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; vpx_variance_fn_t v_fn_ptr = cpi -> fn_ptr [ bsize ] <S2SV_ModEnd> ; int step_param <S2SV_ModStart> ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> = 256 ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mv",0
1587,"<S2SV_ModStart> ntreg_header ) ; if ( statbuf. st_size < 0x1000 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( statbuf. st_size < 0x1000 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModStart> ntreg_header ) ; if ( statbuf. st_size < 0x1000 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( statbuf. st_size < 0x1000 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" )",0
1588,"<S2SV_ModStart> ) ; # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
1589,"<S2SV_ModStart> ) ) { memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ; memset ( ctl_buf, 0, sizeof ( ctl_buf ) ) ;",0
1590,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""Im",0
1591,"<S2SV_ModStart>!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> type ) )",0
1592,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; else ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) ovalue =",0
1593,<S2SV_ModStart> ) { cib_client_t <S2SV_ModEnd> * client = <S2SV_ModStart> client = user_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> num_clients ) ; g_object_unref <S2SV_ModEnd> ( & client <S2SV_ModStart> user ) ; g_object_unref <S2SV_ModEnd> ( & client <S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client,0
1594,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) markvalue ( g, uv -> v ) ; else markvalue ( g, uv -> v ) ; if (! iswhite ( thread ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } }",0
