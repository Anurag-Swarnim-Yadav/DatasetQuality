,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < tnl_hlen ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,<S2SV_ModStart> c && item >= <S2SV_ModEnd> 0 ) {,0
4,"<S2SV_ModStart>, int nmi <S2SV_ModEnd> ) { struct <S2SV_ModStart> data, regs, 0",0
5,<S2SV_ModStart> ( data ) + 1,0
6,"<S2SV_ModStart> ) { int step1 [ 8 ] ; int step2 [ 8 ] ; int step3 [ 8 ] ; int <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; int <S2SV_ModEnd> temp1, temp2",0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,,0
9,"<S2SV_ModStart>. left ; mp_pushinteger <S2SV_ModEnd> ( L,",0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_mv_component ( vp9_writer <S2SV_ModStart> ( usehp ) return,0
11,<S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_16 <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_BLOCK_SIZE_16 <S2SV_ModEnd> ; if (,0
12,"<S2SV_ModStart> ( l2tp_cc_direction2str, ""Direction-#%u"" <S2SV_ModEnd>, * (",0
13,<S2SV_ModStart> * authkey ; if (! dest_keyring ) return ;,0
14,"<S2SV_ModStart> = NULL ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; <S2SV_ModStart> return GSS_S_FAILURE ; <S2SV_ModEnd> sc -> internal_mech",0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
17,<S2SV_ModStart> e == p ||! e,0
18,"<S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode,",0
19,"<S2SV_ModStart> reader -> bytes_available_fd <S2SV_ModEnd>, & read_fds",0
20,<S2SV_ModStart> if ( frame_interval >= <S2SV_ModEnd> MIN_GF_INTERVAL && loop_rate,0
21,<S2SV_ModStart> return ret ; <S2SV_ModEnd> ret = ext4_convert_unwritten_extents,1
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (!,0
23,<S2SV_ModStart> = '\\0' ; ptr <S2SV_ModEnd> = ptr +,0
24,"<S2SV_ModStart> BYTE flags ; Stream_Read_UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> s, flags <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
25,,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,"<S2SV_ModStart> io_cleanup = mem_cleanup ; io -> addr = ioremap ( addr, mapsize )",0
28,<S2SV_ModStart> MagickRealType ) ( pixel << ( size_t ) ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( cfg == NULL ) return VPX_CODEC_OK,0
31,<S2SV_ModStart> ) ; } iter = table ;,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart>, ENC28J60_REG_EIR, ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBit",0
35,<S2SV_ModStart> = ast2obj_int ( ( int ) <S2SV_ModStart> = ast2obj_int ( ( int ) <S2SV_ModStart> = ast2obj_int ( ( int ) <S2SV_ModStart> = ast2obj_int ( ( int ) <S2SV_ModStart> = ast2obj_int ( ( int ),0
36,<S2SV_ModStart> if ( page ) { if <S2SV_ModEnd> ( access ( <S2SV_ModStart> ) > 0 <S2SV_ModEnd> ) { http_response_printf,0
37,<S2SV_ModStart> ; int mbr <S2SV_ModEnd> ; ( void,0
38,"<S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } else {",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,<S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (,0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,<S2SV_ModStart> ; cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) <S2SV_ModEnd> ; if (,0
45,<S2SV_ModStart> || dp == ( int ),0
46,<S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if (,0
47,<S2SV_ModStart> ; long rem = 0,0
48,"<S2SV_ModStart> ( tok, "":"" <S2SV_ModEnd>, & perms",0
49,<S2SV_ModStart> NULL ; # ifdef <S2SV_ModEnd> CONFIG_MEM_MANAGER int number_aau,0
50,<S2SV_ModStart> int indexes = 0 <S2SV_ModEnd> ; long long,0
51,"<S2SV_ModStart>, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", ( int )",0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { #,0
53,<S2SV_ModStart> option. client <S2SV_ModEnd> ) return 0,0
54,"<S2SV_ModStart>, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE <S2SV_ModEnd> ) ) goto",0
55,<S2SV_ModStart> -> twopass. gf_group_bits -= bits_used ; } else { cpi -> twopass. gf_group_bits += cpi -> twopass. gf_group_size ; } if ( cpi -> twopass. <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass,0
56,<S2SV_ModStart> define EOFOp 0x07 const,0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> seqlock ) ; nfs_set_open_stateid_locked <S2SV_ModEnd> ( state,",0
59,"<S2SV_ModStart> * dir = ""/etc"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; ps_pps -> i1_sps_id = 0 ;,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,<S2SV_ModStart> args ) { ( void ) ctr_id ;,0
64,<S2SV_ModStart> ) get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,<S2SV_ModStart> ; mod_ty mod = NULL,0
67,<S2SV_ModStart> = object -> child <S2SV_ModEnd> ; while (,0
68,<S2SV_ModStart> size ) ; if ( px -> ft ),0
69,"<S2SV_ModStart>, val_l ; ND_PRINT ( ( ndo, ""FrameErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ;",0
70,"<S2SV_ModStart> { # ifdef GIT_WIN32 <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1""",0
71,<S2SV_ModStart> alpha_buffer } ; <S2SV_ModEnd> for ( i,0
72,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> msg -> msg_namelen,0
73,"<S2SV_ModStart> ) ) ; vpx_memcpy <S2SV_ModEnd> ( sortlist,",0
74,<S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,1
75,<S2SV_ModStart> int sl = ( int ),0
76,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> c_feature_version <S2SV_ModStart>, 3 + is_async <S2SV_ModEnd> ) ; n_ifs",0
77,<S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ;,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void write_mb_modes_kf (,0
79,"<S2SV_ModStart> > maxn ) { <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; }",0
80,<S2SV_ModStart> ( len < ( u_char * ),0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { # if 0 <S2SV_ModStart> ; } } # endif,0
83,<S2SV_ModStart> ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ],0
84,<S2SV_ModStart> -> dmin ; if <S2SV_ModEnd> ( p < <S2SV_ModStart> < q ) { <S2SV_ModStart> ) ; } },0
85,"<S2SV_ModStart> bfqq ) { <S2SV_ModEnd> enum bfqq_expiration reason <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfqq <S2SV_ModStart> in_service_queue ) { spin_lock_irqsave ( & bfqd -> lock, flags ) ; <S2SV_ModStart> return ; } spin_unlock_irqrestore ( & bfqd -> lock, flags ) ;",0
86,,1
87,"<S2SV_ModStart> regs ) ; perf_sw_event_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
88,<S2SV_ModStart> diffBlock + diffBlockLength <S2SV_ModEnd> ) { PyMem_Free,0
89,"<S2SV_ModStart> np -> tclass, false",0
90,"<S2SV_ModStart>, viff_info, ( void * )",0
91,"<S2SV_ModStart> data ) { vpx_log_debug ( ""encoder <S2SV_blank> init\\n"" ) ;",0
92,<S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size,0
93,"<S2SV_ModStart> ( wb, fabs <S2SV_ModEnd> ( delta_q )",0
94,<S2SV_ModStart> mv. as_int <S2SV_ModEnd> ; if (,0
95,"<S2SV_ModStart> * string, <S2SV_ModEnd> int length )",0
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart>, msgnum, 1 <S2SV_ModEnd> ) ; return",0
98,<S2SV_ModStart> } if ( server. replstate!= REDIS_REPL_CONNECTED && server. replstate!= REDIS_REPL_CONNECTED &&,0
99,<S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ) ERROR,0
100,<S2SV_ModStart> -> zbin_mode_boost = 1 <S2SV_ModEnd> ; vp9_init_plane_quantizers (,0
101,<S2SV_ModStart> ) return - EPERM <S2SV_ModEnd> ; info ->,0
102,<S2SV_ModStart> ( u32 ) ( <S2SV_ModStart> size - 8 ),0
103,<S2SV_ModStart> ( ctx -> <S2SV_ModEnd> alg_priv ) ;,0
104,<S2SV_ModStart> mode ) { if (! state -> owner ) return ;,0
105,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> return ( image,0
106,<S2SV_ModStart> memcpy ( elem -> <S2SV_ModEnd> in_sg [ 0,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> else if ( <S2SV_ModEnd> c -> bpp,0
109,"<S2SV_ModStart> 1, caplen <S2SV_ModEnd> ) ; return",0
110,"<S2SV_ModStart> noffset, NULL, 0",0
111,"<S2SV_ModStart> -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE <S2SV_ModEnd>, GFP_KERNEL )",0
112,<S2SV_ModStart> = cfg ; <S2SV_ModEnd> if (!,0
113,<S2SV_ModStart> ~ TJA1100_CONFIG1_MII_MODE ; <S2SV_ModEnd> tja1100WritePhyReg ( interface,0
114,<S2SV_ModStart> ; if ( unlikely ( code < 0 ) ) goto out ; if (,0
115,<S2SV_ModStart> ( flags & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) &&! <S2SV_ModStart> ( flags & VPX_CODEC_CAP_PSNR <S2SV_ModEnd> ) &&!,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> arg -> open_flags, 0",0
118,<S2SV_ModStart> ) ; return 0,0
119,<S2SV_ModStart> case 0x9f : case 0x9f :,0
120,<S2SV_ModStart> return ERROR_INVALID_REQUEST ; <S2SV_ModEnd> if (!,0
121,<S2SV_ModStart> goto trunc ; ND_TCHECK <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK <S2SV_ModEnd> ( lshp ->,0
122,<S2SV_ModStart> } else { <S2SV_ModEnd> * obuf =,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,<S2SV_ModStart> [ i / 2 <S2SV_ModEnd> ] ; int,0
126,"<S2SV_ModStart> * output, const",0
127,"<S2SV_ModStart> 4, c <S2SV_ModEnd> ) ; if",0
128,,0
129,<S2SV_ModStart> ; # if <S2SV_ModEnd> HAVE_MEDIA flags |=,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> ) return ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ;,0
132,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! c ->,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p",0
135,<S2SV_ModStart> NULL ) { if ( separator!= NULL ) { <S2SV_ModStart> ; } } },0
136,<S2SV_ModStart> pc ) { vpx_memcpy <S2SV_ModEnd> ( pc ->,0
137,<S2SV_ModStart> { int ret ; if ( size < 0 ) return - EINVAL,0
138,"<S2SV_ModStart> * body, PyArena * <S2SV_ModEnd> arena ) {",0
139,<S2SV_ModStart> ; # endif if (! buf ) return 1 ;,0
140,<S2SV_ModStart>  cpi ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
141,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ),0
142,<S2SV_ModStart> = getnum ( *,0
143,<S2SV_ModStart> NULL ) ; if ( count == 0 ) break ;,0
144,<S2SV_ModStart> (! data <S2SV_ModEnd> ) ) res,0
145,"<S2SV_ModStart> inode * inode, struct super_block * sb <S2SV_ModStart> inode ) ; <S2SV_ModEnd> int ret =",0
146,"<S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"" <S2SV_ModEnd>, c, <S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"" <S2SV_ModEnd>, c,",0
147,<S2SV_ModStart> self ) { if ( self == NULL ) return ;,0
148,<S2SV_ModStart> ; if ( <S2SV_ModEnd> i < count,0
149,<S2SV_ModStart> ++ ) { Py_ssize_t <S2SV_ModEnd> i ; tmp,0
150,<S2SV_ModStart> inbuf [ RAS_MAGICLEN + 1,0
151,<S2SV_ModStart> ; if ( <S2SV_ModEnd> msg_sys -> msg_flags <S2SV_ModStart> msg_sys -> msg_control <S2SV_ModEnd> ) err =,0
152,<S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata =,0
153,<S2SV_ModStart> ; SHOW ( <S2SV_ModEnd> rc_resize_up_thresh ) ;,0
154,,0
155,<S2SV_ModStart> ) ; } return ; <S2SV_ModStart> ) ; } return ; <S2SV_ModStart> ) ; } return ;,0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> m, 0, 0",0
158,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ;,0
159,<S2SV_ModStart> ) { ier &= ~ <S2SV_ModEnd> IER_RXIE ; interface,0
160,"<S2SV_ModStart> * cm, const",0
161,"<S2SV_ModStart>, msglen ) < <S2SV_ModEnd> 0 ) {",0
162,<S2SV_ModStart> goto sslerr ; <S2SV_ModEnd> } ret =,0
163,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> strcpy ( t1_line_array,0
164,"<S2SV_ModStart>, subsize ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>, subsize ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>, subsize ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>, subsize ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>, subsize ) <S2SV_ModEnd> ; if (",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> = bytes_consumed ; ps_dec -> pv_stream_buffer = NULL ;,0
167,<S2SV_ModStart> var_off ) ; if ( opcode == BPF_ADD ) { <S2SV_ModStart> var_off ) ; } else { dst_known = tnum_is_const ( dst_reg -> var_off ) ; },0
168,<S2SV_ModStart> ; if ( IS_ERR ( cfile ) ) { if ( <S2SV_ModStart> goto lookup_out ; },0
169,"<S2SV_ModStart> th -> dest, sk -> sk_uid",0
170,<S2SV_ModStart> { int number_of_keyframes = encode_frame_count / <S2SV_ModEnd> si -> kf_dist <S2SV_ModStart> si -> kf_dist <S2SV_ModEnd> ; svc_log (,0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,<S2SV_ModStart> ; } } } if ( * str < end ) { <S2SV_ModStart> ; } } },0
173,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'""",0
174,,0
175,"<S2SV_ModStart> ndo, const void <S2SV_ModEnd> * dat ) <S2SV_ModStart> = ( const void <S2SV_ModEnd> * ) dat",0
176,"<S2SV_ModStart>, in_what_stride, INT_MAX <S2SV_ModEnd> ) + mvsad_err_cost",0
177,<S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> cpi -> mb,0
178,"<S2SV_ModStart>, & dh <S2SV_ModEnd> ) ; state",0
179,<S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; },0
180,<S2SV_ModStart> connection == NULL || connection == NULL,0
181,<S2SV_ModStart> -> name ) ; if (! plen ) return - 1,0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> image -> columns <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> a ) { <S2SV_ModEnd> BN_ULONG c1,",0
185,<S2SV_ModStart> ; } } <S2SV_ModEnd> image = DestroyImageList,0
186,<S2SV_ModStart> in_cksum ( vec <S2SV_ModEnd> ) ) ND_PRINT,0
187,<S2SV_ModStart>! dumpable &&! dumpable &&,0
188,<S2SV_ModStart>  maxval ) { <S2SV_ModEnd> if ( jas_matrix_numrows <S2SV_ModStart> 0 ) { int i ; int j ;,0
189,<S2SV_ModStart> = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ;,0
190,"<S2SV_ModStart> -> per_sdma, per_sdma_credits,",0
191,<S2SV_ModStart> char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> |= T_CALC_CHECKSUM ; <S2SV_ModEnd> bzero ( (,0
192,<S2SV_ModStart> } pairs = ( Pairs * ),0
193,"<S2SV_ModStart> val ) ; if ( <S2SV_ModStart>, val ) ) return",0
194,,0
195,<S2SV_ModStart> } else { int16_t * outptr = ( int16_t * ) <S2SV_ModEnd> out [ 0 <S2SV_ModStart> [ 16 ] <S2SV_ModEnd> ; const transform_2d,0
196,<S2SV_ModStart> ) ) { g_clear_error ( & out_stream ) ;,0
197,"<S2SV_ModStart> ( fp, ""[%s]\\n"" <S2SV_ModEnd>, section ->",0
198,<S2SV_ModStart> ; default : ND_TCHECK2 <S2SV_ModEnd> ( * tptr,0
199,"<S2SV_ModStart> -> userData, input <S2SV_ModEnd>, NULL )",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest, dest <S2SV_ModEnd> ) ; unlink",0
202,<S2SV_ModStart> if ( rc <S2SV_ModEnd> ) return NULL,0
203,<S2SV_ModStart> -> y = <S2SV_ModEnd> MaxF ( 0.0f,0
204,<S2SV_ModStart> -> sasl_username ; <S2SV_ModEnd> * dest =,0
205,"<S2SV_ModStart>, 1, cm -> mb_rows * cm -> mb_cols <S2SV_ModEnd> ) ; cpi",0
206,"<S2SV_ModStart> o, datao = 0",0
207,<S2SV_ModStart> ; } } my_free ( info ) ;,0
208,"<S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> 4 ) ; r_strbuf_fini ( & next_op. esil ) ;,0
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
214,<S2SV_ModStart> = NULL ; list_del_init ( & slave -> active_list ) ;,0
215,<S2SV_ModStart> ) ps_dec -> ps_dpb_cmds_read <S2SV_ModEnd> = ih264d_read_mmco_commands (,0
216,<S2SV_ModStart> decode ) { int_fast32_t <S2SV_ModEnd> widthOverflow = gifFilePtr,0
217,<S2SV_ModStart> validator -> user. buf,0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
220,<S2SV_ModStart> ( s += 9 <S2SV_ModEnd> ; isspace (,0
221,<S2SV_ModStart>. active_set ; if ( uipc_main. running ) { <S2SV_ModStart> continue ; } },0
222,"<S2SV_ModStart> dev, msgnum, barnum",0
223,<S2SV_ModStart> max ) { <S2SV_ModEnd> int data =,0
224,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is <S2SV_ModStart> is -> serial <S2SV_ModEnd> ) ; return,0
225,<S2SV_ModStart>. lossless ) <S2SV_ModEnd> return ONLY_4X4 ; <S2SV_ModStart> return ONLY_32X32 ; <S2SV_ModEnd> else if ( <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ; prline_cnt ++ ; prline_cnt ++,0
227,<S2SV_ModStart> buf1 -> size <= <S2SV_ModEnd> buf2 -> size,0
228,"<S2SV_ModStart> ) + size ; memset ( info, 0, sizeof ( * info ) )",0
229,<S2SV_ModStart> ; if ( protocol < 0 ) return - EINVAL ; if (,0
230,"<S2SV_ModStart> ( PERF_COUNT_SW_PAGE_FAULTS, 0 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> ; r = sd_event_add_io_event <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_long_formatting ( ) ;,0
233,"<S2SV_ModStart> sas_eh_defer_cmd ( cmd, my_cmd",0
234,<S2SV_ModStart> ( is_async ) { <S2SV_ModStart> ) ; } },0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> == MagickFalse ) <S2SV_ModEnd> image = DestroyImageList,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> headindex + position >= <S2SV_ModEnd> psf -> headend,0
240,<S2SV_ModStart> ; return ( <S2SV_ModEnd> IHEVCD_SUCCESS ) ;,0
241,<S2SV_ModStart> ; } } if ( prev_line_has_list_loosening_effect ),0
242,<S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> postproc_flag = <S2SV_ModEnd> ctx -> postproc_cfg,0
244,<S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * tptr,0
245,<S2SV_ModStart> ; # if <S2SV_ModEnd> CONFIG_RUNTIME_CPU_DETECT if ( <S2SV_ModStart> ; # if <S2SV_ModEnd> CONFIG_RUNTIME_CPU_DETECT if (,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank> Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> ptr_hbe_txposer -> core_frame_length * 8,0
248,<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec =,0
249,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( extent,0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> fdt ) ; if ( offset < 0 ) return - FDT_ERR_BADSTRUCTURE ;,0
252,<S2SV_ModStart> server. maxidletime && server. maxidletime,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> ; j < n <S2SV_ModEnd> ; j ++,0
255,<S2SV_ModStart> action ) { if ( r < 0 ) return ;,0
256,<S2SV_ModStart> 16 ) { <S2SV_ModEnd> sf -> x_scale_fp,0
257,<S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ;,0
258,<S2SV_ModStart> ; } } <S2SV_ModEnd> break ; },0
259,<S2SV_ModStart> ( ) ; sctp_v6_protosw_exit <S2SV_ModEnd> ( ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = ( char * ),0
262,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> ksz8851DumpReg ( interface,0
263,"<S2SV_ModStart> skip } ; vp9_foreach_transformed_block <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ( fit, image_type <S2SV_ModEnd> ) ) {",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval,0
267,<S2SV_ModStart> ) if ( strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { <S2SV_ModEnd> return Py_None ;,0
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; #,0
271,<S2SV_ModStart> int n = <S2SV_ModEnd> data_end - data <S2SV_ModStart> data_end - data <S2SV_ModEnd> ; pbi ->,0
272,"<S2SV_ModStart> errmsg ) ; if ( ret. code!= 0 ) krb5_free_error_message ( handle -> context, errmsg ) ;",0
273,<S2SV_ModStart> CONFIG_TEMPORAL_DENOISING unsigned int <S2SV_ModEnd> best_sse = INT_MAX,0
274,"<S2SV_ModStart> goto error ; if ( fstat ( h -> fd, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> NULL ; UWORD8 <S2SV_ModEnd> u1_profile_idc, u1_level_idc",0
276,<S2SV_ModStart> params ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ;,0
277,"<S2SV_ModStart> bitspersample, samplesperpixel <S2SV_ModEnd> ; uint32 width",0
278,<S2SV_ModStart> ) ) { if ( errno == ENOENT ) { return ( ARCHIVE_FAILED ) ; },0
279,<S2SV_ModStart> unsigned int link_count = 0,0
280,<S2SV_ModStart> tx_size_uv = get_uv_tx_size <S2SV_ModEnd> ( mbmi ),0
281,<S2SV_ModStart> mq_ops ) { WARN_ON_ONCE <S2SV_ModEnd> ( fq -> <S2SV_ModStart> -> mq_ops ) WARN_ON_ONCE <S2SV_ModEnd> ( fq ->,0
282,<S2SV_ModStart> uint8_t val ; if ( <S2SV_ModStart> -> config ) ) return ( uint32_t ) - 1,0
283,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
284,<S2SV_ModStart> NULL || * ( int * ),0
285,<S2SV_ModStart> ; cleanup : k5free ( ret [ j ] ) ;,0
286,"<S2SV_ModStart> memcpy ( sbuf <S2SV_ModEnd>, crgram,",0
287,"<S2SV_ModStart> ; i40e_vsi_config_rss ( vsi,",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; const,0
290,<S2SV_ModStart> recon_yoffset + recon_y_stride + recon_y_stride,0
291,<S2SV_ModStart> ) ; } image = DestroyImageList ( image ) ;,0
292,<S2SV_ModStart> p - buf < <S2SV_ModEnd> Py_SIZE ( u,0
293,<S2SV_ModStart> struct stat stb = { 0 },0
294,<S2SV_ModStart> test ) { if ( word >= test ),0
295,<S2SV_ModStart> ; if (! oci -> above_context ) goto allocation_fail ; if (,0
296,<S2SV_ModStart> ) return ; vpx_memcpy <S2SV_ModEnd> ( & t_above,0
297,<S2SV_ModStart> 0 ; } if ( prev_slice_err == 1 ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; return 0 ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> { err = nanosleep <S2SV_ModEnd> ( & delay,0
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t",0
301,<S2SV_ModStart> value ) { <S2SV_ModEnd> httpSetRouteName ( state,0
302,"<S2SV_ModStart>. cmp = type,. match_data. raw_data = description, <S2SV_ModEnd>. match_data.",0
303,<S2SV_ModStart> ntime ) { cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> out ; } <S2SV_ModEnd> free ( pool,0
304,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> data + transmitted_length ),0
305,"<S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self,",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> -> private_data ; u32 flags = arg ; <S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch (,0
308,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode,0
309,<S2SV_ModStart> block_size ) ; if ( block_size == 0 ) return - EINVAL ;,0
310,<S2SV_ModStart> iv ) ; EVP_CipherFree ( ctx ) ;,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( busy,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( boot_cpu_data,0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pack_mb_tokens ( vp9_writer <S2SV_ModStart> ) ; } return,0
315,<S2SV_ModStart> ; struct vp9_write_bit_buffer *,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> -> data = jas_strdup <S2SV_ModEnd> ( cmpt ->,0
319,<S2SV_ModStart> ret = - ENODEV <S2SV_ModEnd> ; goto err_free_urb_to_pipe,0
320,"<S2SV_ModStart> fft_jmp ; WORD32 <S2SV_ModEnd> xh1_0, xh20_0",0
321,<S2SV_ModStart> mount_entry_on_generic ( mntent <S2SV_ModEnd> ) ; },0
322,"<S2SV_ModStart> -> display_width - 2 <S2SV_ModEnd>, 16 ) <S2SV_ModStart> -> display_height - 2 <S2SV_ModEnd>, 16 )",0
323,"<S2SV_ModStart> ( env, <S2SV_ModEnd> server_port_val, req_server_port",0
324,<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND,0
325,<S2SV_ModStart> need *= 4 <S2SV_ModEnd> ; } ),0
326,"<S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strlcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> r = &,0
328,"<S2SV_ModStart> LEX_STR ) { strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ), len + 1 <S2SV_ModStart> ), len + 1",0
329,,1
330,<S2SV_ModStart> { SvcInternal * <S2SV_ModEnd> si = get_svc_internal,0
331,"<S2SV_ModStart> i, vp9_tree *",0
332,<S2SV_ModStart> s1 ) + 1U <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { <S2SV_ModEnd> return Py_None ;,0
335,,0
336,<S2SV_ModStart> ps_dec ) ; ps_dec -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_dec -> s_ivd_video_decode_op_t. u4_num_bytes_consumed ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,<S2SV_ModStart> ( ctx -> <S2SV_ModEnd> enc. encode <S2SV_ModStart> ( ctx -> <S2SV_ModEnd> enc. encode,0
339,<S2SV_ModStart> ) ; } if ( term. csi_argc!= 2 ) return ;,0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( <S2SV_ModEnd> i -> parent,0
342,<S2SV_ModStart> ) ) { <S2SV_ModEnd> } else if <S2SV_ModStart> ) ) { <S2SV_ModEnd> } else {,0
343,<S2SV_ModStart> = value ; ps_pps -> i1_sps_id = 0 ;,0
344,<S2SV_ModStart> ) ) { psf -> rwf_format = SF_ENDIAN_LITTLE ;,0
345,"<S2SV_ModStart> ( bytes_per_line, ( size_t )",0
346,"<S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; }",0
347,<S2SV_ModStart> BLOCK_8X8 : return vp9_mse16x16 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vp9_mse16x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vp9_mse16x16 <S2SV_ModEnd> ; } },0
348,"<S2SV_ModStart> krb5_pa_pk_as_rep_draft9 ( reqp, reqp",0
349,<S2SV_ModStart> ; if ( <S2SV_ModEnd> vb ) {,0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> && rxent -> <S2SV_ModEnd> dport == sport,0
352,<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> mwifiex_dbg ( adapter,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,<S2SV_ModStart>. txwin_size = cpu_to_le16 <S2SV_ModEnd> ( L2CAP_DEFAULT_RX_WINDOW ) <S2SV_ModStart>. retrans_timeout = cpu_to_le16 <S2SV_ModEnd> ( L2CAP_DEFAULT_RETRANS_TO ) <S2SV_ModStart>. monitor_timeout = cpu_to_le16 <S2SV_ModEnd> ( L2CAP_DEFAULT_MONITOR_TO ) <S2SV_ModStart>. max_pdu_size = cpu_to_le16 <S2SV_ModEnd> ( L2CAP_DEFAULT_MAX_RX_APDU ),0
355,<S2SV_ModStart> r ) { <S2SV_ModEnd> ret = recv,0
356,<S2SV_ModStart> ps_bitstrm ) ; ps_dec -> u4_pic_decode_done = 1 ;,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,<S2SV_ModStart> ; open_flags &= ~ FMODE_WRITE <S2SV_ModEnd> ; rcu_read_lock (,0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> ; int64_t dist = 0,0
361,<S2SV_ModStart> } if ( pmd_unmapped <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> PAM_BUF_ERR ) ; <S2SV_ModEnd> strcpy ( *,0
363,<S2SV_ModStart> seg ) { int ret ; ret = <S2SV_ModEnd> vp9_read_tree ( r <S2SV_ModStart> tree_probs ) ; if ( ret < 0 ) return ret ; return ret ;,0
364,"<S2SV_ModStart> i ) { vpx_memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { vpx_memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart>, int nmi <S2SV_ModEnd> ) { struct",0
366,<S2SV_ModStart> depth ++ ; if (! maxbuf ) return ( NULL ) ;,0
367,"<S2SV_ModStart>, KSZ8851_REG_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; if",0
368,<S2SV_ModStart> ; # endif mono_console_handle_async_ops ( ) ;,0
369,<S2SV_ModStart> x0 ++ ; n00 <S2SV_ModEnd> = x_0 + <S2SV_ModStart> = x_0 + x_0 <S2SV_ModEnd> ; n01 = <S2SV_ModStart> = x_1 + x_0 <S2SV_ModEnd> ; n20 = <S2SV_ModStart> = x_0 - x_0 <S2SV_ModEnd> ; n21 = <S2SV_ModStart> = x_1 - x_0 <S2SV_ModEnd> ; n10 = <S2SV_ModStart> = x_4 + x_0 <S2SV_ModEnd> ; n11 = <S2SV_ModStart> = x_5 + x_0 <S2SV_ModEnd> ; n30 =,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_unuse <S2SV_ModEnd> ( * pmd,0
371,<S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return,0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> priv ) { if (! ctx -> config. enc ) { return VPX_CODEC_MEM_ERROR ; },0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> ret = s,0
375,<S2SV_ModStart> 0 ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz <S2SV_ModEnd> ; } if,0
376,<S2SV_ModStart> } else { brelse ( iinfo <S2SV_ModEnd> ) ; },0
377,"<S2SV_ModStart>, ENC28J60_REG_MIWRL, address <S2SV_ModEnd> ) ; enc28j60WriteReg",0
378,<S2SV_ModStart> int bad_format_imginfo ( const,0
379,"<S2SV_ModStart>, DefragSturgesNovakSolarisTest ) <S2SV_ModEnd> ; UtRegisterTest (",0
380,<S2SV_ModStart> if ( object_data && new_object. data,0
381,<S2SV_ModStart> NULL ) { # if ( WEB_SOCKET_DIGEST_AUTH_SUPPORT == ENABLED ) <S2SV_ModStart> = '\\0' ; # endif,0
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_pic ) ; if ( p_pic ) { <S2SV_ModStart> p_pic ) ; },0
384,"<S2SV_ModStart> mf, mf, mf",0
385,<S2SV_ModStart> uint32 num_properties = ( uint32 ),0
386,<S2SV_ModStart> ; act = vp8_variance16x16 <S2SV_ModEnd> ( x ->,0
387,<S2SV_ModStart> args ) { if ( ctr_id == 0 ) return VPX_CODEC_INVALID_PARAM ;,0
388,,0
389,<S2SV_ModStart> ; if (! NCH ( n ) <S2SV_ModEnd> ) { expr_ty,0
390,<S2SV_ModStart> ( absdiff <= 0 <S2SV_ModEnd> ) { running_avg_y,0
391,<S2SV_ModStart> reqPtr -> coff >= <S2SV_ModEnd> 0u ) {,0
392,"<S2SV_ModStart> ret = 0 ; regs -> xtregs_opt = & xtregs -> opt, sizeof ( xtregs -> opt )",0
393,<S2SV_ModStart> size ) ; # if ( ETH_SUPPORT == ENABLED ) <S2SV_ModStart> -> srcIpAddr ; # endif,0
394,<S2SV_ModStart> se_device * remote_dev ; if ( xop -> op_origin == XCOL_SOURCE_RECV_OP ) return,0
395,<S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {,0
396,<S2SV_ModStart> args ) { if (! ctr_id ) return VPX_CODEC_OK ;,0
397,<S2SV_ModStart> ) ; } if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ; },0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> char * ) <S2SV_ModEnd> AcquireQuantumMemory ( imbuf,0
400,<S2SV_ModStart> args ) { if ( ctr_id == 0 ) { return VPX_CODEC_INVALID_PARAM ; },0
401,,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> IMPEG2D_TRACE_MB_START ( ps_dec",0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * const,0
404,<S2SV_ModStart> n ) { <S2SV_ModEnd> jas_seqent_t * data,0
405,<S2SV_ModStart> ; int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) return,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> dst [ 0 <S2SV_ModStart> 7 ] ; <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> -> row_offset ; nrow = ( row + img -> row_offset ) % rowsperstrip ; if ( buf == NULL ) { <S2SV_ModStart> buf == NULL <S2SV_ModEnd> ) { if,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> = x ; psf -> headindex ++ ;,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart>, file ) < 0 <S2SV_ModEnd> ) return 0",0
412,<S2SV_ModStart> ; uint16_t attr_len = 0,0
413,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> default : EVPerr,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { <S2SV_ModEnd> send_auth ( username,0
417,<S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ;,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> return ; } <S2SV_ModEnd> temp = temp,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> = 0 ; if ( user -> password!= NULL ) { <S2SV_ModStart> 16 ) ; },0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> 0 ; i <= <S2SV_ModEnd> sizeof ( buf,0
424,<S2SV_ModStart> uchar buf [ 3 <S2SV_ModEnd> ] ; int,0
425,<S2SV_ModStart> ) ; return connectErrorCode <S2SV_ModEnd> ; } credssp_free,0
426,"<S2SV_ModStart>, buf_size, 8 <S2SV_ModEnd> ) ) {",0
427,<S2SV_ModStart> bd_addr ) { if (! bd_addr ) return BT_STATUS_NOT_READY ;,0
428,<S2SV_ModStart> ; int avail = 0,0
429,<S2SV_ModStart> 16 ) ; psf -> headindex ++ ;,0
430,<S2SV_ModStart> epoll_ ) ; if ( epoll -> host_fd!= NULL ) { <S2SV_ModStart> OE_EINVAL ) ; },0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, <S2SV_ModEnd> NULL ) ; <S2SV_ModStart> ( CMD_INITIALIZE, <S2SV_ModEnd> section_ptr, NULL",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_INDIR_MAX : * ( size_t * ) val = ms -> indir_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> + 1 ) <S2SV_ModEnd> ; writer ->,0
435,<S2SV_ModStart> ; int plen = 0,0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> BLOCK_SIZE i ;,0
441,<S2SV_ModStart> ; int hexdump = 0,0
442,<S2SV_ModStart> ) { const MV <S2SV_ModEnd> * ref = <S2SV_ModStart> as_mv ; const MV <S2SV_ModEnd> diff = {,0
443,"<S2SV_ModStart> } printf ( ""Using <S2SV_blank> %s\\n"" <S2SV_ModEnd>, vpx_codec_iface_name (",0
444,"<S2SV_ModStart> entry ) ; skb_pull_rcsum ( skb_out, hdr_size ) ; <S2SV_ModStart> free ; } <S2SV_ModEnd> memmove ( skb_out",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> ( fd, UI_SET_EVBIT <S2SV_ModEnd>, EV_REL )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> { vp9_lpf_vertical_8 ( <S2SV_ModEnd> pitch, lfi <S2SV_ModStart> { vp9_lpf_vertical_4 ( <S2SV_ModEnd> pitch, lfi",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code <S2SV_ModStart> -> k5c ) <S2SV_ModEnd> ; * pctx",0
450,<S2SV_ModStart> ) ; } <S2SV_ModEnd> appendImageToList ( &,0
451,<S2SV_ModStart> START_CODE_PREFIX_LEN )!= USER_DATA_START_CODE <S2SV_ModEnd> ) { impeg2d_bit_stream_flush,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,,0
454,<S2SV_ModStart> ; int tmp <S2SV_ModEnd> ; tmp =,0
455,<S2SV_ModStart> 'O' )? _dl_platform : _dl_platform <S2SV_ModEnd> ) ; if,0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecMalloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,<S2SV_ModStart> char * ) ReleaseImage <S2SV_ModEnd> ( image ->,0
459,<S2SV_ModStart> goto errout ; _ogg_free ( info ) ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL,0
461,"<S2SV_ModStart> * self, Py_ssize_t <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> sqlite3_malloc ( nByte <S2SV_ModEnd> ) ; if,0
463,<S2SV_ModStart> filp ) { <S2SV_ModEnd> return 0 ;,0
464,"<S2SV_ModStart> * body, <S2SV_ModEnd> PyArena * arena <S2SV_ModStart>. AsyncFor. <S2SV_ModEnd> lineno = lineno",0
465,"<S2SV_ModStart> * info, const",0
466,,0
467,"<S2SV_ModStart> UINT error ; Stream_Read_UINT32 <S2SV_ModEnd> ( s, <S2SV_ModStart> Id ) ; Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,,0
469,"<S2SV_ModStart> daddr ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ;",0
470,<S2SV_ModStart> ; MATLAB_KO : <S2SV_ModEnd> image = image2,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,<S2SV_ModStart> t ) ) <S2SV_ModEnd> result = RLC_ERR <S2SV_ModStart> = RLC_ERR ; <S2SV_ModEnd> do { m_len,0
473,"<S2SV_ModStart> vp8_get_reference ( vpx_codec_alg_priv_t <S2SV_ModEnd> * ctx,",0
474,"<S2SV_ModStart> 8 ) ; psf = calloc ( 1, sizeof ( SF_PRIVATE ) ) ; if (! psf <S2SV_ModEnd> ) { sf_errno",0
475,<S2SV_ModStart> cm ) { if ( cm -> counts. switchable_interp [ j ] [ i ] < 0 ) return ;,0
476,,0
477,"<S2SV_ModStart> 0 ) { WSPR ( sp, SLT_Error, htc -> rxbuf ) ;",0
478,<S2SV_ModStart> define EOFOp 0x07 const,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,,0
481,<S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> int cim_rev ; <S2SV_ModEnd> if ( (,0
482,"<S2SV_ModStart> -> columns, 4 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,<S2SV_ModStart> ( ( o <S2SV_ModEnd> < datao ) <S2SV_ModStart> ( ( o <S2SV_ModEnd> < datao ),0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> servname ) ; <S2SV_ModEnd> CRYPTO_THREAD_unlock ( stunnel_locks,0
487,<S2SV_ModStart> void ) { if (! mnemonic ) return ;,0
488,<S2SV_ModStart> ; } } <S2SV_ModEnd> return NO_ERROR ;,0
489,<S2SV_ModStart> image ) ; <S2SV_ModEnd> image = DestroyImageList,0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ;,0
491,"<S2SV_ModStart> = 0 ; memset ( names, 0, sizeof ( char * ) * numentries ) ;",0
492,<S2SV_ModStart> wait ) ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> ( outpos, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"" <S2SV_ModEnd>, x,",0
494,<S2SV_ModStart> minor_status = ( size_t <S2SV_ModEnd> ) KRB5_BAD_MSIZE ;,0
495,<S2SV_ModStart> args ) { if ( ctr_id == 0 ) { return VPX_CODEC_INVALID_PARAM ; },0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, ulong <S2SV_ModEnd> rep_quick ) {",0
498,<S2SV_ModStart> ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> uECC_word_t * p,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,<S2SV_ModStart> cp ; } <S2SV_ModEnd> } else if,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,<S2SV_ModStart> == NULL ) { pixcmapDestroy ( cmap ) ; <S2SV_ModStart> NULL ) ; },0
504,<S2SV_ModStart>. vf = vp8_mse16x16 <S2SV_ModEnd> ; xd ->,0
505,<S2SV_ModStart> int overhead = <S2SV_ModEnd> strlen ( ns <S2SV_ModStart> ( ns ) <S2SV_ModEnd> ; if (,0
506,<S2SV_ModStart> = NEGO_STATE_FINAL ; nego -> state = NEGO_STATE_FINAL ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; if (",0
508,<S2SV_ModStart> ~ TJA1101_CONFIG1_MII_MODE ; <S2SV_ModEnd> tja1101WritePhyReg ( interface,0
509,<S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( i,0
510,"<S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart>, above_data, 128 <S2SV_ModEnd> ) ; uint8_t",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> ; ei -> <S2SV_ModEnd> i_sync_tid = 0,0
513,<S2SV_ModStart> wb ) ; <S2SV_ModEnd> write_sync_code ( wb <S2SV_ModStart> cm -> error_resilient_mode <S2SV_ModEnd> ) ; if,0
514,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
515,"<S2SV_ModStart> -> buffer, "" <S2SV_blank>?"" <S2SV_ModEnd> ) ; if",0
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> pc ) ; <S2SV_ModEnd> pc -> refresh_golden_frame,0
518,<S2SV_ModStart> ; uint16_t n = 0,0
519,<S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> errors = rb_ary_new,0
520,<S2SV_ModStart> config_arg ) ; if ( config_arg ),0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> ; } else { <S2SV_ModStart> ) ; } },0
524,<S2SV_ModStart> ( u >= ( PLANE_SIZE - 1 ) <S2SV_ModEnd> ) { *,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,<S2SV_ModStart> KSZ8851_REG_RXFHBCR ) & RXFHBCR_RXBC_MASK <S2SV_ModEnd> ) ; ksz8851ReadFifo,0
527,"<S2SV_ModStart> node * n <S2SV_ModEnd> ) { identifier <S2SV_ModStart>, type_comment, <S2SV_ModEnd> n -> n_col_offset",0
528,<S2SV_ModStart> ; out : <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
529,<S2SV_ModStart> 1 ; } <S2SV_ModEnd> sn_coap_protocol_free ( handle,0
530,"<S2SV_ModStart> { printf ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> Bluetooth <S2SV_blank> HAL.\\n"" <S2SV_ModEnd> ) ; }",0
531,<S2SV_ModStart> ] ) > 4098 <S2SV_ModEnd> && col <,0
532,<S2SV_ModStart> len ) ; <S2SV_ModEnd> param -> data_size,0
533,<S2SV_ModStart> image ) ; <S2SV_ModEnd> image = DestroyImageList,0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> ovl_dentry_lower ( new <S2SV_ModEnd> ) ; if <S2SV_ModStart> ovl_dentry_lower ( new <S2SV_ModEnd> ) ; if,0
537,<S2SV_ModStart> plane ++ ) { <S2SV_ModStart> arg ) ; },0
538,<S2SV_ModStart> -> e_mbd ; if ( xd -> mi [ 0 ] ) { <S2SV_ModStart> = bsize ; },0
539,<S2SV_ModStart> = NULL ; reader. gcol = NULL ;,0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModEnd> ) { ctx,0
542,<S2SV_ModStart> image ) ; <S2SV_ModEnd> image = DestroyImageList,0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_char <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Debug</td><td>%s</td></tr>"" <S2SV_ModEnd>, ( Run",0
546,"<S2SV_ModStart> ) src_pitch ; memmove <S2SV_ModEnd> ( dest,",0
547,"<S2SV_ModStart>, ""%s"", *",0
548,<S2SV_ModStart> ; iad_num ++ ; if ( iad_num < 0 ) break,0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vp8_variance16x16 <S2SV_ModEnd> ( * (,0
551,"<S2SV_ModStart> ( interface, <S2SV_ModEnd> ENC624J600_REG_ERXST, ENC624J600_REG_ERXST",0
552,<S2SV_ModStart> ; maxlen = ( int ),0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; },0
554,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> adaptive_rd_thresh,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> inuse / 8 + 1,0
557,<S2SV_ModStart> o ) { <S2SV_ModEnd> return Py_None ;,0
558,<S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [,0
559,<S2SV_ModStart> ) break ; <S2SV_ModEnd> } else if,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { int <S2SV_ModEnd> i ; PyObject,0
562,<S2SV_ModStart> = cJSON_Object ; item -> type = cJSON_Object ;,0
563,"<S2SV_ModStart> pmysql ), mysql_error ( imp_dbh -> pmysql ),",0
564,<S2SV_ModStart> slot_lock ) ; BTA_JvRfcommWrite <S2SV_ModEnd> ( slot ->,0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> BYTE a_val ; UINT16 <S2SV_ModEnd> tempWidth ; tempWidth,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> rc -> frames_since_key <= <S2SV_ModEnd>  cpi -> <S2SV_ModStart> output_framerate / 2 <S2SV_ModEnd> ) { kf_boost,0
570,"<S2SV_ModStart> ( r, 4 <S2SV_ModEnd> ) ; if",0
571,"<S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 97 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,"<S2SV_ModStart> = BLOCK_OFFSET ( <S2SV_ModEnd> qcoeff, block",0
573,<S2SV_ModStart> -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,<S2SV_ModStart> users ) ; cb_info -> serv = NULL ;,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> * prime_arg ; char <S2SV_ModEnd> client_name, service_name",0
577,"<S2SV_ModStart>, & msg <S2SV_ModEnd> ) ; close",0
578,<S2SV_ModStart> s ) { <S2SV_ModEnd> ret = send,0
579,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) == 0 ) || ( strcmp ( prop_name, XML_ATTR_ID ) == 0 )",0
580,<S2SV_ModStart> svc_ctx ) { if ( svc_ctx == NULL ) return NULL ;,0
581,<S2SV_ModStart> ) ; } <S2SV_ModEnd> zend_hash_update ( Z_ARRVAL_P,0
582,<S2SV_ModStart> -> vpx_bps = 1 <S2SV_ModEnd> ; if (,0
583,<S2SV_ModStart> * otmp = ( struct obj * ),0
584,"<S2SV_ModStart> directory_table_end, table_start = 0",0
585,<S2SV_ModStart> -> count = 1 <S2SV_ModEnd> ; if (,0
586,<S2SV_ModStart> ; vp9_clear_system_state ( ) ; vp9_enable_segmentation ( seg,0
587,"<S2SV_ModStart> FunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; AsyncFunctionDef_type <S2SV_ModEnd> = make_type (",0
588,"<S2SV_ModStart> return ; } if ( <S2SV_ModStart>, 16 )!= 0 ) LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) )",0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ++ x -> <S2SV_ModStart> ] ; } # endif,0
590,"<S2SV_ModStart> t ++ ; <S2SV_ModEnd> SetDefaults ( ) <S2SV_ModStart> NAME, SUBVERSION <S2SV_ModEnd> ) ; return",0
591,"<S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> MB_PREDICTION_MODE mode, <S2SV_ModEnd> vp9_prob * probs",0
593,"<S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } }",0
594,<S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,<S2SV_ModStart> ) ) { g_clear_error ( & out_stream ) ;,0
596,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> alignment_cols ) ; <S2SV_ModEnd> for ( tile_row,0
597,"<S2SV_ModStart> ) ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ;",0
598,<S2SV_ModStart> ) ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { <S2SV_ModStart> ) ; } },0
599,<S2SV_ModStart> ip_options * opt = NULL,0
600,<S2SV_ModStart> tree [ i <S2SV_ModEnd> ] ; if,0
601,<S2SV_ModStart> if ( img && ( flags & VP8_EFLAG_FORCE_ARF ),0
602,"<S2SV_ModStart> { ret = krb5_get_tag <S2SV_ModEnd> ( asn1,",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> rc -> av_per_frame_bandwidth <S2SV_ModEnd> ) / 100,0
605,<S2SV_ModStart> [ MIF_MAGICLEN ] = { 0 },0
606,<S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT * ctx ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> ctx = get_block_context <S2SV_ModStart> -> is_coded ; <S2SV_ModEnd> ctx -> is_coded,0
607,<S2SV_ModStart> ] = x ; psf -> headindex ++,0
608,<S2SV_ModStart> gbc ) ; <S2SV_ModEnd> i = 0,0
609,<S2SV_ModStart> c ) || ( <S2SV_ModStart> c >= 128 ),0
610,"<S2SV_ModStart>, packet -> http_transfer_encoding. ptr = NULL, packet ->",0
611,"<S2SV_ModStart>, Min ( ( ssize_t ) <S2SV_ModStart>, dds_info, ( ssize_t )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ; ( void ) h ;,0
614,<S2SV_ModStart> ) ) { <S2SV_ModEnd> sprintf ( outpos,0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING if (,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> 0 ) { mtCOVERAGE_TEST_MARKER ( ) ; <S2SV_ModStart> } else { mtCOVERAGE_TEST_MARKER ( <S2SV_ModEnd> ) ; },0
619,"<S2SV_ModStart> TX_TYPE tx_type, <S2SV_ModEnd> int16_t * input",0
620,<S2SV_ModStart> s ) { int <S2SV_ModEnd> num_updates ; uint16,0
621,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
622,<S2SV_ModStart> coef_branch_ct ) { const,0
623,"<S2SV_ModStart> assert ( name ) ; log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", enable_disable ( utf8 ), name",0
624,"<S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> obuf [ 0",0
625,<S2SV_ModStart> ) ; } <S2SV_ModEnd> else { ctx,0
626,<S2SV_ModStart> ( uv_block_size == 8 <S2SV_ModEnd> ) { uv_stride,0
627,<S2SV_ModStart> ; mungspaces ( origbuf <S2SV_ModEnd> ) ; bufp,0
628,<S2SV_ModStart> = cJSON_CreateFloat ( ( double * ),0
629,<S2SV_ModStart> tile_cols ) ; int n ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } for,0
630,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> while ( ( <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
631,"<S2SV_ModStart> = SEGMENT_DELTADATA ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> segment_rdmult = vp9_compute_rd_mult",0
632,<S2SV_ModStart> error_code ) ctx <S2SV_ModEnd> -> base.,0
633,<S2SV_ModStart> * ps_cur_slice ; <S2SV_ModEnd> ih264d_free_dynamic_bufs ( ps_dec,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> else return - EINVAL <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" <S2SV_ModEnd> ) ; throw_exception",0
639,<S2SV_ModStart> struct sockaddr_in addr = { 0 },0
640,<S2SV_ModStart> -> common ; <S2SV_ModEnd> if ( setjmp,0
641,<S2SV_ModStart> ; ND_TCHECK2 ( ( <S2SV_ModStart> [ i ] ),0
642,<S2SV_ModStart> struct mpt_ioctl_command karg = { 0 },0
643,<S2SV_ModStart> Image * image = NULL,0
644,,0
645,,0
646,"<S2SV_ModStart> r, l <S2SV_ModEnd> ) ; }",0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
648,<S2SV_ModStart> r ) { if ( cm -> frame_parallel_decoding_mode ),0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; if ( op -> nd_opt_len == 0 ),0
651,<S2SV_ModStart> re_ast ) -> root_node <S2SV_ModEnd> = NULL ;,0
652,<S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) {,0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> -> av1_config ) <S2SV_ModEnd> GF_AV1Config * av1_cfg <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; dpb ->,0
656,<S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> ) ; } },0
657,,1
658,<S2SV_ModStart> FALSE ; } <S2SV_ModEnd> } return tpkt_ensure_stream_consumed,0
659,,0
660,"<S2SV_ModStart> falign, hdr_size <S2SV_ModEnd> ; struct cli_exe_section",0
661,<S2SV_ModStart> ( DM9000_REG_EPCR ) & <S2SV_ModEnd> EPCR_ERPRR ) ;,0
662,<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> -> callback ) <S2SV_ModEnd> ; } if,0
663,<S2SV_ModStart> = ubuf ; iov. iov_len = size ;,0
664,<S2SV_ModStart> int new_mv_mode_penalty = 0 <S2SV_ModEnd> ; const int,0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> addr,0
666,<S2SV_ModStart> ; merged -> resbody_limit = ( child -> resbody_limit == NOT_SET? parent -> resbody_limit : child -> resbody_limit ) ; merged ->,0
667,"<S2SV_ModStart> one, offset = 0",0
668,"<S2SV_ModStart>, comp -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t"" <S2SV_ModEnd>, & ovalue",0
670,"<S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> thread -> twups,0
