,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> -> next ; c = array -> child ; },0
4,"<S2SV_ModStart>, int nmi, u32 * flags <S2SV_ModStart> regs ) ; * flags = perf_swevent_get_recursion_context ( rctx ) ;",0
5,<S2SV_ModStart> ) { # ifdef GRUB_DEBUG <S2SV_ModEnd> char buf [,0
6,"<S2SV_ModStart> ] ) { int <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> ] ; int <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> ] ; int <S2SV_ModEnd> x0, t1",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,<S2SV_ModStart> ) ; int filt_err <S2SV_ModEnd> ; int filt_direction <S2SV_ModStart> ; int filt_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> ; filt_mid = ( <S2SV_ModStart> -> last_frame_uf ) ) <S2SV_ModStart> ; filt_best = ( <S2SV_ModStart> max_filter_level ) ) ) <S2SV_ModStart> ; filt_low = ( <S2SV_ModStart> max_filter_level ) ) ) <S2SV_ModStart> { filt_low = ( <S2SV_ModStart> max_filter_level ) ) ) <S2SV_ModStart> { filt_low = ( <S2SV_ModStart> max_filter_level ) ) ) <S2SV_ModStart> { filt_low = ( <S2SV_ModStart> max_filter_level ) ) ),0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> 0 ) ; vp9_write_token <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, hp, mvcomp -> hp, & mvcomp -> hp, & mvcomp -> hp ) ; if ( comp!= 0 ) vp9_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_hp <S2SV_ModEnd> ) ; }",0
11,<S2SV_ModStart> blockSize == 64 && blockSize == 128 <S2SV_ModStart> blockSize == 256 && blockSize == 128 <S2SV_ModStart> blockSize == 512 && blockSize == 128 <S2SV_ModStart> blockSize == 512 && blockSize == 128 <S2SV_ModStart> blockSize == 512 && blockSize == 128 <S2SV_ModStart> blockSize == 512 && blockSize == 128 <S2SV_ModStart> blockSize == 512 && blockSize == 128 <S2SV_ModStart> blockSize == 512 && blockSize == 128,0
12,"<S2SV_ModStart> ( l2tp_cc_direction2str, ""Direction-#%u"" <S2SV_ModEnd>, * (",0
13,<S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_put ( dest_keyring ) ; } else { <S2SV_ModStart> ; } else <S2SV_ModEnd> { switch ( <S2SV_ModStart> 0 ] ; },0
14,"<S2SV_ModStart> = NULL ; int ret = GSS_S_CONTINUE_NEEDED ; <S2SV_ModStart> goto cleanup ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> DER_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; <S2SV_ModStart> = GSS_S_CONTINUE_NEEDED ; <S2SV_ModEnd> return ret ;",0
15,<S2SV_ModStart> int len ; char * tm_str ; <S2SV_ModStart> = localtime ( <S2SV_ModEnd> t ) ; <S2SV_ModStart> = g_strdup ( tm_str <S2SV_ModEnd> ) ; len,0
16,"<S2SV_ModStart> length ) ; if ( length > AUTH_VECTOR_LEN ) { <S2SV_ModStart> ) ) ; } else { memcpy ( hashed, password, AUTH_VECTOR_LEN ) ; }",0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! inode_capable_inode <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable_inode <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; if ( reader -> bytes_available_fd > 0 ) { <S2SV_ModStart> timeout ) ; },0
20,<S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> FIRSTPASS_STATS tmp_next_frame ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> reset_fpf_position ( twopass,0
21,<S2SV_ModStart> + size <= ext4_io_size_read <S2SV_ModEnd> ( inode ),0
22,<S2SV_ModStart> alg ) { request_module_nol ( <S2SV_ModEnd> name ) ;,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; len = ptr - line ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> GITERR_CHECK_ALLOC_ADD ( & <S2SV_ModStart> -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' <S2SV_ModEnd> ; pkt -> <S2SV_ModStart> pkt -> msg [ len ] = '\\0' <S2SV_ModEnd> ; pkt ->",0
24,<S2SV_ModStart> BYTE flags ; UINT16 <S2SV_ModEnd> length ; Stream_Read_UINT8,0
25,<S2SV_ModStart> -> pb_size = ( int ),0
26,"<S2SV_ModStart> mntent, path, MAXPATHLEN",0
27,<S2SV_ModStart> EIO ; } if ( io -> io_size > IO_SIZE_MAX ) return - EINVAL ;,0
28,<S2SV_ModStart> ) ( ( ( <S2SV_ModStart> size_t ) pixel ) <S2SV_ModStart> QuantickRange * ( ( <S2SV_ModStart> ) ) + 0.5 ) * ( <S2SV_ModStart> ) ) + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if (! iface ) return,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> int frame_out, uint64_t <S2SV_ModEnd> dx_time ) {",0
33,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && ( imp_dbh -> is_null && imp_dbh -> is_null ) ),0
34,"<S2SV_ModStart> ENCR ; } enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ENC28J60_REG_ECON1, ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ENC28J60_REG_ETXSTL, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ENC28J60_REG_ETXNDL, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ENC28J60_REG_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ENC28J60_REG_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60SetBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ENC28J60_REG_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc",0
35,<S2SV_ModStart> ; value = ast2obj_strdup ( o -> lineno ) ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed ; if (! value ) goto failed <S2SV_ModEnd> ; if (,0
36,"<S2SV_ModStart> if ( page ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> ) ; return ; } } else if ( page ) { if ( <S2SV_ModEnd> ( unlink ( <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> ) ; return ; } } else if ( page ) { if ( ( unlink ( page ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res )",0
37,"<S2SV_ModStart>, int flag, int mb_cols <S2SV_ModStart>, 16 * mb_cols <S2SV_ModEnd> ) ; for <S2SV_ModStart>, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_width, limits, 8 ) ; vpx_memset ( limits, ( unsigned char * ) source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_stride, source -> y_width, limits, 8 ) ; vpx_memset ( limits, ( unsigned char * ) source ->",0
38,<S2SV_ModStart> mb_cache_entry * ce <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
39,<S2SV_ModStart> ) ) ; * rlen = 0 ;,0
40,"<S2SV_ModStart> optlen ) { return ip_options_get_finish_ext <S2SV_ModEnd> ( net, <S2SV_ModStart> optlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,<S2SV_ModStart> ) ; } else if ( redraw_gui_only ) { redraw_later_clear ( ) ; },0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; <S2SV_ModEnd> } break ;",0
44,<S2SV_ModStart> cmpt = 0 ; cmpt -> width_ = height,0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP_MATCH__COND && flags & FLAG_LAST_MATCHED ),0
46,"<S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EINVAL ; return 0 ;",0
47,"<S2SV_ModStart> * TICK_NSEC ; unsigned long flags ; <S2SV_ModStart> -> tv_sec = div64_u64_u64 <S2SV_ModEnd> ( nsec, <S2SV_ModStart>, & rem, flags",0
48,"<S2SV_ModStart> ( auth, ""APPWEB"" <S2SV_ModEnd>, & tok <S2SV_ModStart> ( userToID ( userToID ( userToID ( userToID ( user ) ) <S2SV_ModEnd> ) )!=",0
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ;,0
50,<S2SV_ModStart> indexes ) ; unsigned long long <S2SV_ModEnd> export_index_table [ indexes,0
51,"<S2SV_ModStart> -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
53,<S2SV_ModStart> opt -> protocol && c -> opt -> option. client,0
54,<S2SV_ModStart> ; if ( cmac == NULL ||,0
55,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ; image -> <S2SV_ModEnd> columns = ReadBlobLSBShort <S2SV_ModStart> ; image -> <S2SV_ModEnd> rows = ReadBlobLSBShort,0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,<S2SV_ModStart> seqlock ) ; if (! state -> open_flags ) return ;,0
59,"<S2SV_ModStart> = ""/etc"" ; char * tmp_file = NULL ; <S2SV_ModStart> ) ) ; tmp_file = fdopen ( ""/etc/tmp"", ""w"" ) ; if (! tmp_file ) { err ( EXIT_FAILURE, _ ( ""failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
60,<S2SV_ModStart> ; ret -> num_ps_in_channels = ps_sps -> i1_num_channels ; ret ->,0
61,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } } <S2SV_null>,0
62,"<S2SV_ModStart> mi_col ) { <S2SV_ModEnd> setup_pred_plane ( & <S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; }",0
63,<S2SV_ModStart> args ) { if ( ctx -> invert_tile_order == 0 ) return VPX_CODEC_ERR_INVALID_ARG ;,0
64,<S2SV_ModStart> ) get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> char * str <S2SV_ModStart> ; mod = str_to_c_ast <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, & cf, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature",0
67,<S2SV_ModStart> * c = ( object -> child )? object -> child : object -> next <S2SV_ModEnd> ; while (,0
68,"<S2SV_ModStart> size ) ; if (! px -> ft ) { g_warning ( ""Could <S2SV_blank> not <S2SV_blank> send <S2SV_blank> start <S2SV_blank> to <S2SV_blank> send <S2SV_blank> finish <S2SV_blank> the <S2SV_blank> client"" ) ; return FALSE ; }",0
69,"<S2SV_ModStart>, val_l ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
70,"<S2SV_ModStart> { # ifdef GIT_WIN32 <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1""",0
71,<S2SV_ModStart> int i ; uint16_t <S2SV_ModEnd> * const buffers,0
72,<S2SV_ModStart> = 0 ; int err ; <S2SV_ModStart> ; free : err = - EINVAL ; <S2SV_ModStart> ; free : if ( err ),0
73,"<S2SV_ModStart> ) ) ; vpx_memmove <S2SV_ModEnd> ( sortlist,",0
74,<S2SV_ModStart> user ) { u32 refcount = 0 ; <S2SV_ModStart> free_user ) ; if ( refcount ) free_user ( refcount ) ;,0
75,<S2SV_ModStart> ( cursor -> ns_prefix <S2SV_ModEnd> ) + 1,0
76,"<S2SV_ModStart> ( n, 3 <S2SV_ModEnd> ) == ASYNC <S2SV_ModStart> ( n, 3 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 3 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> = NULL ; dst_state -> curframe = NULL ; <S2SV_ModStart> = dst ; dst_state -> curframe = NULL ;,0
78,"<S2SV_ModStart> * * mi_8x8 <S2SV_ModEnd> ) { const <S2SV_ModStart> -> mode, mi_8x8 <S2SV_ModEnd>, get_y_mode_probs ( <S2SV_ModStart>, above_mi, mi_8x8 <S2SV_ModEnd> ) ) ;",0
79,<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG,0
80,<S2SV_ModStart> ) ) { ND_ASSERT ( ndo -> ndo_snapend == 0 ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> ] ; } FLOAT32 temp = interp_window_coeff [ k ] ; FLOAT32 temp = interp_window_coeff [ k ] ; FLOAT32 temp = interp_window_coeff [ k ] ; temp = interp_window_coeff [ k ] ; temp = interp_window_coeff [ k ] ; temp = interp_window_coeff [ k ] ; temp = interp_window_coeff [ k ] ; temp = interp_window_coeff [ k ] ; temp = interp_window_coeff [ k ] ;,0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,"<S2SV_ModStart> bfqq ) { struct bfq_bfqq_timer * timer = bfqq -> timer ; <S2SV_ModStart> long flags ; if (! timer ) return ; timer -> timer_timer_cnt = timer -> timer_cnt ; <S2SV_ModStart> bfqq ) ; <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> bfqq_expire ( bfqd -> timer_timer_cnt <S2SV_ModEnd>, bfqq, <S2SV_ModStart> reason ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
86,<S2SV_ModStart> ) ) ; free ( string ) ;,0
87,<S2SV_ModStart> regs ) ; if ( regs -> flags & PF_EXEC_ABORT ) return - EINVAL ;,0
88,<S2SV_ModStart> + x > origDataLength <S2SV_ModEnd> || extraPtr + <S2SV_ModStart> + y > origDataLength <S2SV_ModEnd> ) { PyMem_Free,0
89,"<S2SV_ModStart> np -> tclass, fl6 -> ip6_uid",0
90,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) || ( image -> magic == 0 ) ),0
91,<S2SV_ModStart> data ) { ctx -> data = NULL ;,0
92,"<S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> ( new_size > ( <S2SV_ModStart> self -> memo_size ) <S2SV_ModStart> memo_new, PyObject *, new_size ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; i < ( <S2SV_ModStart> self -> memo_size )",0
93,"<S2SV_ModStart> ( wb, delta_q < 0? delta_q : 0 <S2SV_ModEnd> ) ; }",0
94,<S2SV_ModStart>. as_int ; if ( near_sadidx [ 0 ]. as_int!= 0 ) { near_sadidx [ 0 ]. as_int = 0 ; near_sadidx [ 1 ]. as_int = 0 ; near_sadidx [ 2 ]. as_int = 0 ; near_sadidx [ 2 ]. as_int = 0 ; },0
95,"<S2SV_ModStart> * string, <S2SV_ModEnd> int length ) <S2SV_ModStart> ) string, length <S2SV_ModEnd>, 1,",0
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; int ret ; ret = <S2SV_ModStart> 0 ) ; if ( ret < 0 ) return ret ; if ( ( ret = <S2SV_ModEnd> pci_emul_add_capability ( dev <S2SV_ModStart> ) ) ; return ret ;,0
98,"<S2SV_ModStart> ) ; } if ( server. server_version == server. server_version ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; }",0
99,<S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS && ctx -> g_g_v1!= ctx -> g_g_v1,0
100,<S2SV_ModStart> { cpi -> zbin_mode_boost_mask <S2SV_ModEnd> = 0 ;,0
101,<S2SV_ModStart> ( info -> si_flags & SI_SIGSEGV ) return - EPERM ; if ( info ->,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( vpx_glob_glob_ctx ( ctx ) <S2SV_ModEnd> ) ; },0
104,<S2SV_ModStart> ) return ; if (! state -> owner ) return ; <S2SV_ModStart> & FMODE_WRITE ) == 0 ) { <S2SV_ModEnd> list_move ( & <S2SV_ModStart> ) ; } },0
105,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ] == '\\0' ) || ( <S2SV_ModEnd> file -> file <S2SV_ModStart> ] == '\\0' ),0
106,"<S2SV_ModStart> 0 ; } virtqueue_push ( vq, & elem, len ) ; <S2SV_ModStart> len ) ; <S2SV_ModEnd> return len ;",0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> -> video_size ; if ( c -> video_size < 8 ) c -> video_size = 8 ;,0
109,"<S2SV_ModStart> ) ; } if ( <S2SV_ModStart>, caplen - 1 )!= 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModEnd> return ( 1",0
110,"<S2SV_ModStart> * name = fit_image_check_sig <S2SV_ModEnd> ( fit, <S2SV_ModStart>, noffset, data, size <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( ret ) { printf ( ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree\\n"" ) ; goto error ; } if ( <S2SV_ModStart>, size, size <S2SV_ModEnd>, & err_msg <S2SV_ModStart>, NULL ) <S2SV_ModEnd> ) ; return",0
111,<S2SV_ModStart> ; if (! state -> rx_kfifo ) return - ENODEV ; if (,0
112,"<S2SV_ModStart> * iface, vpx_codec_iface_t * cfg, <S2SV_ModStart> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_CAP_DECODER ) &&! ( iface -> caps & VPX_CODEC_CAP_DECODER",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> = ipcm_init_thread ( & ipc,",0
115,<S2SV_ModStart> ( flags & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) &&! <S2SV_ModStart> ( flags & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) &&!,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0 <S2SV_ModStart> resource ) ; <S2SV_ModEnd> } err =,0
117,<S2SV_ModStart> counter ) ; <S2SV_ModEnd> RESERVE_SPACE ( 28,0
118,<S2SV_ModStart> ) ; return - EINVAL,0
119,<S2SV_ModStart> 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e : case 0x1e :,0
120,"<S2SV_ModStart> ; s = osStrtok_r ( NULL, "" <S2SV_blank> \\r\\n"", & p ) ; if ( s!= NULL ) { * s = '\\0' ; error = strSafeCopy ( token, token, strlen ( token ) + 1 ) ; if ( error ) return ERROR_INVALID_REQUEST ; } <S2SV_ModEnd> if ( osStrlen",0
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_EMPTY <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK_EMPTY <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_seq ) ; ND_TCHECK_EMPTY <S2SV_ModEnd> ( ( ndo,0
122,"<S2SV_ModStart> } else { pipe_buf_get_full <S2SV_ModEnd> ( ipipe,",0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,<S2SV_ModStart> ) { const vp9_cost_t <S2SV_ModEnd> ii = tree,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> static INLINE <S2SV_ModEnd> void write_buffer_16x16 (,0
127,"<S2SV_ModStart>, buf, p <S2SV_ModEnd> + 4,",0
128,<S2SV_ModStart> ] ; int x0 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x2 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x2 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x8 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x9 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x13 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x13 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x14 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x14 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x14 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x14 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x14 <S2SV_ModEnd> = input [ <S2SV_ModStart> ] ; int x14 <S2SV_ModEnd> = input [,0
129,<S2SV_ModStart> ; # endif <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> MB_PREDICTION_MODE vp9_left_block_mode ( <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> ) ) return DC_PRED_MODE_B <S2SV_ModEnd> ; return get_y_mode <S2SV_ModStart> 3 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
131,"<S2SV_ModStart> const tile, const TileInfo * const tile, <S2SV_ModStart> -> common ; <S2SV_ModEnd> int bw, <S2SV_ModStart>, mi_8x8, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, mi_8x8 + <S2SV_ModEnd> no_pred_segcounts, t_unpred_seg_counts <S2SV_ModStart>, mi_8x8 + <S2SV_ModEnd> no_pred_segcounts, t_unpred_seg_counts <S2SV_ModStart>, mi_8x8 + <S2SV_ModEnd> no_pred_segcounts, t_unpred_seg_counts <S2SV_ModStart>, mi_8x8 + <S2SV_ModEnd> no_pred_segcounts, t_unpred_seg_counts <S2SV_ModStart>, mi_8x8 + <S2SV_ModEnd> no_pred_segcounts, t_unpred_seg_counts <S2SV_ModStart>, mi_8x8 + <S2SV_ModEnd> no_pred_segcounts, t_unpred_seg_counts",0
132,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> & p -> ai_family, & p -> ai_addrlen, & p -> ai_addrlen, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_protocol, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_addrlen, <S2SV_ModEnd> & p ->",0
135,<S2SV_ModStart> NULL ) { if ( strlen ( token ) > 0 ) { <S2SV_ModStart> ; } } },0
136,<S2SV_ModStart> pc ) { vpx_memmove <S2SV_ModEnd> ( pc ->,0
137,<S2SV_ModStart> { int ret ; if ( indx < 0 ) return - EINVAL,0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart> >> 4 ; int i ; <S2SV_ModStart> img ) ; i = 0 ; for ( i = 0 ; i < mb_rows ; ++ i ) { vp9_copy_and_extend_frame ( src, & buf -> img, i, row << 4, col << 4, 16, ( active_end - i ) << 4 ) ; }",0
140,"<S2SV_ModStart>. sharpness ; lf -> filter_level = clamp ( cm -> base_qindex, cm -> base_qindex ) ; <S2SV_ModStart>, method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) ; }",0
141,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> btif_in_execute_auth_callback ( ),0
142,<S2SV_ModStart> '!' : { unsigned,0
143,"<S2SV_ModStart> -> material = ColorCopy ( image -> material, <S2SV_ModEnd> image -> material <S2SV_ModStart> material, NULL <S2SV_ModEnd> ) ; if",0
144,<S2SV_ModStart> ; else { vpx_codec_ctx_t * ctx = ( vpx_codec_ctx_t * ) ctx ; <S2SV_ModStart> -> iface -> <S2SV_ModEnd> dec. decode <S2SV_ModStart> dec. decode = ctx ; vpx_codec_ctx_t * ctx = ( vpx_codec_ctx_t * ) ctx ; if ( ctx ) { ctx -> priv -> alg_priv = ctx ; ctx -> priv -> alg_priv = ctx ; } else { ctx -> priv -> alg_priv = ctx ; } <S2SV_ModEnd> } return SAVE_STATUS,0
145,"<S2SV_ModStart> inode * inode, bool force <S2SV_ModStart> = isofs_file_normal ; if ( force )",0
146,"<S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"" <S2SV_ModEnd>, c, <S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"" <S2SV_ModEnd>, c,",0
147,<S2SV_ModStart> self ) { Py_DECREF ( self ) ;,0
148,<S2SV_ModStart> ; a && ( <S2SV_ModStart> i < count ),0
149,"<S2SV_ModStart> ; if (! PyList_Check ( tmp ) ) { return 1 ; } if ( <S2SV_ModStart>, i, ( void * )",0
150,"<S2SV_ModStart> in ) { JAS_STREAM_MAXPUTBACK <S2SV_ModEnd> >= RAS_MAGICLEN ) <S2SV_ModStart> >= RAS_MAGICLEN ) ; jas_stream_ungetc ( in, buf, RAS_MAGICLEN <S2SV_ModEnd> ) ) < <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
151,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ) && ( msg_sys -> msg_control & MSG_CMSG_COMPAT ) <S2SV_ModEnd> ) { err,0
152,"<S2SV_ModStart> unsigned end_of_metadata = MAX ( height, height ) <S2SV_ModEnd> ; int eob <S2SV_ModStart> * bh ; bh = mp -> mp_bh [ 0 ] ; bh = mp -> mp_bh [ 0 ] ; bh = mp -> mp_bh [ 0 ] ; dblks = min ( maxlen, ptrs_per_blk - <S2SV_ModEnd> mp -> mp_list <S2SV_ModStart> mp -> mp_list <S2SV_ModEnd> ) ; if",0
153,<S2SV_ModStart> ; SHOW ( <S2SV_ModEnd> g_timebase. den,0
154,<S2SV_ModStart> } else { if ( value!= NULL ),0
155,"<S2SV_ModStart> 0 ) { SET_PERMS_STREAM ( fp, u, g, 0644 ) ; <S2SV_ModStart> 0644 ) == <S2SV_ModEnd> 0 ) {",0
156,<S2SV_ModStart> ( msix_tab_size % ( <S2SV_ModStart> 4096 == 0 ),0
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field (,1
159,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> ier &= ~ <S2SV_ModStart> ier &= ~ IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ier &= ~ IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ier &= ~ IER_LCIE <S2SV_ModEnd> ; interface ->,0
160,<S2SV_ModStart> wb ) { if (! cm -> uv_ac_delta_q ) return ;,0
161,"<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ch_id ]. fd_in <S2SV_ModEnd>, p_buf, <S2SV_ModStart>, msglen ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ) ; }",0
162,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> peerec ) )!= 0 ),0
163,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_buf_array ) ; <S2SV_ModStart> t1_buf_array ) ; <S2SV_ModEnd> } } <S2SV_null>",0
164,"<S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( x, <S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( x, <S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( x, <S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( x, <S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( x,",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( (,0
167,<S2SV_ModStart> var_off ) ; if (! src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> ; rc = - EINVAL <S2SV_ModEnd> ; goto lookup_out,0
169,"<S2SV_ModStart> th -> dest, sk -> sk_uid",0
170,<S2SV_ModStart> svc_ctx ) { unsigned <S2SV_ModStart> ; i < ( unsigned int ) <S2SV_ModStart> ; i < ( unsigned int ) <S2SV_ModStart> ; y_scale = ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ) <S2SV_ModStart> ; mse [ ( unsigned int ),0
171,<S2SV_ModStart> = new_cols ; screen -> buffers [ 0 ] = screen -> buffers [ 1 ] ; screen -> buffers [ 1 ] = screen -> buffers [ 1 ] ; screen -> buffers [ 1 ] = screen -> buffers [ 1 ] ; screen -> buffers [ 2 ] = screen -> buffers [ 2 ] ; screen -> buffers [ 2 ] = screen -> buffers [ 2 ] ;,0
172,"<S2SV_ModStart> '}' ) { if (! in_named_escape ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( literal_start",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; pixel_value = <S2SV_ModEnd> ptr -> pixel_value <S2SV_ModStart> ptr -> pixel_value <S2SV_ModEnd> ; pixel_value =,0
175,"<S2SV_ModStart> ndo, const u_char <S2SV_ModEnd> * dat ) <S2SV_ModStart> ptr = ( u_char <S2SV_ModEnd> * ) dat",0
176,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( sad_array <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( (,0
177,"<S2SV_ModStart> ) ) ; <S2SV_ModEnd> BLOCK_SIZE bsize ; <S2SV_ModStart> BLOCK_64X64 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case SOURCE_VAR_BASED_PARTITION : <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart>, mi_row, mi_col, mi_col, mi_col, mi_col <S2SV_ModEnd>, mi_col ) <S2SV_ModStart>, mi_row, mi_col, mi_col <S2SV_ModEnd>, mi_col ) <S2SV_ModStart>, mi_row, mi_col, mi_col <S2SV_ModEnd>, mi_col ) <S2SV_ModStart>, mi_col, mi_col, mi_col <S2SV_ModEnd>, mi_col ) <S2SV_ModStart>, mi_col, mi_col, mi_col <S2SV_ModEnd>, mi_col ) <S2SV_ModStart>, mi_col, mi_col, mi_col <S2SV_ModEnd>, mi_col )",0
178,"<S2SV_ModStart> ; dh = skb_header_new <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart>, int optlen, int * optlen <S2SV_ModStart> = IPOPT_END ; * optlen = optlen ;",0
180,"<S2SV_ModStart> == NULL ) { log_trace ( ""Connection <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found"", connection ) ; <S2SV_ModStart> goto error ; }",0
181,<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( d <S2SV_ModStart> ) plen += plen <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) plen += plen <S2SV_ModEnd> ; } },0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> image ) ; if ( indexes == NULL ) break ;,0
184,"<S2SV_ModStart> a ) { <S2SV_ModEnd> BN_ULONG c1, <S2SV_ModStart> ; c1, t1, c3 ; c1 = 0 <S2SV_ModEnd> ; c1 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 = <S2SV_ModStart> ; c2 = 0 <S2SV_ModEnd> ; c2 =",0
185,<S2SV_ModStart> ; if ( <S2SV_ModEnd> decoder -> color_width <S2SV_ModStart> decoder -> color_width <S2SV_ModEnd> > 0 ),0
186,"<S2SV_ModStart> ( ndo, ""unknown <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u, <S2SV_blank> vrrp <S2SV_blank> %u",0
187,<S2SV_ModStart>! ptrace_has_cap ( task ->,0
188,"<S2SV_ModStart> maxval ) { <S2SV_ModEnd> if ( jas_matrix_numrows <S2SV_ModStart> 0 ) { int i ; int j ; j <S2SV_ModEnd> ; jas_seqent_t * <S2SV_ModStart> ; j > 1 <S2SV_ModEnd> ; -- i <S2SV_ModStart> ; for ( j = 0 ; j > 1 ; -- j, ++ j, ++ data ) { v = * data ; if ( v < minval ) { * data = * data ; } else if ( v < maxval ) { * data = maxval ; } else { * data = maxval ; } } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
189,"<S2SV_ModStart> ; break ; case SEI_USER_DATA_REGISTERED_ITU_T35 : ps_parse -> s_sei_params. i4_sei_parameters_present_flags = 1 ; ihevcd_parse_display_data_sei ( ps_codec, ps_codec ) ; break ;",0
190,<S2SV_ModStart> = per_sdma_rht ; <S2SV_ModEnd> dd -> per_sdma <S2SV_ModStart> = per_sdma_credits ; <S2SV_ModEnd> } else {,0
191,"<S2SV_ModStart>, int rep_quick, int repair <S2SV_ModStart> ; int error = 0",0
192,"<S2SV_ModStart> } pairs = pq_getmsgint ( buf, 4 <S2SV_ModEnd>, 4 )",0
193,<S2SV_ModStart> val ) ; if ( var [ 0 ] == '\\0' ) { var [ 1 ] = '\\0' ; var [ 2 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; var [ 3 ] = '\\0' ; },0
194,"<S2SV_ModStart> ; } } if ( 0!= clen ) { agoo_log_cat ( & p, 400, __LINE__ ) ; }",0
195,<S2SV_ModStart> } else { int16_t <S2SV_ModEnd> out [ 256,0
196,"<S2SV_ModStart>, app, ""export-desktop-file"" <S2SV_ModEnd>, app,",0
197,"<S2SV_ModStart> ( filename ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( '\\n', filename <S2SV_ModEnd> ) ; }",0
198,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
199,"<S2SV_ModStart>, NULL ) ; ctxt -> input -> state = NULL",0
200,"<S2SV_ModStart> S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
201,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0,0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( hstats ) ; <S2SV_ModStart> return NULL ; },0
203,<S2SV_ModStart> -> y = <S2SV_ModEnd> MaxF ( 0.0f <S2SV_ModStart> -> z ) <S2SV_ModEnd> ; } <S2SV_null>,0
204,<S2SV_ModStart> ; rec -> sasl_username_length = src -> sasl_username_length ; rec ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } if ( cm -> gf_active_flags & VP8_FRAME_FLAG_ACTIVE ) { <S2SV_ModStart> ) ) ; },0
206,"<S2SV_ModStart> i, tcount <S2SV_ModEnd>, o,",0
207,"<S2SV_ModStart> ( share, ""Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> share <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> recreate <S2SV_blank> %s"" <S2SV_ModEnd>, filename,",0
208,"<S2SV_ModStart> hex ; CURLcode res ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! res ) return NULL ; res = curl_convert_from_network ( handle, & in, 1 ) ; if ( res <S2SV_ModEnd> ) { free <S2SV_ModStart> ns ) ; free ( ns ) ;",0
209,<S2SV_ModStart> 4 ) ; r_strbuf_fini ( & <S2SV_ModEnd> op -> addr <S2SV_ModStart> op -> addr <S2SV_ModEnd> ) ; r_strbuf_fini,0
210,<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
211,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) { res = <S2SV_ModEnd> match ( prog <S2SV_ModStart> sub ) ; if ( res == 0 ) res = 1 ; } return res ;,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ( i + packets <S2SV_ModEnd> ) ; },0
214,<S2SV_ModStart> open_list ) { spin_lock_irqsave <S2SV_ModEnd> ( & slave_active_lock <S2SV_ModStart> slave_active_lock ) ; list_del_init ( & slave -> active_list ) ; spin_unlock_irqrestore <S2SV_ModEnd> ( & slave_active_lock <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> list_move_tail ( &,0
215,"<S2SV_ModStart> -> u4_bitoffset = le16_to_cpu ( <S2SV_ModStart> ps_dec ) ; else { <S2SV_ModEnd> ps_dec -> ps_bitstrm <S2SV_ModStart> -> u4_ofst += le16_to_cpu ( <S2SV_ModStart> u4_bitstrm_ofst, pu4_bitstrm_buf ) ; } <S2SV_ModEnd> } i_temp =",0
216,<S2SV_ModStart> -> originalHeight ; if ( info -> rasterSize > info -> rasterSize ) { info -> rasterSize = info -> rasterSize ; },0
217,<S2SV_ModStart> user ) ) { ret = ret_error ; <S2SV_ModStart> return ret_error ; },0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size, <S2SV_ModStart> msg_flags, timeo <S2SV_ModEnd> ) ; if <S2SV_ModStart> break ; } <S2SV_ModEnd> ret = timeo <S2SV_ModStart> break ; } <S2SV_ModEnd> ret = rds_send_msg <S2SV_ModStart>, rds_send_msg, <S2SV_ModEnd> & inc -> <S2SV_ModStart> & inc -> <S2SV_ModEnd> i_conn -> c_faddr <S2SV_ModStart> i_conn -> c_faddr <S2SV_ModEnd> ) ; ret <S2SV_ModStart> break ; } <S2SV_ModEnd> ret = 0",0
220,<S2SV_ModStart> += 9 ; if ( * t && <S2SV_ModStart> &&! isspace ( * t ) ) t ++ ; else if ( * t &&! isspace,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == 0 ) { <S2SV_ModStart> read_set, NULL ) ; } else result = BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout""",0
222,<S2SV_ModStart> msgnum ) ; if (! <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> >= MAX_MSIX_TABLE_ENTRIES ) ) return - 1 ; assert ( <S2SV_ModEnd> ( barnum >= <S2SV_ModStart> >= PCIR_MAX_BAR_0 ) ) ; if (! <S2SV_ModEnd> ( barsix >= <S2SV_ModStart> ( barsize >= ( int ),0
223,"<S2SV_ModStart> max ) { return vp9_rb_read_unsigned_bits ( rb, max ) <S2SV_ModEnd> ; } <S2SV_null>",0
224,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> { if ( <S2SV_ModEnd> ctx -> common <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ; printval = <S2SV_ModEnd> inf ( im <S2SV_ModStart> ; printval = <S2SV_ModEnd> inf ( im,0
227,<S2SV_ModStart> ) b ; assert ( buf1 -> size <= buf2 -> size ) ; assert ( buf2 -> size <= buf2 -> size ) ; assert ( buf1 -> size <= buf2 -> size ) ; assert ( buf1 -> size <= buf2 -> size ) ; assert ( buf1 -> size <= buf2 -> size ) ; assert ( buf1 -> size <= buf2 -> size ) ; assert ( buf1 -> size <= buf2 -> size ) ; assert ( buf1 -> size <= buf2 -> size ) ;,0
228,<S2SV_ModStart> = NULL ; unsigned int pagesize = PAGE_SIZE << PAGE_SHIFT ; <S2SV_ModStart> + size ; if ( pagesize > PAGE_SIZE ) pagesize = PAGE_SIZE << PAGE_SHIFT ; <S2SV_ModStart> if ( ( pagesize <S2SV_ModEnd> <= ( PAGE_SIZE <S2SV_ModStart> PAGE_ALLOC_COSTLY_ORDER ) ) pagesize = PAGE_SIZE << PAGE_SHIFT ; else pagesize = PAGE_SIZE << PAGE_SHIFT ; if ( pagesize > PAGE_ALLOC_COSTLY_ORDER ) pagesize = PAGE_SIZE << PAGE_SHIFT ; else pagesize = PAGE_SIZE << PAGE_SHIFT ; <S2SV_ModEnd> info = kmalloc <S2SV_ModStart> = kmalloc ( pagesize <S2SV_ModEnd> ) ; if,0
229,<S2SV_ModStart> * ax25 ; int ret ; <S2SV_ModStart> case SOCK_DGRAM : ret = <S2SV_ModEnd> - EAFNOSUPPORT ; <S2SV_ModStart> - EAFNOSUPPORT ; goto out ; <S2SV_ModStart> ; default : ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
230,"<S2SV_ModStart>, regs, address ) ; if (! fault ) goto no_context ; down_read ( & mm -> mmap_sem ) ; vma = find_vma ( mm, address ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; show_regs ( regs ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
231,<S2SV_ModStart> b ) ; ( void ) button_set_mask ( b ) ;,0
232,<S2SV_ModStart> ( ) ; errors += test_curl_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 3 ) ) == RARROW ) return NULL ; <S2SV_ModStart> return FunctionDef ( c, <S2SV_ModStart>, body, c -> c_arena, <S2SV_ModStart> c -> c_arena, is_async",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 1 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 1 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 1 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 1 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 1 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> + 1 ) ),0
237,<S2SV_ModStart> ) ) ; free ( array ) ;,0
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENOMEM ;,0
239,<S2SV_ModStart> psf -> headend && position > psf -> headend <S2SV_ModStart> psf -> headend - position <S2SV_ModStart> psf -> headend - position <S2SV_ModStart> psf -> headend - position <S2SV_ModStart> psf -> headend - position,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ctxt_models [ ps_cabac -> u4_ofst ]. u4_ofst = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> ; } } if ( off > ctx -> size ) { <S2SV_ModStart> -> indent ; },0
242,<S2SV_ModStart> event ) { perf_event_group_times ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> dbg_color_ref_frame_flag <S2SV_ModStart> -> dbg_color_ref_frame_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> = 0 ; ND_TCHECK2 <S2SV_ModEnd> ( * tptr,0
245,<S2SV_ModStart> { # if <S2SV_ModEnd> CONFIG_RUNTIME_CPU_DETECT if ( <S2SV_ModStart> ; # if <S2SV_ModEnd> CONFIG_RUNTIME_CPU_DETECT if (,0
246,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0,0
247,<S2SV_ModStart> -> synth_size = 8 * ( <S2SV_ModStart> sfb * 8 ),0
248,"<S2SV_ModStart> ; const lua_authz_provider_spec const <S2SV_ModStart> int i ; ap_lua_push_lua_request ( L, prov_spec <S2SV_ModEnd> ) ; spec <S2SV_ModStart> ) ; } <S2SV_ModEnd> return result ;",0
249,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> & value [ 0 ] )!= 0 <S2SV_ModEnd> ) { if,0
250,<S2SV_ModStart> ; if ( proto_end - url >= 0 ) return 0 ; if (,0
251,"<S2SV_ModStart> ; end = fdt32_to_name <S2SV_ModEnd> ( fdt,",0
252,"<S2SV_ModStart> ( REDIS_OK, ""SIGTERM <S2SV_blank> received <S2SV_blank> the <S2SV_blank> server <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> been <S2SV_blank> closed <S2SV_blank> on <S2SV_blank> the <S2SV_blank> server <S2SV_blank> %d"" <S2SV_ModEnd>, server.",0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> j ] ; v [ j ] = v [ j ] ; },0
255,"<S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r * BzK, r, r * BzK, r * BzK, r ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c\\n"", r * BzK, r, r * BzK, r ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> c\\n"", r * BzK, r, r, r, - r, - r,",0
256,<S2SV_ModStart> { if ( <S2SV_ModEnd> check_scale_factors ( other_w,0
257,<S2SV_ModStart> = 0 ; OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
258,"<S2SV_ModStart> -> pktoptions ; if ( skb ) { skb = ip6_make_pktoptions ( sk, NULL ) ; if (! skb ) return - ENOPROTOOPT ; }",0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_pf_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_pf_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_pf_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_pf_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_pf_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
260,"<S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total < 4 ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_sse_total ) ; return ; }",0
261,"<S2SV_ModStart> { dst_name = ( char * ) <S2SV_ModStart> ( out, ""%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",0
262,"<S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } # if ( LINUX_VERSION_CODE >= KERNEL_VERSION ( 4, 11, 0 ) ) <S2SV_ModStart> ) ) ; # else TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_REG_CIDER ) ) ; # endif",0
263,"<S2SV_ModStart> skip } ; if ( x -> mbmi. enabled ) { vp9_encode_intra_block_interrupt ( xd, x -> mbmi. enabled, x -> mbmi. enabled ) ; }",0
264,"<S2SV_ModStart> ) ) { pr_err ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; pr_err ( ""## <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; pr_err ( ""## <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> ) ) { pr_err ( ""Invalid <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> ) ) { pr_err ( ""Invalid <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> ) ) { pr_err ( ""Invalid <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> ) ) { pr_err ( ""Invalid <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> ) ) { pr_err ( ""Invalid <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>,",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> rc -> baseline_gf_interval <S2SV_ModEnd> ) / (,0
267,"<S2SV_ModStart> i ], ""--allow-untrusted"" <S2SV_ModEnd> ) == 0",0
268,<S2SV_ModStart> { Py_INCREF ( ( void * ),0
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; memcpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> ( buff, ""/"", sizeof ( buff ) - 1 ) ; # ifdef __WIN__ memcpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else memcpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> ( buff, ""/"", sizeof ( buff ) - 1 ) ; # endif <S2SV_ModEnd> # ifdef __WIN__ <S2SV_ModStart> ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else memcpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> ( buff, ""/"", sizeof ( buff ) - 1 ) ; <S2SV_ModEnd> buff [ sizeof",0
271,"<S2SV_ModStart> decrypt_cb ) { unsigned char <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( unsigned char <S2SV_ModEnd> ) ( data_end <S2SV_ModStart> > 10 ) { <S2SV_ModStart> n = 10 ; } <S2SV_ModEnd> pbi -> decrypt_cb <S2SV_ModStart> ( pbi -> decrypt_state <S2SV_ModEnd>, data, <S2SV_ModStart>, data, ( unsigned char * ) <S2SV_ModStart>, n ) ) ; clear = clear_buffer",0
272,<S2SV_ModStart> getprivs_ret ret ; const char * errmsg = NULL ; <S2SV_ModStart> errmsg ) ; errmsg = NULL ; <S2SV_ModStart> client_name ) ; errmsg = NULL ; <S2SV_ModStart> service_name ) ; errmsg = NULL ;,0
273,"<S2SV_ModStart> int zero_mv_sse = INT_MAX <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = INT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif",0
274,<S2SV_ModStart> goto error ; if ( h -> writable ) { <S2SV_ModStart>. st_size ; <S2SV_ModEnd> h -> addr <S2SV_ModStart> size ) ; h -> size = statbuf. st_size ; } else { h -> size = statbuf. st_size ; },0
275,"<S2SV_ModStart> UWORD8 u1_profile_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> WORD32 ret ; <S2SV_ModEnd> WORD32 ret ; <S2SV_ModStart> ret ; } <S2SV_ModEnd> return i ;",0
276,<S2SV_ModStart> == NULL ) { ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; },0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart> ; if ( TIFFTAG_BITSPERSAMPLE <S2SV_ModEnd> ) { TIFFGetFieldDefaulted <S2SV_ModStart> ; if ( TIFFTAG_BITSPERSAMPLE <S2SV_ModEnd> ) { TIFFGetFieldDefaulted <S2SV_ModStart> ; if ( TIFFTAG_BITSPERSAMPLE <S2SV_ModEnd> ) { TIFFGetFieldDefaulted <S2SV_ModStart> ; if ( TIFFTAG_BITSPERSAMPLE <S2SV_ModEnd> ) { TIFFGetFieldDefaulted <S2SV_ModStart> ; if ( TIFFTAG_BITSPERSAMPLE <S2SV_ModEnd> ) { TIFFGetFieldDefaulted <S2SV_ModStart> ; if ( TIFFTAG_BITSPERSAMPLE <S2SV_ModEnd> ) { TIFFGetFieldDefaulted",0
278,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return ( ARCHIVE_FAILED <S2SV_ModStart> ) ) { <S2SV_ModEnd> return ( ARCHIVE_FAILED <S2SV_ModStart> ) ) { <S2SV_ModEnd> return ( ARCHIVE_FAILED <S2SV_ModStart> ) ) { <S2SV_ModEnd> return ( ARCHIVE_EXTRACT_UNLINK <S2SV_ModStart> ) ) { <S2SV_ModEnd> return ( 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> return ( 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> return ( 0,0
279,<S2SV_ModStart> ) { struct <S2SV_ModEnd> kernel_lb_addr loc ; <S2SV_ModStart> indirectICB. extLength <S2SV_ModEnd> ) { if,0
280,"<S2SV_ModStart> tx_size ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; if ( filter_level ) { return ; } vpx_memset ( <S2SV_ModEnd> lfm -> lfl_y <S2SV_ModStart> ], filter_level <S2SV_ModEnd> ) ; index",0
281,<S2SV_ModStart> mq_ops ) { if ( q -> mq_ops ) blk_queue_mq_stop_request ( q ) ;,0
282,<S2SV_ModStart> uint8_t val ; if (! vdev -> config ) return ( uint32_t ) - 1 ; <S2SV_ModStart> vdev -> config ) ; vdev -> config_len = sizeof ( val <S2SV_ModStart> ) ) ) { vdev -> config_len = <S2SV_ModEnd> vdev -> config_len <S2SV_ModStart> vdev -> config_len ; vdev -> config_len = sizeof ( val ) ; } <S2SV_ModEnd> val = ldub_p,0
283,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ; } } if ( j == n_key_data ) { k5free ( key_data ) ; k5free ( key_data ) ; k5free ( ret ) ; k5free ( ret ) ; },0
286,"<S2SV_ModStart> ; memcpy ( sbuf <S2SV_ModEnd> + 1,",0
287,<S2SV_ModStart> ch ) ; if ( ch -> flags & I40E_FLAG_HW_RX_FLAG_SCHED_MASK ) ch -> flags |= I40E_FLAG_HW_RX_FLAG_SCHED_MASK ;,0
288,<S2SV_ModStart> ; } } return 0 ;,0
289,<S2SV_ModStart> uchar * dataptr = NULL,0
290,<S2SV_ModStart> -> mb_col ; <S2SV_ModEnd> for ( i,0
291,<S2SV_ModStart> ) ; } else if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return NULL ; },0
292,<S2SV_ModStart> char * end ; assert ( len <= 0 ),0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> ], visbuf <S2SV_ModEnd> [ 2048 ] <S2SV_ModStart> [ 2048 ] <S2SV_ModEnd> ; char * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> = umask ( 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( <S2SV_ModEnd>! tflag ) <S2SV_ModStart>! tflag ) <S2SV_ModEnd> setimes = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if (! <S2SV_ModStart>! tflag ) <S2SV_ModEnd> setimes = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if (!",0
294,"<S2SV_ModStart> test ) { int i ; <S2SV_ModStart> w, word >= <S2SV_ModEnd> test, 1 <S2SV_ModStart> ) ; return i <S2SV_ModEnd> ; } <S2SV_null>",0
295,<S2SV_ModStart> -> mip_fb_idx = 0 <S2SV_ModEnd> ; oci ->,0
296,<S2SV_ModStart> ) return ; vpx_memmove <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; vpx_memmove <S2SV_ModEnd> ( & t_left,0
297,<S2SV_ModStart> i2_mb_skip_run ) { if ( i2_cur_mb_addr >= MAX_MB_N_MB_FRAME_SIZE ) { i2_cur_mb_addr = MAX_MB_N_MB_FRAME_SIZE ; } else { <S2SV_ModStart> i2_mb_skip_run ) ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> = nanosleep ( ( unsigned long ),0
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; bits_per_pixel = <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; bits_per_pixel = <S2SV_ModStart> [ 256 ] <S2SV_ModEnd> ; bits_per_pixel =",0
301,"<S2SV_ModStart> value ) { char * hostname = <S2SV_ModEnd> sclone ( value <S2SV_ModStart> ( value ) ; char * endpoint = strchr ( value, '\\0' ) ; if ( endpoint ) { * endpoint = '\\0' ; } <S2SV_ModEnd> httpSetRouteName ( state <S2SV_ModStart> -> route, hostname <S2SV_ModEnd> ) ; state",0
302,"<S2SV_ModStart> ),. match_preparse = type -> match_preparse,. <S2SV_ModStart> = type -> match_preparse,. match_preparse = description,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_TYPE = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_TYPE,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_TYPE,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. lookup_type = KEYRING_SEARCH_",0
303,<S2SV_ModStart> ntime ) { ret = true ;,0
304,"<S2SV_ModStart> ssize_t ret = send <S2SV_ModEnd> ( fd, <S2SV_ModStart> ( fd, ( uint8_t * ) & <S2SV_ModStart> ; default : LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"" <S2SV_ModEnd>, __func__, <S2SV_ModStart>, fd, ( uint8_t * ) & <S2SV_ModStart> ; } } LOG_DEBUG ( ""Sent <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> %d <S2SV_blank> bytes"", ret, ret ) ;",0
305,"<S2SV_ModStart> __dict__ ) ; if (! _PyObject_IsAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, <S2SV_ModEnd> dict ) ) <S2SV_ModStart> return Py_BuildValue ( ""O()"" <S2SV_ModEnd>, Py_TYPE (",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> arg ) ; return perf_event_period_nolock <S2SV_ModEnd> ( event, <S2SV_ModStart> arg ) ; <S2SV_ModEnd> } case PERF_EVENT_IOC_SET_OUTPUT",0
308,<S2SV_ModStart> MB_PREDICTION_MODE y_mode ) { if ( cm -> fc. uv_mode_prob [ y_mode ] [ y_mode ]!= 0 ) return 0 ; <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> -> fc. uv_mode_prob [ y_mode ] [ y_mode ] ; if (! cm -> fc. uv_mode_prob [ y_mode ] [ y_mode ] ) return 0 ; <S2SV_ModEnd> cm -> counts <S2SV_ModStart> [ y_mode ] [ y_mode ] = 0 <S2SV_ModEnd> ; return uv_mode,0
309,<S2SV_ModStart>. digest_size = ( unsigned int ),0
310,"<S2SV_ModStart> iv ) ; if ( EVP_CIPHER_CTX_get_encryption_key ( ctx ) == EVP_MD_E_KEY_PTR ( iv ) ) ossl_raise ( eCipherError, ""Cipher <S2SV_blank> pkcs5 <S2SV_blank> keyivgen <S2SV_blank> failed"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> payloadlen ) ; if ( nghttp2_session_discard ( session ) ) { <S2SV_ModStart> payloadlen ) ; },0
313,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> t ] ; int b_len = 0 ; <S2SV_ModStart> ) ; } b_len = p -> len ; <S2SV_ModStart>, bb, b_len <S2SV_ModEnd> ) ; i <S2SV_ModStart> + bb ] ; b_len += b_len",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) )",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
317,"<S2SV_ModStart> * typedata ; ND_TCHECK_ADD_PREFIX <S2SV_ModEnd> ( * ext <S2SV_ModStart> ext ) ; ND_TCHECK_ADD_PREFIX <S2SV_ModEnd> ( & id <S2SV_ModStart> tpay ), ( uint8_t * ) <S2SV_ModStart> critical ) ; ND_TCHECK_ADD_PREFIX <S2SV_ModEnd> ( & id <S2SV_ModStart> tpay ), ( uint8_t * ) <S2SV_ModStart> critical ) ; ND_TCHECK_ADD_PREFIX <S2SV_ModEnd> ( & id <S2SV_ModStart> tpay ), ( uint8_t * ) <S2SV_ModStart> critical ) ; ND_TCHECK_ADD_PREFIX <S2SV_ModEnd> ( & id <S2SV_ModStart> tpay ), ( uint8_t * ) <S2SV_ModStart> critical ) ; ND_TCHECK_ADD_PREFIX <S2SV_ModEnd> ( & id",0
318,<S2SV_ModStart> -> height = atoi <S2SV_ModEnd> ( jas_tvparser_getval (,0
319,<S2SV_ModStart> urb ) ; usb_anchor_urb ( urb ) ;,0
320,"<S2SV_ModStart>, xt0_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0, xt2_0 <S2SV_ModEnd> ; WORD32 x_0 <S2SV_ModStart>, mul_10, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0, xt2_0 <S2SV_ModEnd> ; } }",0
321,<S2SV_ModStart> mntent ) { struct mount_entry * entry = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> mntent -> mnt_dir ; if ( entry -> flags & PF_MNTENTRY_FLAGS_READY ) return 0 ; return entry -> flags & PF_MNTENTRY_FLAGS_READY ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
322,"<S2SV_ModStart> -> display_height ; const int scaling_active = cm -> display_width - 1 ; <S2SV_ModStart> ( wb, scaling_active, 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( wb, scaling_active, 1 <S2SV_ModEnd> ) ; }",0
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env,",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> prepare_retval ; MYSQL_BIND <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; # <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; #,0
325,<S2SV_ModStart> need *= 4 ; need += need,0
326,<S2SV_ModStart> = 0.0000001 ; <S2SV_ModEnd> if (! <S2SV_ModStart> < 0 ) { <S2SV_ModStart> len ) ; } else { <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; },0
327,<S2SV_ModStart> ; if (! crng_init ( <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd> ) ; }",0
329,<S2SV_ModStart> ) ) ; free ( array ) ;,0
330,<S2SV_ModStart> options ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } svc_ctx -> const si = get_svc_internal ( svc_ctx ) ; svc_ctx ->,0
331,"<S2SV_ModStart> int i, vp9_tree <S2SV_ModEnd> tree, unsigned",0
332,"<S2SV_ModStart> s2 ) { const char * s1_str ; const char * s2_str ; s1_str = ( const char * ) s1 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; s2_str = ( const char * ) s2 ; <S2SV_ModStart> return pure_memcmp ( s1_str <S2SV_ModEnd>, s2,",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULT <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULT <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULT <S2SV_ModEnd>, NULL, <S2SV_ModStart> { print_ssl_options ( CMD_PRINT_DEFAULT <S2SV_ModEnd> ) ; return",0
334,<S2SV_ModStart> { Py_INCREF ( Py_None <S2SV_ModEnd> ) ; return,0
335,<S2SV_ModStart> ; self_delete = TRUE <S2SV_ModEnd> ; self_delete =,0
336,"<S2SV_ModStart> ps_dec -> pu1_input_buffer, u4_size",0
337,<S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,<S2SV_ModStart> == 1 ) { <S2SV_ModStart> ) break ; },0
339,<S2SV_ModStart> ; } } if ( term. csi_argc!= 0 ) { <S2SV_ModStart> ) ; } },0
340,<S2SV_ModStart> < cols + 16 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart>. last_width = ( u16 ),0
342,"<S2SV_ModStart> ) ) { vp9_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> word - 16 <S2SV_ModEnd> ) ; }",0
343,<S2SV_ModStart> ; ret -> num_ps_in_chars = ps_sps -> i1_num_ps_in_chars ; ret ->,0
344,<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { psf -> rwf_endian = SF_ENDIAN_BIG ; },0
345,<S2SV_ModStart> ; if ( ( <S2SV_ModStart>. length ) ),0
346,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } _exit (,0
347,<S2SV_ModStart> BLOCK_8X8 : return vp9_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vp9_mse16x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vp9_mse16x16 <S2SV_ModEnd> ; } },0
348,"<S2SV_ModStart> ) ; } if (! enc9 -> pkt_enc ) { krb5_error_code ( ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_KEY_PKINIT_FAILURE, ERR_PENC_",0
349,"<S2SV_ModStart> ; if ( vb ) { dev_err ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if (",0
350,<S2SV_ModStart> size ) { if ( size == 0 ) return NULL ;,0
351,<S2SV_ModStart> == sip && ( <S2SV_ModStart> rxent -> serviceId!= 0 ),0
352,"<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> memcpy ( adhoc_start <S2SV_ModStart> adhoc_start -> ssid_len <S2SV_ModEnd> ) ; mwifiex_dbg <S2SV_ModStart>, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart> adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, adhoc_start -> ssid_len <S2SV_ModEnd> ) ; memcpy",0
353,<S2SV_ModStart> -> i_flags & ( <S2SV_ModStart> [ i ] & 0xFFFF ),0
354,<S2SV_ModStart> ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. <S2SV_ModStart> ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RETRANS_TO <S2SV_ModEnd> ; rfc. <S2SV_ModStart> ; rfc. max_pdu_size = L2CAP_DEFAULT_MAX_RX_APDU <S2SV_ModEnd> ; l2cap_add_conf_opt (,0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, r, TEMP_FAILURE_RETRY_WAITALL ) ) ; TEMP_FAILURE_RETRY ( ret ) <S2SV_ModEnd> ; while (",0
356,<S2SV_ModStart> ps_cur_slice -> nal_unit_type == <S2SV_ModEnd> 1 ) {,0
357,<S2SV_ModStart> tok ) ; if ( pair == NULL ) { return ; },0
358,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> rcu_read_lock ( ) <S2SV_ModStart> ( state, nfsi -> stateid, nfsi -> stateid, open_flags, open_flags <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> pd ) ; int64_t dist ; <S2SV_ModStart> int rate ; <S2SV_ModEnd> square_error = sse,0
361,"<S2SV_ModStart> pmd ) ) { <S2SV_ModStart> vec ) ; } else { <S2SV_ModEnd> mincore_pte_range ( vma <S2SV_ModStart>, vec ) ; } <S2SV_ModEnd> vec += (",0
362,<S2SV_ModStart> * ret_username = strdup <S2SV_ModEnd> ( * ret_username,0
363,<S2SV_ModStart> seg ) { if (! seg -> tree_probs ) return 0 ;,0
364,"<S2SV_ModStart> i ) { vpx_memmove <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart>, src_ptr1, extend_right, linesize ) ; vpx_memmove <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart>, src_ptr2, extend_right, linesize ) ; vpx_memmove <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> void kgdb_hw_overflow_handler ( struct perf_event_context * ctx, <S2SV_ModStart> = current ; <S2SV_ModEnd> for ( i <S2SV_ModStart> i ) ; kgdb_hw_overflow_handler ( ctx, event, nmi, & tsk -> thread. debugreg6 ) ;",0
366,"<S2SV_ModStart> depth ++ ; ND_ASSERT ( buf2!= NULL ) ; <S2SV_ModStart> maxbuf, unicodestr, buf2",0
367,"<S2SV_ModStart> length ) ; if ( <S2SV_ModStart>, TXQCR_SDA )!= TXQCR_SDA ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModEnd> ksz8851SetBit ( interface <S2SV_ModStart>, TXQCR_METFE )!= TXQCR_SDA ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModEnd> n = ksz8851ReadReg <S2SV_ModStart>, TXMIR_TXMA_MASK )!= TXQCR_SDA ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModEnd> if ( n",0
368,<S2SV_ModStart> ; # endif mono_finalizer_unlock ( ) ; <S2SV_ModStart> ; } } <S2SV_ModEnd> SetEvent ( pending_done_event,0
369,"<S2SV_ModStart> x_0 ++ ; <S2SV_ModEnd> WORD32 n00, <S2SV_ModStart> n30, n30 <S2SV_ModEnd> ; n21, <S2SV_ModStart> n21, n31 <S2SV_ModEnd> ; n21, <S2SV_ModStart> n21, n31 <S2SV_ModEnd> ; n21, <S2SV_ModStart> n21, n31 <S2SV_ModEnd> ; n30, <S2SV_ModStart> n21, n31 <S2SV_ModEnd> ; n30, <S2SV_ModStart> n21, n31 <S2SV_ModEnd> ; n30 = <S2SV_ModStart> n23, n31 <S2SV_ModEnd> ; n30 = <S2SV_ModStart> n23, n31 <S2SV_ModEnd> ; n30 = <S2SV_ModStart> n30, n31 <S2SV_ModEnd> ; n30 = <S2SV_ModStart> n30, n31 <S2SV_ModEnd> ; n30 = <S2SV_ModStart> n30, n31 <S2SV_ModEnd> ; n30 = <S2SV_ModStart> n30, n31 <S2SV_ModEnd> ; n30 =",0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_unstable ( pmd ) ) ) continue ; if ( unlikely ( pmd_trans_unstable ( pmd ) ) ) continue ; if ( pmd_trans_unstable ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if (,0
371,"<S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ; printf ( ""Input <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, target_width, <S2SV_ModStart> ; printf ( ""Target <S2SV_blank> size: <S2SV_blank> %dx%d, <S2SV_blank> Frames: <S2SV_blank> "" <S2SV_ModEnd>, frames,",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } return _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 <S2SV_ModEnd> ; } <S2SV_null>",0
373,"<S2SV_ModStart> = calloc ( ctx -> config. enc, <S2SV_ModStart> = calloc ( ctx -> config. enc, <S2SV_ModStart> = calloc ( ctx -> config. enc, <S2SV_ModStart>. enc = ctx -> config. enc <S2SV_ModEnd> ; } cfg <S2SV_ModStart>. enc = ctx -> config. enc <S2SV_ModEnd> ; } if",0
374,"<S2SV_ModStart> cnt_c, totfr, false",0
375,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } if (,0
376,<S2SV_ModStart> ; if (! is_inode_valid ( fe ) ) { ret = - EIO ; goto out ; } if (,0
377,"<S2SV_ModStart>, ENC28J60_REG_MIWRL, ( uint8_t ) <S2SV_ModStart>, ENC28J60_REG_MIWRH, ( uint8_t ) <S2SV_ModStart>, ENC28J60_REG_MISTAT ) <S2SV_ModEnd> )!= 0",0
378,<S2SV_ModStart> fmt ) { const,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragTestTestsTest"", DefragTestTestsTest ) ;",0
380,"<S2SV_ModStart> = object_length ; new_object. length = object_length ; <S2SV_ModStart> object_data ) { if ( object_length > 0 ) { <S2SV_ModStart> object_data, object_length ) ; } else { new_object. data = NULL ; } } <S2SV_ModEnd> } r =",0
381,<S2SV_ModStart> NULL ) { if ( token == NULL ) return ERROR_INVALID_SYNTAX ;,0
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame -> frame_size <= <S2SV_ModEnd> p_frame -> frame_size <S2SV_ModStart> p_frame -> frame_size <S2SV_ModEnd> ) { p_sys,0
384,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
385,<S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names <S2SV_ModStart> ]. len <S2SV_ModEnd> ; j ++,0
386,<S2SV_ModStart> ; act = vp8_variance16x16 <S2SV_ModEnd> ( x ->,0
387,<S2SV_ModStart> args ) { if (! data ) return VPX_CODEC_INVALID_PARAM ;,0
388,<S2SV_ModStart> ; data = ( uint8_t * ),0
389,"<S2SV_ModStart> expr_stmt ) ; ast_error ( c, ch, ""expected <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> \'%s\'"", c -> c_arena ) ; <S2SV_ModStart> ; } else if ( NCH ( deep ) == 1 ) { ast_error ( c, ch, ""expected <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> \'%s\'"", c -> c_arena ) ; return NULL ; } else",0
390,<S2SV_ModStart> c ] ; <S2SV_ModEnd> if ( absdiff <S2SV_ModStart> c ] ; <S2SV_ModEnd> } for ( <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ) <S2SV_ModStart> c ] = ( int ),0
391,"<S2SV_ModStart> -> buffer, reqPtr -> buffer,",0
392,"<S2SV_ModStart> = uregs ; struct ptrace_xtregs * ptrace = ti -> xtregs_ptrace ; <S2SV_ModStart> ; # endif if ( regs -> xtregs_cp. cp0. opt == 0 ) { ptrace_setxregs ( child, NULL ) ; return - EINVAL ; }",0
393,<S2SV_ModStart> size ) ; if ( message -> length < 0 ) { <S2SV_ModStart> -> next ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, <S2SV_ModEnd> & remote_dev ->",0
395,<S2SV_ModStart> ; if (! header ||! header ||! header <S2SV_ModEnd> ) { new_bh,0
396,<S2SV_ModStart> args ) { if (! ctx -> enabled ) return VPX_CODEC_INVALID_PARAM ;,0
397,<S2SV_ModStart> ; if ( ( <S2SV_ModStart>. height ) ),0
398,"<S2SV_ModStart>, 0, PERF_FORMAT_COUNT ( task_event ) <S2SV_ModEnd> ) ; if",0
399,"<S2SV_ModStart> = 2048 ; if ( <S2SV_ModStart>, 1 ) ) { return ( MagickFalse ) ; } <S2SV_ModEnd> if ( imbuf",0
400,"<S2SV_ModStart> args ) { vpx_mem_copy_reference ( ctx, ctx, <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> vpx_ref_frame_t * ) <S2SV_ModEnd> ) ; }",0
401,<S2SV_ModStart> i2_mb_skip_run ) { if ( i2_cur_mb_addr >= MAX_MB_N_MB_FRAME_SIZE ) { i2_cur_mb_addr = MAX_MB_N_MB_FRAME_SIZE ; } else { <S2SV_ModStart> i2_mb_skip_run ) ; },0
402,"<S2SV_ModStart>, u4_y_offset ; # ifdef __APPLE__ <S2SV_ModStart> ps_dec ) ; # else impeg2d_dec_p_mb_params ( ps_dec ) ; # endif",0
403,<S2SV_ModStart> -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf <S2SV_ModEnd> ; if (,0
404,"<S2SV_ModStart> n ) { <S2SV_ModEnd> jas_seqent_t * data <S2SV_ModStart> jas_seqent_t * data ; jas_seqent_t * rowstep <S2SV_ModStart> 0 ) { <S2SV_ModEnd> for ( i <S2SV_ModStart> 0 ] ; j > 0 ; -- j, ++ <S2SV_ModEnd> rowstep ) { <S2SV_ModStart> rowstep ) { <S2SV_ModEnd> j > 0 <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
405,<S2SV_ModStart> tx_size = plane? get_uv_tx_size ( mbmi ) : mbmi -> tx_size ; <S2SV_ModEnd> if ( xd,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> dst [ 0 <S2SV_ModStart> 7 ] ; <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> { rowstoread = ( <S2SV_ModStart> img -> row_offset ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> 2 ) { if ( x > 0 ),0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> ] ; const int <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, file ) ; if ( w < 0 ) return 0 ; if ( w > 0 && h > 0 ) return 0 <S2SV_ModEnd> ; buf +=",0
412,<S2SV_ModStart> uint16_t attr_len ; uint16_t <S2SV_ModEnd> attr_len ; uint16_t <S2SV_ModStart> MD5_DIGEST_LENGTH ) ; uint16_t <S2SV_ModEnd> orig_attr_len = ntohs <S2SV_ModStart> MD5_DIGEST_LENGTH ) ; uint16_t <S2SV_ModEnd> orig_attr_len = ntohs <S2SV_ModStart> MD5_DIGEST_LENGTH ) ; uint16_t <S2SV_ModEnd> orig_attr_len = ntohs,0
413,<S2SV_ModStart> 1 ] = CHACHA_U8TOUCH ( ( unsigned char * ) ptr ) <S2SV_ModEnd> ; actx ->,0
414,"<S2SV_ModStart>, 0, ret <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %pK"" <S2SV_ModEnd>, sock,",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( pass_salt ) { <S2SV_ModStart> length ) ; },0
417,<S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) ; if ( gps_tracker_running ) { <S2SV_ModStart> gps_tracker ) ; },0
420,"<S2SV_ModStart>, & rlen, NULL",0
421,"<S2SV_ModStart> * slavename ; char pass_salt [ 17 ] ; <S2SV_ModStart>, 16 ) ; pass_salt [ 17 ] = '\\0' <S2SV_ModStart>, 0 ) ; if (! pass_salt [ 0 ] ) snprintf ( pass_salt, sizeof ( pass_salt ), ""%s"", pass_salt ) ; else snprintf ( pass_salt, sizeof ( pass_salt ), ""%s"", pass_salt ) ; snprintf ( pass_salt, sizeof ( pass_salt ), ""%s"", pass_salt ) ; snprintf ( pass_salt, sizeof ( pass_salt ), ""%s"", pass_salt ) ; snprintf ( pass_salt, sizeof ( pass_salt ), ""%s"", pass_salt )",0
422,"<S2SV_ModStart> ( name, ""__debug__"" <S2SV_ModEnd> ) == 0",0
423,<S2SV_ModStart> ; i < ( ut32 ),0
424,"<S2SV_ModStart> in ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> int n ; jas_stream_t * buf ; <S2SV_ModStart> 1 ; } buf = jas_stream_read ( in, buf, 2 ) ; if ( buf == NULL ) { return - 1 ; } <S2SV_ModStart> ( in, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( in, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( in, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( in, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( in, buf <S2SV_ModEnd>, 2 ) <S2SV_ModStart> ( in, buf <S2SV_ModEnd>, 2 )",0
425,<S2SV_ModStart> credssp ) ; free ( transport -> credssp ) ;,0
426,<S2SV_ModStart> ; if ( o == 0 ||,0
427,<S2SV_ModStart> bd_addr ) { if ( btif_dm_remove_bond ( bd_addr ) ) return BT_STATUS_NOT_READY ;,0
428,<S2SV_ModStart> ; int avail <S2SV_ModEnd> ; xmin = <S2SV_ModStart> ; xmin = pq_getmsgint64 <S2SV_ModEnd> ( buf ) <S2SV_ModStart> ; xmax = pq_getmsgint64 <S2SV_ModEnd> ( buf ) <S2SV_ModStart> ; if ( pq_getmsgint64 <S2SV_ModEnd> ( buf ) <S2SV_ModStart> ( buf ) <S2SV_ModEnd> <= last || <S2SV_ModStart> >= xmax || pq_getmsgint64 <S2SV_ModEnd> ( buf ) <S2SV_ModStart> >= xmax || pq_getmsgint64 <S2SV_ModEnd> ( buf ),0
429,<S2SV_ModStart> 3 ) { if ( x > 0 ),0
430,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ret ;,0
431,"<S2SV_ModStart> { if ( ( <S2SV_ModStart>, NULL, & new_global_options ) )!= 0 <S2SV_ModEnd> ) { s_log <S2SV_ModStart> ; if ( ( <S2SV_ModStart>, NULL, & new_global_options ) )!= 0 <S2SV_ModEnd> ) { if",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_LINK_MAX_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_LINK_L,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset <S2SV_ModStart> page ) ; <S2SV_ModEnd> block_invalidatepage ( page,0
434,"<S2SV_ModStart> ++ ) { u32 tmp_index = 0 ; <S2SV_ModStart> reader, TrackWriter ) ; gf_isom_get_track ( movie -> moov, i + 1 ) ; gf_isom_get_track ( movie -> moov, i + 1 ) ; gf_isom_get_track ( movie -> moov, i + 1 ) ; gf_isom_get_track ( movie -> moov, i + 1 ) ; gf_isom_get_track ( movie -> moov, i + 1 ) ; gf_isom_get_track ( movie -> moov, i + 1",0
435,"<S2SV_ModStart> ; # endif <S2SV_ModEnd> md5_state_t state ; <S2SV_ModStart>, password, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart>, username, sizeof ( md5sum ) <S2SV_ModEnd> ) ; plen <S2SV_ModStart>, MT_CPTYPE_TERM_TYPE, sizeof ( terminal ) <S2SV_ModEnd> ) ; plen <S2SV_ModStart>, MT_CPTYPE_TERM_WIDTH, sizeof ( terminal ) <S2SV_ModEnd>, strlen ( <S2SV_ModStart>, MT_CPTYPE_TERM_WIDTH, sizeof ( terminal ) <S2SV_ModEnd>, strlen ( <S2SV_ModStart>, MT_CPTYPE_TERM_WIDTH, sizeof ( terminal ) <S2SV_ModEnd>, strlen ( <S2SV_ModStart>, MT_CPTYPE_TERM_WIDTH, sizeof ( terminal ) <S2SV_ModEnd>, strlen ( <S2SV_ModStart>, MT_CPTYPE_TERM_WIDTH, sizeof ( terminal ) <S2SV_ModEnd>, strlen (",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( ( i + 1 ) &&,0
438,"<S2SV_ModStart> ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""cockpit"" ) ) ;",0
439,"<S2SV_ModStart> row ) { vpx_yv12_copy_y_width ( src, src_ybc -> y_width, src_ybc -> y_width, dst_ybc -> y_stride ) ;",0
440,<S2SV_ModStart> int mi_col ; int64_t dummy_rate ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> i ) { <S2SV_ModEnd> for ( x <S2SV_ModStart> -> b_index ) <S2SV_ModEnd> get_block_context ( x <S2SV_ModStart> -> b_index ) <S2SV_ModEnd> -> pred_interp_filter = <S2SV_ModStart> -> pred_interp_filter = SWITCHABLE <S2SV_ModEnd> ; } },0
441,"<S2SV_ModStart>, obj_tlen ; uint32_t <S2SV_ModEnd> hexdump ; u_int",0
442,"<S2SV_ModStart> ) { const MV <S2SV_ModEnd> * ref = <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs <S2SV_ModStart> [ i ] <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>. as_mv ; <S2SV_ModEnd> MVS diff = <S2SV_ModStart>. row - ref -> row <S2SV_ModEnd>, mvs [ <S2SV_ModStart>. col - ref -> col <S2SV_ModEnd> } ; vp9_inc_mv",0
443,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> res = vpx_codec_enc_configure_name <S2SV_ModStart> ) die ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> video <S2SV_blank> context."" <S2SV_ModEnd> ) ; return",0
444,"<S2SV_ModStart> ; if ( skb_expand_head_rcsum ( skb_out, 0, size - skb -> len, GFP_ATOMIC ) < 0 ) goto free ; if (",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ) ; netsnmp_mibindex_load ( ) ;,0
446,"<S2SV_ModStart> 1 ; } for ( x = 0 ; key_map [ x ]. name!= NULL ; key_map [ x ]. name!= NULL ; key_map [ x ]. name!= NULL ; key_map [ x ]. name = NULL ; <S2SV_ModStart>, UI_SET_KEYBIT, key_map [ x ]. name <S2SV_ModEnd> ) ; if",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vp9_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, uint32_t * pctx <S2SV_ModStart> = k5alloc ( <S2SV_ModEnd> ctx -> k5c <S2SV_ModStart>!= 0 ) { * pctx = NULL ; <S2SV_ModStart> goto cleanup ; }",0
450,<S2SV_ModStart> ) ; } screen -> storage_class = DirectClass ;,0
451,"<S2SV_ModStart> ; while ( ( <S2SV_ModStart>!= START_CODE_PREFIX ) && ( <S2SV_ModEnd> prog2d_bit_stream_nxt ( ps_stream <S2SV_ModStart>, START_CODE_PREFIX ) ) )",0
452,"<S2SV_ModStart> - EINVAL ; if ( strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) { ret = - EINVAL ; goto out ; }",0
453,<S2SV_ModStart> ; mono_object_set_generic_method_inst ( ( MonoObject * ),0
454,<S2SV_ModStart> ; int tmp ; if (! buf ) return - EINVAL,0
455,<S2SV_ModStart> )? ( __libc_enable_secure <S2SV_ModEnd>? NULL :,0
456,"<S2SV_ModStart> ) ; } if ( decInst -> size > H264SWDEC_MAX_SIZE ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> decInst <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,"<S2SV_ModStart> } if ( ip_hdr ( skb ) -> ip_summed == CHECKSUM_NONE ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INTRUNCATEDPKTS ) ; goto drop ; } if (",0
458,"<S2SV_ModStart> ) break ; if ( width > image -> height ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
459,<S2SV_ModStart> goto errout ; if ( info -> stagebook == NULL ) goto errout ;,0
460,"<S2SV_ModStart> ; krb5_key_data * key_data_in <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } key_data_in = k5calloc ( n_key_data, sizeof ( * key_data ), & err ) ; if ( key_data_in <S2SV_ModEnd> == NULL ) <S2SV_ModStart>!= NULL ) { k5free ( key_data_in ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart>!= NULL ) { k5free ( key_data_in ) ; <S2SV_ModStart> goto cleanup ; }",0
461,"<S2SV_ModStart> Py_ssize_t idx, Py_ssize_t <S2SV_ModEnd> * value )",0
462,"<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; } else { <S2SV_ModStart> = 0 ; }",0
463,"<S2SV_ModStart> filp ) { struct sock * sk = inode -> i_sb ; struct sock * sk = SOCKET_I ( inode ) ; <S2SV_ModStart> ( inode ), sk ) ; if ( sk ) sock_release ( sk",0
464,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, int lineno <S2SV_ModStart>. orelse = 0 <S2SV_ModEnd> ; p ->",0
465,"<S2SV_ModStart> * param, <S2SV_ModEnd> MI_INFO * info <S2SV_ModStart> MI_KEYDEF * key ; reg2 uint key ; reg2 uint key ; reg2 uint key ; reg2 uint key ; reg2 uint key ; reg2 key ; reg2 key ; reg2 key ; reg2 key ; reg2 key ; reg2 key = MI_KEYDEF_KEY_NONE <S2SV_ModStart> ) ) ; key = MI_KEYDEF_KEY_NONE ; <S2SV_ModStart>, 0, key <S2SV_ModEnd>, MYF ( <S2SV_ModStart>, 0, key <S2SV_ModEnd>, MYF (",0
466,"<S2SV_ModStart> return ""Connection <S2SV_blank> error"" ; case NGHTTP2_ERR_NOSTART_REQUEST_CERT_REQUEST : return ""NOSTART_REQUEST_CERT_REQUEST_CERT_REQUEST"" ; case NGHTTP2_ERR_NOSTART_REQUEST_CERT_REQUEST : return ""NOSTART_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST ; case NGHTTP2_ERR_NOSTART_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT_REQUEST_CERT",0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""zmq3: <S2SV_blank> zmq3: <S2SV_blank> zmq3: <S2SV_blank> zmq3: <S2SV_blank> zmq3: <S2SV_blank> zmq3: <S2SV_blank> %s"" <S2SV_ModEnd>, pData ->",0
469,<S2SV_ModStart> daddr ) ; if (! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) { <S2SV_ModStart> tclass ) ; },0
470,<S2SV_ModStart> ; if ( <S2SV_ModEnd> image2 -> format <S2SV_ModStart> image2 -> format == MagickFormatFormat ) { if ( image2 -> format == MagickFormatFormat ) <S2SV_ModEnd> image2 -> format <S2SV_ModStart> image2 -> format = format ; } else { if ( image2 -> format == MagickFormatFormat ) <S2SV_ModEnd> image2 -> format <S2SV_ModStart> image2 -> format = format ; else <S2SV_ModEnd> image2 -> format <S2SV_ModStart> image2 -> format = format ; } <S2SV_ModEnd> image -> format,0
471,"<S2SV_ModStart> UINT32 failureCode ; WLog_DBG_WRN <S2SV_ModEnd> ( TAG, <S2SV_ModStart> ( TAG, ""RDP_NEG_FAILURE"" <S2SV_ModEnd> ) ; Stream_Read_UINT8",0
472,"<S2SV_ModStart> ) ) { * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> pad = ( <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> while ( pad",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> args ) { vpx_ref_frame_t * frame = ( vpx_ref_frame_t * ) <S2SV_ModEnd> va_arg ( args <S2SV_ModStart> vpx_ref_frame_t * ) <S2SV_ModEnd> ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> sd ) ; <S2SV_ModEnd> frame -> img <S2SV_ModStart> frame_type, & frame ->",0
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf_init_files ( psf <S2SV_ModStart> psf ) ; if ( psf == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; },0
475,"<S2SV_ModStart> VP9_COMMON * cm, int * interp_filter <S2SV_ModStart> i ] += <S2SV_ModEnd> interp_filter [ j <S2SV_ModStart> [ i ] ; if ( interp_filter == NULL ) { * interp_filter = i <S2SV_ModStart> } } } }",0
476,"<S2SV_ModStart> = 0 ; if (! cpi -> mb ) { vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context ) * MAX_MB_PLANE ) ; vp9_setup_block_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vp9_setup_block_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vp9_setup_block_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; }",0
477,<S2SV_ModStart> 0 ) { if ( sp -> logtag!= HTTP_HDR_REQ ) { <S2SV_ModStart> ) ; } },0
478,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> magick [ 12 <S2SV_ModStart> ; if ( count == 2 ) return ( DestroyImageList ( image ) ; if ( <S2SV_ModStart> image ) ; <S2SV_ModEnd> flags = (,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,"<S2SV_ModStart> -> pic_order_bitmap_size = MAX ( 1, <S2SV_ModStart> i4_frame_num ) ) ) <S2SV_ModStart> -> pic_order_bitmap_size = MAX ( 1, <S2SV_ModStart> i4_frame_num ) ) )",0
481,<S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> int iocnum ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> iocnum ) ; <S2SV_ModEnd> return - ENODEV <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> } if (,0
482,"<S2SV_ModStart> -> columns, 3 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> } else { log_error ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { log_error ( ""Player <S2SV_blank> name <S2SV_blank> expected <S2SV_blank> after <S2SV_blank> -u"" <S2SV_ModEnd> ) ; }",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 || buf_size > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart>, 1, ""%s"",",0
486,<S2SV_ModStart> void ) { if ( stunnel_locks [ LOCK_SECTIONS ]!= NULL ) { <S2SV_ModStart> ; } } },0
487,<S2SV_ModStart> void ) { if ( mnemonic == 0 ) return ;,0
488,<S2SV_ModStart> ; } } # ifdef MAC_ADDR_FILTER_SIZE <S2SV_ModStart> ] ) ; # endif,0
489,<S2SV_ModStart> image ) ; if ( pdb_offset < 0 ) { free ( pixels ) ; return NULL ; },0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ; <S2SV_ModStart> * pi2_used ; <S2SV_ModEnd> dpb_mgr_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> dpb_mgr_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> pic_buf_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> pic_buf_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> pic_buf_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> pic_buf_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> pic_buf_t * as_ref_pic_lt_curr <S2SV_ModStart> * as_ref_pic_lt_curr ; <S2SV_ModEnd> pic_buf_t * as_ref_pic,0
491,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ] = print_value_ptr ( child -> string ) ; entries [ i ++ ] = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( str <S2SV_ModStart> ; if ( <S2SV_ModEnd> ret ) len <S2SV_ModStart> ) ; } <S2SV_ModEnd> child = child,0
492,<S2SV_ModStart> { if ( unix_peer_wake_relay ( other ) ) writable = 0 ; if (,0
493,"<S2SV_ModStart> ( outpos, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"" <S2SV_ModEnd>, x,",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,<S2SV_ModStart> * ) ; if (! frame ) { return VPX_CODEC_INVALID_PARAM ; },0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> name, int rec_quick_recovery <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache ( <S2SV_ModStart> ) ) || rec_quick_recovery <S2SV_ModEnd> && init_io_cache (",0
498,<S2SV_ModStart> ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> uECC_word_t * p,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> = buf ; pool -> free_total ++ ;,0
501,<S2SV_ModStart> cp ; { cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; cp ++ ; <S2SV_ModEnd> cp ++ ) <S2SV_ModStart> cp ++ ; <S2SV_ModEnd> } else if,0
502,<S2SV_ModStart> const char detect [ ],0
503,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> NULL ) ; },0
504,"<S2SV_ModStart> = 256 ; int_mv_mode_penalty = 0 ; <S2SV_ModStart> x -> sadperbit16, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, & num00, <S2SV_ModEnd> x -> mv",0
505,<S2SV_ModStart> int overhead = 8 + 4 + strlen ( ns ) <S2SV_ModEnd> ; int size,0
506,<S2SV_ModStart> = NEGO_STATE_FAIL ; Stream_SetRemainingLength ( s ) ;,0
507,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
508,<S2SV_ModStart> ~ TJA1101_CONFIG1_MII_MODE ; <S2SV_ModEnd> tja1101WritePhyReg ( interface,0
509,"<S2SV_ModStart> ) ) { if (! is_builtin_arguments ( c, vararg ) ) return arg ;",0
510,"<S2SV_ModStart> int i ; int up_available = 0 ; <S2SV_ModStart> + y ; int up_available = 0 ; <S2SV_ModStart>, 129, up_available <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( up_available <S2SV_ModEnd> ) { if",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> ; ei -> i_completed_io_list = NULL ; ei ->,0
513,"<S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd> ) ; vp9_wb_write_bit <S2SV_ModStart> ( wb, VP9_FRAME_MARKER <S2SV_ModEnd> ) ; if <S2SV_ModStart> profile == PROFILE_1 || cm -> profile == VP9_FRAME_MARKER <S2SV_ModStart> profile == PROFILE_1 || cm -> profile == VP9_FRAME_MARKER",0
514,"<S2SV_ModStart> ( stderr, ""rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options: <S2SV_blank> rrd_graph_options:",0
515,"<S2SV_ModStart> = '\\0' ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; <S2SV_ModStart> ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; osStrncpy ( p + n, queryString, n - 1 ) ; osStrncpy ( p + n, queryString, n - 1 ) ; p [ 0 ] = '?' <S2SV_ModEnd> ; osStrncpy (",0
516,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) == COMMA ) && ( TYPE ( ch ) == COMMA ),0
517,<S2SV_ModStart> KEY_FRAME ) { <S2SV_ModEnd> pc -> refresh_golden_frame,0
518,"<S2SV_ModStart> ; uint16_t n, r <S2SV_ModStart> 0 ) { r = <S2SV_ModEnd> MIN ( n <S2SV_ModStart> ETH_MAX_FRAME_SIZE ) ; if ( r < 0 ) { n = 0 ; } <S2SV_ModStart> -> rxBuffer, r <S2SV_ModEnd> ) ; error",0
519,<S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE rb_schema ; <S2SV_ModStart> errors ) ; <S2SV_ModEnd> xmlSetStructuredErrorFunc ( NULL,0
520,"<S2SV_ModStart> ( LOG_ERR, ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> %s"" <S2SV_ModEnd>, path )",0
521,<S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; } state,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if <S2SV_ModStart> - EINVAL ; spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> match -> type <S2SV_ModStart> ; } } spin_unlock ( & po -> bind_lock ) ; if ( err &&! atomic_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; },0
523,<S2SV_ModStart> pending ) ; handle -> event -> pending_wakeup = 0 ;,0
524,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> += size ; if ( len > 0 ) { <S2SV_ModStart> - pwcs ; op ++ ; },0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure\\n"" <S2SV_ModEnd> ) ; if",0
526,<S2SV_ModStart> ETH_MAX_FRAME_SIZE ) { if ( n > 0 ) { <S2SV_ModStart> RXFDPR_RXFPAI ) ; } <S2SV_ModStart> n ) ; if ( n > 0 ) { <S2SV_ModStart> RXQCR_SDA ) ; },0
527,"<S2SV_ModStart> asdl_seq * decorator_seq <S2SV_ModEnd> ) { identifier <S2SV_ModStart>, type_comment, <S2SV_ModEnd> n -> n_col_offset",0
528,<S2SV_ModStart> ; out : mm_dec_nr_tlb ( mm <S2SV_ModEnd> ) ; },0
529,"<S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **message <S2SV_blank> length <S2SV_blank> is <S2SV_blank> %d"" <S2SV_ModEnd>, message_left )",0
530,"<S2SV_ModStart> 1 ; } if ( config_has_key ( config, ""Adb <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank> - <S2SV_blank>",0
531,<S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++ <S2SV_ModStart> > 4098 && raw_width <S2SV_ModEnd> < width ),0
532,<S2SV_ModStart> len ) ; nl = orig_nl = orig_nl ;,0
533,"<S2SV_ModStart> ; if ( logging ) ( void ) LogMagickEvent ( CoderEvent, ""Failed <S2SV_blank> to <S2SV_blank> uniform <S2SV_blank> image <S2SV_blank> info"" ) ; if (",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> new_upperdir ) ; <S2SV_ModEnd> if ( ovl_path_type <S2SV_ModStart> new_upperdir ) ; <S2SV_ModEnd> if ( ovl_path_type,0
537,<S2SV_ModStart> ; plane < BITS_PER_BLOCKS <S2SV_ModEnd> ; plane ++,0
538,"<S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { VP9_COMMON * const tile = & xd -> mi [ 0 ] -> mbmi. sb_type ; <S2SV_ModStart>, x, tile, mi_row, mi_col, bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; } else { <S2SV_ModStart> ) ; } }",0
539,<S2SV_ModStart> = NULL ; reader. gcol = NULL ; reader. gcol = NULL ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> superblockFree ( &,0
540,<S2SV_ModStart> -> ranges = ( void * ),0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_REF_LAST ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if (",0
542,<S2SV_ModStart> -> sample_size = ( unsigned char * ),0
543,<S2SV_ModStart> ; if ( <S2SV_ModEnd> head ) {,0
544,"<S2SV_ModStart> * pptr, const <S2SV_ModStart> * pptr, const",0
545,"<S2SV_ModStart>, ""Failed <S2SV_blank> to <S2SV_blank> start <S2SV_blank> runtime <S2SV_blank> \'%s\'"", Run. system -> name <S2SV_ModEnd> ) ; if",0
546,<S2SV_ModStart> ) src_pitch ; if ( dest_width > 0 ) { <S2SV_ModStart> ) ; } },0
547,"<S2SV_ModStart>, tokbuf, <S2SV_ModEnd> ecMinAmount ) ;",0
548,<S2SV_ModStart> ; iad_num = ( intfc -> idx_interface & 0xffffffff )? 0xffffffff :,0
549,"<S2SV_ModStart>, 0, PERMIX_FORMAT_CORE_FORMAT <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vp8_variance16x16 <S2SV_ModEnd> ( * (,0
551,"<S2SV_ModStart> ( interface, ENC624J600_REG_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_REG_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_REG_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_REG_MAADR2 <S2SV_ModEnd> ) ; macAddrToEui64 <S2SV_ModStart> ( interface, ENC624J600_REG_MAADR2 <S2SV_ModEnd> ) ; macAddrToEui64",0
552,<S2SV_ModStart> ; start = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) - maxlen,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> cm ) ; if ( sf -> adaptive_rd_thresh == 0 ) { sf -> adaptive_rd_thresh = 1 ; },0
555,"<S2SV_ModStart> pfds ) ; ts [ h ]. thread_id = - 1 ; <S2SV_ModStart> } ; } <S2SV_ModEnd> APPL_TRACE_DEBUG ( ""socket <S2SV_blank> poll <S2SV_blank> thread <S2SV_blank> exiting, <S2SV_blank> h:%d""",0
556,"<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( L, { }, { }, { }, { } <S2SV_ModEnd> ) ; luaE_shrinkCI",0
557,<S2SV_ModStart> o ) { <S2SV_ModEnd> return Py_None ;,0
558,"<S2SV_ModStart> * s = _PyUnicode_AsUTF8 <S2SV_ModEnd> ( CHILD ( <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; char *",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> -> quantizer_keyframe, option_value <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> quantizer_keyframe, option_value <S2SV_ModEnd> ) ; if",0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> { Py_ssize_t i ; if ( PyErr_Occurred ( ) ) return NULL,0
562,<S2SV_ModStart> = cJSON_Object ; item -> type = cJSON_Object ;,0
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> ( need_close || ( flags & SOCK_THREAD_FD_WR ) &&,0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( ppi_flags_tree, 0, sizeof ( * ppi_flags_tree ) )",0
566,<S2SV_ModStart> ; sh = ( char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ) <S2SV_ModStart> { SDS_HDR_VAR ( ( unsigned char * ),0
567,<S2SV_ModStart> BYTE a_val ; UINT16 <S2SV_ModEnd> tempWidth ; tempWidth,0
568,<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; <S2SV_ModStart> EINVAL ) ; },0
569,<S2SV_ModStart> 0 ) { int kf_boost = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; <S2SV_ModStart> -> output_framerate / 2 <S2SV_ModEnd> ) ; },0
570,"<S2SV_ModStart> TX_MODE tx_mode = vp9_read_uint <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" { yr_re_node_destroy <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" { yr_re_node_destroy",0
572,<S2SV_ModStart> 32 ] ; int ref = is_inter_block ( mbmi ) ; <S2SV_ModStart> ref ] ; <S2SV_ModEnd> int pt ; <S2SV_ModStart> int ref = is_inter_block ( mbmi ) <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> int c ; <S2SV_ModEnd> int pt ; <S2SV_ModStart> int pt ; <S2SV_ModEnd> int pt ; <S2SV_ModStart> int pt ; <S2SV_ModEnd> int pt ; <S2SV_ModStart> int pt ; <S2SV_ModEnd> int pt ;,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ) <S2SV_ModStart> WRC_Abort ; } <S2SV_ModEnd> return WRC_Continue ;,0
574,"<S2SV_ModStart> users ) ; cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; <S2SV_ModStart> ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; <S2SV_ModEnd> return ERR_PTR (",0
575,"<S2SV_ModStart> ( PointZZ_p * mp <S2SV_ModEnd>, const mpz_t <S2SV_ModStart>, tmp ; mpz_copy ( mp <S2SV_ModEnd>, point, <S2SV_ModStart>, point, mp <S2SV_ModEnd> ) ; int <S2SV_ModStart> ; } } mpz_copy ( mp <S2SV_ModEnd>, R0. <S2SV_ModStart>, point, mp <S2SV_ModEnd> ) ; mpz_clears",0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = NULL,0
577,<S2SV_ModStart> ssize_t ret = send_socket <S2SV_ModEnd> ( socket ->,0
578,"<S2SV_ModStart> s ) { <S2SV_ModEnd> ret = send <S2SV_ModStart>, 0 ) ; do ret = send ( sock_fd, buf, s, 0 ) ; do ret = send ( sock_fd, buf, s, 0 ) ; while ( ret < 0 && errno == EINTR ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = send ( sock_fd, buf, s, 0 ) ; while ( ret < 0 && errno == EINTR ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } buf += ret",0
579,<S2SV_ModStart> ; } } else { xmlNode * child = xml -> doc ; child = cIter ; cIter = __xml_next_child ( xml ) ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter,0
580,<S2SV_ModStart> return NULL ; if (! svc_ctx ) return NULL ;,0
581,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int,0
583,"<S2SV_ModStart> buf ; { <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> ( buf, <S2SV_ModEnd> 0 ) ;",0
584,"<S2SV_ModStart> directory_table_end, table_start ; int ret <S2SV_ModStart> == FALSE ) ret = <S2SV_ModEnd> FALSE ; if <S2SV_ModStart> == FALSE ) ret = <S2SV_ModEnd> FALSE ; if <S2SV_ModStart> FALSE ) return ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) ret = <S2SV_ModEnd> FALSE ; if <S2SV_ModStart> FALSE ) return ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) ret = <S2SV_ModEnd> FALSE ; if <S2SV_ModStart> FALSE ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
585,"<S2SV_ModStart> rule * rule, int * idx <S2SV_ModStart> ; } } * idx = 0 ;",0
586,<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> ; } } vpx_clear_system_state ( ) ;,0
587,"<S2SV_ModStart> return 0 ; if (! Module_type ) return 0 ; <S2SV_ModStart>, FunctionDef_fields, 5 ) ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return 0 ; if (! Module_type ) return",0
588,"<S2SV_ModStart> return ; } if ( <S2SV_ModStart>, 16 ) < 0 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; is_logging = false ; } <S2SV_ModEnd> } else {",0
589,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ;,0
590,"<S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; setDefaults ( <S2SV_ModStart> ; } } <S2SV_ModEnd> nameobject = t",0
591,"<S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> MB_PREDICTION_MODE mode, <S2SV_ModEnd> vp9_prob * probs <S2SV_ModStart> vp9_intra_mode_tree, probs, probs",0
593,<S2SV_ModStart> ) ) goto err_delete_and_delete <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> ; err_delete : err_delete_and_delete <S2SV_ModEnd> : nfp_abm_u32_knode_delete (,0
594,<S2SV_ModStart> ; } stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> frames_out <S2SV_ModEnd> = 0 ;,0
595,"<S2SV_ModStart>, app, ""export-desktop-file"" <S2SV_ModEnd>, app,",0
596,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( tile_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
597,<S2SV_ModStart> = 1 ; if (! cm ) return NULL ; <S2SV_ModStart> current_video_frame = 0 <S2SV_ModEnd> ; vpx_init_dequantizer (,0
598,"<S2SV_ModStart> dref ) { GF_Log ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ;",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> toks, const vp9_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> = tree [ v <S2SV_ModEnd> ++ ] ;",0
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart>, img ) ; ctx -> base. err_detail = ""encoder_encode"" ; return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> pick_quickcompress_mode ( ctx",0
602,"<S2SV_ModStart>, & len, NULL",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> oxcf ) { if (! oxcf -> two_pass_vbrmax_section ) return 0 ; <S2SV_ModStart> = ( ( float <S2SV_ModEnd> ) rc -> <S2SV_ModStart> -> av_per_frame_bandwidth * <S2SV_ModEnd> oxcf -> two_pass_vbrmax_section <S2SV_ModStart> oxcf -> two_pass_vbrmax_section <S2SV_ModEnd> ) / 100,0
605,"<S2SV_ModStart> in ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( in, ( char * )",0
606,<S2SV_ModStart> -> mbmi ; int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; <S2SV_ModStart> -> sb_type >= mi_width <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> -> sf. mi_width <S2SV_ModEnd> = num_8x8_blocks_wide_lookup [ <S2SV_ModStart> -> sf. mi_height <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> sf. mi_height <S2SV_ModEnd> && mi_height < <S2SV_ModStart> -> sf. mi_width <S2SV_ModEnd> && mi_height < <S2SV_ModStart> -> sf. mi_height <S2SV_ModEnd> && mi_height <,0
607,<S2SV_ModStart> x >> 24 ) ; psf -> header [ psf -> headindex ++ ] = x >> 24 ; psf -> header [ psf -> headindex ++ ] = x >> 24 ; psf -> header [ psf -> headindex ++ ] = x >> 8 ; psf -> header [ psf -> headindex ++ ] = x >> 24 ; psf -> header [ psf -> headindex ++ ] = x >> 24 ; psf -> header [ psf -> headindex ++ ] = x >> 24 ; psf -> header [ psf -> headindex ++ ] = x >> 24 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> ) { uint32_t <S2SV_ModEnd> i, j <S2SV_ModStart> value += ( ( uint32_t ) ( ( uint32_t ) <S2SV_ModStart> value >> ( ( uint32_t ) ( ( uint32_t ) <S2SV_ModStart> ) - 1 )",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+^_`|~"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_content_len <S2SV_ModEnd>. ptr =",0
611,"<S2SV_ModStart>, y, Min ( 4, dds_info -> width - x ), <S2SV_ModStart>, dds_info, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; if ( SyncAuthenticPixels ( image, exception ) == MagickFalse ) return MagickFalse ; if ( BitmapIsSafe ( image, exception ) == MagickFalse ) return MagickFalse ; if ( BitmapIsSafe ( image, exception ) == MagickFalse ) return MagickFalse ; if ( BitmapIsSafe ( image, exception ) == MagickFalse ) return MagickFalse ; if ( BitmapIsSafe ( image, exception ) == MagickFalse ) return MagickFalse <S2SV_ModEnd> ; if (",0
612,"<S2SV_ModStart> { int ret ; if (! a2dp_recv_recv_ok ( common, buffer, length, MSG_NOSIGNAL ) ) return - 1 ; ret <S2SV_ModStart> length, MSG_NOSIGNAL ) ; a2dp_recv_ok ( common, buffer, length, MSG_NOSIGNAL",0
613,"<S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", w * BzK, w * BzK, w * BzK, - w * BzK, - w * BzK, - w * BzK, - w * BzK, - w * BzK, - w, - h * BzK, - w, - h * BzK, - w, - h * BzK, - w, - h * BzK, - w, - w, - w, - w, - h * BzK, - w, - w, - w, - w, - w, - w, - h * BzK, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w, - w,",0
614,"<S2SV_ModStart> ) ) { printf ( ""\\n"" ) ;",0
615,<S2SV_ModStart> return FALSE ; if ( autodetectRspPdu -> packetLength > 0 ) { <S2SV_ModStart> sequenceNumber ) ; },0
616,<S2SV_ModStart> -> tok ; <S2SV_ModEnd> # if ( <S2SV_ModStart> -> tok ; <S2SV_ModEnd> # endif },0
617,"<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; vp8mt_de_alloc_temp_buffers ( pbi, pbi -> common. mb_rows ) ; }",0
618,<S2SV_ModStart> xWantedSize > 0 && ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 <S2SV_ModStart> xWantedSize > 0 && ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 <S2SV_ModStart> xBlockSize - xWantedSize <S2SV_ModEnd> ) ) { <S2SV_ModStart> xBlockSize - xWantedSize <S2SV_ModEnd> ) > heapMINIMUM_BLOCK_SIZE <S2SV_ModStart> xBlockSize - xWantedSize <S2SV_ModEnd> ) ; },0
619,"<S2SV_ModStart> TX_TYPE tx_type, <S2SV_ModEnd> int16_t * input <S2SV_ModStart> * input, uint16_t <S2SV_ModEnd> * dest, <S2SV_ModStart>, dest, ( uint16_t )",0
620,"<S2SV_ModStart> s ) { int32_t <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t ) <S2SV_ModStart> ( s, ( int32_t )",0
621,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
622,"<S2SV_ModStart> coef_branch_ct ) { int i, j, k, l, m ; <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> for ( m",0
623,<S2SV_ModStart> { } ; if (! name ) return - 1 ;,0
624,"<S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; msleep ( 200 <S2SV_ModEnd> ) ; obuf",0
625,"<S2SV_ModStart> iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> cfg, vpx_codec_flags_t",0
626,"<S2SV_ModStart> int stride, uint8_t * restrict pb_ptr, <S2SV_ModStart> & pred [ pb_ptr <S2SV_ModEnd> ], 16 <S2SV_ModStart> & pred [ pb_ptr <S2SV_ModEnd> ], 16 <S2SV_ModStart> & pred [ pb_ptr <S2SV_ModEnd> ], uv_block_size",0
627,"<S2SV_ModStart> = TRUE ; strncpy <S2SV_ModEnd> ( buf, <S2SV_ModStart> buf, origbuf, BUFSZ - 1",0
628,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> i < count,0
629,"<S2SV_ModStart> int num_workers = 1 <S2SV_ModEnd> ; const int <S2SV_ModStart> i < num_threads <S2SV_ModEnd> ; ++ pbi <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } for <S2SV_ModStart> n ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } } for ( i = 0 ; i < num_threads ; ++ i ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } } for ( i = 0 ; i < num_threads ; ++ i ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } <S2SV_ModEnd> } } for",0
630,<S2SV_ModStart> ; offset = get4 ( ) <S2SV_ModEnd> + 8 ; <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ; i < 4 <S2SV_ModEnd> ; i ++,0
631,<S2SV_ModStart> = SEGMENT_DELTADATA ; int base_rdmult ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> segment_rdmult = vp9_compute_rd_mult <S2SV_ModStart> y_dc_delta_q ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; },0
632,<S2SV_ModStart> -> error_code ) return <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail? <S2SV_ModEnd> error -> detail <S2SV_ModStart> error -> detail : NULL <S2SV_ModEnd> ; return error,0
633,<S2SV_ModStart> pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ps_cur_slice =,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> = 0 ; while ( * fmt ) { <S2SV_ModStart> '0' ; } <S2SV_ModEnd> return a ;,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> else return - EIO <S2SV_ModEnd> ; deb_info (,0
638,"<S2SV_ModStart> ) opt ; if ( c -> local_wfd. fd == - 1 ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; return NULL ; }",0
639,<S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; connection -> <S2SV_ModStart> IPPROTO_ICMP ; } <S2SV_ModEnd> ret_ga = getaddrinfo <S2SV_ModStart> ai_canonname ; } <S2SV_ModEnd> if ( res,0
640,<S2SV_ModStart> ; cpi -> <S2SV_ModEnd> frames_till_gf_update_due = 0 <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0,0
641,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [max <S2SV_blank> %d]"" <S2SV_ModEnd>, nsrcs )",0
642,<S2SV_ModStart> int mptctl_mpt_command ( struct mpt_ioctl_command <S2SV_ModEnd> * arg ),0
643,<S2SV_ModStart> Image * image <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> image -> columns <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ) <S2SV_ModStart> -> rows = ( int ),0
644,"<S2SV_ModStart> -> freqinfo = jpc_freqinfo_get_freqinfo ( qcd, <S2SV_ModEnd> & qcc ->",0
645,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == '\\0' ) && ( str_mode [ 0 ] == '\\0' ) ),0
646,<S2SV_ModStart> 191 ; const unsigned <S2SV_ModStart> int v = v <S2SV_ModEnd> << 1 ),0
647,"<S2SV_ModStart> costs, const vp9_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> = vp9_cost_bit ( probs <S2SV_ModEnd> [ 0 ]",0
648,"<S2SV_ModStart> ( REFERENCE_MODE ) vp9_read_block_inter_prob <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_ASSERT ( opm -> ndo_valid_ipv6 ) ;,0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,<S2SV_ModStart> 0 ) { log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> NULL ) { log_error <S2SV_ModEnd> ( iter ->,0
653,<S2SV_ModStart> ; tok -> lineno = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) ; if (! dpbOutPicture_exists ( dpb ) ) return ( MEMORY_ALLOCATION_ERROR ),0
656,<S2SV_ModStart>! sock ) { <S2SV_ModStart> ) ; } },0
657,<S2SV_ModStart> ) ) ; node -> data = NULL ;,0
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( msg <S2SV_ModStart> ; } } <S2SV_ModEnd> if (!,0
660,"<S2SV_ModStart>, hdr_size, <S2SV_ModEnd> overlay = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int i, <S2SV_ModStart>, err, <S2SV_ModEnd> overlay ) ; <S2SV_ModStart>, err, <S2SV_ModEnd> overlay ) ; <S2SV_ModStart>, err, <S2SV_ModEnd> overlay ) ; <S2SV_ModStart>, err, <S2SV_ModEnd> overlay ) ;",0
661,<S2SV_ModStart> EPCR_EPOS | EPCR_ERR | EPCR_ERR_MASK,0
662,"<S2SV_ModStart> pcmk_ok ) { rc = <S2SV_ModStart> -> command ) ) ; if ( rc == pcmk_ok ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect <S2SV_blank> private <S2SV_blank> command.\\n"" ) ; rc = - EINVAL ; } <S2SV_ModEnd> } if (",0
663,"<S2SV_ModStart> ; msg. msg_namelen <S2SV_ModEnd> = sizeof ( <S2SV_ModStart> ( address ) ; msg. msg_namelen = sizeof ( address ) ; msg. msg_namelen = sizeof ( address ) ; if ( addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } } else { msg. msg_namelen = sizeof ( address ) ; } <S2SV_ModEnd> if ( err",0
664,"<S2SV_ModStart> int new_mv_mode_penalty = MAX ( x -> sadperbit16, x -> sadperbit16, x -> sadperbit16 ) <S2SV_ModEnd> ; const int <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, & num00",0
665,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> addr ) )!= 0 ),0
666,"<S2SV_ModStart>, mp, ""Reset <S2SV_blank> of <S2SV_blank> the <S2SV_blank> directory <S2SV_blank> config <S2SV_blank> file <S2SV_blank> %s"" <S2SV_ModEnd>, mp ->",0
667,"<S2SV_ModStart>, one, offset, <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * colormap <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, * pixels <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, mask [ <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, mask [ <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, mask [ <S2SV_ModStart> [ 256 ] <S2SV_ModEnd>, mask [",0
668,"<S2SV_ModStart> ( b, comp -> block_size <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> ) ) { if ( strcmp ( option, "" <S2SV_blank> =\\t"" ) == 0 ) continue ;",0
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", crm_str ( client -> name ), user_data ) ; free ( client -> client ) ; free ( client -> client ) ; free ( client -> client ) ; free ( client -> client ) ; free ( client -> client ) ; free ( client -> client )",0
671,<S2SV_ModStart> next ) { if (! iswhite ( thread ) ) { <S2SV_ModStart> } } } },0
