,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> ) ) { TrackWriter_ <S2SV_ModEnd> * writer = <S2SV_ModStart> writer = ( TrackWriter_ <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart> perf_sample_data data ; <S2SV_ModEnd> preempt_disable_notrace ( ) <S2SV_ModStart> ( ) ; do_perf_sw_event ( PERF_TYPE_SOFTWARE, event_id, nr, nmi, & data, regs ) ;",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { grub_err ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_err ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
6,"<S2SV_ModStart> ] ) { uint16_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; uint16_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; uint16_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { uint16_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step1 [ 0 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step5 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step6 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step7 [ 0 <S2SV_ModStart> ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
7,<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> = LIBRAW_MOUNT_FixedLens ; # endif,0
8,<S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; <S2SV_ModEnd> best_err = try_filter_frame <S2SV_ModStart> 0 ) { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } } <S2SV_null>,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> ( w, vp9_mv_sign_tree <S2SV_ModEnd>, mvcomp -> <S2SV_ModStart> ( w, vp9_mv_hp_tree <S2SV_ModEnd>, mv_class ==",0
11,<S2SV_ModStart> rxBlockSzx = COAP_BLOCK_SIZE_64 ; else if ( blockSize == 128 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_128,0
12,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS (",0
13,"<S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> ) ; } ret = key_permission ( make_key_ref ( dest_keyring, 1 ), KEY_NEED_WRITE ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ; }",0
14,<S2SV_ModStart> = create_spnego_ctx ( NULL,0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > 0 ) { <S2SV_ModStart> ) ) ; } else { memset ( hashed, 0, 256 + AUTH_PASS_LEN ) ; }",0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; } <S2SV_ModStart> machine ) ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; } <S2SV_ModStart> BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout ) == 0 ) { <S2SV_ModEnd> return FD_ISSET ( <S2SV_ModStart> ) ; } else { return false ; } },0
20,<S2SV_ModStart> int trans_to_still = - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == still_interval ) { <S2SV_ModStart> = 1 ; break ; } } return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
21,"<S2SV_ModStart> inode ) ) { <S2SV_ModStart> size ) ; if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } }",0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr <S2SV_ModEnd> ) goto out_err <S2SV_ModStart> goto out_err ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr <S2SV_ModEnd> ) goto out_err",0
24,<S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,"<S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ;",0
26,"<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic <S2SV_blank> failed"" ) ; return - 1 ; } return ret ;",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> MagickRealType ) ( pixel & ( size_t ) <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> MagickRealType ) ( pixel << ( size_t ) <S2SV_ModEnd> value + 0.5,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps ) { <S2SV_ModStart> } } } },0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( long <S2SV_ModEnd> frame_in, int <S2SV_ModStart> ( stderr, ""%ld <S2SV_blank> decoded <S2SV_blank> frames/%ld <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" <S2SV_ModEnd> PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", <S2SV_ModStart> PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", ( long ) frame_in, ( long ) <S2SV_ModEnd> frame_out, dx_time",0
33,"<S2SV_ModStart> NULL ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart>, ENC28J60_REG_EWRPTL, ( uint8_t ) <S2SV_ModStart>, ENC28J60_REG_EWRPTH, ( uint8_t ) <S2SV_ModStart>, ENC28J60_REG_ETXNDL, ( uint8_t ) <S2SV_ModStart>, ENC28J60_REG_ETXNDH, ( uint8_t )",0
35,"<S2SV_ModStart> ; value = _PyObject_SetAttrId ( result, & PyId_annotation, value ) ; if (! value ) goto failed ; Py_DECREF ( value ) ; value = <S2SV_ModStart> ; value = _PyObject_SetAttrId ( result, & PyId_lineno, value ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) ; if (! value ) goto failed ; Py_DECREF ( value ) ; value =",0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", page ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ;",0
37,<S2SV_ModStart> int mb_rows = ( <S2SV_ModStart> y_width >> 4 ) + 1 <S2SV_ModStart> ; int mb_cols = ( <S2SV_ModEnd> source -> y_height <S2SV_ModStart> y_height >> 4 ) + 1,0
38,"<S2SV_ModStart> ( ext4_mb_cache, GFP_NOFS | __GFP_NOFAIL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ext4_mb_cache, GFP_NOFS | __GFP_NOFAIL <S2SV_ModEnd> ) ; }",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ; return <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
40,"<S2SV_ModStart> ip_options * opt ; int ret ; opt <S2SV_ModStart> - ENOMEM ; ret = <S2SV_ModEnd> copy_from_user ( opt <S2SV_ModStart>, optlen ) ; if ( ret ) return ret ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> term <S2SV_blank> in <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; # endif else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E533: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> term <S2SV_blank> in <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E534: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" <S2SV_ModEnd> ) ; #",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & acl ) ; if ( ret ) goto out <S2SV_ModEnd> ; } break",1
44,<S2SV_ModStart> ; cmpt = NULL <S2SV_ModEnd> ; if (,0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP_MATCH__COND && flags & FLAG_INDEFINITE_LENGTH ),0
46,"<S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> attrlen, & req -> rq_rcv_buf <S2SV_ModEnd> ) )!=",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div64_u64 <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> ; } } if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = userToID ( owner ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> } else {",0
49,"<S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if (! addr ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) }",0
50,"<S2SV_ModStart> ; long long * export_index_table = ( long long * ) malloc ( sizeof ( long long ) * indexes ) <S2SV_ModEnd> ; res = <S2SV_ModStart> = read_fs_bytes ( s_fd <S2SV_ModEnd>, sBlk. <S2SV_ModStart> } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( s_fd <S2SV_ModEnd>, indexes ) <S2SV_ModStart> * table_start = s_fd <S2SV_ModEnd> [ 0 ]",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # if CONFIG_VP8_ENCODER # if CONFIG_VP9_ENCODER <S2SV_ModStart> = vp8_arg_ctrl_map ; # endif <S2SV_ModStart> = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> = vp8_arg_ctrl_map ; # endif <S2SV_ModStart> = vp9_arg_ctrl_map ; # if CONFIG_VP8_ENCODER <S2SV_ModStart> = vp8_arg_ctrl_map ; # endif <S2SV_ModStart> = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_ENCODER <S2SV_ModStart> = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER <S2SV_ModStart> = vp8_arg_ctrl_map ; # endif <S2SV_ModStart> = vp9_arg_ctrl_map ; # if CONFIG_VP9_ENCODER <S2SV_ModStart> = vp9_arg_ctrl_map ; # endif,0
53,<S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
54,"<S2SV_ModStart>, AT91_AES_BLOCK_SIZE_BYTE )!= 0",0
55,<S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> 0x07 char magick [ 12 ] ; Image * image ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; Quantum index ; unsigned char * p ; size_t bits_per_pixel, number_colormaps, number_planes_filled, one, pixel_info_length ; ssize_t count, offset, y ; unsigned char background_color [ 256 ], * colormap, plane, * pixels ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { <S2SV_ModEnd> image -> page <S2SV_ModStart> image ) ; <S2SV_ModEnd> flags = (",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> stateid, int flags <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, flags <S2SV_ModEnd> ) ; write_sequnlock",0
59,"<S2SV_ModStart> dir = ""/etc"" ; char * tmp_file = NULL <S2SV_ModStart> ) ; } tmp_file = tmpname ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return fd ;",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ; } # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # else addreply_noformat ( 500, ""?"" ) ; # endif",0
62,"<S2SV_ModStart> const int strides [ 4 ] = { src -> y_stride, src -> u_stride, src -> v_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( <S2SV_ModEnd> pd -> dst <S2SV_ModStart> subsampling_y ) ; pd = & xd -> plane [ i ] ; }",0
63,<S2SV_ModStart> args ) { ( void ) ctr_id ;,0
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } <S2SV_ModEnd> for ( i",0
66,<S2SV_ModStart> PyCompilerFlags cf ; expr_ty <S2SV_ModEnd> mod ; char <S2SV_ModStart> Py_ssize_t len ; int <S2SV_ModEnd> i ; assert <S2SV_ModStart> == NULL ) { PyMem_RawFree ( str ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart> == NULL ) { PyMem_RawFree ( str ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! mod ) { PyMem_RawFree ( str ) ; <S2SV_ModStart> return NULL ; },0
67,<S2SV_ModStart> * c = cJSON_FirstChild ( object ) <S2SV_ModEnd> ; while (,0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart>, val_l ; <S2SV_ModEnd> val_h = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_h = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_h = EXTRACT_16BITS",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> alpha_buffer } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], src -> y_stride, src -> uv_stride, src -> v_stride, src -> alpha_stride, mi_row, mi_col, sf, src -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> alpha_stride } ; <S2SV_ModEnd> struct macroblockd_plane *",0
72,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( iov <S2SV_ModStart> seglen ) { <S2SV_ModEnd> sg = list_first_entry <S2SV_ModStart> list ) ; sg = sgl -> sg ; while (! sg -> length ) sg ++ ; used = min_t ( unsigned long, used, seglen ) ; if (! used ) { err = skcipher_wait_for_data ( sk, flags ) ; if ( err ) goto unlock ; }",0
73,"<S2SV_ModStart> ) ) ; CHECK_MEM_ERROR ( cpi -> mb_activity_map, vpx_calloc ( sizeof ( unsigned int ), cpi -> common. MBs ) ) ;",0
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( & <S2SV_ModStart> release_barrier ) ; _ipmi_destroy_user ( user ) ; cleanup_srcu_struct ( & user -> release_barrier ) ;,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( <S2SV_ModStart> is_async = 1 <S2SV_ModEnd> ; t =",0
77,<S2SV_ModStart> NULL ; } rcu_read_lock ( ) ; <S2SV_ModStart>! dst ) { rcu_read_unlock ( ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart>! dst ) { rcu_read_unlock ( ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> ( err ) { rcu_read_unlock ( ) ; <S2SV_ModStart> err ; } } rcu_read_unlock ( ) ;,0
78,"<S2SV_ModStart> * mi_8x8, <S2SV_ModEnd> const MB_MODE_INFO * <S2SV_ModStart>, get_y_mode_probs ( <S2SV_ModEnd> above_mi, left_mi <S2SV_ModStart>, get_y_mode_probs ( <S2SV_ModEnd> above_mi, left_mi <S2SV_ModStart>, get_y_mode_probs ( <S2SV_ModEnd> left_mi, block <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> > maxn ) { <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; return - 1 ; }",0
80,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> io ; } } if ( len < sizeof ( * prep ) ) { return ( - 1 ) ; },0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ) <S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ) <S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ) <S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ) <S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ) <S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ) <S2SV_ModStart> ; accu_i += ( float ) ( <S2SV_ModStart> [ j ] ),0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,<S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; bfq_clear_bfqq_wait_request ( <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
86,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
87,"<S2SV_ModStart> regs ) ; perf_sw_event_one <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
88,<S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ) <S2SV_ModStart> newData + newpos * sizeof ( char ),0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> tclass ) ; rcu_read_unlock ( ) ;,0
90,<S2SV_ModStart> = VFF_CM_ntscRGB ; ViffInfo. color_space_model = VFF_TYP_DOUBLE ; ViffInfo. rows = rows ; ViffInfo. columns = columns ; ViffInfo. subrows = subrows ; ViffInfo. map_rows = map_rows ; ViffInfo. map_columns = map_columns ; ViffInfo. map_subrows = map_subrows ; ViffInfo. color_space_model = VFF_TYP_DOUBLE ; ViffInfo. color_space_model = VFF_TYP_DOUBLE ;,0
91,"<S2SV_ModStart> encoder_common_init ( ctx, data",0
92,<S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> = memo_new ; <S2SV_ModEnd> self -> memo_size,0
93,"<S2SV_ModStart> 1 ) ; if ( delta_q < 0 ) { <S2SV_ModStart> 4 ) ; } else { vp9_wb_write_literal ( wb, 0, 4 ) ; }",0
94,<S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ] <S2SV_ModStart> ] = near_mvs [ find ],0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int ret ; <S2SV_ModStart> msgnum, 0, & ret <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
98,"<S2SV_ModStart> c ) ; return REDIS_OK ; } if ( cmd -> proc == infoCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( cmd -> proc == unsubscribeCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( cmd -> proc == psubscribeCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( cmd -> proc == punsubscribeCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> VPX_RC_ONE_PASS ) ) VPX_ERROR <S2SV_ModEnd> ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) <S2SV_ModStart> g_lag_in_frames ) ) VPX_ERROR <S2SV_ModEnd> ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" )",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,<S2SV_ModStart> ; tmp_strsize = <S2SV_ModEnd> ptr -> size <S2SV_ModStart> ; tmp_strsize = <S2SV_ModEnd> ptr -> size,0
103,<S2SV_ModStart>. get_glob_hdrs ( &,0
104,<S2SV_ModStart> mode ) { struct nfs4_state_owner * owner = state -> owner ; <S2SV_ModStart> if ( ( owner -> state_mode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( owner -> state_mode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> ) ; } owner -> state_mode <S2SV_ModEnd> = mode ;,0
105,"<S2SV_ModStart> ( ), ""%s"" <S2SV_ModEnd>, read_info -> <S2SV_ModStart> ( ), ""%s"" <S2SV_ModEnd>, read_info -> <S2SV_ModStart> ( ), ""%s"" <S2SV_ModEnd>, read_info ->",0
106,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> bpp = 8 ;,0
109,"<S2SV_ModStart> ) ; } if ( length > caplen ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( noffset",0
111,"<S2SV_ModStart> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE * 2 <S2SV_ModStart> sd, & cx23888_ir_ops <S2SV_ModEnd> ) ; v4l2_set_subdevdata <S2SV_ModStart> tx_params_lock ) ; <S2SV_ModEnd> v4l2_subdev_call ( sd <S2SV_ModStart> sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters",0
112,<S2SV_ModStart> if ( ( ( <S2SV_ModStart> & VPX_CODEC_USE_XMA ) || <S2SV_ModEnd>! ( iface <S2SV_ModStart> caps & VPX_CODEC_CAP_XMA ) <S2SV_ModStart> if ( ( ( <S2SV_ModStart> & VPX_CODEC_USE_POSTPROC ) || <S2SV_ModEnd>! ( iface <S2SV_ModStart> caps & VPX_CODEC_CAP_POSTPROC ) <S2SV_ModStart> if ( ( ( <S2SV_ModStart> & VPX_CODEC_USE_ERROR_CONCEALMENT ) || <S2SV_ModEnd>! ( iface <S2SV_ModStart> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) <S2SV_ModStart> if ( ( ( <S2SV_ModStart> & VPX_CODEC_USE_INPUT_FRAGMENTS ) || <S2SV_ModEnd>! ( iface <S2SV_ModStart> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ),0
113,<S2SV_ModStart> TJA1100_CONFIG1_MII_MODE ; value &= ~ <S2SV_ModEnd> TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg,0
114,<S2SV_ModStart> = tos ; ipcm_init ( & ipc ) ;,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res = <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_PSNR <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res = <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_OUTPUT_PARTITION <S2SV_ModStart> flags & VPX_CODEC_USE_OUTPUT_PARTITION <S2SV_ModEnd> ) res =,0
116,"<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0 <S2SV_ModStart> ; if ( msg -> msg_name ) { struct sockaddr_vm * vm_addr ; vm_addr = ( struct sockaddr_vm * ) msg -> msg_name ; vsock_addr_init ( vm_addr, dg -> src. context, dg -> src. resource ) ; msg -> msg_namelen = sizeof ( * vm_addr ) ; } err = payload_len ; out : skb_free_datagram ( & vsk -> sk, skb ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
117,"<S2SV_ModStart> counter ) ; encode_open_flags <S2SV_ModEnd> ( xdr,",0
118,"<S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; goto out <S2SV_ModEnd> ; } switch <S2SV_ModStart> 0 ) ; out : return error ;",0
119,"<S2SV_ModStart> ; default : r_strbuf_append_c ( & op -> esil, '\\0' ) ;",0
120,"<S2SV_ModStart> return ERROR_INVALID_REQUEST ; if (! osStrcasecmp ( token, ""HTTP/1.1"" ) ) { connection -> request. version = HTTP_VERSION_1_1 ; connection -> request. keepAlive = FALSE ; } else if (! osStrcasecmp ( token, ""HTTP/1.0"" ) ) { connection -> request. version = HTTP_VERSION_1_0 ; connection -> request. keepAlive = TRUE ; } else { return ERROR_INVALID_REQUEST ; }",0
121,"<S2SV_ModStart> ; ND_TCHECK ( EXTRACT_16BITS ( & <S2SV_ModStart> lshp -> ls_type ) <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModStart> ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, ipaddr_string (",0
122,<S2SV_ModStart> } else { <S2SV_ModEnd> * obuf = <S2SV_ModStart> ~ PIPE_BUF_FLAG_GIFT ; obuf -> ops = NULL ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; } ret += obuf -> len ; len -= obuf -> len ; } while ( len ) ; pipe_unlock ( ipipe ) ; pipe_unlock ( opipe ) ; <S2SV_ModStart> obuf ) ; <S2SV_ModEnd> return ret ;,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned int <S2SV_ModEnd> vp9_tree_probs_from_distribution ( vp9_tree <S2SV_ModStart> ] ) { return,0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,<S2SV_ModStart> b ) ; <S2SV_ModEnd> vp9_tree_index ii =,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> static __inline <S2SV_ModEnd> void write_buffer_16x16 (,0
127,"<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ) <S2SV_ModStart> < 0 ) { if ( synth_devs [ dev ] -> load_patch ) synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; <S2SV_ModStart> return err ; }",0
128,<S2SV_ModStart> int x1 = ( int ) <S2SV_ModStart> int x2 = ( int ) <S2SV_ModStart> int x3 = ( int ) <S2SV_ModStart> int x4 = ( int ) <S2SV_ModStart> int x5 = ( int ) <S2SV_ModStart> int x6 = ( int ) <S2SV_ModStart> int x7 = ( int ) <S2SV_ModStart> int x10 = ( int ) <S2SV_ModStart> * cospi_21_64 + ( int ) <S2SV_ModStart> * cospi_15_64 - ( int ) <S2SV_ModStart> * cospi_21_64 - ( int ),0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,"<S2SV_ModStart> * const tile <S2SV_ModEnd>, int * <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count <S2SV_ModStart>, tile, <S2SV_ModEnd> no_pred_segcounts, temporal_predictor_count",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_ERROR,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> & p -> ai_addrlen, & p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> & p -> ai_protocol <S2SV_ModEnd>, & canonnamelen",0
135,"<S2SV_ModStart> ; separator = strchr_r <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = strchr_r <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { <S2SV_ModEnd> pc -> fc <S2SV_ModStart> -> fc. default_coef_probs = default_coef_probs <S2SV_ModEnd> ; } <S2SV_null>,0
137,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, PyTuple * args <S2SV_ModStart> = body ; p -> v. Module. args = args ;",0
139,<S2SV_ModStart> write_idx ) ; buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; <S2SV_ModStart> img ) ; <S2SV_ModEnd> return 0 ;,0
140,<S2SV_ModStart> 0 ) ; if ( q < 0 ) { lf -> filter_level = 0 ; } else { <S2SV_ModStart> ; } } },0
141,<S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_bonded_devices ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ),0
142,"<S2SV_ModStart> '!' : { long <S2SV_ModEnd> a = getnum <S2SV_ModStart> ( L, ""alignment <S2SV_blank> %ld <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"" <S2SV_ModEnd>, a )",0
143,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> scene == 0 ) || ( LocaleCompare ( image_info -> magick, ""CMYKA"" ) == 0 )",0
144,"<S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModStart> deadline ) ; <S2SV_ModEnd> return SAVE_STATUS (",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> "" <S2SV_ModEnd>, c, <S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> "" <S2SV_ModEnd>, c,",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart>! i ) { <S2SV_ModStart> = n ; } else { <S2SV_ModEnd> suffix_object ( p <S2SV_ModStart> n ; } },0
149,<S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> Py_ssize_t len ; asdl_stmt_ty <S2SV_ModEnd> i ; tmp,0
150,<S2SV_ModStart> in ) { uint8_t <S2SV_ModEnd> buf [ RAS_MAGICLEN,0
151,<S2SV_ModStart> -> msg_control ; if ( msg_sys -> msg_controllen < msg_sys -> msg_iovlen ) { err = - EINVAL ; goto out_freeiov ; },0
152,<S2SV_ModStart> unsigned ptrs_per_blk ; unsigned int <S2SV_ModEnd> end_of_metadata = height,0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", global -> codec? <S2SV_ModStart> vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> interface ( ) ) : vpx_codec_iface_name ( global -> codec",0
154,<S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copy <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NAMESPACE <S2SV_ModEnd> ) { copyNs,0
155,"<S2SV_ModStart> ) ; } else { fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> ) ; } else { fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> ) ; } else { fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> ) ; } else { fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> ) ; } else { fs_logger2 ( ""touch"", fname ) ; }",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> 0 ) ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> js_pushnumber ( J <S2SV_ModStart> ) ; } },0
158,"<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ; <S2SV_ModStart> case OReadItems : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ;",0
159,"<S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } ier = ksz8851ReadReg ( interface, KSZ8851_REG_IER ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier |= IER_LCIE ; } if ( ( isr & ISR_TXIS )!= 0 ) { ier |= IER_TXIE ; } if ( ( isr & ISR_RXIS )!= 0 ) { ier |= IER_RXIE ; }",0
160,"<S2SV_ModStart> wb ) { write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; <S2SV_ModStart> QINDEX_BITS ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> { log_error ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, __func__,",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> / 4 ; if ( bsize == 0 ) { * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; } else { <S2SV_ModStart> bsize ) ; } <S2SV_ModStart> case PARTITION_HORZ : if ( bsize == 0 ) { <S2SV_ModStart> bsize ) ; } else { * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; }",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ) <S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_DEC_FRM_STATUS ),0
167,"<S2SV_ModStart> var_off ) ; if (! src_known ) src_reg. var_off = 0 ; <S2SV_ModStart> var_off ) ; if (! dst_known ) dst_reg -> var_off = tnum_add ( dst_reg -> var_off, src_reg. var_off ) ; <S2SV_ModStart> var_off ) ; if (! src_known ) dst_reg -> var_off = tnum_add ( dst_reg -> var_off, src_reg. var_off ) ;",0
168,<S2SV_ModStart> = posix_open ; if (! file_is_dir ( direntry -> d_inode ) ) { cifs_put_inode ( direntry -> d_inode ) ; direntry -> d_inode = NULL ; rc = - ESTALE ; goto lookup_out ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> int number_of_frames, <S2SV_ModEnd> encode_frame_count ; int <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> == ALT_INTER_LAYER_PREDICTION_IP && si -> psnr_sum [ i ]!= NULL ) { number_of_frames = encode_frame_count / si -> psnr_sum [ i ] [ 0 ] ; number_of_keyframes = encode_frame_count / si -> psnr_sum [ i ] [ 1 ] ; number_of_frames = encode_frame_count / si -> psnr_sum [ i ] [ 2 ] ; number_of_frames = encode_frame_count / si -> psnr_sum [ i ] [ 3 ] ; } <S2SV_ModEnd> } svc_log ( <S2SV_ModStart>, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"" <S2SV_ModEnd>, i,",0
171,<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; screen -> sb_buffer = NULL ; },0
172,"<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( literal_start <S2SV_ModStart> ( literal_start, ( end - literal_start ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, literal_start, ( end - literal_start ) <S2SV_ModEnd> ) ; if",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, pd -> dd_dirname",0
174,<S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2,0
175,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> uint16_t * ptr <S2SV_ModStart> ptr = ( <S2SV_ModEnd> uint16_t * )",0
176,"<S2SV_ModStart>, in_what_stride, INT_MAX <S2SV_ModEnd> ) + mv_stride",0
177,"<S2SV_ModStart> + idx_str ; <S2SV_ModEnd> cpi -> mb <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist ) <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist ) <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist ) <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist )",0
178,<S2SV_ModStart> u_int8_t state ; mutex_lock ( & ct -> lock ) ; <S2SV_ModStart> msg ) ; mutex_unlock ( & ct -> lock ) ;,0
179,"<S2SV_ModStart> ip_options * opt <S2SV_ModEnd> ) { while <S2SV_ModStart>, opt, IPPROTO_IPV4 <S2SV_ModEnd> ) ) {",0
180,"<S2SV_ModStart> ""Connection"" ) ; const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; <S2SV_ModStart> goto error ; <S2SV_ModEnd> const char *",0
181,"<S2SV_ModStart> -> name ) { <S2SV_ModStart> name ) ; if ( plen >= RPCAP_NETBUF_SIZE ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."" ) ; return - 1 ; } } <S2SV_ModStart> } } } if ( plen >= RPCAP_NETBUF_SIZE ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> addresses <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."" ) ; return - 1 ; }",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,"<S2SV_ModStart> x += 2 ) { if ( ( * p >> 6 ) & 0x1 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } index = ConstrainColormapIndex ( image, ( * p >> 4 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; q ++ ; index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } <S2SV_ModEnd> index = ConstrainColormapIndex",0
184,<S2SV_ModStart> a ) { const BN_ULONG * t1 = ( const BN_ULONG * ) r ; const BN_ULONG * t2 = ( const BN_ULONG * ) a <S2SV_ModEnd> ; BN_ULONG c1,0
185,<S2SV_ModStart> ) ; } if ( dds_info. pixelformat. flags & DDPF_LUMINANCE ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { decoder = ReadUncompressedRGBA ; } else { decoder = ReadUncompressedLUMINANCE ; } } } else if ( dds_info. pixelformat. flags & DDPF_LUMINANCE ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { decoder = ReadUncompressedLUMINANCE ; } else { decoder = ReadUncompressedLUMINANCE ; } } } },0
186,<S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag && <S2SV_ModStart> ; if ( ndo -> ndo_vflag &&,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { size_t i ; size_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,"<S2SV_ModStart> -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_pic_timing_sei ( ps_codec, ps_sps ) ; break ; case SEI_MASTERING_DISPLAY_COLOUR_VOLUME : ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ihevcd_parse_mastering_disp_params_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_T35 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_t_t35 ( ps_codec, ps_sps ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_T36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered",0
190,"<S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = hfi1_sdma_get_engine ( ppd, this_idx <S2SV_ModEnd> ) ; if",0
191,"<S2SV_ModStart>, int rep_quick, ulong * pack_reclength <S2SV_ModStart> ; ulong max_pack_reclength <S2SV_ModEnd> ; int error <S2SV_ModStart> T_SILENT ) ) <S2SV_ModEnd> printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> name ) ; <S2SV_ModEnd> param -> testflag <S2SV_ModStart> |= T_CALC_CHECKSUM ; <S2SV_ModEnd> bzero ( (",0
192,"<S2SV_ModStart> ) ; } buflen = pq_getmsgint ( buf, 4 ) ; if ( buflen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_NULL_VALUE_NOT_ALLOWED ), errmsg ( ""null <S2SV_blank> value <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> hstore <S2SV_blank> key"" ) ) ) ; <S2SV_ModStart> Pairs ) ) <S2SV_ModEnd> ; rawlen =",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name ) <S2SV_ModStart> ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"" <S2SV_ModEnd>, r ->",0
194,"<S2SV_ModStart> ) ) { if ( 0 == strncmp ( v, vend, vlen ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( 0 == strncmp ( v, vend, vlen ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( 0 == strncmp ( v, vend, vlen ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,<S2SV_ModStart> int16_t out [ 16 <S2SV_ModEnd> ] ; int,0
196,"<S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if ( <S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if ( <S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if ( <S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if (",0
197,"<S2SV_ModStart> '\\0' ) ; if (! config -> sections ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> sections."", __func__ ) ; return false ; } <S2SV_ModStart> fp ) ; <S2SV_ModEnd> strcpy ( temp_filename",0
198,"<S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type,",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/json\\r\\n"" ""Content-Length: <S2SV_blank> %ld\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MaxF ( 1.0f, value -> x <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = MaxF ( 1.0f, value -> y <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = MaxF ( 1.0f, value -> z <S2SV_ModEnd> ) ; }",0
204,<S2SV_ModStart> -> sasl_username = g_strdup ( <S2SV_ModStart> src -> sasl_username ) <S2SV_ModStart> -> sasl_password = g_strdup ( <S2SV_ModStart> src -> sasl_password ),1
205,"<S2SV_ModStart>, 1, <S2SV_ModEnd> cm -> mb_rows <S2SV_ModStart> cm -> mb_rows * <S2SV_ModEnd> cm -> mb_cols <S2SV_ModStart> cm -> mb_cols <S2SV_ModEnd> ; cpi ->",0
206,"<S2SV_ModStart> i, tcount <S2SV_ModEnd>, datao ; <S2SV_ModStart> return ; } tcount = 0 ; for ( i = c, o = datao ; i ; -- i, o += 12 ) { size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; tcount ++ ; } } <S2SV_ModEnd> if (!",0
207,"<S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd>, llbuff2, <S2SV_ModStart>, llbuff2, sizeof ( llbuff2 ) <S2SV_ModEnd>, lock_type,",0
208,"<S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> = usm_secmod_process_in_msg ; <S2SV_ModEnd> if ( register_sec_mod <S2SV_ModStart> return ; } def -> pdu_free_state_ref = usm_free_usmStateReference ; def -> session_setup = usm_session_init ; def -> handle_report = usm_handle_report ; def -> probe_engineid = usm_discover_engineid ; def -> post_probe_engineid = usm_create_user_from_session_hook ;,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart> sub ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; },0
214,<S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> ps_dec -> ps_bitstrm <S2SV_ModStart> -> u4_bitoffset ; },0
216,<S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> uint_fast32_t newRasterSize = <S2SV_ModStart> uint_fast32_t newRasterSize = ( uint_fast32_t ) ( <S2SV_ModStart> Image. Height ) <S2SV_ModStart> ( newRasterSize > ( uint_fast32_t ) ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> ( newRasterSize > ( uint_fast32_t ) ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> ( newRasterSize > ( uint_fast32_t ) ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> ( newRasterSize > ( uint_fast32_t ) ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> ( newRasterSize > ( uint_fast32_t ) ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> ( newRasterSize > ( uint_fast32_t ) ( <S2SV_ModStart> info -> rasterSize ),0
217,"<S2SV_ModStart> -> validator -> passwd <S2SV_ModEnd> ) ) return <S2SV_ModStart> -> validator -> passwd <S2SV_ModEnd>, 0, <S2SV_ModStart> -> validator -> passwd <S2SV_ModEnd>. len )",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%lx <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size, <S2SV_ModStart> ; rdsdebug ( ""recvmsg <S2SV_blank> woke <S2SV_blank> inc <S2SV_blank> %p <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, inc, <S2SV_ModStart> } rdsdebug ( ""copying <S2SV_blank> inc <S2SV_blank> %p <S2SV_blank> from <S2SV_blank> %pI4:%u <S2SV_blank> to <S2SV_blank> user\\n"" <S2SV_ModEnd>, inc,",0
220,<S2SV_ModStart> += 9 ; isalnum <S2SV_ModEnd> ( * t <S2SV_ModStart> t &&! isalnum <S2SV_ModEnd> ( * t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == - 1 ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,"<S2SV_ModStart> msixcap msixcap ; int rc ; <S2SV_ModStart> msix_size ) ; rc = <S2SV_ModEnd> pci_emul_add_capability ( dev <S2SV_ModStart> msixcap ) ) ; pci_msix_table_init ( dev, msgnum ) ; return rc",0
223,<S2SV_ModStart> max ) { return <S2SV_ModEnd> vp9_rb_read_literal ( rb <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status =,0
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> USE_LARGESTALL ) { <S2SV_ModEnd> return cpi -> <S2SV_ModStart> TX_MODE_SELECT ; } <S2SV_ModEnd> return cpi -> <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ; magfact = fabs <S2SV_ModEnd> ( printval ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ) <S2SV_ModStart> ; prline_cnt = fabs <S2SV_ModEnd> ( prline_cnt ),0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> = NULL ; unsigned int <S2SV_ModEnd> sz = sizeof,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> ( ) ; if ( in_atomic ( ) ||! mm ) goto no_context ; down_read ( & mm -> mmap_sem ) ; vma = find_vma ( mm, address ) ; if (! vma ) { # ifdef DEBUG_FAULT print_task ( tsk ) ; printk ( ""%s:%d <S2SV_blank> fault, <S2SV_blank> address <S2SV_blank> is <S2SV_blank> 0x%08x <S2SV_blank> PC <S2SV_blank> %016Lx <S2SV_blank> textaccess <S2SV_blank> %d <S2SV_blank> writeaccess <S2SV_blank> %d\\n"", __func__, __LINE__, address, regs -> pc, textaccess, writeaccess ) ; show_regs ( regs ) ; # endif goto bad_area ; } <S2SV_ModStart> regs, address <S2SV_ModEnd> ) ; if",0
231,"<S2SV_ModStart> fd, EPOLLIN | EPOLLET",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } <S2SV_ModStart> c_arena ) ; } else { if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 2 ) ) ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ( BImgBuff, ( size_t ) <S2SV_ModStart> ( BImgBuff, ( size_t ) <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) ( <S2SV_ModStart> ( BImgBuff, ( size_t ) (",0
237,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> if ( position >= <S2SV_ModEnd> PSF_SIZEOF ( psf <S2SV_ModStart> if ( position >= <S2SV_ModEnd> PSF_SIZEOF ( psf <S2SV_ModStart> if ( position >= <S2SV_ModEnd> PSF_SIZEOF ( psf <S2SV_ModStart> if ( position >= <S2SV_ModEnd> PSF_SIZEOF ( psf <S2SV_ModStart> if ( position >= <S2SV_ModEnd> PSF_SIZEOF ( psf,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> au1_ctxt_models [ 0 ] = ps_cabac -> u4_ofst ; ps_cabac -> au1_ctxt_models [ 1 ] = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> ; } } if ( line -> type == MD_LINE_FENCEDCODE && CH ( line -> beg ) == pivot_line -> beg ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = TRUE ; },0
242,"<S2SV_ModStart> event ) { <S2SV_ModEnd> if (! <S2SV_ModStart> if (! event -> ctx <S2SV_ModEnd> ) { cpu_function_call <S2SV_ModStart>! task_function_call ( event -> ctx <S2SV_ModEnd>, __perf_event_disable, <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
243,<S2SV_ModStart> noise_level ; # ifdef <S2SV_ModEnd> CONFIG_POSTPROC_VISUALIZER flags ->,0
244,"<S2SV_ModStart> = 0 ; if ( is_ipv6 ) { msgptr. v6 = ( const struct olsr_msg6 * ) tptr ; msg_type = msgptr. v6 -> msg_type ; msg_len = EXTRACT_16BITS ( msgptr. v6 -> msg_len ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( msgptr. v6 -> msg_type ), msg_len ) ) ; } else { <S2SV_ModStart> ) ) ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length == 768 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> core_frame_length = 768 <S2SV_ModEnd> ; } },0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r <S2SV_ModStart> APLOG_ERR, 0, r",0
249,"<S2SV_ModStart>, ""dpx:file.component"", ""%c"" <S2SV_ModEnd>, component_type ) <S2SV_ModStart>, ""dpx:file.row"", ""%c"" <S2SV_ModEnd>, row ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel ) <S2SV_ModStart>, ""dpx:file.samples_per_pixel"", ""%d"" <S2SV_ModEnd>, samples_per_pixel )",0
250,"<S2SV_ModStart>! proto_end ) { c -> username = NULL ; c -> password = NULL ; <S2SV_ModStart> return 0 ; } <S2SV_ModStart> '/' ) ; <S2SV_ModEnd> if ( proto_end <S2SV_ModStart> '\\0' ; } cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; colon = strchr ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else if (! colon || at <= colon ) { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( colon + 1, at - ( colon + 1 ) ) ; host = at + 1 ; }",0
251,<S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( tag!= FDT_PROP ) return - FDT_ERR_BADSTRUCTURE ;,0
252,<S2SV_ModStart> ( server. bgsavechildpid!= - 1 && server. bgrewritechildpid!= - 1 ) { if ( server. maxidletime &&! ( loops % 100 ) ) closeTimedoutClients ( ) ; } if ( server. maxidletime &&! ( loops % 100 ) ) closeTimedoutClients ( ) ; if ( server.,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> ; } } },0
255,"<S2SV_ModStart> action ) { double x = r * BzK ; double y = r * BzK ; <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", x <S2SV_ModEnd>, - r <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", x <S2SV_ModEnd>, r, <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", x <S2SV_ModEnd>, - r <S2SV_ModStart> * BzK, x <S2SV_ModEnd>, - r <S2SV_ModStart> * BzK, x <S2SV_ModEnd>, - r <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\",0
256,"<S2SV_ModStart> { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if (! check_scale_factors ( other_w, other_h, this_w, this_h ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> <S2SV_ModStart> 0 ] = vp9_convolve_copy <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve_avg <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 0 ] = vp9_convolve8_horiz <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve8_avg_horiz <S2SV_ModEnd> ; } }",0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> ) OE_RAISE_ERRNO ( OE_EBADF <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) OE_RAISE_ERRNO ( OE_EBADF <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) OE_RAISE_ERRNO ( OE_EBADF <S2SV_ModEnd> ) ; done,0
258,<S2SV_ModStart> ; if ( msg. msg_flags & MSG_PROBE ) return - EINVAL ; if (,0
259,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_pf_exit ( ) <S2SV_ModStart> sctp_v4_pf_exit ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ; sctp_v6_protosw_exit ( ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ; sctp_v6_pf_exit ( ) ; sctp_v4_pf_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; kfree ( sctp_ep_hashtable ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) )",0
260,"<S2SV_ModStart> ( double ) ( <S2SV_ModStart> stream -> psnr_samples_total ) <S2SV_ModStart> 255.0, ( double ) ( <S2SV_ModEnd> stream -> psnr_sse_total <S2SV_ModStart> stream -> psnr_sse_total )",0
261,"<S2SV_ModStart> name ) { size_t name_len = strlen ( name ) ; <S2SV_ModStart> = malloc ( name_len <S2SV_ModEnd> * 2 + <S2SV_ModStart>, ""%s/%s"", name, name ) ; dst_name = malloc ( name_len <S2SV_ModEnd> ) ; if <S2SV_ModStart> = '\\0' ; strncat <S2SV_ModEnd> ( dst_name, <S2SV_ModStart> dst_name, "".summary"", name_len - strlen ( dst_name ) - 1",0
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"",",0
263,"<S2SV_ModStart> skip } ; vp9_foreach_transformed_block <S2SV_ModEnd> ( xd, <S2SV_ModStart> plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra",0
264,<S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT_ERR <S2SV_ModEnd> ) ; return,0
265,"<S2SV_ModStart> 0 ) { if ( <S2SV_ModStart>, UI_DEV_DESTROY ) < 0 ) BTIF_TRACE_ERROR ( ""%s"", strerror ( errno ) )",0
266,<S2SV_ModStart> rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval,0
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { return NULL <S2SV_ModEnd> ; } switch,0
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; <S2SV_ModStart> # if 0 <S2SV_ModEnd> if ( rc,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_strlcpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> # ifdef __WIN__ my_strlcat <S2SV_ModEnd> ( buff, <S2SV_ModStart> buff, ""/"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> ; # else my_strlcat <S2SV_ModEnd> ( buff, <S2SV_ModStart> buff ) - strlen ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> plugin_dir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_plugin_dir ) ; printf ( ""# <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, opt_plugin_ini )",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> free_server_handle ( handle,0
273,"<S2SV_ModStart> int zero_mv_sse = - 1 <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = - 1 <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = - 1 <S2SV_ModEnd> ; # endif",0
274,<S2SV_ModStart> ; h -> hdr = ( struct ntreg_header * ) malloc ( sizeof ( struct ntreg_header ) ) ; if ( h -> hdr == NULL ) goto error ; h ->,0
275,"<S2SV_ModStart> u1_profile_idc, u1_level_idc <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> U1_frm, uc_constraint_set0_flag <S2SV_ModEnd> ; WORD32 i4_cropped_ht <S2SV_ModStart>, i4_cropped_wd ; <S2SV_ModEnd> WORD32 pic_height_in_map_units_minus1 = <S2SV_ModStart> U2_frm_wd_y = 0 <S2SV_ModEnd> ; UWORD32 u2_frm_ht_y <S2SV_ModStart> U2_frm_ht_y = 0 <S2SV_ModEnd> ; UWORD32 u2_crop_offset_y <S2SV_ModStart> U2_frm_ht_uv = 0 <S2SV_ModEnd> ; WORD32 u4_num_reorder_frames <S2SV_ModStart>, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst <S2SV_ModEnd> ; SWITCHONTRACE ;",0
276,"<S2SV_ModStart> -> temporal_layer ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> -> alt_fb_idx ; <S2SV_ModEnd> set_encoder_config ( &",0
277,"<S2SV_ModStart> bitspersample, samplesperpixel <S2SV_ModEnd> ; uint32 width <S2SV_ModStart> compression ) ; <S2SV_ModEnd> if ( input_compression <S2SV_ModStart> == COMPRESSION_JPEG ) <S2SV_ModEnd> tiffSetField ( out <S2SV_ModStart> JPEGCOLORMODE_RGB ) ; <S2SV_ModEnd> if ( input_photometric <S2SV_ModStart> == COMPRESSION_YCBCR ) <S2SV_ModEnd> tiffSetField ( out <S2SV_ModStart> input_photometric ) ; <S2SV_ModEnd> if ( compression",0
278,"<S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> -> archive, errno <S2SV_ModEnd>, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", <S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> 0 ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> -> archive, errno <S2SV_ModEnd>, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"",",0
279,"<S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> & ident ) ; <S2SV_ModEnd> if ( ident <S2SV_ModStart> TAG_IDENT_EFE ) { nbh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!nbh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; }",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv",0
281,<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_ops ) ; spin_unlock_irqrestore_nested <S2SV_ModEnd> ( & fq,0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> ovalue = strim <S2SV_ModStart> ; if ( <S2SV_ModEnd> * ovalue == <S2SV_ModStart> == '\\0' ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> if ( smatch",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ; cleanup : k5free ( key_data ) ;,0
286,"<S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; <S2SV_ModStart> crgram, crgram_len ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) <S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ;",0
287,"<S2SV_ModStart> macvlan_cnt ) ; i40e_set_macvlans ( vsi, macvlan_cnt, qcnt ) ;",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; uint8_t <S2SV_ModEnd> * dataptr ; <S2SV_ModStart> * dataptr ; uint32_t <S2SV_ModEnd> datacnt ; uint_fast32_t,0
290,<S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_y_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_uv_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_y_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_uv_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_y_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_uv_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_y_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_uv_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_y_stride ; <S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_uv_stride ;,0
291,<S2SV_ModStart> ) ; } else if ( status == MagickTrue ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; },0
292,"<S2SV_ModStart> s ++ ; # if PY_MAJOR_VERSION >= 3 <S2SV_ModStart> += 5 ; # else strcpy ( p, ""u005c"" ) ; # endif <S2SV_ModStart> NULL ) { # if PY_MAJOR_VERSION >= 3 <S2SV_ModStart> u ) ; # else return NULL ; # endif <S2SV_ModStart> = buf ; # if PY_MAJOR_VERSION >= 3 return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; # else <S2SV_ModStart> NULL ) ; # endif",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> if ( targetshouldbedirectory <S2SV_ModEnd> ) verifydir ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> S_ISDIR ( stb <S2SV_ModStart> stb. st_mode <S2SV_ModEnd> ) ) targisdir",0
294,<S2SV_ModStart> test ) { return <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
295,<S2SV_ModStart> goto allocation_fail ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> goto allocation_fail ; vp8_de_alloc_frame_buffers ( oci ) ;,0
296,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> ta = ( <S2SV_ModStart> ++ ) { vpx_memcpy ( & t_above, x -> e_mbd. above_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; vpx_memcpy ( & t_left, x -> e_mbd. left_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ;",0
297,<S2SV_ModStart> -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> { err = k_nanosleep <S2SV_ModEnd> ( & delay,0
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart>. match_data. <S2SV_ModEnd> raw_data = description <S2SV_ModStart> = description, <S2SV_ModEnd> } ; struct <S2SV_ModStart> int ret ; if (! type -> match ) return ERR_PTR ( - ENOKEY ) ; kenter ( ""%s,%s,%p,%zu,%p,%p,%lx"", ctx. index_key. type -> name, ctx. index_key. description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( type -> match_preparse ) { ret = type -> match_preparse ( & ctx. match_data ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error ; } }",0
303,<S2SV_ModStart> ntime ) { cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> job_id ) ; pool -> swork. job_id = NULL ; <S2SV_ModStart> coinbase2 ) ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL ; <S2SV_ModStart> job_id ) ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL <S2SV_ModEnd> ; pool ->,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { return ast_type_reduce_impl <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, unused <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; case PERF_EVENT_IOC_ID <S2SV_ModStart> ; } case <S2SV_ModEnd> PERF_IOC_FLAG_GROUP ) perf_event_for_each,0
308,<S2SV_ModStart> MB_PREDICTION_MODE y_mode ) { <S2SV_ModEnd> MB_PREDICTION_MODE uv_mode =,0
309,<S2SV_ModStart> sha -> type == CCP_SHA_TYPE_1? CCP_SHA_TYPE_1 : CCP_SHA_TYPE_224? CCP_SHA_TYPE_224 : CCP_SHA_TYPE_256? CCP_SHA_TYPE_256 : CCP_SHA_TYPE_384 : CCP_SHA_TYPE_512? CCP_SHA_TYPE_512 : <S2SV_ModEnd> CCP_SHA_TYPE_512 ) ; <S2SV_ModStart> sha -> type == CCP_SHA_TYPE_1? CCP_SHA_TYPE_1 : CCP_SHA_TYPE_224? CCP_SHA_TYPE_224 : <S2SV_ModEnd> CCP_SHA_TYPE_256? CCP_SHA_TYPE_256 <S2SV_ModStart> CCP_SHA_TYPE_256 : CCP_SHA_TYPE_384 <S2SV_ModEnd> : CCP_SHA_TYPE_512 ; <S2SV_ModStart> sha -> type == CCP_SHA_TYPE_512? CCP_SHA_TYPE_512 : <S2SV_ModEnd> CCP_SHA_TYPE_512 : CCP_SHA_TYPE_512,0
310,<S2SV_ModStart> iv ) ; EVP_MD_free ( digest ) ;,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_is_fatal ( rv <S2SV_ModStart> ( rv ) ) { return rv ; } <S2SV_ModEnd> if ( session <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_is_fatal ( rv <S2SV_ModStart> ( rv ) ) { return rv ; } <S2SV_ModEnd> if ( session <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_is_fatal ( rv <S2SV_ModStart> ( rv ) ) { return rv ; } <S2SV_ModEnd> if ( session <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_is_fatal ( rv <S2SV_ModStart> ( rv ) ) { return rv ; } <S2SV_ModEnd> if ( session,0
313,"<S2SV_ModStart> ( ) ; if ( boot_cpu_data. x86 == 6 ) { x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; x86_pmu. max_counters_fixed = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. max_counters_fixed ) ; }",0
314,"<S2SV_ModStart> vp9_extra_bits [ t ] ; const int e = p -> extra ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, v, n, i ) ; } <S2SV_ModEnd> } if (",0
315,"<S2SV_ModStart>, 0 } <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> += uncompressed_hdr_size ; <S2SV_ModEnd> first_part_size = write_compressed_header <S2SV_ModStart> += first_part_size ; <S2SV_ModEnd> * size =",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> { struct ikev2_id ikev2_id_ext <S2SV_ModEnd> ; UNALIGNED_MEMCPY ( <S2SV_ModStart> UNALIGNED_MEMCPY ( & ikev2_id_ext <S2SV_ModEnd>, ext, <S2SV_ModStart> & id, ikev2_id_ext <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ikev2_pay_print ( & ikev2_id_ext <S2SV_ModEnd>, NPSTR ( <S2SV_ModStart> tpay ), ikev2_id_ext <S2SV_ModEnd>. h. <S2SV_ModStart> = ntohs ( ikev2_id_ext <S2SV_ModEnd>. h. <S2SV_ModStart> - sizeof ( ikev2_id_ext <S2SV_ModEnd> ) ; dumpascii <S2SV_ModStart> - sizeof ( ikev2_id_ext <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( ikev2_id_ext <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( ikev2_id_ext <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( ikev2_id_ext <S2SV_ModEnd> ) ; switch",0
318,<S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ; <S2SV_ModStart> ) ) { jas_tvparser_destroy ( tvp ) ;,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt2_0 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_10, mul_11, mul_12 ; <S2SV_ModStart> WORD64 mul_7, mul_10, mul_11, mul_12 <S2SV_ModEnd> ; WORD64 mul_9",0
321,"<S2SV_ModStart> mntent -> mnt_dir, mntent -> mnt_root",0
322,"<S2SV_ModStart> cm -> display_width <S2SV_ModEnd>, 16 ) <S2SV_ModStart> cm -> display_height <S2SV_ModEnd>, 16 )",0
323,"<S2SV_ModStart> ( env, <S2SV_ModEnd> server_port_val, req_server_port",0
324,"<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_side_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; return 0 ; # endif } } # endif <S2SV_ModEnd> imp_sth -> fetch_done",0
325,"<S2SV_ModStart> screen, { <S2SV_ModEnd> } ) ; <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t",0
326,<S2SV_ModStart> < 0 ) { <S2SV_ModStart> len ) ; } else { <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; },0
327,<S2SV_ModStart> ; if ( crng_ready ( <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart>, ""ID:"", strlen ( str ) <S2SV_ModEnd> ) ; strncat <S2SV_ModStart>, ""String:\'"", strlen ( str ) <S2SV_ModEnd> ) ; strncat <S2SV_ModStart>, ""\'"", strlen ( str ) <S2SV_ModEnd> ) ; }",0
329,"<S2SV_ModStart> ) ) ; if ( cJSON_IsObject ( array, which ) ) { cJSON_Delete ( cJSON_DetachItem ( array, which ) ) ; }",0
330,<S2SV_ModStart> options ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } SvcInternal * const si = get_svc_internal ( svc_ctx ) ;,0
331,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vp9_tree convert_distribution ( vp9_tree tree, unsigned int branch_ct [ ] [ 2 ], const unsigned int num_events [ ] ) { unsigned int left, right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) <S2SV_ModEnd> ; if (",0
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_VERSION, NULL, NULL ) ; parse_service_option ( CMD_PRINT_VERSION, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options <S2SV_ModEnd> ( ) ;",0
334,<S2SV_ModStart> { Py_INCREF ( Py_None_T <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return Py_None_T <S2SV_ModEnd> ; } switch,0
335,"<S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of",0
336,<S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> = MAX_BITSTREAM_BUFFER_SIZE - <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> = MAX_BITSTREAM_BUFFER_SIZE - <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_transferred <S2SV_ModEnd> = MAX_BITSTREAM_BUFFER_SIZE - <S2SV_ModStart> -> s_ivd_video_,0
337,<S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,"<S2SV_ModStart> -> alg_priv, ctx, <S2SV_ModStart> -> alg_priv, ctx,",0
339,<S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; },0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; # <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; #",0
342,"<S2SV_ModStart> ) ) { encode_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { encode_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { encode_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( c =='<S2SV_blank>') { count ++ ; continue ; },0
345,<S2SV_ModStart> ) ; } sun_data = ( unsigned char * ) malloc ( sun_info. length * sizeof ( unsigned char ) ) ; sun_pixels = ( unsigned char * ) malloc ( sun_info. length * sizeof ( unsigned char ) ) ;,0
346,"<S2SV_ModStart> ; else { fs_logger <S2SV_ModEnd> ( ""clone"",",0
347,<S2SV_ModStart> BLOCK_8X8 : return ( vp9_variance_fn_t ) <S2SV_ModStart> BLOCK_16X8 : return ( vp9_variance_fn_t ) <S2SV_ModStart> default : return ( vp9_variance_fn_t ),0
348,"<S2SV_ModStart> ; if (! subjectPublicKey ||! dh_pubkey ||! server_key ||! dh_pubkey_len ) { krb5_log ( context, KRB5_LOG_MARK, ""SubjectPublicKey <S2SV_blank> is <S2SV_blank> NULL"" ) ; retval = KRB5_E_INVAL ; break ; } if (",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( input <S2SV_ModStart> return ; } v4l2_buf = to_vb2_v4l2_buffer ( & vb -> vb. vb2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; }",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> char <S2SV_ModEnd> * zcalloc ( <S2SV_ModStart> size ) { char <S2SV_ModEnd> * ptr = <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( ( size_t ) <S2SV_ModStart> ; update_zmalloc_stat_alloc ( ( size_t ),0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart>, 0, sizeof ( adhoc_start -> ssid ) <S2SV_ModEnd> ) ; memcpy <S2SV_ModStart>, 0, sizeof ( bss_desc -> ssid. ssid ) <S2SV_ModEnd> ) ; memcpy",0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; } <S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; } <S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; } <S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; } <S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },0
354,<S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> if ( pi <S2SV_ModStart> case L2CAP_MODE_BASIC : <S2SV_ModEnd> l2cap_add_conf_opt ( & <S2SV_ModStart> rfc ) ; <S2SV_ModEnd> req -> dcid,0
355,"<S2SV_ModStart> r ) { if ( <S2SV_ModEnd> recv ( sock_fd <S2SV_ModStart>, MSG_WAITALL ) < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModEnd> ret = recv",0
356,"<S2SV_ModStart> { H264_DEC_DEBUG_PRINT ( ""\\nForbidden <S2SV_blank> bit <S2SV_blank> set <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" <S2SV_ModEnd> ) ; }",0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> rcu_read_lock ( ) <S2SV_ModStart> deleg_cur -> stateid <S2SV_ModEnd> ) ; ret <S2SV_ModStart> NULL ) { <S2SV_ModEnd> ret = 1,0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> sse ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> } else { <S2SV_ModEnd> vp9_model_rd_from_var_lapndz ( sse <S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
361,"<S2SV_ModStart> pmd ) ) { if ( pmd_trans_huge ( * pmd ) ) { if ( mincore_huge_pmd ( vma, pmd, addr, next, vec ) ) { vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } <S2SV_ModStart> vec ) ; } else { <S2SV_ModEnd> mincore_pte_range ( vma <S2SV_ModStart> vec ) ; }",0
362,<S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,<S2SV_ModStart> seg ) { int ret ; ret = <S2SV_ModEnd> vp9_read_tree ( r <S2SV_ModStart> tree_probs ) ; if ( ret < 0 ) return - 1 ; return ret ;,0
364,"<S2SV_ModStart>, src_ptr1 [ width - 1 <S2SV_ModEnd> ], extend_left <S2SV_ModStart>, src_ptr2 [ width - 1 <S2SV_ModEnd> ], extend_right",0
365,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> kgdb_hw_overflow_handler ( struct <S2SV_ModStart> regs ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> i ) ; return 0 ;,0
366,"<S2SV_ModStart> ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; depth -- ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( buf ) ; buf = buf2 ; } return ( buf ) ; case '|' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; break ; case '%' : fmt ++ ; buf = maxbuf ; break ; case '#' : fmt ++ ; buf = maxbuf ; break ; case '[' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; memset ( s, 0, sizeof ( s ) ) ; p = strchr ( fmt, ']' ) ; if ( ( size_t ) ( p - fmt + 1 ) > sizeof ( s ) ) { return ( buf ) ; } strncpy ( s, fmt, p - <S2SV_ModEnd> fmt ) ;",0
367,"<S2SV_ModStart> length ) ; <S2SV_ModEnd> if ( n <S2SV_ModStart> ) ; } n = ksz8851ReadReg ( interface, KSZ8851_REG_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; }",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ; <S2SV_ModStart> ; } } <S2SV_ModEnd> SetEvent ( pending_done_event,0
369,"<S2SV_ModStart> ; WORD32 x_8 <S2SV_ModEnd>, x_a, <S2SV_ModStart> ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; x0 = ptr_x ; pdig_rev_tbl = ptr_y + ( WORD32 ) npoints ; x2 = ptr_x + ( WORD32 ) npoints ; y3 = ptr_y + ( WORD32 ) npoints <S2SV_ModEnd> ; j0 =",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,<S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return,0
372,"<S2SV_ModStart> { int i <S2SV_ModEnd> ; _Py_IDENTIFIER ( <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( ( <S2SV_ModStart>, l ) <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_enc_cfg_t * cfg ; unsigned int i ; struct VP8_COMP * optr ; <S2SV_ModStart> priv -> base <S2SV_ModEnd> ; ctx ->,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ; <S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> fragments. ptrs ) ) ; vpx_memset ( ( void * ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 <S2SV_ModEnd> ; } if",0
376,<S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ; <S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ; <S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ; <S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ; <S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ; <S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ; <S2SV_ModStart> efe ) ; iinfo -> i_link_count = link_count ;,0
377,<S2SV_ModStart> REG_ADDR_MASK ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> DefragIPv6NoData ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest2"", DefragIPv6NoDataTest2 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest3"", DefragIPv6NoDataTest3 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest4"", DefragIPv6NoDataTest4 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest5"", DefragIPv6NoDataTest5 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest6"", DefragIPv6NoDataTest6 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest7"", DefragIPv6NoDataTest7 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest8"", DefragIPv6NoDataTest8 ) ; DefragRegisterTest ( ""DefragIPv6NoDataTest9"", DefragIPv6NoDataTest9 ) ;",0
380,<S2SV_ModStart> = object_length ; <S2SV_ModEnd> new_object. data <S2SV_ModStart> ++ ; } if ( object_data ) { <S2SV_ModStart> object_length ) ; <S2SV_ModEnd> r = coolkey_add_object_to_list,0
381,"<S2SV_ModStart> NULL ) { name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; <S2SV_ModStart> NULL ) { <S2SV_ModEnd> n = osStrlen <S2SV_ModStart> value ++ ; separator = strchr ( token, '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; }",0
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; if ( p_sys ->",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32,0
386,<S2SV_ModStart> ; act = vp8_variance32x32 <S2SV_ModEnd> ( x ->,0
387,<S2SV_ModStart> args ) { vpx_codec_err_t ret ; <S2SV_ModStart> fb ) ; ret = <S2SV_ModStart> NULL ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; },0
388,"<S2SV_ModStart> JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA <S2SV_ModEnd> ; } else <S2SV_ModStart> JPEG_MARKER_SOS ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA <S2SV_ModEnd> ; } else <S2SV_ModStart> JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA <S2SV_ModEnd> ; } else <S2SV_ModStart> JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> """,0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( n, testlist_stmt ) ; <S2SV_ModStart> c -> c_arena ) ; } else if ( NCH ( n ) == 2 ) { expr_ty e = ast_for_testlist ( c, CHILD ( n, 1 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena",0
390,<S2SV_ModStart> * mc_running_avg_y = ( unsigned char * ) ( <S2SV_ModStart> mc_running_avg -> y_buffer ) <S2SV_ModStart> * running_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ),0
391,"<S2SV_ModStart> ) ; } if ( sockPtr -> keep ) { sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( reqPtr -> avail - s ) ) ; } else { sockPtr -> flags = NS_CONN_LINETOOLONG ; Ns_Log ( Warning, ""request <S2SV_blank> header <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%d <S2SV_blank> bytes)"", ( int ) ( reqPtr -> avail - s ) ) ; }",0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ti ) ; cp0 = <S2SV_ModEnd> ti -> xtregs_cp <S2SV_ModStart> ti -> xtregs_cp ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; cp0 = <S2SV_ModEnd> ti -> xtregs_user <S2SV_ModStart> ti -> xtregs_user ; ret |= __copy_from_user ( & cp0, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs -> cp0 ) ) ; ret |= __copy_from_user ( & xtregs -> opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; return ret <S2SV_ModEnd>? - EFAULT",0
393,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif },0
394,<S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) target_undepend_item ( & <S2SV_ModEnd> xop -> dst_dev <S2SV_ModStart> xop -> dst_dev -> dev_group. cg_item ) <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
395,<S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,<S2SV_ModStart> args ) { int ret ; <S2SV_ModStart> map ) { ret = <S2SV_ModEnd> vp9_set_active_map ( ctx <S2SV_ModStart> -> cols ) ; if ( ret == VPX_CODEC_OK ) { <S2SV_ModEnd> return VPX_CODEC_OK ; <S2SV_ModStart> return VPX_CODEC_OK ; } else { <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } },0
397,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>!= 0 ) && ( foundPropEnd < image -> columns ) && ( foundPropEnd < image -> rows ) ) { if ( image_info -> debug!= MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; ( void ) DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } <S2SV_ModEnd> offset = 0",0
398,"<S2SV_ModStart>, event, 0 <S2SV_ModEnd>, 0,",0
399,"<S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) imsx * ( size_t ) imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } <S2SV_ModEnd> } for (",0
400,<S2SV_ModStart> args ) { vpx_codec_err_t ret ; <S2SV_ModStart> sd ) ; ret = <S2SV_ModEnd> vp9_copy_reference_dec ( ctx <S2SV_ModStart> sd ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; },0
401,<S2SV_ModStart> -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } if (! ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; },0
402,<S2SV_ModStart> ) ; else { ps_dec -> u2_mb_params = <S2SV_ModStart> ps_dec ) ; if ( ps_dec -> u2_mb_params == NULL ) { break ; } },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { vpx_codec_err_t ret ; <S2SV_ModStart>. buf ; ret = <S2SV_ModEnd> equal_dimensions ( cfg <S2SV_ModStart> sd ) ) { <S2SV_ModStart> ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; } else { ret = <S2SV_ModEnd> vp8_yv12_copy_frame ( cfg <S2SV_ModStart> sd ) ; if ( ret!= VP8_OK ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; }",0
404,<S2SV_ModStart> n ) { jas_uint_t i ; jas_uint_t <S2SV_ModEnd> j ; jas_seqent_t,0
405,<S2SV_ModStart> ) ) ; if ( xd -> mb_to_right_edge > 0 && xd -> mb_to_bottom_edge > 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge > 0 && xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge > 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ;,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> ( ( uint32_t <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> -> row_offset ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; offset_row = row + img -> row_offset ; <S2SV_ModStart> if ( buf!= <S2SV_ModEnd> NULL ) { <S2SV_ModStart> NULL ) { <S2SV_ModEnd> p0 = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> p1 = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> p2 = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { <S2SV_ModEnd> pa = _TIFFRead,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } ; },0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart>, 1, stride <S2SV_ModEnd>, file ) <S2SV_ModStart> file )!= stride <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t orig_attr_len ; uint32_t bytes_left ; uint32_t blocks_left ; uint32_t last_block_len ; <S2SV_ModStart> 1 ; } <S2SV_ModEnd> MD5_Init ( & <S2SV_ModStart> md5_ctx ) ; attr_len = min_t ( uint32_t, avp -> length, sizeof ( struct l2tp_avp_t ) ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), attr_len ) ; return - 1 ; } <S2SV_ModStart> MD5_DIGEST_LENGTH ) ; if ( orig_attr_len > attr_len ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp",0
413,"<S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return",0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"", sock, peer <S2SV_ModEnd>, sk )",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } <S2SV_ModStart> MT_CPTYPE_END_AUTH ) { if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } success = parse_control_packet ( NULL, 0, & cpkt ) ; } else if ( pkthdr. ptype == MT_PTYPE_ACK ) { } else if ( pkthdr. ptype == MT_PTYPE_END ) { struct mt_packet odata ; init_packet ( & odata, MT_PTYPE_END, srcmac, dstmac, sessionkey, pkthdr. counter + ( data_len - MT_HEADER_LEN ) ) ; send_udp ( & odata, 0 <S2SV_ModEnd> ) ; }",0
417,<S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } #,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart> ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":["" <S2SV_ModEnd>, 32 ) <S2SV_ModStart>",0
420,"<S2SV_ModStart>, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; ret = decode_atype_to_ptr ( & t, contents, clen, a, retrep <S2SV_ModStart> return ASN1_BAD_ID ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
421,<S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data +,0
422,"<S2SV_ModStart> ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name,",0
423,<S2SV_ModStart> ; i < 128 <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar_t <S2SV_ModEnd> buf [ 2,0
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart>, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break",0
427,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; ret = <S2SV_ModEnd> btif_dm_remove_bond ( bd_addr <S2SV_ModStart> bd_addr ) ; return ret ;,0
428,<S2SV_ModStart> ; avail = ( int ) ( <S2SV_ModStart> buf -> cursor ),0
429,<S2SV_ModStart> = x ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ; oe_errno = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ;,0
431,"<S2SV_ModStart> & new_service_options ) { <S2SV_ModStart> ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; } else { <S2SV_ModEnd> s_log ( LOG_INFO <S2SV_ModStart> servname ) ; } <S2SV_ModStart> & new_service_options ) { <S2SV_ModStart> errstr ) ; } else { <S2SV_ModEnd> s_log ( LOG_ERR <S2SV_ModStart> errstr ) ; }",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_PTR_MAX : * ( size_t * ) val = ms -> ptr_max ; return 0 ; case MAGIC_PARAM_PTR_MIN : * ( size_t * ) val = ms -> ptr_min ; return 0 ; case MAGIC_PARAM_PTR_MAX : * ( size_t * ) val = ms -> ptr_max ; return 0 ; case MAGIC_PARAM_PTR_MIN : * ( size_t * ) val = ms -> ptr_min ; return 0 ; case MAGIC_PARAM_PTR_MAX : * ( size_t * ) val = ms -> ptr_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) continue ;,0
435,"<S2SV_ModStart> ; # endif strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> & state, <S2SV_ModEnd> md5sum + 1 <S2SV_ModStart>, MT_CPTYPE_PASSWORD, ( const md5_byte_t * ) md5data, sizeof ( md5sum ) <S2SV_ModEnd> ) ; plen <S2SV_ModStart>, MT_CPTYPE_USERNAME, ( const char * ) <S2SV_ModStart>, MT_CPTYPE_TERM_TYPE, ( const char * ) <S2SV_ModStart>, width, sizeof ( width ) <S2SV_ModEnd> ) ; plen <S2SV_ModStart>, height, sizeof ( height ) <S2SV_ModEnd> ) ; }",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( Prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> SNMP_FREE ( confmibs <S2SV_ModStart> confmibdir ) ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; } if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; },0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart>, src_ybc -> y_stride <S2SV_ModEnd> ) ; src <S2SV_ModStart> += src_ybc -> y_width <S2SV_ModEnd> ; dst += <S2SV_ModStart> += dst_ybc -> y_width <S2SV_ModEnd> ; } }",0
440,<S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MACROBLOCK * x <S2SV_ModStart> -> mb ; <S2SV_ModEnd> vp9_zero ( cpi <S2SV_ModStart> pred_mv ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
441,"<S2SV_ModStart> ; int hexdump <S2SV_ModEnd> ; u_int link_type <S2SV_ModStart> length ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s], <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown, <S2SV_blank> type: <S2SV_blank> %u"", lmp_com_header -> msg_type ), bittok2str ( lmp_header_flag_values, ""none"", lmp_obj_ctype ), len ) ) ; return ; } <S2SV_ModStart> ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s], <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown, <S2SV_blank> type: <S2SV_blank> %u"", lmp_obj",0
442,<S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs,0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> res = vpx_codec_enc_config_default,0
444,"<S2SV_ModStart>, GFP_ATOMIC ) <S2SV_ModEnd> ) { kfree_skb",0
445,"<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBFILES: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> files <S2SV_blank>...\\n"" <S2SV_ModEnd>, env_var ) <S2SV_ModStart> ; } } if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> files <S2SV_blank>...\\n"" <S2SV_ModEnd>, env_var ) <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> files <S2SV_blank>...\\n"" <S2SV_ModEnd>, env_var ) <S2SV_ModStart> ( ""init_mib"", ""Seen <S2SV_blank> MIBFILES: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> files <S2SV_blank>...\\n"" <S2SV_ModEnd>, env_var )",0
446,"<S2SV_ModStart> EV_KEY ) ; if ( <S2SV_ModStart>, EV_REL ) < 0 ) BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> event <S2SV_blank> bit"", __FUNCTION__ ) ; if ( <S2SV_ModEnd> ioctl ( fd <S2SV_ModStart>, NULL ) < 0 ) BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> event <S2SV_blank> bit"", __FUNCTION__ ) ; if ( ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id ) < 0 ) BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> key <S2SV_blank> bit"", __FUNCTION__ ) ; if ( ioctl ( fd, UI_DEV_CREATE, NULL ) < 0 ) BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; <S2SV_ModEnd> return fd ;",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vp9_lpf_horizontal_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_horizontal_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_gss_ctx_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_gss_ctx_t <S2SV_ModEnd> ctx ; krb5_error_code,0
450,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> appendImageToList ( & <S2SV_ModStart> image, screen ) ; if ( image == ( Image * ) NULL ) InheritException ( exception, & image -> exception",0
451,"<S2SV_ModStart>, START_CODE_PREFIX_LEN ) == <S2SV_ModEnd> START_CODE_PREFIX ) {",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> ) ; } mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ;",0
454,<S2SV_ModStart> ; int tmp ; mutex_lock ( & exitcode_mutex ) <S2SV_ModStart> count ) ) { mutex_unlock ( & exitcode_mutex ) ; <S2SV_ModStart> - EFAULT ; } <S2SV_ModStart> end ) ) { mutex_unlock ( & exitcode_mutex ) ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> = tmp ; mutex_unlock ( & exitcode_mutex ) ;,0
455,<S2SV_ModStart> == 'O' ) && <S2SV_ModEnd> ( __libc_enable_secure? <S2SV_ModStart> l -> l_origin <S2SV_ModEnd> : _dl_platform ),0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( pDecInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecInst -> str ) ; # endif <S2SV_ModStart> ) ; } <S2SV_ModEnd> rv = h264bsdInit <S2SV_ModStart> HANTRO_OK ) { <S2SV_ModEnd> return ( H264SWDEC_MEMFAIL",0
457,"<S2SV_ModStart> 5 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ;",0
458,"<S2SV_ModStart> ) break ; if ( image_info -> ping!= MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
459,<S2SV_ModStart> goto errout ; _ogg_free ( info -> stagebooks ) ; _ogg_free ( info -> partitions ) ; _ogg_free ( info -> stagemasks ) ; _ogg_free ( info -> stagebooks ) ;,0
460,<S2SV_ModStart> ; if (! key_data <S2SV_ModEnd> ) goto cleanup,0
461,"<S2SV_ModStart> * self, int <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; if ( nByte == 0 ) { rc = SQLITE_NOMEM_BKPT ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> memcpy ( pCsr,0
463,<S2SV_ModStart> filp ) { return <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
464,"<S2SV_ModStart> asdl_seq * orelse, asdl_seq * iter_body <S2SV_ModStart>. AsyncFor. iter_body = iter_body ; p -> v. AsyncFor. <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. iter_orelse = iter_orelse",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR",0
467,"<S2SV_ModStart> UINT error ; # ifdef WITH_DEBUG_RDPEI WLog_DBG ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 """", eventId, rdpei_eventid_string ( eventId ), pduLength ) ; # endif <S2SV_ModStart> pduLength ) ; <S2SV_ModEnd> switch ( eventId",0
468,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_connect <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE <S2SV_ModEnd> ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int err <S2SV_ModStart> = 1 ; err = <S2SV_ModEnd> ip6_xmit ( sk <S2SV_ModStart> tclass ) ; if ( err ) SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; return err ;",0
470,"<S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto",0
471,<S2SV_ModStart> UINT32 failureCode ; if ( nego -> state!= NEGO_STATE_FAIL ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; },0
472,<S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; },0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if (! psf <S2SV_ModEnd> ) { sf_errno,0
475,"<S2SV_ModStart> vp9_COMMON * cm, int <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
476,<S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> vp9_setup_pre_planes ( xd,0
477,"<S2SV_ModStart> ( sp, SLT_HttpGarbage <S2SV_ModEnd>, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" )",0
478,"<S2SV_ModStart> 0x07 char magick [ 12 ] ; Image * image ; IndexPacket index ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; register IndexPacket * indexes ; register ssize_t x ; size_t bits_per_pixel, number_colormaps, number_planes_filled, one, pixel_info_length ; unsigned char background_color [ 256 ], * colormap, plane, * pixels ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { <S2SV_ModEnd> image -> page <S2SV_ModStart> image ) ; <S2SV_ModEnd> flags = (",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ps_cur_poc -> i4_pic_order_cnt_msb ) && ( ps_cur_poc -> i4_pic_order_cnt_lsb > 0 ),0
481,<S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> ENODEV ; } <S2SV_ModEnd> return 0 ;,0
482,"<S2SV_ModStart> -> columns, image -> rows <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> size_t ) ( image -> rows <S2SV_ModEnd> * image ->",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,<S2SV_ModStart> ( datao + 8 <S2SV_ModEnd> < datao ) <S2SV_ModStart> ( datao + 8 <S2SV_ModEnd> < 2 ) <S2SV_ModStart> ( datao + 8 <S2SV_ModEnd> > buf_size ) <S2SV_ModStart> ; datao += 8 <S2SV_ModEnd> ; exif_mnote_data_fuji_clear (,0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName,",0
486,<S2SV_ModStart> ( stunnel_locks [ SESSION_LOCK_SECTIONS <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( stunnel_locks [ SESSION_LOCK_SECTIONS <S2SV_ModEnd> ] ) ;,0
487,<S2SV_ModStart> void ) { if ( mnemonic [ 0 ] == '\\0' ) { mnemonic [ 0 ] = '\\0' ; },0
488,"<S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT3 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT4 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT3 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT4 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg (",0
489,"<S2SV_ModStart> ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; if (",0
490,<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; <S2SV_ModStart> UWORD32 u4_max_poc_lsb ; <S2SV_ModEnd> dpb_mgr_t * ps_dpb_mgr <S2SV_ModStart> -> pv_mv_buf_mgr ; <S2SV_ModEnd> UWORD32 r_idx ;,0
491,"<S2SV_ModStart> child ) { if (! ( <S2SV_ModStart>, fmt ) ) ) fail = 1 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) fail = 1 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } <S2SV_ModEnd> if ( str",0
492,<S2SV_ModStart> other ) ) { unix_state_lock ( sk ) ; <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; },0
493,"<S2SV_ModStart>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", ( int ) x, ( int ) y, ( int ) w, ( int ) <S2SV_ModEnd> h ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_INTERNAL_ERROR <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * fb ; # if VPX_VERSION_NUM >= VPX_VERSION_NUM ( 17, 11, 0 ) vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; # else <S2SV_ModStart> NULL ) ; # endif <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } # if VPX_VERSION_NUM >= VPX_VERSION_NUM ( 17, 11, 0 ) vp9_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; # else return VPX_CODEC_INVALID_PARAM ; # endif",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) {",0
498,<S2SV_ModStart> ; # if defined ( uECC_VLI_NATIVE_LITTLE_ENDIAN ) || defined ( __clang__ ) <S2SV_ModEnd> uECC_word_t * p,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]\\n"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]\\n"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } } <S2SV_null>,0
501,"<S2SV_ModStart> [ ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; int dcount",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> pixm, * pixd <S2SV_ModEnd> ; PROCNAME ( <S2SV_ModStart> NULL ) ; pixc = pixFewColorsOctcubeQuant2 ( pixs, level, darkthresh, lightthresh, diffthresh, minfract, maxspan ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ;",0
504,<S2SV_ModStart>. vf = vp8_mse16x8 <S2SV_ModEnd> ; xd ->,0
505,<S2SV_ModStart> int overhead = 32 <S2SV_ModEnd> + 4 + <S2SV_ModStart> int size = 32 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( size - 32 <S2SV_ModEnd> ) > conn,0
506,"<S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 7 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FINAL ; return ; }",0
507,<S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm,0
508,<S2SV_ModStart> TJA1101_CONFIG1_MII_MODE ; value &= ~ <S2SV_ModEnd> TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg,0
509,<S2SV_ModStart> ) ; } if ( kwonlyargs ) _Py_asdl_seq_free ( kwonlyargs ) ; if ( posdefaults ) _Py_asdl_seq_free ( posdefaults ) ; if ( kwdefaults ) _Py_asdl_seq_free ( kwdefaults ) ; if ( posargs ) _Py_asdl_seq_free ( posargs ) ; if ( kwdefaults ) _Py_asdl_seq_free ( kwdefaults ) ; if ( kwdefaults ) _Py_asdl_seq_free ( kwdefaults ) ; if ( posargs ) _Py_asdl_seq_free ( posargs ) ; if ( kwdefaults ) _Py_asdl_seq_free ( kwdefaults ) ;,0
510,"<S2SV_ModStart> + y ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> frame_height ) { vpx_memset ( left_col, 128, 64 ) ; <S2SV_ModStart> } else { vpx_memset ( left_col, 128, 64 ) ; <S2SV_ModStart> - y0 ; vpx_memset ( right_col, 128, 64 ) ; <S2SV_ModStart> } else { vpx_memset ( right_col, 128, 64 ) ; <S2SV_ModStart> } else { vpx_memset ( right_col, 128, 64 ) ;",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cm -> frame_type ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0",0
514,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error ) <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, parsetime_error )",0
515,"<S2SV_ModStart> ; p = strpbrk <S2SV_ModEnd> ( context -> <S2SV_ModStart> -> buffer, "" <S2SV_blank>?"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; q = strpbrk <S2SV_ModEnd> ( p + <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd>,'<S2SV_blank>') <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd> ) > HTTP_CLIENT_BUFFER_SIZE <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd> - q ) <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd> - m ;",0
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,"<S2SV_ModStart> ( xd -> ref_lf_delta <S2SV_ModEnd>, 0, <S2SV_ModStart> ( xd -> ref_lf_delta <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( xd -> mode_lf_delta <S2SV_ModEnd>, 0, <S2SV_ModStart> ( xd -> mode_lf_delta <S2SV_ModEnd> ) ) ;",0
518,"<S2SV_ModStart> ; uint16_t n = 0 <S2SV_ModStart>, ENC624J600_REG_ERXRDPT, ( uint16_t ) <S2SV_ModStart>, ENC624J600_REG_ERXTAIL, ( uint16_t ) ( <S2SV_ModStart> nextPacket - 2 )",0
519,"<S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE rb_schema ; <S2SV_ModStart> VALUE rb_schema ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( ( const char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) ) ;",0
520,"<S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr )",0
521,"<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state -> <S2SV_ModStart> - 1 ; } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; }",0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if <S2SV_ModStart> - EINVAL ; spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> match -> type <S2SV_ModStart> ; } } spin_unlock ( & po -> bind_lock ) ; if ( err &&! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; },1
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> ( u >> 8 <S2SV_ModEnd> ) & SURROGATE_BITS <S2SV_ModStart> ( u & ( SURROGATE_BITS - 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & ( SURROGATE_BITS - 1 ) ) <S2SV_ModEnd> ) ; },0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; <S2SV_ModEnd> rc = pcmk_ok",0
526,"<S2SV_ModStart>, KSZ8851_REG_RXFDPR, RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart>, KSZ8851_REG_RXQCR, RXQCR_SDA_MASK <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart>, KSZ8851_REG_RXQCR, RXQCR_SDA_MASK <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> stmt_ty ast_for_funcdef_impl ( <S2SV_ModEnd> const node * <S2SV_ModStart> n, asdl_seq * <S2SV_ModStart> returns = NULL <S2SV_ModEnd> ; string type_comment <S2SV_ModStart> } if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body <S2SV_ModEnd> ) return AsyncFunctionDef",0
528,"<S2SV_ModStart> ( mm, 0xA000000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA000000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA000000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA000000 <S2SV_ModEnd>, & ptl",0
529,"<S2SV_ModStart> token_ptr ) { tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start_ptr ) ; tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start_ptr ) ; tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start_ptr ) ; tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start_ptr ) ; tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start_ptr ) ; tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start_ptr ) ; tr_debug <S2SV_ModEnd> ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) <S2SV_ModStart> packet_data_start",0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage",0
531,<S2SV_ModStart> 4 ) ; <S2SV_ModEnd> RAW ( row <S2SV_ModStart> & 1 ] ; <S2SV_ModEnd> } } <S2SV_null>,0
532,<S2SV_ModStart> ; if (! nl ) { up_write ( & _hash_lock ) ; return - ENOMEM ; } if (,0
533,"<S2SV_ModStart> ( clone_info ) ; if ( clone_info -> quantum_type == QuantumTypeLinear ) clone_info -> quantum_type = Linear ; else clone_info -> quantum_type = QuantumTypeLinear ; if ( clone_info -> quantum_type == QuantumTypeLinear ) clone_info -> quantum_type = Linear ; if ( clone_info -> quantum_type == QuantumTypeLinear ) clone_info -> quantum_type = Linear ; if ( clone_info -> quantum_type == QuantumTypeLinear ) clone_info -> quantum_type = Linear ; else clone_info -> quantum_type = QuantumTypeLinear ; if ( clone_info -> quantum_type == QuantumTypeLinear ) clone_info -> quantum_type = Linear ; if ( logging ) LogMagickEvent ( CoderEvent, GetMagickModule ( ), ""exit"" )",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> += 1 ; <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> goto out ; if ( flags & RENAME_EXCHANGE ) { old_opaque = ovl_dentry_get_opaque ( old ) ; new_opaque = ovl_dentry_get_opaque ( new ) ; } <S2SV_ModStart> goto out ; if ( flags & RENAME_EXCHANGE ) { old_opaque = ovl_dentry_get_opaque ( old ) ; new_opaque = ovl_dentry_get_opaque ( new ) ; } <S2SV_ModStart> goto out ; if ( flags & RENAME_EXCHANGE ) { new_opaque = ovl_dentry_get_opaque ( new ) ; old_opaque = ovl_dentry_get_opaque ( old ) ; new_opaque = ovl_dentry_get_opaque ( new ) ; },0
537,"<S2SV_ModStart> plane ++ ) { <S2SV_ModStart> arg ) ; vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; }",0
538,<S2SV_ModStart> -> e_mbd ; if ( frame_is_intra_only ( cm ) ) { <S2SV_ModStart> = bsize ; <S2SV_ModEnd> vp9_pick_inter_mode ( cpi <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> ) ; } },0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf <S2SV_ModStart> err ) ; <S2SV_ModEnd> superblockFree ( &",0
540,<S2SV_ModStart> -> ranges = ( MappedRange * ),0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_NO_UPD_GF || <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_ARF <S2SV_ModStart> flags & VP8_EFLAG_NO_UPD_ARF <S2SV_ModEnd> ) ) {,0
542,<S2SV_ModStart> ( clone_info ) ; clone_info = CloneImageInfo ( image_info ) ; if ( clone_info -> quantum_type == QuantumTypeLinear ) clone_info -> quantum_type = MagickLinear ; if ( image_info -> quantum_type == QuantumLinear ) clone_info -> quantum_type = MagickLinear ; if ( image_info -> quantum_type == QuantumLinear ) clone_info -> quantum_type = MagickLinear ; if ( clone_info -> quantum_type == QuantumLinear ) clone_info -> quantum_type = MagickLinear ; if ( clone_info -> quantum_type == QuantumLinear ) clone_info -> quantum_type = MagickLinear ; if ( image_info -> quantum_type == QuantumLinear ) clone_info -> quantum_type = MagickLinear ;,0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, uint32_t <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int <S2SV_ModEnd> tlen ; const <S2SV_ModStart>, tok2str ( bgp_origin_values <S2SV_ModEnd>, ""Unknown <S2SV_blank> Origin <S2SV_blank> Typecode"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as4_path_values <S2SV_ModEnd>, ""?"",",0
545,"<S2SV_ModStart> -> outputbuffer, ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; vpx_memmove <S2SV_ModEnd> ( dest,",0
547,"<S2SV_ModStart>, tokenAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount <S2SV_ModStart>, tokenMinAmount, <S2SV_ModEnd> tokenMinAmount, tokenMinAmount",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= nintf ) { dev_warn ( ddev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", iad_num ) ; retval = - EINVAL ; break ; }",0
549,"<S2SV_ModStart>, event, 0 <S2SV_ModEnd>, 0,",0
550,<S2SV_ModStart> ; distortion = vp8_variance_16x16 <S2SV_ModEnd> ( * (,0
551,"<S2SV_ModStart>, ENC624J600_REG_MAADR1, ( uint16_t ) <S2SV_ModStart>, ENC624J600_REG_MAADR2, ( uint16_t ) <S2SV_ModStart>, ENC624J600_REG_MAADR3, ( uint16_t )",0
552,<S2SV_ModStart> header ) + 1 <S2SV_ModEnd> ; maxlen = <S2SV_ModStart> header ) - 1 <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> = INTRA_DC_H_V ; if ( frame_is_intra_only ( cm ) ) { <S2SV_ModStart> = INTRA_DC_H_V ; } else { sf -> intra_y_mode_mask [ TX_32X32 ] = 0 ; sf -> intra_uv_mode_mask [ TX_16X16 ] = 0 ; } <S2SV_ModStart> = INTRA_DC_H_V ; if ( frame_is_intra_only ( cm ) ) { <S2SV_ModStart> = INTRA_DC_H_V ; } else { sf -> intra_y_mode_mask [ TX_32X32 ] = 0 ; sf -> intra_uv_mode_mask [ TX_16X32 ] = 0 ; sf -> intra_uv_mode_mask [ TX_16X16 ] = 0 ; },0
555,"<S2SV_ModStart> pfds ) ; if ( pfds [ 0 ]. revents ) { asrt ( pfds [ 0 ]. fd == ts [ h ]. cmd_fdr ) ; if (! process_cmd_sock ( h ) ) { APPL_TRACE_DEBUG ( ""h:%d, <S2SV_blank> process_cmd_sock <S2SV_blank> return <S2SV_blank> false, <S2SV_blank> exit..."", h ) ; break ; } if ( ret == 1 ) need_process_data_fd = FALSE ; else ret -- ; } if ( need_process_data_fd ) process_data_sock ( h, pfds, ret ) ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } ts [",0
556,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( goodsize > LUAI_STACKSIZE <S2SV_ModEnd> ) goodsize = <S2SV_ModStart> ) goodsize = LUAI_STACKSIZE <S2SV_ModEnd> ; if ( <S2SV_ModStart> inuse <= ( LUAI_STACKSIZE <S2SV_ModEnd> - EXTRA_STACK ),0
557,<S2SV_ModStart> o ) { <S2SV_ModEnd> return Py_None ;,0
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> 128 ] ; s = _PyUnicode_AsString ( errstr ) ; if (! s ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { <S2SV_ModStart> buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s\\n"" <S2SV_ModEnd>, s ) <S2SV_ModStart> buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s\\n"" <S2SV_ModEnd>, s ) <S2SV_ModStart> buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error\\n"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> 128 ] ; s = _PyUnicode_AsString ( errstr ) ; if (! s ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error\\n"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error\\n"" ) ; } } <S2SV_ModEnd> Py_DECREF ( errstr",0
559,<S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ;,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,<S2SV_ModStart> = cJSON_Object ; else item -> type = cJSON_Null ;,0
563,"<S2SV_ModStart> ( dbh, <S2SV_ModEnd> mysql_error ( imp_dbh <S2SV_ModStart> -> pmysql ) <S2SV_ModEnd>, mysql_sqlstate (",0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; need_close = true ; } <S2SV_ModStart>! size ) { <S2SV_ModStart> slot ) ; need_close = true ; },0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr <S2SV_ModEnd> ; version =,0
566,<S2SV_ModStart> ; sh = ( sds ),0
567,<S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> for ( y <S2SV_ModStart> ( y = 1 <S2SV_ModEnd> ; y < <S2SV_ModStart> ( x = 1 <S2SV_ModEnd> ; x <,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> rc -> frames_since_key / <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ) ; },0
570,"<S2SV_ModStart> TX_MODE tx_mode = vp9_read_uint <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vp9_read_uint <S2SV_ModEnd> ( r )",0
571,"<S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> [ plane ] <S2SV_ModEnd> ; MB_MODE_INFO * <S2SV_ModStart> -> segment_id ; <S2SV_ModEnd> const int16_t * <S2SV_ModStart> int seg_eob = get_tx_eob_branch <S2SV_ModEnd> ( & cpi <S2SV_ModStart> tx_size ) ; <S2SV_ModEnd> pt = get_entropy_context <S2SV_ModStart> = get_entropy_context ( <S2SV_ModEnd> pd -> above_context,0
573,"<S2SV_ModStart> pSelect -> pSrc ; renameWalkWith ( pWalker, pSelect ) <S2SV_ModStart> WRC_Abort ; } <S2SV_ModEnd> return WRC_Continue ;",0
574,"<S2SV_ModStart> users ) ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> creating <S2SV_blank> service\\n"" ) ; <S2SV_ModStart> ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; <S2SV_ModStart> = 1024 ; <S2SV_ModEnd> return serv ;",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = { 0 }, service_name = { 0 } <S2SV_ModEnd> ; OM_uint32 minor_stat",0
577,<S2SV_ModStart> ssize_t ret = sendmsg_poll <S2SV_ModEnd> ( socket ->,0
578,"<S2SV_ModStart> s ) { if ( <S2SV_ModEnd> send ( sock_fd <S2SV_ModStart>, 0 ) <S2SV_ModEnd> < 0 && <S2SV_ModStart> == EINTR ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d"", sock_fd, errno ) ; return - 1 ; } <S2SV_ModEnd> if ( ret",0
579,"<S2SV_ModStart> } else { <S2SV_ModEnd> if ( __xml_acl_check <S2SV_ModStart> xml ), ID ( xml ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> } free ( ID ( xml ) <S2SV_ModEnd> ) ; return",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> const SvcInternal *,0
581,<S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( arg ) ;,0
582,<S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( strcmp,0
583,<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> ) 0 ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
584,"<S2SV_ModStart> ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_exports_table ( & table_start ) == FALSE ) return FALSE",0
585,<S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> & KEEPENV ) env -> count = 0 ; <S2SV_ModEnd> return env ;,0
586,"<S2SV_ModStart> ; vp9_clear_system_state ( ) ; vpx_memset ( & cpi -> in_frame_q_adj_ratio, 0, sizeof ( in_frame_q_adj_ratio )",0
587,"<S2SV_ModStart> ( ""AsyncFunctionDef"", & AST_type, <S2SV_ModStart> ( ""ClassDef"", & AST_type, <S2SV_ModStart> ( ""Return"", & AST_type, <S2SV_ModStart> ( ""Delete"", & AST_type, <S2SV_ModStart> ( ""Assign"", & AST_type,",0
588,"<S2SV_ModStart> return ; } if ( <S2SV_ModStart>, 16 )!= 16 ) LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> to <S2SV_blank> log <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) )",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n"" <S2SV_ModEnd>, s, <S2SV_ModStart> ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.\\n"" <S2SV_ModEnd>, VERSION, <S2SV_ModStart> ( outpos, ""Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"" <S2SV_ModEnd>, nameobject )",0
591,"<S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> * w, vp9_intra_mode_encodings * encodings <S2SV_ModEnd>, const vp9_prob <S2SV_ModStart>, vp9_intra_mode_tree, encodings <S2SV_ModEnd>, & intra_mode_encodings",0
593,"<S2SV_ModStart> ) ) goto err_replace <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> err ) goto err_replace <S2SV_ModEnd> ; return 0 <S2SV_ModStart> return 0 ; err_replace : nfp_abm_u32_knode_replace ( alink, knode, proto, extack ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> cx_time,0
595,"<S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if ( <S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if ( <S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if ( <S2SV_ModStart> ; if ( flatpak_check_export_version ( app, branch, arch, metadata, previous_ids, cancellable, error ) ) goto out ; if (",0
596,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; vpx_memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; vpx_memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ;",0
597,"<S2SV_ModStart> = 0 ; if ( oxcf ) { <S2SV_ModStart> = 0 ; } else { pbi -> oxcf = vpx_memalign ( 32, sizeof ( VP9D_CONFIG ) ) ; }",0
598,"<S2SV_ModStart> ( GF_LOG_ERROR, GF_LOG_WARNING <S2SV_ModEnd>, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n""",0
599,<S2SV_ModStart> ) { struct inet_request_sock * req_inet ; struct <S2SV_ModStart> ip_options * opt <S2SV_ModEnd> ; req_inet =,0
600,"<S2SV_ModStart> * tokens, <S2SV_ModEnd> vp9_tree_index * tree <S2SV_ModStart> tree [ i <S2SV_ModEnd> ] ; if <S2SV_ModStart> { tokens [ <S2SV_ModEnd> j ]. <S2SV_ModStart> ; tokens [ <S2SV_ModEnd> j ].",0
601,<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) return res ; },0
602,"<S2SV_ModStart> { ret = get_tag_from_asn1 <S2SV_ModEnd> ( asn1,",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint16_t <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> in ) { uint16_t <S2SV_ModEnd> s [ 16 <S2SV_ModStart> ] ; const uint16_t <S2SV_ModEnd> k__cospi_p01_p31 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p31_m01 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p27_m05 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p09_p23 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p23_p09 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p13_p19 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p17_p15 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p15_m17 = pair,0
604,<S2SV_ModStart> occf ) { return <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> rc -> av_per_frame_bandwidth <S2SV_ModEnd> / 100 ; <S2SV_ModStart> / 100 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
605,<S2SV_ModStart> in ) { uint8_t <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,0
606,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> int segment_id = <S2SV_ModStart> -> segment_id ; <S2SV_ModEnd> int mi_width = <S2SV_ModStart> int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; <S2SV_ModEnd> int mi_height = <S2SV_ModStart> int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct <S2SV_ModEnd> ; if (,0
607,<S2SV_ModStart> ( x >> 0 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> <S2SV_ModStart> ( x >> 1 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 2 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 3 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 4 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 5 ) ; psf -> header [ psf -> headindex ++ ] = ( x >>,0
608,"<S2SV_ModStart> uint32_t value ; uint64_t <S2SV_ModEnd> position, zeroes <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"" <S2SV_ModEnd>, name ) <S2SV_ModStart>, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %"" PRIu64 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu64 "",%"" PRIu64 ""].\\n"" <S2SV_ModEnd>, name,",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~""",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_origin. len",0
611,"<S2SV_ModStart>, y, <S2SV_ModEnd> dds_info -> height <S2SV_ModStart> dds_info -> height, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b <S2SV_ModEnd> [ code ]",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > h ) w = h * BzK ; if ( w > w ) w = w * BzK ; if ( h > h ) h = h * BzK ; if ( w > w ) w = w * BzK ; if ( h > h ) h = h * BzK ;,0
614,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> sprintf ( outpos <S2SV_ModStart> y ) ; outpos += sprintf ( outpos, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""%s: <S2SV_blank> received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"", __func__ <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> recon_uv_stride ) ; # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) <S2SV_ModStart> recon_y_stride ) ; # endif <S2SV_ModStart> recon_uv_stride ) ; # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) <S2SV_ModStart> recon_y_stride ) ; # endif <S2SV_ModStart> recon_uv_stride ) ; # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) <S2SV_ModStart> recon_y_stride ) ; # endif <S2SV_ModStart> recon_uv_stride ) ; # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) <S2SV_ModStart> recon_y_stride ) ; # endif,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> ( xWantedSize & portBYTE_ALIGNMENT_MASK_MASK <S2SV_ModEnd> )!= 0x00 <S2SV_ModStart> ( xWantedSize & portBYTE_ALIGNMENT_MASK_MASK <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( xWantedSize & portBYTE_ALIGNMENT_MASK_MASK <S2SV_ModEnd> ) > heapMINIMUM_BLOCK_SIZE <S2SV_ModStart> pxBlock ) + portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) ; pxNewBlockLink <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumEverFreeBytesRemaining <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumEverFreeBytesRemaining <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumEverFreeBytesRemaining <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumEverFreeBytesRemaining <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumEverFreeBytesRemaining <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumEverFreeBytesRemaining <S2SV_ModStart> ( xFreeBytesRemaining < portBYTE_ALIGNMENT_MASK <S2SV_ModEnd> ) { xMinimumE,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_iht8x8_add ( TX_TYPE <S2SV_ModStart> DCT_DCT ) { return <S2SV_ModStart> } else { return,0
620,"<S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart>, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d\\n"" <S2SV_ModEnd>, left,",0
621,"<S2SV_ModStart> } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""size"" ) ) { size = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""level"" ) ) { level = atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = httpGetTicks ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } } } if ( size < ( 10 * 1000 ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" <S2SV_ModEnd> ) ; return",0
622,"<S2SV_ModStart> coef_branch_ct ) { unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> int i,",0
623,"<S2SV_ModStart> assert ( name ) ; log_debug ( ""toggle_utf8(%s, <S2SV_blank> fd=%d, <S2SV_blank> utf8=%d)"", name, fd, utf8",0
624,"<S2SV_ModStart> ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if (",0
625,<S2SV_ModStart> ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags,0
626,"<S2SV_ModStart> int stride, uint32_t uv_block_size, uint32_t mv_row, uint32_t mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { <S2SV_ModEnd> enum mv_precision mv_precision_uv <S2SV_ModStart> int uv_stride ; <S2SV_ModEnd> vp9_build_inter_predictor ( y_mb_ptr <S2SV_ModStart>, stride, <S2SV_ModEnd> & mv, <S2SV_ModStart>, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, <S2SV_ModEnd> & pred [ <S2SV_ModStart>, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, <S2SV_ModEnd> & mv, <S2SV_ModStart>, scale, uv_block_size, uv_block_size <S2SV_ModEnd>, which_mv,",0
627,"<S2SV_ModStart> = TRUE ; <S2SV_ModEnd> bufp = find_optparam <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> { config_error_add ( ""Not",0
628,<S2SV_ModStart> i ) { if (! numbers [ i ] ) continue ;,0
629,<S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> pbi -> num_tile_workers <S2SV_ModEnd> ; CHECK_MEM_ERROR (,0
630,<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> case 0x505244 : # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> ( ) ; # endif <S2SV_ModStart> case 0x524946 : # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> get2 ( ) ; # endif <S2SV_ModStart> case 0x524950 : # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> get2 ( ) ; # endif <S2SV_ModStart> case 0x524950 : # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> get2 ( ) ; # endif,0
631,"<S2SV_ModStart> ++ ) { const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; <S2SV_ModStart>, segment_rdmult ; <S2SV_ModEnd> RDMULT_RATIO ( i",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_status = error -> error_status ; },0
633,"<S2SV_ModStart> pocstruct_t * ps_prev_poc = NULL, * ps_cur_poc = NULL <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L <S2SV_ModStart> -> allgc ; markold ( g, g -> survival, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart> ) ; } if (! safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; }",0
639,"<S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = socket ( AF_INET <S2SV_ModEnd>, SOCK_STREAM, <S2SV_ModStart> = getaddrinfo ( private -> <S2SV_ModStart> ( ""Got <S2SV_blank> address <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s"", private -> <S2SV_ModStart> -> ai_addr, private ->",0
640,<S2SV_ModStart> ; cpi -> <S2SV_ModEnd> frames_till_gf_update_due = 0 <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0,0
641,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [nsrcs=%d]"" <S2SV_ModEnd>, nsrcs )",0
642,<S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> ENODEV ; } return <S2SV_ModEnd> mptctl_do_mpt_command ( karg <S2SV_ModStart> MF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
643,"<S2SV_ModStart>, length, <S2SV_ModEnd> value, version <S2SV_ModStart>, version, <S2SV_ModEnd> width ; assert <S2SV_ModStart> MagickSignature ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( exception!= ( ExceptionInfo * ) NULL ) ; assert ( exception -> signature == MagickSignature ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( ReadBlobString <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"", name, & width ) == 2 ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen ( name ) - 6, ""_width"" ) == 0 ) ) break ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( ( strlen ( name ) >= 7 ) && ( LocaleCompare ( name + strlen ( name ) - 7 <S2SV_ModEnd>, ""_height"" )",0
644,<S2SV_ModStart> ) ; } if (! ( qcc -> flags & JPC_QCD_FLAG_BANDWIDTH ) ) { qcc -> flags |= JPC_QCD_FLAG_BANDWIDTH ; } if (! ( qcc -> flags & JPC_QCD_FLAG_BANDHEIGHT ) ) { qcc -> flags |= JPC_QCD_FLAG_BANDHEIGHT ; } if (! ( qcc -> flags & JPC_QCD_FLAG_BANDWIDTH ) ) { qcc -> flags |= JPC_QCD_FLAG_BANDWIDTH ; } if (! ( qcc -> flags & JPC_QCD_FLAG_BANDHEIGHT ) ) { qcc -> flags |= JPC_QCD_FLAG_BANDWIDTH ; } if (! ( qcc -> flags & JPC_QCD_FLAG_BANDWIDTH ) ) { qcc -> flags |= JPC_QCD_FLAG_BANDHEIGHT ; },0
645,<S2SV_ModStart> ) ; } free ( str_modes ) ; free ( str_args ) ; free ( new_modes ) ; free ( new_args ) ;,0
646,"<S2SV_ModStart> int v = vp9_read_uint <S2SV_ModEnd> ( r,",0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_cost_tokens_skip ( int <S2SV_ModStart> 0 ) ; return,0
648,"<S2SV_ModStart> REFERENCE_MODE mode = vp9_read_mode <S2SV_ModEnd> ( r, <S2SV_ModStart> [ ctx ], cm -> fc. comp_inter_prob [ ctx ]",0
649,<S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if,0
650,"<S2SV_ModStart> nd_opt_type ) ; if ( opp -> nd_opt_type == ND_OPT_LINK_INFO ) { l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; } <S2SV_ModStart> nd_opt_type ) ; if ( opp -> nd_opt_type == ND_OPT_LINK_INFO ) { l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; } <S2SV_ModStart> nd_opt_type ) ; if ( opp -> nd_opt_type == ND_OPT_LINK_INFO ) { l = ( op -> nd_opt_len << 3 ) - 2 ; print_lladdr ( ndo, cp + 2, l ) ; }",0
651,<S2SV_ModStart> -> root_node = ( RE_Node * ) yr_malloc ( sizeof ( RE_Node ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY <S2SV_ModEnd> ; return ERROR_SUCCESS,0
652,"<S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> \'%s\': <S2SV_blank> %s"" <S2SV_ModEnd>, key -> <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> \'%s\': <S2SV_blank> %s"" <S2SV_ModEnd>, str_c (",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSizeInMbs = picSizeInMbs ; dpb -> dpbSize = dpbSize,0
656,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;,0
657,<S2SV_ModStart> ( node ) { <S2SV_ModStart> ) ) ; },0
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> -> l2tp_addr ; np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; uint32_t valign = 0, hdr_size = 0 <S2SV_ModEnd> ; struct cli_exe_section",0
661,"<S2SV_ModStart> ( DM9000_REG_EPCR, EPCR_EPAR <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ( DM9000_REG_EPCR, EPCR_EPAR <S2SV_ModEnd> ) ; usleep",0
662,"<S2SV_ModStart> pcmk_ok ) { cib -> state = cib_connected_command ; cib -> type = cib_command ; <S2SV_ModStart> pcmk_ok ) { cib -> state = cib_connected_callback ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_ok == pcmk_ok? ""Connected"" : ""Disconnected"" <S2SV_ModEnd> ) ; }",0
663,<S2SV_ModStart> & address ; if ( msg. msg_name == NULL ) { err = - EINVAL ; goto out ; },0
664,<S2SV_ModStart> int new_mv_mode_penalty = 0 <S2SV_ModEnd> ; const int <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) tmp_err += <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) tmp_err += <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) tmp_err += <S2SV_ModStart> ) tmp_err += MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) * best_motion_err <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) * best_motion_err <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) tmp_err += <S2SV_ModStart> ) tmp_err += MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_VAL <S2SV_ModEnd> ) * best_motion_err <S2SV_ModStart> < INT_MAX - MAX_MVSEARCH_PENALTY_,0
665,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename )",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merged <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count",0
668,"<S2SV_ModStart>, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp ->",0
669,"<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) <S2SV_ModEnd>, ""\\""\'"", <S2SV_ModStart> MPR_TRIM_BOTH ) ; option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ;",0
670,"<S2SV_ModStart> user ) ; g_free <S2SV_ModEnd> ( client ) <S2SV_ModStart> ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
671,"<S2SV_ModStart> next ) { if ( iswhite ( uv ) ) markvalue ( g, uv -> v ) ; <S2SV_ModStart> work ++ ; <S2SV_ModEnd> } } return",0
